/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.ConversationIMChannelObjectFromConversationsMethodsSharesInner;
import org.openapitools.client.model.ConversationObjectParentConversationInner;
import org.openapitools.client.model.ObjsChannelLatestInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationIMChannelObjectFromConversationsMethods
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationIMChannelObjectFromConversationsMethods {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Integer created;

  public static final String SERIALIZED_NAME_HAS_PINS = "has_pins";
  @SerializedName(SERIALIZED_NAME_HAS_PINS)
  private Boolean hasPins;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "is_archived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_IS_EXT_SHARED = "is_ext_shared";
  @SerializedName(SERIALIZED_NAME_IS_EXT_SHARED)
  private Boolean isExtShared;

  public static final String SERIALIZED_NAME_IS_FROZEN = "is_frozen";
  @SerializedName(SERIALIZED_NAME_IS_FROZEN)
  private Boolean isFrozen;

  public static final String SERIALIZED_NAME_IS_IM = "is_im";
  @SerializedName(SERIALIZED_NAME_IS_IM)
  private Boolean isIm;

  public static final String SERIALIZED_NAME_IS_OPEN = "is_open";
  @SerializedName(SERIALIZED_NAME_IS_OPEN)
  private Boolean isOpen;

  public static final String SERIALIZED_NAME_IS_ORG_SHARED = "is_org_shared";
  @SerializedName(SERIALIZED_NAME_IS_ORG_SHARED)
  private Boolean isOrgShared;

  public static final String SERIALIZED_NAME_IS_SHARED = "is_shared";
  @SerializedName(SERIALIZED_NAME_IS_SHARED)
  private Boolean isShared;

  public static final String SERIALIZED_NAME_IS_STARRED = "is_starred";
  @SerializedName(SERIALIZED_NAME_IS_STARRED)
  private Boolean isStarred;

  public static final String SERIALIZED_NAME_IS_USER_DELETED = "is_user_deleted";
  @SerializedName(SERIALIZED_NAME_IS_USER_DELETED)
  private Boolean isUserDeleted;

  public static final String SERIALIZED_NAME_LAST_READ = "last_read";
  @SerializedName(SERIALIZED_NAME_LAST_READ)
  private String lastRead;

  public static final String SERIALIZED_NAME_LATEST = "latest";
  @SerializedName(SERIALIZED_NAME_LATEST)
  private List<ObjsChannelLatestInner> latest = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_CONVERSATION = "parent_conversation";
  @SerializedName(SERIALIZED_NAME_PARENT_CONVERSATION)
  private List<ConversationObjectParentConversationInner> parentConversation = new ArrayList<>();

  public static final String SERIALIZED_NAME_PIN_COUNT = "pin_count";
  @SerializedName(SERIALIZED_NAME_PIN_COUNT)
  private Integer pinCount;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private BigDecimal priority;

  public static final String SERIALIZED_NAME_SHARES = "shares";
  @SerializedName(SERIALIZED_NAME_SHARES)
  private Set<ConversationIMChannelObjectFromConversationsMethodsSharesInner> shares = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_UNREAD_COUNT = "unread_count";
  @SerializedName(SERIALIZED_NAME_UNREAD_COUNT)
  private Integer unreadCount;

  public static final String SERIALIZED_NAME_UNREAD_COUNT_DISPLAY = "unread_count_display";
  @SerializedName(SERIALIZED_NAME_UNREAD_COUNT_DISPLAY)
  private Integer unreadCountDisplay;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public ConversationIMChannelObjectFromConversationsMethods() {
  }

  public ConversationIMChannelObjectFromConversationsMethods created(Integer created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public Integer getCreated() {
    return created;
  }

  public void setCreated(Integer created) {
    this.created = created;
  }


  public ConversationIMChannelObjectFromConversationsMethods hasPins(Boolean hasPins) {
    this.hasPins = hasPins;
    return this;
  }

  /**
   * Get hasPins
   * @return hasPins
   */
  @javax.annotation.Nullable
  public Boolean getHasPins() {
    return hasPins;
  }

  public void setHasPins(Boolean hasPins) {
    this.hasPins = hasPins;
  }


  public ConversationIMChannelObjectFromConversationsMethods id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConversationIMChannelObjectFromConversationsMethods isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Get isArchived
   * @return isArchived
   */
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public ConversationIMChannelObjectFromConversationsMethods isExtShared(Boolean isExtShared) {
    this.isExtShared = isExtShared;
    return this;
  }

  /**
   * Get isExtShared
   * @return isExtShared
   */
  @javax.annotation.Nullable
  public Boolean getIsExtShared() {
    return isExtShared;
  }

  public void setIsExtShared(Boolean isExtShared) {
    this.isExtShared = isExtShared;
  }


  public ConversationIMChannelObjectFromConversationsMethods isFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
    return this;
  }

  /**
   * Get isFrozen
   * @return isFrozen
   */
  @javax.annotation.Nullable
  public Boolean getIsFrozen() {
    return isFrozen;
  }

  public void setIsFrozen(Boolean isFrozen) {
    this.isFrozen = isFrozen;
  }


  public ConversationIMChannelObjectFromConversationsMethods isIm(Boolean isIm) {
    this.isIm = isIm;
    return this;
  }

  /**
   * Get isIm
   * @return isIm
   */
  @javax.annotation.Nonnull
  public Boolean getIsIm() {
    return isIm;
  }

  public void setIsIm(Boolean isIm) {
    this.isIm = isIm;
  }


  public ConversationIMChannelObjectFromConversationsMethods isOpen(Boolean isOpen) {
    this.isOpen = isOpen;
    return this;
  }

  /**
   * Get isOpen
   * @return isOpen
   */
  @javax.annotation.Nullable
  public Boolean getIsOpen() {
    return isOpen;
  }

  public void setIsOpen(Boolean isOpen) {
    this.isOpen = isOpen;
  }


  public ConversationIMChannelObjectFromConversationsMethods isOrgShared(Boolean isOrgShared) {
    this.isOrgShared = isOrgShared;
    return this;
  }

  /**
   * Get isOrgShared
   * @return isOrgShared
   */
  @javax.annotation.Nonnull
  public Boolean getIsOrgShared() {
    return isOrgShared;
  }

  public void setIsOrgShared(Boolean isOrgShared) {
    this.isOrgShared = isOrgShared;
  }


  public ConversationIMChannelObjectFromConversationsMethods isShared(Boolean isShared) {
    this.isShared = isShared;
    return this;
  }

  /**
   * Get isShared
   * @return isShared
   */
  @javax.annotation.Nullable
  public Boolean getIsShared() {
    return isShared;
  }

  public void setIsShared(Boolean isShared) {
    this.isShared = isShared;
  }


  public ConversationIMChannelObjectFromConversationsMethods isStarred(Boolean isStarred) {
    this.isStarred = isStarred;
    return this;
  }

  /**
   * Get isStarred
   * @return isStarred
   */
  @javax.annotation.Nullable
  public Boolean getIsStarred() {
    return isStarred;
  }

  public void setIsStarred(Boolean isStarred) {
    this.isStarred = isStarred;
  }


  public ConversationIMChannelObjectFromConversationsMethods isUserDeleted(Boolean isUserDeleted) {
    this.isUserDeleted = isUserDeleted;
    return this;
  }

  /**
   * Get isUserDeleted
   * @return isUserDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsUserDeleted() {
    return isUserDeleted;
  }

  public void setIsUserDeleted(Boolean isUserDeleted) {
    this.isUserDeleted = isUserDeleted;
  }


  public ConversationIMChannelObjectFromConversationsMethods lastRead(String lastRead) {
    this.lastRead = lastRead;
    return this;
  }

  /**
   * Get lastRead
   * @return lastRead
   */
  @javax.annotation.Nullable
  public String getLastRead() {
    return lastRead;
  }

  public void setLastRead(String lastRead) {
    this.lastRead = lastRead;
  }


  public ConversationIMChannelObjectFromConversationsMethods latest(List<ObjsChannelLatestInner> latest) {
    this.latest = latest;
    return this;
  }

  public ConversationIMChannelObjectFromConversationsMethods addLatestItem(ObjsChannelLatestInner latestItem) {
    if (this.latest == null) {
      this.latest = new ArrayList<>();
    }
    this.latest.add(latestItem);
    return this;
  }

  /**
   * Get latest
   * @return latest
   */
  @javax.annotation.Nullable
  public List<ObjsChannelLatestInner> getLatest() {
    return latest;
  }

  public void setLatest(List<ObjsChannelLatestInner> latest) {
    this.latest = latest;
  }


  public ConversationIMChannelObjectFromConversationsMethods parentConversation(List<ConversationObjectParentConversationInner> parentConversation) {
    this.parentConversation = parentConversation;
    return this;
  }

  public ConversationIMChannelObjectFromConversationsMethods addParentConversationItem(ConversationObjectParentConversationInner parentConversationItem) {
    if (this.parentConversation == null) {
      this.parentConversation = new ArrayList<>();
    }
    this.parentConversation.add(parentConversationItem);
    return this;
  }

  /**
   * Get parentConversation
   * @return parentConversation
   */
  @javax.annotation.Nullable
  public List<ConversationObjectParentConversationInner> getParentConversation() {
    return parentConversation;
  }

  public void setParentConversation(List<ConversationObjectParentConversationInner> parentConversation) {
    this.parentConversation = parentConversation;
  }


  public ConversationIMChannelObjectFromConversationsMethods pinCount(Integer pinCount) {
    this.pinCount = pinCount;
    return this;
  }

  /**
   * Get pinCount
   * @return pinCount
   */
  @javax.annotation.Nullable
  public Integer getPinCount() {
    return pinCount;
  }

  public void setPinCount(Integer pinCount) {
    this.pinCount = pinCount;
  }


  public ConversationIMChannelObjectFromConversationsMethods priority(BigDecimal priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nonnull
  public BigDecimal getPriority() {
    return priority;
  }

  public void setPriority(BigDecimal priority) {
    this.priority = priority;
  }


  public ConversationIMChannelObjectFromConversationsMethods shares(Set<ConversationIMChannelObjectFromConversationsMethodsSharesInner> shares) {
    this.shares = shares;
    return this;
  }

  public ConversationIMChannelObjectFromConversationsMethods addSharesItem(ConversationIMChannelObjectFromConversationsMethodsSharesInner sharesItem) {
    if (this.shares == null) {
      this.shares = new LinkedHashSet<>();
    }
    this.shares.add(sharesItem);
    return this;
  }

  /**
   * Get shares
   * @return shares
   */
  @javax.annotation.Nullable
  public Set<ConversationIMChannelObjectFromConversationsMethodsSharesInner> getShares() {
    return shares;
  }

  public void setShares(Set<ConversationIMChannelObjectFromConversationsMethodsSharesInner> shares) {
    this.shares = shares;
  }


  public ConversationIMChannelObjectFromConversationsMethods unreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
    return this;
  }

  /**
   * Get unreadCount
   * @return unreadCount
   */
  @javax.annotation.Nullable
  public Integer getUnreadCount() {
    return unreadCount;
  }

  public void setUnreadCount(Integer unreadCount) {
    this.unreadCount = unreadCount;
  }


  public ConversationIMChannelObjectFromConversationsMethods unreadCountDisplay(Integer unreadCountDisplay) {
    this.unreadCountDisplay = unreadCountDisplay;
    return this;
  }

  /**
   * Get unreadCountDisplay
   * @return unreadCountDisplay
   */
  @javax.annotation.Nullable
  public Integer getUnreadCountDisplay() {
    return unreadCountDisplay;
  }

  public void setUnreadCountDisplay(Integer unreadCountDisplay) {
    this.unreadCountDisplay = unreadCountDisplay;
  }


  public ConversationIMChannelObjectFromConversationsMethods user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nonnull
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }


  public ConversationIMChannelObjectFromConversationsMethods version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationIMChannelObjectFromConversationsMethods conversationIMChannelObjectFromConversationsMethods = (ConversationIMChannelObjectFromConversationsMethods) o;
    return Objects.equals(this.created, conversationIMChannelObjectFromConversationsMethods.created) &&
        Objects.equals(this.hasPins, conversationIMChannelObjectFromConversationsMethods.hasPins) &&
        Objects.equals(this.id, conversationIMChannelObjectFromConversationsMethods.id) &&
        Objects.equals(this.isArchived, conversationIMChannelObjectFromConversationsMethods.isArchived) &&
        Objects.equals(this.isExtShared, conversationIMChannelObjectFromConversationsMethods.isExtShared) &&
        Objects.equals(this.isFrozen, conversationIMChannelObjectFromConversationsMethods.isFrozen) &&
        Objects.equals(this.isIm, conversationIMChannelObjectFromConversationsMethods.isIm) &&
        Objects.equals(this.isOpen, conversationIMChannelObjectFromConversationsMethods.isOpen) &&
        Objects.equals(this.isOrgShared, conversationIMChannelObjectFromConversationsMethods.isOrgShared) &&
        Objects.equals(this.isShared, conversationIMChannelObjectFromConversationsMethods.isShared) &&
        Objects.equals(this.isStarred, conversationIMChannelObjectFromConversationsMethods.isStarred) &&
        Objects.equals(this.isUserDeleted, conversationIMChannelObjectFromConversationsMethods.isUserDeleted) &&
        Objects.equals(this.lastRead, conversationIMChannelObjectFromConversationsMethods.lastRead) &&
        Objects.equals(this.latest, conversationIMChannelObjectFromConversationsMethods.latest) &&
        Objects.equals(this.parentConversation, conversationIMChannelObjectFromConversationsMethods.parentConversation) &&
        Objects.equals(this.pinCount, conversationIMChannelObjectFromConversationsMethods.pinCount) &&
        Objects.equals(this.priority, conversationIMChannelObjectFromConversationsMethods.priority) &&
        Objects.equals(this.shares, conversationIMChannelObjectFromConversationsMethods.shares) &&
        Objects.equals(this.unreadCount, conversationIMChannelObjectFromConversationsMethods.unreadCount) &&
        Objects.equals(this.unreadCountDisplay, conversationIMChannelObjectFromConversationsMethods.unreadCountDisplay) &&
        Objects.equals(this.user, conversationIMChannelObjectFromConversationsMethods.user) &&
        Objects.equals(this.version, conversationIMChannelObjectFromConversationsMethods.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, hasPins, id, isArchived, isExtShared, isFrozen, isIm, isOpen, isOrgShared, isShared, isStarred, isUserDeleted, lastRead, latest, parentConversation, pinCount, priority, shares, unreadCount, unreadCountDisplay, user, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationIMChannelObjectFromConversationsMethods {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    hasPins: ").append(toIndentedString(hasPins)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    isExtShared: ").append(toIndentedString(isExtShared)).append("\n");
    sb.append("    isFrozen: ").append(toIndentedString(isFrozen)).append("\n");
    sb.append("    isIm: ").append(toIndentedString(isIm)).append("\n");
    sb.append("    isOpen: ").append(toIndentedString(isOpen)).append("\n");
    sb.append("    isOrgShared: ").append(toIndentedString(isOrgShared)).append("\n");
    sb.append("    isShared: ").append(toIndentedString(isShared)).append("\n");
    sb.append("    isStarred: ").append(toIndentedString(isStarred)).append("\n");
    sb.append("    isUserDeleted: ").append(toIndentedString(isUserDeleted)).append("\n");
    sb.append("    lastRead: ").append(toIndentedString(lastRead)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    parentConversation: ").append(toIndentedString(parentConversation)).append("\n");
    sb.append("    pinCount: ").append(toIndentedString(pinCount)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    shares: ").append(toIndentedString(shares)).append("\n");
    sb.append("    unreadCount: ").append(toIndentedString(unreadCount)).append("\n");
    sb.append("    unreadCountDisplay: ").append(toIndentedString(unreadCountDisplay)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("has_pins");
    openapiFields.add("id");
    openapiFields.add("is_archived");
    openapiFields.add("is_ext_shared");
    openapiFields.add("is_frozen");
    openapiFields.add("is_im");
    openapiFields.add("is_open");
    openapiFields.add("is_org_shared");
    openapiFields.add("is_shared");
    openapiFields.add("is_starred");
    openapiFields.add("is_user_deleted");
    openapiFields.add("last_read");
    openapiFields.add("latest");
    openapiFields.add("parent_conversation");
    openapiFields.add("pin_count");
    openapiFields.add("priority");
    openapiFields.add("shares");
    openapiFields.add("unread_count");
    openapiFields.add("unread_count_display");
    openapiFields.add("user");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("is_im");
    openapiRequiredFields.add("is_org_shared");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationIMChannelObjectFromConversationsMethods
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationIMChannelObjectFromConversationsMethods.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationIMChannelObjectFromConversationsMethods is not found in the empty JSON string", ConversationIMChannelObjectFromConversationsMethods.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationIMChannelObjectFromConversationsMethods.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationIMChannelObjectFromConversationsMethods` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConversationIMChannelObjectFromConversationsMethods.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_read") != null && !jsonObj.get("last_read").isJsonNull()) && !jsonObj.get("last_read").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_read` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_read").toString()));
      }
      if (jsonObj.get("latest") != null && !jsonObj.get("latest").isJsonNull()) {
        JsonArray jsonArraylatest = jsonObj.getAsJsonArray("latest");
        if (jsonArraylatest != null) {
          // ensure the json data is an array
          if (!jsonObj.get("latest").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `latest` to be an array in the JSON string but got `%s`", jsonObj.get("latest").toString()));
          }

          // validate the optional field `latest` (array)
          for (int i = 0; i < jsonArraylatest.size(); i++) {
            ObjsChannelLatestInner.validateJsonElement(jsonArraylatest.get(i));
          };
        }
      }
      if (jsonObj.get("parent_conversation") != null && !jsonObj.get("parent_conversation").isJsonNull()) {
        JsonArray jsonArrayparentConversation = jsonObj.getAsJsonArray("parent_conversation");
        if (jsonArrayparentConversation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parent_conversation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parent_conversation` to be an array in the JSON string but got `%s`", jsonObj.get("parent_conversation").toString()));
          }

          // validate the optional field `parent_conversation` (array)
          for (int i = 0; i < jsonArrayparentConversation.size(); i++) {
            ConversationObjectParentConversationInner.validateJsonElement(jsonArrayparentConversation.get(i));
          };
        }
      }
      if (jsonObj.get("shares") != null && !jsonObj.get("shares").isJsonNull()) {
        JsonArray jsonArrayshares = jsonObj.getAsJsonArray("shares");
        if (jsonArrayshares != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shares").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shares` to be an array in the JSON string but got `%s`", jsonObj.get("shares").toString()));
          }

          // validate the optional field `shares` (array)
          for (int i = 0; i < jsonArrayshares.size(); i++) {
            ConversationIMChannelObjectFromConversationsMethodsSharesInner.validateJsonElement(jsonArrayshares.get(i));
          };
        }
      }
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationIMChannelObjectFromConversationsMethods.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationIMChannelObjectFromConversationsMethods' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationIMChannelObjectFromConversationsMethods> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationIMChannelObjectFromConversationsMethods.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationIMChannelObjectFromConversationsMethods>() {
           @Override
           public void write(JsonWriter out, ConversationIMChannelObjectFromConversationsMethods value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationIMChannelObjectFromConversationsMethods read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationIMChannelObjectFromConversationsMethods given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationIMChannelObjectFromConversationsMethods
   * @throws IOException if the JSON string is invalid with respect to ConversationIMChannelObjectFromConversationsMethods
   */
  public static ConversationIMChannelObjectFromConversationsMethods fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationIMChannelObjectFromConversationsMethods.class);
  }

  /**
   * Convert an instance of ConversationIMChannelObjectFromConversationsMethods to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

