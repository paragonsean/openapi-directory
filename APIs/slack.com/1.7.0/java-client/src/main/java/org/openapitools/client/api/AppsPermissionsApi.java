/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppsPermissionsInfoErrorSchema;
import org.openapitools.client.model.AppsPermissionsInfoSchema;
import org.openapitools.client.model.AppsPermissionsRequestErrorSchema;
import org.openapitools.client.model.AppsPermissionsRequestSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppsPermissionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsPermissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppsPermissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appsPermissionsInfo
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.info"> Documentation</a>
     */
    public okhttp3.Call appsPermissionsInfoCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps.permissions.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPermissionsInfoValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        return appsPermissionsInfoCall(token, _callback);

    }

    /**
     * 
     * Returns list of permissions this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @return AppsPermissionsInfoSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.info"> Documentation</a>
     */
    public AppsPermissionsInfoSchema appsPermissionsInfo(String token) throws ApiException {
        ApiResponse<AppsPermissionsInfoSchema> localVarResp = appsPermissionsInfoWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns list of permissions this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @return ApiResponse&lt;AppsPermissionsInfoSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.info"> Documentation</a>
     */
    public ApiResponse<AppsPermissionsInfoSchema> appsPermissionsInfoWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = appsPermissionsInfoValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<AppsPermissionsInfoSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns list of permissions this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.info"> Documentation</a>
     */
    public okhttp3.Call appsPermissionsInfoAsync(String token, final ApiCallback<AppsPermissionsInfoSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPermissionsInfoValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<AppsPermissionsInfoSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPermissionsRequest
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param scopes A comma separated list of scopes to request for (required)
     * @param triggerId Token used to trigger the permissions API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.request"> Documentation</a>
     */
    public okhttp3.Call appsPermissionsRequestCall(String token, String scopes, String triggerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps.permissions.request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (scopes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopes", scopes));
        }

        if (triggerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_id", triggerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPermissionsRequestValidateBeforeCall(String token, String scopes, String triggerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling appsPermissionsRequest(Async)");
        }

        // verify the required parameter 'scopes' is set
        if (scopes == null) {
            throw new ApiException("Missing the required parameter 'scopes' when calling appsPermissionsRequest(Async)");
        }

        // verify the required parameter 'triggerId' is set
        if (triggerId == null) {
            throw new ApiException("Missing the required parameter 'triggerId' when calling appsPermissionsRequest(Async)");
        }

        return appsPermissionsRequestCall(token, scopes, triggerId, _callback);

    }

    /**
     * 
     * Allows an app to request additional scopes
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param scopes A comma separated list of scopes to request for (required)
     * @param triggerId Token used to trigger the permissions API (required)
     * @return AppsPermissionsRequestSchema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.request"> Documentation</a>
     */
    public AppsPermissionsRequestSchema appsPermissionsRequest(String token, String scopes, String triggerId) throws ApiException {
        ApiResponse<AppsPermissionsRequestSchema> localVarResp = appsPermissionsRequestWithHttpInfo(token, scopes, triggerId);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows an app to request additional scopes
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param scopes A comma separated list of scopes to request for (required)
     * @param triggerId Token used to trigger the permissions API (required)
     * @return ApiResponse&lt;AppsPermissionsRequestSchema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.request"> Documentation</a>
     */
    public ApiResponse<AppsPermissionsRequestSchema> appsPermissionsRequestWithHttpInfo(String token, String scopes, String triggerId) throws ApiException {
        okhttp3.Call localVarCall = appsPermissionsRequestValidateBeforeCall(token, scopes, triggerId, null);
        Type localVarReturnType = new TypeToken<AppsPermissionsRequestSchema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows an app to request additional scopes
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param scopes A comma separated list of scopes to request for (required)
     * @param triggerId Token used to trigger the permissions API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.request"> Documentation</a>
     */
    public okhttp3.Call appsPermissionsRequestAsync(String token, String scopes, String triggerId, final ApiCallback<AppsPermissionsRequestSchema> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPermissionsRequestValidateBeforeCall(token, scopes, triggerId, _callback);
        Type localVarReturnType = new TypeToken<AppsPermissionsRequestSchema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
