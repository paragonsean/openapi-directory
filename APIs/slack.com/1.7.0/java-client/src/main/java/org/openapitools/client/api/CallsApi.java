/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CallsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CallsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for callsAdd
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param externalUniqueId An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. (required)
     * @param joinUrl The URL required for a client to join the Call. (required)
     * @param createdBy The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required. (optional)
     * @param dateStart Call start time in UTC UNIX timestamp format (optional)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param externalDisplayId An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. (optional)
     * @param title The name of the Call. (optional)
     * @param users The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.add"> Documentation</a>
     */
    public okhttp3.Call callsAddCall(String token, String externalUniqueId, String joinUrl, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String title, String users, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calls.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdBy != null) {
            localVarFormParams.put("created_by", createdBy);
        }

        if (dateStart != null) {
            localVarFormParams.put("date_start", dateStart);
        }

        if (desktopAppJoinUrl != null) {
            localVarFormParams.put("desktop_app_join_url", desktopAppJoinUrl);
        }

        if (externalDisplayId != null) {
            localVarFormParams.put("external_display_id", externalDisplayId);
        }

        if (externalUniqueId != null) {
            localVarFormParams.put("external_unique_id", externalUniqueId);
        }

        if (joinUrl != null) {
            localVarFormParams.put("join_url", joinUrl);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsAddValidateBeforeCall(String token, String externalUniqueId, String joinUrl, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String title, String users, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling callsAdd(Async)");
        }

        // verify the required parameter 'externalUniqueId' is set
        if (externalUniqueId == null) {
            throw new ApiException("Missing the required parameter 'externalUniqueId' when calling callsAdd(Async)");
        }

        // verify the required parameter 'joinUrl' is set
        if (joinUrl == null) {
            throw new ApiException("Missing the required parameter 'joinUrl' when calling callsAdd(Async)");
        }

        return callsAddCall(token, externalUniqueId, joinUrl, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, title, users, _callback);

    }

    /**
     * 
     * Registers a new Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param externalUniqueId An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. (required)
     * @param joinUrl The URL required for a client to join the Call. (required)
     * @param createdBy The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required. (optional)
     * @param dateStart Call start time in UTC UNIX timestamp format (optional)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param externalDisplayId An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. (optional)
     * @param title The name of the Call. (optional)
     * @param users The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.add"> Documentation</a>
     */
    public DefaultSuccessTemplate callsAdd(String token, String externalUniqueId, String joinUrl, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String title, String users) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = callsAddWithHttpInfo(token, externalUniqueId, joinUrl, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, title, users);
        return localVarResp.getData();
    }

    /**
     * 
     * Registers a new Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param externalUniqueId An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. (required)
     * @param joinUrl The URL required for a client to join the Call. (required)
     * @param createdBy The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required. (optional)
     * @param dateStart Call start time in UTC UNIX timestamp format (optional)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param externalDisplayId An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. (optional)
     * @param title The name of the Call. (optional)
     * @param users The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.add"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> callsAddWithHttpInfo(String token, String externalUniqueId, String joinUrl, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String title, String users) throws ApiException {
        okhttp3.Call localVarCall = callsAddValidateBeforeCall(token, externalUniqueId, joinUrl, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, title, users, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Registers a new Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param externalUniqueId An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. (required)
     * @param joinUrl The URL required for a client to join the Call. (required)
     * @param createdBy The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required. (optional)
     * @param dateStart Call start time in UTC UNIX timestamp format (optional)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param externalDisplayId An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. (optional)
     * @param title The name of the Call. (optional)
     * @param users The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.add"> Documentation</a>
     */
    public okhttp3.Call callsAddAsync(String token, String externalUniqueId, String joinUrl, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String title, String users, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsAddValidateBeforeCall(token, externalUniqueId, joinUrl, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, title, users, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsEnd
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param duration Call duration in seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.end"> Documentation</a>
     */
    public okhttp3.Call callsEndCall(String token, String id, Integer duration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calls.end";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsEndValidateBeforeCall(String token, String id, Integer duration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling callsEnd(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling callsEnd(Async)");
        }

        return callsEndCall(token, id, duration, _callback);

    }

    /**
     * 
     * Ends a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param duration Call duration in seconds (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.end"> Documentation</a>
     */
    public DefaultSuccessTemplate callsEnd(String token, String id, Integer duration) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = callsEndWithHttpInfo(token, id, duration);
        return localVarResp.getData();
    }

    /**
     * 
     * Ends a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param duration Call duration in seconds (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.end"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> callsEndWithHttpInfo(String token, String id, Integer duration) throws ApiException {
        okhttp3.Call localVarCall = callsEndValidateBeforeCall(token, id, duration, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Ends a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param duration Call duration in seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.end"> Documentation</a>
     */
    public okhttp3.Call callsEndAsync(String token, String id, Integer duration, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsEndValidateBeforeCall(token, id, duration, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsInfo
     * @param token Authentication token. Requires scope: &#x60;calls:read&#x60; (required)
     * @param id &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.info"> Documentation</a>
     */
    public okhttp3.Call callsInfoCall(String token, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calls.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsInfoValidateBeforeCall(String token, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling callsInfo(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling callsInfo(Async)");
        }

        return callsInfoCall(token, id, _callback);

    }

    /**
     * 
     * Returns information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:read&#x60; (required)
     * @param id &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.info"> Documentation</a>
     */
    public DefaultSuccessTemplate callsInfo(String token, String id) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = callsInfoWithHttpInfo(token, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:read&#x60; (required)
     * @param id &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.info"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> callsInfoWithHttpInfo(String token, String id) throws ApiException {
        okhttp3.Call localVarCall = callsInfoValidateBeforeCall(token, id, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:read&#x60; (required)
     * @param id &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.info"> Documentation</a>
     */
    public okhttp3.Call callsInfoAsync(String token, String id, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsInfoValidateBeforeCall(token, id, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsParticipantsAdd_0
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.add"> Documentation</a>
     */
    public okhttp3.Call callsParticipantsAdd_0Call(String token, String id, String users, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calls.participants.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsParticipantsAdd_0ValidateBeforeCall(String token, String id, String users, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling callsParticipantsAdd_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling callsParticipantsAdd_0(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling callsParticipantsAdd_0(Async)");
        }

        return callsParticipantsAdd_0Call(token, id, users, _callback);

    }

    /**
     * 
     * Registers new participants added to a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.add"> Documentation</a>
     */
    public DefaultSuccessTemplate callsParticipantsAdd_0(String token, String id, String users) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = callsParticipantsAdd_0WithHttpInfo(token, id, users);
        return localVarResp.getData();
    }

    /**
     * 
     * Registers new participants added to a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.add"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> callsParticipantsAdd_0WithHttpInfo(String token, String id, String users) throws ApiException {
        okhttp3.Call localVarCall = callsParticipantsAdd_0ValidateBeforeCall(token, id, users, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Registers new participants added to a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.add"> Documentation</a>
     */
    public okhttp3.Call callsParticipantsAdd_0Async(String token, String id, String users, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsParticipantsAdd_0ValidateBeforeCall(token, id, users, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsParticipantsRemove_0
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.remove"> Documentation</a>
     */
    public okhttp3.Call callsParticipantsRemove_0Call(String token, String id, String users, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calls.participants.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsParticipantsRemove_0ValidateBeforeCall(String token, String id, String users, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling callsParticipantsRemove_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling callsParticipantsRemove_0(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling callsParticipantsRemove_0(Async)");
        }

        return callsParticipantsRemove_0Call(token, id, users, _callback);

    }

    /**
     * 
     * Registers participants removed from a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.remove"> Documentation</a>
     */
    public DefaultSuccessTemplate callsParticipantsRemove_0(String token, String id, String users) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = callsParticipantsRemove_0WithHttpInfo(token, id, users);
        return localVarResp.getData();
    }

    /**
     * 
     * Registers participants removed from a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.remove"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> callsParticipantsRemove_0WithHttpInfo(String token, String id, String users) throws ApiException {
        okhttp3.Call localVarCall = callsParticipantsRemove_0ValidateBeforeCall(token, id, users, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Registers participants removed from a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param users The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.remove"> Documentation</a>
     */
    public okhttp3.Call callsParticipantsRemove_0Async(String token, String id, String users, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsParticipantsRemove_0ValidateBeforeCall(token, id, users, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for callsUpdate
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param joinUrl The URL required for a client to join the Call. (optional)
     * @param title The name of the Call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.update"> Documentation</a>
     */
    public okhttp3.Call callsUpdateCall(String token, String id, String desktopAppJoinUrl, String joinUrl, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calls.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (desktopAppJoinUrl != null) {
            localVarFormParams.put("desktop_app_join_url", desktopAppJoinUrl);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (joinUrl != null) {
            localVarFormParams.put("join_url", joinUrl);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call callsUpdateValidateBeforeCall(String token, String id, String desktopAppJoinUrl, String joinUrl, String title, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling callsUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling callsUpdate(Async)");
        }

        return callsUpdateCall(token, id, desktopAppJoinUrl, joinUrl, title, _callback);

    }

    /**
     * 
     * Updates information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param joinUrl The URL required for a client to join the Call. (optional)
     * @param title The name of the Call. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.update"> Documentation</a>
     */
    public DefaultSuccessTemplate callsUpdate(String token, String id, String desktopAppJoinUrl, String joinUrl, String title) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = callsUpdateWithHttpInfo(token, id, desktopAppJoinUrl, joinUrl, title);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param joinUrl The URL required for a client to join the Call. (optional)
     * @param title The name of the Call. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.update"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> callsUpdateWithHttpInfo(String token, String id, String desktopAppJoinUrl, String joinUrl, String title) throws ApiException {
        okhttp3.Call localVarCall = callsUpdateValidateBeforeCall(token, id, desktopAppJoinUrl, joinUrl, title, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method. (required)
     * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
     * @param joinUrl The URL required for a client to join the Call. (optional)
     * @param title The name of the Call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.update"> Documentation</a>
     */
    public okhttp3.Call callsUpdateAsync(String token, String id, String desktopAppJoinUrl, String joinUrl, String title, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = callsUpdateValidateBeforeCall(token, id, desktopAppJoinUrl, joinUrl, title, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
