/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TeamIntegrationLogsSchemaLogsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:39.442809-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamIntegrationLogsSchemaLogsInner {
  public static final String SERIALIZED_NAME_ADMIN_APP_ID = "admin_app_id";
  @SerializedName(SERIALIZED_NAME_ADMIN_APP_ID)
  private String adminAppId;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_TYPE = "app_type";
  @SerializedName(SERIALIZED_NAME_APP_TYPE)
  private String appType;

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "change_type";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private String changeType;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SERVICE_ID = "service_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "service_type";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private String serviceType;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public TeamIntegrationLogsSchemaLogsInner() {
  }

  public TeamIntegrationLogsSchemaLogsInner adminAppId(String adminAppId) {
    this.adminAppId = adminAppId;
    return this;
  }

  /**
   * Get adminAppId
   * @return adminAppId
   */
  @javax.annotation.Nullable
  public String getAdminAppId() {
    return adminAppId;
  }

  public void setAdminAppId(String adminAppId) {
    this.adminAppId = adminAppId;
  }


  public TeamIntegrationLogsSchemaLogsInner appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Get appId
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public TeamIntegrationLogsSchemaLogsInner appType(String appType) {
    this.appType = appType;
    return this;
  }

  /**
   * Get appType
   * @return appType
   */
  @javax.annotation.Nonnull
  public String getAppType() {
    return appType;
  }

  public void setAppType(String appType) {
    this.appType = appType;
  }


  public TeamIntegrationLogsSchemaLogsInner changeType(String changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * Get changeType
   * @return changeType
   */
  @javax.annotation.Nonnull
  public String getChangeType() {
    return changeType;
  }

  public void setChangeType(String changeType) {
    this.changeType = changeType;
  }


  public TeamIntegrationLogsSchemaLogsInner channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public TeamIntegrationLogsSchemaLogsInner date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public TeamIntegrationLogsSchemaLogsInner scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nonnull
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public TeamIntegrationLogsSchemaLogsInner serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * Get serviceId
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public TeamIntegrationLogsSchemaLogsInner serviceType(String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * Get serviceType
   * @return serviceType
   */
  @javax.annotation.Nullable
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }


  public TeamIntegrationLogsSchemaLogsInner userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public TeamIntegrationLogsSchemaLogsInner userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamIntegrationLogsSchemaLogsInner teamIntegrationLogsSchemaLogsInner = (TeamIntegrationLogsSchemaLogsInner) o;
    return Objects.equals(this.adminAppId, teamIntegrationLogsSchemaLogsInner.adminAppId) &&
        Objects.equals(this.appId, teamIntegrationLogsSchemaLogsInner.appId) &&
        Objects.equals(this.appType, teamIntegrationLogsSchemaLogsInner.appType) &&
        Objects.equals(this.changeType, teamIntegrationLogsSchemaLogsInner.changeType) &&
        Objects.equals(this.channel, teamIntegrationLogsSchemaLogsInner.channel) &&
        Objects.equals(this.date, teamIntegrationLogsSchemaLogsInner.date) &&
        Objects.equals(this.scope, teamIntegrationLogsSchemaLogsInner.scope) &&
        Objects.equals(this.serviceId, teamIntegrationLogsSchemaLogsInner.serviceId) &&
        Objects.equals(this.serviceType, teamIntegrationLogsSchemaLogsInner.serviceType) &&
        Objects.equals(this.userId, teamIntegrationLogsSchemaLogsInner.userId) &&
        Objects.equals(this.userName, teamIntegrationLogsSchemaLogsInner.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminAppId, appId, appType, changeType, channel, date, scope, serviceId, serviceType, userId, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamIntegrationLogsSchemaLogsInner {\n");
    sb.append("    adminAppId: ").append(toIndentedString(adminAppId)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appType: ").append(toIndentedString(appType)).append("\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin_app_id");
    openapiFields.add("app_id");
    openapiFields.add("app_type");
    openapiFields.add("change_type");
    openapiFields.add("channel");
    openapiFields.add("date");
    openapiFields.add("scope");
    openapiFields.add("service_id");
    openapiFields.add("service_type");
    openapiFields.add("user_id");
    openapiFields.add("user_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("app_type");
    openapiRequiredFields.add("change_type");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("user_name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamIntegrationLogsSchemaLogsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamIntegrationLogsSchemaLogsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamIntegrationLogsSchemaLogsInner is not found in the empty JSON string", TeamIntegrationLogsSchemaLogsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamIntegrationLogsSchemaLogsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamIntegrationLogsSchemaLogsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TeamIntegrationLogsSchemaLogsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("admin_app_id") != null && !jsonObj.get("admin_app_id").isJsonNull()) && !jsonObj.get("admin_app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_app_id").toString()));
      }
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (!jsonObj.get("app_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_type").toString()));
      }
      if (!jsonObj.get("change_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `change_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("change_type").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("service_id") != null && !jsonObj.get("service_id").isJsonNull()) && !jsonObj.get("service_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_id").toString()));
      }
      if ((jsonObj.get("service_type") != null && !jsonObj.get("service_type").isJsonNull()) && !jsonObj.get("service_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_type").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if (!jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamIntegrationLogsSchemaLogsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamIntegrationLogsSchemaLogsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamIntegrationLogsSchemaLogsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamIntegrationLogsSchemaLogsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamIntegrationLogsSchemaLogsInner>() {
           @Override
           public void write(JsonWriter out, TeamIntegrationLogsSchemaLogsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamIntegrationLogsSchemaLogsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamIntegrationLogsSchemaLogsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamIntegrationLogsSchemaLogsInner
   * @throws IOException if the JSON string is invalid with respect to TeamIntegrationLogsSchemaLogsInner
   */
  public static TeamIntegrationLogsSchemaLogsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamIntegrationLogsSchemaLogsInner.class);
  }

  /**
   * Convert an instance of TeamIntegrationLogsSchemaLogsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

