/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ViewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for viewsOpen
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.open"> Documentation</a>
     */
    public okhttp3.Call viewsOpenCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.open";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (triggerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_id", triggerId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewsOpenValidateBeforeCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling viewsOpen(Async)");
        }

        // verify the required parameter 'triggerId' is set
        if (triggerId == null) {
            throw new ApiException("Missing the required parameter 'triggerId' when calling viewsOpen(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling viewsOpen(Async)");
        }

        return viewsOpenCall(token, triggerId, view, _callback);

    }

    /**
     * 
     * Open a view for a user.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.open"> Documentation</a>
     */
    public DefaultSuccessTemplate viewsOpen(String token, String triggerId, String view) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = viewsOpenWithHttpInfo(token, triggerId, view);
        return localVarResp.getData();
    }

    /**
     * 
     * Open a view for a user.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.open"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> viewsOpenWithHttpInfo(String token, String triggerId, String view) throws ApiException {
        okhttp3.Call localVarCall = viewsOpenValidateBeforeCall(token, triggerId, view, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Open a view for a user.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.open"> Documentation</a>
     */
    public okhttp3.Call viewsOpenAsync(String token, String triggerId, String view, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewsOpenValidateBeforeCall(token, triggerId, view, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewsPublish
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param userId &#x60;id&#x60; of the user you want publish a view to. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.publish"> Documentation</a>
     */
    public okhttp3.Call viewsPublishCall(String token, String userId, String view, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.publish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewsPublishValidateBeforeCall(String token, String userId, String view, String hash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling viewsPublish(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling viewsPublish(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling viewsPublish(Async)");
        }

        return viewsPublishCall(token, userId, view, hash, _callback);

    }

    /**
     * 
     * Publish a static view for a User.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param userId &#x60;id&#x60; of the user you want publish a view to. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.publish"> Documentation</a>
     */
    public DefaultSuccessTemplate viewsPublish(String token, String userId, String view, String hash) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = viewsPublishWithHttpInfo(token, userId, view, hash);
        return localVarResp.getData();
    }

    /**
     * 
     * Publish a static view for a User.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param userId &#x60;id&#x60; of the user you want publish a view to. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.publish"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> viewsPublishWithHttpInfo(String token, String userId, String view, String hash) throws ApiException {
        okhttp3.Call localVarCall = viewsPublishValidateBeforeCall(token, userId, view, hash, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Publish a static view for a User.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param userId &#x60;id&#x60; of the user you want publish a view to. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.publish"> Documentation</a>
     */
    public okhttp3.Call viewsPublishAsync(String token, String userId, String view, String hash, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewsPublishValidateBeforeCall(token, userId, view, hash, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewsPush
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.push"> Documentation</a>
     */
    public okhttp3.Call viewsPushCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.push";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (triggerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_id", triggerId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewsPushValidateBeforeCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling viewsPush(Async)");
        }

        // verify the required parameter 'triggerId' is set
        if (triggerId == null) {
            throw new ApiException("Missing the required parameter 'triggerId' when calling viewsPush(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling viewsPush(Async)");
        }

        return viewsPushCall(token, triggerId, view, _callback);

    }

    /**
     * 
     * Push a view onto the stack of a root view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.push"> Documentation</a>
     */
    public DefaultSuccessTemplate viewsPush(String token, String triggerId, String view) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = viewsPushWithHttpInfo(token, triggerId, view);
        return localVarResp.getData();
    }

    /**
     * 
     * Push a view onto the stack of a root view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.push"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> viewsPushWithHttpInfo(String token, String triggerId, String view) throws ApiException {
        okhttp3.Call localVarCall = viewsPushValidateBeforeCall(token, triggerId, view, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Push a view onto the stack of a root view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.push"> Documentation</a>
     */
    public okhttp3.Call viewsPushAsync(String token, String triggerId, String view, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewsPushValidateBeforeCall(token, triggerId, view, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewsUpdate
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param viewId A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param externalId A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param view A [view object](/reference/surfaces/views). This must be a JSON-encoded string. (optional)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.update"> Documentation</a>
     */
    public okhttp3.Call viewsUpdateCall(String token, String viewId, String externalId, String view, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (viewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view_id", viewId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewsUpdateValidateBeforeCall(String token, String viewId, String externalId, String view, String hash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling viewsUpdate(Async)");
        }

        return viewsUpdateCall(token, viewId, externalId, view, hash, _callback);

    }

    /**
     * 
     * Update an existing view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param viewId A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param externalId A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param view A [view object](/reference/surfaces/views). This must be a JSON-encoded string. (optional)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.update"> Documentation</a>
     */
    public DefaultSuccessTemplate viewsUpdate(String token, String viewId, String externalId, String view, String hash) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = viewsUpdateWithHttpInfo(token, viewId, externalId, view, hash);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param viewId A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param externalId A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param view A [view object](/reference/surfaces/views). This must be a JSON-encoded string. (optional)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.update"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> viewsUpdateWithHttpInfo(String token, String viewId, String externalId, String view, String hash) throws ApiException {
        okhttp3.Call localVarCall = viewsUpdateValidateBeforeCall(token, viewId, externalId, view, hash, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param viewId A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param externalId A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
     * @param view A [view object](/reference/surfaces/views). This must be a JSON-encoded string. (optional)
     * @param hash A string that represents view state to protect against possible race conditions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.update"> Documentation</a>
     */
    public okhttp3.Call viewsUpdateAsync(String token, String viewId, String externalId, String view, String hash, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewsUpdateValidateBeforeCall(token, viewId, externalId, view, hash, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
