/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdminUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AdminUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminUsersAssign
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to add to the workspace. (required)
     * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param isRestricted True if user should be added to the workspace as a guest. (optional)
     * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.assign"> Documentation</a>
     */
    public okhttp3.Call adminUsersAssignCall(String token, String teamId, String userId, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (isRestricted != null) {
            localVarFormParams.put("is_restricted", isRestricted);
        }

        if (isUltraRestricted != null) {
            localVarFormParams.put("is_ultra_restricted", isUltraRestricted);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersAssignValidateBeforeCall(String token, String teamId, String userId, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersAssign(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersAssign(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminUsersAssign(Async)");
        }

        return adminUsersAssignCall(token, teamId, userId, channelIds, isRestricted, isUltraRestricted, _callback);

    }

    /**
     * 
     * Add an Enterprise user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to add to the workspace. (required)
     * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param isRestricted True if user should be added to the workspace as a guest. (optional)
     * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.assign"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersAssign(String token, String teamId, String userId, String channelIds, Boolean isRestricted, Boolean isUltraRestricted) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersAssignWithHttpInfo(token, teamId, userId, channelIds, isRestricted, isUltraRestricted);
        return localVarResp.getData();
    }

    /**
     * 
     * Add an Enterprise user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to add to the workspace. (required)
     * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param isRestricted True if user should be added to the workspace as a guest. (optional)
     * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.assign"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersAssignWithHttpInfo(String token, String teamId, String userId, String channelIds, Boolean isRestricted, Boolean isUltraRestricted) throws ApiException {
        okhttp3.Call localVarCall = adminUsersAssignValidateBeforeCall(token, teamId, userId, channelIds, isRestricted, isUltraRestricted, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add an Enterprise user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to add to the workspace. (required)
     * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param isRestricted True if user should be added to the workspace as a guest. (optional)
     * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.assign"> Documentation</a>
     */
    public okhttp3.Call adminUsersAssignAsync(String token, String teamId, String userId, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersAssignValidateBeforeCall(token, teamId, userId, channelIds, isRestricted, isUltraRestricted, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsersInvite
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param email The email address of the person to invite. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param customMessage An optional message to send to the user in the invite email. (optional)
     * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
     * @param realName Full name of the user. (optional)
     * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.invite"> Documentation</a>
     */
    public okhttp3.Call adminUsersInviteCall(String token, String channelIds, String email, String teamId, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (customMessage != null) {
            localVarFormParams.put("custom_message", customMessage);
        }

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (guestExpirationTs != null) {
            localVarFormParams.put("guest_expiration_ts", guestExpirationTs);
        }

        if (isRestricted != null) {
            localVarFormParams.put("is_restricted", isRestricted);
        }

        if (isUltraRestricted != null) {
            localVarFormParams.put("is_ultra_restricted", isUltraRestricted);
        }

        if (realName != null) {
            localVarFormParams.put("real_name", realName);
        }

        if (resend != null) {
            localVarFormParams.put("resend", resend);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersInviteValidateBeforeCall(String token, String channelIds, String email, String teamId, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersInvite(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling adminUsersInvite(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling adminUsersInvite(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersInvite(Async)");
        }

        return adminUsersInviteCall(token, channelIds, email, teamId, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);

    }

    /**
     * 
     * Invite a user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param email The email address of the person to invite. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param customMessage An optional message to send to the user in the invite email. (optional)
     * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
     * @param realName Full name of the user. (optional)
     * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.invite"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersInvite(String token, String channelIds, String email, String teamId, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersInviteWithHttpInfo(token, channelIds, email, teamId, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend);
        return localVarResp.getData();
    }

    /**
     * 
     * Invite a user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param email The email address of the person to invite. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param customMessage An optional message to send to the user in the invite email. (optional)
     * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
     * @param realName Full name of the user. (optional)
     * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.invite"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersInviteWithHttpInfo(String token, String channelIds, String email, String teamId, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend) throws ApiException {
        okhttp3.Call localVarCall = adminUsersInviteValidateBeforeCall(token, channelIds, email, teamId, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Invite a user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param email The email address of the person to invite. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param customMessage An optional message to send to the user in the invite email. (optional)
     * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
     * @param realName Full name of the user. (optional)
     * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.invite"> Documentation</a>
     */
    public okhttp3.Call adminUsersInviteAsync(String token, String channelIds, String email, String teamId, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersInviteValidateBeforeCall(token, channelIds, email, teamId, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsersList
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param limit Limit for how many users to be retrieved per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.list"> Documentation</a>
     */
    public okhttp3.Call adminUsersListCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersListValidateBeforeCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersList(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersList(Async)");
        }

        return adminUsersListCall(token, teamId, cursor, limit, _callback);

    }

    /**
     * 
     * List users on a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param limit Limit for how many users to be retrieved per page (optional)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.list"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersList(String token, String teamId, String cursor, Integer limit) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersListWithHttpInfo(token, teamId, cursor, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * List users on a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param limit Limit for how many users to be retrieved per page (optional)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.list"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersListWithHttpInfo(String token, String teamId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = adminUsersListValidateBeforeCall(token, teamId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List users on a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param limit Limit for how many users to be retrieved per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.list"> Documentation</a>
     */
    public okhttp3.Call adminUsersListAsync(String token, String teamId, String cursor, Integer limit, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersListValidateBeforeCall(token, teamId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsersRemove
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to remove. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.remove"> Documentation</a>
     */
    public okhttp3.Call adminUsersRemoveCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersRemoveValidateBeforeCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersRemove(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersRemove(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminUsersRemove(Async)");
        }

        return adminUsersRemoveCall(token, teamId, userId, _callback);

    }

    /**
     * 
     * Remove a user from a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to remove. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.remove"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersRemove(String token, String teamId, String userId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersRemoveWithHttpInfo(token, teamId, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a user from a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to remove. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.remove"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersRemoveWithHttpInfo(String token, String teamId, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminUsersRemoveValidateBeforeCall(token, teamId, userId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a user from a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to remove. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.remove"> Documentation</a>
     */
    public okhttp3.Call adminUsersRemoveAsync(String token, String teamId, String userId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersRemoveValidateBeforeCall(token, teamId, userId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsersSetAdmin
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as an admin. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setAdmin"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetAdminCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.setAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersSetAdminValidateBeforeCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersSetAdmin(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersSetAdmin(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminUsersSetAdmin(Async)");
        }

        return adminUsersSetAdminCall(token, teamId, userId, _callback);

    }

    /**
     * 
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as an admin. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setAdmin"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersSetAdmin(String token, String teamId, String userId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersSetAdminWithHttpInfo(token, teamId, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as an admin. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setAdmin"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersSetAdminWithHttpInfo(String token, String teamId, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminUsersSetAdminValidateBeforeCall(token, teamId, userId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as an admin. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setAdmin"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetAdminAsync(String token, String teamId, String userId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersSetAdminValidateBeforeCall(token, teamId, userId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsersSetExpiration
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param expirationTs Timestamp when guest account should be disabled. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to set an expiration for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setExpiration"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetExpirationCall(String token, Integer expirationTs, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.setExpiration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expirationTs != null) {
            localVarFormParams.put("expiration_ts", expirationTs);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersSetExpirationValidateBeforeCall(String token, Integer expirationTs, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersSetExpiration(Async)");
        }

        // verify the required parameter 'expirationTs' is set
        if (expirationTs == null) {
            throw new ApiException("Missing the required parameter 'expirationTs' when calling adminUsersSetExpiration(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersSetExpiration(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminUsersSetExpiration(Async)");
        }

        return adminUsersSetExpirationCall(token, expirationTs, teamId, userId, _callback);

    }

    /**
     * 
     * Set an expiration for a guest user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param expirationTs Timestamp when guest account should be disabled. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to set an expiration for. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setExpiration"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersSetExpiration(String token, Integer expirationTs, String teamId, String userId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersSetExpirationWithHttpInfo(token, expirationTs, teamId, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Set an expiration for a guest user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param expirationTs Timestamp when guest account should be disabled. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to set an expiration for. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setExpiration"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersSetExpirationWithHttpInfo(String token, Integer expirationTs, String teamId, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminUsersSetExpirationValidateBeforeCall(token, expirationTs, teamId, userId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set an expiration for a guest user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param expirationTs Timestamp when guest account should be disabled. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to set an expiration for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setExpiration"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetExpirationAsync(String token, Integer expirationTs, String teamId, String userId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersSetExpirationValidateBeforeCall(token, expirationTs, teamId, userId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsersSetOwner
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId Id of the user to promote to owner. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setOwner"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetOwnerCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.setOwner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersSetOwnerValidateBeforeCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersSetOwner(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersSetOwner(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminUsersSetOwner(Async)");
        }

        return adminUsersSetOwnerCall(token, teamId, userId, _callback);

    }

    /**
     * 
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId Id of the user to promote to owner. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setOwner"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersSetOwner(String token, String teamId, String userId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersSetOwnerWithHttpInfo(token, teamId, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId Id of the user to promote to owner. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setOwner"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersSetOwnerWithHttpInfo(String token, String teamId, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminUsersSetOwnerValidateBeforeCall(token, teamId, userId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId Id of the user to promote to owner. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setOwner"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetOwnerAsync(String token, String teamId, String userId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersSetOwnerValidateBeforeCall(token, teamId, userId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUsersSetRegular
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as a regular user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setRegular"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetRegularCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.setRegular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUsersSetRegularValidateBeforeCall(String token, String teamId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling adminUsersSetRegular(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling adminUsersSetRegular(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling adminUsersSetRegular(Async)");
        }

        return adminUsersSetRegularCall(token, teamId, userId, _callback);

    }

    /**
     * 
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as a regular user. (required)
     * @return DefaultSuccessTemplate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setRegular"> Documentation</a>
     */
    public DefaultSuccessTemplate adminUsersSetRegular(String token, String teamId, String userId) throws ApiException {
        ApiResponse<DefaultSuccessTemplate> localVarResp = adminUsersSetRegularWithHttpInfo(token, teamId, userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as a regular user. (required)
     * @return ApiResponse&lt;DefaultSuccessTemplate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setRegular"> Documentation</a>
     */
    public ApiResponse<DefaultSuccessTemplate> adminUsersSetRegularWithHttpInfo(String token, String teamId, String userId) throws ApiException {
        okhttp3.Call localVarCall = adminUsersSetRegularValidateBeforeCall(token, teamId, userId, null);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as a regular user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setRegular"> Documentation</a>
     */
    public okhttp3.Call adminUsersSetRegularAsync(String token, String teamId, String userId, final ApiCallback<DefaultSuccessTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUsersSetRegularValidateBeforeCall(token, teamId, userId, _callback);
        Type localVarReturnType = new TypeToken<DefaultSuccessTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
