/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdminConversationsArchiveErrorSchema;
import org.openapitools.client.model.AdminConversationsArchiveSchema;
import org.openapitools.client.model.AdminConversationsConvertToPrivateErrorSchema;
import org.openapitools.client.model.AdminConversationsConvertToPrivateSchema;
import org.openapitools.client.model.AdminConversationsCreateErrorSchema;
import org.openapitools.client.model.AdminConversationsCreateSchema;
import org.openapitools.client.model.AdminConversationsDeleteErrorSchema;
import org.openapitools.client.model.AdminConversationsDeleteSchema;
import org.openapitools.client.model.AdminConversationsDisconnectSharedErrorSchema;
import org.openapitools.client.model.AdminConversationsGetConversationPrefsSchema;
import org.openapitools.client.model.AdminConversationsGetTeamsErrorSchema;
import org.openapitools.client.model.AdminConversationsGetTeamsSchema;
import org.openapitools.client.model.AdminConversationsInviteErrorSchema;
import org.openapitools.client.model.AdminConversationsInviteSchema;
import org.openapitools.client.model.AdminConversationsRenameSchema;
import org.openapitools.client.model.AdminConversationsRenameSchema1;
import org.openapitools.client.model.AdminConversationsSearchErrorSchema;
import org.openapitools.client.model.AdminConversationsSearchSchema;
import org.openapitools.client.model.AdminConversationsSetConversationPrefsErrorSchema;
import org.openapitools.client.model.AdminConversationsSetConversationPrefsSchema;
import org.openapitools.client.model.AdminConversationsUnarchiveErrorSchema;
import org.openapitools.client.model.AdminConversationsUnarchiveErrorSchema1;
import org.openapitools.client.model.AdminConversationsUnarchiveErrorSchema2;
import org.openapitools.client.model.AdminConversationsUnarchiveSchema;
import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Disabled
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    /**
     * Approve an app for installation on a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminAppsApprove_0Test() throws ApiException {
        String token = null;
        String appId = null;
        String requestId = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminAppsApprove_0(token, appId, requestId, teamId);
        // TODO: test validations
    }

    /**
     * List approved apps for an org or workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminAppsApprovedList_0Test() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        String teamId = null;
        String enterpriseId = null;
        DefaultSuccessTemplate response = api.adminAppsApprovedList_0(token, limit, cursor, teamId, enterpriseId);
        // TODO: test validations
    }

    /**
     * List app requests for a team/workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminAppsRequestsList_0Test() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminAppsRequestsList_0(token, limit, cursor, teamId);
        // TODO: test validations
    }

    /**
     * Restrict an app for installation on a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminAppsRestrict_0Test() throws ApiException {
        String token = null;
        String appId = null;
        String requestId = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminAppsRestrict_0(token, appId, requestId, teamId);
        // TODO: test validations
    }

    /**
     * List restricted apps for an org or workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminAppsRestrictedList_0Test() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        String teamId = null;
        String enterpriseId = null;
        DefaultSuccessTemplate response = api.adminAppsRestrictedList_0(token, limit, cursor, teamId, enterpriseId);
        // TODO: test validations
    }

    /**
     * Archive a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsArchive_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        AdminConversationsArchiveSchema response = api.adminConversationsArchive_0(token, channelId);
        // TODO: test validations
    }

    /**
     * Convert a public channel to a private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsConvertToPrivate_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        AdminConversationsConvertToPrivateSchema response = api.adminConversationsConvertToPrivate_0(token, channelId);
        // TODO: test validations
    }

    /**
     * Create a public or private channel-based conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsCreate_0Test() throws ApiException {
        String token = null;
        Boolean isPrivate = null;
        String name = null;
        String description = null;
        Boolean orgWide = null;
        String teamId = null;
        AdminConversationsCreateSchema response = api.adminConversationsCreate_0(token, isPrivate, name, description, orgWide, teamId);
        // TODO: test validations
    }

    /**
     * Delete a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsDelete_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        AdminConversationsDeleteSchema response = api.adminConversationsDelete_0(token, channelId);
        // TODO: test validations
    }

    /**
     * Disconnect a connected channel from one or more workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsDisconnectShared_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        String leavingTeamIds = null;
        AdminConversationsRenameSchema response = api.adminConversationsDisconnectShared_0(token, channelId, leavingTeamIds);
        // TODO: test validations
    }

    /**
     * List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsEkmListOriginalConnectedChannelInfo_0Test() throws ApiException {
        String token = null;
        String channelIds = null;
        String teamIds = null;
        Integer limit = null;
        String cursor = null;
        DefaultSuccessTemplate response = api.adminConversationsEkmListOriginalConnectedChannelInfo_0(token, channelIds, teamIds, limit, cursor);
        // TODO: test validations
    }

    /**
     * Get conversation preferences for a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsGetConversationPrefs_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        AdminConversationsGetConversationPrefsSchema response = api.adminConversationsGetConversationPrefs_0(token, channelId);
        // TODO: test validations
    }

    /**
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsGetTeams_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        String cursor = null;
        Integer limit = null;
        AdminConversationsGetTeamsSchema response = api.adminConversationsGetTeams_0(token, channelId, cursor, limit);
        // TODO: test validations
    }

    /**
     * Invite a user to a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsInvite_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        String userIds = null;
        AdminConversationsInviteSchema response = api.adminConversationsInvite_0(token, channelId, userIds);
        // TODO: test validations
    }

    /**
     * Rename a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsRename_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        String name = null;
        AdminConversationsRenameSchema1 response = api.adminConversationsRename_0(token, channelId, name);
        // TODO: test validations
    }

    /**
     * Add an allowlist of IDP groups for accessing a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsRestrictAccessAddGroup_0Test() throws ApiException {
        String channelId = null;
        String groupId = null;
        String token = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminConversationsRestrictAccessAddGroup_0(channelId, groupId, token, teamId);
        // TODO: test validations
    }

    /**
     * List all IDP Groups linked to a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsRestrictAccessListGroups_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminConversationsRestrictAccessListGroups_0(token, channelId, teamId);
        // TODO: test validations
    }

    /**
     * Remove a linked IDP group linked from a private channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsRestrictAccessRemoveGroup_0Test() throws ApiException {
        String channelId = null;
        String groupId = null;
        String teamId = null;
        String token = null;
        DefaultSuccessTemplate response = api.adminConversationsRestrictAccessRemoveGroup_0(channelId, groupId, teamId, token);
        // TODO: test validations
    }

    /**
     * Search for public or private channels in an Enterprise organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsSearch_0Test() throws ApiException {
        String token = null;
        String teamIds = null;
        String query = null;
        Integer limit = null;
        String cursor = null;
        String searchChannelTypes = null;
        String sort = null;
        String sortDir = null;
        AdminConversationsSearchSchema response = api.adminConversationsSearch_0(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir);
        // TODO: test validations
    }

    /**
     * Set the posting permissions for a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsSetConversationPrefs_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        String prefs = null;
        AdminConversationsSetConversationPrefsSchema response = api.adminConversationsSetConversationPrefs_0(token, channelId, prefs);
        // TODO: test validations
    }

    /**
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsSetTeams_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        Boolean orgChannel = null;
        String targetTeamIds = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminConversationsSetTeams_0(token, channelId, orgChannel, targetTeamIds, teamId);
        // TODO: test validations
    }

    /**
     * Unarchive a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConversationsUnarchive_0Test() throws ApiException {
        String token = null;
        String channelId = null;
        AdminConversationsUnarchiveSchema response = api.adminConversationsUnarchive_0(token, channelId);
        // TODO: test validations
    }

    /**
     * Add an emoji alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEmojiAddAlias_0Test() throws ApiException {
        String aliasFor = null;
        String name = null;
        String token = null;
        DefaultSuccessTemplate response = api.adminEmojiAddAlias_0(aliasFor, name, token);
        // TODO: test validations
    }

    /**
     * Add an emoji.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEmojiAdd_0Test() throws ApiException {
        String name = null;
        String token = null;
        String url = null;
        DefaultSuccessTemplate response = api.adminEmojiAdd_0(name, token, url);
        // TODO: test validations
    }

    /**
     * List emoji for an Enterprise Grid organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEmojiList_0Test() throws ApiException {
        String token = null;
        String cursor = null;
        Integer limit = null;
        DefaultSuccessTemplate response = api.adminEmojiList_0(token, cursor, limit);
        // TODO: test validations
    }

    /**
     * Remove an emoji across an Enterprise Grid organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEmojiRemove_0Test() throws ApiException {
        String name = null;
        String token = null;
        DefaultSuccessTemplate response = api.adminEmojiRemove_0(name, token);
        // TODO: test validations
    }

    /**
     * Rename an emoji.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEmojiRename_0Test() throws ApiException {
        String name = null;
        String newName = null;
        String token = null;
        DefaultSuccessTemplate response = api.adminEmojiRename_0(name, newName, token);
        // TODO: test validations
    }

    /**
     * Approve a workspace invite request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminInviteRequestsApprove_0Test() throws ApiException {
        String token = null;
        String inviteRequestId = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminInviteRequestsApprove_0(token, inviteRequestId, teamId);
        // TODO: test validations
    }

    /**
     * List all approved workspace invite requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminInviteRequestsApprovedList_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        DefaultSuccessTemplate response = api.adminInviteRequestsApprovedList_0(token, teamId, cursor, limit);
        // TODO: test validations
    }

    /**
     * List all denied workspace invite requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminInviteRequestsDeniedList_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        DefaultSuccessTemplate response = api.adminInviteRequestsDeniedList_0(token, teamId, cursor, limit);
        // TODO: test validations
    }

    /**
     * Deny a workspace invite request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminInviteRequestsDeny_0Test() throws ApiException {
        String token = null;
        String inviteRequestId = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminInviteRequestsDeny_0(token, inviteRequestId, teamId);
        // TODO: test validations
    }

    /**
     * List all pending workspace invite requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminInviteRequestsList_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        DefaultSuccessTemplate response = api.adminInviteRequestsList_0(token, teamId, cursor, limit);
        // TODO: test validations
    }

    /**
     * List all of the admins on a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsAdminsList_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        Integer limit = null;
        String cursor = null;
        DefaultSuccessTemplate response = api.adminTeamsAdminsList_0(token, teamId, limit, cursor);
        // TODO: test validations
    }

    /**
     * Create an Enterprise team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsCreate_0Test() throws ApiException {
        String token = null;
        String teamDomain = null;
        String teamName = null;
        String teamDescription = null;
        String teamDiscoverability = null;
        DefaultSuccessTemplate response = api.adminTeamsCreate_0(token, teamDomain, teamName, teamDescription, teamDiscoverability);
        // TODO: test validations
    }

    /**
     * List all teams on an Enterprise organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsList_0Test() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        DefaultSuccessTemplate response = api.adminTeamsList_0(token, limit, cursor);
        // TODO: test validations
    }

    /**
     * List all of the owners on a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsOwnersList_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        Integer limit = null;
        String cursor = null;
        DefaultSuccessTemplate response = api.adminTeamsOwnersList_0(token, teamId, limit, cursor);
        // TODO: test validations
    }

    /**
     * Fetch information about settings in a workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsSettingsInfo_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminTeamsSettingsInfo_0(token, teamId);
        // TODO: test validations
    }

    /**
     * Set the default channels of a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsSettingsSetDefaultChannels_0Test() throws ApiException {
        String channelIds = null;
        String teamId = null;
        String token = null;
        DefaultSuccessTemplate response = api.adminTeamsSettingsSetDefaultChannels_0(channelIds, teamId, token);
        // TODO: test validations
    }

    /**
     * Set the description of a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsSettingsSetDescription_0Test() throws ApiException {
        String token = null;
        String description = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminTeamsSettingsSetDescription_0(token, description, teamId);
        // TODO: test validations
    }

    /**
     * An API method that allows admins to set the discoverability of a given workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsSettingsSetDiscoverability_0Test() throws ApiException {
        String token = null;
        String discoverability = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminTeamsSettingsSetDiscoverability_0(token, discoverability, teamId);
        // TODO: test validations
    }

    /**
     * Sets the icon of a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsSettingsSetIcon_0Test() throws ApiException {
        String imageUrl = null;
        String teamId = null;
        String token = null;
        DefaultSuccessTemplate response = api.adminTeamsSettingsSetIcon_0(imageUrl, teamId, token);
        // TODO: test validations
    }

    /**
     * Set the name of a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminTeamsSettingsSetName_0Test() throws ApiException {
        String token = null;
        String name = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminTeamsSettingsSetName_0(token, name, teamId);
        // TODO: test validations
    }

    /**
     * Add one or more default channels to an IDP group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsergroupsAddChannels_0Test() throws ApiException {
        String token = null;
        String channelIds = null;
        String usergroupId = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminUsergroupsAddChannels_0(token, channelIds, usergroupId, teamId);
        // TODO: test validations
    }

    /**
     * Associate one or more default workspaces with an organization-wide IDP group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsergroupsAddTeams_0Test() throws ApiException {
        String token = null;
        String teamIds = null;
        String usergroupId = null;
        Boolean autoProvision = null;
        DefaultSuccessTemplate response = api.adminUsergroupsAddTeams_0(token, teamIds, usergroupId, autoProvision);
        // TODO: test validations
    }

    /**
     * List the channels linked to an org-level IDP group (user group).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsergroupsListChannels_0Test() throws ApiException {
        String token = null;
        String usergroupId = null;
        String teamId = null;
        Boolean includeNumMembers = null;
        DefaultSuccessTemplate response = api.adminUsergroupsListChannels_0(token, usergroupId, teamId, includeNumMembers);
        // TODO: test validations
    }

    /**
     * Remove one or more default channels from an org-level IDP group (user group).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsergroupsRemoveChannels_0Test() throws ApiException {
        String token = null;
        String channelIds = null;
        String usergroupId = null;
        DefaultSuccessTemplate response = api.adminUsergroupsRemoveChannels_0(token, channelIds, usergroupId);
        // TODO: test validations
    }

    /**
     * Add an Enterprise user to a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersAssign_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        String channelIds = null;
        Boolean isRestricted = null;
        Boolean isUltraRestricted = null;
        DefaultSuccessTemplate response = api.adminUsersAssign_0(token, teamId, userId, channelIds, isRestricted, isUltraRestricted);
        // TODO: test validations
    }

    /**
     * Invite a user to a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersInvite_0Test() throws ApiException {
        String token = null;
        String channelIds = null;
        String email = null;
        String teamId = null;
        String customMessage = null;
        String guestExpirationTs = null;
        Boolean isRestricted = null;
        Boolean isUltraRestricted = null;
        String realName = null;
        Boolean resend = null;
        DefaultSuccessTemplate response = api.adminUsersInvite_0(token, channelIds, email, teamId, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend);
        // TODO: test validations
    }

    /**
     * List users on a workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersList_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        DefaultSuccessTemplate response = api.adminUsersList_0(token, teamId, cursor, limit);
        // TODO: test validations
    }

    /**
     * Remove a user from a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersRemove_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        DefaultSuccessTemplate response = api.adminUsersRemove_0(token, teamId, userId);
        // TODO: test validations
    }

    /**
     * Invalidate a single session for a user by session_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersSessionInvalidate_0Test() throws ApiException {
        String token = null;
        Integer sessionId = null;
        String teamId = null;
        DefaultSuccessTemplate response = api.adminUsersSessionInvalidate_0(token, sessionId, teamId);
        // TODO: test validations
    }

    /**
     * Wipes all valid sessions on all devices for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersSessionReset_0Test() throws ApiException {
        String token = null;
        String userId = null;
        Boolean mobileOnly = null;
        Boolean webOnly = null;
        DefaultSuccessTemplate response = api.adminUsersSessionReset_0(token, userId, mobileOnly, webOnly);
        // TODO: test validations
    }

    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersSetAdmin_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        DefaultSuccessTemplate response = api.adminUsersSetAdmin_0(token, teamId, userId);
        // TODO: test validations
    }

    /**
     * Set an expiration for a guest user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersSetExpiration_0Test() throws ApiException {
        String token = null;
        Integer expirationTs = null;
        String teamId = null;
        String userId = null;
        DefaultSuccessTemplate response = api.adminUsersSetExpiration_0(token, expirationTs, teamId, userId);
        // TODO: test validations
    }

    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersSetOwner_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        DefaultSuccessTemplate response = api.adminUsersSetOwner_0(token, teamId, userId);
        // TODO: test validations
    }

    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUsersSetRegular_0Test() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        DefaultSuccessTemplate response = api.adminUsersSetRegular_0(token, teamId, userId);
        // TODO: test validations
    }

}
