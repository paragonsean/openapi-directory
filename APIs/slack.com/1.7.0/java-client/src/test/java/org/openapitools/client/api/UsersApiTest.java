/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIMethodUsersGetPresence;
import org.openapitools.client.model.UsersConversationsErrorSchema;
import org.openapitools.client.model.UsersConversationsSuccessSchema;
import org.openapitools.client.model.UsersCountsErrorSchema;
import org.openapitools.client.model.UsersDeletePhotoErrorSchema;
import org.openapitools.client.model.UsersDeletePhotoSchema;
import org.openapitools.client.model.UsersIdentityErrorSchema;
import org.openapitools.client.model.UsersIdentitySchemaInner;
import org.openapitools.client.model.UsersInfoErrorSchema;
import org.openapitools.client.model.UsersInfoSuccessSchema;
import org.openapitools.client.model.UsersListErrorSchema;
import org.openapitools.client.model.UsersListSchema;
import org.openapitools.client.model.UsersLookupByEmailErrorSchema;
import org.openapitools.client.model.UsersLookupByEmailSuccessSchema;
import org.openapitools.client.model.UsersProfileGetErrorSchema;
import org.openapitools.client.model.UsersProfileGetSchema;
import org.openapitools.client.model.UsersProfileSetErrorSchema;
import org.openapitools.client.model.UsersProfileSetSchema;
import org.openapitools.client.model.UsersSetActiveErrorSchema;
import org.openapitools.client.model.UsersSetActiveSchema;
import org.openapitools.client.model.UsersSetPhotoErrorSchema;
import org.openapitools.client.model.UsersSetPhotoSchema;
import org.openapitools.client.model.UsersSetPresenceErrorSchema;
import org.openapitools.client.model.UsersSetPresenceSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * List conversations the calling user may access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersConversationsTest() throws ApiException {
        String token = null;
        String user = null;
        String types = null;
        Boolean excludeArchived = null;
        Integer limit = null;
        String cursor = null;
        UsersConversationsSuccessSchema response = api.usersConversations(token, user, types, excludeArchived, limit, cursor);
        // TODO: test validations
    }

    /**
     * Delete the user profile photo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersDeletePhotoTest() throws ApiException {
        String token = null;
        UsersDeletePhotoSchema response = api.usersDeletePhoto(token);
        // TODO: test validations
    }

    /**
     * Gets user presence information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetPresenceTest() throws ApiException {
        String token = null;
        String user = null;
        APIMethodUsersGetPresence response = api.usersGetPresence(token, user);
        // TODO: test validations
    }

    /**
     * Get a user&#39;s identity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersIdentityTest() throws ApiException {
        String token = null;
        List<UsersIdentitySchemaInner> response = api.usersIdentity(token);
        // TODO: test validations
    }

    /**
     * Gets information about a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersInfoTest() throws ApiException {
        String token = null;
        Boolean includeLocale = null;
        String user = null;
        UsersInfoSuccessSchema response = api.usersInfo(token, includeLocale, user);
        // TODO: test validations
    }

    /**
     * Lists all users in a Slack team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersListTest() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        Boolean includeLocale = null;
        UsersListSchema response = api.usersList(token, limit, cursor, includeLocale);
        // TODO: test validations
    }

    /**
     * Find a user with an email address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersLookupByEmailTest() throws ApiException {
        String token = null;
        String email = null;
        UsersLookupByEmailSuccessSchema response = api.usersLookupByEmail(token, email);
        // TODO: test validations
    }

    /**
     * Retrieves a user&#39;s profile information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersProfileGet_0Test() throws ApiException {
        String token = null;
        Boolean includeLabels = null;
        String user = null;
        UsersProfileGetSchema response = api.usersProfileGet_0(token, includeLabels, user);
        // TODO: test validations
    }

    /**
     * Set the profile information for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersProfileSet_0Test() throws ApiException {
        String token = null;
        String name = null;
        String profile = null;
        String user = null;
        String value = null;
        UsersProfileSetSchema response = api.usersProfileSet_0(token, name, profile, user, value);
        // TODO: test validations
    }

    /**
     * Marked a user as active. Deprecated and non-functional.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSetActiveTest() throws ApiException {
        String token = null;
        UsersSetActiveSchema response = api.usersSetActive(token);
        // TODO: test validations
    }

    /**
     * Set the user profile photo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSetPhotoTest() throws ApiException {
        String token = null;
        String cropW = null;
        String cropX = null;
        String cropY = null;
        String image = null;
        UsersSetPhotoSchema response = api.usersSetPhoto(token, cropW, cropX, cropY, image);
        // TODO: test validations
    }

    /**
     * Manually sets user presence.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersSetPresenceTest() throws ApiException {
        String token = null;
        String presence = null;
        UsersSetPresenceSchema response = api.usersSetPresence(token, presence);
        // TODO: test validations
    }

}
