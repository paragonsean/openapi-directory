/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DefaultErrorTemplate;
import org.openapitools.client.model.DefaultSuccessTemplate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CallsApi
 */
@Disabled
public class CallsApiTest {

    private final CallsApi api = new CallsApi();

    /**
     * Registers a new Call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callsAddTest() throws ApiException {
        String token = null;
        String externalUniqueId = null;
        String joinUrl = null;
        String createdBy = null;
        Integer dateStart = null;
        String desktopAppJoinUrl = null;
        String externalDisplayId = null;
        String title = null;
        String users = null;
        DefaultSuccessTemplate response = api.callsAdd(token, externalUniqueId, joinUrl, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, title, users);
        // TODO: test validations
    }

    /**
     * Ends a Call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callsEndTest() throws ApiException {
        String token = null;
        String id = null;
        Integer duration = null;
        DefaultSuccessTemplate response = api.callsEnd(token, id, duration);
        // TODO: test validations
    }

    /**
     * Returns information about a Call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callsInfoTest() throws ApiException {
        String token = null;
        String id = null;
        DefaultSuccessTemplate response = api.callsInfo(token, id);
        // TODO: test validations
    }

    /**
     * Registers new participants added to a Call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callsParticipantsAdd_0Test() throws ApiException {
        String token = null;
        String id = null;
        String users = null;
        DefaultSuccessTemplate response = api.callsParticipantsAdd_0(token, id, users);
        // TODO: test validations
    }

    /**
     * Registers participants removed from a Call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callsParticipantsRemove_0Test() throws ApiException {
        String token = null;
        String id = null;
        String users = null;
        DefaultSuccessTemplate response = api.callsParticipantsRemove_0(token, id, users);
        // TODO: test validations
    }

    /**
     * Updates information about a Call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callsUpdateTest() throws ApiException {
        String token = null;
        String id = null;
        String desktopAppJoinUrl = null;
        String joinUrl = null;
        String title = null;
        DefaultSuccessTemplate response = api.callsUpdate(token, id, desktopAppJoinUrl, joinUrl, title);
        // TODO: test validations
    }

}
