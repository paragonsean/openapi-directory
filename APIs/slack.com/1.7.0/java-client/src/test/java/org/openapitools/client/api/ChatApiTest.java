/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ChatDeleteErrorSchema;
import org.openapitools.client.model.ChatDeleteScheduledMessageErrorSchema;
import org.openapitools.client.model.ChatDeleteScheduledMessageSchema;
import org.openapitools.client.model.ChatDeleteSuccessSchema;
import org.openapitools.client.model.ChatGetPermalinkErrorSchema;
import org.openapitools.client.model.ChatGetPermalinkSuccessSchema;
import org.openapitools.client.model.ChatMeMessageErrorSchema;
import org.openapitools.client.model.ChatMeMessageSchema;
import org.openapitools.client.model.ChatPostEphemeralErrorSchema;
import org.openapitools.client.model.ChatPostEphemeralSuccessSchema;
import org.openapitools.client.model.ChatPostMessageErrorSchema;
import org.openapitools.client.model.ChatPostMessageSuccessSchema;
import org.openapitools.client.model.ChatScheduleMessageErrorSchema;
import org.openapitools.client.model.ChatScheduleMessageSuccessSchema;
import org.openapitools.client.model.ChatScheduledMessagesListErrorSchema;
import org.openapitools.client.model.ChatScheduledMessagesListSchema;
import org.openapitools.client.model.ChatUnfurlErrorSchema;
import org.openapitools.client.model.ChatUnfurlSuccessSchema;
import org.openapitools.client.model.ChatUpdateErrorSchema;
import org.openapitools.client.model.ChatUpdateSuccessSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChatApi
 */
@Disabled
public class ChatApiTest {

    private final ChatApi api = new ChatApi();

    /**
     * Deletes a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatDeleteTest() throws ApiException {
        String token = null;
        Boolean asUser = null;
        String channel = null;
        BigDecimal ts = null;
        ChatDeleteSuccessSchema response = api.chatDelete(token, asUser, channel, ts);
        // TODO: test validations
    }

    /**
     * Deletes a pending scheduled message from the queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatDeleteScheduledMessageTest() throws ApiException {
        String token = null;
        String channel = null;
        String scheduledMessageId = null;
        Boolean asUser = null;
        ChatDeleteScheduledMessageSchema response = api.chatDeleteScheduledMessage(token, channel, scheduledMessageId, asUser);
        // TODO: test validations
    }

    /**
     * Retrieve a permalink URL for a specific extant message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatGetPermalinkTest() throws ApiException {
        String token = null;
        String channel = null;
        String messageTs = null;
        ChatGetPermalinkSuccessSchema response = api.chatGetPermalink(token, channel, messageTs);
        // TODO: test validations
    }

    /**
     * Share a me message into a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatMeMessageTest() throws ApiException {
        String token = null;
        String channel = null;
        String text = null;
        ChatMeMessageSchema response = api.chatMeMessage(token, channel, text);
        // TODO: test validations
    }

    /**
     * Sends an ephemeral message to a user in a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatPostEphemeralTest() throws ApiException {
        String token = null;
        String channel = null;
        String user = null;
        Boolean asUser = null;
        String attachments = null;
        String blocks = null;
        String iconEmoji = null;
        String iconUrl = null;
        Boolean linkNames = null;
        String parse = null;
        String text = null;
        String threadTs = null;
        String username = null;
        ChatPostEphemeralSuccessSchema response = api.chatPostEphemeral(token, channel, user, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, parse, text, threadTs, username);
        // TODO: test validations
    }

    /**
     * Sends a message to a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatPostMessageTest() throws ApiException {
        String token = null;
        String channel = null;
        String asUser = null;
        String attachments = null;
        String blocks = null;
        String iconEmoji = null;
        String iconUrl = null;
        Boolean linkNames = null;
        Boolean mrkdwn = null;
        String parse = null;
        Boolean replyBroadcast = null;
        String text = null;
        String threadTs = null;
        Boolean unfurlLinks = null;
        Boolean unfurlMedia = null;
        String username = null;
        ChatPostMessageSuccessSchema response = api.chatPostMessage(token, channel, asUser, attachments, blocks, iconEmoji, iconUrl, linkNames, mrkdwn, parse, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia, username);
        // TODO: test validations
    }

    /**
     * Schedules a message to be sent to a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatScheduleMessageTest() throws ApiException {
        String token = null;
        Boolean asUser = null;
        String attachments = null;
        String blocks = null;
        String channel = null;
        Boolean linkNames = null;
        String parse = null;
        String postAt = null;
        Boolean replyBroadcast = null;
        String text = null;
        BigDecimal threadTs = null;
        Boolean unfurlLinks = null;
        Boolean unfurlMedia = null;
        ChatScheduleMessageSuccessSchema response = api.chatScheduleMessage(token, asUser, attachments, blocks, channel, linkNames, parse, postAt, replyBroadcast, text, threadTs, unfurlLinks, unfurlMedia);
        // TODO: test validations
    }

    /**
     * Returns a list of scheduled messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatScheduledMessagesList_0Test() throws ApiException {
        String token = null;
        String channel = null;
        BigDecimal latest = null;
        BigDecimal oldest = null;
        Integer limit = null;
        String cursor = null;
        ChatScheduledMessagesListSchema response = api.chatScheduledMessagesList_0(token, channel, latest, oldest, limit, cursor);
        // TODO: test validations
    }

    /**
     * Provide custom unfurl behavior for user-posted URLs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatUnfurlTest() throws ApiException {
        String token = null;
        String channel = null;
        String ts = null;
        String unfurls = null;
        String userAuthMessage = null;
        Boolean userAuthRequired = null;
        String userAuthUrl = null;
        ChatUnfurlSuccessSchema response = api.chatUnfurl(token, channel, ts, unfurls, userAuthMessage, userAuthRequired, userAuthUrl);
        // TODO: test validations
    }

    /**
     * Updates a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chatUpdateTest() throws ApiException {
        String token = null;
        String channel = null;
        String ts = null;
        String asUser = null;
        String attachments = null;
        String blocks = null;
        String linkNames = null;
        String parse = null;
        String text = null;
        ChatUpdateSuccessSchema response = api.chatUpdate(token, channel, ts, asUser, attachments, blocks, linkNames, parse, text);
        // TODO: test validations
    }

}
