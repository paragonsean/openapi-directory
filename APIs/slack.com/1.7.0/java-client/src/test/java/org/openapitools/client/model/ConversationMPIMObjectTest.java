/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.ConversationObjectDisplayCounts;
import org.openapitools.client.model.ConversationObjectParentConversationInner;
import org.openapitools.client.model.ConversationObjectSharesInner;
import org.openapitools.client.model.ObjsChannelLatestInner;
import org.openapitools.client.model.ObjsChannelPurpose;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ConversationMPIMObject
 */
public class ConversationMPIMObjectTest {
    private final ConversationMPIMObject model = new ConversationMPIMObject();

    /**
     * Model tests for ConversationMPIMObject
     */
    @Test
    public void testConversationMPIMObject() {
        // TODO: test ConversationMPIMObject
    }

    /**
     * Test the property 'acceptedUser'
     */
    @Test
    public void acceptedUserTest() {
        // TODO: test acceptedUser
    }

    /**
     * Test the property 'connectedTeamIds'
     */
    @Test
    public void connectedTeamIdsTest() {
        // TODO: test connectedTeamIds
    }

    /**
     * Test the property 'conversationHostId'
     */
    @Test
    public void conversationHostIdTest() {
        // TODO: test conversationHostId
    }

    /**
     * Test the property 'created'
     */
    @Test
    public void createdTest() {
        // TODO: test created
    }

    /**
     * Test the property 'creator'
     */
    @Test
    public void creatorTest() {
        // TODO: test creator
    }

    /**
     * Test the property 'displayCounts'
     */
    @Test
    public void displayCountsTest() {
        // TODO: test displayCounts
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'internalTeamIds'
     */
    @Test
    public void internalTeamIdsTest() {
        // TODO: test internalTeamIds
    }

    /**
     * Test the property 'isArchived'
     */
    @Test
    public void isArchivedTest() {
        // TODO: test isArchived
    }

    /**
     * Test the property 'isChannel'
     */
    @Test
    public void isChannelTest() {
        // TODO: test isChannel
    }

    /**
     * Test the property 'isExtShared'
     */
    @Test
    public void isExtSharedTest() {
        // TODO: test isExtShared
    }

    /**
     * Test the property 'isFrozen'
     */
    @Test
    public void isFrozenTest() {
        // TODO: test isFrozen
    }

    /**
     * Test the property 'isGeneral'
     */
    @Test
    public void isGeneralTest() {
        // TODO: test isGeneral
    }

    /**
     * Test the property 'isGroup'
     */
    @Test
    public void isGroupTest() {
        // TODO: test isGroup
    }

    /**
     * Test the property 'isIm'
     */
    @Test
    public void isImTest() {
        // TODO: test isIm
    }

    /**
     * Test the property 'isMember'
     */
    @Test
    public void isMemberTest() {
        // TODO: test isMember
    }

    /**
     * Test the property 'isMoved'
     */
    @Test
    public void isMovedTest() {
        // TODO: test isMoved
    }

    /**
     * Test the property 'isMpim'
     */
    @Test
    public void isMpimTest() {
        // TODO: test isMpim
    }

    /**
     * Test the property 'isNonThreadable'
     */
    @Test
    public void isNonThreadableTest() {
        // TODO: test isNonThreadable
    }

    /**
     * Test the property 'isOpen'
     */
    @Test
    public void isOpenTest() {
        // TODO: test isOpen
    }

    /**
     * Test the property 'isOrgShared'
     */
    @Test
    public void isOrgSharedTest() {
        // TODO: test isOrgShared
    }

    /**
     * Test the property 'isPendingExtShared'
     */
    @Test
    public void isPendingExtSharedTest() {
        // TODO: test isPendingExtShared
    }

    /**
     * Test the property 'isPrivate'
     */
    @Test
    public void isPrivateTest() {
        // TODO: test isPrivate
    }

    /**
     * Test the property 'isReadOnly'
     */
    @Test
    public void isReadOnlyTest() {
        // TODO: test isReadOnly
    }

    /**
     * Test the property 'isShared'
     */
    @Test
    public void isSharedTest() {
        // TODO: test isShared
    }

    /**
     * Test the property 'isStarred'
     */
    @Test
    public void isStarredTest() {
        // TODO: test isStarred
    }

    /**
     * Test the property 'isThreadOnly'
     */
    @Test
    public void isThreadOnlyTest() {
        // TODO: test isThreadOnly
    }

    /**
     * Test the property 'lastRead'
     */
    @Test
    public void lastReadTest() {
        // TODO: test lastRead
    }

    /**
     * Test the property 'latest'
     */
    @Test
    public void latestTest() {
        // TODO: test latest
    }

    /**
     * Test the property 'members'
     */
    @Test
    public void membersTest() {
        // TODO: test members
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nameNormalized'
     */
    @Test
    public void nameNormalizedTest() {
        // TODO: test nameNormalized
    }

    /**
     * Test the property 'numMembers'
     */
    @Test
    public void numMembersTest() {
        // TODO: test numMembers
    }

    /**
     * Test the property 'parentConversation'
     */
    @Test
    public void parentConversationTest() {
        // TODO: test parentConversation
    }

    /**
     * Test the property 'pendingConnectedTeamIds'
     */
    @Test
    public void pendingConnectedTeamIdsTest() {
        // TODO: test pendingConnectedTeamIds
    }

    /**
     * Test the property 'pendingShared'
     */
    @Test
    public void pendingSharedTest() {
        // TODO: test pendingShared
    }

    /**
     * Test the property 'pinCount'
     */
    @Test
    public void pinCountTest() {
        // TODO: test pinCount
    }

    /**
     * Test the property 'previousNames'
     */
    @Test
    public void previousNamesTest() {
        // TODO: test previousNames
    }

    /**
     * Test the property 'priority'
     */
    @Test
    public void priorityTest() {
        // TODO: test priority
    }

    /**
     * Test the property 'purpose'
     */
    @Test
    public void purposeTest() {
        // TODO: test purpose
    }

    /**
     * Test the property 'sharedTeamIds'
     */
    @Test
    public void sharedTeamIdsTest() {
        // TODO: test sharedTeamIds
    }

    /**
     * Test the property 'shares'
     */
    @Test
    public void sharesTest() {
        // TODO: test shares
    }

    /**
     * Test the property 'timezoneCount'
     */
    @Test
    public void timezoneCountTest() {
        // TODO: test timezoneCount
    }

    /**
     * Test the property 'topic'
     */
    @Test
    public void topicTest() {
        // TODO: test topic
    }

    /**
     * Test the property 'unlinked'
     */
    @Test
    public void unlinkedTest() {
        // TODO: test unlinked
    }

    /**
     * Test the property 'unreadCount'
     */
    @Test
    public void unreadCountTest() {
        // TODO: test unreadCount
    }

    /**
     * Test the property 'unreadCountDisplay'
     */
    @Test
    public void unreadCountDisplayTest() {
        // TODO: test unreadCountDisplay
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

}
