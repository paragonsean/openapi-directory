/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_message_icons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_message_icons::OAIObjs_message_icons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_message_icons::OAIObjs_message_icons() {
    this->initializeModel();
}

OAIObjs_message_icons::~OAIObjs_message_icons() {}

void OAIObjs_message_icons::initializeModel() {

    m_emoji_isSet = false;
    m_emoji_isValid = false;

    m_image_64_isSet = false;
    m_image_64_isValid = false;
}

void OAIObjs_message_icons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_message_icons::fromJsonObject(QJsonObject json) {

    m_emoji_isValid = ::OpenAPI::fromJsonValue(m_emoji, json[QString("emoji")]);
    m_emoji_isSet = !json[QString("emoji")].isNull() && m_emoji_isValid;

    m_image_64_isValid = ::OpenAPI::fromJsonValue(m_image_64, json[QString("image_64")]);
    m_image_64_isSet = !json[QString("image_64")].isNull() && m_image_64_isValid;
}

QString OAIObjs_message_icons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_message_icons::asJsonObject() const {
    QJsonObject obj;
    if (m_emoji_isSet) {
        obj.insert(QString("emoji"), ::OpenAPI::toJsonValue(m_emoji));
    }
    if (m_image_64_isSet) {
        obj.insert(QString("image_64"), ::OpenAPI::toJsonValue(m_image_64));
    }
    return obj;
}

QString OAIObjs_message_icons::getEmoji() const {
    return m_emoji;
}
void OAIObjs_message_icons::setEmoji(const QString &emoji) {
    m_emoji = emoji;
    m_emoji_isSet = true;
}

bool OAIObjs_message_icons::is_emoji_Set() const{
    return m_emoji_isSet;
}

bool OAIObjs_message_icons::is_emoji_Valid() const{
    return m_emoji_isValid;
}

QString OAIObjs_message_icons::getImage64() const {
    return m_image_64;
}
void OAIObjs_message_icons::setImage64(const QString &image_64) {
    m_image_64 = image_64;
    m_image_64_isSet = true;
}

bool OAIObjs_message_icons::is_image_64_Set() const{
    return m_image_64_isSet;
}

bool OAIObjs_message_icons::is_image_64_Valid() const{
    return m_image_64_isValid;
}

bool OAIObjs_message_icons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_64_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_message_icons::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
