/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFiles_info_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFiles_info_schema::OAIFiles_info_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFiles_info_schema::OAIFiles_info_schema() {
    this->initializeModel();
}

OAIFiles_info_schema::~OAIFiles_info_schema() {}

void OAIFiles_info_schema::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_content_html_isSet = false;
    m_content_html_isValid = false;

    m_editor_isSet = false;
    m_editor_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;

    m_response_metadata_isSet = false;
    m_response_metadata_isValid = false;
}

void OAIFiles_info_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFiles_info_schema::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_content_html_isValid = ::OpenAPI::fromJsonValue(m_content_html, json[QString("content_html")]);
    m_content_html_isSet = !json[QString("content_html")].isNull() && m_content_html_isValid;

    m_editor_isValid = ::OpenAPI::fromJsonValue(m_editor, json[QString("editor")]);
    m_editor_isSet = !json[QString("editor")].isNull() && m_editor_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(m_paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;

    m_response_metadata_isValid = ::OpenAPI::fromJsonValue(m_response_metadata, json[QString("response_metadata")]);
    m_response_metadata_isSet = !json[QString("response_metadata")].isNull() && m_response_metadata_isValid;
}

QString OAIFiles_info_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFiles_info_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_content_html_isSet) {
        obj.insert(QString("content_html"), ::OpenAPI::toJsonValue(m_content_html));
    }
    if (m_editor_isSet) {
        obj.insert(QString("editor"), ::OpenAPI::toJsonValue(m_editor));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(m_paging));
    }
    if (m_response_metadata.size() > 0) {
        obj.insert(QString("response_metadata"), ::OpenAPI::toJsonValue(m_response_metadata));
    }
    return obj;
}

QList<QJsonValue> OAIFiles_info_schema::getComments() const {
    return m_comments;
}
void OAIFiles_info_schema::setComments(const QList<QJsonValue> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIFiles_info_schema::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIFiles_info_schema::is_comments_Valid() const{
    return m_comments_isValid;
}

QJsonValue OAIFiles_info_schema::getContentHtml() const {
    return m_content_html;
}
void OAIFiles_info_schema::setContentHtml(const QJsonValue &content_html) {
    m_content_html = content_html;
    m_content_html_isSet = true;
}

bool OAIFiles_info_schema::is_content_html_Set() const{
    return m_content_html_isSet;
}

bool OAIFiles_info_schema::is_content_html_Valid() const{
    return m_content_html_isValid;
}

QString OAIFiles_info_schema::getEditor() const {
    return m_editor;
}
void OAIFiles_info_schema::setEditor(const QString &editor) {
    m_editor = editor;
    m_editor_isSet = true;
}

bool OAIFiles_info_schema::is_editor_Set() const{
    return m_editor_isSet;
}

bool OAIFiles_info_schema::is_editor_Valid() const{
    return m_editor_isValid;
}

OAIObjs_file OAIFiles_info_schema::getFile() const {
    return m_file;
}
void OAIFiles_info_schema::setFile(const OAIObjs_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIFiles_info_schema::is_file_Set() const{
    return m_file_isSet;
}

bool OAIFiles_info_schema::is_file_Valid() const{
    return m_file_isValid;
}

bool OAIFiles_info_schema::isOk() const {
    return m_ok;
}
void OAIFiles_info_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIFiles_info_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIFiles_info_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

OAIObjs_paging OAIFiles_info_schema::getPaging() const {
    return m_paging;
}
void OAIFiles_info_schema::setPaging(const OAIObjs_paging &paging) {
    m_paging = paging;
    m_paging_isSet = true;
}

bool OAIFiles_info_schema::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIFiles_info_schema::is_paging_Valid() const{
    return m_paging_isValid;
}

QList<OAIObjs_response_metadata_inner> OAIFiles_info_schema::getResponseMetadata() const {
    return m_response_metadata;
}
void OAIFiles_info_schema::setResponseMetadata(const QList<OAIObjs_response_metadata_inner> &response_metadata) {
    m_response_metadata = response_metadata;
    m_response_metadata_isSet = true;
}

bool OAIFiles_info_schema::is_response_metadata_Set() const{
    return m_response_metadata_isSet;
}

bool OAIFiles_info_schema::is_response_metadata_Valid() const{
    return m_response_metadata_isValid;
}

bool OAIFiles_info_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFiles_info_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comments_isValid && m_file_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
