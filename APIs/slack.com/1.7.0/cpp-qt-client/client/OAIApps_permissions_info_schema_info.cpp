/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApps_permissions_info_schema_info.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApps_permissions_info_schema_info::OAIApps_permissions_info_schema_info(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApps_permissions_info_schema_info::OAIApps_permissions_info_schema_info() {
    this->initializeModel();
}

OAIApps_permissions_info_schema_info::~OAIApps_permissions_info_schema_info() {}

void OAIApps_permissions_info_schema_info::initializeModel() {

    m_app_home_isSet = false;
    m_app_home_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_im_isSet = false;
    m_im_isValid = false;

    m_mpim_isSet = false;
    m_mpim_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;
}

void OAIApps_permissions_info_schema_info::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApps_permissions_info_schema_info::fromJsonObject(QJsonObject json) {

    m_app_home_isValid = ::OpenAPI::fromJsonValue(m_app_home, json[QString("app_home")]);
    m_app_home_isSet = !json[QString("app_home")].isNull() && m_app_home_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_im_isValid = ::OpenAPI::fromJsonValue(m_im, json[QString("im")]);
    m_im_isSet = !json[QString("im")].isNull() && m_im_isValid;

    m_mpim_isValid = ::OpenAPI::fromJsonValue(m_mpim, json[QString("mpim")]);
    m_mpim_isSet = !json[QString("mpim")].isNull() && m_mpim_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;
}

QString OAIApps_permissions_info_schema_info::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApps_permissions_info_schema_info::asJsonObject() const {
    QJsonObject obj;
    if (m_app_home.isSet()) {
        obj.insert(QString("app_home"), ::OpenAPI::toJsonValue(m_app_home));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_group.isSet()) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_im.isSet()) {
        obj.insert(QString("im"), ::OpenAPI::toJsonValue(m_im));
    }
    if (m_mpim.isSet()) {
        obj.insert(QString("mpim"), ::OpenAPI::toJsonValue(m_mpim));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    return obj;
}

OAIApps_permissions_info_schema_info_app_home OAIApps_permissions_info_schema_info::getAppHome() const {
    return m_app_home;
}
void OAIApps_permissions_info_schema_info::setAppHome(const OAIApps_permissions_info_schema_info_app_home &app_home) {
    m_app_home = app_home;
    m_app_home_isSet = true;
}

bool OAIApps_permissions_info_schema_info::is_app_home_Set() const{
    return m_app_home_isSet;
}

bool OAIApps_permissions_info_schema_info::is_app_home_Valid() const{
    return m_app_home_isValid;
}

OAIApps_permissions_info_schema_info_app_home OAIApps_permissions_info_schema_info::getChannel() const {
    return m_channel;
}
void OAIApps_permissions_info_schema_info::setChannel(const OAIApps_permissions_info_schema_info_app_home &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIApps_permissions_info_schema_info::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIApps_permissions_info_schema_info::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIApps_permissions_info_schema_info_app_home OAIApps_permissions_info_schema_info::getGroup() const {
    return m_group;
}
void OAIApps_permissions_info_schema_info::setGroup(const OAIApps_permissions_info_schema_info_app_home &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIApps_permissions_info_schema_info::is_group_Set() const{
    return m_group_isSet;
}

bool OAIApps_permissions_info_schema_info::is_group_Valid() const{
    return m_group_isValid;
}

OAIApps_permissions_info_schema_info_app_home OAIApps_permissions_info_schema_info::getIm() const {
    return m_im;
}
void OAIApps_permissions_info_schema_info::setIm(const OAIApps_permissions_info_schema_info_app_home &im) {
    m_im = im;
    m_im_isSet = true;
}

bool OAIApps_permissions_info_schema_info::is_im_Set() const{
    return m_im_isSet;
}

bool OAIApps_permissions_info_schema_info::is_im_Valid() const{
    return m_im_isValid;
}

OAIApps_permissions_info_schema_info_app_home OAIApps_permissions_info_schema_info::getMpim() const {
    return m_mpim;
}
void OAIApps_permissions_info_schema_info::setMpim(const OAIApps_permissions_info_schema_info_app_home &mpim) {
    m_mpim = mpim;
    m_mpim_isSet = true;
}

bool OAIApps_permissions_info_schema_info::is_mpim_Set() const{
    return m_mpim_isSet;
}

bool OAIApps_permissions_info_schema_info::is_mpim_Valid() const{
    return m_mpim_isValid;
}

OAIApps_permissions_info_schema_info_team OAIApps_permissions_info_schema_info::getTeam() const {
    return m_team;
}
void OAIApps_permissions_info_schema_info::setTeam(const OAIApps_permissions_info_schema_info_team &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIApps_permissions_info_schema_info::is_team_Set() const{
    return m_team_isSet;
}

bool OAIApps_permissions_info_schema_info::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIApps_permissions_info_schema_info::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_home.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_im.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpim.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApps_permissions_info_schema_info::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_home_isValid && m_channel_isValid && m_group_isValid && m_im_isValid && m_mpim_isValid && m_team_isValid && true;
}

} // namespace OpenAPI
