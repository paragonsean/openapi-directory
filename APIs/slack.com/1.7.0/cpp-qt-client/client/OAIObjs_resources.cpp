/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_resources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_resources::OAIObjs_resources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_resources::OAIObjs_resources() {
    this->initializeModel();
}

OAIObjs_resources::~OAIObjs_resources() {}

void OAIObjs_resources::initializeModel() {

    m_excluded_ids_isSet = false;
    m_excluded_ids_isValid = false;

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_wildcard_isSet = false;
    m_wildcard_isValid = false;
}

void OAIObjs_resources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_resources::fromJsonObject(QJsonObject json) {

    if(json["excluded_ids"].isArray()){
        auto arr = json["excluded_ids"].toArray();
        m_excluded_ids_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIObjs_resources_excluded_ids_inner_inner> item;
                m_excluded_ids_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_excluded_ids_isSet = !jval.isNull() && m_excluded_ids_isValid;
                m_excluded_ids.push_back(item);
            }
        }
    }

    if(json["ids"].isArray()){
        auto arr = json["ids"].toArray();
        m_ids_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIObjs_resources_excluded_ids_inner_inner> item;
                m_ids_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_ids_isSet = !jval.isNull() && m_ids_isValid;
                m_ids.push_back(item);
            }
        }
    }

    m_wildcard_isValid = ::OpenAPI::fromJsonValue(m_wildcard, json[QString("wildcard")]);
    m_wildcard_isSet = !json[QString("wildcard")].isNull() && m_wildcard_isValid;
}

QString OAIObjs_resources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_resources::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_ids.size() > 0) {
        
        obj.insert(QString("excluded_ids"), toJsonValue(m_excluded_ids));
    }
    if (m_ids.size() > 0) {
        
        obj.insert(QString("ids"), toJsonValue(m_ids));
    }
    if (m_wildcard_isSet) {
        obj.insert(QString("wildcard"), ::OpenAPI::toJsonValue(m_wildcard));
    }
    return obj;
}

QList<QList<OAIObjs_resources_excluded_ids_inner_inner>> OAIObjs_resources::getExcludedIds() const {
    return m_excluded_ids;
}
void OAIObjs_resources::setExcludedIds(const QList<QList<OAIObjs_resources_excluded_ids_inner_inner>> &excluded_ids) {
    m_excluded_ids = excluded_ids;
    m_excluded_ids_isSet = true;
}

bool OAIObjs_resources::is_excluded_ids_Set() const{
    return m_excluded_ids_isSet;
}

bool OAIObjs_resources::is_excluded_ids_Valid() const{
    return m_excluded_ids_isValid;
}

QList<QList<OAIObjs_resources_excluded_ids_inner_inner>> OAIObjs_resources::getIds() const {
    return m_ids;
}
void OAIObjs_resources::setIds(const QList<QList<OAIObjs_resources_excluded_ids_inner_inner>> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIObjs_resources::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIObjs_resources::is_ids_Valid() const{
    return m_ids_isValid;
}

bool OAIObjs_resources::isWildcard() const {
    return m_wildcard;
}
void OAIObjs_resources::setWildcard(const bool &wildcard) {
    m_wildcard = wildcard;
    m_wildcard_isSet = true;
}

bool OAIObjs_resources::is_wildcard_Set() const{
    return m_wildcard_isSet;
}

bool OAIObjs_resources::is_wildcard_Valid() const{
    return m_wildcard_isValid;
}

bool OAIObjs_resources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wildcard_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_resources::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ids_isValid && true;
}

} // namespace OpenAPI
