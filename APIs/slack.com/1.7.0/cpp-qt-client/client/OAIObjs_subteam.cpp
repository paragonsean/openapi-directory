/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_subteam.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_subteam::OAIObjs_subteam(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_subteam::OAIObjs_subteam() {
    this->initializeModel();
}

OAIObjs_subteam::~OAIObjs_subteam() {}

void OAIObjs_subteam::initializeModel() {

    m_auto_provision_isSet = false;
    m_auto_provision_isValid = false;

    m_auto_type_isSet = false;
    m_auto_type_isValid = false;

    m_channel_count_isSet = false;
    m_channel_count_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_date_create_isSet = false;
    m_date_create_isValid = false;

    m_date_delete_isSet = false;
    m_date_delete_isValid = false;

    m_date_update_isSet = false;
    m_date_update_isValid = false;

    m_deleted_by_isSet = false;
    m_deleted_by_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enterprise_subteam_id_isSet = false;
    m_enterprise_subteam_id_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_external_isSet = false;
    m_is_external_isValid = false;

    m_is_subteam_isSet = false;
    m_is_subteam_isValid = false;

    m_is_usergroup_isSet = false;
    m_is_usergroup_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefs_isSet = false;
    m_prefs_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIObjs_subteam::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_subteam::fromJsonObject(QJsonObject json) {

    m_auto_provision_isValid = ::OpenAPI::fromJsonValue(m_auto_provision, json[QString("auto_provision")]);
    m_auto_provision_isSet = !json[QString("auto_provision")].isNull() && m_auto_provision_isValid;

    m_auto_type_isValid = ::OpenAPI::fromJsonValue(m_auto_type, json[QString("auto_type")]);
    m_auto_type_isSet = !json[QString("auto_type")].isNull() && m_auto_type_isValid;

    m_channel_count_isValid = ::OpenAPI::fromJsonValue(m_channel_count, json[QString("channel_count")]);
    m_channel_count_isSet = !json[QString("channel_count")].isNull() && m_channel_count_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_date_create_isValid = ::OpenAPI::fromJsonValue(m_date_create, json[QString("date_create")]);
    m_date_create_isSet = !json[QString("date_create")].isNull() && m_date_create_isValid;

    m_date_delete_isValid = ::OpenAPI::fromJsonValue(m_date_delete, json[QString("date_delete")]);
    m_date_delete_isSet = !json[QString("date_delete")].isNull() && m_date_delete_isValid;

    m_date_update_isValid = ::OpenAPI::fromJsonValue(m_date_update, json[QString("date_update")]);
    m_date_update_isSet = !json[QString("date_update")].isNull() && m_date_update_isValid;

    m_deleted_by_isValid = ::OpenAPI::fromJsonValue(m_deleted_by, json[QString("deleted_by")]);
    m_deleted_by_isSet = !json[QString("deleted_by")].isNull() && m_deleted_by_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enterprise_subteam_id_isValid = ::OpenAPI::fromJsonValue(m_enterprise_subteam_id, json[QString("enterprise_subteam_id")]);
    m_enterprise_subteam_id_isSet = !json[QString("enterprise_subteam_id")].isNull() && m_enterprise_subteam_id_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_external_isValid = ::OpenAPI::fromJsonValue(m_is_external, json[QString("is_external")]);
    m_is_external_isSet = !json[QString("is_external")].isNull() && m_is_external_isValid;

    m_is_subteam_isValid = ::OpenAPI::fromJsonValue(m_is_subteam, json[QString("is_subteam")]);
    m_is_subteam_isSet = !json[QString("is_subteam")].isNull() && m_is_subteam_isValid;

    m_is_usergroup_isValid = ::OpenAPI::fromJsonValue(m_is_usergroup, json[QString("is_usergroup")]);
    m_is_usergroup_isSet = !json[QString("is_usergroup")].isNull() && m_is_usergroup_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefs_isValid = ::OpenAPI::fromJsonValue(m_prefs, json[QString("prefs")]);
    m_prefs_isSet = !json[QString("prefs")].isNull() && m_prefs_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("team_id")]);
    m_team_id_isSet = !json[QString("team_id")].isNull() && m_team_id_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("user_count")]);
    m_user_count_isSet = !json[QString("user_count")].isNull() && m_user_count_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIObjs_subteam::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_subteam::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_provision_isSet) {
        obj.insert(QString("auto_provision"), ::OpenAPI::toJsonValue(m_auto_provision));
    }
    if (m_auto_type.size() > 0) {
        obj.insert(QString("auto_type"), ::OpenAPI::toJsonValue(m_auto_type));
    }
    if (m_channel_count_isSet) {
        obj.insert(QString("channel_count"), ::OpenAPI::toJsonValue(m_channel_count));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_date_create_isSet) {
        obj.insert(QString("date_create"), ::OpenAPI::toJsonValue(m_date_create));
    }
    if (m_date_delete_isSet) {
        obj.insert(QString("date_delete"), ::OpenAPI::toJsonValue(m_date_delete));
    }
    if (m_date_update_isSet) {
        obj.insert(QString("date_update"), ::OpenAPI::toJsonValue(m_date_update));
    }
    if (m_deleted_by.size() > 0) {
        obj.insert(QString("deleted_by"), ::OpenAPI::toJsonValue(m_deleted_by));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enterprise_subteam_id_isSet) {
        obj.insert(QString("enterprise_subteam_id"), ::OpenAPI::toJsonValue(m_enterprise_subteam_id));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_external_isSet) {
        obj.insert(QString("is_external"), ::OpenAPI::toJsonValue(m_is_external));
    }
    if (m_is_subteam_isSet) {
        obj.insert(QString("is_subteam"), ::OpenAPI::toJsonValue(m_is_subteam));
    }
    if (m_is_usergroup_isSet) {
        obj.insert(QString("is_usergroup"), ::OpenAPI::toJsonValue(m_is_usergroup));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefs.isSet()) {
        obj.insert(QString("prefs"), ::OpenAPI::toJsonValue(m_prefs));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("team_id"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("user_count"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

bool OAIObjs_subteam::isAutoProvision() const {
    return m_auto_provision;
}
void OAIObjs_subteam::setAutoProvision(const bool &auto_provision) {
    m_auto_provision = auto_provision;
    m_auto_provision_isSet = true;
}

bool OAIObjs_subteam::is_auto_provision_Set() const{
    return m_auto_provision_isSet;
}

bool OAIObjs_subteam::is_auto_provision_Valid() const{
    return m_auto_provision_isValid;
}

QList<OAIObjs_subteam_auto_type_inner> OAIObjs_subteam::getAutoType() const {
    return m_auto_type;
}
void OAIObjs_subteam::setAutoType(const QList<OAIObjs_subteam_auto_type_inner> &auto_type) {
    m_auto_type = auto_type;
    m_auto_type_isSet = true;
}

bool OAIObjs_subteam::is_auto_type_Set() const{
    return m_auto_type_isSet;
}

bool OAIObjs_subteam::is_auto_type_Valid() const{
    return m_auto_type_isValid;
}

qint32 OAIObjs_subteam::getChannelCount() const {
    return m_channel_count;
}
void OAIObjs_subteam::setChannelCount(const qint32 &channel_count) {
    m_channel_count = channel_count;
    m_channel_count_isSet = true;
}

bool OAIObjs_subteam::is_channel_count_Set() const{
    return m_channel_count_isSet;
}

bool OAIObjs_subteam::is_channel_count_Valid() const{
    return m_channel_count_isValid;
}

QString OAIObjs_subteam::getCreatedBy() const {
    return m_created_by;
}
void OAIObjs_subteam::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIObjs_subteam::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIObjs_subteam::is_created_by_Valid() const{
    return m_created_by_isValid;
}

qint32 OAIObjs_subteam::getDateCreate() const {
    return m_date_create;
}
void OAIObjs_subteam::setDateCreate(const qint32 &date_create) {
    m_date_create = date_create;
    m_date_create_isSet = true;
}

bool OAIObjs_subteam::is_date_create_Set() const{
    return m_date_create_isSet;
}

bool OAIObjs_subteam::is_date_create_Valid() const{
    return m_date_create_isValid;
}

qint32 OAIObjs_subteam::getDateDelete() const {
    return m_date_delete;
}
void OAIObjs_subteam::setDateDelete(const qint32 &date_delete) {
    m_date_delete = date_delete;
    m_date_delete_isSet = true;
}

bool OAIObjs_subteam::is_date_delete_Set() const{
    return m_date_delete_isSet;
}

bool OAIObjs_subteam::is_date_delete_Valid() const{
    return m_date_delete_isValid;
}

qint32 OAIObjs_subteam::getDateUpdate() const {
    return m_date_update;
}
void OAIObjs_subteam::setDateUpdate(const qint32 &date_update) {
    m_date_update = date_update;
    m_date_update_isSet = true;
}

bool OAIObjs_subteam::is_date_update_Set() const{
    return m_date_update_isSet;
}

bool OAIObjs_subteam::is_date_update_Valid() const{
    return m_date_update_isValid;
}

QList<OAIObjs_subteam_deleted_by_inner> OAIObjs_subteam::getDeletedBy() const {
    return m_deleted_by;
}
void OAIObjs_subteam::setDeletedBy(const QList<OAIObjs_subteam_deleted_by_inner> &deleted_by) {
    m_deleted_by = deleted_by;
    m_deleted_by_isSet = true;
}

bool OAIObjs_subteam::is_deleted_by_Set() const{
    return m_deleted_by_isSet;
}

bool OAIObjs_subteam::is_deleted_by_Valid() const{
    return m_deleted_by_isValid;
}

QString OAIObjs_subteam::getDescription() const {
    return m_description;
}
void OAIObjs_subteam::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIObjs_subteam::is_description_Set() const{
    return m_description_isSet;
}

bool OAIObjs_subteam::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIObjs_subteam::getEnterpriseSubteamId() const {
    return m_enterprise_subteam_id;
}
void OAIObjs_subteam::setEnterpriseSubteamId(const QString &enterprise_subteam_id) {
    m_enterprise_subteam_id = enterprise_subteam_id;
    m_enterprise_subteam_id_isSet = true;
}

bool OAIObjs_subteam::is_enterprise_subteam_id_Set() const{
    return m_enterprise_subteam_id_isSet;
}

bool OAIObjs_subteam::is_enterprise_subteam_id_Valid() const{
    return m_enterprise_subteam_id_isValid;
}

QString OAIObjs_subteam::getHandle() const {
    return m_handle;
}
void OAIObjs_subteam::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAIObjs_subteam::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAIObjs_subteam::is_handle_Valid() const{
    return m_handle_isValid;
}

QString OAIObjs_subteam::getId() const {
    return m_id;
}
void OAIObjs_subteam::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_subteam::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_subteam::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIObjs_subteam::isIsExternal() const {
    return m_is_external;
}
void OAIObjs_subteam::setIsExternal(const bool &is_external) {
    m_is_external = is_external;
    m_is_external_isSet = true;
}

bool OAIObjs_subteam::is_is_external_Set() const{
    return m_is_external_isSet;
}

bool OAIObjs_subteam::is_is_external_Valid() const{
    return m_is_external_isValid;
}

bool OAIObjs_subteam::isIsSubteam() const {
    return m_is_subteam;
}
void OAIObjs_subteam::setIsSubteam(const bool &is_subteam) {
    m_is_subteam = is_subteam;
    m_is_subteam_isSet = true;
}

bool OAIObjs_subteam::is_is_subteam_Set() const{
    return m_is_subteam_isSet;
}

bool OAIObjs_subteam::is_is_subteam_Valid() const{
    return m_is_subteam_isValid;
}

bool OAIObjs_subteam::isIsUsergroup() const {
    return m_is_usergroup;
}
void OAIObjs_subteam::setIsUsergroup(const bool &is_usergroup) {
    m_is_usergroup = is_usergroup;
    m_is_usergroup_isSet = true;
}

bool OAIObjs_subteam::is_is_usergroup_Set() const{
    return m_is_usergroup_isSet;
}

bool OAIObjs_subteam::is_is_usergroup_Valid() const{
    return m_is_usergroup_isValid;
}

QString OAIObjs_subteam::getName() const {
    return m_name;
}
void OAIObjs_subteam::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_subteam::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_subteam::is_name_Valid() const{
    return m_name_isValid;
}

OAIObjs_subteam_prefs OAIObjs_subteam::getPrefs() const {
    return m_prefs;
}
void OAIObjs_subteam::setPrefs(const OAIObjs_subteam_prefs &prefs) {
    m_prefs = prefs;
    m_prefs_isSet = true;
}

bool OAIObjs_subteam::is_prefs_Set() const{
    return m_prefs_isSet;
}

bool OAIObjs_subteam::is_prefs_Valid() const{
    return m_prefs_isValid;
}

QString OAIObjs_subteam::getTeamId() const {
    return m_team_id;
}
void OAIObjs_subteam::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIObjs_subteam::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIObjs_subteam::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIObjs_subteam::getUpdatedBy() const {
    return m_updated_by;
}
void OAIObjs_subteam::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIObjs_subteam::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIObjs_subteam::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

qint32 OAIObjs_subteam::getUserCount() const {
    return m_user_count;
}
void OAIObjs_subteam::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIObjs_subteam::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIObjs_subteam::is_user_count_Valid() const{
    return m_user_count_isValid;
}

QList<QString> OAIObjs_subteam::getUsers() const {
    return m_users;
}
void OAIObjs_subteam::setUsers(const QList<QString> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIObjs_subteam::is_users_Set() const{
    return m_users_isSet;
}

bool OAIObjs_subteam::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIObjs_subteam::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_provision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_subteam_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_subteam_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_usergroup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_subteam::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_provision_isValid && m_auto_type_isValid && m_created_by_isValid && m_date_create_isValid && m_date_delete_isValid && m_date_update_isValid && m_deleted_by_isValid && m_description_isValid && m_enterprise_subteam_id_isValid && m_handle_isValid && m_id_isValid && m_is_external_isValid && m_is_subteam_isValid && m_is_usergroup_isValid && m_name_isValid && m_prefs_isValid && m_team_id_isValid && m_updated_by_isValid && true;
}

} // namespace OpenAPI
