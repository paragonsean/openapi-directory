/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversations_replies_success_schema_messages_inner_inner_anyOf.h
 *
 * 
 */

#ifndef OAIConversations_replies_success_schema_messages_inner_inner_anyOf_H
#define OAIConversations_replies_success_schema_messages_inner_inner_anyOf_H

#include <QJsonObject>

#include "OAIObjs_user_profile_short.h"
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjs_user_profile_short;

class OAIConversations_replies_success_schema_messages_inner_inner_anyOf : public OAIObject {
public:
    OAIConversations_replies_success_schema_messages_inner_inner_anyOf();
    OAIConversations_replies_success_schema_messages_inner_inner_anyOf(QString json);
    ~OAIConversations_replies_success_schema_messages_inner_inner_anyOf() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLastRead() const;
    void setLastRead(const QString &last_read);
    bool is_last_read_Set() const;
    bool is_last_read_Valid() const;

    QString getLatestReply() const;
    void setLatestReply(const QString &latest_reply);
    bool is_latest_reply_Set() const;
    bool is_latest_reply_Valid() const;

    qint32 getReplyCount() const;
    void setReplyCount(const qint32 &reply_count);
    bool is_reply_count_Set() const;
    bool is_reply_count_Valid() const;

    QSet<QString> getReplyUsers() const;
    void setReplyUsers(const QSet<QString> &reply_users);
    bool is_reply_users_Set() const;
    bool is_reply_users_Valid() const;

    qint32 getReplyUsersCount() const;
    void setReplyUsersCount(const qint32 &reply_users_count);
    bool is_reply_users_count_Set() const;
    bool is_reply_users_count_Valid() const;

    QString getSourceTeam() const;
    void setSourceTeam(const QString &source_team);
    bool is_source_team_Set() const;
    bool is_source_team_Valid() const;

    bool isSubscribed() const;
    void setSubscribed(const bool &subscribed);
    bool is_subscribed_Set() const;
    bool is_subscribed_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getThreadTs() const;
    void setThreadTs(const QString &thread_ts);
    bool is_thread_ts_Set() const;
    bool is_thread_ts_Valid() const;

    QString getTs() const;
    void setTs(const QString &ts);
    bool is_ts_Set() const;
    bool is_ts_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    qint32 getUnreadCount() const;
    void setUnreadCount(const qint32 &unread_count);
    bool is_unread_count_Set() const;
    bool is_unread_count_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    OAIObjs_user_profile_short getUserProfile() const;
    void setUserProfile(const OAIObjs_user_profile_short &user_profile);
    bool is_user_profile_Set() const;
    bool is_user_profile_Valid() const;

    QString getUserTeam() const;
    void setUserTeam(const QString &user_team);
    bool is_user_team_Set() const;
    bool is_user_team_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_last_read;
    bool m_last_read_isSet;
    bool m_last_read_isValid;

    QString m_latest_reply;
    bool m_latest_reply_isSet;
    bool m_latest_reply_isValid;

    qint32 m_reply_count;
    bool m_reply_count_isSet;
    bool m_reply_count_isValid;

    QSet<QString> m_reply_users;
    bool m_reply_users_isSet;
    bool m_reply_users_isValid;

    qint32 m_reply_users_count;
    bool m_reply_users_count_isSet;
    bool m_reply_users_count_isValid;

    QString m_source_team;
    bool m_source_team_isSet;
    bool m_source_team_isValid;

    bool m_subscribed;
    bool m_subscribed_isSet;
    bool m_subscribed_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_thread_ts;
    bool m_thread_ts_isSet;
    bool m_thread_ts_isValid;

    QString m_ts;
    bool m_ts_isSet;
    bool m_ts_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    qint32 m_unread_count;
    bool m_unread_count_isSet;
    bool m_unread_count_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    OAIObjs_user_profile_short m_user_profile;
    bool m_user_profile_isSet;
    bool m_user_profile_isValid;

    QString m_user_team;
    bool m_user_team_isSet;
    bool m_user_team_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversations_replies_success_schema_messages_inner_inner_anyOf)

#endif // OAIConversations_replies_success_schema_messages_inner_inner_anyOf_H
