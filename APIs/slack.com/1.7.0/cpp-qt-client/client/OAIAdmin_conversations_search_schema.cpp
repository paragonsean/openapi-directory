/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdmin_conversations_search_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdmin_conversations_search_schema::OAIAdmin_conversations_search_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdmin_conversations_search_schema::OAIAdmin_conversations_search_schema() {
    this->initializeModel();
}

OAIAdmin_conversations_search_schema::~OAIAdmin_conversations_search_schema() {}

void OAIAdmin_conversations_search_schema::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_next_cursor_isSet = false;
    m_next_cursor_isValid = false;
}

void OAIAdmin_conversations_search_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdmin_conversations_search_schema::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_next_cursor_isValid = ::OpenAPI::fromJsonValue(m_next_cursor, json[QString("next_cursor")]);
    m_next_cursor_isSet = !json[QString("next_cursor")].isNull() && m_next_cursor_isValid;
}

QString OAIAdmin_conversations_search_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdmin_conversations_search_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_next_cursor_isSet) {
        obj.insert(QString("next_cursor"), ::OpenAPI::toJsonValue(m_next_cursor));
    }
    return obj;
}

QList<OAIObjs_channel> OAIAdmin_conversations_search_schema::getChannels() const {
    return m_channels;
}
void OAIAdmin_conversations_search_schema::setChannels(const QList<OAIObjs_channel> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIAdmin_conversations_search_schema::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIAdmin_conversations_search_schema::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIAdmin_conversations_search_schema::getNextCursor() const {
    return m_next_cursor;
}
void OAIAdmin_conversations_search_schema::setNextCursor(const QString &next_cursor) {
    m_next_cursor = next_cursor;
    m_next_cursor_isSet = true;
}

bool OAIAdmin_conversations_search_schema::is_next_cursor_Set() const{
    return m_next_cursor_isSet;
}

bool OAIAdmin_conversations_search_schema::is_next_cursor_Valid() const{
    return m_next_cursor_isValid;
}

bool OAIAdmin_conversations_search_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdmin_conversations_search_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channels_isValid && m_next_cursor_isValid && true;
}

} // namespace OpenAPI
