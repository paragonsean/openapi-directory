/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuth_test_success_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuth_test_success_schema::OAIAuth_test_success_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuth_test_success_schema::OAIAuth_test_success_schema() {
    this->initializeModel();
}

OAIAuth_test_success_schema::~OAIAuth_test_success_schema() {}

void OAIAuth_test_success_schema::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_is_enterprise_install_isSet = false;
    m_is_enterprise_install_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAuth_test_success_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuth_test_success_schema::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("bot_id")]);
    m_bot_id_isSet = !json[QString("bot_id")].isNull() && m_bot_id_isValid;

    m_is_enterprise_install_isValid = ::OpenAPI::fromJsonValue(m_is_enterprise_install, json[QString("is_enterprise_install")]);
    m_is_enterprise_install_isSet = !json[QString("is_enterprise_install")].isNull() && m_is_enterprise_install_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("team_id")]);
    m_team_id_isSet = !json[QString("team_id")].isNull() && m_team_id_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIAuth_test_success_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuth_test_success_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("bot_id"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_is_enterprise_install_isSet) {
        obj.insert(QString("is_enterprise_install"), ::OpenAPI::toJsonValue(m_is_enterprise_install));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("team_id"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAuth_test_success_schema::getBotId() const {
    return m_bot_id;
}
void OAIAuth_test_success_schema::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIAuth_test_success_schema::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIAuth_test_success_schema::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

bool OAIAuth_test_success_schema::isIsEnterpriseInstall() const {
    return m_is_enterprise_install;
}
void OAIAuth_test_success_schema::setIsEnterpriseInstall(const bool &is_enterprise_install) {
    m_is_enterprise_install = is_enterprise_install;
    m_is_enterprise_install_isSet = true;
}

bool OAIAuth_test_success_schema::is_is_enterprise_install_Set() const{
    return m_is_enterprise_install_isSet;
}

bool OAIAuth_test_success_schema::is_is_enterprise_install_Valid() const{
    return m_is_enterprise_install_isValid;
}

bool OAIAuth_test_success_schema::isOk() const {
    return m_ok;
}
void OAIAuth_test_success_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIAuth_test_success_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIAuth_test_success_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAIAuth_test_success_schema::getTeam() const {
    return m_team;
}
void OAIAuth_test_success_schema::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIAuth_test_success_schema::is_team_Set() const{
    return m_team_isSet;
}

bool OAIAuth_test_success_schema::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIAuth_test_success_schema::getTeamId() const {
    return m_team_id;
}
void OAIAuth_test_success_schema::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIAuth_test_success_schema::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIAuth_test_success_schema::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIAuth_test_success_schema::getUrl() const {
    return m_url;
}
void OAIAuth_test_success_schema::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAuth_test_success_schema::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAuth_test_success_schema::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIAuth_test_success_schema::getUser() const {
    return m_user;
}
void OAIAuth_test_success_schema::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAuth_test_success_schema::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAuth_test_success_schema::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIAuth_test_success_schema::getUserId() const {
    return m_user_id;
}
void OAIAuth_test_success_schema::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuth_test_success_schema::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuth_test_success_schema::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAuth_test_success_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enterprise_install_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuth_test_success_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ok_isValid && m_team_isValid && m_team_id_isValid && m_url_isValid && m_user_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
