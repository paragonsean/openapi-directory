/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStars_list_schema_items_inner_inner_anyOf_5.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStars_list_schema_items_inner_inner_anyOf_5::OAIStars_list_schema_items_inner_inner_anyOf_5(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStars_list_schema_items_inner_inner_anyOf_5::OAIStars_list_schema_items_inner_inner_anyOf_5() {
    this->initializeModel();
}

OAIStars_list_schema_items_inner_inner_anyOf_5::~OAIStars_list_schema_items_inner_inner_anyOf_5() {}

void OAIStars_list_schema_items_inner_inner_anyOf_5::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_date_create_isSet = false;
    m_date_create_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStars_list_schema_items_inner_inner_anyOf_5::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStars_list_schema_items_inner_inner_anyOf_5::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_date_create_isValid = ::OpenAPI::fromJsonValue(m_date_create, json[QString("date_create")]);
    m_date_create_isSet = !json[QString("date_create")].isNull() && m_date_create_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStars_list_schema_items_inner_inner_anyOf_5::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStars_list_schema_items_inner_inner_anyOf_5::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_date_create_isSet) {
        obj.insert(QString("date_create"), ::OpenAPI::toJsonValue(m_date_create));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIStars_list_schema_items_inner_inner_anyOf_5::getChannel() const {
    return m_channel;
}
void OAIStars_list_schema_items_inner_inner_anyOf_5::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::is_channel_Valid() const{
    return m_channel_isValid;
}

qint32 OAIStars_list_schema_items_inner_inner_anyOf_5::getDateCreate() const {
    return m_date_create;
}
void OAIStars_list_schema_items_inner_inner_anyOf_5::setDateCreate(const qint32 &date_create) {
    m_date_create = date_create;
    m_date_create_isSet = true;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::is_date_create_Set() const{
    return m_date_create_isSet;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::is_date_create_Valid() const{
    return m_date_create_isValid;
}

QString OAIStars_list_schema_items_inner_inner_anyOf_5::getType() const {
    return m_type;
}
void OAIStars_list_schema_items_inner_inner_anyOf_5::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStars_list_schema_items_inner_inner_anyOf_5::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_date_create_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
