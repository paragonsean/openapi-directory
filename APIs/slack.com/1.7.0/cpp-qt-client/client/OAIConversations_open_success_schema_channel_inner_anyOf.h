/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversations_open_success_schema_channel_inner_anyOf.h
 *
 * 
 */

#ifndef OAIConversations_open_success_schema_channel_inner_anyOf_H
#define OAIConversations_open_success_schema_channel_inner_anyOf_H

#include <QJsonObject>

#include "OAIObjs_message.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjs_message;

class OAIConversations_open_success_schema_channel_inner_anyOf : public OAIObject {
public:
    OAIConversations_open_success_schema_channel_inner_anyOf();
    OAIConversations_open_success_schema_channel_inner_anyOf(QString json);
    ~OAIConversations_open_success_schema_channel_inner_anyOf() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreated() const;
    void setCreated(const QString &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsIm() const;
    void setIsIm(const bool &is_im);
    bool is_is_im_Set() const;
    bool is_is_im_Valid() const;

    bool isIsOpen() const;
    void setIsOpen(const bool &is_open);
    bool is_is_open_Set() const;
    bool is_is_open_Valid() const;

    QString getLastRead() const;
    void setLastRead(const QString &last_read);
    bool is_last_read_Set() const;
    bool is_last_read_Valid() const;

    OAIObjs_message getLatest() const;
    void setLatest(const OAIObjs_message &latest);
    bool is_latest_Set() const;
    bool is_latest_Valid() const;

    double getUnreadCount() const;
    void setUnreadCount(const double &unread_count);
    bool is_unread_count_Set() const;
    bool is_unread_count_Valid() const;

    double getUnreadCountDisplay() const;
    void setUnreadCountDisplay(const double &unread_count_display);
    bool is_unread_count_display_Set() const;
    bool is_unread_count_display_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_im;
    bool m_is_im_isSet;
    bool m_is_im_isValid;

    bool m_is_open;
    bool m_is_open_isSet;
    bool m_is_open_isValid;

    QString m_last_read;
    bool m_last_read_isSet;
    bool m_last_read_isValid;

    OAIObjs_message m_latest;
    bool m_latest_isSet;
    bool m_latest_isValid;

    double m_unread_count;
    bool m_unread_count_isSet;
    bool m_unread_count_isValid;

    double m_unread_count_display;
    bool m_unread_count_display_isSet;
    bool m_unread_count_display_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversations_open_success_schema_channel_inner_anyOf)

#endif // OAIConversations_open_success_schema_channel_inner_anyOf_H
