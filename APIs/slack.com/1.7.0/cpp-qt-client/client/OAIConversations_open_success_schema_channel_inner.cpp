/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_open_success_schema_channel_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_open_success_schema_channel_inner::OAIConversations_open_success_schema_channel_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_open_success_schema_channel_inner::OAIConversations_open_success_schema_channel_inner() {
    this->initializeModel();
}

OAIConversations_open_success_schema_channel_inner::~OAIConversations_open_success_schema_channel_inner() {}

void OAIConversations_open_success_schema_channel_inner::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_im_isSet = false;
    m_is_im_isValid = false;

    m_is_open_isSet = false;
    m_is_open_isValid = false;

    m_last_read_isSet = false;
    m_last_read_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;

    m_unread_count_display_isSet = false;
    m_unread_count_display_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIConversations_open_success_schema_channel_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_open_success_schema_channel_inner::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_im_isValid = ::OpenAPI::fromJsonValue(m_is_im, json[QString("is_im")]);
    m_is_im_isSet = !json[QString("is_im")].isNull() && m_is_im_isValid;

    m_is_open_isValid = ::OpenAPI::fromJsonValue(m_is_open, json[QString("is_open")]);
    m_is_open_isSet = !json[QString("is_open")].isNull() && m_is_open_isValid;

    m_last_read_isValid = ::OpenAPI::fromJsonValue(m_last_read, json[QString("last_read")]);
    m_last_read_isSet = !json[QString("last_read")].isNull() && m_last_read_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("unread_count")]);
    m_unread_count_isSet = !json[QString("unread_count")].isNull() && m_unread_count_isValid;

    m_unread_count_display_isValid = ::OpenAPI::fromJsonValue(m_unread_count_display, json[QString("unread_count_display")]);
    m_unread_count_display_isSet = !json[QString("unread_count_display")].isNull() && m_unread_count_display_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIConversations_open_success_schema_channel_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_open_success_schema_channel_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_im_isSet) {
        obj.insert(QString("is_im"), ::OpenAPI::toJsonValue(m_is_im));
    }
    if (m_is_open_isSet) {
        obj.insert(QString("is_open"), ::OpenAPI::toJsonValue(m_is_open));
    }
    if (m_last_read_isSet) {
        obj.insert(QString("last_read"), ::OpenAPI::toJsonValue(m_last_read));
    }
    if (m_latest.isSet()) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("unread_count"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    if (m_unread_count_display_isSet) {
        obj.insert(QString("unread_count_display"), ::OpenAPI::toJsonValue(m_unread_count_display));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIConversations_open_success_schema_channel_inner::getCreated() const {
    return m_created;
}
void OAIConversations_open_success_schema_channel_inner::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_created_Set() const{
    return m_created_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIConversations_open_success_schema_channel_inner::getId() const {
    return m_id;
}
void OAIConversations_open_success_schema_channel_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIConversations_open_success_schema_channel_inner::isIsIm() const {
    return m_is_im;
}
void OAIConversations_open_success_schema_channel_inner::setIsIm(const bool &is_im) {
    m_is_im = is_im;
    m_is_im_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_is_im_Set() const{
    return m_is_im_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_is_im_Valid() const{
    return m_is_im_isValid;
}

bool OAIConversations_open_success_schema_channel_inner::isIsOpen() const {
    return m_is_open;
}
void OAIConversations_open_success_schema_channel_inner::setIsOpen(const bool &is_open) {
    m_is_open = is_open;
    m_is_open_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_is_open_Set() const{
    return m_is_open_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_is_open_Valid() const{
    return m_is_open_isValid;
}

QString OAIConversations_open_success_schema_channel_inner::getLastRead() const {
    return m_last_read;
}
void OAIConversations_open_success_schema_channel_inner::setLastRead(const QString &last_read) {
    m_last_read = last_read;
    m_last_read_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_last_read_Set() const{
    return m_last_read_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_last_read_Valid() const{
    return m_last_read_isValid;
}

OAIObjs_message OAIConversations_open_success_schema_channel_inner::getLatest() const {
    return m_latest;
}
void OAIConversations_open_success_schema_channel_inner::setLatest(const OAIObjs_message &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_latest_Valid() const{
    return m_latest_isValid;
}

double OAIConversations_open_success_schema_channel_inner::getUnreadCount() const {
    return m_unread_count;
}
void OAIConversations_open_success_schema_channel_inner::setUnreadCount(const double &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

double OAIConversations_open_success_schema_channel_inner::getUnreadCountDisplay() const {
    return m_unread_count_display;
}
void OAIConversations_open_success_schema_channel_inner::setUnreadCountDisplay(const double &unread_count_display) {
    m_unread_count_display = unread_count_display;
    m_unread_count_display_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_unread_count_display_Set() const{
    return m_unread_count_display_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_unread_count_display_Valid() const{
    return m_unread_count_display_isValid;
}

QString OAIConversations_open_success_schema_channel_inner::getUser() const {
    return m_user;
}
void OAIConversations_open_success_schema_channel_inner::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIConversations_open_success_schema_channel_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIConversations_open_success_schema_channel_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIConversations_open_success_schema_channel_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_im_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_open_success_schema_channel_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
