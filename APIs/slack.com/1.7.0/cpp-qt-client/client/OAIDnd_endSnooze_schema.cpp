/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnd_endSnooze_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnd_endSnooze_schema::OAIDnd_endSnooze_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnd_endSnooze_schema::OAIDnd_endSnooze_schema() {
    this->initializeModel();
}

OAIDnd_endSnooze_schema::~OAIDnd_endSnooze_schema() {}

void OAIDnd_endSnooze_schema::initializeModel() {

    m_dnd_enabled_isSet = false;
    m_dnd_enabled_isValid = false;

    m_next_dnd_end_ts_isSet = false;
    m_next_dnd_end_ts_isValid = false;

    m_next_dnd_start_ts_isSet = false;
    m_next_dnd_start_ts_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_snooze_enabled_isSet = false;
    m_snooze_enabled_isValid = false;
}

void OAIDnd_endSnooze_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnd_endSnooze_schema::fromJsonObject(QJsonObject json) {

    m_dnd_enabled_isValid = ::OpenAPI::fromJsonValue(m_dnd_enabled, json[QString("dnd_enabled")]);
    m_dnd_enabled_isSet = !json[QString("dnd_enabled")].isNull() && m_dnd_enabled_isValid;

    m_next_dnd_end_ts_isValid = ::OpenAPI::fromJsonValue(m_next_dnd_end_ts, json[QString("next_dnd_end_ts")]);
    m_next_dnd_end_ts_isSet = !json[QString("next_dnd_end_ts")].isNull() && m_next_dnd_end_ts_isValid;

    m_next_dnd_start_ts_isValid = ::OpenAPI::fromJsonValue(m_next_dnd_start_ts, json[QString("next_dnd_start_ts")]);
    m_next_dnd_start_ts_isSet = !json[QString("next_dnd_start_ts")].isNull() && m_next_dnd_start_ts_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_snooze_enabled_isValid = ::OpenAPI::fromJsonValue(m_snooze_enabled, json[QString("snooze_enabled")]);
    m_snooze_enabled_isSet = !json[QString("snooze_enabled")].isNull() && m_snooze_enabled_isValid;
}

QString OAIDnd_endSnooze_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnd_endSnooze_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_dnd_enabled_isSet) {
        obj.insert(QString("dnd_enabled"), ::OpenAPI::toJsonValue(m_dnd_enabled));
    }
    if (m_next_dnd_end_ts_isSet) {
        obj.insert(QString("next_dnd_end_ts"), ::OpenAPI::toJsonValue(m_next_dnd_end_ts));
    }
    if (m_next_dnd_start_ts_isSet) {
        obj.insert(QString("next_dnd_start_ts"), ::OpenAPI::toJsonValue(m_next_dnd_start_ts));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_snooze_enabled_isSet) {
        obj.insert(QString("snooze_enabled"), ::OpenAPI::toJsonValue(m_snooze_enabled));
    }
    return obj;
}

bool OAIDnd_endSnooze_schema::isDndEnabled() const {
    return m_dnd_enabled;
}
void OAIDnd_endSnooze_schema::setDndEnabled(const bool &dnd_enabled) {
    m_dnd_enabled = dnd_enabled;
    m_dnd_enabled_isSet = true;
}

bool OAIDnd_endSnooze_schema::is_dnd_enabled_Set() const{
    return m_dnd_enabled_isSet;
}

bool OAIDnd_endSnooze_schema::is_dnd_enabled_Valid() const{
    return m_dnd_enabled_isValid;
}

qint32 OAIDnd_endSnooze_schema::getNextDndEndTs() const {
    return m_next_dnd_end_ts;
}
void OAIDnd_endSnooze_schema::setNextDndEndTs(const qint32 &next_dnd_end_ts) {
    m_next_dnd_end_ts = next_dnd_end_ts;
    m_next_dnd_end_ts_isSet = true;
}

bool OAIDnd_endSnooze_schema::is_next_dnd_end_ts_Set() const{
    return m_next_dnd_end_ts_isSet;
}

bool OAIDnd_endSnooze_schema::is_next_dnd_end_ts_Valid() const{
    return m_next_dnd_end_ts_isValid;
}

qint32 OAIDnd_endSnooze_schema::getNextDndStartTs() const {
    return m_next_dnd_start_ts;
}
void OAIDnd_endSnooze_schema::setNextDndStartTs(const qint32 &next_dnd_start_ts) {
    m_next_dnd_start_ts = next_dnd_start_ts;
    m_next_dnd_start_ts_isSet = true;
}

bool OAIDnd_endSnooze_schema::is_next_dnd_start_ts_Set() const{
    return m_next_dnd_start_ts_isSet;
}

bool OAIDnd_endSnooze_schema::is_next_dnd_start_ts_Valid() const{
    return m_next_dnd_start_ts_isValid;
}

bool OAIDnd_endSnooze_schema::isOk() const {
    return m_ok;
}
void OAIDnd_endSnooze_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIDnd_endSnooze_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIDnd_endSnooze_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIDnd_endSnooze_schema::isSnoozeEnabled() const {
    return m_snooze_enabled;
}
void OAIDnd_endSnooze_schema::setSnoozeEnabled(const bool &snooze_enabled) {
    m_snooze_enabled = snooze_enabled;
    m_snooze_enabled_isSet = true;
}

bool OAIDnd_endSnooze_schema::is_snooze_enabled_Set() const{
    return m_snooze_enabled_isSet;
}

bool OAIDnd_endSnooze_schema::is_snooze_enabled_Valid() const{
    return m_snooze_enabled_isValid;
}

bool OAIDnd_endSnooze_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dnd_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_dnd_end_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_dnd_start_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snooze_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnd_endSnooze_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dnd_enabled_isValid && m_next_dnd_end_ts_isValid && m_next_dnd_start_ts_isValid && m_ok_isValid && m_snooze_enabled_isValid && true;
}

} // namespace OpenAPI
