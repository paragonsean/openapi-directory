/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminUsersApi_H
#define OAI_OAIAdminUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefault_error_template.h"
#include "OAIDefault_success_template.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminUsersApi : public QObject {
    Q_OBJECT

public:
    OAIAdminUsersApi(const int timeOut = 0);
    ~OAIAdminUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  channel_ids QString [optional]
    * @param[in]  is_restricted bool [optional]
    * @param[in]  is_ultra_restricted bool [optional]
    */
    virtual void adminUsersAssign(const QString &token, const QString &team_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &channel_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_restricted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_ultra_restricted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_ids QString [required]
    * @param[in]  email QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  custom_message QString [optional]
    * @param[in]  guest_expiration_ts QString [optional]
    * @param[in]  is_restricted bool [optional]
    * @param[in]  is_ultra_restricted bool [optional]
    * @param[in]  real_name QString [optional]
    * @param[in]  resend bool [optional]
    */
    virtual void adminUsersInvite(const QString &token, const QString &channel_ids, const QString &email, const QString &team_id, const ::OpenAPI::OptionalParam<QString> &custom_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &guest_expiration_ts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_restricted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_ultra_restricted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &real_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &resend = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminUsersList(const QString &token, const QString &team_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersRemove(const QString &token, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetAdmin(const QString &token, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  expiration_ts qint32 [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetExpiration(const QString &token, const qint32 &expiration_ts, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetOwner(const QString &token, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetRegular(const QString &token, const QString &team_id, const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminUsersAssignCallback(OAIHttpRequestWorker *worker);
    void adminUsersInviteCallback(OAIHttpRequestWorker *worker);
    void adminUsersListCallback(OAIHttpRequestWorker *worker);
    void adminUsersRemoveCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetAdminCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetExpirationCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetOwnerCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetRegularCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminUsersAssignSignal(OAIDefault_success_template summary);
    void adminUsersInviteSignal(OAIDefault_success_template summary);
    void adminUsersListSignal(OAIDefault_success_template summary);
    void adminUsersRemoveSignal(OAIDefault_success_template summary);
    void adminUsersSetAdminSignal(OAIDefault_success_template summary);
    void adminUsersSetExpirationSignal(OAIDefault_success_template summary);
    void adminUsersSetOwnerSignal(OAIDefault_success_template summary);
    void adminUsersSetRegularSignal(OAIDefault_success_template summary);


    void adminUsersAssignSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersInviteSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersRemoveSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetAdminSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetExpirationSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetOwnerSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetRegularSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);

    Q_DECL_DEPRECATED_X("Use adminUsersAssignSignalError() instead")
    void adminUsersAssignSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersAssignSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersInviteSignalError() instead")
    void adminUsersInviteSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersInviteSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersListSignalError() instead")
    void adminUsersListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersRemoveSignalError() instead")
    void adminUsersRemoveSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersRemoveSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetAdminSignalError() instead")
    void adminUsersSetAdminSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetAdminSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetExpirationSignalError() instead")
    void adminUsersSetExpirationSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetExpirationSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetOwnerSignalError() instead")
    void adminUsersSetOwnerSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetOwnerSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetRegularSignalError() instead")
    void adminUsersSetRegularSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetRegularSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminUsersAssignSignalErrorFull() instead")
    void adminUsersAssignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersAssignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersInviteSignalErrorFull() instead")
    void adminUsersInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersListSignalErrorFull() instead")
    void adminUsersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersRemoveSignalErrorFull() instead")
    void adminUsersRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetAdminSignalErrorFull() instead")
    void adminUsersSetAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetExpirationSignalErrorFull() instead")
    void adminUsersSetExpirationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetExpirationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetOwnerSignalErrorFull() instead")
    void adminUsersSetOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetRegularSignalErrorFull() instead")
    void adminUsersSetRegularSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetRegularSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
