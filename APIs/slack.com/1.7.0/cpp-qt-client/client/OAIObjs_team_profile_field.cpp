/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_team_profile_field.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_team_profile_field::OAIObjs_team_profile_field(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_team_profile_field::OAIObjs_team_profile_field() {
    this->initializeModel();
}

OAIObjs_team_profile_field::~OAIObjs_team_profile_field() {}

void OAIObjs_team_profile_field::initializeModel() {

    m_field_name_isSet = false;
    m_field_name_isValid = false;

    m_hint_isSet = false;
    m_hint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_hidden_isSet = false;
    m_is_hidden_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_ordering_isSet = false;
    m_ordering_isValid = false;

    m_possible_values_isSet = false;
    m_possible_values_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIObjs_team_profile_field::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_team_profile_field::fromJsonObject(QJsonObject json) {

    m_field_name_isValid = ::OpenAPI::fromJsonValue(m_field_name, json[QString("field_name")]);
    m_field_name_isSet = !json[QString("field_name")].isNull() && m_field_name_isValid;

    m_hint_isValid = ::OpenAPI::fromJsonValue(m_hint, json[QString("hint")]);
    m_hint_isSet = !json[QString("hint")].isNull() && m_hint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_hidden_isValid = ::OpenAPI::fromJsonValue(m_is_hidden, json[QString("is_hidden")]);
    m_is_hidden_isSet = !json[QString("is_hidden")].isNull() && m_is_hidden_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_ordering_isValid = ::OpenAPI::fromJsonValue(m_ordering, json[QString("ordering")]);
    m_ordering_isSet = !json[QString("ordering")].isNull() && m_ordering_isValid;

    m_possible_values_isValid = ::OpenAPI::fromJsonValue(m_possible_values, json[QString("possible_values")]);
    m_possible_values_isSet = !json[QString("possible_values")].isNull() && m_possible_values_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIObjs_team_profile_field::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_team_profile_field::asJsonObject() const {
    QJsonObject obj;
    if (m_field_name_isSet) {
        obj.insert(QString("field_name"), ::OpenAPI::toJsonValue(m_field_name));
    }
    if (m_hint_isSet) {
        obj.insert(QString("hint"), ::OpenAPI::toJsonValue(m_hint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_hidden_isSet) {
        obj.insert(QString("is_hidden"), ::OpenAPI::toJsonValue(m_is_hidden));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_ordering_isSet) {
        obj.insert(QString("ordering"), ::OpenAPI::toJsonValue(m_ordering));
    }
    if (m_possible_values.size() > 0) {
        obj.insert(QString("possible_values"), ::OpenAPI::toJsonValue(m_possible_values));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIObjs_team_profile_field::getFieldName() const {
    return m_field_name;
}
void OAIObjs_team_profile_field::setFieldName(const QString &field_name) {
    m_field_name = field_name;
    m_field_name_isSet = true;
}

bool OAIObjs_team_profile_field::is_field_name_Set() const{
    return m_field_name_isSet;
}

bool OAIObjs_team_profile_field::is_field_name_Valid() const{
    return m_field_name_isValid;
}

QString OAIObjs_team_profile_field::getHint() const {
    return m_hint;
}
void OAIObjs_team_profile_field::setHint(const QString &hint) {
    m_hint = hint;
    m_hint_isSet = true;
}

bool OAIObjs_team_profile_field::is_hint_Set() const{
    return m_hint_isSet;
}

bool OAIObjs_team_profile_field::is_hint_Valid() const{
    return m_hint_isValid;
}

QString OAIObjs_team_profile_field::getId() const {
    return m_id;
}
void OAIObjs_team_profile_field::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_team_profile_field::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_team_profile_field::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIObjs_team_profile_field::isIsHidden() const {
    return m_is_hidden;
}
void OAIObjs_team_profile_field::setIsHidden(const bool &is_hidden) {
    m_is_hidden = is_hidden;
    m_is_hidden_isSet = true;
}

bool OAIObjs_team_profile_field::is_is_hidden_Set() const{
    return m_is_hidden_isSet;
}

bool OAIObjs_team_profile_field::is_is_hidden_Valid() const{
    return m_is_hidden_isValid;
}

QString OAIObjs_team_profile_field::getLabel() const {
    return m_label;
}
void OAIObjs_team_profile_field::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIObjs_team_profile_field::is_label_Set() const{
    return m_label_isSet;
}

bool OAIObjs_team_profile_field::is_label_Valid() const{
    return m_label_isValid;
}

QList<OAIObjs_team_profile_field_options_inner> OAIObjs_team_profile_field::getOptions() const {
    return m_options;
}
void OAIObjs_team_profile_field::setOptions(const QList<OAIObjs_team_profile_field_options_inner> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIObjs_team_profile_field::is_options_Set() const{
    return m_options_isSet;
}

bool OAIObjs_team_profile_field::is_options_Valid() const{
    return m_options_isValid;
}

double OAIObjs_team_profile_field::getOrdering() const {
    return m_ordering;
}
void OAIObjs_team_profile_field::setOrdering(const double &ordering) {
    m_ordering = ordering;
    m_ordering_isSet = true;
}

bool OAIObjs_team_profile_field::is_ordering_Set() const{
    return m_ordering_isSet;
}

bool OAIObjs_team_profile_field::is_ordering_Valid() const{
    return m_ordering_isValid;
}

QList<QString> OAIObjs_team_profile_field::getPossibleValues() const {
    return m_possible_values;
}
void OAIObjs_team_profile_field::setPossibleValues(const QList<QString> &possible_values) {
    m_possible_values = possible_values;
    m_possible_values_isSet = true;
}

bool OAIObjs_team_profile_field::is_possible_values_Set() const{
    return m_possible_values_isSet;
}

bool OAIObjs_team_profile_field::is_possible_values_Valid() const{
    return m_possible_values_isValid;
}

QString OAIObjs_team_profile_field::getType() const {
    return m_type;
}
void OAIObjs_team_profile_field::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIObjs_team_profile_field::is_type_Set() const{
    return m_type_isSet;
}

bool OAIObjs_team_profile_field::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIObjs_team_profile_field::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_team_profile_field::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hint_isValid && m_id_isValid && m_label_isValid && m_ordering_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
