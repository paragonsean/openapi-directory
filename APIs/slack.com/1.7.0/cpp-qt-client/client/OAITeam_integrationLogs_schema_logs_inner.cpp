/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_integrationLogs_schema_logs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_integrationLogs_schema_logs_inner::OAITeam_integrationLogs_schema_logs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_integrationLogs_schema_logs_inner::OAITeam_integrationLogs_schema_logs_inner() {
    this->initializeModel();
}

OAITeam_integrationLogs_schema_logs_inner::~OAITeam_integrationLogs_schema_logs_inner() {}

void OAITeam_integrationLogs_schema_logs_inner::initializeModel() {

    m_admin_app_id_isSet = false;
    m_admin_app_id_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_type_isSet = false;
    m_app_type_isValid = false;

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAITeam_integrationLogs_schema_logs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_integrationLogs_schema_logs_inner::fromJsonObject(QJsonObject json) {

    m_admin_app_id_isValid = ::OpenAPI::fromJsonValue(m_admin_app_id, json[QString("admin_app_id")]);
    m_admin_app_id_isSet = !json[QString("admin_app_id")].isNull() && m_admin_app_id_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_app_type_isValid = ::OpenAPI::fromJsonValue(m_app_type, json[QString("app_type")]);
    m_app_type_isSet = !json[QString("app_type")].isNull() && m_app_type_isValid;

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("change_type")]);
    m_change_type_isSet = !json[QString("change_type")].isNull() && m_change_type_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("service_type")]);
    m_service_type_isSet = !json[QString("service_type")].isNull() && m_service_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_integrationLogs_schema_logs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_app_id_isSet) {
        obj.insert(QString("admin_app_id"), ::OpenAPI::toJsonValue(m_admin_app_id));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_type_isSet) {
        obj.insert(QString("app_type"), ::OpenAPI::toJsonValue(m_app_type));
    }
    if (m_change_type_isSet) {
        obj.insert(QString("change_type"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("service_type"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAITeam_integrationLogs_schema_logs_inner::getAdminAppId() const {
    return m_admin_app_id;
}
void OAITeam_integrationLogs_schema_logs_inner::setAdminAppId(const QString &admin_app_id) {
    m_admin_app_id = admin_app_id;
    m_admin_app_id_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_admin_app_id_Set() const{
    return m_admin_app_id_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_admin_app_id_Valid() const{
    return m_admin_app_id_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getAppId() const {
    return m_app_id;
}
void OAITeam_integrationLogs_schema_logs_inner::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getAppType() const {
    return m_app_type;
}
void OAITeam_integrationLogs_schema_logs_inner::setAppType(const QString &app_type) {
    m_app_type = app_type;
    m_app_type_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_app_type_Set() const{
    return m_app_type_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_app_type_Valid() const{
    return m_app_type_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getChangeType() const {
    return m_change_type;
}
void OAITeam_integrationLogs_schema_logs_inner::setChangeType(const QString &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_change_type_Valid() const{
    return m_change_type_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getChannel() const {
    return m_channel;
}
void OAITeam_integrationLogs_schema_logs_inner::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getDate() const {
    return m_date;
}
void OAITeam_integrationLogs_schema_logs_inner::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_date_Valid() const{
    return m_date_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getScope() const {
    return m_scope;
}
void OAITeam_integrationLogs_schema_logs_inner::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getServiceId() const {
    return m_service_id;
}
void OAITeam_integrationLogs_schema_logs_inner::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getServiceType() const {
    return m_service_type;
}
void OAITeam_integrationLogs_schema_logs_inner::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getUserId() const {
    return m_user_id;
}
void OAITeam_integrationLogs_schema_logs_inner::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAITeam_integrationLogs_schema_logs_inner::getUserName() const {
    return m_user_name;
}
void OAITeam_integrationLogs_schema_logs_inner::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAITeam_integrationLogs_schema_logs_inner::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAITeam_integrationLogs_schema_logs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_integrationLogs_schema_logs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_app_type_isValid && m_change_type_isValid && m_date_isValid && m_scope_isValid && m_user_id_isValid && m_user_name_isValid && true;
}

} // namespace OpenAPI
