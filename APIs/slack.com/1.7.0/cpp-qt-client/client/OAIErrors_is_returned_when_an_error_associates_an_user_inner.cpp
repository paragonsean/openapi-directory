/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrors_is_returned_when_an_error_associates_an_user_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrors_is_returned_when_an_error_associates_an_user_inner::OAIErrors_is_returned_when_an_error_associates_an_user_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrors_is_returned_when_an_error_associates_an_user_inner::OAIErrors_is_returned_when_an_error_associates_an_user_inner() {
    this->initializeModel();
}

OAIErrors_is_returned_when_an_error_associates_an_user_inner::~OAIErrors_is_returned_when_an_error_associates_an_user_inner() {}

void OAIErrors_is_returned_when_an_error_associates_an_user_inner::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIErrors_is_returned_when_an_error_associates_an_user_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrors_is_returned_when_an_error_associates_an_user_inner::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIErrors_is_returned_when_an_error_associates_an_user_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrors_is_returned_when_an_error_associates_an_user_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIErrors_is_returned_when_an_error_associates_an_user_inner::getError() const {
    return m_error;
}
void OAIErrors_is_returned_when_an_error_associates_an_user_inner::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::is_error_Set() const{
    return m_error_isSet;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::isOk() const {
    return m_ok;
}
void OAIErrors_is_returned_when_an_error_associates_an_user_inner::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAIErrors_is_returned_when_an_error_associates_an_user_inner::getUser() const {
    return m_user;
}
void OAIErrors_is_returned_when_an_error_associates_an_user_inner::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrors_is_returned_when_an_error_associates_an_user_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
