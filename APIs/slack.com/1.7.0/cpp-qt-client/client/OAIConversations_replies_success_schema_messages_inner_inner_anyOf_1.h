/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1.h
 *
 * 
 */

#ifndef OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1_H
#define OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1_H

#include <QJsonObject>

#include "OAIObjs_user_profile_short.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjs_user_profile_short;

class OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1 : public OAIObject {
public:
    OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1();
    OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1(QString json);
    ~OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isIsStarred() const;
    void setIsStarred(const bool &is_starred);
    bool is_is_starred_Set() const;
    bool is_is_starred_Valid() const;

    QString getParentUserId() const;
    void setParentUserId(const QString &parent_user_id);
    bool is_parent_user_id_Set() const;
    bool is_parent_user_id_Valid() const;

    QString getSourceTeam() const;
    void setSourceTeam(const QString &source_team);
    bool is_source_team_Set() const;
    bool is_source_team_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getThreadTs() const;
    void setThreadTs(const QString &thread_ts);
    bool is_thread_ts_Set() const;
    bool is_thread_ts_Valid() const;

    QString getTs() const;
    void setTs(const QString &ts);
    bool is_ts_Set() const;
    bool is_ts_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    OAIObjs_user_profile_short getUserProfile() const;
    void setUserProfile(const OAIObjs_user_profile_short &user_profile);
    bool is_user_profile_Set() const;
    bool is_user_profile_Valid() const;

    QString getUserTeam() const;
    void setUserTeam(const QString &user_team);
    bool is_user_team_Set() const;
    bool is_user_team_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_is_starred;
    bool m_is_starred_isSet;
    bool m_is_starred_isValid;

    QString m_parent_user_id;
    bool m_parent_user_id_isSet;
    bool m_parent_user_id_isValid;

    QString m_source_team;
    bool m_source_team_isSet;
    bool m_source_team_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_thread_ts;
    bool m_thread_ts_isSet;
    bool m_thread_ts_isValid;

    QString m_ts;
    bool m_ts_isSet;
    bool m_ts_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    OAIObjs_user_profile_short m_user_profile;
    bool m_user_profile_isSet;
    bool m_user_profile_isValid;

    QString m_user_team;
    bool m_user_team_isSet;
    bool m_user_team_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1)

#endif // OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1_H
