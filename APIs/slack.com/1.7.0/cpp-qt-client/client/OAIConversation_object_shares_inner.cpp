/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation_object_shares_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation_object_shares_inner::OAIConversation_object_shares_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation_object_shares_inner::OAIConversation_object_shares_inner() {
    this->initializeModel();
}

OAIConversation_object_shares_inner::~OAIConversation_object_shares_inner() {}

void OAIConversation_object_shares_inner::initializeModel() {

    m_accepted_user_isSet = false;
    m_accepted_user_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIConversation_object_shares_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation_object_shares_inner::fromJsonObject(QJsonObject json) {

    m_accepted_user_isValid = ::OpenAPI::fromJsonValue(m_accepted_user, json[QString("accepted_user")]);
    m_accepted_user_isSet = !json[QString("accepted_user")].isNull() && m_accepted_user_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIConversation_object_shares_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation_object_shares_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_user_isSet) {
        obj.insert(QString("accepted_user"), ::OpenAPI::toJsonValue(m_accepted_user));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_team.isSet()) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIConversation_object_shares_inner::getAcceptedUser() const {
    return m_accepted_user;
}
void OAIConversation_object_shares_inner::setAcceptedUser(const QString &accepted_user) {
    m_accepted_user = accepted_user;
    m_accepted_user_isSet = true;
}

bool OAIConversation_object_shares_inner::is_accepted_user_Set() const{
    return m_accepted_user_isSet;
}

bool OAIConversation_object_shares_inner::is_accepted_user_Valid() const{
    return m_accepted_user_isValid;
}

bool OAIConversation_object_shares_inner::isIsActive() const {
    return m_is_active;
}
void OAIConversation_object_shares_inner::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIConversation_object_shares_inner::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIConversation_object_shares_inner::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIObjs_team OAIConversation_object_shares_inner::getTeam() const {
    return m_team;
}
void OAIConversation_object_shares_inner::setTeam(const OAIObjs_team &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIConversation_object_shares_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIConversation_object_shares_inner::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIConversation_object_shares_inner::getUser() const {
    return m_user;
}
void OAIConversation_object_shares_inner::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIConversation_object_shares_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIConversation_object_shares_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIConversation_object_shares_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation_object_shares_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_active_isValid && m_team_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
