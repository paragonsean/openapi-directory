/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_external_org_migrations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_external_org_migrations::OAIObjs_external_org_migrations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_external_org_migrations::OAIObjs_external_org_migrations() {
    this->initializeModel();
}

OAIObjs_external_org_migrations::~OAIObjs_external_org_migrations() {}

void OAIObjs_external_org_migrations::initializeModel() {

    m_current_isSet = false;
    m_current_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;
}

void OAIObjs_external_org_migrations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_external_org_migrations::fromJsonObject(QJsonObject json) {

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("date_updated")]);
    m_date_updated_isSet = !json[QString("date_updated")].isNull() && m_date_updated_isValid;
}

QString OAIObjs_external_org_migrations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_external_org_migrations::asJsonObject() const {
    QJsonObject obj;
    if (m_current.size() > 0) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("date_updated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    return obj;
}

QList<OAIObjs_external_org_migrations_current_inner> OAIObjs_external_org_migrations::getCurrent() const {
    return m_current;
}
void OAIObjs_external_org_migrations::setCurrent(const QList<OAIObjs_external_org_migrations_current_inner> &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIObjs_external_org_migrations::is_current_Set() const{
    return m_current_isSet;
}

bool OAIObjs_external_org_migrations::is_current_Valid() const{
    return m_current_isValid;
}

qint32 OAIObjs_external_org_migrations::getDateUpdated() const {
    return m_date_updated;
}
void OAIObjs_external_org_migrations::setDateUpdated(const qint32 &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIObjs_external_org_migrations::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIObjs_external_org_migrations::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

bool OAIObjs_external_org_migrations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_external_org_migrations::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_isValid && m_date_updated_isValid && true;
}

} // namespace OpenAPI
