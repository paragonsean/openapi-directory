/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_enterprise_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_enterprise_user::OAIObjs_enterprise_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_enterprise_user::OAIObjs_enterprise_user() {
    this->initializeModel();
}

OAIObjs_enterprise_user::~OAIObjs_enterprise_user() {}

void OAIObjs_enterprise_user::initializeModel() {

    m_enterprise_id_isSet = false;
    m_enterprise_id_isValid = false;

    m_enterprise_name_isSet = false;
    m_enterprise_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_is_owner_isSet = false;
    m_is_owner_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;
}

void OAIObjs_enterprise_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_enterprise_user::fromJsonObject(QJsonObject json) {

    m_enterprise_id_isValid = ::OpenAPI::fromJsonValue(m_enterprise_id, json[QString("enterprise_id")]);
    m_enterprise_id_isSet = !json[QString("enterprise_id")].isNull() && m_enterprise_id_isValid;

    m_enterprise_name_isValid = ::OpenAPI::fromJsonValue(m_enterprise_name, json[QString("enterprise_name")]);
    m_enterprise_name_isSet = !json[QString("enterprise_name")].isNull() && m_enterprise_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_is_owner_isValid = ::OpenAPI::fromJsonValue(m_is_owner, json[QString("is_owner")]);
    m_is_owner_isSet = !json[QString("is_owner")].isNull() && m_is_owner_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;
}

QString OAIObjs_enterprise_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_enterprise_user::asJsonObject() const {
    QJsonObject obj;
    if (m_enterprise_id_isSet) {
        obj.insert(QString("enterprise_id"), ::OpenAPI::toJsonValue(m_enterprise_id));
    }
    if (m_enterprise_name_isSet) {
        obj.insert(QString("enterprise_name"), ::OpenAPI::toJsonValue(m_enterprise_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_is_owner_isSet) {
        obj.insert(QString("is_owner"), ::OpenAPI::toJsonValue(m_is_owner));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    return obj;
}

QString OAIObjs_enterprise_user::getEnterpriseId() const {
    return m_enterprise_id;
}
void OAIObjs_enterprise_user::setEnterpriseId(const QString &enterprise_id) {
    m_enterprise_id = enterprise_id;
    m_enterprise_id_isSet = true;
}

bool OAIObjs_enterprise_user::is_enterprise_id_Set() const{
    return m_enterprise_id_isSet;
}

bool OAIObjs_enterprise_user::is_enterprise_id_Valid() const{
    return m_enterprise_id_isValid;
}

QString OAIObjs_enterprise_user::getEnterpriseName() const {
    return m_enterprise_name;
}
void OAIObjs_enterprise_user::setEnterpriseName(const QString &enterprise_name) {
    m_enterprise_name = enterprise_name;
    m_enterprise_name_isSet = true;
}

bool OAIObjs_enterprise_user::is_enterprise_name_Set() const{
    return m_enterprise_name_isSet;
}

bool OAIObjs_enterprise_user::is_enterprise_name_Valid() const{
    return m_enterprise_name_isValid;
}

QString OAIObjs_enterprise_user::getId() const {
    return m_id;
}
void OAIObjs_enterprise_user::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_enterprise_user::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_enterprise_user::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIObjs_enterprise_user::isIsAdmin() const {
    return m_is_admin;
}
void OAIObjs_enterprise_user::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIObjs_enterprise_user::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIObjs_enterprise_user::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

bool OAIObjs_enterprise_user::isIsOwner() const {
    return m_is_owner;
}
void OAIObjs_enterprise_user::setIsOwner(const bool &is_owner) {
    m_is_owner = is_owner;
    m_is_owner_isSet = true;
}

bool OAIObjs_enterprise_user::is_is_owner_Set() const{
    return m_is_owner_isSet;
}

bool OAIObjs_enterprise_user::is_is_owner_Valid() const{
    return m_is_owner_isValid;
}

QSet<QString> OAIObjs_enterprise_user::getTeams() const {
    return m_teams;
}
void OAIObjs_enterprise_user::setTeams(const QSet<QString> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIObjs_enterprise_user::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIObjs_enterprise_user::is_teams_Valid() const{
    return m_teams_isValid;
}

bool OAIObjs_enterprise_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enterprise_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_enterprise_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enterprise_id_isValid && m_enterprise_name_isValid && m_id_isValid && m_is_admin_isValid && m_is_owner_isValid && m_teams_isValid && true;
}

} // namespace OpenAPI
