/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIObjs_comment.h
 *
 * 
 */

#ifndef OAIObjs_comment_H
#define OAIObjs_comment_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIObjs_reaction.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIObjs_comment : public OAIObject {
public:
    OAIObjs_comment();
    OAIObjs_comment(QString json);
    ~OAIObjs_comment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComment() const;
    void setComment(const QString &comment);
    bool is_comment_Set() const;
    bool is_comment_Valid() const;

    qint32 getCreated() const;
    void setCreated(const qint32 &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsIntro() const;
    void setIsIntro(const bool &is_intro);
    bool is_is_intro_Set() const;
    bool is_is_intro_Valid() const;

    bool isIsStarred() const;
    void setIsStarred(const bool &is_starred);
    bool is_is_starred_Set() const;
    bool is_is_starred_Valid() const;

    qint32 getNumStars() const;
    void setNumStars(const qint32 &num_stars);
    bool is_num_stars_Set() const;
    bool is_num_stars_Valid() const;

    OAIObject getPinnedInfo() const;
    void setPinnedInfo(const OAIObject &pinned_info);
    bool is_pinned_info_Set() const;
    bool is_pinned_info_Valid() const;

    QList<QString> getPinnedTo() const;
    void setPinnedTo(const QList<QString> &pinned_to);
    bool is_pinned_to_Set() const;
    bool is_pinned_to_Valid() const;

    QList<OAIObjs_reaction> getReactions() const;
    void setReactions(const QList<OAIObjs_reaction> &reactions);
    bool is_reactions_Set() const;
    bool is_reactions_Valid() const;

    qint32 getTimestamp() const;
    void setTimestamp(const qint32 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_comment;
    bool m_comment_isSet;
    bool m_comment_isValid;

    qint32 m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_intro;
    bool m_is_intro_isSet;
    bool m_is_intro_isValid;

    bool m_is_starred;
    bool m_is_starred_isSet;
    bool m_is_starred_isValid;

    qint32 m_num_stars;
    bool m_num_stars_isSet;
    bool m_num_stars_isValid;

    OAIObject m_pinned_info;
    bool m_pinned_info_isSet;
    bool m_pinned_info_isValid;

    QList<QString> m_pinned_to;
    bool m_pinned_to_isSet;
    bool m_pinned_to_isValid;

    QList<OAIObjs_reaction> m_reactions;
    bool m_reactions_isSet;
    bool m_reactions_isValid;

    qint32 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIObjs_comment)

#endif // OAIObjs_comment_H
