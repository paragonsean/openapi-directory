/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsers_setPhoto_error_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsers_setPhoto_error_schema::OAIUsers_setPhoto_error_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsers_setPhoto_error_schema::OAIUsers_setPhoto_error_schema() {
    this->initializeModel();
}

OAIUsers_setPhoto_error_schema::~OAIUsers_setPhoto_error_schema() {}

void OAIUsers_setPhoto_error_schema::initializeModel() {

    m_callstack_isSet = false;
    m_callstack_isValid = false;

    m_debug_step_isSet = false;
    m_debug_step_isValid = false;

    m_dims_isSet = false;
    m_dims_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_time_ident_isSet = false;
    m_time_ident_isValid = false;
}

void OAIUsers_setPhoto_error_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsers_setPhoto_error_schema::fromJsonObject(QJsonObject json) {

    m_callstack_isValid = ::OpenAPI::fromJsonValue(m_callstack, json[QString("callstack")]);
    m_callstack_isSet = !json[QString("callstack")].isNull() && m_callstack_isValid;

    m_debug_step_isValid = ::OpenAPI::fromJsonValue(m_debug_step, json[QString("debug_step")]);
    m_debug_step_isSet = !json[QString("debug_step")].isNull() && m_debug_step_isValid;

    m_dims_isValid = ::OpenAPI::fromJsonValue(m_dims, json[QString("dims")]);
    m_dims_isSet = !json[QString("dims")].isNull() && m_dims_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_time_ident_isValid = ::OpenAPI::fromJsonValue(m_time_ident, json[QString("time_ident")]);
    m_time_ident_isSet = !json[QString("time_ident")].isNull() && m_time_ident_isValid;
}

QString OAIUsers_setPhoto_error_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsers_setPhoto_error_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_callstack_isSet) {
        obj.insert(QString("callstack"), ::OpenAPI::toJsonValue(m_callstack));
    }
    if (m_debug_step_isSet) {
        obj.insert(QString("debug_step"), ::OpenAPI::toJsonValue(m_debug_step));
    }
    if (m_dims_isSet) {
        obj.insert(QString("dims"), ::OpenAPI::toJsonValue(m_dims));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_time_ident_isSet) {
        obj.insert(QString("time_ident"), ::OpenAPI::toJsonValue(m_time_ident));
    }
    return obj;
}

QString OAIUsers_setPhoto_error_schema::getCallstack() const {
    return m_callstack;
}
void OAIUsers_setPhoto_error_schema::setCallstack(const QString &callstack) {
    m_callstack = callstack;
    m_callstack_isSet = true;
}

bool OAIUsers_setPhoto_error_schema::is_callstack_Set() const{
    return m_callstack_isSet;
}

bool OAIUsers_setPhoto_error_schema::is_callstack_Valid() const{
    return m_callstack_isValid;
}

QString OAIUsers_setPhoto_error_schema::getDebugStep() const {
    return m_debug_step;
}
void OAIUsers_setPhoto_error_schema::setDebugStep(const QString &debug_step) {
    m_debug_step = debug_step;
    m_debug_step_isSet = true;
}

bool OAIUsers_setPhoto_error_schema::is_debug_step_Set() const{
    return m_debug_step_isSet;
}

bool OAIUsers_setPhoto_error_schema::is_debug_step_Valid() const{
    return m_debug_step_isValid;
}

QString OAIUsers_setPhoto_error_schema::getDims() const {
    return m_dims;
}
void OAIUsers_setPhoto_error_schema::setDims(const QString &dims) {
    m_dims = dims;
    m_dims_isSet = true;
}

bool OAIUsers_setPhoto_error_schema::is_dims_Set() const{
    return m_dims_isSet;
}

bool OAIUsers_setPhoto_error_schema::is_dims_Valid() const{
    return m_dims_isValid;
}

QString OAIUsers_setPhoto_error_schema::getError() const {
    return m_error;
}
void OAIUsers_setPhoto_error_schema::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIUsers_setPhoto_error_schema::is_error_Set() const{
    return m_error_isSet;
}

bool OAIUsers_setPhoto_error_schema::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIUsers_setPhoto_error_schema::isOk() const {
    return m_ok;
}
void OAIUsers_setPhoto_error_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIUsers_setPhoto_error_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIUsers_setPhoto_error_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

qint32 OAIUsers_setPhoto_error_schema::getTimeIdent() const {
    return m_time_ident;
}
void OAIUsers_setPhoto_error_schema::setTimeIdent(const qint32 &time_ident) {
    m_time_ident = time_ident;
    m_time_ident_isSet = true;
}

bool OAIUsers_setPhoto_error_schema::is_time_ident_Set() const{
    return m_time_ident_isSet;
}

bool OAIUsers_setPhoto_error_schema::is_time_ident_Valid() const{
    return m_time_ident_isValid;
}

bool OAIUsers_setPhoto_error_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callstack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debug_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dims_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_ident_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsers_setPhoto_error_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
