/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITeam_accessLogs_schema_logins_inner.h
 *
 * 
 */

#ifndef OAITeam_accessLogs_schema_logins_inner_H
#define OAITeam_accessLogs_schema_logins_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITeam_accessLogs_schema_logins_inner : public OAIObject {
public:
    OAITeam_accessLogs_schema_logins_inner();
    OAITeam_accessLogs_schema_logins_inner(QString json);
    ~OAITeam_accessLogs_schema_logins_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    qint32 getDateFirst() const;
    void setDateFirst(const qint32 &date_first);
    bool is_date_first_Set() const;
    bool is_date_first_Valid() const;

    qint32 getDateLast() const;
    void setDateLast(const qint32 &date_last);
    bool is_date_last_Set() const;
    bool is_date_last_Valid() const;

    QString getIp() const;
    void setIp(const QString &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    QString getIsp() const;
    void setIsp(const QString &isp);
    bool is_isp_Set() const;
    bool is_isp_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getUserAgent() const;
    void setUserAgent(const QString &user_agent);
    bool is_user_agent_Set() const;
    bool is_user_agent_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    qint32 m_date_first;
    bool m_date_first_isSet;
    bool m_date_first_isValid;

    qint32 m_date_last;
    bool m_date_last_isSet;
    bool m_date_last_isValid;

    QString m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    QString m_isp;
    bool m_isp_isSet;
    bool m_isp_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITeam_accessLogs_schema_logins_inner)

#endif // OAITeam_accessLogs_schema_logins_inner_H
