/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI_method__users_getPresence.h"
#include "OAIUsers_conversations_error_schema.h"
#include "OAIUsers_conversations_success_schema.h"
#include "OAIUsers_counts_error_schema.h"
#include "OAIUsers_deletePhoto_error_schema.h"
#include "OAIUsers_deletePhoto_schema.h"
#include "OAIUsers_identity_error_schema.h"
#include "OAIUsers_identity_schema_inner.h"
#include "OAIUsers_info_error_schema.h"
#include "OAIUsers_info_success_schema.h"
#include "OAIUsers_list_error_schema.h"
#include "OAIUsers_list_schema.h"
#include "OAIUsers_lookupByEmail_error_schema.h"
#include "OAIUsers_lookupByEmail_success_schema.h"
#include "OAIUsers_profile_get_error_schema.h"
#include "OAIUsers_profile_get_schema.h"
#include "OAIUsers_profile_set_error_schema.h"
#include "OAIUsers_profile_set_schema.h"
#include "OAIUsers_setActive_error_schema.h"
#include "OAIUsers_setActive_schema.h"
#include "OAIUsers_setPhoto_error_schema.h"
#include "OAIUsers_setPhoto_schema.h"
#include "OAIUsers_setPresence_error_schema.h"
#include "OAIUsers_setPresence_schema.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  types QString [optional]
    * @param[in]  exclude_archived bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void usersConversations(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    */
    virtual void usersDeletePhoto(const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  user QString [optional]
    */
    virtual void usersGetPresence(const QString &token, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    */
    virtual void usersIdentity(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  include_locale bool [optional]
    * @param[in]  user QString [optional]
    */
    virtual void usersInfo(const QString &token, const ::OpenAPI::OptionalParam<bool> &include_locale = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  include_locale bool [optional]
    */
    virtual void usersList(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_locale = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  email QString [required]
    */
    virtual void usersLookupByEmail(const QString &token, const QString &email);

    /**
    * @param[in]  token QString [required]
    * @param[in]  include_labels bool [optional]
    * @param[in]  user QString [optional]
    */
    virtual void usersProfileGet(const QString &token, const ::OpenAPI::OptionalParam<bool> &include_labels = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  profile QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  value QString [optional]
    */
    virtual void usersProfileSet(const QString &token, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    */
    virtual void usersSetActive(const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  crop_w QString [optional]
    * @param[in]  crop_x QString [optional]
    * @param[in]  crop_y QString [optional]
    * @param[in]  image QString [optional]
    */
    virtual void usersSetPhoto(const QString &token, const ::OpenAPI::OptionalParam<QString> &crop_w = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crop_x = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &crop_y = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  presence QString [required]
    */
    virtual void usersSetPresence(const QString &token, const QString &presence);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersConversationsCallback(OAIHttpRequestWorker *worker);
    void usersDeletePhotoCallback(OAIHttpRequestWorker *worker);
    void usersGetPresenceCallback(OAIHttpRequestWorker *worker);
    void usersIdentityCallback(OAIHttpRequestWorker *worker);
    void usersInfoCallback(OAIHttpRequestWorker *worker);
    void usersListCallback(OAIHttpRequestWorker *worker);
    void usersLookupByEmailCallback(OAIHttpRequestWorker *worker);
    void usersProfileGetCallback(OAIHttpRequestWorker *worker);
    void usersProfileSetCallback(OAIHttpRequestWorker *worker);
    void usersSetActiveCallback(OAIHttpRequestWorker *worker);
    void usersSetPhotoCallback(OAIHttpRequestWorker *worker);
    void usersSetPresenceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersConversationsSignal(OAIUsers_conversations_success_schema summary);
    void usersDeletePhotoSignal(OAIUsers_deletePhoto_schema summary);
    void usersGetPresenceSignal(OAIAPI_method__users_getPresence summary);
    void usersIdentitySignal(QList<OAIUsers_identity_schema_inner> summary);
    void usersInfoSignal(OAIUsers_info_success_schema summary);
    void usersListSignal(OAIUsers_list_schema summary);
    void usersLookupByEmailSignal(OAIUsers_lookupByEmail_success_schema summary);
    void usersProfileGetSignal(OAIUsers_profile_get_schema summary);
    void usersProfileSetSignal(OAIUsers_profile_set_schema summary);
    void usersSetActiveSignal(OAIUsers_setActive_schema summary);
    void usersSetPhotoSignal(OAIUsers_setPhoto_schema summary);
    void usersSetPresenceSignal(OAIUsers_setPresence_schema summary);


    void usersConversationsSignalFull(OAIHttpRequestWorker *worker, OAIUsers_conversations_success_schema summary);
    void usersDeletePhotoSignalFull(OAIHttpRequestWorker *worker, OAIUsers_deletePhoto_schema summary);
    void usersGetPresenceSignalFull(OAIHttpRequestWorker *worker, OAIAPI_method__users_getPresence summary);
    void usersIdentitySignalFull(OAIHttpRequestWorker *worker, QList<OAIUsers_identity_schema_inner> summary);
    void usersInfoSignalFull(OAIHttpRequestWorker *worker, OAIUsers_info_success_schema summary);
    void usersListSignalFull(OAIHttpRequestWorker *worker, OAIUsers_list_schema summary);
    void usersLookupByEmailSignalFull(OAIHttpRequestWorker *worker, OAIUsers_lookupByEmail_success_schema summary);
    void usersProfileGetSignalFull(OAIHttpRequestWorker *worker, OAIUsers_profile_get_schema summary);
    void usersProfileSetSignalFull(OAIHttpRequestWorker *worker, OAIUsers_profile_set_schema summary);
    void usersSetActiveSignalFull(OAIHttpRequestWorker *worker, OAIUsers_setActive_schema summary);
    void usersSetPhotoSignalFull(OAIHttpRequestWorker *worker, OAIUsers_setPhoto_schema summary);
    void usersSetPresenceSignalFull(OAIHttpRequestWorker *worker, OAIUsers_setPresence_schema summary);

    Q_DECL_DEPRECATED_X("Use usersConversationsSignalError() instead")
    void usersConversationsSignalE(OAIUsers_conversations_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersConversationsSignalError(OAIUsers_conversations_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeletePhotoSignalError() instead")
    void usersDeletePhotoSignalE(OAIUsers_deletePhoto_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeletePhotoSignalError(OAIUsers_deletePhoto_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetPresenceSignalError() instead")
    void usersGetPresenceSignalE(OAIAPI_method__users_getPresence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetPresenceSignalError(OAIAPI_method__users_getPresence summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdentitySignalError() instead")
    void usersIdentitySignalE(QList<OAIUsers_identity_schema_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdentitySignalError(QList<OAIUsers_identity_schema_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInfoSignalError() instead")
    void usersInfoSignalE(OAIUsers_info_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInfoSignalError(OAIUsers_info_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalError() instead")
    void usersListSignalE(OAIUsers_list_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalError(OAIUsers_list_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersLookupByEmailSignalError() instead")
    void usersLookupByEmailSignalE(OAIUsers_lookupByEmail_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersLookupByEmailSignalError(OAIUsers_lookupByEmail_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersProfileGetSignalError() instead")
    void usersProfileGetSignalE(OAIUsers_profile_get_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersProfileGetSignalError(OAIUsers_profile_get_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersProfileSetSignalError() instead")
    void usersProfileSetSignalE(OAIUsers_profile_set_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersProfileSetSignalError(OAIUsers_profile_set_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSetActiveSignalError() instead")
    void usersSetActiveSignalE(OAIUsers_setActive_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSetActiveSignalError(OAIUsers_setActive_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSetPhotoSignalError() instead")
    void usersSetPhotoSignalE(OAIUsers_setPhoto_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSetPhotoSignalError(OAIUsers_setPhoto_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSetPresenceSignalError() instead")
    void usersSetPresenceSignalE(OAIUsers_setPresence_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSetPresenceSignalError(OAIUsers_setPresence_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersConversationsSignalErrorFull() instead")
    void usersConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeletePhotoSignalErrorFull() instead")
    void usersDeletePhotoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeletePhotoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetPresenceSignalErrorFull() instead")
    void usersGetPresenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetPresenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdentitySignalErrorFull() instead")
    void usersIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersInfoSignalErrorFull() instead")
    void usersInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalErrorFull() instead")
    void usersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersLookupByEmailSignalErrorFull() instead")
    void usersLookupByEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersLookupByEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersProfileGetSignalErrorFull() instead")
    void usersProfileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersProfileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersProfileSetSignalErrorFull() instead")
    void usersProfileSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersProfileSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSetActiveSignalErrorFull() instead")
    void usersSetActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSetActiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSetPhotoSignalErrorFull() instead")
    void usersSetPhotoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSetPhotoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSetPresenceSignalErrorFull() instead")
    void usersSetPresenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSetPresenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
