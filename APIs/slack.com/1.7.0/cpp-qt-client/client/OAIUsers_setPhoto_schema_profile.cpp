/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsers_setPhoto_schema_profile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsers_setPhoto_schema_profile::OAIUsers_setPhoto_schema_profile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsers_setPhoto_schema_profile::OAIUsers_setPhoto_schema_profile() {
    this->initializeModel();
}

OAIUsers_setPhoto_schema_profile::~OAIUsers_setPhoto_schema_profile() {}

void OAIUsers_setPhoto_schema_profile::initializeModel() {

    m_avatar_hash_isSet = false;
    m_avatar_hash_isValid = false;

    m_image_1024_isSet = false;
    m_image_1024_isValid = false;

    m_image_192_isSet = false;
    m_image_192_isValid = false;

    m_image_24_isSet = false;
    m_image_24_isValid = false;

    m_image_32_isSet = false;
    m_image_32_isValid = false;

    m_image_48_isSet = false;
    m_image_48_isValid = false;

    m_image_512_isSet = false;
    m_image_512_isValid = false;

    m_image_72_isSet = false;
    m_image_72_isValid = false;

    m_image_original_isSet = false;
    m_image_original_isValid = false;
}

void OAIUsers_setPhoto_schema_profile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsers_setPhoto_schema_profile::fromJsonObject(QJsonObject json) {

    m_avatar_hash_isValid = ::OpenAPI::fromJsonValue(m_avatar_hash, json[QString("avatar_hash")]);
    m_avatar_hash_isSet = !json[QString("avatar_hash")].isNull() && m_avatar_hash_isValid;

    m_image_1024_isValid = ::OpenAPI::fromJsonValue(m_image_1024, json[QString("image_1024")]);
    m_image_1024_isSet = !json[QString("image_1024")].isNull() && m_image_1024_isValid;

    m_image_192_isValid = ::OpenAPI::fromJsonValue(m_image_192, json[QString("image_192")]);
    m_image_192_isSet = !json[QString("image_192")].isNull() && m_image_192_isValid;

    m_image_24_isValid = ::OpenAPI::fromJsonValue(m_image_24, json[QString("image_24")]);
    m_image_24_isSet = !json[QString("image_24")].isNull() && m_image_24_isValid;

    m_image_32_isValid = ::OpenAPI::fromJsonValue(m_image_32, json[QString("image_32")]);
    m_image_32_isSet = !json[QString("image_32")].isNull() && m_image_32_isValid;

    m_image_48_isValid = ::OpenAPI::fromJsonValue(m_image_48, json[QString("image_48")]);
    m_image_48_isSet = !json[QString("image_48")].isNull() && m_image_48_isValid;

    m_image_512_isValid = ::OpenAPI::fromJsonValue(m_image_512, json[QString("image_512")]);
    m_image_512_isSet = !json[QString("image_512")].isNull() && m_image_512_isValid;

    m_image_72_isValid = ::OpenAPI::fromJsonValue(m_image_72, json[QString("image_72")]);
    m_image_72_isSet = !json[QString("image_72")].isNull() && m_image_72_isValid;

    m_image_original_isValid = ::OpenAPI::fromJsonValue(m_image_original, json[QString("image_original")]);
    m_image_original_isSet = !json[QString("image_original")].isNull() && m_image_original_isValid;
}

QString OAIUsers_setPhoto_schema_profile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsers_setPhoto_schema_profile::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_hash_isSet) {
        obj.insert(QString("avatar_hash"), ::OpenAPI::toJsonValue(m_avatar_hash));
    }
    if (m_image_1024_isSet) {
        obj.insert(QString("image_1024"), ::OpenAPI::toJsonValue(m_image_1024));
    }
    if (m_image_192_isSet) {
        obj.insert(QString("image_192"), ::OpenAPI::toJsonValue(m_image_192));
    }
    if (m_image_24_isSet) {
        obj.insert(QString("image_24"), ::OpenAPI::toJsonValue(m_image_24));
    }
    if (m_image_32_isSet) {
        obj.insert(QString("image_32"), ::OpenAPI::toJsonValue(m_image_32));
    }
    if (m_image_48_isSet) {
        obj.insert(QString("image_48"), ::OpenAPI::toJsonValue(m_image_48));
    }
    if (m_image_512_isSet) {
        obj.insert(QString("image_512"), ::OpenAPI::toJsonValue(m_image_512));
    }
    if (m_image_72_isSet) {
        obj.insert(QString("image_72"), ::OpenAPI::toJsonValue(m_image_72));
    }
    if (m_image_original_isSet) {
        obj.insert(QString("image_original"), ::OpenAPI::toJsonValue(m_image_original));
    }
    return obj;
}

QString OAIUsers_setPhoto_schema_profile::getAvatarHash() const {
    return m_avatar_hash;
}
void OAIUsers_setPhoto_schema_profile::setAvatarHash(const QString &avatar_hash) {
    m_avatar_hash = avatar_hash;
    m_avatar_hash_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_avatar_hash_Set() const{
    return m_avatar_hash_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_avatar_hash_Valid() const{
    return m_avatar_hash_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImage1024() const {
    return m_image_1024;
}
void OAIUsers_setPhoto_schema_profile::setImage1024(const QString &image_1024) {
    m_image_1024 = image_1024;
    m_image_1024_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_1024_Set() const{
    return m_image_1024_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_1024_Valid() const{
    return m_image_1024_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImage192() const {
    return m_image_192;
}
void OAIUsers_setPhoto_schema_profile::setImage192(const QString &image_192) {
    m_image_192 = image_192;
    m_image_192_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_192_Set() const{
    return m_image_192_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_192_Valid() const{
    return m_image_192_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImage24() const {
    return m_image_24;
}
void OAIUsers_setPhoto_schema_profile::setImage24(const QString &image_24) {
    m_image_24 = image_24;
    m_image_24_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_24_Set() const{
    return m_image_24_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_24_Valid() const{
    return m_image_24_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImage32() const {
    return m_image_32;
}
void OAIUsers_setPhoto_schema_profile::setImage32(const QString &image_32) {
    m_image_32 = image_32;
    m_image_32_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_32_Set() const{
    return m_image_32_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_32_Valid() const{
    return m_image_32_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImage48() const {
    return m_image_48;
}
void OAIUsers_setPhoto_schema_profile::setImage48(const QString &image_48) {
    m_image_48 = image_48;
    m_image_48_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_48_Set() const{
    return m_image_48_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_48_Valid() const{
    return m_image_48_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImage512() const {
    return m_image_512;
}
void OAIUsers_setPhoto_schema_profile::setImage512(const QString &image_512) {
    m_image_512 = image_512;
    m_image_512_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_512_Set() const{
    return m_image_512_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_512_Valid() const{
    return m_image_512_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImage72() const {
    return m_image_72;
}
void OAIUsers_setPhoto_schema_profile::setImage72(const QString &image_72) {
    m_image_72 = image_72;
    m_image_72_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_72_Set() const{
    return m_image_72_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_72_Valid() const{
    return m_image_72_isValid;
}

QString OAIUsers_setPhoto_schema_profile::getImageOriginal() const {
    return m_image_original;
}
void OAIUsers_setPhoto_schema_profile::setImageOriginal(const QString &image_original) {
    m_image_original = image_original;
    m_image_original_isSet = true;
}

bool OAIUsers_setPhoto_schema_profile::is_image_original_Set() const{
    return m_image_original_isSet;
}

bool OAIUsers_setPhoto_schema_profile::is_image_original_Valid() const{
    return m_image_original_isValid;
}

bool OAIUsers_setPhoto_schema_profile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_1024_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_192_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_24_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_32_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_512_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_72_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_original_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsers_setPhoto_schema_profile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_hash_isValid && m_image_1024_isValid && m_image_192_isValid && m_image_24_isValid && m_image_32_isValid && m_image_48_isValid && m_image_512_isValid && m_image_72_isValid && m_image_original_isValid && true;
}

} // namespace OpenAPI
