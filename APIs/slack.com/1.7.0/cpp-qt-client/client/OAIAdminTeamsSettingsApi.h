/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminTeamsSettingsApi_H
#define OAI_OAIAdminTeamsSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefault_error_template.h"
#include "OAIDefault_success_template.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminTeamsSettingsApi : public QObject {
    Q_OBJECT

public:
    OAIAdminTeamsSettingsApi(const int timeOut = 0);
    ~OAIAdminTeamsSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsInfo(const QString &token, const QString &team_id);

    /**
    * @param[in]  channel_ids QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminTeamsSettingsSetDefaultChannels(const QString &channel_ids, const QString &team_id, const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  description QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsSetDescription(const QString &token, const QString &description, const QString &team_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  discoverability QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsSetDiscoverability(const QString &token, const QString &discoverability, const QString &team_id);

    /**
    * @param[in]  image_url QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminTeamsSettingsSetIcon(const QString &image_url, const QString &team_id, const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  name QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsSetName(const QString &token, const QString &name, const QString &team_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminTeamsSettingsInfoCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetDefaultChannelsCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetDescriptionCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetDiscoverabilityCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetIconCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminTeamsSettingsInfoSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetDefaultChannelsSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetDescriptionSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetDiscoverabilitySignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetIconSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetNameSignal(OAIDefault_success_template summary);


    void adminTeamsSettingsInfoSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetDefaultChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetDescriptionSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetDiscoverabilitySignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetIconSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetNameSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);

    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsInfoSignalError() instead")
    void adminTeamsSettingsInfoSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsInfoSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDefaultChannelsSignalError() instead")
    void adminTeamsSettingsSetDefaultChannelsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDefaultChannelsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDescriptionSignalError() instead")
    void adminTeamsSettingsSetDescriptionSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDescriptionSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDiscoverabilitySignalError() instead")
    void adminTeamsSettingsSetDiscoverabilitySignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDiscoverabilitySignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetIconSignalError() instead")
    void adminTeamsSettingsSetIconSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetIconSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetNameSignalError() instead")
    void adminTeamsSettingsSetNameSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetNameSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsInfoSignalErrorFull() instead")
    void adminTeamsSettingsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDefaultChannelsSignalErrorFull() instead")
    void adminTeamsSettingsSetDefaultChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDefaultChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDescriptionSignalErrorFull() instead")
    void adminTeamsSettingsSetDescriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDescriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDiscoverabilitySignalErrorFull() instead")
    void adminTeamsSettingsSetDiscoverabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDiscoverabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetIconSignalErrorFull() instead")
    void adminTeamsSettingsSetIconSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetIconSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetNameSignalErrorFull() instead")
    void adminTeamsSettingsSetNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
