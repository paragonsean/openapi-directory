/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReactionsApi_H
#define OAI_OAIReactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIReactions_add_error_schema.h"
#include "OAIReactions_add_schema.h"
#include "OAIReactions_get_error_schema.h"
#include "OAIReactions_get_success_schema_inner.h"
#include "OAIReactions_list_error_schema.h"
#include "OAIReactions_list_schema.h"
#include "OAIReactions_remove_error_schema.h"
#include "OAIReactions_remove_schema.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReactionsApi : public QObject {
    Q_OBJECT

public:
    OAIReactionsApi(const int timeOut = 0);
    ~OAIReactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  name QString [required]
    * @param[in]  timestamp QString [required]
    */
    virtual void reactionsAdd(const QString &token, const QString &channel, const QString &name, const QString &timestamp);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  file_comment QString [optional]
    * @param[in]  full bool [optional]
    * @param[in]  timestamp QString [optional]
    */
    virtual void reactionsGet(const QString &token, const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timestamp = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  user QString [optional]
    * @param[in]  full bool [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void reactionsList(const QString &token, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &full = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  name QString [required]
    * @param[in]  channel QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  file_comment QString [optional]
    * @param[in]  timestamp QString [optional]
    */
    virtual void reactionsRemove(const QString &token, const QString &name, const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file_comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timestamp = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reactionsAddCallback(OAIHttpRequestWorker *worker);
    void reactionsGetCallback(OAIHttpRequestWorker *worker);
    void reactionsListCallback(OAIHttpRequestWorker *worker);
    void reactionsRemoveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reactionsAddSignal(OAIReactions_add_schema summary);
    void reactionsGetSignal(QList<OAIReactions_get_success_schema_inner> summary);
    void reactionsListSignal(OAIReactions_list_schema summary);
    void reactionsRemoveSignal(OAIReactions_remove_schema summary);


    void reactionsAddSignalFull(OAIHttpRequestWorker *worker, OAIReactions_add_schema summary);
    void reactionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReactions_get_success_schema_inner> summary);
    void reactionsListSignalFull(OAIHttpRequestWorker *worker, OAIReactions_list_schema summary);
    void reactionsRemoveSignalFull(OAIHttpRequestWorker *worker, OAIReactions_remove_schema summary);

    Q_DECL_DEPRECATED_X("Use reactionsAddSignalError() instead")
    void reactionsAddSignalE(OAIReactions_add_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsAddSignalError(OAIReactions_add_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactionsGetSignalError() instead")
    void reactionsGetSignalE(QList<OAIReactions_get_success_schema_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsGetSignalError(QList<OAIReactions_get_success_schema_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactionsListSignalError() instead")
    void reactionsListSignalE(OAIReactions_list_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsListSignalError(OAIReactions_list_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactionsRemoveSignalError() instead")
    void reactionsRemoveSignalE(OAIReactions_remove_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsRemoveSignalError(OAIReactions_remove_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reactionsAddSignalErrorFull() instead")
    void reactionsAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactionsGetSignalErrorFull() instead")
    void reactionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactionsListSignalErrorFull() instead")
    void reactionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactionsRemoveSignalErrorFull() instead")
    void reactionsRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactionsRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
