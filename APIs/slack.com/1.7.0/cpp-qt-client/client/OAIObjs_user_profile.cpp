/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_user_profile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_user_profile::OAIObjs_user_profile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_user_profile::OAIObjs_user_profile() {
    this->initializeModel();
}

OAIObjs_user_profile::~OAIObjs_user_profile() {}

void OAIObjs_user_profile::initializeModel() {

    m_always_active_isSet = false;
    m_always_active_isValid = false;

    m_api_app_id_isSet = false;
    m_api_app_id_isValid = false;

    m_avatar_hash_isSet = false;
    m_avatar_hash_isValid = false;

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_display_name_normalized_isSet = false;
    m_display_name_normalized_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_guest_expiration_ts_isSet = false;
    m_guest_expiration_ts_isValid = false;

    m_guest_invited_by_isSet = false;
    m_guest_invited_by_isValid = false;

    m_image_1024_isSet = false;
    m_image_1024_isValid = false;

    m_image_192_isSet = false;
    m_image_192_isValid = false;

    m_image_24_isSet = false;
    m_image_24_isValid = false;

    m_image_32_isSet = false;
    m_image_32_isValid = false;

    m_image_48_isSet = false;
    m_image_48_isValid = false;

    m_image_512_isSet = false;
    m_image_512_isValid = false;

    m_image_72_isSet = false;
    m_image_72_isValid = false;

    m_image_original_isSet = false;
    m_image_original_isValid = false;

    m_is_app_user_isSet = false;
    m_is_app_user_isValid = false;

    m_is_custom_image_isSet = false;
    m_is_custom_image_isValid = false;

    m_is_restricted_isSet = false;
    m_is_restricted_isValid = false;

    m_is_ultra_restricted_isSet = false;
    m_is_ultra_restricted_isValid = false;

    m_last_avatar_image_hash_isSet = false;
    m_last_avatar_image_hash_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_memberships_count_isSet = false;
    m_memberships_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_pronouns_isSet = false;
    m_pronouns_isValid = false;

    m_real_name_isSet = false;
    m_real_name_isValid = false;

    m_real_name_normalized_isSet = false;
    m_real_name_normalized_isValid = false;

    m_skype_isSet = false;
    m_skype_isValid = false;

    m_status_default_emoji_isSet = false;
    m_status_default_emoji_isValid = false;

    m_status_default_text_isSet = false;
    m_status_default_text_isValid = false;

    m_status_default_text_canonical_isSet = false;
    m_status_default_text_canonical_isValid = false;

    m_status_emoji_isSet = false;
    m_status_emoji_isValid = false;

    m_status_expiration_isSet = false;
    m_status_expiration_isValid = false;

    m_status_text_isSet = false;
    m_status_text_isValid = false;

    m_status_text_canonical_isSet = false;
    m_status_text_canonical_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIObjs_user_profile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_user_profile::fromJsonObject(QJsonObject json) {

    m_always_active_isValid = ::OpenAPI::fromJsonValue(m_always_active, json[QString("always_active")]);
    m_always_active_isSet = !json[QString("always_active")].isNull() && m_always_active_isValid;

    m_api_app_id_isValid = ::OpenAPI::fromJsonValue(m_api_app_id, json[QString("api_app_id")]);
    m_api_app_id_isSet = !json[QString("api_app_id")].isNull() && m_api_app_id_isValid;

    m_avatar_hash_isValid = ::OpenAPI::fromJsonValue(m_avatar_hash, json[QString("avatar_hash")]);
    m_avatar_hash_isSet = !json[QString("avatar_hash")].isNull() && m_avatar_hash_isValid;

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("bot_id")]);
    m_bot_id_isSet = !json[QString("bot_id")].isNull() && m_bot_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_display_name_normalized_isValid = ::OpenAPI::fromJsonValue(m_display_name_normalized, json[QString("display_name_normalized")]);
    m_display_name_normalized_isSet = !json[QString("display_name_normalized")].isNull() && m_display_name_normalized_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_guest_expiration_ts_isValid = ::OpenAPI::fromJsonValue(m_guest_expiration_ts, json[QString("guest_expiration_ts")]);
    m_guest_expiration_ts_isSet = !json[QString("guest_expiration_ts")].isNull() && m_guest_expiration_ts_isValid;

    m_guest_invited_by_isValid = ::OpenAPI::fromJsonValue(m_guest_invited_by, json[QString("guest_invited_by")]);
    m_guest_invited_by_isSet = !json[QString("guest_invited_by")].isNull() && m_guest_invited_by_isValid;

    m_image_1024_isValid = ::OpenAPI::fromJsonValue(m_image_1024, json[QString("image_1024")]);
    m_image_1024_isSet = !json[QString("image_1024")].isNull() && m_image_1024_isValid;

    m_image_192_isValid = ::OpenAPI::fromJsonValue(m_image_192, json[QString("image_192")]);
    m_image_192_isSet = !json[QString("image_192")].isNull() && m_image_192_isValid;

    m_image_24_isValid = ::OpenAPI::fromJsonValue(m_image_24, json[QString("image_24")]);
    m_image_24_isSet = !json[QString("image_24")].isNull() && m_image_24_isValid;

    m_image_32_isValid = ::OpenAPI::fromJsonValue(m_image_32, json[QString("image_32")]);
    m_image_32_isSet = !json[QString("image_32")].isNull() && m_image_32_isValid;

    m_image_48_isValid = ::OpenAPI::fromJsonValue(m_image_48, json[QString("image_48")]);
    m_image_48_isSet = !json[QString("image_48")].isNull() && m_image_48_isValid;

    m_image_512_isValid = ::OpenAPI::fromJsonValue(m_image_512, json[QString("image_512")]);
    m_image_512_isSet = !json[QString("image_512")].isNull() && m_image_512_isValid;

    m_image_72_isValid = ::OpenAPI::fromJsonValue(m_image_72, json[QString("image_72")]);
    m_image_72_isSet = !json[QString("image_72")].isNull() && m_image_72_isValid;

    m_image_original_isValid = ::OpenAPI::fromJsonValue(m_image_original, json[QString("image_original")]);
    m_image_original_isSet = !json[QString("image_original")].isNull() && m_image_original_isValid;

    m_is_app_user_isValid = ::OpenAPI::fromJsonValue(m_is_app_user, json[QString("is_app_user")]);
    m_is_app_user_isSet = !json[QString("is_app_user")].isNull() && m_is_app_user_isValid;

    m_is_custom_image_isValid = ::OpenAPI::fromJsonValue(m_is_custom_image, json[QString("is_custom_image")]);
    m_is_custom_image_isSet = !json[QString("is_custom_image")].isNull() && m_is_custom_image_isValid;

    m_is_restricted_isValid = ::OpenAPI::fromJsonValue(m_is_restricted, json[QString("is_restricted")]);
    m_is_restricted_isSet = !json[QString("is_restricted")].isNull() && m_is_restricted_isValid;

    m_is_ultra_restricted_isValid = ::OpenAPI::fromJsonValue(m_is_ultra_restricted, json[QString("is_ultra_restricted")]);
    m_is_ultra_restricted_isSet = !json[QString("is_ultra_restricted")].isNull() && m_is_ultra_restricted_isValid;

    m_last_avatar_image_hash_isValid = ::OpenAPI::fromJsonValue(m_last_avatar_image_hash, json[QString("last_avatar_image_hash")]);
    m_last_avatar_image_hash_isSet = !json[QString("last_avatar_image_hash")].isNull() && m_last_avatar_image_hash_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_memberships_count_isValid = ::OpenAPI::fromJsonValue(m_memberships_count, json[QString("memberships_count")]);
    m_memberships_count_isSet = !json[QString("memberships_count")].isNull() && m_memberships_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_pronouns_isValid = ::OpenAPI::fromJsonValue(m_pronouns, json[QString("pronouns")]);
    m_pronouns_isSet = !json[QString("pronouns")].isNull() && m_pronouns_isValid;

    m_real_name_isValid = ::OpenAPI::fromJsonValue(m_real_name, json[QString("real_name")]);
    m_real_name_isSet = !json[QString("real_name")].isNull() && m_real_name_isValid;

    m_real_name_normalized_isValid = ::OpenAPI::fromJsonValue(m_real_name_normalized, json[QString("real_name_normalized")]);
    m_real_name_normalized_isSet = !json[QString("real_name_normalized")].isNull() && m_real_name_normalized_isValid;

    m_skype_isValid = ::OpenAPI::fromJsonValue(m_skype, json[QString("skype")]);
    m_skype_isSet = !json[QString("skype")].isNull() && m_skype_isValid;

    m_status_default_emoji_isValid = ::OpenAPI::fromJsonValue(m_status_default_emoji, json[QString("status_default_emoji")]);
    m_status_default_emoji_isSet = !json[QString("status_default_emoji")].isNull() && m_status_default_emoji_isValid;

    m_status_default_text_isValid = ::OpenAPI::fromJsonValue(m_status_default_text, json[QString("status_default_text")]);
    m_status_default_text_isSet = !json[QString("status_default_text")].isNull() && m_status_default_text_isValid;

    m_status_default_text_canonical_isValid = ::OpenAPI::fromJsonValue(m_status_default_text_canonical, json[QString("status_default_text_canonical")]);
    m_status_default_text_canonical_isSet = !json[QString("status_default_text_canonical")].isNull() && m_status_default_text_canonical_isValid;

    m_status_emoji_isValid = ::OpenAPI::fromJsonValue(m_status_emoji, json[QString("status_emoji")]);
    m_status_emoji_isSet = !json[QString("status_emoji")].isNull() && m_status_emoji_isValid;

    m_status_expiration_isValid = ::OpenAPI::fromJsonValue(m_status_expiration, json[QString("status_expiration")]);
    m_status_expiration_isSet = !json[QString("status_expiration")].isNull() && m_status_expiration_isValid;

    m_status_text_isValid = ::OpenAPI::fromJsonValue(m_status_text, json[QString("status_text")]);
    m_status_text_isSet = !json[QString("status_text")].isNull() && m_status_text_isValid;

    m_status_text_canonical_isValid = ::OpenAPI::fromJsonValue(m_status_text_canonical, json[QString("status_text_canonical")]);
    m_status_text_canonical_isSet = !json[QString("status_text_canonical")].isNull() && m_status_text_canonical_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIObjs_user_profile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_user_profile::asJsonObject() const {
    QJsonObject obj;
    if (m_always_active_isSet) {
        obj.insert(QString("always_active"), ::OpenAPI::toJsonValue(m_always_active));
    }
    if (m_api_app_id_isSet) {
        obj.insert(QString("api_app_id"), ::OpenAPI::toJsonValue(m_api_app_id));
    }
    if (m_avatar_hash_isSet) {
        obj.insert(QString("avatar_hash"), ::OpenAPI::toJsonValue(m_avatar_hash));
    }
    if (m_bot_id_isSet) {
        obj.insert(QString("bot_id"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_display_name_normalized_isSet) {
        obj.insert(QString("display_name_normalized"), ::OpenAPI::toJsonValue(m_display_name_normalized));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_guest_expiration_ts_isSet) {
        obj.insert(QString("guest_expiration_ts"), ::OpenAPI::toJsonValue(m_guest_expiration_ts));
    }
    if (m_guest_invited_by_isSet) {
        obj.insert(QString("guest_invited_by"), ::OpenAPI::toJsonValue(m_guest_invited_by));
    }
    if (m_image_1024_isSet) {
        obj.insert(QString("image_1024"), ::OpenAPI::toJsonValue(m_image_1024));
    }
    if (m_image_192_isSet) {
        obj.insert(QString("image_192"), ::OpenAPI::toJsonValue(m_image_192));
    }
    if (m_image_24_isSet) {
        obj.insert(QString("image_24"), ::OpenAPI::toJsonValue(m_image_24));
    }
    if (m_image_32_isSet) {
        obj.insert(QString("image_32"), ::OpenAPI::toJsonValue(m_image_32));
    }
    if (m_image_48_isSet) {
        obj.insert(QString("image_48"), ::OpenAPI::toJsonValue(m_image_48));
    }
    if (m_image_512_isSet) {
        obj.insert(QString("image_512"), ::OpenAPI::toJsonValue(m_image_512));
    }
    if (m_image_72_isSet) {
        obj.insert(QString("image_72"), ::OpenAPI::toJsonValue(m_image_72));
    }
    if (m_image_original_isSet) {
        obj.insert(QString("image_original"), ::OpenAPI::toJsonValue(m_image_original));
    }
    if (m_is_app_user_isSet) {
        obj.insert(QString("is_app_user"), ::OpenAPI::toJsonValue(m_is_app_user));
    }
    if (m_is_custom_image_isSet) {
        obj.insert(QString("is_custom_image"), ::OpenAPI::toJsonValue(m_is_custom_image));
    }
    if (m_is_restricted_isSet) {
        obj.insert(QString("is_restricted"), ::OpenAPI::toJsonValue(m_is_restricted));
    }
    if (m_is_ultra_restricted_isSet) {
        obj.insert(QString("is_ultra_restricted"), ::OpenAPI::toJsonValue(m_is_ultra_restricted));
    }
    if (m_last_avatar_image_hash_isSet) {
        obj.insert(QString("last_avatar_image_hash"), ::OpenAPI::toJsonValue(m_last_avatar_image_hash));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_memberships_count_isSet) {
        obj.insert(QString("memberships_count"), ::OpenAPI::toJsonValue(m_memberships_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_pronouns_isSet) {
        obj.insert(QString("pronouns"), ::OpenAPI::toJsonValue(m_pronouns));
    }
    if (m_real_name_isSet) {
        obj.insert(QString("real_name"), ::OpenAPI::toJsonValue(m_real_name));
    }
    if (m_real_name_normalized_isSet) {
        obj.insert(QString("real_name_normalized"), ::OpenAPI::toJsonValue(m_real_name_normalized));
    }
    if (m_skype_isSet) {
        obj.insert(QString("skype"), ::OpenAPI::toJsonValue(m_skype));
    }
    if (m_status_default_emoji_isSet) {
        obj.insert(QString("status_default_emoji"), ::OpenAPI::toJsonValue(m_status_default_emoji));
    }
    if (m_status_default_text_isSet) {
        obj.insert(QString("status_default_text"), ::OpenAPI::toJsonValue(m_status_default_text));
    }
    if (m_status_default_text_canonical_isSet) {
        obj.insert(QString("status_default_text_canonical"), ::OpenAPI::toJsonValue(m_status_default_text_canonical));
    }
    if (m_status_emoji_isSet) {
        obj.insert(QString("status_emoji"), ::OpenAPI::toJsonValue(m_status_emoji));
    }
    if (m_status_expiration_isSet) {
        obj.insert(QString("status_expiration"), ::OpenAPI::toJsonValue(m_status_expiration));
    }
    if (m_status_text_isSet) {
        obj.insert(QString("status_text"), ::OpenAPI::toJsonValue(m_status_text));
    }
    if (m_status_text_canonical_isSet) {
        obj.insert(QString("status_text_canonical"), ::OpenAPI::toJsonValue(m_status_text_canonical));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIObjs_user_profile::isAlwaysActive() const {
    return m_always_active;
}
void OAIObjs_user_profile::setAlwaysActive(const bool &always_active) {
    m_always_active = always_active;
    m_always_active_isSet = true;
}

bool OAIObjs_user_profile::is_always_active_Set() const{
    return m_always_active_isSet;
}

bool OAIObjs_user_profile::is_always_active_Valid() const{
    return m_always_active_isValid;
}

QString OAIObjs_user_profile::getApiAppId() const {
    return m_api_app_id;
}
void OAIObjs_user_profile::setApiAppId(const QString &api_app_id) {
    m_api_app_id = api_app_id;
    m_api_app_id_isSet = true;
}

bool OAIObjs_user_profile::is_api_app_id_Set() const{
    return m_api_app_id_isSet;
}

bool OAIObjs_user_profile::is_api_app_id_Valid() const{
    return m_api_app_id_isValid;
}

QString OAIObjs_user_profile::getAvatarHash() const {
    return m_avatar_hash;
}
void OAIObjs_user_profile::setAvatarHash(const QString &avatar_hash) {
    m_avatar_hash = avatar_hash;
    m_avatar_hash_isSet = true;
}

bool OAIObjs_user_profile::is_avatar_hash_Set() const{
    return m_avatar_hash_isSet;
}

bool OAIObjs_user_profile::is_avatar_hash_Valid() const{
    return m_avatar_hash_isValid;
}

QString OAIObjs_user_profile::getBotId() const {
    return m_bot_id;
}
void OAIObjs_user_profile::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIObjs_user_profile::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIObjs_user_profile::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

QString OAIObjs_user_profile::getDisplayName() const {
    return m_display_name;
}
void OAIObjs_user_profile::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIObjs_user_profile::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIObjs_user_profile::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIObjs_user_profile::getDisplayNameNormalized() const {
    return m_display_name_normalized;
}
void OAIObjs_user_profile::setDisplayNameNormalized(const QString &display_name_normalized) {
    m_display_name_normalized = display_name_normalized;
    m_display_name_normalized_isSet = true;
}

bool OAIObjs_user_profile::is_display_name_normalized_Set() const{
    return m_display_name_normalized_isSet;
}

bool OAIObjs_user_profile::is_display_name_normalized_Valid() const{
    return m_display_name_normalized_isValid;
}

QString OAIObjs_user_profile::getEmail() const {
    return m_email;
}
void OAIObjs_user_profile::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIObjs_user_profile::is_email_Set() const{
    return m_email_isSet;
}

bool OAIObjs_user_profile::is_email_Valid() const{
    return m_email_isValid;
}

QList<OAIObject> OAIObjs_user_profile::getFields() const {
    return m_fields;
}
void OAIObjs_user_profile::setFields(const QList<OAIObject> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIObjs_user_profile::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIObjs_user_profile::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIObjs_user_profile::getFirstName() const {
    return m_first_name;
}
void OAIObjs_user_profile::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIObjs_user_profile::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIObjs_user_profile::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint32 OAIObjs_user_profile::getGuestExpirationTs() const {
    return m_guest_expiration_ts;
}
void OAIObjs_user_profile::setGuestExpirationTs(const qint32 &guest_expiration_ts) {
    m_guest_expiration_ts = guest_expiration_ts;
    m_guest_expiration_ts_isSet = true;
}

bool OAIObjs_user_profile::is_guest_expiration_ts_Set() const{
    return m_guest_expiration_ts_isSet;
}

bool OAIObjs_user_profile::is_guest_expiration_ts_Valid() const{
    return m_guest_expiration_ts_isValid;
}

QString OAIObjs_user_profile::getGuestInvitedBy() const {
    return m_guest_invited_by;
}
void OAIObjs_user_profile::setGuestInvitedBy(const QString &guest_invited_by) {
    m_guest_invited_by = guest_invited_by;
    m_guest_invited_by_isSet = true;
}

bool OAIObjs_user_profile::is_guest_invited_by_Set() const{
    return m_guest_invited_by_isSet;
}

bool OAIObjs_user_profile::is_guest_invited_by_Valid() const{
    return m_guest_invited_by_isValid;
}

QString OAIObjs_user_profile::getImage1024() const {
    return m_image_1024;
}
void OAIObjs_user_profile::setImage1024(const QString &image_1024) {
    m_image_1024 = image_1024;
    m_image_1024_isSet = true;
}

bool OAIObjs_user_profile::is_image_1024_Set() const{
    return m_image_1024_isSet;
}

bool OAIObjs_user_profile::is_image_1024_Valid() const{
    return m_image_1024_isValid;
}

QString OAIObjs_user_profile::getImage192() const {
    return m_image_192;
}
void OAIObjs_user_profile::setImage192(const QString &image_192) {
    m_image_192 = image_192;
    m_image_192_isSet = true;
}

bool OAIObjs_user_profile::is_image_192_Set() const{
    return m_image_192_isSet;
}

bool OAIObjs_user_profile::is_image_192_Valid() const{
    return m_image_192_isValid;
}

QString OAIObjs_user_profile::getImage24() const {
    return m_image_24;
}
void OAIObjs_user_profile::setImage24(const QString &image_24) {
    m_image_24 = image_24;
    m_image_24_isSet = true;
}

bool OAIObjs_user_profile::is_image_24_Set() const{
    return m_image_24_isSet;
}

bool OAIObjs_user_profile::is_image_24_Valid() const{
    return m_image_24_isValid;
}

QString OAIObjs_user_profile::getImage32() const {
    return m_image_32;
}
void OAIObjs_user_profile::setImage32(const QString &image_32) {
    m_image_32 = image_32;
    m_image_32_isSet = true;
}

bool OAIObjs_user_profile::is_image_32_Set() const{
    return m_image_32_isSet;
}

bool OAIObjs_user_profile::is_image_32_Valid() const{
    return m_image_32_isValid;
}

QString OAIObjs_user_profile::getImage48() const {
    return m_image_48;
}
void OAIObjs_user_profile::setImage48(const QString &image_48) {
    m_image_48 = image_48;
    m_image_48_isSet = true;
}

bool OAIObjs_user_profile::is_image_48_Set() const{
    return m_image_48_isSet;
}

bool OAIObjs_user_profile::is_image_48_Valid() const{
    return m_image_48_isValid;
}

QString OAIObjs_user_profile::getImage512() const {
    return m_image_512;
}
void OAIObjs_user_profile::setImage512(const QString &image_512) {
    m_image_512 = image_512;
    m_image_512_isSet = true;
}

bool OAIObjs_user_profile::is_image_512_Set() const{
    return m_image_512_isSet;
}

bool OAIObjs_user_profile::is_image_512_Valid() const{
    return m_image_512_isValid;
}

QString OAIObjs_user_profile::getImage72() const {
    return m_image_72;
}
void OAIObjs_user_profile::setImage72(const QString &image_72) {
    m_image_72 = image_72;
    m_image_72_isSet = true;
}

bool OAIObjs_user_profile::is_image_72_Set() const{
    return m_image_72_isSet;
}

bool OAIObjs_user_profile::is_image_72_Valid() const{
    return m_image_72_isValid;
}

QString OAIObjs_user_profile::getImageOriginal() const {
    return m_image_original;
}
void OAIObjs_user_profile::setImageOriginal(const QString &image_original) {
    m_image_original = image_original;
    m_image_original_isSet = true;
}

bool OAIObjs_user_profile::is_image_original_Set() const{
    return m_image_original_isSet;
}

bool OAIObjs_user_profile::is_image_original_Valid() const{
    return m_image_original_isValid;
}

bool OAIObjs_user_profile::isIsAppUser() const {
    return m_is_app_user;
}
void OAIObjs_user_profile::setIsAppUser(const bool &is_app_user) {
    m_is_app_user = is_app_user;
    m_is_app_user_isSet = true;
}

bool OAIObjs_user_profile::is_is_app_user_Set() const{
    return m_is_app_user_isSet;
}

bool OAIObjs_user_profile::is_is_app_user_Valid() const{
    return m_is_app_user_isValid;
}

bool OAIObjs_user_profile::isIsCustomImage() const {
    return m_is_custom_image;
}
void OAIObjs_user_profile::setIsCustomImage(const bool &is_custom_image) {
    m_is_custom_image = is_custom_image;
    m_is_custom_image_isSet = true;
}

bool OAIObjs_user_profile::is_is_custom_image_Set() const{
    return m_is_custom_image_isSet;
}

bool OAIObjs_user_profile::is_is_custom_image_Valid() const{
    return m_is_custom_image_isValid;
}

bool OAIObjs_user_profile::isIsRestricted() const {
    return m_is_restricted;
}
void OAIObjs_user_profile::setIsRestricted(const bool &is_restricted) {
    m_is_restricted = is_restricted;
    m_is_restricted_isSet = true;
}

bool OAIObjs_user_profile::is_is_restricted_Set() const{
    return m_is_restricted_isSet;
}

bool OAIObjs_user_profile::is_is_restricted_Valid() const{
    return m_is_restricted_isValid;
}

bool OAIObjs_user_profile::isIsUltraRestricted() const {
    return m_is_ultra_restricted;
}
void OAIObjs_user_profile::setIsUltraRestricted(const bool &is_ultra_restricted) {
    m_is_ultra_restricted = is_ultra_restricted;
    m_is_ultra_restricted_isSet = true;
}

bool OAIObjs_user_profile::is_is_ultra_restricted_Set() const{
    return m_is_ultra_restricted_isSet;
}

bool OAIObjs_user_profile::is_is_ultra_restricted_Valid() const{
    return m_is_ultra_restricted_isValid;
}

QString OAIObjs_user_profile::getLastAvatarImageHash() const {
    return m_last_avatar_image_hash;
}
void OAIObjs_user_profile::setLastAvatarImageHash(const QString &last_avatar_image_hash) {
    m_last_avatar_image_hash = last_avatar_image_hash;
    m_last_avatar_image_hash_isSet = true;
}

bool OAIObjs_user_profile::is_last_avatar_image_hash_Set() const{
    return m_last_avatar_image_hash_isSet;
}

bool OAIObjs_user_profile::is_last_avatar_image_hash_Valid() const{
    return m_last_avatar_image_hash_isValid;
}

QString OAIObjs_user_profile::getLastName() const {
    return m_last_name;
}
void OAIObjs_user_profile::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIObjs_user_profile::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIObjs_user_profile::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIObjs_user_profile::getMembershipsCount() const {
    return m_memberships_count;
}
void OAIObjs_user_profile::setMembershipsCount(const qint32 &memberships_count) {
    m_memberships_count = memberships_count;
    m_memberships_count_isSet = true;
}

bool OAIObjs_user_profile::is_memberships_count_Set() const{
    return m_memberships_count_isSet;
}

bool OAIObjs_user_profile::is_memberships_count_Valid() const{
    return m_memberships_count_isValid;
}

QString OAIObjs_user_profile::getName() const {
    return m_name;
}
void OAIObjs_user_profile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_user_profile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_user_profile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObjs_user_profile::getPhone() const {
    return m_phone;
}
void OAIObjs_user_profile::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIObjs_user_profile::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIObjs_user_profile::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIObjs_user_profile::getPronouns() const {
    return m_pronouns;
}
void OAIObjs_user_profile::setPronouns(const QString &pronouns) {
    m_pronouns = pronouns;
    m_pronouns_isSet = true;
}

bool OAIObjs_user_profile::is_pronouns_Set() const{
    return m_pronouns_isSet;
}

bool OAIObjs_user_profile::is_pronouns_Valid() const{
    return m_pronouns_isValid;
}

QString OAIObjs_user_profile::getRealName() const {
    return m_real_name;
}
void OAIObjs_user_profile::setRealName(const QString &real_name) {
    m_real_name = real_name;
    m_real_name_isSet = true;
}

bool OAIObjs_user_profile::is_real_name_Set() const{
    return m_real_name_isSet;
}

bool OAIObjs_user_profile::is_real_name_Valid() const{
    return m_real_name_isValid;
}

QString OAIObjs_user_profile::getRealNameNormalized() const {
    return m_real_name_normalized;
}
void OAIObjs_user_profile::setRealNameNormalized(const QString &real_name_normalized) {
    m_real_name_normalized = real_name_normalized;
    m_real_name_normalized_isSet = true;
}

bool OAIObjs_user_profile::is_real_name_normalized_Set() const{
    return m_real_name_normalized_isSet;
}

bool OAIObjs_user_profile::is_real_name_normalized_Valid() const{
    return m_real_name_normalized_isValid;
}

QString OAIObjs_user_profile::getSkype() const {
    return m_skype;
}
void OAIObjs_user_profile::setSkype(const QString &skype) {
    m_skype = skype;
    m_skype_isSet = true;
}

bool OAIObjs_user_profile::is_skype_Set() const{
    return m_skype_isSet;
}

bool OAIObjs_user_profile::is_skype_Valid() const{
    return m_skype_isValid;
}

QString OAIObjs_user_profile::getStatusDefaultEmoji() const {
    return m_status_default_emoji;
}
void OAIObjs_user_profile::setStatusDefaultEmoji(const QString &status_default_emoji) {
    m_status_default_emoji = status_default_emoji;
    m_status_default_emoji_isSet = true;
}

bool OAIObjs_user_profile::is_status_default_emoji_Set() const{
    return m_status_default_emoji_isSet;
}

bool OAIObjs_user_profile::is_status_default_emoji_Valid() const{
    return m_status_default_emoji_isValid;
}

QString OAIObjs_user_profile::getStatusDefaultText() const {
    return m_status_default_text;
}
void OAIObjs_user_profile::setStatusDefaultText(const QString &status_default_text) {
    m_status_default_text = status_default_text;
    m_status_default_text_isSet = true;
}

bool OAIObjs_user_profile::is_status_default_text_Set() const{
    return m_status_default_text_isSet;
}

bool OAIObjs_user_profile::is_status_default_text_Valid() const{
    return m_status_default_text_isValid;
}

QString OAIObjs_user_profile::getStatusDefaultTextCanonical() const {
    return m_status_default_text_canonical;
}
void OAIObjs_user_profile::setStatusDefaultTextCanonical(const QString &status_default_text_canonical) {
    m_status_default_text_canonical = status_default_text_canonical;
    m_status_default_text_canonical_isSet = true;
}

bool OAIObjs_user_profile::is_status_default_text_canonical_Set() const{
    return m_status_default_text_canonical_isSet;
}

bool OAIObjs_user_profile::is_status_default_text_canonical_Valid() const{
    return m_status_default_text_canonical_isValid;
}

QString OAIObjs_user_profile::getStatusEmoji() const {
    return m_status_emoji;
}
void OAIObjs_user_profile::setStatusEmoji(const QString &status_emoji) {
    m_status_emoji = status_emoji;
    m_status_emoji_isSet = true;
}

bool OAIObjs_user_profile::is_status_emoji_Set() const{
    return m_status_emoji_isSet;
}

bool OAIObjs_user_profile::is_status_emoji_Valid() const{
    return m_status_emoji_isValid;
}

qint32 OAIObjs_user_profile::getStatusExpiration() const {
    return m_status_expiration;
}
void OAIObjs_user_profile::setStatusExpiration(const qint32 &status_expiration) {
    m_status_expiration = status_expiration;
    m_status_expiration_isSet = true;
}

bool OAIObjs_user_profile::is_status_expiration_Set() const{
    return m_status_expiration_isSet;
}

bool OAIObjs_user_profile::is_status_expiration_Valid() const{
    return m_status_expiration_isValid;
}

QString OAIObjs_user_profile::getStatusText() const {
    return m_status_text;
}
void OAIObjs_user_profile::setStatusText(const QString &status_text) {
    m_status_text = status_text;
    m_status_text_isSet = true;
}

bool OAIObjs_user_profile::is_status_text_Set() const{
    return m_status_text_isSet;
}

bool OAIObjs_user_profile::is_status_text_Valid() const{
    return m_status_text_isValid;
}

QString OAIObjs_user_profile::getStatusTextCanonical() const {
    return m_status_text_canonical;
}
void OAIObjs_user_profile::setStatusTextCanonical(const QString &status_text_canonical) {
    m_status_text_canonical = status_text_canonical;
    m_status_text_canonical_isSet = true;
}

bool OAIObjs_user_profile::is_status_text_canonical_Set() const{
    return m_status_text_canonical_isSet;
}

bool OAIObjs_user_profile::is_status_text_canonical_Valid() const{
    return m_status_text_canonical_isValid;
}

QString OAIObjs_user_profile::getTeam() const {
    return m_team;
}
void OAIObjs_user_profile::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIObjs_user_profile::is_team_Set() const{
    return m_team_isSet;
}

bool OAIObjs_user_profile::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIObjs_user_profile::getTitle() const {
    return m_title;
}
void OAIObjs_user_profile::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIObjs_user_profile::is_title_Set() const{
    return m_title_isSet;
}

bool OAIObjs_user_profile::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIObjs_user_profile::getUpdated() const {
    return m_updated;
}
void OAIObjs_user_profile::setUpdated(const qint32 &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIObjs_user_profile::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIObjs_user_profile::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIObjs_user_profile::getUserId() const {
    return m_user_id;
}
void OAIObjs_user_profile::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIObjs_user_profile::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIObjs_user_profile::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIObjs_user_profile::getUsername() const {
    return m_username;
}
void OAIObjs_user_profile::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIObjs_user_profile::is_username_Set() const{
    return m_username_isSet;
}

bool OAIObjs_user_profile::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIObjs_user_profile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_always_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_expiration_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_invited_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_1024_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_192_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_24_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_32_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_48_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_512_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_72_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_original_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_app_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_custom_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ultra_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_avatar_image_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memberships_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pronouns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_name_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_default_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_default_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_default_text_canonical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_text_canonical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_user_profile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_hash_isValid && m_display_name_isValid && m_display_name_normalized_isValid && m_fields_isValid && m_phone_isValid && m_real_name_isValid && m_real_name_normalized_isValid && m_skype_isValid && m_status_emoji_isValid && m_status_text_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
