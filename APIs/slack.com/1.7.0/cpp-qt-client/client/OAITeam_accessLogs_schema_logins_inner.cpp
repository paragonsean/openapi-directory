/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeam_accessLogs_schema_logins_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeam_accessLogs_schema_logins_inner::OAITeam_accessLogs_schema_logins_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeam_accessLogs_schema_logins_inner::OAITeam_accessLogs_schema_logins_inner() {
    this->initializeModel();
}

OAITeam_accessLogs_schema_logins_inner::~OAITeam_accessLogs_schema_logins_inner() {}

void OAITeam_accessLogs_schema_logins_inner::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_date_first_isSet = false;
    m_date_first_isValid = false;

    m_date_last_isSet = false;
    m_date_last_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_isp_isSet = false;
    m_isp_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAITeam_accessLogs_schema_logins_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeam_accessLogs_schema_logins_inner::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_date_first_isValid = ::OpenAPI::fromJsonValue(m_date_first, json[QString("date_first")]);
    m_date_first_isSet = !json[QString("date_first")].isNull() && m_date_first_isValid;

    m_date_last_isValid = ::OpenAPI::fromJsonValue(m_date_last, json[QString("date_last")]);
    m_date_last_isSet = !json[QString("date_last")].isNull() && m_date_last_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_isp_isValid = ::OpenAPI::fromJsonValue(m_isp, json[QString("isp")]);
    m_isp_isSet = !json[QString("isp")].isNull() && m_isp_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("user_agent")]);
    m_user_agent_isSet = !json[QString("user_agent")].isNull() && m_user_agent_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeam_accessLogs_schema_logins_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date_first_isSet) {
        obj.insert(QString("date_first"), ::OpenAPI::toJsonValue(m_date_first));
    }
    if (m_date_last_isSet) {
        obj.insert(QString("date_last"), ::OpenAPI::toJsonValue(m_date_last));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_isp_isSet) {
        obj.insert(QString("isp"), ::OpenAPI::toJsonValue(m_isp));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("user_agent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

qint32 OAITeam_accessLogs_schema_logins_inner::getCount() const {
    return m_count;
}
void OAITeam_accessLogs_schema_logins_inner::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_count_Set() const{
    return m_count_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_count_Valid() const{
    return m_count_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::getCountry() const {
    return m_country;
}
void OAITeam_accessLogs_schema_logins_inner::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_country_Set() const{
    return m_country_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_country_Valid() const{
    return m_country_isValid;
}

qint32 OAITeam_accessLogs_schema_logins_inner::getDateFirst() const {
    return m_date_first;
}
void OAITeam_accessLogs_schema_logins_inner::setDateFirst(const qint32 &date_first) {
    m_date_first = date_first;
    m_date_first_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_date_first_Set() const{
    return m_date_first_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_date_first_Valid() const{
    return m_date_first_isValid;
}

qint32 OAITeam_accessLogs_schema_logins_inner::getDateLast() const {
    return m_date_last;
}
void OAITeam_accessLogs_schema_logins_inner::setDateLast(const qint32 &date_last) {
    m_date_last = date_last;
    m_date_last_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_date_last_Set() const{
    return m_date_last_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_date_last_Valid() const{
    return m_date_last_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::getIp() const {
    return m_ip;
}
void OAITeam_accessLogs_schema_logins_inner::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::getIsp() const {
    return m_isp;
}
void OAITeam_accessLogs_schema_logins_inner::setIsp(const QString &isp) {
    m_isp = isp;
    m_isp_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_isp_Set() const{
    return m_isp_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_isp_Valid() const{
    return m_isp_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::getRegion() const {
    return m_region;
}
void OAITeam_accessLogs_schema_logins_inner::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_region_Set() const{
    return m_region_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_region_Valid() const{
    return m_region_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::getUserAgent() const {
    return m_user_agent;
}
void OAITeam_accessLogs_schema_logins_inner::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::getUserId() const {
    return m_user_id;
}
void OAITeam_accessLogs_schema_logins_inner::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAITeam_accessLogs_schema_logins_inner::getUsername() const {
    return m_username;
}
void OAITeam_accessLogs_schema_logins_inner::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAITeam_accessLogs_schema_logins_inner::is_username_Set() const{
    return m_username_isSet;
}

bool OAITeam_accessLogs_schema_logins_inner::is_username_Valid() const{
    return m_username_isValid;
}

bool OAITeam_accessLogs_schema_logins_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeam_accessLogs_schema_logins_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_country_isValid && m_date_first_isValid && m_date_last_isValid && m_ip_isValid && m_isp_isValid && m_region_isValid && m_user_agent_isValid && m_user_id_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
