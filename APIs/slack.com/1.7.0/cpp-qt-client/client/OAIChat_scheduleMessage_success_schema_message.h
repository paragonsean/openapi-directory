/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChat_scheduleMessage_success_schema_message.h
 *
 * 
 */

#ifndef OAIChat_scheduleMessage_success_schema_message_H
#define OAIChat_scheduleMessage_success_schema_message_H

#include <QJsonObject>

#include "OAIObjs_bot_profile.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjs_bot_profile;

class OAIChat_scheduleMessage_success_schema_message : public OAIObject {
public:
    OAIChat_scheduleMessage_success_schema_message();
    OAIChat_scheduleMessage_success_schema_message(QString json);
    ~OAIChat_scheduleMessage_success_schema_message() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBotId() const;
    void setBotId(const QString &bot_id);
    bool is_bot_id_Set() const;
    bool is_bot_id_Valid() const;

    OAIObjs_bot_profile getBotProfile() const;
    void setBotProfile(const OAIObjs_bot_profile &bot_profile);
    bool is_bot_profile_Set() const;
    bool is_bot_profile_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bot_id;
    bool m_bot_id_isSet;
    bool m_bot_id_isValid;

    OAIObjs_bot_profile m_bot_profile;
    bool m_bot_profile_isSet;
    bool m_bot_profile_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChat_scheduleMessage_success_schema_message)

#endif // OAIChat_scheduleMessage_success_schema_message_H
