/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_Pin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_Pin::OAIMessage_Pin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_Pin::OAIMessage_Pin() {
    this->initializeModel();
}

OAIMessage_Pin::~OAIMessage_Pin() {}

void OAIMessage_Pin::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMessage_Pin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage_Pin::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMessage_Pin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage_Pin::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIMessage_Pin::getChannel() const {
    return m_channel;
}
void OAIMessage_Pin::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIMessage_Pin::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIMessage_Pin::is_channel_Valid() const{
    return m_channel_isValid;
}

qint32 OAIMessage_Pin::getCreated() const {
    return m_created;
}
void OAIMessage_Pin::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIMessage_Pin::is_created_Set() const{
    return m_created_isSet;
}

bool OAIMessage_Pin::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIMessage_Pin::getCreatedBy() const {
    return m_created_by;
}
void OAIMessage_Pin::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIMessage_Pin::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIMessage_Pin::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIObjs_message OAIMessage_Pin::getMessage() const {
    return m_message;
}
void OAIMessage_Pin::setMessage(const OAIObjs_message &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMessage_Pin::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMessage_Pin::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIMessage_Pin::getType() const {
    return m_type;
}
void OAIMessage_Pin::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessage_Pin::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessage_Pin::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMessage_Pin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage_Pin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
