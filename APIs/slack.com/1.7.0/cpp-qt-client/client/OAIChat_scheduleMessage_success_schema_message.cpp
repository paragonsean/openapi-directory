/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChat_scheduleMessage_success_schema_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChat_scheduleMessage_success_schema_message::OAIChat_scheduleMessage_success_schema_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChat_scheduleMessage_success_schema_message::OAIChat_scheduleMessage_success_schema_message() {
    this->initializeModel();
}

OAIChat_scheduleMessage_success_schema_message::~OAIChat_scheduleMessage_success_schema_message() {}

void OAIChat_scheduleMessage_success_schema_message::initializeModel() {

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_profile_isSet = false;
    m_bot_profile_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIChat_scheduleMessage_success_schema_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChat_scheduleMessage_success_schema_message::fromJsonObject(QJsonObject json) {

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("bot_id")]);
    m_bot_id_isSet = !json[QString("bot_id")].isNull() && m_bot_id_isValid;

    m_bot_profile_isValid = ::OpenAPI::fromJsonValue(m_bot_profile, json[QString("bot_profile")]);
    m_bot_profile_isSet = !json[QString("bot_profile")].isNull() && m_bot_profile_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIChat_scheduleMessage_success_schema_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChat_scheduleMessage_success_schema_message::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_id_isSet) {
        obj.insert(QString("bot_id"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_profile.isSet()) {
        obj.insert(QString("bot_profile"), ::OpenAPI::toJsonValue(m_bot_profile));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIChat_scheduleMessage_success_schema_message::getBotId() const {
    return m_bot_id;
}
void OAIChat_scheduleMessage_success_schema_message::setBotId(const QString &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIChat_scheduleMessage_success_schema_message::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIChat_scheduleMessage_success_schema_message::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

OAIObjs_bot_profile OAIChat_scheduleMessage_success_schema_message::getBotProfile() const {
    return m_bot_profile;
}
void OAIChat_scheduleMessage_success_schema_message::setBotProfile(const OAIObjs_bot_profile &bot_profile) {
    m_bot_profile = bot_profile;
    m_bot_profile_isSet = true;
}

bool OAIChat_scheduleMessage_success_schema_message::is_bot_profile_Set() const{
    return m_bot_profile_isSet;
}

bool OAIChat_scheduleMessage_success_schema_message::is_bot_profile_Valid() const{
    return m_bot_profile_isValid;
}

QString OAIChat_scheduleMessage_success_schema_message::getTeam() const {
    return m_team;
}
void OAIChat_scheduleMessage_success_schema_message::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIChat_scheduleMessage_success_schema_message::is_team_Set() const{
    return m_team_isSet;
}

bool OAIChat_scheduleMessage_success_schema_message::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIChat_scheduleMessage_success_schema_message::getText() const {
    return m_text;
}
void OAIChat_scheduleMessage_success_schema_message::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIChat_scheduleMessage_success_schema_message::is_text_Set() const{
    return m_text_isSet;
}

bool OAIChat_scheduleMessage_success_schema_message::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIChat_scheduleMessage_success_schema_message::getType() const {
    return m_type;
}
void OAIChat_scheduleMessage_success_schema_message::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChat_scheduleMessage_success_schema_message::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChat_scheduleMessage_success_schema_message::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIChat_scheduleMessage_success_schema_message::getUser() const {
    return m_user;
}
void OAIChat_scheduleMessage_success_schema_message::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIChat_scheduleMessage_success_schema_message::is_user_Set() const{
    return m_user_isSet;
}

bool OAIChat_scheduleMessage_success_schema_message::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIChat_scheduleMessage_success_schema_message::getUsername() const {
    return m_username;
}
void OAIChat_scheduleMessage_success_schema_message::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIChat_scheduleMessage_success_schema_message::is_username_Set() const{
    return m_username_isSet;
}

bool OAIChat_scheduleMessage_success_schema_message::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIChat_scheduleMessage_success_schema_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChat_scheduleMessage_success_schema_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bot_id_isValid && m_team_isValid && m_text_isValid && m_type_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
