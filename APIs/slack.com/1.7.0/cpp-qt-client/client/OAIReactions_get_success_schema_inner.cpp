/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReactions_get_success_schema_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReactions_get_success_schema_inner::OAIReactions_get_success_schema_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReactions_get_success_schema_inner::OAIReactions_get_success_schema_inner() {
    this->initializeModel();
}

OAIReactions_get_success_schema_inner::~OAIReactions_get_success_schema_inner() {}

void OAIReactions_get_success_schema_inner::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;
}

void OAIReactions_get_success_schema_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReactions_get_success_schema_inner::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;
}

QString OAIReactions_get_success_schema_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReactions_get_success_schema_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    return obj;
}

QString OAIReactions_get_success_schema_inner::getChannel() const {
    return m_channel;
}
void OAIReactions_get_success_schema_inner::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIReactions_get_success_schema_inner::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIReactions_get_success_schema_inner::is_channel_Valid() const{
    return m_channel_isValid;
}

OAIObjs_message OAIReactions_get_success_schema_inner::getMessage() const {
    return m_message;
}
void OAIReactions_get_success_schema_inner::setMessage(const OAIObjs_message &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIReactions_get_success_schema_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAIReactions_get_success_schema_inner::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIReactions_get_success_schema_inner::isOk() const {
    return m_ok;
}
void OAIReactions_get_success_schema_inner::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIReactions_get_success_schema_inner::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIReactions_get_success_schema_inner::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAIReactions_get_success_schema_inner::getType() const {
    return m_type;
}
void OAIReactions_get_success_schema_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReactions_get_success_schema_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReactions_get_success_schema_inner::is_type_Valid() const{
    return m_type_isValid;
}

OAIObjs_file OAIReactions_get_success_schema_inner::getFile() const {
    return m_file;
}
void OAIReactions_get_success_schema_inner::setFile(const OAIObjs_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIReactions_get_success_schema_inner::is_file_Set() const{
    return m_file_isSet;
}

bool OAIReactions_get_success_schema_inner::is_file_Valid() const{
    return m_file_isValid;
}

OAIObjs_comment OAIReactions_get_success_schema_inner::getComment() const {
    return m_comment;
}
void OAIReactions_get_success_schema_inner::setComment(const OAIObjs_comment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIReactions_get_success_schema_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIReactions_get_success_schema_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIReactions_get_success_schema_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReactions_get_success_schema_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_isValid && m_message_isValid && m_ok_isValid && m_type_isValid && m_file_isValid && m_comment_isValid && true;
}

} // namespace OpenAPI
