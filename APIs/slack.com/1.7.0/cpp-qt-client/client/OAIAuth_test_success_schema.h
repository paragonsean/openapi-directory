/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuth_test_success_schema.h
 *
 * Schema for successful response auth.test method
 */

#ifndef OAIAuth_test_success_schema_H
#define OAIAuth_test_success_schema_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAuth_test_success_schema : public OAIObject {
public:
    OAIAuth_test_success_schema();
    OAIAuth_test_success_schema(QString json);
    ~OAIAuth_test_success_schema() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBotId() const;
    void setBotId(const QString &bot_id);
    bool is_bot_id_Set() const;
    bool is_bot_id_Valid() const;

    bool isIsEnterpriseInstall() const;
    void setIsEnterpriseInstall(const bool &is_enterprise_install);
    bool is_is_enterprise_install_Set() const;
    bool is_is_enterprise_install_Valid() const;

    bool isOk() const;
    void setOk(const bool &ok);
    bool is_ok_Set() const;
    bool is_ok_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    QString getTeamId() const;
    void setTeamId(const QString &team_id);
    bool is_team_id_Set() const;
    bool is_team_id_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bot_id;
    bool m_bot_id_isSet;
    bool m_bot_id_isValid;

    bool m_is_enterprise_install;
    bool m_is_enterprise_install_isSet;
    bool m_is_enterprise_install_isValid;

    bool m_ok;
    bool m_ok_isSet;
    bool m_ok_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    QString m_team_id;
    bool m_team_id_isSet;
    bool m_team_id_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuth_test_success_schema)

#endif // OAIAuth_test_success_schema_H
