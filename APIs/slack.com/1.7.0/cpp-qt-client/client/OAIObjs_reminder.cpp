/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_reminder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_reminder::OAIObjs_reminder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_reminder::OAIObjs_reminder() {
    this->initializeModel();
}

OAIObjs_reminder::~OAIObjs_reminder() {}

void OAIObjs_reminder::initializeModel() {

    m_complete_ts_isSet = false;
    m_complete_ts_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIObjs_reminder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_reminder::fromJsonObject(QJsonObject json) {

    m_complete_ts_isValid = ::OpenAPI::fromJsonValue(m_complete_ts, json[QString("complete_ts")]);
    m_complete_ts_isSet = !json[QString("complete_ts")].isNull() && m_complete_ts_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIObjs_reminder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_reminder::asJsonObject() const {
    QJsonObject obj;
    if (m_complete_ts_isSet) {
        obj.insert(QString("complete_ts"), ::OpenAPI::toJsonValue(m_complete_ts));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_recurring_isSet) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAIObjs_reminder::getCompleteTs() const {
    return m_complete_ts;
}
void OAIObjs_reminder::setCompleteTs(const qint32 &complete_ts) {
    m_complete_ts = complete_ts;
    m_complete_ts_isSet = true;
}

bool OAIObjs_reminder::is_complete_ts_Set() const{
    return m_complete_ts_isSet;
}

bool OAIObjs_reminder::is_complete_ts_Valid() const{
    return m_complete_ts_isValid;
}

QString OAIObjs_reminder::getCreator() const {
    return m_creator;
}
void OAIObjs_reminder::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIObjs_reminder::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIObjs_reminder::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIObjs_reminder::getId() const {
    return m_id;
}
void OAIObjs_reminder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_reminder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_reminder::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIObjs_reminder::isRecurring() const {
    return m_recurring;
}
void OAIObjs_reminder::setRecurring(const bool &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAIObjs_reminder::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAIObjs_reminder::is_recurring_Valid() const{
    return m_recurring_isValid;
}

QString OAIObjs_reminder::getText() const {
    return m_text;
}
void OAIObjs_reminder::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIObjs_reminder::is_text_Set() const{
    return m_text_isSet;
}

bool OAIObjs_reminder::is_text_Valid() const{
    return m_text_isValid;
}

qint32 OAIObjs_reminder::getTime() const {
    return m_time;
}
void OAIObjs_reminder::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIObjs_reminder::is_time_Set() const{
    return m_time_isSet;
}

bool OAIObjs_reminder::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIObjs_reminder::getUser() const {
    return m_user;
}
void OAIObjs_reminder::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIObjs_reminder::is_user_Set() const{
    return m_user_isSet;
}

bool OAIObjs_reminder::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIObjs_reminder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complete_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_reminder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creator_isValid && m_id_isValid && m_recurring_isValid && m_text_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
