/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReactions_list_schema_items_inner_inner_anyOf_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReactions_list_schema_items_inner_inner_anyOf_2::OAIReactions_list_schema_items_inner_inner_anyOf_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReactions_list_schema_items_inner_inner_anyOf_2::OAIReactions_list_schema_items_inner_inner_anyOf_2() {
    this->initializeModel();
}

OAIReactions_list_schema_items_inner_inner_anyOf_2::~OAIReactions_list_schema_items_inner_inner_anyOf_2() {}

void OAIReactions_list_schema_items_inner_inner_anyOf_2::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReactions_list_schema_items_inner_inner_anyOf_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReactions_list_schema_items_inner_inner_anyOf_2::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReactions_list_schema_items_inner_inner_anyOf_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReactions_list_schema_items_inner_inner_anyOf_2::asJsonObject() const {
    QJsonObject obj;
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObjs_comment OAIReactions_list_schema_items_inner_inner_anyOf_2::getComment() const {
    return m_comment;
}
void OAIReactions_list_schema_items_inner_inner_anyOf_2::setComment(const OAIObjs_comment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIObjs_file OAIReactions_list_schema_items_inner_inner_anyOf_2::getFile() const {
    return m_file;
}
void OAIReactions_list_schema_items_inner_inner_anyOf_2::setFile(const OAIObjs_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::is_file_Set() const{
    return m_file_isSet;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIReactions_list_schema_items_inner_inner_anyOf_2::getType() const {
    return m_type;
}
void OAIReactions_list_schema_items_inner_inner_anyOf_2::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReactions_list_schema_items_inner_inner_anyOf_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_isValid && m_file_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
