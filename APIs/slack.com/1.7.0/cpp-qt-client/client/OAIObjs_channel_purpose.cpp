/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_channel_purpose.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_channel_purpose::OAIObjs_channel_purpose(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_channel_purpose::OAIObjs_channel_purpose() {
    this->initializeModel();
}

OAIObjs_channel_purpose::~OAIObjs_channel_purpose() {}

void OAIObjs_channel_purpose::initializeModel() {

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_last_set_isSet = false;
    m_last_set_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIObjs_channel_purpose::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_channel_purpose::fromJsonObject(QJsonObject json) {

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_last_set_isValid = ::OpenAPI::fromJsonValue(m_last_set, json[QString("last_set")]);
    m_last_set_isSet = !json[QString("last_set")].isNull() && m_last_set_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIObjs_channel_purpose::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_channel_purpose::asJsonObject() const {
    QJsonObject obj;
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_last_set_isSet) {
        obj.insert(QString("last_set"), ::OpenAPI::toJsonValue(m_last_set));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIObjs_channel_purpose::getCreator() const {
    return m_creator;
}
void OAIObjs_channel_purpose::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIObjs_channel_purpose::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIObjs_channel_purpose::is_creator_Valid() const{
    return m_creator_isValid;
}

qint32 OAIObjs_channel_purpose::getLastSet() const {
    return m_last_set;
}
void OAIObjs_channel_purpose::setLastSet(const qint32 &last_set) {
    m_last_set = last_set;
    m_last_set_isSet = true;
}

bool OAIObjs_channel_purpose::is_last_set_Set() const{
    return m_last_set_isSet;
}

bool OAIObjs_channel_purpose::is_last_set_Valid() const{
    return m_last_set_isValid;
}

QString OAIObjs_channel_purpose::getValue() const {
    return m_value;
}
void OAIObjs_channel_purpose::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIObjs_channel_purpose::is_value_Set() const{
    return m_value_isSet;
}

bool OAIObjs_channel_purpose::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIObjs_channel_purpose::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_channel_purpose::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creator_isValid && m_last_set_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
