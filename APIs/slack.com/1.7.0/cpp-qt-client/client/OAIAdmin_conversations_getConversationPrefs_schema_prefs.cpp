/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdmin_conversations_getConversationPrefs_schema_prefs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdmin_conversations_getConversationPrefs_schema_prefs::OAIAdmin_conversations_getConversationPrefs_schema_prefs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdmin_conversations_getConversationPrefs_schema_prefs::OAIAdmin_conversations_getConversationPrefs_schema_prefs() {
    this->initializeModel();
}

OAIAdmin_conversations_getConversationPrefs_schema_prefs::~OAIAdmin_conversations_getConversationPrefs_schema_prefs() {}

void OAIAdmin_conversations_getConversationPrefs_schema_prefs::initializeModel() {

    m_can_thread_isSet = false;
    m_can_thread_isValid = false;

    m_who_can_post_isSet = false;
    m_who_can_post_isValid = false;
}

void OAIAdmin_conversations_getConversationPrefs_schema_prefs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdmin_conversations_getConversationPrefs_schema_prefs::fromJsonObject(QJsonObject json) {

    m_can_thread_isValid = ::OpenAPI::fromJsonValue(m_can_thread, json[QString("can_thread")]);
    m_can_thread_isSet = !json[QString("can_thread")].isNull() && m_can_thread_isValid;

    m_who_can_post_isValid = ::OpenAPI::fromJsonValue(m_who_can_post, json[QString("who_can_post")]);
    m_who_can_post_isSet = !json[QString("who_can_post")].isNull() && m_who_can_post_isValid;
}

QString OAIAdmin_conversations_getConversationPrefs_schema_prefs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdmin_conversations_getConversationPrefs_schema_prefs::asJsonObject() const {
    QJsonObject obj;
    if (m_can_thread.isSet()) {
        obj.insert(QString("can_thread"), ::OpenAPI::toJsonValue(m_can_thread));
    }
    if (m_who_can_post.isSet()) {
        obj.insert(QString("who_can_post"), ::OpenAPI::toJsonValue(m_who_can_post));
    }
    return obj;
}

OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread OAIAdmin_conversations_getConversationPrefs_schema_prefs::getCanThread() const {
    return m_can_thread;
}
void OAIAdmin_conversations_getConversationPrefs_schema_prefs::setCanThread(const OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread &can_thread) {
    m_can_thread = can_thread;
    m_can_thread_isSet = true;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs::is_can_thread_Set() const{
    return m_can_thread_isSet;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs::is_can_thread_Valid() const{
    return m_can_thread_isValid;
}

OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread OAIAdmin_conversations_getConversationPrefs_schema_prefs::getWhoCanPost() const {
    return m_who_can_post;
}
void OAIAdmin_conversations_getConversationPrefs_schema_prefs::setWhoCanPost(const OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread &who_can_post) {
    m_who_can_post = who_can_post;
    m_who_can_post_isSet = true;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs::is_who_can_post_Set() const{
    return m_who_can_post_isSet;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs::is_who_can_post_Valid() const{
    return m_who_can_post_isValid;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_thread.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_who_can_post.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
