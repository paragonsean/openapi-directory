/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_reaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_reaction::OAIObjs_reaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_reaction::OAIObjs_reaction() {
    this->initializeModel();
}

OAIObjs_reaction::~OAIObjs_reaction() {}

void OAIObjs_reaction::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIObjs_reaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_reaction::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIObjs_reaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_reaction::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

qint32 OAIObjs_reaction::getCount() const {
    return m_count;
}
void OAIObjs_reaction::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIObjs_reaction::is_count_Set() const{
    return m_count_isSet;
}

bool OAIObjs_reaction::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIObjs_reaction::getName() const {
    return m_name;
}
void OAIObjs_reaction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_reaction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_reaction::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIObjs_reaction::getUsers() const {
    return m_users;
}
void OAIObjs_reaction::setUsers(const QList<QString> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIObjs_reaction::is_users_Set() const{
    return m_users_isSet;
}

bool OAIObjs_reaction::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIObjs_reaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_reaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_name_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
