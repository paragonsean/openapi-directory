/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIObjs_file.h
 *
 * 
 */

#ifndef OAIObjs_file_H
#define OAIObjs_file_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIObjs_file_shares.h"
#include "OAIObjs_reaction.h"
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjs_file_shares;

class OAIObjs_file : public OAIObject {
public:
    OAIObjs_file();
    OAIObjs_file(QString json);
    ~OAIObjs_file() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QSet<QString> getChannels() const;
    void setChannels(const QSet<QString> &channels);
    bool is_channels_Set() const;
    bool is_channels_Valid() const;

    qint32 getCommentsCount() const;
    void setCommentsCount(const qint32 &comments_count);
    bool is_comments_count_Set() const;
    bool is_comments_count_Valid() const;

    qint32 getCreated() const;
    void setCreated(const qint32 &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    qint32 getDateDelete() const;
    void setDateDelete(const qint32 &date_delete);
    bool is_date_delete_Set() const;
    bool is_date_delete_Valid() const;

    bool isDisplayAsBot() const;
    void setDisplayAsBot(const bool &display_as_bot);
    bool is_display_as_bot_Set() const;
    bool is_display_as_bot_Valid() const;

    bool isEditable() const;
    void setEditable(const bool &editable);
    bool is_editable_Set() const;
    bool is_editable_Valid() const;

    QString getEditor() const;
    void setEditor(const QString &editor);
    bool is_editor_Set() const;
    bool is_editor_Valid() const;

    QString getExternalId() const;
    void setExternalId(const QString &external_id);
    bool is_external_id_Set() const;
    bool is_external_id_Valid() const;

    QString getExternalType() const;
    void setExternalType(const QString &external_type);
    bool is_external_type_Set() const;
    bool is_external_type_Valid() const;

    QString getExternalUrl() const;
    void setExternalUrl(const QString &external_url);
    bool is_external_url_Set() const;
    bool is_external_url_Valid() const;

    QString getFiletype() const;
    void setFiletype(const QString &filetype);
    bool is_filetype_Set() const;
    bool is_filetype_Valid() const;

    QSet<QString> getGroups() const;
    void setGroups(const QSet<QString> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    bool isHasRichPreview() const;
    void setHasRichPreview(const bool &has_rich_preview);
    bool is_has_rich_preview_Set() const;
    bool is_has_rich_preview_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getImageExifRotation() const;
    void setImageExifRotation(const qint32 &image_exif_rotation);
    bool is_image_exif_rotation_Set() const;
    bool is_image_exif_rotation_Valid() const;

    QSet<QString> getIms() const;
    void setIms(const QSet<QString> &ims);
    bool is_ims_Set() const;
    bool is_ims_Valid() const;

    bool isIsExternal() const;
    void setIsExternal(const bool &is_external);
    bool is_is_external_Set() const;
    bool is_is_external_Valid() const;

    bool isIsPublic() const;
    void setIsPublic(const bool &is_public);
    bool is_is_public_Set() const;
    bool is_is_public_Valid() const;

    bool isIsStarred() const;
    void setIsStarred(const bool &is_starred);
    bool is_is_starred_Set() const;
    bool is_is_starred_Valid() const;

    bool isIsTombstoned() const;
    void setIsTombstoned(const bool &is_tombstoned);
    bool is_is_tombstoned_Set() const;
    bool is_is_tombstoned_Valid() const;

    QString getLastEditor() const;
    void setLastEditor(const QString &last_editor);
    bool is_last_editor_Set() const;
    bool is_last_editor_Valid() const;

    QString getMimetype() const;
    void setMimetype(const QString &mimetype);
    bool is_mimetype_Set() const;
    bool is_mimetype_Valid() const;

    QString getMode() const;
    void setMode(const QString &mode);
    bool is_mode_Set() const;
    bool is_mode_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isNonOwnerEditable() const;
    void setNonOwnerEditable(const bool &non_owner_editable);
    bool is_non_owner_editable_Set() const;
    bool is_non_owner_editable_Valid() const;

    qint32 getNumStars() const;
    void setNumStars(const qint32 &num_stars);
    bool is_num_stars_Set() const;
    bool is_num_stars_Valid() const;

    qint32 getOriginalH() const;
    void setOriginalH(const qint32 &original_h);
    bool is_original_h_Set() const;
    bool is_original_h_Valid() const;

    qint32 getOriginalW() const;
    void setOriginalW(const qint32 &original_w);
    bool is_original_w_Set() const;
    bool is_original_w_Valid() const;

    QString getPermalink() const;
    void setPermalink(const QString &permalink);
    bool is_permalink_Set() const;
    bool is_permalink_Valid() const;

    QString getPermalinkPublic() const;
    void setPermalinkPublic(const QString &permalink_public);
    bool is_permalink_public_Set() const;
    bool is_permalink_public_Valid() const;

    OAIObject getPinnedInfo() const;
    void setPinnedInfo(const OAIObject &pinned_info);
    bool is_pinned_info_Set() const;
    bool is_pinned_info_Valid() const;

    QList<QString> getPinnedTo() const;
    void setPinnedTo(const QList<QString> &pinned_to);
    bool is_pinned_to_Set() const;
    bool is_pinned_to_Valid() const;

    QString getPrettyType() const;
    void setPrettyType(const QString &pretty_type);
    bool is_pretty_type_Set() const;
    bool is_pretty_type_Valid() const;

    QString getPreview() const;
    void setPreview(const QString &preview);
    bool is_preview_Set() const;
    bool is_preview_Valid() const;

    bool isPublicUrlShared() const;
    void setPublicUrlShared(const bool &public_url_shared);
    bool is_public_url_shared_Set() const;
    bool is_public_url_shared_Valid() const;

    QList<OAIObjs_reaction> getReactions() const;
    void setReactions(const QList<OAIObjs_reaction> &reactions);
    bool is_reactions_Set() const;
    bool is_reactions_Valid() const;

    OAIObjs_file_shares getShares() const;
    void setShares(const OAIObjs_file_shares &shares);
    bool is_shares_Set() const;
    bool is_shares_Valid() const;

    qint32 getSize() const;
    void setSize(const qint32 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getSourceTeam() const;
    void setSourceTeam(const QString &source_team);
    bool is_source_team_Set() const;
    bool is_source_team_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getThumb1024() const;
    void setThumb1024(const QString &thumb_1024);
    bool is_thumb_1024_Set() const;
    bool is_thumb_1024_Valid() const;

    qint32 getThumb1024H() const;
    void setThumb1024H(const qint32 &thumb_1024_h);
    bool is_thumb_1024_h_Set() const;
    bool is_thumb_1024_h_Valid() const;

    qint32 getThumb1024W() const;
    void setThumb1024W(const qint32 &thumb_1024_w);
    bool is_thumb_1024_w_Set() const;
    bool is_thumb_1024_w_Valid() const;

    QString getThumb160() const;
    void setThumb160(const QString &thumb_160);
    bool is_thumb_160_Set() const;
    bool is_thumb_160_Valid() const;

    QString getThumb360() const;
    void setThumb360(const QString &thumb_360);
    bool is_thumb_360_Set() const;
    bool is_thumb_360_Valid() const;

    qint32 getThumb360H() const;
    void setThumb360H(const qint32 &thumb_360_h);
    bool is_thumb_360_h_Set() const;
    bool is_thumb_360_h_Valid() const;

    qint32 getThumb360W() const;
    void setThumb360W(const qint32 &thumb_360_w);
    bool is_thumb_360_w_Set() const;
    bool is_thumb_360_w_Valid() const;

    QString getThumb480() const;
    void setThumb480(const QString &thumb_480);
    bool is_thumb_480_Set() const;
    bool is_thumb_480_Valid() const;

    qint32 getThumb480H() const;
    void setThumb480H(const qint32 &thumb_480_h);
    bool is_thumb_480_h_Set() const;
    bool is_thumb_480_h_Valid() const;

    qint32 getThumb480W() const;
    void setThumb480W(const qint32 &thumb_480_w);
    bool is_thumb_480_w_Set() const;
    bool is_thumb_480_w_Valid() const;

    QString getThumb64() const;
    void setThumb64(const QString &thumb_64);
    bool is_thumb_64_Set() const;
    bool is_thumb_64_Valid() const;

    QString getThumb720() const;
    void setThumb720(const QString &thumb_720);
    bool is_thumb_720_Set() const;
    bool is_thumb_720_Valid() const;

    qint32 getThumb720H() const;
    void setThumb720H(const qint32 &thumb_720_h);
    bool is_thumb_720_h_Set() const;
    bool is_thumb_720_h_Valid() const;

    qint32 getThumb720W() const;
    void setThumb720W(const qint32 &thumb_720_w);
    bool is_thumb_720_w_Set() const;
    bool is_thumb_720_w_Valid() const;

    QString getThumb80() const;
    void setThumb80(const QString &thumb_80);
    bool is_thumb_80_Set() const;
    bool is_thumb_80_Valid() const;

    QString getThumb800() const;
    void setThumb800(const QString &thumb_800);
    bool is_thumb_800_Set() const;
    bool is_thumb_800_Valid() const;

    qint32 getThumb800H() const;
    void setThumb800H(const qint32 &thumb_800_h);
    bool is_thumb_800_h_Set() const;
    bool is_thumb_800_h_Valid() const;

    qint32 getThumb800W() const;
    void setThumb800W(const qint32 &thumb_800_w);
    bool is_thumb_800_w_Set() const;
    bool is_thumb_800_w_Valid() const;

    QString getThumb960() const;
    void setThumb960(const QString &thumb_960);
    bool is_thumb_960_Set() const;
    bool is_thumb_960_Valid() const;

    qint32 getThumb960H() const;
    void setThumb960H(const qint32 &thumb_960_h);
    bool is_thumb_960_h_Set() const;
    bool is_thumb_960_h_Valid() const;

    qint32 getThumb960W() const;
    void setThumb960W(const qint32 &thumb_960_w);
    bool is_thumb_960_w_Set() const;
    bool is_thumb_960_w_Valid() const;

    QString getThumbTiny() const;
    void setThumbTiny(const QString &thumb_tiny);
    bool is_thumb_tiny_Set() const;
    bool is_thumb_tiny_Valid() const;

    qint32 getTimestamp() const;
    void setTimestamp(const qint32 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getUpdated() const;
    void setUpdated(const qint32 &updated);
    bool is_updated_Set() const;
    bool is_updated_Valid() const;

    QString getUrlPrivate() const;
    void setUrlPrivate(const QString &url_private);
    bool is_url_private_Set() const;
    bool is_url_private_Valid() const;

    QString getUrlPrivateDownload() const;
    void setUrlPrivateDownload(const QString &url_private_download);
    bool is_url_private_download_Set() const;
    bool is_url_private_download_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getUserTeam() const;
    void setUserTeam(const QString &user_team);
    bool is_user_team_Set() const;
    bool is_user_team_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QSet<QString> m_channels;
    bool m_channels_isSet;
    bool m_channels_isValid;

    qint32 m_comments_count;
    bool m_comments_count_isSet;
    bool m_comments_count_isValid;

    qint32 m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    qint32 m_date_delete;
    bool m_date_delete_isSet;
    bool m_date_delete_isValid;

    bool m_display_as_bot;
    bool m_display_as_bot_isSet;
    bool m_display_as_bot_isValid;

    bool m_editable;
    bool m_editable_isSet;
    bool m_editable_isValid;

    QString m_editor;
    bool m_editor_isSet;
    bool m_editor_isValid;

    QString m_external_id;
    bool m_external_id_isSet;
    bool m_external_id_isValid;

    QString m_external_type;
    bool m_external_type_isSet;
    bool m_external_type_isValid;

    QString m_external_url;
    bool m_external_url_isSet;
    bool m_external_url_isValid;

    QString m_filetype;
    bool m_filetype_isSet;
    bool m_filetype_isValid;

    QSet<QString> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    bool m_has_rich_preview;
    bool m_has_rich_preview_isSet;
    bool m_has_rich_preview_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_image_exif_rotation;
    bool m_image_exif_rotation_isSet;
    bool m_image_exif_rotation_isValid;

    QSet<QString> m_ims;
    bool m_ims_isSet;
    bool m_ims_isValid;

    bool m_is_external;
    bool m_is_external_isSet;
    bool m_is_external_isValid;

    bool m_is_public;
    bool m_is_public_isSet;
    bool m_is_public_isValid;

    bool m_is_starred;
    bool m_is_starred_isSet;
    bool m_is_starred_isValid;

    bool m_is_tombstoned;
    bool m_is_tombstoned_isSet;
    bool m_is_tombstoned_isValid;

    QString m_last_editor;
    bool m_last_editor_isSet;
    bool m_last_editor_isValid;

    QString m_mimetype;
    bool m_mimetype_isSet;
    bool m_mimetype_isValid;

    QString m_mode;
    bool m_mode_isSet;
    bool m_mode_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_non_owner_editable;
    bool m_non_owner_editable_isSet;
    bool m_non_owner_editable_isValid;

    qint32 m_num_stars;
    bool m_num_stars_isSet;
    bool m_num_stars_isValid;

    qint32 m_original_h;
    bool m_original_h_isSet;
    bool m_original_h_isValid;

    qint32 m_original_w;
    bool m_original_w_isSet;
    bool m_original_w_isValid;

    QString m_permalink;
    bool m_permalink_isSet;
    bool m_permalink_isValid;

    QString m_permalink_public;
    bool m_permalink_public_isSet;
    bool m_permalink_public_isValid;

    OAIObject m_pinned_info;
    bool m_pinned_info_isSet;
    bool m_pinned_info_isValid;

    QList<QString> m_pinned_to;
    bool m_pinned_to_isSet;
    bool m_pinned_to_isValid;

    QString m_pretty_type;
    bool m_pretty_type_isSet;
    bool m_pretty_type_isValid;

    QString m_preview;
    bool m_preview_isSet;
    bool m_preview_isValid;

    bool m_public_url_shared;
    bool m_public_url_shared_isSet;
    bool m_public_url_shared_isValid;

    QList<OAIObjs_reaction> m_reactions;
    bool m_reactions_isSet;
    bool m_reactions_isValid;

    OAIObjs_file_shares m_shares;
    bool m_shares_isSet;
    bool m_shares_isValid;

    qint32 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_source_team;
    bool m_source_team_isSet;
    bool m_source_team_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_thumb_1024;
    bool m_thumb_1024_isSet;
    bool m_thumb_1024_isValid;

    qint32 m_thumb_1024_h;
    bool m_thumb_1024_h_isSet;
    bool m_thumb_1024_h_isValid;

    qint32 m_thumb_1024_w;
    bool m_thumb_1024_w_isSet;
    bool m_thumb_1024_w_isValid;

    QString m_thumb_160;
    bool m_thumb_160_isSet;
    bool m_thumb_160_isValid;

    QString m_thumb_360;
    bool m_thumb_360_isSet;
    bool m_thumb_360_isValid;

    qint32 m_thumb_360_h;
    bool m_thumb_360_h_isSet;
    bool m_thumb_360_h_isValid;

    qint32 m_thumb_360_w;
    bool m_thumb_360_w_isSet;
    bool m_thumb_360_w_isValid;

    QString m_thumb_480;
    bool m_thumb_480_isSet;
    bool m_thumb_480_isValid;

    qint32 m_thumb_480_h;
    bool m_thumb_480_h_isSet;
    bool m_thumb_480_h_isValid;

    qint32 m_thumb_480_w;
    bool m_thumb_480_w_isSet;
    bool m_thumb_480_w_isValid;

    QString m_thumb_64;
    bool m_thumb_64_isSet;
    bool m_thumb_64_isValid;

    QString m_thumb_720;
    bool m_thumb_720_isSet;
    bool m_thumb_720_isValid;

    qint32 m_thumb_720_h;
    bool m_thumb_720_h_isSet;
    bool m_thumb_720_h_isValid;

    qint32 m_thumb_720_w;
    bool m_thumb_720_w_isSet;
    bool m_thumb_720_w_isValid;

    QString m_thumb_80;
    bool m_thumb_80_isSet;
    bool m_thumb_80_isValid;

    QString m_thumb_800;
    bool m_thumb_800_isSet;
    bool m_thumb_800_isValid;

    qint32 m_thumb_800_h;
    bool m_thumb_800_h_isSet;
    bool m_thumb_800_h_isValid;

    qint32 m_thumb_800_w;
    bool m_thumb_800_w_isSet;
    bool m_thumb_800_w_isValid;

    QString m_thumb_960;
    bool m_thumb_960_isSet;
    bool m_thumb_960_isValid;

    qint32 m_thumb_960_h;
    bool m_thumb_960_h_isSet;
    bool m_thumb_960_h_isValid;

    qint32 m_thumb_960_w;
    bool m_thumb_960_w_isSet;
    bool m_thumb_960_w_isValid;

    QString m_thumb_tiny;
    bool m_thumb_tiny_isSet;
    bool m_thumb_tiny_isValid;

    qint32 m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    qint32 m_updated;
    bool m_updated_isSet;
    bool m_updated_isValid;

    QString m_url_private;
    bool m_url_private_isSet;
    bool m_url_private_isValid;

    QString m_url_private_download;
    bool m_url_private_download_isSet;
    bool m_url_private_download_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_user_team;
    bool m_user_team_isSet;
    bool m_user_team_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIObjs_file)

#endif // OAIObjs_file_H
