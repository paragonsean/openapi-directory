/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversation_IM_Channel_Object_from_conversations___methods.h
 *
 * 
 */

#ifndef OAIConversation_IM_Channel_Object_from_conversations___methods_H
#define OAIConversation_IM_Channel_Object_from_conversations___methods_H

#include <QJsonObject>

#include "OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner.h"
#include "OAIConversation_object_parent_conversation_inner.h"
#include "OAIObjs_channel_latest_inner.h"
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjs_channel_latest_inner;
class OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner;

class OAIConversation_IM_Channel_Object_from_conversations___methods : public OAIObject {
public:
    OAIConversation_IM_Channel_Object_from_conversations___methods();
    OAIConversation_IM_Channel_Object_from_conversations___methods(QString json);
    ~OAIConversation_IM_Channel_Object_from_conversations___methods() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCreated() const;
    void setCreated(const qint32 &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    bool isHasPins() const;
    void setHasPins(const bool &has_pins);
    bool is_has_pins_Set() const;
    bool is_has_pins_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsArchived() const;
    void setIsArchived(const bool &is_archived);
    bool is_is_archived_Set() const;
    bool is_is_archived_Valid() const;

    bool isIsExtShared() const;
    void setIsExtShared(const bool &is_ext_shared);
    bool is_is_ext_shared_Set() const;
    bool is_is_ext_shared_Valid() const;

    bool isIsFrozen() const;
    void setIsFrozen(const bool &is_frozen);
    bool is_is_frozen_Set() const;
    bool is_is_frozen_Valid() const;

    bool isIsIm() const;
    void setIsIm(const bool &is_im);
    bool is_is_im_Set() const;
    bool is_is_im_Valid() const;

    bool isIsOpen() const;
    void setIsOpen(const bool &is_open);
    bool is_is_open_Set() const;
    bool is_is_open_Valid() const;

    bool isIsOrgShared() const;
    void setIsOrgShared(const bool &is_org_shared);
    bool is_is_org_shared_Set() const;
    bool is_is_org_shared_Valid() const;

    bool isIsShared() const;
    void setIsShared(const bool &is_shared);
    bool is_is_shared_Set() const;
    bool is_is_shared_Valid() const;

    bool isIsStarred() const;
    void setIsStarred(const bool &is_starred);
    bool is_is_starred_Set() const;
    bool is_is_starred_Valid() const;

    bool isIsUserDeleted() const;
    void setIsUserDeleted(const bool &is_user_deleted);
    bool is_is_user_deleted_Set() const;
    bool is_is_user_deleted_Valid() const;

    QString getLastRead() const;
    void setLastRead(const QString &last_read);
    bool is_last_read_Set() const;
    bool is_last_read_Valid() const;

    QList<OAIObjs_channel_latest_inner> getLatest() const;
    void setLatest(const QList<OAIObjs_channel_latest_inner> &latest);
    bool is_latest_Set() const;
    bool is_latest_Valid() const;

    QList<OAIConversation_object_parent_conversation_inner> getParentConversation() const;
    void setParentConversation(const QList<OAIConversation_object_parent_conversation_inner> &parent_conversation);
    bool is_parent_conversation_Set() const;
    bool is_parent_conversation_Valid() const;

    qint32 getPinCount() const;
    void setPinCount(const qint32 &pin_count);
    bool is_pin_count_Set() const;
    bool is_pin_count_Valid() const;

    double getPriority() const;
    void setPriority(const double &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QSet<OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner> getShares() const;
    void setShares(const QSet<OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner> &shares);
    bool is_shares_Set() const;
    bool is_shares_Valid() const;

    qint32 getUnreadCount() const;
    void setUnreadCount(const qint32 &unread_count);
    bool is_unread_count_Set() const;
    bool is_unread_count_Valid() const;

    qint32 getUnreadCountDisplay() const;
    void setUnreadCountDisplay(const qint32 &unread_count_display);
    bool is_unread_count_display_Set() const;
    bool is_unread_count_display_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    bool m_has_pins;
    bool m_has_pins_isSet;
    bool m_has_pins_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_archived;
    bool m_is_archived_isSet;
    bool m_is_archived_isValid;

    bool m_is_ext_shared;
    bool m_is_ext_shared_isSet;
    bool m_is_ext_shared_isValid;

    bool m_is_frozen;
    bool m_is_frozen_isSet;
    bool m_is_frozen_isValid;

    bool m_is_im;
    bool m_is_im_isSet;
    bool m_is_im_isValid;

    bool m_is_open;
    bool m_is_open_isSet;
    bool m_is_open_isValid;

    bool m_is_org_shared;
    bool m_is_org_shared_isSet;
    bool m_is_org_shared_isValid;

    bool m_is_shared;
    bool m_is_shared_isSet;
    bool m_is_shared_isValid;

    bool m_is_starred;
    bool m_is_starred_isSet;
    bool m_is_starred_isValid;

    bool m_is_user_deleted;
    bool m_is_user_deleted_isSet;
    bool m_is_user_deleted_isValid;

    QString m_last_read;
    bool m_last_read_isSet;
    bool m_last_read_isValid;

    QList<OAIObjs_channel_latest_inner> m_latest;
    bool m_latest_isSet;
    bool m_latest_isValid;

    QList<OAIConversation_object_parent_conversation_inner> m_parent_conversation;
    bool m_parent_conversation_isSet;
    bool m_parent_conversation_isValid;

    qint32 m_pin_count;
    bool m_pin_count_isSet;
    bool m_pin_count_isValid;

    double m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QSet<OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner> m_shares;
    bool m_shares_isSet;
    bool m_shares_isValid;

    qint32 m_unread_count;
    bool m_unread_count_isSet;
    bool m_unread_count_isValid;

    qint32 m_unread_count_display;
    bool m_unread_count_display_isSet;
    bool m_unread_count_display_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversation_IM_Channel_Object_from_conversations___methods)

#endif // OAIConversation_IM_Channel_Object_from_conversations___methods_H
