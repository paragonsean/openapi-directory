/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIObjs_reminder.h
 *
 * 
 */

#ifndef OAIObjs_reminder_H
#define OAIObjs_reminder_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIObjs_reminder : public OAIObject {
public:
    OAIObjs_reminder();
    OAIObjs_reminder(QString json);
    ~OAIObjs_reminder() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCompleteTs() const;
    void setCompleteTs(const qint32 &complete_ts);
    bool is_complete_ts_Set() const;
    bool is_complete_ts_Valid() const;

    QString getCreator() const;
    void setCreator(const QString &creator);
    bool is_creator_Set() const;
    bool is_creator_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isRecurring() const;
    void setRecurring(const bool &recurring);
    bool is_recurring_Set() const;
    bool is_recurring_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    qint32 getTime() const;
    void setTime(const qint32 &time);
    bool is_time_Set() const;
    bool is_time_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_complete_ts;
    bool m_complete_ts_isSet;
    bool m_complete_ts_isValid;

    QString m_creator;
    bool m_creator_isSet;
    bool m_creator_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_recurring;
    bool m_recurring_isSet;
    bool m_recurring_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    qint32 m_time;
    bool m_time_isSet;
    bool m_time_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIObjs_reminder)

#endif // OAIObjs_reminder_H
