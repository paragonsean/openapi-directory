/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_paging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_paging::OAIObjs_paging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_paging::OAIObjs_paging() {
    this->initializeModel();
}

OAIObjs_paging::~OAIObjs_paging() {}

void OAIObjs_paging::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_spill_isSet = false;
    m_spill_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIObjs_paging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_paging::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_spill_isValid = ::OpenAPI::fromJsonValue(m_spill, json[QString("spill")]);
    m_spill_isSet = !json[QString("spill")].isNull() && m_spill_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIObjs_paging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_paging::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_pages_isSet) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_spill_isSet) {
        obj.insert(QString("spill"), ::OpenAPI::toJsonValue(m_spill));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIObjs_paging::getCount() const {
    return m_count;
}
void OAIObjs_paging::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIObjs_paging::is_count_Set() const{
    return m_count_isSet;
}

bool OAIObjs_paging::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIObjs_paging::getPage() const {
    return m_page;
}
void OAIObjs_paging::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIObjs_paging::is_page_Set() const{
    return m_page_isSet;
}

bool OAIObjs_paging::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIObjs_paging::getPages() const {
    return m_pages;
}
void OAIObjs_paging::setPages(const qint32 &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIObjs_paging::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIObjs_paging::is_pages_Valid() const{
    return m_pages_isValid;
}

qint32 OAIObjs_paging::getPerPage() const {
    return m_per_page;
}
void OAIObjs_paging::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAIObjs_paging::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAIObjs_paging::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint32 OAIObjs_paging::getSpill() const {
    return m_spill;
}
void OAIObjs_paging::setSpill(const qint32 &spill) {
    m_spill = spill;
    m_spill_isSet = true;
}

bool OAIObjs_paging::is_spill_Set() const{
    return m_spill_isSet;
}

bool OAIObjs_paging::is_spill_Valid() const{
    return m_spill_isValid;
}

qint32 OAIObjs_paging::getTotal() const {
    return m_total;
}
void OAIObjs_paging::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIObjs_paging::is_total_Set() const{
    return m_total_isSet;
}

bool OAIObjs_paging::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIObjs_paging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_paging::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
