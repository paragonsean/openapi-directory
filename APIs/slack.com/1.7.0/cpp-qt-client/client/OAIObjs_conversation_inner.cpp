/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_conversation_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_conversation_inner::OAIObjs_conversation_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_conversation_inner::OAIObjs_conversation_inner() {
    this->initializeModel();
}

OAIObjs_conversation_inner::~OAIObjs_conversation_inner() {}

void OAIObjs_conversation_inner::initializeModel() {

    m_accepted_user_isSet = false;
    m_accepted_user_isValid = false;

    m_connected_team_ids_isSet = false;
    m_connected_team_ids_isValid = false;

    m_conversation_host_id_isSet = false;
    m_conversation_host_id_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_display_counts_isSet = false;
    m_display_counts_isValid = false;

    m_enterprise_id_isSet = false;
    m_enterprise_id_isValid = false;

    m_has_pins_isSet = false;
    m_has_pins_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_team_ids_isSet = false;
    m_internal_team_ids_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_is_channel_isSet = false;
    m_is_channel_isValid = false;

    m_is_ext_shared_isSet = false;
    m_is_ext_shared_isValid = false;

    m_is_frozen_isSet = false;
    m_is_frozen_isValid = false;

    m_is_general_isSet = false;
    m_is_general_isValid = false;

    m_is_global_shared_isSet = false;
    m_is_global_shared_isValid = false;

    m_is_group_isSet = false;
    m_is_group_isValid = false;

    m_is_im_isSet = false;
    m_is_im_isValid = false;

    m_is_member_isSet = false;
    m_is_member_isValid = false;

    m_is_moved_isSet = false;
    m_is_moved_isValid = false;

    m_is_mpim_isSet = false;
    m_is_mpim_isValid = false;

    m_is_non_threadable_isSet = false;
    m_is_non_threadable_isValid = false;

    m_is_open_isSet = false;
    m_is_open_isValid = false;

    m_is_org_default_isSet = false;
    m_is_org_default_isValid = false;

    m_is_org_mandatory_isSet = false;
    m_is_org_mandatory_isValid = false;

    m_is_org_shared_isSet = false;
    m_is_org_shared_isValid = false;

    m_is_pending_ext_shared_isSet = false;
    m_is_pending_ext_shared_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_is_read_only_isSet = false;
    m_is_read_only_isValid = false;

    m_is_shared_isSet = false;
    m_is_shared_isValid = false;

    m_is_starred_isSet = false;
    m_is_starred_isValid = false;

    m_is_thread_only_isSet = false;
    m_is_thread_only_isValid = false;

    m_last_read_isSet = false;
    m_last_read_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_normalized_isSet = false;
    m_name_normalized_isValid = false;

    m_num_members_isSet = false;
    m_num_members_isValid = false;

    m_parent_conversation_isSet = false;
    m_parent_conversation_isValid = false;

    m_pending_connected_team_ids_isSet = false;
    m_pending_connected_team_ids_isValid = false;

    m_pending_shared_isSet = false;
    m_pending_shared_isValid = false;

    m_pin_count_isSet = false;
    m_pin_count_isValid = false;

    m_previous_names_isSet = false;
    m_previous_names_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_shared_team_ids_isSet = false;
    m_shared_team_ids_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;

    m_timezone_count_isSet = false;
    m_timezone_count_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_unlinked_isSet = false;
    m_unlinked_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;

    m_unread_count_display_isSet = false;
    m_unread_count_display_isValid = false;

    m_use_case_isSet = false;
    m_use_case_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_is_user_deleted_isSet = false;
    m_is_user_deleted_isValid = false;
}

void OAIObjs_conversation_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_conversation_inner::fromJsonObject(QJsonObject json) {

    m_accepted_user_isValid = ::OpenAPI::fromJsonValue(m_accepted_user, json[QString("accepted_user")]);
    m_accepted_user_isSet = !json[QString("accepted_user")].isNull() && m_accepted_user_isValid;

    m_connected_team_ids_isValid = ::OpenAPI::fromJsonValue(m_connected_team_ids, json[QString("connected_team_ids")]);
    m_connected_team_ids_isSet = !json[QString("connected_team_ids")].isNull() && m_connected_team_ids_isValid;

    m_conversation_host_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_host_id, json[QString("conversation_host_id")]);
    m_conversation_host_id_isSet = !json[QString("conversation_host_id")].isNull() && m_conversation_host_id_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_display_counts_isValid = ::OpenAPI::fromJsonValue(m_display_counts, json[QString("display_counts")]);
    m_display_counts_isSet = !json[QString("display_counts")].isNull() && m_display_counts_isValid;

    m_enterprise_id_isValid = ::OpenAPI::fromJsonValue(m_enterprise_id, json[QString("enterprise_id")]);
    m_enterprise_id_isSet = !json[QString("enterprise_id")].isNull() && m_enterprise_id_isValid;

    m_has_pins_isValid = ::OpenAPI::fromJsonValue(m_has_pins, json[QString("has_pins")]);
    m_has_pins_isSet = !json[QString("has_pins")].isNull() && m_has_pins_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_internal_team_ids_isValid = ::OpenAPI::fromJsonValue(m_internal_team_ids, json[QString("internal_team_ids")]);
    m_internal_team_ids_isSet = !json[QString("internal_team_ids")].isNull() && m_internal_team_ids_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("is_archived")]);
    m_is_archived_isSet = !json[QString("is_archived")].isNull() && m_is_archived_isValid;

    m_is_channel_isValid = ::OpenAPI::fromJsonValue(m_is_channel, json[QString("is_channel")]);
    m_is_channel_isSet = !json[QString("is_channel")].isNull() && m_is_channel_isValid;

    m_is_ext_shared_isValid = ::OpenAPI::fromJsonValue(m_is_ext_shared, json[QString("is_ext_shared")]);
    m_is_ext_shared_isSet = !json[QString("is_ext_shared")].isNull() && m_is_ext_shared_isValid;

    m_is_frozen_isValid = ::OpenAPI::fromJsonValue(m_is_frozen, json[QString("is_frozen")]);
    m_is_frozen_isSet = !json[QString("is_frozen")].isNull() && m_is_frozen_isValid;

    m_is_general_isValid = ::OpenAPI::fromJsonValue(m_is_general, json[QString("is_general")]);
    m_is_general_isSet = !json[QString("is_general")].isNull() && m_is_general_isValid;

    m_is_global_shared_isValid = ::OpenAPI::fromJsonValue(m_is_global_shared, json[QString("is_global_shared")]);
    m_is_global_shared_isSet = !json[QString("is_global_shared")].isNull() && m_is_global_shared_isValid;

    m_is_group_isValid = ::OpenAPI::fromJsonValue(m_is_group, json[QString("is_group")]);
    m_is_group_isSet = !json[QString("is_group")].isNull() && m_is_group_isValid;

    m_is_im_isValid = ::OpenAPI::fromJsonValue(m_is_im, json[QString("is_im")]);
    m_is_im_isSet = !json[QString("is_im")].isNull() && m_is_im_isValid;

    m_is_member_isValid = ::OpenAPI::fromJsonValue(m_is_member, json[QString("is_member")]);
    m_is_member_isSet = !json[QString("is_member")].isNull() && m_is_member_isValid;

    m_is_moved_isValid = ::OpenAPI::fromJsonValue(m_is_moved, json[QString("is_moved")]);
    m_is_moved_isSet = !json[QString("is_moved")].isNull() && m_is_moved_isValid;

    m_is_mpim_isValid = ::OpenAPI::fromJsonValue(m_is_mpim, json[QString("is_mpim")]);
    m_is_mpim_isSet = !json[QString("is_mpim")].isNull() && m_is_mpim_isValid;

    m_is_non_threadable_isValid = ::OpenAPI::fromJsonValue(m_is_non_threadable, json[QString("is_non_threadable")]);
    m_is_non_threadable_isSet = !json[QString("is_non_threadable")].isNull() && m_is_non_threadable_isValid;

    m_is_open_isValid = ::OpenAPI::fromJsonValue(m_is_open, json[QString("is_open")]);
    m_is_open_isSet = !json[QString("is_open")].isNull() && m_is_open_isValid;

    m_is_org_default_isValid = ::OpenAPI::fromJsonValue(m_is_org_default, json[QString("is_org_default")]);
    m_is_org_default_isSet = !json[QString("is_org_default")].isNull() && m_is_org_default_isValid;

    m_is_org_mandatory_isValid = ::OpenAPI::fromJsonValue(m_is_org_mandatory, json[QString("is_org_mandatory")]);
    m_is_org_mandatory_isSet = !json[QString("is_org_mandatory")].isNull() && m_is_org_mandatory_isValid;

    m_is_org_shared_isValid = ::OpenAPI::fromJsonValue(m_is_org_shared, json[QString("is_org_shared")]);
    m_is_org_shared_isSet = !json[QString("is_org_shared")].isNull() && m_is_org_shared_isValid;

    m_is_pending_ext_shared_isValid = ::OpenAPI::fromJsonValue(m_is_pending_ext_shared, json[QString("is_pending_ext_shared")]);
    m_is_pending_ext_shared_isSet = !json[QString("is_pending_ext_shared")].isNull() && m_is_pending_ext_shared_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("is_private")]);
    m_is_private_isSet = !json[QString("is_private")].isNull() && m_is_private_isValid;

    m_is_read_only_isValid = ::OpenAPI::fromJsonValue(m_is_read_only, json[QString("is_read_only")]);
    m_is_read_only_isSet = !json[QString("is_read_only")].isNull() && m_is_read_only_isValid;

    m_is_shared_isValid = ::OpenAPI::fromJsonValue(m_is_shared, json[QString("is_shared")]);
    m_is_shared_isSet = !json[QString("is_shared")].isNull() && m_is_shared_isValid;

    m_is_starred_isValid = ::OpenAPI::fromJsonValue(m_is_starred, json[QString("is_starred")]);
    m_is_starred_isSet = !json[QString("is_starred")].isNull() && m_is_starred_isValid;

    m_is_thread_only_isValid = ::OpenAPI::fromJsonValue(m_is_thread_only, json[QString("is_thread_only")]);
    m_is_thread_only_isSet = !json[QString("is_thread_only")].isNull() && m_is_thread_only_isValid;

    m_last_read_isValid = ::OpenAPI::fromJsonValue(m_last_read, json[QString("last_read")]);
    m_last_read_isSet = !json[QString("last_read")].isNull() && m_last_read_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_name_normalized_isValid = ::OpenAPI::fromJsonValue(m_name_normalized, json[QString("name_normalized")]);
    m_name_normalized_isSet = !json[QString("name_normalized")].isNull() && m_name_normalized_isValid;

    m_num_members_isValid = ::OpenAPI::fromJsonValue(m_num_members, json[QString("num_members")]);
    m_num_members_isSet = !json[QString("num_members")].isNull() && m_num_members_isValid;

    m_parent_conversation_isValid = ::OpenAPI::fromJsonValue(m_parent_conversation, json[QString("parent_conversation")]);
    m_parent_conversation_isSet = !json[QString("parent_conversation")].isNull() && m_parent_conversation_isValid;

    m_pending_connected_team_ids_isValid = ::OpenAPI::fromJsonValue(m_pending_connected_team_ids, json[QString("pending_connected_team_ids")]);
    m_pending_connected_team_ids_isSet = !json[QString("pending_connected_team_ids")].isNull() && m_pending_connected_team_ids_isValid;

    m_pending_shared_isValid = ::OpenAPI::fromJsonValue(m_pending_shared, json[QString("pending_shared")]);
    m_pending_shared_isSet = !json[QString("pending_shared")].isNull() && m_pending_shared_isValid;

    m_pin_count_isValid = ::OpenAPI::fromJsonValue(m_pin_count, json[QString("pin_count")]);
    m_pin_count_isSet = !json[QString("pin_count")].isNull() && m_pin_count_isValid;

    m_previous_names_isValid = ::OpenAPI::fromJsonValue(m_previous_names, json[QString("previous_names")]);
    m_previous_names_isSet = !json[QString("previous_names")].isNull() && m_previous_names_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_shared_team_ids_isValid = ::OpenAPI::fromJsonValue(m_shared_team_ids, json[QString("shared_team_ids")]);
    m_shared_team_ids_isSet = !json[QString("shared_team_ids")].isNull() && m_shared_team_ids_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;

    m_timezone_count_isValid = ::OpenAPI::fromJsonValue(m_timezone_count, json[QString("timezone_count")]);
    m_timezone_count_isSet = !json[QString("timezone_count")].isNull() && m_timezone_count_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_unlinked_isValid = ::OpenAPI::fromJsonValue(m_unlinked, json[QString("unlinked")]);
    m_unlinked_isSet = !json[QString("unlinked")].isNull() && m_unlinked_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("unread_count")]);
    m_unread_count_isSet = !json[QString("unread_count")].isNull() && m_unread_count_isValid;

    m_unread_count_display_isValid = ::OpenAPI::fromJsonValue(m_unread_count_display, json[QString("unread_count_display")]);
    m_unread_count_display_isSet = !json[QString("unread_count_display")].isNull() && m_unread_count_display_isValid;

    m_use_case_isValid = ::OpenAPI::fromJsonValue(m_use_case, json[QString("use_case")]);
    m_use_case_isSet = !json[QString("use_case")].isNull() && m_use_case_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_is_user_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_user_deleted, json[QString("is_user_deleted")]);
    m_is_user_deleted_isSet = !json[QString("is_user_deleted")].isNull() && m_is_user_deleted_isValid;
}

QString OAIObjs_conversation_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_conversation_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_user_isSet) {
        obj.insert(QString("accepted_user"), ::OpenAPI::toJsonValue(m_accepted_user));
    }
    if (m_connected_team_ids.size() > 0) {
        obj.insert(QString("connected_team_ids"), ::OpenAPI::toJsonValue(m_connected_team_ids));
    }
    if (m_conversation_host_id_isSet) {
        obj.insert(QString("conversation_host_id"), ::OpenAPI::toJsonValue(m_conversation_host_id));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_creator_isSet) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_display_counts.isSet()) {
        obj.insert(QString("display_counts"), ::OpenAPI::toJsonValue(m_display_counts));
    }
    if (m_enterprise_id_isSet) {
        obj.insert(QString("enterprise_id"), ::OpenAPI::toJsonValue(m_enterprise_id));
    }
    if (m_has_pins_isSet) {
        obj.insert(QString("has_pins"), ::OpenAPI::toJsonValue(m_has_pins));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_team_ids.size() > 0) {
        obj.insert(QString("internal_team_ids"), ::OpenAPI::toJsonValue(m_internal_team_ids));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("is_archived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_is_channel_isSet) {
        obj.insert(QString("is_channel"), ::OpenAPI::toJsonValue(m_is_channel));
    }
    if (m_is_ext_shared_isSet) {
        obj.insert(QString("is_ext_shared"), ::OpenAPI::toJsonValue(m_is_ext_shared));
    }
    if (m_is_frozen_isSet) {
        obj.insert(QString("is_frozen"), ::OpenAPI::toJsonValue(m_is_frozen));
    }
    if (m_is_general_isSet) {
        obj.insert(QString("is_general"), ::OpenAPI::toJsonValue(m_is_general));
    }
    if (m_is_global_shared_isSet) {
        obj.insert(QString("is_global_shared"), ::OpenAPI::toJsonValue(m_is_global_shared));
    }
    if (m_is_group_isSet) {
        obj.insert(QString("is_group"), ::OpenAPI::toJsonValue(m_is_group));
    }
    if (m_is_im_isSet) {
        obj.insert(QString("is_im"), ::OpenAPI::toJsonValue(m_is_im));
    }
    if (m_is_member_isSet) {
        obj.insert(QString("is_member"), ::OpenAPI::toJsonValue(m_is_member));
    }
    if (m_is_moved_isSet) {
        obj.insert(QString("is_moved"), ::OpenAPI::toJsonValue(m_is_moved));
    }
    if (m_is_mpim_isSet) {
        obj.insert(QString("is_mpim"), ::OpenAPI::toJsonValue(m_is_mpim));
    }
    if (m_is_non_threadable_isSet) {
        obj.insert(QString("is_non_threadable"), ::OpenAPI::toJsonValue(m_is_non_threadable));
    }
    if (m_is_open_isSet) {
        obj.insert(QString("is_open"), ::OpenAPI::toJsonValue(m_is_open));
    }
    if (m_is_org_default_isSet) {
        obj.insert(QString("is_org_default"), ::OpenAPI::toJsonValue(m_is_org_default));
    }
    if (m_is_org_mandatory_isSet) {
        obj.insert(QString("is_org_mandatory"), ::OpenAPI::toJsonValue(m_is_org_mandatory));
    }
    if (m_is_org_shared_isSet) {
        obj.insert(QString("is_org_shared"), ::OpenAPI::toJsonValue(m_is_org_shared));
    }
    if (m_is_pending_ext_shared_isSet) {
        obj.insert(QString("is_pending_ext_shared"), ::OpenAPI::toJsonValue(m_is_pending_ext_shared));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("is_private"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_is_read_only_isSet) {
        obj.insert(QString("is_read_only"), ::OpenAPI::toJsonValue(m_is_read_only));
    }
    if (m_is_shared_isSet) {
        obj.insert(QString("is_shared"), ::OpenAPI::toJsonValue(m_is_shared));
    }
    if (m_is_starred_isSet) {
        obj.insert(QString("is_starred"), ::OpenAPI::toJsonValue(m_is_starred));
    }
    if (m_is_thread_only_isSet) {
        obj.insert(QString("is_thread_only"), ::OpenAPI::toJsonValue(m_is_thread_only));
    }
    if (m_last_read_isSet) {
        obj.insert(QString("last_read"), ::OpenAPI::toJsonValue(m_last_read));
    }
    if (m_latest.size() > 0) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_normalized_isSet) {
        obj.insert(QString("name_normalized"), ::OpenAPI::toJsonValue(m_name_normalized));
    }
    if (m_num_members_isSet) {
        obj.insert(QString("num_members"), ::OpenAPI::toJsonValue(m_num_members));
    }
    if (m_parent_conversation.size() > 0) {
        obj.insert(QString("parent_conversation"), ::OpenAPI::toJsonValue(m_parent_conversation));
    }
    if (m_pending_connected_team_ids.size() > 0) {
        obj.insert(QString("pending_connected_team_ids"), ::OpenAPI::toJsonValue(m_pending_connected_team_ids));
    }
    if (m_pending_shared.size() > 0) {
        obj.insert(QString("pending_shared"), ::OpenAPI::toJsonValue(m_pending_shared));
    }
    if (m_pin_count_isSet) {
        obj.insert(QString("pin_count"), ::OpenAPI::toJsonValue(m_pin_count));
    }
    if (m_previous_names.size() > 0) {
        obj.insert(QString("previous_names"), ::OpenAPI::toJsonValue(m_previous_names));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_purpose.isSet()) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_shared_team_ids.size() > 0) {
        obj.insert(QString("shared_team_ids"), ::OpenAPI::toJsonValue(m_shared_team_ids));
    }
    if (m_shares.size() > 0) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    if (m_timezone_count_isSet) {
        obj.insert(QString("timezone_count"), ::OpenAPI::toJsonValue(m_timezone_count));
    }
    if (m_topic.isSet()) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_unlinked_isSet) {
        obj.insert(QString("unlinked"), ::OpenAPI::toJsonValue(m_unlinked));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("unread_count"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    if (m_unread_count_display_isSet) {
        obj.insert(QString("unread_count_display"), ::OpenAPI::toJsonValue(m_unread_count_display));
    }
    if (m_use_case_isSet) {
        obj.insert(QString("use_case"), ::OpenAPI::toJsonValue(m_use_case));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_is_user_deleted_isSet) {
        obj.insert(QString("is_user_deleted"), ::OpenAPI::toJsonValue(m_is_user_deleted));
    }
    return obj;
}

QString OAIObjs_conversation_inner::getAcceptedUser() const {
    return m_accepted_user;
}
void OAIObjs_conversation_inner::setAcceptedUser(const QString &accepted_user) {
    m_accepted_user = accepted_user;
    m_accepted_user_isSet = true;
}

bool OAIObjs_conversation_inner::is_accepted_user_Set() const{
    return m_accepted_user_isSet;
}

bool OAIObjs_conversation_inner::is_accepted_user_Valid() const{
    return m_accepted_user_isValid;
}

QSet<QString> OAIObjs_conversation_inner::getConnectedTeamIds() const {
    return m_connected_team_ids;
}
void OAIObjs_conversation_inner::setConnectedTeamIds(const QSet<QString> &connected_team_ids) {
    m_connected_team_ids = connected_team_ids;
    m_connected_team_ids_isSet = true;
}

bool OAIObjs_conversation_inner::is_connected_team_ids_Set() const{
    return m_connected_team_ids_isSet;
}

bool OAIObjs_conversation_inner::is_connected_team_ids_Valid() const{
    return m_connected_team_ids_isValid;
}

QString OAIObjs_conversation_inner::getConversationHostId() const {
    return m_conversation_host_id;
}
void OAIObjs_conversation_inner::setConversationHostId(const QString &conversation_host_id) {
    m_conversation_host_id = conversation_host_id;
    m_conversation_host_id_isSet = true;
}

bool OAIObjs_conversation_inner::is_conversation_host_id_Set() const{
    return m_conversation_host_id_isSet;
}

bool OAIObjs_conversation_inner::is_conversation_host_id_Valid() const{
    return m_conversation_host_id_isValid;
}

qint32 OAIObjs_conversation_inner::getCreated() const {
    return m_created;
}
void OAIObjs_conversation_inner::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIObjs_conversation_inner::is_created_Set() const{
    return m_created_isSet;
}

bool OAIObjs_conversation_inner::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIObjs_conversation_inner::getCreator() const {
    return m_creator;
}
void OAIObjs_conversation_inner::setCreator(const QString &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIObjs_conversation_inner::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIObjs_conversation_inner::is_creator_Valid() const{
    return m_creator_isValid;
}

OAIConversation_object_display_counts OAIObjs_conversation_inner::getDisplayCounts() const {
    return m_display_counts;
}
void OAIObjs_conversation_inner::setDisplayCounts(const OAIConversation_object_display_counts &display_counts) {
    m_display_counts = display_counts;
    m_display_counts_isSet = true;
}

bool OAIObjs_conversation_inner::is_display_counts_Set() const{
    return m_display_counts_isSet;
}

bool OAIObjs_conversation_inner::is_display_counts_Valid() const{
    return m_display_counts_isValid;
}

QString OAIObjs_conversation_inner::getEnterpriseId() const {
    return m_enterprise_id;
}
void OAIObjs_conversation_inner::setEnterpriseId(const QString &enterprise_id) {
    m_enterprise_id = enterprise_id;
    m_enterprise_id_isSet = true;
}

bool OAIObjs_conversation_inner::is_enterprise_id_Set() const{
    return m_enterprise_id_isSet;
}

bool OAIObjs_conversation_inner::is_enterprise_id_Valid() const{
    return m_enterprise_id_isValid;
}

bool OAIObjs_conversation_inner::isHasPins() const {
    return m_has_pins;
}
void OAIObjs_conversation_inner::setHasPins(const bool &has_pins) {
    m_has_pins = has_pins;
    m_has_pins_isSet = true;
}

bool OAIObjs_conversation_inner::is_has_pins_Set() const{
    return m_has_pins_isSet;
}

bool OAIObjs_conversation_inner::is_has_pins_Valid() const{
    return m_has_pins_isValid;
}

QString OAIObjs_conversation_inner::getId() const {
    return m_id;
}
void OAIObjs_conversation_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_conversation_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_conversation_inner::is_id_Valid() const{
    return m_id_isValid;
}

QSet<QString> OAIObjs_conversation_inner::getInternalTeamIds() const {
    return m_internal_team_ids;
}
void OAIObjs_conversation_inner::setInternalTeamIds(const QSet<QString> &internal_team_ids) {
    m_internal_team_ids = internal_team_ids;
    m_internal_team_ids_isSet = true;
}

bool OAIObjs_conversation_inner::is_internal_team_ids_Set() const{
    return m_internal_team_ids_isSet;
}

bool OAIObjs_conversation_inner::is_internal_team_ids_Valid() const{
    return m_internal_team_ids_isValid;
}

bool OAIObjs_conversation_inner::isIsArchived() const {
    return m_is_archived;
}
void OAIObjs_conversation_inner::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIObjs_conversation_inner::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

bool OAIObjs_conversation_inner::isIsChannel() const {
    return m_is_channel;
}
void OAIObjs_conversation_inner::setIsChannel(const bool &is_channel) {
    m_is_channel = is_channel;
    m_is_channel_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_channel_Set() const{
    return m_is_channel_isSet;
}

bool OAIObjs_conversation_inner::is_is_channel_Valid() const{
    return m_is_channel_isValid;
}

bool OAIObjs_conversation_inner::isIsExtShared() const {
    return m_is_ext_shared;
}
void OAIObjs_conversation_inner::setIsExtShared(const bool &is_ext_shared) {
    m_is_ext_shared = is_ext_shared;
    m_is_ext_shared_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_ext_shared_Set() const{
    return m_is_ext_shared_isSet;
}

bool OAIObjs_conversation_inner::is_is_ext_shared_Valid() const{
    return m_is_ext_shared_isValid;
}

bool OAIObjs_conversation_inner::isIsFrozen() const {
    return m_is_frozen;
}
void OAIObjs_conversation_inner::setIsFrozen(const bool &is_frozen) {
    m_is_frozen = is_frozen;
    m_is_frozen_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_frozen_Set() const{
    return m_is_frozen_isSet;
}

bool OAIObjs_conversation_inner::is_is_frozen_Valid() const{
    return m_is_frozen_isValid;
}

bool OAIObjs_conversation_inner::isIsGeneral() const {
    return m_is_general;
}
void OAIObjs_conversation_inner::setIsGeneral(const bool &is_general) {
    m_is_general = is_general;
    m_is_general_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_general_Set() const{
    return m_is_general_isSet;
}

bool OAIObjs_conversation_inner::is_is_general_Valid() const{
    return m_is_general_isValid;
}

bool OAIObjs_conversation_inner::isIsGlobalShared() const {
    return m_is_global_shared;
}
void OAIObjs_conversation_inner::setIsGlobalShared(const bool &is_global_shared) {
    m_is_global_shared = is_global_shared;
    m_is_global_shared_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_global_shared_Set() const{
    return m_is_global_shared_isSet;
}

bool OAIObjs_conversation_inner::is_is_global_shared_Valid() const{
    return m_is_global_shared_isValid;
}

bool OAIObjs_conversation_inner::isIsGroup() const {
    return m_is_group;
}
void OAIObjs_conversation_inner::setIsGroup(const bool &is_group) {
    m_is_group = is_group;
    m_is_group_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_group_Set() const{
    return m_is_group_isSet;
}

bool OAIObjs_conversation_inner::is_is_group_Valid() const{
    return m_is_group_isValid;
}

bool OAIObjs_conversation_inner::isIsIm() const {
    return m_is_im;
}
void OAIObjs_conversation_inner::setIsIm(const bool &is_im) {
    m_is_im = is_im;
    m_is_im_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_im_Set() const{
    return m_is_im_isSet;
}

bool OAIObjs_conversation_inner::is_is_im_Valid() const{
    return m_is_im_isValid;
}

bool OAIObjs_conversation_inner::isIsMember() const {
    return m_is_member;
}
void OAIObjs_conversation_inner::setIsMember(const bool &is_member) {
    m_is_member = is_member;
    m_is_member_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_member_Set() const{
    return m_is_member_isSet;
}

bool OAIObjs_conversation_inner::is_is_member_Valid() const{
    return m_is_member_isValid;
}

qint32 OAIObjs_conversation_inner::getIsMoved() const {
    return m_is_moved;
}
void OAIObjs_conversation_inner::setIsMoved(const qint32 &is_moved) {
    m_is_moved = is_moved;
    m_is_moved_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_moved_Set() const{
    return m_is_moved_isSet;
}

bool OAIObjs_conversation_inner::is_is_moved_Valid() const{
    return m_is_moved_isValid;
}

bool OAIObjs_conversation_inner::isIsMpim() const {
    return m_is_mpim;
}
void OAIObjs_conversation_inner::setIsMpim(const bool &is_mpim) {
    m_is_mpim = is_mpim;
    m_is_mpim_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_mpim_Set() const{
    return m_is_mpim_isSet;
}

bool OAIObjs_conversation_inner::is_is_mpim_Valid() const{
    return m_is_mpim_isValid;
}

bool OAIObjs_conversation_inner::isIsNonThreadable() const {
    return m_is_non_threadable;
}
void OAIObjs_conversation_inner::setIsNonThreadable(const bool &is_non_threadable) {
    m_is_non_threadable = is_non_threadable;
    m_is_non_threadable_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_non_threadable_Set() const{
    return m_is_non_threadable_isSet;
}

bool OAIObjs_conversation_inner::is_is_non_threadable_Valid() const{
    return m_is_non_threadable_isValid;
}

bool OAIObjs_conversation_inner::isIsOpen() const {
    return m_is_open;
}
void OAIObjs_conversation_inner::setIsOpen(const bool &is_open) {
    m_is_open = is_open;
    m_is_open_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_open_Set() const{
    return m_is_open_isSet;
}

bool OAIObjs_conversation_inner::is_is_open_Valid() const{
    return m_is_open_isValid;
}

bool OAIObjs_conversation_inner::isIsOrgDefault() const {
    return m_is_org_default;
}
void OAIObjs_conversation_inner::setIsOrgDefault(const bool &is_org_default) {
    m_is_org_default = is_org_default;
    m_is_org_default_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_org_default_Set() const{
    return m_is_org_default_isSet;
}

bool OAIObjs_conversation_inner::is_is_org_default_Valid() const{
    return m_is_org_default_isValid;
}

bool OAIObjs_conversation_inner::isIsOrgMandatory() const {
    return m_is_org_mandatory;
}
void OAIObjs_conversation_inner::setIsOrgMandatory(const bool &is_org_mandatory) {
    m_is_org_mandatory = is_org_mandatory;
    m_is_org_mandatory_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_org_mandatory_Set() const{
    return m_is_org_mandatory_isSet;
}

bool OAIObjs_conversation_inner::is_is_org_mandatory_Valid() const{
    return m_is_org_mandatory_isValid;
}

bool OAIObjs_conversation_inner::isIsOrgShared() const {
    return m_is_org_shared;
}
void OAIObjs_conversation_inner::setIsOrgShared(const bool &is_org_shared) {
    m_is_org_shared = is_org_shared;
    m_is_org_shared_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_org_shared_Set() const{
    return m_is_org_shared_isSet;
}

bool OAIObjs_conversation_inner::is_is_org_shared_Valid() const{
    return m_is_org_shared_isValid;
}

bool OAIObjs_conversation_inner::isIsPendingExtShared() const {
    return m_is_pending_ext_shared;
}
void OAIObjs_conversation_inner::setIsPendingExtShared(const bool &is_pending_ext_shared) {
    m_is_pending_ext_shared = is_pending_ext_shared;
    m_is_pending_ext_shared_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_pending_ext_shared_Set() const{
    return m_is_pending_ext_shared_isSet;
}

bool OAIObjs_conversation_inner::is_is_pending_ext_shared_Valid() const{
    return m_is_pending_ext_shared_isValid;
}

bool OAIObjs_conversation_inner::isIsPrivate() const {
    return m_is_private;
}
void OAIObjs_conversation_inner::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIObjs_conversation_inner::is_is_private_Valid() const{
    return m_is_private_isValid;
}

bool OAIObjs_conversation_inner::isIsReadOnly() const {
    return m_is_read_only;
}
void OAIObjs_conversation_inner::setIsReadOnly(const bool &is_read_only) {
    m_is_read_only = is_read_only;
    m_is_read_only_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_read_only_Set() const{
    return m_is_read_only_isSet;
}

bool OAIObjs_conversation_inner::is_is_read_only_Valid() const{
    return m_is_read_only_isValid;
}

bool OAIObjs_conversation_inner::isIsShared() const {
    return m_is_shared;
}
void OAIObjs_conversation_inner::setIsShared(const bool &is_shared) {
    m_is_shared = is_shared;
    m_is_shared_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_shared_Set() const{
    return m_is_shared_isSet;
}

bool OAIObjs_conversation_inner::is_is_shared_Valid() const{
    return m_is_shared_isValid;
}

bool OAIObjs_conversation_inner::isIsStarred() const {
    return m_is_starred;
}
void OAIObjs_conversation_inner::setIsStarred(const bool &is_starred) {
    m_is_starred = is_starred;
    m_is_starred_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_starred_Set() const{
    return m_is_starred_isSet;
}

bool OAIObjs_conversation_inner::is_is_starred_Valid() const{
    return m_is_starred_isValid;
}

bool OAIObjs_conversation_inner::isIsThreadOnly() const {
    return m_is_thread_only;
}
void OAIObjs_conversation_inner::setIsThreadOnly(const bool &is_thread_only) {
    m_is_thread_only = is_thread_only;
    m_is_thread_only_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_thread_only_Set() const{
    return m_is_thread_only_isSet;
}

bool OAIObjs_conversation_inner::is_is_thread_only_Valid() const{
    return m_is_thread_only_isValid;
}

QString OAIObjs_conversation_inner::getLastRead() const {
    return m_last_read;
}
void OAIObjs_conversation_inner::setLastRead(const QString &last_read) {
    m_last_read = last_read;
    m_last_read_isSet = true;
}

bool OAIObjs_conversation_inner::is_last_read_Set() const{
    return m_last_read_isSet;
}

bool OAIObjs_conversation_inner::is_last_read_Valid() const{
    return m_last_read_isValid;
}

QList<OAIObjs_channel_latest_inner> OAIObjs_conversation_inner::getLatest() const {
    return m_latest;
}
void OAIObjs_conversation_inner::setLatest(const QList<OAIObjs_channel_latest_inner> &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIObjs_conversation_inner::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIObjs_conversation_inner::is_latest_Valid() const{
    return m_latest_isValid;
}

QSet<QString> OAIObjs_conversation_inner::getMembers() const {
    return m_members;
}
void OAIObjs_conversation_inner::setMembers(const QSet<QString> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIObjs_conversation_inner::is_members_Set() const{
    return m_members_isSet;
}

bool OAIObjs_conversation_inner::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIObjs_conversation_inner::getName() const {
    return m_name;
}
void OAIObjs_conversation_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_conversation_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_conversation_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObjs_conversation_inner::getNameNormalized() const {
    return m_name_normalized;
}
void OAIObjs_conversation_inner::setNameNormalized(const QString &name_normalized) {
    m_name_normalized = name_normalized;
    m_name_normalized_isSet = true;
}

bool OAIObjs_conversation_inner::is_name_normalized_Set() const{
    return m_name_normalized_isSet;
}

bool OAIObjs_conversation_inner::is_name_normalized_Valid() const{
    return m_name_normalized_isValid;
}

qint32 OAIObjs_conversation_inner::getNumMembers() const {
    return m_num_members;
}
void OAIObjs_conversation_inner::setNumMembers(const qint32 &num_members) {
    m_num_members = num_members;
    m_num_members_isSet = true;
}

bool OAIObjs_conversation_inner::is_num_members_Set() const{
    return m_num_members_isSet;
}

bool OAIObjs_conversation_inner::is_num_members_Valid() const{
    return m_num_members_isValid;
}

QList<OAIConversation_object_parent_conversation_inner> OAIObjs_conversation_inner::getParentConversation() const {
    return m_parent_conversation;
}
void OAIObjs_conversation_inner::setParentConversation(const QList<OAIConversation_object_parent_conversation_inner> &parent_conversation) {
    m_parent_conversation = parent_conversation;
    m_parent_conversation_isSet = true;
}

bool OAIObjs_conversation_inner::is_parent_conversation_Set() const{
    return m_parent_conversation_isSet;
}

bool OAIObjs_conversation_inner::is_parent_conversation_Valid() const{
    return m_parent_conversation_isValid;
}

QSet<QString> OAIObjs_conversation_inner::getPendingConnectedTeamIds() const {
    return m_pending_connected_team_ids;
}
void OAIObjs_conversation_inner::setPendingConnectedTeamIds(const QSet<QString> &pending_connected_team_ids) {
    m_pending_connected_team_ids = pending_connected_team_ids;
    m_pending_connected_team_ids_isSet = true;
}

bool OAIObjs_conversation_inner::is_pending_connected_team_ids_Set() const{
    return m_pending_connected_team_ids_isSet;
}

bool OAIObjs_conversation_inner::is_pending_connected_team_ids_Valid() const{
    return m_pending_connected_team_ids_isValid;
}

QSet<QString> OAIObjs_conversation_inner::getPendingShared() const {
    return m_pending_shared;
}
void OAIObjs_conversation_inner::setPendingShared(const QSet<QString> &pending_shared) {
    m_pending_shared = pending_shared;
    m_pending_shared_isSet = true;
}

bool OAIObjs_conversation_inner::is_pending_shared_Set() const{
    return m_pending_shared_isSet;
}

bool OAIObjs_conversation_inner::is_pending_shared_Valid() const{
    return m_pending_shared_isValid;
}

qint32 OAIObjs_conversation_inner::getPinCount() const {
    return m_pin_count;
}
void OAIObjs_conversation_inner::setPinCount(const qint32 &pin_count) {
    m_pin_count = pin_count;
    m_pin_count_isSet = true;
}

bool OAIObjs_conversation_inner::is_pin_count_Set() const{
    return m_pin_count_isSet;
}

bool OAIObjs_conversation_inner::is_pin_count_Valid() const{
    return m_pin_count_isValid;
}

QSet<QString> OAIObjs_conversation_inner::getPreviousNames() const {
    return m_previous_names;
}
void OAIObjs_conversation_inner::setPreviousNames(const QSet<QString> &previous_names) {
    m_previous_names = previous_names;
    m_previous_names_isSet = true;
}

bool OAIObjs_conversation_inner::is_previous_names_Set() const{
    return m_previous_names_isSet;
}

bool OAIObjs_conversation_inner::is_previous_names_Valid() const{
    return m_previous_names_isValid;
}

double OAIObjs_conversation_inner::getPriority() const {
    return m_priority;
}
void OAIObjs_conversation_inner::setPriority(const double &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIObjs_conversation_inner::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIObjs_conversation_inner::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIObjs_channel_purpose OAIObjs_conversation_inner::getPurpose() const {
    return m_purpose;
}
void OAIObjs_conversation_inner::setPurpose(const OAIObjs_channel_purpose &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIObjs_conversation_inner::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIObjs_conversation_inner::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QSet<QString> OAIObjs_conversation_inner::getSharedTeamIds() const {
    return m_shared_team_ids;
}
void OAIObjs_conversation_inner::setSharedTeamIds(const QSet<QString> &shared_team_ids) {
    m_shared_team_ids = shared_team_ids;
    m_shared_team_ids_isSet = true;
}

bool OAIObjs_conversation_inner::is_shared_team_ids_Set() const{
    return m_shared_team_ids_isSet;
}

bool OAIObjs_conversation_inner::is_shared_team_ids_Valid() const{
    return m_shared_team_ids_isValid;
}

QSet<OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner> OAIObjs_conversation_inner::getShares() const {
    return m_shares;
}
void OAIObjs_conversation_inner::setShares(const QSet<OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner> &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAIObjs_conversation_inner::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAIObjs_conversation_inner::is_shares_Valid() const{
    return m_shares_isValid;
}

qint32 OAIObjs_conversation_inner::getTimezoneCount() const {
    return m_timezone_count;
}
void OAIObjs_conversation_inner::setTimezoneCount(const qint32 &timezone_count) {
    m_timezone_count = timezone_count;
    m_timezone_count_isSet = true;
}

bool OAIObjs_conversation_inner::is_timezone_count_Set() const{
    return m_timezone_count_isSet;
}

bool OAIObjs_conversation_inner::is_timezone_count_Valid() const{
    return m_timezone_count_isValid;
}

OAIObjs_channel_purpose OAIObjs_conversation_inner::getTopic() const {
    return m_topic;
}
void OAIObjs_conversation_inner::setTopic(const OAIObjs_channel_purpose &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIObjs_conversation_inner::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIObjs_conversation_inner::is_topic_Valid() const{
    return m_topic_isValid;
}

qint32 OAIObjs_conversation_inner::getUnlinked() const {
    return m_unlinked;
}
void OAIObjs_conversation_inner::setUnlinked(const qint32 &unlinked) {
    m_unlinked = unlinked;
    m_unlinked_isSet = true;
}

bool OAIObjs_conversation_inner::is_unlinked_Set() const{
    return m_unlinked_isSet;
}

bool OAIObjs_conversation_inner::is_unlinked_Valid() const{
    return m_unlinked_isValid;
}

qint32 OAIObjs_conversation_inner::getUnreadCount() const {
    return m_unread_count;
}
void OAIObjs_conversation_inner::setUnreadCount(const qint32 &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAIObjs_conversation_inner::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAIObjs_conversation_inner::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

qint32 OAIObjs_conversation_inner::getUnreadCountDisplay() const {
    return m_unread_count_display;
}
void OAIObjs_conversation_inner::setUnreadCountDisplay(const qint32 &unread_count_display) {
    m_unread_count_display = unread_count_display;
    m_unread_count_display_isSet = true;
}

bool OAIObjs_conversation_inner::is_unread_count_display_Set() const{
    return m_unread_count_display_isSet;
}

bool OAIObjs_conversation_inner::is_unread_count_display_Valid() const{
    return m_unread_count_display_isValid;
}

QString OAIObjs_conversation_inner::getUseCase() const {
    return m_use_case;
}
void OAIObjs_conversation_inner::setUseCase(const QString &use_case) {
    m_use_case = use_case;
    m_use_case_isSet = true;
}

bool OAIObjs_conversation_inner::is_use_case_Set() const{
    return m_use_case_isSet;
}

bool OAIObjs_conversation_inner::is_use_case_Valid() const{
    return m_use_case_isValid;
}

QString OAIObjs_conversation_inner::getUser() const {
    return m_user;
}
void OAIObjs_conversation_inner::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIObjs_conversation_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIObjs_conversation_inner::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAIObjs_conversation_inner::getVersion() const {
    return m_version;
}
void OAIObjs_conversation_inner::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIObjs_conversation_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIObjs_conversation_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIObjs_conversation_inner::isIsUserDeleted() const {
    return m_is_user_deleted;
}
void OAIObjs_conversation_inner::setIsUserDeleted(const bool &is_user_deleted) {
    m_is_user_deleted = is_user_deleted;
    m_is_user_deleted_isSet = true;
}

bool OAIObjs_conversation_inner::is_is_user_deleted_Set() const{
    return m_is_user_deleted_isSet;
}

bool OAIObjs_conversation_inner::is_is_user_deleted_Valid() const{
    return m_is_user_deleted_isValid;
}

bool OAIObjs_conversation_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_team_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_host_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_team_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ext_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_frozen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_general_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_im_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_moved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mpim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_threadable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_org_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_org_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_org_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pending_ext_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_thread_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_conversation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_connected_team_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_shared.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_team_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlinked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_conversation_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_creator_isValid && m_id_isValid && m_is_archived_isValid && m_is_channel_isValid && m_is_general_isValid && m_is_group_isValid && m_is_im_isValid && m_is_mpim_isValid && m_is_org_shared_isValid && m_is_private_isValid && m_is_shared_isValid && m_name_isValid && m_name_normalized_isValid && m_priority_isValid && m_purpose_isValid && m_topic_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
