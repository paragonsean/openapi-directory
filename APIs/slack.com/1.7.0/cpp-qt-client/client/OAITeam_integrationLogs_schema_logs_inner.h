/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITeam_integrationLogs_schema_logs_inner.h
 *
 * 
 */

#ifndef OAITeam_integrationLogs_schema_logs_inner_H
#define OAITeam_integrationLogs_schema_logs_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITeam_integrationLogs_schema_logs_inner : public OAIObject {
public:
    OAITeam_integrationLogs_schema_logs_inner();
    OAITeam_integrationLogs_schema_logs_inner(QString json);
    ~OAITeam_integrationLogs_schema_logs_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdminAppId() const;
    void setAdminAppId(const QString &admin_app_id);
    bool is_admin_app_id_Set() const;
    bool is_admin_app_id_Valid() const;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    QString getAppType() const;
    void setAppType(const QString &app_type);
    bool is_app_type_Set() const;
    bool is_app_type_Valid() const;

    QString getChangeType() const;
    void setChangeType(const QString &change_type);
    bool is_change_type_Set() const;
    bool is_change_type_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getDate() const;
    void setDate(const QString &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getServiceId() const;
    void setServiceId(const QString &service_id);
    bool is_service_id_Set() const;
    bool is_service_id_Valid() const;

    QString getServiceType() const;
    void setServiceType(const QString &service_type);
    bool is_service_type_Set() const;
    bool is_service_type_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_admin_app_id;
    bool m_admin_app_id_isSet;
    bool m_admin_app_id_isValid;

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    QString m_app_type;
    bool m_app_type_isSet;
    bool m_app_type_isValid;

    QString m_change_type;
    bool m_change_type_isSet;
    bool m_change_type_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_service_id;
    bool m_service_id_isSet;
    bool m_service_id_isValid;

    QString m_service_type;
    bool m_service_type_isSet;
    bool m_service_type_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITeam_integrationLogs_schema_logs_inner)

#endif // OAITeam_integrationLogs_schema_logs_inner_H
