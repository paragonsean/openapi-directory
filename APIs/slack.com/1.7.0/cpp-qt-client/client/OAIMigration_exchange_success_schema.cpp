/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigration_exchange_success_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigration_exchange_success_schema::OAIMigration_exchange_success_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigration_exchange_success_schema::OAIMigration_exchange_success_schema() {
    this->initializeModel();
}

OAIMigration_exchange_success_schema::~OAIMigration_exchange_success_schema() {}

void OAIMigration_exchange_success_schema::initializeModel() {

    m_enterprise_id_isSet = false;
    m_enterprise_id_isValid = false;

    m_invalid_user_ids_isSet = false;
    m_invalid_user_ids_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_user_id_map_isSet = false;
    m_user_id_map_isValid = false;
}

void OAIMigration_exchange_success_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigration_exchange_success_schema::fromJsonObject(QJsonObject json) {

    m_enterprise_id_isValid = ::OpenAPI::fromJsonValue(m_enterprise_id, json[QString("enterprise_id")]);
    m_enterprise_id_isSet = !json[QString("enterprise_id")].isNull() && m_enterprise_id_isValid;

    m_invalid_user_ids_isValid = ::OpenAPI::fromJsonValue(m_invalid_user_ids, json[QString("invalid_user_ids")]);
    m_invalid_user_ids_isSet = !json[QString("invalid_user_ids")].isNull() && m_invalid_user_ids_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("team_id")]);
    m_team_id_isSet = !json[QString("team_id")].isNull() && m_team_id_isValid;

    m_user_id_map_isValid = ::OpenAPI::fromJsonValue(m_user_id_map, json[QString("user_id_map")]);
    m_user_id_map_isSet = !json[QString("user_id_map")].isNull() && m_user_id_map_isValid;
}

QString OAIMigration_exchange_success_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigration_exchange_success_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_enterprise_id_isSet) {
        obj.insert(QString("enterprise_id"), ::OpenAPI::toJsonValue(m_enterprise_id));
    }
    if (m_invalid_user_ids.size() > 0) {
        obj.insert(QString("invalid_user_ids"), ::OpenAPI::toJsonValue(m_invalid_user_ids));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("team_id"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_user_id_map.size() > 0) {
        obj.insert(QString("user_id_map"), ::OpenAPI::toJsonValue(m_user_id_map));
    }
    return obj;
}

QString OAIMigration_exchange_success_schema::getEnterpriseId() const {
    return m_enterprise_id;
}
void OAIMigration_exchange_success_schema::setEnterpriseId(const QString &enterprise_id) {
    m_enterprise_id = enterprise_id;
    m_enterprise_id_isSet = true;
}

bool OAIMigration_exchange_success_schema::is_enterprise_id_Set() const{
    return m_enterprise_id_isSet;
}

bool OAIMigration_exchange_success_schema::is_enterprise_id_Valid() const{
    return m_enterprise_id_isValid;
}

QList<QString> OAIMigration_exchange_success_schema::getInvalidUserIds() const {
    return m_invalid_user_ids;
}
void OAIMigration_exchange_success_schema::setInvalidUserIds(const QList<QString> &invalid_user_ids) {
    m_invalid_user_ids = invalid_user_ids;
    m_invalid_user_ids_isSet = true;
}

bool OAIMigration_exchange_success_schema::is_invalid_user_ids_Set() const{
    return m_invalid_user_ids_isSet;
}

bool OAIMigration_exchange_success_schema::is_invalid_user_ids_Valid() const{
    return m_invalid_user_ids_isValid;
}

bool OAIMigration_exchange_success_schema::isOk() const {
    return m_ok;
}
void OAIMigration_exchange_success_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIMigration_exchange_success_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIMigration_exchange_success_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

QString OAIMigration_exchange_success_schema::getTeamId() const {
    return m_team_id;
}
void OAIMigration_exchange_success_schema::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIMigration_exchange_success_schema::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIMigration_exchange_success_schema::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QMap<QString, QJsonValue> OAIMigration_exchange_success_schema::getUserIdMap() const {
    return m_user_id_map;
}
void OAIMigration_exchange_success_schema::setUserIdMap(const QMap<QString, QJsonValue> &user_id_map) {
    m_user_id_map = user_id_map;
    m_user_id_map_isSet = true;
}

bool OAIMigration_exchange_success_schema::is_user_id_map_Set() const{
    return m_user_id_map_isSet;
}

bool OAIMigration_exchange_success_schema::is_user_id_map_Valid() const{
    return m_user_id_map_isValid;
}

bool OAIMigration_exchange_success_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enterprise_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigration_exchange_success_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enterprise_id_isValid && m_ok_isValid && m_team_id_isValid && true;
}

} // namespace OpenAPI
