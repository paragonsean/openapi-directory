/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation_object_display_counts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation_object_display_counts::OAIConversation_object_display_counts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation_object_display_counts::OAIConversation_object_display_counts() {
    this->initializeModel();
}

OAIConversation_object_display_counts::~OAIConversation_object_display_counts() {}

void OAIConversation_object_display_counts::initializeModel() {

    m_display_counts_isSet = false;
    m_display_counts_isValid = false;

    m_guest_counts_isSet = false;
    m_guest_counts_isValid = false;
}

void OAIConversation_object_display_counts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation_object_display_counts::fromJsonObject(QJsonObject json) {

    m_display_counts_isValid = ::OpenAPI::fromJsonValue(m_display_counts, json[QString("display_counts")]);
    m_display_counts_isSet = !json[QString("display_counts")].isNull() && m_display_counts_isValid;

    m_guest_counts_isValid = ::OpenAPI::fromJsonValue(m_guest_counts, json[QString("guest_counts")]);
    m_guest_counts_isSet = !json[QString("guest_counts")].isNull() && m_guest_counts_isValid;
}

QString OAIConversation_object_display_counts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation_object_display_counts::asJsonObject() const {
    QJsonObject obj;
    if (m_display_counts_isSet) {
        obj.insert(QString("display_counts"), ::OpenAPI::toJsonValue(m_display_counts));
    }
    if (m_guest_counts_isSet) {
        obj.insert(QString("guest_counts"), ::OpenAPI::toJsonValue(m_guest_counts));
    }
    return obj;
}

qint32 OAIConversation_object_display_counts::getDisplayCounts() const {
    return m_display_counts;
}
void OAIConversation_object_display_counts::setDisplayCounts(const qint32 &display_counts) {
    m_display_counts = display_counts;
    m_display_counts_isSet = true;
}

bool OAIConversation_object_display_counts::is_display_counts_Set() const{
    return m_display_counts_isSet;
}

bool OAIConversation_object_display_counts::is_display_counts_Valid() const{
    return m_display_counts_isValid;
}

qint32 OAIConversation_object_display_counts::getGuestCounts() const {
    return m_guest_counts;
}
void OAIConversation_object_display_counts::setGuestCounts(const qint32 &guest_counts) {
    m_guest_counts = guest_counts;
    m_guest_counts_isSet = true;
}

bool OAIConversation_object_display_counts::is_guest_counts_Set() const{
    return m_guest_counts_isSet;
}

bool OAIConversation_object_display_counts::is_guest_counts_Valid() const{
    return m_guest_counts_isValid;
}

bool OAIConversation_object_display_counts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_counts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_counts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation_object_display_counts::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_counts_isValid && m_guest_counts_isValid && true;
}

} // namespace OpenAPI
