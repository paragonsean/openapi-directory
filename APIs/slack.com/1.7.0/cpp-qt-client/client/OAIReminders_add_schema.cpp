/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReminders_add_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReminders_add_schema::OAIReminders_add_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReminders_add_schema::OAIReminders_add_schema() {
    this->initializeModel();
}

OAIReminders_add_schema::~OAIReminders_add_schema() {}

void OAIReminders_add_schema::initializeModel() {

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_reminder_isSet = false;
    m_reminder_isValid = false;
}

void OAIReminders_add_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReminders_add_schema::fromJsonObject(QJsonObject json) {

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_reminder_isValid = ::OpenAPI::fromJsonValue(m_reminder, json[QString("reminder")]);
    m_reminder_isSet = !json[QString("reminder")].isNull() && m_reminder_isValid;
}

QString OAIReminders_add_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReminders_add_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_reminder.isSet()) {
        obj.insert(QString("reminder"), ::OpenAPI::toJsonValue(m_reminder));
    }
    return obj;
}

bool OAIReminders_add_schema::isOk() const {
    return m_ok;
}
void OAIReminders_add_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIReminders_add_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIReminders_add_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

OAIObjs_reminder OAIReminders_add_schema::getReminder() const {
    return m_reminder;
}
void OAIReminders_add_schema::setReminder(const OAIObjs_reminder &reminder) {
    m_reminder = reminder;
    m_reminder_isSet = true;
}

bool OAIReminders_add_schema::is_reminder_Set() const{
    return m_reminder_isSet;
}

bool OAIReminders_add_schema::is_reminder_Valid() const{
    return m_reminder_isValid;
}

bool OAIReminders_add_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reminder.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReminders_add_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ok_isValid && m_reminder_isValid && true;
}

} // namespace OpenAPI
