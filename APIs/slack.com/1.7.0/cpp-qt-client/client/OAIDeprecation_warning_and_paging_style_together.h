/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeprecation_warning_and_paging_style_together.h
 *
 * 
 */

#ifndef OAIDeprecation_warning_and_paging_style_together_H
#define OAIDeprecation_warning_and_paging_style_together_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDeprecation_warning_and_paging_style_together : public OAIObject {
public:
    OAIDeprecation_warning_and_paging_style_together();
    OAIDeprecation_warning_and_paging_style_together(QString json);
    ~OAIDeprecation_warning_and_paging_style_together() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getMessages() const;
    void setMessages(const QList<QString> &messages);
    bool is_messages_Set() const;
    bool is_messages_Valid() const;

    QString getNextCursor() const;
    void setNextCursor(const QString &next_cursor);
    bool is_next_cursor_Set() const;
    bool is_next_cursor_Valid() const;

    QList<QString> getWarnings() const;
    void setWarnings(const QList<QString> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_messages;
    bool m_messages_isSet;
    bool m_messages_isValid;

    QString m_next_cursor;
    bool m_next_cursor_isSet;
    bool m_next_cursor_isValid;

    QList<QString> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeprecation_warning_and_paging_style_together)

#endif // OAIDeprecation_warning_and_paging_style_together_H
