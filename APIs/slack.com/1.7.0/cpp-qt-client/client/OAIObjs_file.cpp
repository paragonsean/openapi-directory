/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_file.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_file::OAIObjs_file(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_file::OAIObjs_file() {
    this->initializeModel();
}

OAIObjs_file::~OAIObjs_file() {}

void OAIObjs_file::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_comments_count_isSet = false;
    m_comments_count_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_date_delete_isSet = false;
    m_date_delete_isValid = false;

    m_display_as_bot_isSet = false;
    m_display_as_bot_isValid = false;

    m_editable_isSet = false;
    m_editable_isValid = false;

    m_editor_isSet = false;
    m_editor_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_external_type_isSet = false;
    m_external_type_isValid = false;

    m_external_url_isSet = false;
    m_external_url_isValid = false;

    m_filetype_isSet = false;
    m_filetype_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_has_rich_preview_isSet = false;
    m_has_rich_preview_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_exif_rotation_isSet = false;
    m_image_exif_rotation_isValid = false;

    m_ims_isSet = false;
    m_ims_isValid = false;

    m_is_external_isSet = false;
    m_is_external_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_is_starred_isSet = false;
    m_is_starred_isValid = false;

    m_is_tombstoned_isSet = false;
    m_is_tombstoned_isValid = false;

    m_last_editor_isSet = false;
    m_last_editor_isValid = false;

    m_mimetype_isSet = false;
    m_mimetype_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_non_owner_editable_isSet = false;
    m_non_owner_editable_isValid = false;

    m_num_stars_isSet = false;
    m_num_stars_isValid = false;

    m_original_h_isSet = false;
    m_original_h_isValid = false;

    m_original_w_isSet = false;
    m_original_w_isValid = false;

    m_permalink_isSet = false;
    m_permalink_isValid = false;

    m_permalink_public_isSet = false;
    m_permalink_public_isValid = false;

    m_pinned_info_isSet = false;
    m_pinned_info_isValid = false;

    m_pinned_to_isSet = false;
    m_pinned_to_isValid = false;

    m_pretty_type_isSet = false;
    m_pretty_type_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_public_url_shared_isSet = false;
    m_public_url_shared_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_source_team_isSet = false;
    m_source_team_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_thumb_1024_isSet = false;
    m_thumb_1024_isValid = false;

    m_thumb_1024_h_isSet = false;
    m_thumb_1024_h_isValid = false;

    m_thumb_1024_w_isSet = false;
    m_thumb_1024_w_isValid = false;

    m_thumb_160_isSet = false;
    m_thumb_160_isValid = false;

    m_thumb_360_isSet = false;
    m_thumb_360_isValid = false;

    m_thumb_360_h_isSet = false;
    m_thumb_360_h_isValid = false;

    m_thumb_360_w_isSet = false;
    m_thumb_360_w_isValid = false;

    m_thumb_480_isSet = false;
    m_thumb_480_isValid = false;

    m_thumb_480_h_isSet = false;
    m_thumb_480_h_isValid = false;

    m_thumb_480_w_isSet = false;
    m_thumb_480_w_isValid = false;

    m_thumb_64_isSet = false;
    m_thumb_64_isValid = false;

    m_thumb_720_isSet = false;
    m_thumb_720_isValid = false;

    m_thumb_720_h_isSet = false;
    m_thumb_720_h_isValid = false;

    m_thumb_720_w_isSet = false;
    m_thumb_720_w_isValid = false;

    m_thumb_80_isSet = false;
    m_thumb_80_isValid = false;

    m_thumb_800_isSet = false;
    m_thumb_800_isValid = false;

    m_thumb_800_h_isSet = false;
    m_thumb_800_h_isValid = false;

    m_thumb_800_w_isSet = false;
    m_thumb_800_w_isValid = false;

    m_thumb_960_isSet = false;
    m_thumb_960_isValid = false;

    m_thumb_960_h_isSet = false;
    m_thumb_960_h_isValid = false;

    m_thumb_960_w_isSet = false;
    m_thumb_960_w_isValid = false;

    m_thumb_tiny_isSet = false;
    m_thumb_tiny_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_private_isSet = false;
    m_url_private_isValid = false;

    m_url_private_download_isSet = false;
    m_url_private_download_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_team_isSet = false;
    m_user_team_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIObjs_file::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_file::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_comments_count_isValid = ::OpenAPI::fromJsonValue(m_comments_count, json[QString("comments_count")]);
    m_comments_count_isSet = !json[QString("comments_count")].isNull() && m_comments_count_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_date_delete_isValid = ::OpenAPI::fromJsonValue(m_date_delete, json[QString("date_delete")]);
    m_date_delete_isSet = !json[QString("date_delete")].isNull() && m_date_delete_isValid;

    m_display_as_bot_isValid = ::OpenAPI::fromJsonValue(m_display_as_bot, json[QString("display_as_bot")]);
    m_display_as_bot_isSet = !json[QString("display_as_bot")].isNull() && m_display_as_bot_isValid;

    m_editable_isValid = ::OpenAPI::fromJsonValue(m_editable, json[QString("editable")]);
    m_editable_isSet = !json[QString("editable")].isNull() && m_editable_isValid;

    m_editor_isValid = ::OpenAPI::fromJsonValue(m_editor, json[QString("editor")]);
    m_editor_isSet = !json[QString("editor")].isNull() && m_editor_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_external_type_isValid = ::OpenAPI::fromJsonValue(m_external_type, json[QString("external_type")]);
    m_external_type_isSet = !json[QString("external_type")].isNull() && m_external_type_isValid;

    m_external_url_isValid = ::OpenAPI::fromJsonValue(m_external_url, json[QString("external_url")]);
    m_external_url_isSet = !json[QString("external_url")].isNull() && m_external_url_isValid;

    m_filetype_isValid = ::OpenAPI::fromJsonValue(m_filetype, json[QString("filetype")]);
    m_filetype_isSet = !json[QString("filetype")].isNull() && m_filetype_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_has_rich_preview_isValid = ::OpenAPI::fromJsonValue(m_has_rich_preview, json[QString("has_rich_preview")]);
    m_has_rich_preview_isSet = !json[QString("has_rich_preview")].isNull() && m_has_rich_preview_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_exif_rotation_isValid = ::OpenAPI::fromJsonValue(m_image_exif_rotation, json[QString("image_exif_rotation")]);
    m_image_exif_rotation_isSet = !json[QString("image_exif_rotation")].isNull() && m_image_exif_rotation_isValid;

    m_ims_isValid = ::OpenAPI::fromJsonValue(m_ims, json[QString("ims")]);
    m_ims_isSet = !json[QString("ims")].isNull() && m_ims_isValid;

    m_is_external_isValid = ::OpenAPI::fromJsonValue(m_is_external, json[QString("is_external")]);
    m_is_external_isSet = !json[QString("is_external")].isNull() && m_is_external_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_is_starred_isValid = ::OpenAPI::fromJsonValue(m_is_starred, json[QString("is_starred")]);
    m_is_starred_isSet = !json[QString("is_starred")].isNull() && m_is_starred_isValid;

    m_is_tombstoned_isValid = ::OpenAPI::fromJsonValue(m_is_tombstoned, json[QString("is_tombstoned")]);
    m_is_tombstoned_isSet = !json[QString("is_tombstoned")].isNull() && m_is_tombstoned_isValid;

    m_last_editor_isValid = ::OpenAPI::fromJsonValue(m_last_editor, json[QString("last_editor")]);
    m_last_editor_isSet = !json[QString("last_editor")].isNull() && m_last_editor_isValid;

    m_mimetype_isValid = ::OpenAPI::fromJsonValue(m_mimetype, json[QString("mimetype")]);
    m_mimetype_isSet = !json[QString("mimetype")].isNull() && m_mimetype_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_non_owner_editable_isValid = ::OpenAPI::fromJsonValue(m_non_owner_editable, json[QString("non_owner_editable")]);
    m_non_owner_editable_isSet = !json[QString("non_owner_editable")].isNull() && m_non_owner_editable_isValid;

    m_num_stars_isValid = ::OpenAPI::fromJsonValue(m_num_stars, json[QString("num_stars")]);
    m_num_stars_isSet = !json[QString("num_stars")].isNull() && m_num_stars_isValid;

    m_original_h_isValid = ::OpenAPI::fromJsonValue(m_original_h, json[QString("original_h")]);
    m_original_h_isSet = !json[QString("original_h")].isNull() && m_original_h_isValid;

    m_original_w_isValid = ::OpenAPI::fromJsonValue(m_original_w, json[QString("original_w")]);
    m_original_w_isSet = !json[QString("original_w")].isNull() && m_original_w_isValid;

    m_permalink_isValid = ::OpenAPI::fromJsonValue(m_permalink, json[QString("permalink")]);
    m_permalink_isSet = !json[QString("permalink")].isNull() && m_permalink_isValid;

    m_permalink_public_isValid = ::OpenAPI::fromJsonValue(m_permalink_public, json[QString("permalink_public")]);
    m_permalink_public_isSet = !json[QString("permalink_public")].isNull() && m_permalink_public_isValid;

    m_pinned_info_isValid = ::OpenAPI::fromJsonValue(m_pinned_info, json[QString("pinned_info")]);
    m_pinned_info_isSet = !json[QString("pinned_info")].isNull() && m_pinned_info_isValid;

    m_pinned_to_isValid = ::OpenAPI::fromJsonValue(m_pinned_to, json[QString("pinned_to")]);
    m_pinned_to_isSet = !json[QString("pinned_to")].isNull() && m_pinned_to_isValid;

    m_pretty_type_isValid = ::OpenAPI::fromJsonValue(m_pretty_type, json[QString("pretty_type")]);
    m_pretty_type_isSet = !json[QString("pretty_type")].isNull() && m_pretty_type_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_public_url_shared_isValid = ::OpenAPI::fromJsonValue(m_public_url_shared, json[QString("public_url_shared")]);
    m_public_url_shared_isSet = !json[QString("public_url_shared")].isNull() && m_public_url_shared_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_source_team_isValid = ::OpenAPI::fromJsonValue(m_source_team, json[QString("source_team")]);
    m_source_team_isSet = !json[QString("source_team")].isNull() && m_source_team_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_thumb_1024_isValid = ::OpenAPI::fromJsonValue(m_thumb_1024, json[QString("thumb_1024")]);
    m_thumb_1024_isSet = !json[QString("thumb_1024")].isNull() && m_thumb_1024_isValid;

    m_thumb_1024_h_isValid = ::OpenAPI::fromJsonValue(m_thumb_1024_h, json[QString("thumb_1024_h")]);
    m_thumb_1024_h_isSet = !json[QString("thumb_1024_h")].isNull() && m_thumb_1024_h_isValid;

    m_thumb_1024_w_isValid = ::OpenAPI::fromJsonValue(m_thumb_1024_w, json[QString("thumb_1024_w")]);
    m_thumb_1024_w_isSet = !json[QString("thumb_1024_w")].isNull() && m_thumb_1024_w_isValid;

    m_thumb_160_isValid = ::OpenAPI::fromJsonValue(m_thumb_160, json[QString("thumb_160")]);
    m_thumb_160_isSet = !json[QString("thumb_160")].isNull() && m_thumb_160_isValid;

    m_thumb_360_isValid = ::OpenAPI::fromJsonValue(m_thumb_360, json[QString("thumb_360")]);
    m_thumb_360_isSet = !json[QString("thumb_360")].isNull() && m_thumb_360_isValid;

    m_thumb_360_h_isValid = ::OpenAPI::fromJsonValue(m_thumb_360_h, json[QString("thumb_360_h")]);
    m_thumb_360_h_isSet = !json[QString("thumb_360_h")].isNull() && m_thumb_360_h_isValid;

    m_thumb_360_w_isValid = ::OpenAPI::fromJsonValue(m_thumb_360_w, json[QString("thumb_360_w")]);
    m_thumb_360_w_isSet = !json[QString("thumb_360_w")].isNull() && m_thumb_360_w_isValid;

    m_thumb_480_isValid = ::OpenAPI::fromJsonValue(m_thumb_480, json[QString("thumb_480")]);
    m_thumb_480_isSet = !json[QString("thumb_480")].isNull() && m_thumb_480_isValid;

    m_thumb_480_h_isValid = ::OpenAPI::fromJsonValue(m_thumb_480_h, json[QString("thumb_480_h")]);
    m_thumb_480_h_isSet = !json[QString("thumb_480_h")].isNull() && m_thumb_480_h_isValid;

    m_thumb_480_w_isValid = ::OpenAPI::fromJsonValue(m_thumb_480_w, json[QString("thumb_480_w")]);
    m_thumb_480_w_isSet = !json[QString("thumb_480_w")].isNull() && m_thumb_480_w_isValid;

    m_thumb_64_isValid = ::OpenAPI::fromJsonValue(m_thumb_64, json[QString("thumb_64")]);
    m_thumb_64_isSet = !json[QString("thumb_64")].isNull() && m_thumb_64_isValid;

    m_thumb_720_isValid = ::OpenAPI::fromJsonValue(m_thumb_720, json[QString("thumb_720")]);
    m_thumb_720_isSet = !json[QString("thumb_720")].isNull() && m_thumb_720_isValid;

    m_thumb_720_h_isValid = ::OpenAPI::fromJsonValue(m_thumb_720_h, json[QString("thumb_720_h")]);
    m_thumb_720_h_isSet = !json[QString("thumb_720_h")].isNull() && m_thumb_720_h_isValid;

    m_thumb_720_w_isValid = ::OpenAPI::fromJsonValue(m_thumb_720_w, json[QString("thumb_720_w")]);
    m_thumb_720_w_isSet = !json[QString("thumb_720_w")].isNull() && m_thumb_720_w_isValid;

    m_thumb_80_isValid = ::OpenAPI::fromJsonValue(m_thumb_80, json[QString("thumb_80")]);
    m_thumb_80_isSet = !json[QString("thumb_80")].isNull() && m_thumb_80_isValid;

    m_thumb_800_isValid = ::OpenAPI::fromJsonValue(m_thumb_800, json[QString("thumb_800")]);
    m_thumb_800_isSet = !json[QString("thumb_800")].isNull() && m_thumb_800_isValid;

    m_thumb_800_h_isValid = ::OpenAPI::fromJsonValue(m_thumb_800_h, json[QString("thumb_800_h")]);
    m_thumb_800_h_isSet = !json[QString("thumb_800_h")].isNull() && m_thumb_800_h_isValid;

    m_thumb_800_w_isValid = ::OpenAPI::fromJsonValue(m_thumb_800_w, json[QString("thumb_800_w")]);
    m_thumb_800_w_isSet = !json[QString("thumb_800_w")].isNull() && m_thumb_800_w_isValid;

    m_thumb_960_isValid = ::OpenAPI::fromJsonValue(m_thumb_960, json[QString("thumb_960")]);
    m_thumb_960_isSet = !json[QString("thumb_960")].isNull() && m_thumb_960_isValid;

    m_thumb_960_h_isValid = ::OpenAPI::fromJsonValue(m_thumb_960_h, json[QString("thumb_960_h")]);
    m_thumb_960_h_isSet = !json[QString("thumb_960_h")].isNull() && m_thumb_960_h_isValid;

    m_thumb_960_w_isValid = ::OpenAPI::fromJsonValue(m_thumb_960_w, json[QString("thumb_960_w")]);
    m_thumb_960_w_isSet = !json[QString("thumb_960_w")].isNull() && m_thumb_960_w_isValid;

    m_thumb_tiny_isValid = ::OpenAPI::fromJsonValue(m_thumb_tiny, json[QString("thumb_tiny")]);
    m_thumb_tiny_isSet = !json[QString("thumb_tiny")].isNull() && m_thumb_tiny_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_url_private_isValid = ::OpenAPI::fromJsonValue(m_url_private, json[QString("url_private")]);
    m_url_private_isSet = !json[QString("url_private")].isNull() && m_url_private_isValid;

    m_url_private_download_isValid = ::OpenAPI::fromJsonValue(m_url_private_download, json[QString("url_private_download")]);
    m_url_private_download_isSet = !json[QString("url_private_download")].isNull() && m_url_private_download_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_team_isValid = ::OpenAPI::fromJsonValue(m_user_team, json[QString("user_team")]);
    m_user_team_isSet = !json[QString("user_team")].isNull() && m_user_team_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIObjs_file::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_file::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_comments_count_isSet) {
        obj.insert(QString("comments_count"), ::OpenAPI::toJsonValue(m_comments_count));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_date_delete_isSet) {
        obj.insert(QString("date_delete"), ::OpenAPI::toJsonValue(m_date_delete));
    }
    if (m_display_as_bot_isSet) {
        obj.insert(QString("display_as_bot"), ::OpenAPI::toJsonValue(m_display_as_bot));
    }
    if (m_editable_isSet) {
        obj.insert(QString("editable"), ::OpenAPI::toJsonValue(m_editable));
    }
    if (m_editor_isSet) {
        obj.insert(QString("editor"), ::OpenAPI::toJsonValue(m_editor));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_external_type_isSet) {
        obj.insert(QString("external_type"), ::OpenAPI::toJsonValue(m_external_type));
    }
    if (m_external_url_isSet) {
        obj.insert(QString("external_url"), ::OpenAPI::toJsonValue(m_external_url));
    }
    if (m_filetype_isSet) {
        obj.insert(QString("filetype"), ::OpenAPI::toJsonValue(m_filetype));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_has_rich_preview_isSet) {
        obj.insert(QString("has_rich_preview"), ::OpenAPI::toJsonValue(m_has_rich_preview));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_exif_rotation_isSet) {
        obj.insert(QString("image_exif_rotation"), ::OpenAPI::toJsonValue(m_image_exif_rotation));
    }
    if (m_ims.size() > 0) {
        obj.insert(QString("ims"), ::OpenAPI::toJsonValue(m_ims));
    }
    if (m_is_external_isSet) {
        obj.insert(QString("is_external"), ::OpenAPI::toJsonValue(m_is_external));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_is_starred_isSet) {
        obj.insert(QString("is_starred"), ::OpenAPI::toJsonValue(m_is_starred));
    }
    if (m_is_tombstoned_isSet) {
        obj.insert(QString("is_tombstoned"), ::OpenAPI::toJsonValue(m_is_tombstoned));
    }
    if (m_last_editor_isSet) {
        obj.insert(QString("last_editor"), ::OpenAPI::toJsonValue(m_last_editor));
    }
    if (m_mimetype_isSet) {
        obj.insert(QString("mimetype"), ::OpenAPI::toJsonValue(m_mimetype));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_non_owner_editable_isSet) {
        obj.insert(QString("non_owner_editable"), ::OpenAPI::toJsonValue(m_non_owner_editable));
    }
    if (m_num_stars_isSet) {
        obj.insert(QString("num_stars"), ::OpenAPI::toJsonValue(m_num_stars));
    }
    if (m_original_h_isSet) {
        obj.insert(QString("original_h"), ::OpenAPI::toJsonValue(m_original_h));
    }
    if (m_original_w_isSet) {
        obj.insert(QString("original_w"), ::OpenAPI::toJsonValue(m_original_w));
    }
    if (m_permalink_isSet) {
        obj.insert(QString("permalink"), ::OpenAPI::toJsonValue(m_permalink));
    }
    if (m_permalink_public_isSet) {
        obj.insert(QString("permalink_public"), ::OpenAPI::toJsonValue(m_permalink_public));
    }
    if (m_pinned_info_isSet) {
        obj.insert(QString("pinned_info"), ::OpenAPI::toJsonValue(m_pinned_info));
    }
    if (m_pinned_to.size() > 0) {
        obj.insert(QString("pinned_to"), ::OpenAPI::toJsonValue(m_pinned_to));
    }
    if (m_pretty_type_isSet) {
        obj.insert(QString("pretty_type"), ::OpenAPI::toJsonValue(m_pretty_type));
    }
    if (m_preview_isSet) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_public_url_shared_isSet) {
        obj.insert(QString("public_url_shared"), ::OpenAPI::toJsonValue(m_public_url_shared));
    }
    if (m_reactions.size() > 0) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_shares.isSet()) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_source_team_isSet) {
        obj.insert(QString("source_team"), ::OpenAPI::toJsonValue(m_source_team));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_thumb_1024_isSet) {
        obj.insert(QString("thumb_1024"), ::OpenAPI::toJsonValue(m_thumb_1024));
    }
    if (m_thumb_1024_h_isSet) {
        obj.insert(QString("thumb_1024_h"), ::OpenAPI::toJsonValue(m_thumb_1024_h));
    }
    if (m_thumb_1024_w_isSet) {
        obj.insert(QString("thumb_1024_w"), ::OpenAPI::toJsonValue(m_thumb_1024_w));
    }
    if (m_thumb_160_isSet) {
        obj.insert(QString("thumb_160"), ::OpenAPI::toJsonValue(m_thumb_160));
    }
    if (m_thumb_360_isSet) {
        obj.insert(QString("thumb_360"), ::OpenAPI::toJsonValue(m_thumb_360));
    }
    if (m_thumb_360_h_isSet) {
        obj.insert(QString("thumb_360_h"), ::OpenAPI::toJsonValue(m_thumb_360_h));
    }
    if (m_thumb_360_w_isSet) {
        obj.insert(QString("thumb_360_w"), ::OpenAPI::toJsonValue(m_thumb_360_w));
    }
    if (m_thumb_480_isSet) {
        obj.insert(QString("thumb_480"), ::OpenAPI::toJsonValue(m_thumb_480));
    }
    if (m_thumb_480_h_isSet) {
        obj.insert(QString("thumb_480_h"), ::OpenAPI::toJsonValue(m_thumb_480_h));
    }
    if (m_thumb_480_w_isSet) {
        obj.insert(QString("thumb_480_w"), ::OpenAPI::toJsonValue(m_thumb_480_w));
    }
    if (m_thumb_64_isSet) {
        obj.insert(QString("thumb_64"), ::OpenAPI::toJsonValue(m_thumb_64));
    }
    if (m_thumb_720_isSet) {
        obj.insert(QString("thumb_720"), ::OpenAPI::toJsonValue(m_thumb_720));
    }
    if (m_thumb_720_h_isSet) {
        obj.insert(QString("thumb_720_h"), ::OpenAPI::toJsonValue(m_thumb_720_h));
    }
    if (m_thumb_720_w_isSet) {
        obj.insert(QString("thumb_720_w"), ::OpenAPI::toJsonValue(m_thumb_720_w));
    }
    if (m_thumb_80_isSet) {
        obj.insert(QString("thumb_80"), ::OpenAPI::toJsonValue(m_thumb_80));
    }
    if (m_thumb_800_isSet) {
        obj.insert(QString("thumb_800"), ::OpenAPI::toJsonValue(m_thumb_800));
    }
    if (m_thumb_800_h_isSet) {
        obj.insert(QString("thumb_800_h"), ::OpenAPI::toJsonValue(m_thumb_800_h));
    }
    if (m_thumb_800_w_isSet) {
        obj.insert(QString("thumb_800_w"), ::OpenAPI::toJsonValue(m_thumb_800_w));
    }
    if (m_thumb_960_isSet) {
        obj.insert(QString("thumb_960"), ::OpenAPI::toJsonValue(m_thumb_960));
    }
    if (m_thumb_960_h_isSet) {
        obj.insert(QString("thumb_960_h"), ::OpenAPI::toJsonValue(m_thumb_960_h));
    }
    if (m_thumb_960_w_isSet) {
        obj.insert(QString("thumb_960_w"), ::OpenAPI::toJsonValue(m_thumb_960_w));
    }
    if (m_thumb_tiny_isSet) {
        obj.insert(QString("thumb_tiny"), ::OpenAPI::toJsonValue(m_thumb_tiny));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_private_isSet) {
        obj.insert(QString("url_private"), ::OpenAPI::toJsonValue(m_url_private));
    }
    if (m_url_private_download_isSet) {
        obj.insert(QString("url_private_download"), ::OpenAPI::toJsonValue(m_url_private_download));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_team_isSet) {
        obj.insert(QString("user_team"), ::OpenAPI::toJsonValue(m_user_team));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QSet<QString> OAIObjs_file::getChannels() const {
    return m_channels;
}
void OAIObjs_file::setChannels(const QSet<QString> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIObjs_file::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIObjs_file::is_channels_Valid() const{
    return m_channels_isValid;
}

qint32 OAIObjs_file::getCommentsCount() const {
    return m_comments_count;
}
void OAIObjs_file::setCommentsCount(const qint32 &comments_count) {
    m_comments_count = comments_count;
    m_comments_count_isSet = true;
}

bool OAIObjs_file::is_comments_count_Set() const{
    return m_comments_count_isSet;
}

bool OAIObjs_file::is_comments_count_Valid() const{
    return m_comments_count_isValid;
}

qint32 OAIObjs_file::getCreated() const {
    return m_created;
}
void OAIObjs_file::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIObjs_file::is_created_Set() const{
    return m_created_isSet;
}

bool OAIObjs_file::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIObjs_file::getDateDelete() const {
    return m_date_delete;
}
void OAIObjs_file::setDateDelete(const qint32 &date_delete) {
    m_date_delete = date_delete;
    m_date_delete_isSet = true;
}

bool OAIObjs_file::is_date_delete_Set() const{
    return m_date_delete_isSet;
}

bool OAIObjs_file::is_date_delete_Valid() const{
    return m_date_delete_isValid;
}

bool OAIObjs_file::isDisplayAsBot() const {
    return m_display_as_bot;
}
void OAIObjs_file::setDisplayAsBot(const bool &display_as_bot) {
    m_display_as_bot = display_as_bot;
    m_display_as_bot_isSet = true;
}

bool OAIObjs_file::is_display_as_bot_Set() const{
    return m_display_as_bot_isSet;
}

bool OAIObjs_file::is_display_as_bot_Valid() const{
    return m_display_as_bot_isValid;
}

bool OAIObjs_file::isEditable() const {
    return m_editable;
}
void OAIObjs_file::setEditable(const bool &editable) {
    m_editable = editable;
    m_editable_isSet = true;
}

bool OAIObjs_file::is_editable_Set() const{
    return m_editable_isSet;
}

bool OAIObjs_file::is_editable_Valid() const{
    return m_editable_isValid;
}

QString OAIObjs_file::getEditor() const {
    return m_editor;
}
void OAIObjs_file::setEditor(const QString &editor) {
    m_editor = editor;
    m_editor_isSet = true;
}

bool OAIObjs_file::is_editor_Set() const{
    return m_editor_isSet;
}

bool OAIObjs_file::is_editor_Valid() const{
    return m_editor_isValid;
}

QString OAIObjs_file::getExternalId() const {
    return m_external_id;
}
void OAIObjs_file::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIObjs_file::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIObjs_file::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIObjs_file::getExternalType() const {
    return m_external_type;
}
void OAIObjs_file::setExternalType(const QString &external_type) {
    m_external_type = external_type;
    m_external_type_isSet = true;
}

bool OAIObjs_file::is_external_type_Set() const{
    return m_external_type_isSet;
}

bool OAIObjs_file::is_external_type_Valid() const{
    return m_external_type_isValid;
}

QString OAIObjs_file::getExternalUrl() const {
    return m_external_url;
}
void OAIObjs_file::setExternalUrl(const QString &external_url) {
    m_external_url = external_url;
    m_external_url_isSet = true;
}

bool OAIObjs_file::is_external_url_Set() const{
    return m_external_url_isSet;
}

bool OAIObjs_file::is_external_url_Valid() const{
    return m_external_url_isValid;
}

QString OAIObjs_file::getFiletype() const {
    return m_filetype;
}
void OAIObjs_file::setFiletype(const QString &filetype) {
    m_filetype = filetype;
    m_filetype_isSet = true;
}

bool OAIObjs_file::is_filetype_Set() const{
    return m_filetype_isSet;
}

bool OAIObjs_file::is_filetype_Valid() const{
    return m_filetype_isValid;
}

QSet<QString> OAIObjs_file::getGroups() const {
    return m_groups;
}
void OAIObjs_file::setGroups(const QSet<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIObjs_file::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIObjs_file::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAIObjs_file::isHasRichPreview() const {
    return m_has_rich_preview;
}
void OAIObjs_file::setHasRichPreview(const bool &has_rich_preview) {
    m_has_rich_preview = has_rich_preview;
    m_has_rich_preview_isSet = true;
}

bool OAIObjs_file::is_has_rich_preview_Set() const{
    return m_has_rich_preview_isSet;
}

bool OAIObjs_file::is_has_rich_preview_Valid() const{
    return m_has_rich_preview_isValid;
}

QString OAIObjs_file::getId() const {
    return m_id;
}
void OAIObjs_file::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_file::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_file::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIObjs_file::getImageExifRotation() const {
    return m_image_exif_rotation;
}
void OAIObjs_file::setImageExifRotation(const qint32 &image_exif_rotation) {
    m_image_exif_rotation = image_exif_rotation;
    m_image_exif_rotation_isSet = true;
}

bool OAIObjs_file::is_image_exif_rotation_Set() const{
    return m_image_exif_rotation_isSet;
}

bool OAIObjs_file::is_image_exif_rotation_Valid() const{
    return m_image_exif_rotation_isValid;
}

QSet<QString> OAIObjs_file::getIms() const {
    return m_ims;
}
void OAIObjs_file::setIms(const QSet<QString> &ims) {
    m_ims = ims;
    m_ims_isSet = true;
}

bool OAIObjs_file::is_ims_Set() const{
    return m_ims_isSet;
}

bool OAIObjs_file::is_ims_Valid() const{
    return m_ims_isValid;
}

bool OAIObjs_file::isIsExternal() const {
    return m_is_external;
}
void OAIObjs_file::setIsExternal(const bool &is_external) {
    m_is_external = is_external;
    m_is_external_isSet = true;
}

bool OAIObjs_file::is_is_external_Set() const{
    return m_is_external_isSet;
}

bool OAIObjs_file::is_is_external_Valid() const{
    return m_is_external_isValid;
}

bool OAIObjs_file::isIsPublic() const {
    return m_is_public;
}
void OAIObjs_file::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIObjs_file::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIObjs_file::is_is_public_Valid() const{
    return m_is_public_isValid;
}

bool OAIObjs_file::isIsStarred() const {
    return m_is_starred;
}
void OAIObjs_file::setIsStarred(const bool &is_starred) {
    m_is_starred = is_starred;
    m_is_starred_isSet = true;
}

bool OAIObjs_file::is_is_starred_Set() const{
    return m_is_starred_isSet;
}

bool OAIObjs_file::is_is_starred_Valid() const{
    return m_is_starred_isValid;
}

bool OAIObjs_file::isIsTombstoned() const {
    return m_is_tombstoned;
}
void OAIObjs_file::setIsTombstoned(const bool &is_tombstoned) {
    m_is_tombstoned = is_tombstoned;
    m_is_tombstoned_isSet = true;
}

bool OAIObjs_file::is_is_tombstoned_Set() const{
    return m_is_tombstoned_isSet;
}

bool OAIObjs_file::is_is_tombstoned_Valid() const{
    return m_is_tombstoned_isValid;
}

QString OAIObjs_file::getLastEditor() const {
    return m_last_editor;
}
void OAIObjs_file::setLastEditor(const QString &last_editor) {
    m_last_editor = last_editor;
    m_last_editor_isSet = true;
}

bool OAIObjs_file::is_last_editor_Set() const{
    return m_last_editor_isSet;
}

bool OAIObjs_file::is_last_editor_Valid() const{
    return m_last_editor_isValid;
}

QString OAIObjs_file::getMimetype() const {
    return m_mimetype;
}
void OAIObjs_file::setMimetype(const QString &mimetype) {
    m_mimetype = mimetype;
    m_mimetype_isSet = true;
}

bool OAIObjs_file::is_mimetype_Set() const{
    return m_mimetype_isSet;
}

bool OAIObjs_file::is_mimetype_Valid() const{
    return m_mimetype_isValid;
}

QString OAIObjs_file::getMode() const {
    return m_mode;
}
void OAIObjs_file::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIObjs_file::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIObjs_file::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIObjs_file::getName() const {
    return m_name;
}
void OAIObjs_file::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_file::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_file::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIObjs_file::isNonOwnerEditable() const {
    return m_non_owner_editable;
}
void OAIObjs_file::setNonOwnerEditable(const bool &non_owner_editable) {
    m_non_owner_editable = non_owner_editable;
    m_non_owner_editable_isSet = true;
}

bool OAIObjs_file::is_non_owner_editable_Set() const{
    return m_non_owner_editable_isSet;
}

bool OAIObjs_file::is_non_owner_editable_Valid() const{
    return m_non_owner_editable_isValid;
}

qint32 OAIObjs_file::getNumStars() const {
    return m_num_stars;
}
void OAIObjs_file::setNumStars(const qint32 &num_stars) {
    m_num_stars = num_stars;
    m_num_stars_isSet = true;
}

bool OAIObjs_file::is_num_stars_Set() const{
    return m_num_stars_isSet;
}

bool OAIObjs_file::is_num_stars_Valid() const{
    return m_num_stars_isValid;
}

qint32 OAIObjs_file::getOriginalH() const {
    return m_original_h;
}
void OAIObjs_file::setOriginalH(const qint32 &original_h) {
    m_original_h = original_h;
    m_original_h_isSet = true;
}

bool OAIObjs_file::is_original_h_Set() const{
    return m_original_h_isSet;
}

bool OAIObjs_file::is_original_h_Valid() const{
    return m_original_h_isValid;
}

qint32 OAIObjs_file::getOriginalW() const {
    return m_original_w;
}
void OAIObjs_file::setOriginalW(const qint32 &original_w) {
    m_original_w = original_w;
    m_original_w_isSet = true;
}

bool OAIObjs_file::is_original_w_Set() const{
    return m_original_w_isSet;
}

bool OAIObjs_file::is_original_w_Valid() const{
    return m_original_w_isValid;
}

QString OAIObjs_file::getPermalink() const {
    return m_permalink;
}
void OAIObjs_file::setPermalink(const QString &permalink) {
    m_permalink = permalink;
    m_permalink_isSet = true;
}

bool OAIObjs_file::is_permalink_Set() const{
    return m_permalink_isSet;
}

bool OAIObjs_file::is_permalink_Valid() const{
    return m_permalink_isValid;
}

QString OAIObjs_file::getPermalinkPublic() const {
    return m_permalink_public;
}
void OAIObjs_file::setPermalinkPublic(const QString &permalink_public) {
    m_permalink_public = permalink_public;
    m_permalink_public_isSet = true;
}

bool OAIObjs_file::is_permalink_public_Set() const{
    return m_permalink_public_isSet;
}

bool OAIObjs_file::is_permalink_public_Valid() const{
    return m_permalink_public_isValid;
}

OAIObject OAIObjs_file::getPinnedInfo() const {
    return m_pinned_info;
}
void OAIObjs_file::setPinnedInfo(const OAIObject &pinned_info) {
    m_pinned_info = pinned_info;
    m_pinned_info_isSet = true;
}

bool OAIObjs_file::is_pinned_info_Set() const{
    return m_pinned_info_isSet;
}

bool OAIObjs_file::is_pinned_info_Valid() const{
    return m_pinned_info_isValid;
}

QList<QString> OAIObjs_file::getPinnedTo() const {
    return m_pinned_to;
}
void OAIObjs_file::setPinnedTo(const QList<QString> &pinned_to) {
    m_pinned_to = pinned_to;
    m_pinned_to_isSet = true;
}

bool OAIObjs_file::is_pinned_to_Set() const{
    return m_pinned_to_isSet;
}

bool OAIObjs_file::is_pinned_to_Valid() const{
    return m_pinned_to_isValid;
}

QString OAIObjs_file::getPrettyType() const {
    return m_pretty_type;
}
void OAIObjs_file::setPrettyType(const QString &pretty_type) {
    m_pretty_type = pretty_type;
    m_pretty_type_isSet = true;
}

bool OAIObjs_file::is_pretty_type_Set() const{
    return m_pretty_type_isSet;
}

bool OAIObjs_file::is_pretty_type_Valid() const{
    return m_pretty_type_isValid;
}

QString OAIObjs_file::getPreview() const {
    return m_preview;
}
void OAIObjs_file::setPreview(const QString &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIObjs_file::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIObjs_file::is_preview_Valid() const{
    return m_preview_isValid;
}

bool OAIObjs_file::isPublicUrlShared() const {
    return m_public_url_shared;
}
void OAIObjs_file::setPublicUrlShared(const bool &public_url_shared) {
    m_public_url_shared = public_url_shared;
    m_public_url_shared_isSet = true;
}

bool OAIObjs_file::is_public_url_shared_Set() const{
    return m_public_url_shared_isSet;
}

bool OAIObjs_file::is_public_url_shared_Valid() const{
    return m_public_url_shared_isValid;
}

QList<OAIObjs_reaction> OAIObjs_file::getReactions() const {
    return m_reactions;
}
void OAIObjs_file::setReactions(const QList<OAIObjs_reaction> &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIObjs_file::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIObjs_file::is_reactions_Valid() const{
    return m_reactions_isValid;
}

OAIObjs_file_shares OAIObjs_file::getShares() const {
    return m_shares;
}
void OAIObjs_file::setShares(const OAIObjs_file_shares &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAIObjs_file::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAIObjs_file::is_shares_Valid() const{
    return m_shares_isValid;
}

qint32 OAIObjs_file::getSize() const {
    return m_size;
}
void OAIObjs_file::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIObjs_file::is_size_Set() const{
    return m_size_isSet;
}

bool OAIObjs_file::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIObjs_file::getSourceTeam() const {
    return m_source_team;
}
void OAIObjs_file::setSourceTeam(const QString &source_team) {
    m_source_team = source_team;
    m_source_team_isSet = true;
}

bool OAIObjs_file::is_source_team_Set() const{
    return m_source_team_isSet;
}

bool OAIObjs_file::is_source_team_Valid() const{
    return m_source_team_isValid;
}

QString OAIObjs_file::getState() const {
    return m_state;
}
void OAIObjs_file::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIObjs_file::is_state_Set() const{
    return m_state_isSet;
}

bool OAIObjs_file::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIObjs_file::getThumb1024() const {
    return m_thumb_1024;
}
void OAIObjs_file::setThumb1024(const QString &thumb_1024) {
    m_thumb_1024 = thumb_1024;
    m_thumb_1024_isSet = true;
}

bool OAIObjs_file::is_thumb_1024_Set() const{
    return m_thumb_1024_isSet;
}

bool OAIObjs_file::is_thumb_1024_Valid() const{
    return m_thumb_1024_isValid;
}

qint32 OAIObjs_file::getThumb1024H() const {
    return m_thumb_1024_h;
}
void OAIObjs_file::setThumb1024H(const qint32 &thumb_1024_h) {
    m_thumb_1024_h = thumb_1024_h;
    m_thumb_1024_h_isSet = true;
}

bool OAIObjs_file::is_thumb_1024_h_Set() const{
    return m_thumb_1024_h_isSet;
}

bool OAIObjs_file::is_thumb_1024_h_Valid() const{
    return m_thumb_1024_h_isValid;
}

qint32 OAIObjs_file::getThumb1024W() const {
    return m_thumb_1024_w;
}
void OAIObjs_file::setThumb1024W(const qint32 &thumb_1024_w) {
    m_thumb_1024_w = thumb_1024_w;
    m_thumb_1024_w_isSet = true;
}

bool OAIObjs_file::is_thumb_1024_w_Set() const{
    return m_thumb_1024_w_isSet;
}

bool OAIObjs_file::is_thumb_1024_w_Valid() const{
    return m_thumb_1024_w_isValid;
}

QString OAIObjs_file::getThumb160() const {
    return m_thumb_160;
}
void OAIObjs_file::setThumb160(const QString &thumb_160) {
    m_thumb_160 = thumb_160;
    m_thumb_160_isSet = true;
}

bool OAIObjs_file::is_thumb_160_Set() const{
    return m_thumb_160_isSet;
}

bool OAIObjs_file::is_thumb_160_Valid() const{
    return m_thumb_160_isValid;
}

QString OAIObjs_file::getThumb360() const {
    return m_thumb_360;
}
void OAIObjs_file::setThumb360(const QString &thumb_360) {
    m_thumb_360 = thumb_360;
    m_thumb_360_isSet = true;
}

bool OAIObjs_file::is_thumb_360_Set() const{
    return m_thumb_360_isSet;
}

bool OAIObjs_file::is_thumb_360_Valid() const{
    return m_thumb_360_isValid;
}

qint32 OAIObjs_file::getThumb360H() const {
    return m_thumb_360_h;
}
void OAIObjs_file::setThumb360H(const qint32 &thumb_360_h) {
    m_thumb_360_h = thumb_360_h;
    m_thumb_360_h_isSet = true;
}

bool OAIObjs_file::is_thumb_360_h_Set() const{
    return m_thumb_360_h_isSet;
}

bool OAIObjs_file::is_thumb_360_h_Valid() const{
    return m_thumb_360_h_isValid;
}

qint32 OAIObjs_file::getThumb360W() const {
    return m_thumb_360_w;
}
void OAIObjs_file::setThumb360W(const qint32 &thumb_360_w) {
    m_thumb_360_w = thumb_360_w;
    m_thumb_360_w_isSet = true;
}

bool OAIObjs_file::is_thumb_360_w_Set() const{
    return m_thumb_360_w_isSet;
}

bool OAIObjs_file::is_thumb_360_w_Valid() const{
    return m_thumb_360_w_isValid;
}

QString OAIObjs_file::getThumb480() const {
    return m_thumb_480;
}
void OAIObjs_file::setThumb480(const QString &thumb_480) {
    m_thumb_480 = thumb_480;
    m_thumb_480_isSet = true;
}

bool OAIObjs_file::is_thumb_480_Set() const{
    return m_thumb_480_isSet;
}

bool OAIObjs_file::is_thumb_480_Valid() const{
    return m_thumb_480_isValid;
}

qint32 OAIObjs_file::getThumb480H() const {
    return m_thumb_480_h;
}
void OAIObjs_file::setThumb480H(const qint32 &thumb_480_h) {
    m_thumb_480_h = thumb_480_h;
    m_thumb_480_h_isSet = true;
}

bool OAIObjs_file::is_thumb_480_h_Set() const{
    return m_thumb_480_h_isSet;
}

bool OAIObjs_file::is_thumb_480_h_Valid() const{
    return m_thumb_480_h_isValid;
}

qint32 OAIObjs_file::getThumb480W() const {
    return m_thumb_480_w;
}
void OAIObjs_file::setThumb480W(const qint32 &thumb_480_w) {
    m_thumb_480_w = thumb_480_w;
    m_thumb_480_w_isSet = true;
}

bool OAIObjs_file::is_thumb_480_w_Set() const{
    return m_thumb_480_w_isSet;
}

bool OAIObjs_file::is_thumb_480_w_Valid() const{
    return m_thumb_480_w_isValid;
}

QString OAIObjs_file::getThumb64() const {
    return m_thumb_64;
}
void OAIObjs_file::setThumb64(const QString &thumb_64) {
    m_thumb_64 = thumb_64;
    m_thumb_64_isSet = true;
}

bool OAIObjs_file::is_thumb_64_Set() const{
    return m_thumb_64_isSet;
}

bool OAIObjs_file::is_thumb_64_Valid() const{
    return m_thumb_64_isValid;
}

QString OAIObjs_file::getThumb720() const {
    return m_thumb_720;
}
void OAIObjs_file::setThumb720(const QString &thumb_720) {
    m_thumb_720 = thumb_720;
    m_thumb_720_isSet = true;
}

bool OAIObjs_file::is_thumb_720_Set() const{
    return m_thumb_720_isSet;
}

bool OAIObjs_file::is_thumb_720_Valid() const{
    return m_thumb_720_isValid;
}

qint32 OAIObjs_file::getThumb720H() const {
    return m_thumb_720_h;
}
void OAIObjs_file::setThumb720H(const qint32 &thumb_720_h) {
    m_thumb_720_h = thumb_720_h;
    m_thumb_720_h_isSet = true;
}

bool OAIObjs_file::is_thumb_720_h_Set() const{
    return m_thumb_720_h_isSet;
}

bool OAIObjs_file::is_thumb_720_h_Valid() const{
    return m_thumb_720_h_isValid;
}

qint32 OAIObjs_file::getThumb720W() const {
    return m_thumb_720_w;
}
void OAIObjs_file::setThumb720W(const qint32 &thumb_720_w) {
    m_thumb_720_w = thumb_720_w;
    m_thumb_720_w_isSet = true;
}

bool OAIObjs_file::is_thumb_720_w_Set() const{
    return m_thumb_720_w_isSet;
}

bool OAIObjs_file::is_thumb_720_w_Valid() const{
    return m_thumb_720_w_isValid;
}

QString OAIObjs_file::getThumb80() const {
    return m_thumb_80;
}
void OAIObjs_file::setThumb80(const QString &thumb_80) {
    m_thumb_80 = thumb_80;
    m_thumb_80_isSet = true;
}

bool OAIObjs_file::is_thumb_80_Set() const{
    return m_thumb_80_isSet;
}

bool OAIObjs_file::is_thumb_80_Valid() const{
    return m_thumb_80_isValid;
}

QString OAIObjs_file::getThumb800() const {
    return m_thumb_800;
}
void OAIObjs_file::setThumb800(const QString &thumb_800) {
    m_thumb_800 = thumb_800;
    m_thumb_800_isSet = true;
}

bool OAIObjs_file::is_thumb_800_Set() const{
    return m_thumb_800_isSet;
}

bool OAIObjs_file::is_thumb_800_Valid() const{
    return m_thumb_800_isValid;
}

qint32 OAIObjs_file::getThumb800H() const {
    return m_thumb_800_h;
}
void OAIObjs_file::setThumb800H(const qint32 &thumb_800_h) {
    m_thumb_800_h = thumb_800_h;
    m_thumb_800_h_isSet = true;
}

bool OAIObjs_file::is_thumb_800_h_Set() const{
    return m_thumb_800_h_isSet;
}

bool OAIObjs_file::is_thumb_800_h_Valid() const{
    return m_thumb_800_h_isValid;
}

qint32 OAIObjs_file::getThumb800W() const {
    return m_thumb_800_w;
}
void OAIObjs_file::setThumb800W(const qint32 &thumb_800_w) {
    m_thumb_800_w = thumb_800_w;
    m_thumb_800_w_isSet = true;
}

bool OAIObjs_file::is_thumb_800_w_Set() const{
    return m_thumb_800_w_isSet;
}

bool OAIObjs_file::is_thumb_800_w_Valid() const{
    return m_thumb_800_w_isValid;
}

QString OAIObjs_file::getThumb960() const {
    return m_thumb_960;
}
void OAIObjs_file::setThumb960(const QString &thumb_960) {
    m_thumb_960 = thumb_960;
    m_thumb_960_isSet = true;
}

bool OAIObjs_file::is_thumb_960_Set() const{
    return m_thumb_960_isSet;
}

bool OAIObjs_file::is_thumb_960_Valid() const{
    return m_thumb_960_isValid;
}

qint32 OAIObjs_file::getThumb960H() const {
    return m_thumb_960_h;
}
void OAIObjs_file::setThumb960H(const qint32 &thumb_960_h) {
    m_thumb_960_h = thumb_960_h;
    m_thumb_960_h_isSet = true;
}

bool OAIObjs_file::is_thumb_960_h_Set() const{
    return m_thumb_960_h_isSet;
}

bool OAIObjs_file::is_thumb_960_h_Valid() const{
    return m_thumb_960_h_isValid;
}

qint32 OAIObjs_file::getThumb960W() const {
    return m_thumb_960_w;
}
void OAIObjs_file::setThumb960W(const qint32 &thumb_960_w) {
    m_thumb_960_w = thumb_960_w;
    m_thumb_960_w_isSet = true;
}

bool OAIObjs_file::is_thumb_960_w_Set() const{
    return m_thumb_960_w_isSet;
}

bool OAIObjs_file::is_thumb_960_w_Valid() const{
    return m_thumb_960_w_isValid;
}

QString OAIObjs_file::getThumbTiny() const {
    return m_thumb_tiny;
}
void OAIObjs_file::setThumbTiny(const QString &thumb_tiny) {
    m_thumb_tiny = thumb_tiny;
    m_thumb_tiny_isSet = true;
}

bool OAIObjs_file::is_thumb_tiny_Set() const{
    return m_thumb_tiny_isSet;
}

bool OAIObjs_file::is_thumb_tiny_Valid() const{
    return m_thumb_tiny_isValid;
}

qint32 OAIObjs_file::getTimestamp() const {
    return m_timestamp;
}
void OAIObjs_file::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIObjs_file::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIObjs_file::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIObjs_file::getTitle() const {
    return m_title;
}
void OAIObjs_file::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIObjs_file::is_title_Set() const{
    return m_title_isSet;
}

bool OAIObjs_file::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIObjs_file::getUpdated() const {
    return m_updated;
}
void OAIObjs_file::setUpdated(const qint32 &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIObjs_file::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIObjs_file::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIObjs_file::getUrlPrivate() const {
    return m_url_private;
}
void OAIObjs_file::setUrlPrivate(const QString &url_private) {
    m_url_private = url_private;
    m_url_private_isSet = true;
}

bool OAIObjs_file::is_url_private_Set() const{
    return m_url_private_isSet;
}

bool OAIObjs_file::is_url_private_Valid() const{
    return m_url_private_isValid;
}

QString OAIObjs_file::getUrlPrivateDownload() const {
    return m_url_private_download;
}
void OAIObjs_file::setUrlPrivateDownload(const QString &url_private_download) {
    m_url_private_download = url_private_download;
    m_url_private_download_isSet = true;
}

bool OAIObjs_file::is_url_private_download_Set() const{
    return m_url_private_download_isSet;
}

bool OAIObjs_file::is_url_private_download_Valid() const{
    return m_url_private_download_isValid;
}

QString OAIObjs_file::getUser() const {
    return m_user;
}
void OAIObjs_file::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIObjs_file::is_user_Set() const{
    return m_user_isSet;
}

bool OAIObjs_file::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIObjs_file::getUserTeam() const {
    return m_user_team;
}
void OAIObjs_file::setUserTeam(const QString &user_team) {
    m_user_team = user_team;
    m_user_team_isSet = true;
}

bool OAIObjs_file::is_user_team_Set() const{
    return m_user_team_isSet;
}

bool OAIObjs_file::is_user_team_Valid() const{
    return m_user_team_isValid;
}

QString OAIObjs_file::getUsername() const {
    return m_username;
}
void OAIObjs_file::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIObjs_file::is_username_Set() const{
    return m_username_isSet;
}

bool OAIObjs_file::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIObjs_file::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_as_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_rich_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_exif_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tombstoned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_editor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mimetype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_owner_editable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_stars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permalink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permalink_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pretty_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_url_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_1024_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_1024_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_1024_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_160_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_360_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_360_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_360_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_480_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_480_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_480_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_720_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_720_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_720_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_80_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_800_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_800_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_800_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_960_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_960_h_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_960_w_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_tiny_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_private_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_file::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
