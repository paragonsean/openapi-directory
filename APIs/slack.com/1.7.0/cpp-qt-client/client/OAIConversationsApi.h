/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsApi_H
#define OAI_OAIConversationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversations_archive_error_schema.h"
#include "OAIConversations_archive_success_schema.h"
#include "OAIConversations_close_error_schema.h"
#include "OAIConversations_close_success_schema.h"
#include "OAIConversations_create_error_schema.h"
#include "OAIConversations_create_success_schema.h"
#include "OAIConversations_history_error_schema.h"
#include "OAIConversations_history_success_schema.h"
#include "OAIConversations_info_error_schema.h"
#include "OAIConversations_info_success_schema.h"
#include "OAIConversations_invite_error_schema.h"
#include "OAIConversations_invite_error_schema_1.h"
#include "OAIConversations_join_error_schema.h"
#include "OAIConversations_join_success_schema.h"
#include "OAIConversations_kick_error_schema.h"
#include "OAIConversations_kick_success_schema.h"
#include "OAIConversations_leave_error_schema.h"
#include "OAIConversations_leave_success_schema.h"
#include "OAIConversations_list_error_schema.h"
#include "OAIConversations_list_success_schema.h"
#include "OAIConversations_mark_error_schema.h"
#include "OAIConversations_mark_success_schema.h"
#include "OAIConversations_members_error_schema.h"
#include "OAIConversations_members_success_schema.h"
#include "OAIConversations_open_error_schema.h"
#include "OAIConversations_open_success_schema.h"
#include "OAIConversations_rename_error_schema.h"
#include "OAIConversations_rename_success_schema.h"
#include "OAIConversations_replies_error_schema.h"
#include "OAIConversations_replies_success_schema.h"
#include "OAIConversations_setPurpose_error_schema.h"
#include "OAIConversations_setPurpose_success_schema.h"
#include "OAIConversations_setTopic_error_schema.h"
#include "OAIConversations_setTopic_success_schema.h"
#include "OAIConversations_unarchive_error_schema.h"
#include "OAIConversations_unarchive_success_schema.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsApi(const int timeOut = 0);
    ~OAIConversationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    */
    virtual void conversationsArchive(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    */
    virtual void conversationsClose(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  is_private bool [optional]
    * @param[in]  name QString [optional]
    */
    virtual void conversationsCreate(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  latest double [optional]
    * @param[in]  oldest double [optional]
    * @param[in]  inclusive bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void conversationsHistory(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latest = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &oldest = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &inclusive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  include_locale bool [optional]
    * @param[in]  include_num_members bool [optional]
    */
    virtual void conversationsInfo(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_locale = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_num_members = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  users QString [optional]
    */
    virtual void conversationsInvite(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &users = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    */
    virtual void conversationsJoin(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  user QString [optional]
    */
    virtual void conversationsKick(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    */
    virtual void conversationsLeave(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  exclude_archived bool [optional]
    * @param[in]  types QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void conversationsList(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_archived = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  ts double [optional]
    */
    virtual void conversationsMark(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &ts = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void conversationsMembers(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  return_im bool [optional]
    * @param[in]  users QString [optional]
    */
    virtual void conversationsOpen(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_im = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &users = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void conversationsRename(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  ts double [optional]
    * @param[in]  latest double [optional]
    * @param[in]  oldest double [optional]
    * @param[in]  inclusive bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void conversationsReplies(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &ts = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &latest = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &oldest = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &inclusive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  purpose QString [optional]
    */
    virtual void conversationsSetPurpose(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &purpose = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  topic QString [optional]
    */
    virtual void conversationsSetTopic(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    */
    virtual void conversationsUnarchive(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void conversationsArchiveCallback(OAIHttpRequestWorker *worker);
    void conversationsCloseCallback(OAIHttpRequestWorker *worker);
    void conversationsCreateCallback(OAIHttpRequestWorker *worker);
    void conversationsHistoryCallback(OAIHttpRequestWorker *worker);
    void conversationsInfoCallback(OAIHttpRequestWorker *worker);
    void conversationsInviteCallback(OAIHttpRequestWorker *worker);
    void conversationsJoinCallback(OAIHttpRequestWorker *worker);
    void conversationsKickCallback(OAIHttpRequestWorker *worker);
    void conversationsLeaveCallback(OAIHttpRequestWorker *worker);
    void conversationsListCallback(OAIHttpRequestWorker *worker);
    void conversationsMarkCallback(OAIHttpRequestWorker *worker);
    void conversationsMembersCallback(OAIHttpRequestWorker *worker);
    void conversationsOpenCallback(OAIHttpRequestWorker *worker);
    void conversationsRenameCallback(OAIHttpRequestWorker *worker);
    void conversationsRepliesCallback(OAIHttpRequestWorker *worker);
    void conversationsSetPurposeCallback(OAIHttpRequestWorker *worker);
    void conversationsSetTopicCallback(OAIHttpRequestWorker *worker);
    void conversationsUnarchiveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void conversationsArchiveSignal(OAIConversations_archive_success_schema summary);
    void conversationsCloseSignal(OAIConversations_close_success_schema summary);
    void conversationsCreateSignal(OAIConversations_create_success_schema summary);
    void conversationsHistorySignal(OAIConversations_history_success_schema summary);
    void conversationsInfoSignal(OAIConversations_info_success_schema summary);
    void conversationsInviteSignal(OAIConversations_invite_error_schema summary);
    void conversationsJoinSignal(OAIConversations_join_success_schema summary);
    void conversationsKickSignal(OAIConversations_kick_success_schema summary);
    void conversationsLeaveSignal(OAIConversations_leave_success_schema summary);
    void conversationsListSignal(OAIConversations_list_success_schema summary);
    void conversationsMarkSignal(OAIConversations_mark_success_schema summary);
    void conversationsMembersSignal(OAIConversations_members_success_schema summary);
    void conversationsOpenSignal(OAIConversations_open_success_schema summary);
    void conversationsRenameSignal(OAIConversations_rename_success_schema summary);
    void conversationsRepliesSignal(OAIConversations_replies_success_schema summary);
    void conversationsSetPurposeSignal(OAIConversations_setPurpose_success_schema summary);
    void conversationsSetTopicSignal(OAIConversations_setTopic_success_schema summary);
    void conversationsUnarchiveSignal(OAIConversations_unarchive_success_schema summary);


    void conversationsArchiveSignalFull(OAIHttpRequestWorker *worker, OAIConversations_archive_success_schema summary);
    void conversationsCloseSignalFull(OAIHttpRequestWorker *worker, OAIConversations_close_success_schema summary);
    void conversationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIConversations_create_success_schema summary);
    void conversationsHistorySignalFull(OAIHttpRequestWorker *worker, OAIConversations_history_success_schema summary);
    void conversationsInfoSignalFull(OAIHttpRequestWorker *worker, OAIConversations_info_success_schema summary);
    void conversationsInviteSignalFull(OAIHttpRequestWorker *worker, OAIConversations_invite_error_schema summary);
    void conversationsJoinSignalFull(OAIHttpRequestWorker *worker, OAIConversations_join_success_schema summary);
    void conversationsKickSignalFull(OAIHttpRequestWorker *worker, OAIConversations_kick_success_schema summary);
    void conversationsLeaveSignalFull(OAIHttpRequestWorker *worker, OAIConversations_leave_success_schema summary);
    void conversationsListSignalFull(OAIHttpRequestWorker *worker, OAIConversations_list_success_schema summary);
    void conversationsMarkSignalFull(OAIHttpRequestWorker *worker, OAIConversations_mark_success_schema summary);
    void conversationsMembersSignalFull(OAIHttpRequestWorker *worker, OAIConversations_members_success_schema summary);
    void conversationsOpenSignalFull(OAIHttpRequestWorker *worker, OAIConversations_open_success_schema summary);
    void conversationsRenameSignalFull(OAIHttpRequestWorker *worker, OAIConversations_rename_success_schema summary);
    void conversationsRepliesSignalFull(OAIHttpRequestWorker *worker, OAIConversations_replies_success_schema summary);
    void conversationsSetPurposeSignalFull(OAIHttpRequestWorker *worker, OAIConversations_setPurpose_success_schema summary);
    void conversationsSetTopicSignalFull(OAIHttpRequestWorker *worker, OAIConversations_setTopic_success_schema summary);
    void conversationsUnarchiveSignalFull(OAIHttpRequestWorker *worker, OAIConversations_unarchive_success_schema summary);

    Q_DECL_DEPRECATED_X("Use conversationsArchiveSignalError() instead")
    void conversationsArchiveSignalE(OAIConversations_archive_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsArchiveSignalError(OAIConversations_archive_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsCloseSignalError() instead")
    void conversationsCloseSignalE(OAIConversations_close_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsCloseSignalError(OAIConversations_close_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsCreateSignalError() instead")
    void conversationsCreateSignalE(OAIConversations_create_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsCreateSignalError(OAIConversations_create_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsHistorySignalError() instead")
    void conversationsHistorySignalE(OAIConversations_history_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsHistorySignalError(OAIConversations_history_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsInfoSignalError() instead")
    void conversationsInfoSignalE(OAIConversations_info_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsInfoSignalError(OAIConversations_info_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsInviteSignalError() instead")
    void conversationsInviteSignalE(OAIConversations_invite_error_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsInviteSignalError(OAIConversations_invite_error_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsJoinSignalError() instead")
    void conversationsJoinSignalE(OAIConversations_join_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsJoinSignalError(OAIConversations_join_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsKickSignalError() instead")
    void conversationsKickSignalE(OAIConversations_kick_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsKickSignalError(OAIConversations_kick_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsLeaveSignalError() instead")
    void conversationsLeaveSignalE(OAIConversations_leave_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsLeaveSignalError(OAIConversations_leave_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsListSignalError() instead")
    void conversationsListSignalE(OAIConversations_list_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsListSignalError(OAIConversations_list_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsMarkSignalError() instead")
    void conversationsMarkSignalE(OAIConversations_mark_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsMarkSignalError(OAIConversations_mark_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsMembersSignalError() instead")
    void conversationsMembersSignalE(OAIConversations_members_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsMembersSignalError(OAIConversations_members_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsOpenSignalError() instead")
    void conversationsOpenSignalE(OAIConversations_open_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsOpenSignalError(OAIConversations_open_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsRenameSignalError() instead")
    void conversationsRenameSignalE(OAIConversations_rename_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsRenameSignalError(OAIConversations_rename_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsRepliesSignalError() instead")
    void conversationsRepliesSignalE(OAIConversations_replies_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsRepliesSignalError(OAIConversations_replies_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsSetPurposeSignalError() instead")
    void conversationsSetPurposeSignalE(OAIConversations_setPurpose_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsSetPurposeSignalError(OAIConversations_setPurpose_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsSetTopicSignalError() instead")
    void conversationsSetTopicSignalE(OAIConversations_setTopic_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsSetTopicSignalError(OAIConversations_setTopic_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsUnarchiveSignalError() instead")
    void conversationsUnarchiveSignalE(OAIConversations_unarchive_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsUnarchiveSignalError(OAIConversations_unarchive_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use conversationsArchiveSignalErrorFull() instead")
    void conversationsArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsCloseSignalErrorFull() instead")
    void conversationsCloseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsCloseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsCreateSignalErrorFull() instead")
    void conversationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsHistorySignalErrorFull() instead")
    void conversationsHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsInfoSignalErrorFull() instead")
    void conversationsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsInviteSignalErrorFull() instead")
    void conversationsInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsJoinSignalErrorFull() instead")
    void conversationsJoinSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsJoinSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsKickSignalErrorFull() instead")
    void conversationsKickSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsKickSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsLeaveSignalErrorFull() instead")
    void conversationsLeaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsLeaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsListSignalErrorFull() instead")
    void conversationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsMarkSignalErrorFull() instead")
    void conversationsMarkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsMarkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsMembersSignalErrorFull() instead")
    void conversationsMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsOpenSignalErrorFull() instead")
    void conversationsOpenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsOpenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsRenameSignalErrorFull() instead")
    void conversationsRenameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsRenameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsRepliesSignalErrorFull() instead")
    void conversationsRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsSetPurposeSignalErrorFull() instead")
    void conversationsSetPurposeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsSetPurposeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsSetTopicSignalErrorFull() instead")
    void conversationsSetTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsSetTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use conversationsUnarchiveSignalErrorFull() instead")
    void conversationsUnarchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void conversationsUnarchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
