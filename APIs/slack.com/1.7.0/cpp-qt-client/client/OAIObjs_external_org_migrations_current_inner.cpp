/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_external_org_migrations_current_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_external_org_migrations_current_inner::OAIObjs_external_org_migrations_current_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_external_org_migrations_current_inner::OAIObjs_external_org_migrations_current_inner() {
    this->initializeModel();
}

OAIObjs_external_org_migrations_current_inner::~OAIObjs_external_org_migrations_current_inner() {}

void OAIObjs_external_org_migrations_current_inner::initializeModel() {

    m_date_started_isSet = false;
    m_date_started_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIObjs_external_org_migrations_current_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_external_org_migrations_current_inner::fromJsonObject(QJsonObject json) {

    m_date_started_isValid = ::OpenAPI::fromJsonValue(m_date_started, json[QString("date_started")]);
    m_date_started_isSet = !json[QString("date_started")].isNull() && m_date_started_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("team_id")]);
    m_team_id_isSet = !json[QString("team_id")].isNull() && m_team_id_isValid;
}

QString OAIObjs_external_org_migrations_current_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_external_org_migrations_current_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_date_started_isSet) {
        obj.insert(QString("date_started"), ::OpenAPI::toJsonValue(m_date_started));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("team_id"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

qint32 OAIObjs_external_org_migrations_current_inner::getDateStarted() const {
    return m_date_started;
}
void OAIObjs_external_org_migrations_current_inner::setDateStarted(const qint32 &date_started) {
    m_date_started = date_started;
    m_date_started_isSet = true;
}

bool OAIObjs_external_org_migrations_current_inner::is_date_started_Set() const{
    return m_date_started_isSet;
}

bool OAIObjs_external_org_migrations_current_inner::is_date_started_Valid() const{
    return m_date_started_isValid;
}

QString OAIObjs_external_org_migrations_current_inner::getTeamId() const {
    return m_team_id;
}
void OAIObjs_external_org_migrations_current_inner::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIObjs_external_org_migrations_current_inner::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIObjs_external_org_migrations_current_inner::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIObjs_external_org_migrations_current_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_external_org_migrations_current_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_started_isValid && m_team_id_isValid && true;
}

} // namespace OpenAPI
