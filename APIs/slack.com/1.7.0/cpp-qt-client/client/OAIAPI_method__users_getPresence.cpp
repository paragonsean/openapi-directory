/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPI_method__users_getPresence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPI_method__users_getPresence::OAIAPI_method__users_getPresence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPI_method__users_getPresence::OAIAPI_method__users_getPresence() {
    this->initializeModel();
}

OAIAPI_method__users_getPresence::~OAIAPI_method__users_getPresence() {}

void OAIAPI_method__users_getPresence::initializeModel() {

    m_auto_away_isSet = false;
    m_auto_away_isValid = false;

    m_connection_count_isSet = false;
    m_connection_count_isValid = false;

    m_last_activity_isSet = false;
    m_last_activity_isValid = false;

    m_manual_away_isSet = false;
    m_manual_away_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_online_isSet = false;
    m_online_isValid = false;

    m_presence_isSet = false;
    m_presence_isValid = false;
}

void OAIAPI_method__users_getPresence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPI_method__users_getPresence::fromJsonObject(QJsonObject json) {

    m_auto_away_isValid = ::OpenAPI::fromJsonValue(m_auto_away, json[QString("auto_away")]);
    m_auto_away_isSet = !json[QString("auto_away")].isNull() && m_auto_away_isValid;

    m_connection_count_isValid = ::OpenAPI::fromJsonValue(m_connection_count, json[QString("connection_count")]);
    m_connection_count_isSet = !json[QString("connection_count")].isNull() && m_connection_count_isValid;

    m_last_activity_isValid = ::OpenAPI::fromJsonValue(m_last_activity, json[QString("last_activity")]);
    m_last_activity_isSet = !json[QString("last_activity")].isNull() && m_last_activity_isValid;

    m_manual_away_isValid = ::OpenAPI::fromJsonValue(m_manual_away, json[QString("manual_away")]);
    m_manual_away_isSet = !json[QString("manual_away")].isNull() && m_manual_away_isValid;

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_online_isValid = ::OpenAPI::fromJsonValue(m_online, json[QString("online")]);
    m_online_isSet = !json[QString("online")].isNull() && m_online_isValid;

    m_presence_isValid = ::OpenAPI::fromJsonValue(m_presence, json[QString("presence")]);
    m_presence_isSet = !json[QString("presence")].isNull() && m_presence_isValid;
}

QString OAIAPI_method__users_getPresence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPI_method__users_getPresence::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_away_isSet) {
        obj.insert(QString("auto_away"), ::OpenAPI::toJsonValue(m_auto_away));
    }
    if (m_connection_count_isSet) {
        obj.insert(QString("connection_count"), ::OpenAPI::toJsonValue(m_connection_count));
    }
    if (m_last_activity_isSet) {
        obj.insert(QString("last_activity"), ::OpenAPI::toJsonValue(m_last_activity));
    }
    if (m_manual_away_isSet) {
        obj.insert(QString("manual_away"), ::OpenAPI::toJsonValue(m_manual_away));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_online_isSet) {
        obj.insert(QString("online"), ::OpenAPI::toJsonValue(m_online));
    }
    if (m_presence_isSet) {
        obj.insert(QString("presence"), ::OpenAPI::toJsonValue(m_presence));
    }
    return obj;
}

bool OAIAPI_method__users_getPresence::isAutoAway() const {
    return m_auto_away;
}
void OAIAPI_method__users_getPresence::setAutoAway(const bool &auto_away) {
    m_auto_away = auto_away;
    m_auto_away_isSet = true;
}

bool OAIAPI_method__users_getPresence::is_auto_away_Set() const{
    return m_auto_away_isSet;
}

bool OAIAPI_method__users_getPresence::is_auto_away_Valid() const{
    return m_auto_away_isValid;
}

qint32 OAIAPI_method__users_getPresence::getConnectionCount() const {
    return m_connection_count;
}
void OAIAPI_method__users_getPresence::setConnectionCount(const qint32 &connection_count) {
    m_connection_count = connection_count;
    m_connection_count_isSet = true;
}

bool OAIAPI_method__users_getPresence::is_connection_count_Set() const{
    return m_connection_count_isSet;
}

bool OAIAPI_method__users_getPresence::is_connection_count_Valid() const{
    return m_connection_count_isValid;
}

qint32 OAIAPI_method__users_getPresence::getLastActivity() const {
    return m_last_activity;
}
void OAIAPI_method__users_getPresence::setLastActivity(const qint32 &last_activity) {
    m_last_activity = last_activity;
    m_last_activity_isSet = true;
}

bool OAIAPI_method__users_getPresence::is_last_activity_Set() const{
    return m_last_activity_isSet;
}

bool OAIAPI_method__users_getPresence::is_last_activity_Valid() const{
    return m_last_activity_isValid;
}

bool OAIAPI_method__users_getPresence::isManualAway() const {
    return m_manual_away;
}
void OAIAPI_method__users_getPresence::setManualAway(const bool &manual_away) {
    m_manual_away = manual_away;
    m_manual_away_isSet = true;
}

bool OAIAPI_method__users_getPresence::is_manual_away_Set() const{
    return m_manual_away_isSet;
}

bool OAIAPI_method__users_getPresence::is_manual_away_Valid() const{
    return m_manual_away_isValid;
}

bool OAIAPI_method__users_getPresence::isOk() const {
    return m_ok;
}
void OAIAPI_method__users_getPresence::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIAPI_method__users_getPresence::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIAPI_method__users_getPresence::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIAPI_method__users_getPresence::isOnline() const {
    return m_online;
}
void OAIAPI_method__users_getPresence::setOnline(const bool &online) {
    m_online = online;
    m_online_isSet = true;
}

bool OAIAPI_method__users_getPresence::is_online_Set() const{
    return m_online_isSet;
}

bool OAIAPI_method__users_getPresence::is_online_Valid() const{
    return m_online_isValid;
}

QString OAIAPI_method__users_getPresence::getPresence() const {
    return m_presence;
}
void OAIAPI_method__users_getPresence::setPresence(const QString &presence) {
    m_presence = presence;
    m_presence_isSet = true;
}

bool OAIAPI_method__users_getPresence::is_presence_Set() const{
    return m_presence_isSet;
}

bool OAIAPI_method__users_getPresence::is_presence_Valid() const{
    return m_presence_isValid;
}

bool OAIAPI_method__users_getPresence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_away_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPI_method__users_getPresence::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ok_isValid && m_presence_isValid && true;
}

} // namespace OpenAPI
