/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_message::OAIObjs_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_message::OAIObjs_message() {
    this->initializeModel();
}

OAIObjs_message::~OAIObjs_message() {}

void OAIObjs_message::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_bot_id_isSet = false;
    m_bot_id_isValid = false;

    m_bot_profile_isSet = false;
    m_bot_profile_isValid = false;

    m_client_msg_id_isSet = false;
    m_client_msg_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_display_as_bot_isSet = false;
    m_display_as_bot_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_inviter_isSet = false;
    m_inviter_isValid = false;

    m_is_delayed_message_isSet = false;
    m_is_delayed_message_isValid = false;

    m_is_intro_isSet = false;
    m_is_intro_isValid = false;

    m_is_starred_isSet = false;
    m_is_starred_isValid = false;

    m_last_read_isSet = false;
    m_last_read_isValid = false;

    m_latest_reply_isSet = false;
    m_latest_reply_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_old_name_isSet = false;
    m_old_name_isValid = false;

    m_parent_user_id_isSet = false;
    m_parent_user_id_isValid = false;

    m_permalink_isSet = false;
    m_permalink_isValid = false;

    m_pinned_to_isSet = false;
    m_pinned_to_isValid = false;

    m_purpose_isSet = false;
    m_purpose_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_reply_count_isSet = false;
    m_reply_count_isValid = false;

    m_reply_users_isSet = false;
    m_reply_users_isValid = false;

    m_reply_users_count_isSet = false;
    m_reply_users_count_isValid = false;

    m_source_team_isSet = false;
    m_source_team_isValid = false;

    m_subscribed_isSet = false;
    m_subscribed_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thread_ts_isSet = false;
    m_thread_ts_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;

    m_upload_isSet = false;
    m_upload_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_profile_isSet = false;
    m_user_profile_isValid = false;

    m_user_team_isSet = false;
    m_user_team_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIObjs_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_message::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("blocks")]);
    m_blocks_isSet = !json[QString("blocks")].isNull() && m_blocks_isValid;

    m_bot_id_isValid = ::OpenAPI::fromJsonValue(m_bot_id, json[QString("bot_id")]);
    m_bot_id_isSet = !json[QString("bot_id")].isNull() && m_bot_id_isValid;

    m_bot_profile_isValid = ::OpenAPI::fromJsonValue(m_bot_profile, json[QString("bot_profile")]);
    m_bot_profile_isSet = !json[QString("bot_profile")].isNull() && m_bot_profile_isValid;

    m_client_msg_id_isValid = ::OpenAPI::fromJsonValue(m_client_msg_id, json[QString("client_msg_id")]);
    m_client_msg_id_isSet = !json[QString("client_msg_id")].isNull() && m_client_msg_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_display_as_bot_isValid = ::OpenAPI::fromJsonValue(m_display_as_bot, json[QString("display_as_bot")]);
    m_display_as_bot_isSet = !json[QString("display_as_bot")].isNull() && m_display_as_bot_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_inviter_isValid = ::OpenAPI::fromJsonValue(m_inviter, json[QString("inviter")]);
    m_inviter_isSet = !json[QString("inviter")].isNull() && m_inviter_isValid;

    m_is_delayed_message_isValid = ::OpenAPI::fromJsonValue(m_is_delayed_message, json[QString("is_delayed_message")]);
    m_is_delayed_message_isSet = !json[QString("is_delayed_message")].isNull() && m_is_delayed_message_isValid;

    m_is_intro_isValid = ::OpenAPI::fromJsonValue(m_is_intro, json[QString("is_intro")]);
    m_is_intro_isSet = !json[QString("is_intro")].isNull() && m_is_intro_isValid;

    m_is_starred_isValid = ::OpenAPI::fromJsonValue(m_is_starred, json[QString("is_starred")]);
    m_is_starred_isSet = !json[QString("is_starred")].isNull() && m_is_starred_isValid;

    m_last_read_isValid = ::OpenAPI::fromJsonValue(m_last_read, json[QString("last_read")]);
    m_last_read_isSet = !json[QString("last_read")].isNull() && m_last_read_isValid;

    m_latest_reply_isValid = ::OpenAPI::fromJsonValue(m_latest_reply, json[QString("latest_reply")]);
    m_latest_reply_isSet = !json[QString("latest_reply")].isNull() && m_latest_reply_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_old_name_isValid = ::OpenAPI::fromJsonValue(m_old_name, json[QString("old_name")]);
    m_old_name_isSet = !json[QString("old_name")].isNull() && m_old_name_isValid;

    m_parent_user_id_isValid = ::OpenAPI::fromJsonValue(m_parent_user_id, json[QString("parent_user_id")]);
    m_parent_user_id_isSet = !json[QString("parent_user_id")].isNull() && m_parent_user_id_isValid;

    m_permalink_isValid = ::OpenAPI::fromJsonValue(m_permalink, json[QString("permalink")]);
    m_permalink_isSet = !json[QString("permalink")].isNull() && m_permalink_isValid;

    m_pinned_to_isValid = ::OpenAPI::fromJsonValue(m_pinned_to, json[QString("pinned_to")]);
    m_pinned_to_isSet = !json[QString("pinned_to")].isNull() && m_pinned_to_isValid;

    m_purpose_isValid = ::OpenAPI::fromJsonValue(m_purpose, json[QString("purpose")]);
    m_purpose_isSet = !json[QString("purpose")].isNull() && m_purpose_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_reply_count_isValid = ::OpenAPI::fromJsonValue(m_reply_count, json[QString("reply_count")]);
    m_reply_count_isSet = !json[QString("reply_count")].isNull() && m_reply_count_isValid;

    m_reply_users_isValid = ::OpenAPI::fromJsonValue(m_reply_users, json[QString("reply_users")]);
    m_reply_users_isSet = !json[QString("reply_users")].isNull() && m_reply_users_isValid;

    m_reply_users_count_isValid = ::OpenAPI::fromJsonValue(m_reply_users_count, json[QString("reply_users_count")]);
    m_reply_users_count_isSet = !json[QString("reply_users_count")].isNull() && m_reply_users_count_isValid;

    m_source_team_isValid = ::OpenAPI::fromJsonValue(m_source_team, json[QString("source_team")]);
    m_source_team_isSet = !json[QString("source_team")].isNull() && m_source_team_isValid;

    m_subscribed_isValid = ::OpenAPI::fromJsonValue(m_subscribed, json[QString("subscribed")]);
    m_subscribed_isSet = !json[QString("subscribed")].isNull() && m_subscribed_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thread_ts_isValid = ::OpenAPI::fromJsonValue(m_thread_ts, json[QString("thread_ts")]);
    m_thread_ts_isSet = !json[QString("thread_ts")].isNull() && m_thread_ts_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("unread_count")]);
    m_unread_count_isSet = !json[QString("unread_count")].isNull() && m_unread_count_isValid;

    m_upload_isValid = ::OpenAPI::fromJsonValue(m_upload, json[QString("upload")]);
    m_upload_isSet = !json[QString("upload")].isNull() && m_upload_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_profile_isValid = ::OpenAPI::fromJsonValue(m_user_profile, json[QString("user_profile")]);
    m_user_profile_isSet = !json[QString("user_profile")].isNull() && m_user_profile_isValid;

    m_user_team_isValid = ::OpenAPI::fromJsonValue(m_user_team, json[QString("user_team")]);
    m_user_team_isSet = !json[QString("user_team")].isNull() && m_user_team_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIObjs_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_message::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_blocks.size() > 0) {
        obj.insert(QString("blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_bot_id.size() > 0) {
        obj.insert(QString("bot_id"), ::OpenAPI::toJsonValue(m_bot_id));
    }
    if (m_bot_profile.isSet()) {
        obj.insert(QString("bot_profile"), ::OpenAPI::toJsonValue(m_bot_profile));
    }
    if (m_client_msg_id_isSet) {
        obj.insert(QString("client_msg_id"), ::OpenAPI::toJsonValue(m_client_msg_id));
    }
    if (m_comment.isSet()) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_display_as_bot_isSet) {
        obj.insert(QString("display_as_bot"), ::OpenAPI::toJsonValue(m_display_as_bot));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_icons.isSet()) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_inviter_isSet) {
        obj.insert(QString("inviter"), ::OpenAPI::toJsonValue(m_inviter));
    }
    if (m_is_delayed_message_isSet) {
        obj.insert(QString("is_delayed_message"), ::OpenAPI::toJsonValue(m_is_delayed_message));
    }
    if (m_is_intro_isSet) {
        obj.insert(QString("is_intro"), ::OpenAPI::toJsonValue(m_is_intro));
    }
    if (m_is_starred_isSet) {
        obj.insert(QString("is_starred"), ::OpenAPI::toJsonValue(m_is_starred));
    }
    if (m_last_read_isSet) {
        obj.insert(QString("last_read"), ::OpenAPI::toJsonValue(m_last_read));
    }
    if (m_latest_reply_isSet) {
        obj.insert(QString("latest_reply"), ::OpenAPI::toJsonValue(m_latest_reply));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_old_name_isSet) {
        obj.insert(QString("old_name"), ::OpenAPI::toJsonValue(m_old_name));
    }
    if (m_parent_user_id_isSet) {
        obj.insert(QString("parent_user_id"), ::OpenAPI::toJsonValue(m_parent_user_id));
    }
    if (m_permalink_isSet) {
        obj.insert(QString("permalink"), ::OpenAPI::toJsonValue(m_permalink));
    }
    if (m_pinned_to.size() > 0) {
        obj.insert(QString("pinned_to"), ::OpenAPI::toJsonValue(m_pinned_to));
    }
    if (m_purpose_isSet) {
        obj.insert(QString("purpose"), ::OpenAPI::toJsonValue(m_purpose));
    }
    if (m_reactions.size() > 0) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_reply_count_isSet) {
        obj.insert(QString("reply_count"), ::OpenAPI::toJsonValue(m_reply_count));
    }
    if (m_reply_users.size() > 0) {
        obj.insert(QString("reply_users"), ::OpenAPI::toJsonValue(m_reply_users));
    }
    if (m_reply_users_count_isSet) {
        obj.insert(QString("reply_users_count"), ::OpenAPI::toJsonValue(m_reply_users_count));
    }
    if (m_source_team_isSet) {
        obj.insert(QString("source_team"), ::OpenAPI::toJsonValue(m_source_team));
    }
    if (m_subscribed_isSet) {
        obj.insert(QString("subscribed"), ::OpenAPI::toJsonValue(m_subscribed));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thread_ts_isSet) {
        obj.insert(QString("thread_ts"), ::OpenAPI::toJsonValue(m_thread_ts));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("unread_count"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    if (m_upload_isSet) {
        obj.insert(QString("upload"), ::OpenAPI::toJsonValue(m_upload));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_profile.isSet()) {
        obj.insert(QString("user_profile"), ::OpenAPI::toJsonValue(m_user_profile));
    }
    if (m_user_team_isSet) {
        obj.insert(QString("user_team"), ::OpenAPI::toJsonValue(m_user_team));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QSet<OAIObjs_message_attachments_inner> OAIObjs_message::getAttachments() const {
    return m_attachments;
}
void OAIObjs_message::setAttachments(const QSet<OAIObjs_message_attachments_inner> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIObjs_message::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIObjs_message::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList<OAIBlocks_inner> OAIObjs_message::getBlocks() const {
    return m_blocks;
}
void OAIObjs_message::setBlocks(const QList<OAIBlocks_inner> &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIObjs_message::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIObjs_message::is_blocks_Valid() const{
    return m_blocks_isValid;
}

QList<OAIObjs_message_bot_id_inner> OAIObjs_message::getBotId() const {
    return m_bot_id;
}
void OAIObjs_message::setBotId(const QList<OAIObjs_message_bot_id_inner> &bot_id) {
    m_bot_id = bot_id;
    m_bot_id_isSet = true;
}

bool OAIObjs_message::is_bot_id_Set() const{
    return m_bot_id_isSet;
}

bool OAIObjs_message::is_bot_id_Valid() const{
    return m_bot_id_isValid;
}

OAIObjs_bot_profile OAIObjs_message::getBotProfile() const {
    return m_bot_profile;
}
void OAIObjs_message::setBotProfile(const OAIObjs_bot_profile &bot_profile) {
    m_bot_profile = bot_profile;
    m_bot_profile_isSet = true;
}

bool OAIObjs_message::is_bot_profile_Set() const{
    return m_bot_profile_isSet;
}

bool OAIObjs_message::is_bot_profile_Valid() const{
    return m_bot_profile_isValid;
}

QString OAIObjs_message::getClientMsgId() const {
    return m_client_msg_id;
}
void OAIObjs_message::setClientMsgId(const QString &client_msg_id) {
    m_client_msg_id = client_msg_id;
    m_client_msg_id_isSet = true;
}

bool OAIObjs_message::is_client_msg_id_Set() const{
    return m_client_msg_id_isSet;
}

bool OAIObjs_message::is_client_msg_id_Valid() const{
    return m_client_msg_id_isValid;
}

OAIObjs_comment OAIObjs_message::getComment() const {
    return m_comment;
}
void OAIObjs_message::setComment(const OAIObjs_comment &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIObjs_message::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIObjs_message::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIObjs_message::isDisplayAsBot() const {
    return m_display_as_bot;
}
void OAIObjs_message::setDisplayAsBot(const bool &display_as_bot) {
    m_display_as_bot = display_as_bot;
    m_display_as_bot_isSet = true;
}

bool OAIObjs_message::is_display_as_bot_Set() const{
    return m_display_as_bot_isSet;
}

bool OAIObjs_message::is_display_as_bot_Valid() const{
    return m_display_as_bot_isValid;
}

OAIObjs_file OAIObjs_message::getFile() const {
    return m_file;
}
void OAIObjs_message::setFile(const OAIObjs_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIObjs_message::is_file_Set() const{
    return m_file_isSet;
}

bool OAIObjs_message::is_file_Valid() const{
    return m_file_isValid;
}

QSet<OAIObjs_file> OAIObjs_message::getFiles() const {
    return m_files;
}
void OAIObjs_message::setFiles(const QSet<OAIObjs_file> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIObjs_message::is_files_Set() const{
    return m_files_isSet;
}

bool OAIObjs_message::is_files_Valid() const{
    return m_files_isValid;
}

OAIObjs_message_icons OAIObjs_message::getIcons() const {
    return m_icons;
}
void OAIObjs_message::setIcons(const OAIObjs_message_icons &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAIObjs_message::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAIObjs_message::is_icons_Valid() const{
    return m_icons_isValid;
}

QString OAIObjs_message::getInviter() const {
    return m_inviter;
}
void OAIObjs_message::setInviter(const QString &inviter) {
    m_inviter = inviter;
    m_inviter_isSet = true;
}

bool OAIObjs_message::is_inviter_Set() const{
    return m_inviter_isSet;
}

bool OAIObjs_message::is_inviter_Valid() const{
    return m_inviter_isValid;
}

bool OAIObjs_message::isIsDelayedMessage() const {
    return m_is_delayed_message;
}
void OAIObjs_message::setIsDelayedMessage(const bool &is_delayed_message) {
    m_is_delayed_message = is_delayed_message;
    m_is_delayed_message_isSet = true;
}

bool OAIObjs_message::is_is_delayed_message_Set() const{
    return m_is_delayed_message_isSet;
}

bool OAIObjs_message::is_is_delayed_message_Valid() const{
    return m_is_delayed_message_isValid;
}

bool OAIObjs_message::isIsIntro() const {
    return m_is_intro;
}
void OAIObjs_message::setIsIntro(const bool &is_intro) {
    m_is_intro = is_intro;
    m_is_intro_isSet = true;
}

bool OAIObjs_message::is_is_intro_Set() const{
    return m_is_intro_isSet;
}

bool OAIObjs_message::is_is_intro_Valid() const{
    return m_is_intro_isValid;
}

bool OAIObjs_message::isIsStarred() const {
    return m_is_starred;
}
void OAIObjs_message::setIsStarred(const bool &is_starred) {
    m_is_starred = is_starred;
    m_is_starred_isSet = true;
}

bool OAIObjs_message::is_is_starred_Set() const{
    return m_is_starred_isSet;
}

bool OAIObjs_message::is_is_starred_Valid() const{
    return m_is_starred_isValid;
}

QString OAIObjs_message::getLastRead() const {
    return m_last_read;
}
void OAIObjs_message::setLastRead(const QString &last_read) {
    m_last_read = last_read;
    m_last_read_isSet = true;
}

bool OAIObjs_message::is_last_read_Set() const{
    return m_last_read_isSet;
}

bool OAIObjs_message::is_last_read_Valid() const{
    return m_last_read_isValid;
}

QString OAIObjs_message::getLatestReply() const {
    return m_latest_reply;
}
void OAIObjs_message::setLatestReply(const QString &latest_reply) {
    m_latest_reply = latest_reply;
    m_latest_reply_isSet = true;
}

bool OAIObjs_message::is_latest_reply_Set() const{
    return m_latest_reply_isSet;
}

bool OAIObjs_message::is_latest_reply_Valid() const{
    return m_latest_reply_isValid;
}

QString OAIObjs_message::getName() const {
    return m_name;
}
void OAIObjs_message::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_message::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_message::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObjs_message::getOldName() const {
    return m_old_name;
}
void OAIObjs_message::setOldName(const QString &old_name) {
    m_old_name = old_name;
    m_old_name_isSet = true;
}

bool OAIObjs_message::is_old_name_Set() const{
    return m_old_name_isSet;
}

bool OAIObjs_message::is_old_name_Valid() const{
    return m_old_name_isValid;
}

QString OAIObjs_message::getParentUserId() const {
    return m_parent_user_id;
}
void OAIObjs_message::setParentUserId(const QString &parent_user_id) {
    m_parent_user_id = parent_user_id;
    m_parent_user_id_isSet = true;
}

bool OAIObjs_message::is_parent_user_id_Set() const{
    return m_parent_user_id_isSet;
}

bool OAIObjs_message::is_parent_user_id_Valid() const{
    return m_parent_user_id_isValid;
}

QString OAIObjs_message::getPermalink() const {
    return m_permalink;
}
void OAIObjs_message::setPermalink(const QString &permalink) {
    m_permalink = permalink;
    m_permalink_isSet = true;
}

bool OAIObjs_message::is_permalink_Set() const{
    return m_permalink_isSet;
}

bool OAIObjs_message::is_permalink_Valid() const{
    return m_permalink_isValid;
}

QList<QString> OAIObjs_message::getPinnedTo() const {
    return m_pinned_to;
}
void OAIObjs_message::setPinnedTo(const QList<QString> &pinned_to) {
    m_pinned_to = pinned_to;
    m_pinned_to_isSet = true;
}

bool OAIObjs_message::is_pinned_to_Set() const{
    return m_pinned_to_isSet;
}

bool OAIObjs_message::is_pinned_to_Valid() const{
    return m_pinned_to_isValid;
}

QString OAIObjs_message::getPurpose() const {
    return m_purpose;
}
void OAIObjs_message::setPurpose(const QString &purpose) {
    m_purpose = purpose;
    m_purpose_isSet = true;
}

bool OAIObjs_message::is_purpose_Set() const{
    return m_purpose_isSet;
}

bool OAIObjs_message::is_purpose_Valid() const{
    return m_purpose_isValid;
}

QList<OAIObjs_reaction> OAIObjs_message::getReactions() const {
    return m_reactions;
}
void OAIObjs_message::setReactions(const QList<OAIObjs_reaction> &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIObjs_message::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIObjs_message::is_reactions_Valid() const{
    return m_reactions_isValid;
}

qint32 OAIObjs_message::getReplyCount() const {
    return m_reply_count;
}
void OAIObjs_message::setReplyCount(const qint32 &reply_count) {
    m_reply_count = reply_count;
    m_reply_count_isSet = true;
}

bool OAIObjs_message::is_reply_count_Set() const{
    return m_reply_count_isSet;
}

bool OAIObjs_message::is_reply_count_Valid() const{
    return m_reply_count_isValid;
}

QSet<QString> OAIObjs_message::getReplyUsers() const {
    return m_reply_users;
}
void OAIObjs_message::setReplyUsers(const QSet<QString> &reply_users) {
    m_reply_users = reply_users;
    m_reply_users_isSet = true;
}

bool OAIObjs_message::is_reply_users_Set() const{
    return m_reply_users_isSet;
}

bool OAIObjs_message::is_reply_users_Valid() const{
    return m_reply_users_isValid;
}

qint32 OAIObjs_message::getReplyUsersCount() const {
    return m_reply_users_count;
}
void OAIObjs_message::setReplyUsersCount(const qint32 &reply_users_count) {
    m_reply_users_count = reply_users_count;
    m_reply_users_count_isSet = true;
}

bool OAIObjs_message::is_reply_users_count_Set() const{
    return m_reply_users_count_isSet;
}

bool OAIObjs_message::is_reply_users_count_Valid() const{
    return m_reply_users_count_isValid;
}

QString OAIObjs_message::getSourceTeam() const {
    return m_source_team;
}
void OAIObjs_message::setSourceTeam(const QString &source_team) {
    m_source_team = source_team;
    m_source_team_isSet = true;
}

bool OAIObjs_message::is_source_team_Set() const{
    return m_source_team_isSet;
}

bool OAIObjs_message::is_source_team_Valid() const{
    return m_source_team_isValid;
}

bool OAIObjs_message::isSubscribed() const {
    return m_subscribed;
}
void OAIObjs_message::setSubscribed(const bool &subscribed) {
    m_subscribed = subscribed;
    m_subscribed_isSet = true;
}

bool OAIObjs_message::is_subscribed_Set() const{
    return m_subscribed_isSet;
}

bool OAIObjs_message::is_subscribed_Valid() const{
    return m_subscribed_isValid;
}

QString OAIObjs_message::getSubtype() const {
    return m_subtype;
}
void OAIObjs_message::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIObjs_message::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIObjs_message::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIObjs_message::getTeam() const {
    return m_team;
}
void OAIObjs_message::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIObjs_message::is_team_Set() const{
    return m_team_isSet;
}

bool OAIObjs_message::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIObjs_message::getText() const {
    return m_text;
}
void OAIObjs_message::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIObjs_message::is_text_Set() const{
    return m_text_isSet;
}

bool OAIObjs_message::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIObjs_message::getThreadTs() const {
    return m_thread_ts;
}
void OAIObjs_message::setThreadTs(const QString &thread_ts) {
    m_thread_ts = thread_ts;
    m_thread_ts_isSet = true;
}

bool OAIObjs_message::is_thread_ts_Set() const{
    return m_thread_ts_isSet;
}

bool OAIObjs_message::is_thread_ts_Valid() const{
    return m_thread_ts_isValid;
}

QString OAIObjs_message::getTopic() const {
    return m_topic;
}
void OAIObjs_message::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIObjs_message::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIObjs_message::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIObjs_message::getTs() const {
    return m_ts;
}
void OAIObjs_message::setTs(const QString &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIObjs_message::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIObjs_message::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIObjs_message::getType() const {
    return m_type;
}
void OAIObjs_message::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIObjs_message::is_type_Set() const{
    return m_type_isSet;
}

bool OAIObjs_message::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIObjs_message::getUnreadCount() const {
    return m_unread_count;
}
void OAIObjs_message::setUnreadCount(const qint32 &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAIObjs_message::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAIObjs_message::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

bool OAIObjs_message::isUpload() const {
    return m_upload;
}
void OAIObjs_message::setUpload(const bool &upload) {
    m_upload = upload;
    m_upload_isSet = true;
}

bool OAIObjs_message::is_upload_Set() const{
    return m_upload_isSet;
}

bool OAIObjs_message::is_upload_Valid() const{
    return m_upload_isValid;
}

QString OAIObjs_message::getUser() const {
    return m_user;
}
void OAIObjs_message::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIObjs_message::is_user_Set() const{
    return m_user_isSet;
}

bool OAIObjs_message::is_user_Valid() const{
    return m_user_isValid;
}

OAIObjs_user_profile_short OAIObjs_message::getUserProfile() const {
    return m_user_profile;
}
void OAIObjs_message::setUserProfile(const OAIObjs_user_profile_short &user_profile) {
    m_user_profile = user_profile;
    m_user_profile_isSet = true;
}

bool OAIObjs_message::is_user_profile_Set() const{
    return m_user_profile_isSet;
}

bool OAIObjs_message::is_user_profile_Valid() const{
    return m_user_profile_isValid;
}

QString OAIObjs_message::getUserTeam() const {
    return m_user_team;
}
void OAIObjs_message::setUserTeam(const QString &user_team) {
    m_user_team = user_team;
    m_user_team_isSet = true;
}

bool OAIObjs_message::is_user_team_Set() const{
    return m_user_team_isSet;
}

bool OAIObjs_message::is_user_team_Valid() const{
    return m_user_team_isValid;
}

QString OAIObjs_message::getUsername() const {
    return m_username;
}
void OAIObjs_message::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIObjs_message::is_username_Set() const{
    return m_username_isSet;
}

bool OAIObjs_message::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIObjs_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_msg_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_as_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inviter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_delayed_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_intro_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_reply_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permalink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purpose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_users_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && m_ts_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
