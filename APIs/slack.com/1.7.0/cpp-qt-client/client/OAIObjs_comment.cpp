/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_comment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_comment::OAIObjs_comment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_comment::OAIObjs_comment() {
    this->initializeModel();
}

OAIObjs_comment::~OAIObjs_comment() {}

void OAIObjs_comment::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_intro_isSet = false;
    m_is_intro_isValid = false;

    m_is_starred_isSet = false;
    m_is_starred_isValid = false;

    m_num_stars_isSet = false;
    m_num_stars_isValid = false;

    m_pinned_info_isSet = false;
    m_pinned_info_isValid = false;

    m_pinned_to_isSet = false;
    m_pinned_to_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIObjs_comment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_comment::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_intro_isValid = ::OpenAPI::fromJsonValue(m_is_intro, json[QString("is_intro")]);
    m_is_intro_isSet = !json[QString("is_intro")].isNull() && m_is_intro_isValid;

    m_is_starred_isValid = ::OpenAPI::fromJsonValue(m_is_starred, json[QString("is_starred")]);
    m_is_starred_isSet = !json[QString("is_starred")].isNull() && m_is_starred_isValid;

    m_num_stars_isValid = ::OpenAPI::fromJsonValue(m_num_stars, json[QString("num_stars")]);
    m_num_stars_isSet = !json[QString("num_stars")].isNull() && m_num_stars_isValid;

    m_pinned_info_isValid = ::OpenAPI::fromJsonValue(m_pinned_info, json[QString("pinned_info")]);
    m_pinned_info_isSet = !json[QString("pinned_info")].isNull() && m_pinned_info_isValid;

    m_pinned_to_isValid = ::OpenAPI::fromJsonValue(m_pinned_to, json[QString("pinned_to")]);
    m_pinned_to_isSet = !json[QString("pinned_to")].isNull() && m_pinned_to_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIObjs_comment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_comment::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_intro_isSet) {
        obj.insert(QString("is_intro"), ::OpenAPI::toJsonValue(m_is_intro));
    }
    if (m_is_starred_isSet) {
        obj.insert(QString("is_starred"), ::OpenAPI::toJsonValue(m_is_starred));
    }
    if (m_num_stars_isSet) {
        obj.insert(QString("num_stars"), ::OpenAPI::toJsonValue(m_num_stars));
    }
    if (m_pinned_info_isSet) {
        obj.insert(QString("pinned_info"), ::OpenAPI::toJsonValue(m_pinned_info));
    }
    if (m_pinned_to.size() > 0) {
        obj.insert(QString("pinned_to"), ::OpenAPI::toJsonValue(m_pinned_to));
    }
    if (m_reactions.size() > 0) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIObjs_comment::getComment() const {
    return m_comment;
}
void OAIObjs_comment::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIObjs_comment::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIObjs_comment::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAIObjs_comment::getCreated() const {
    return m_created;
}
void OAIObjs_comment::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIObjs_comment::is_created_Set() const{
    return m_created_isSet;
}

bool OAIObjs_comment::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIObjs_comment::getId() const {
    return m_id;
}
void OAIObjs_comment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_comment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_comment::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIObjs_comment::isIsIntro() const {
    return m_is_intro;
}
void OAIObjs_comment::setIsIntro(const bool &is_intro) {
    m_is_intro = is_intro;
    m_is_intro_isSet = true;
}

bool OAIObjs_comment::is_is_intro_Set() const{
    return m_is_intro_isSet;
}

bool OAIObjs_comment::is_is_intro_Valid() const{
    return m_is_intro_isValid;
}

bool OAIObjs_comment::isIsStarred() const {
    return m_is_starred;
}
void OAIObjs_comment::setIsStarred(const bool &is_starred) {
    m_is_starred = is_starred;
    m_is_starred_isSet = true;
}

bool OAIObjs_comment::is_is_starred_Set() const{
    return m_is_starred_isSet;
}

bool OAIObjs_comment::is_is_starred_Valid() const{
    return m_is_starred_isValid;
}

qint32 OAIObjs_comment::getNumStars() const {
    return m_num_stars;
}
void OAIObjs_comment::setNumStars(const qint32 &num_stars) {
    m_num_stars = num_stars;
    m_num_stars_isSet = true;
}

bool OAIObjs_comment::is_num_stars_Set() const{
    return m_num_stars_isSet;
}

bool OAIObjs_comment::is_num_stars_Valid() const{
    return m_num_stars_isValid;
}

OAIObject OAIObjs_comment::getPinnedInfo() const {
    return m_pinned_info;
}
void OAIObjs_comment::setPinnedInfo(const OAIObject &pinned_info) {
    m_pinned_info = pinned_info;
    m_pinned_info_isSet = true;
}

bool OAIObjs_comment::is_pinned_info_Set() const{
    return m_pinned_info_isSet;
}

bool OAIObjs_comment::is_pinned_info_Valid() const{
    return m_pinned_info_isValid;
}

QList<QString> OAIObjs_comment::getPinnedTo() const {
    return m_pinned_to;
}
void OAIObjs_comment::setPinnedTo(const QList<QString> &pinned_to) {
    m_pinned_to = pinned_to;
    m_pinned_to_isSet = true;
}

bool OAIObjs_comment::is_pinned_to_Set() const{
    return m_pinned_to_isSet;
}

bool OAIObjs_comment::is_pinned_to_Valid() const{
    return m_pinned_to_isValid;
}

QList<OAIObjs_reaction> OAIObjs_comment::getReactions() const {
    return m_reactions;
}
void OAIObjs_comment::setReactions(const QList<OAIObjs_reaction> &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIObjs_comment::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIObjs_comment::is_reactions_Valid() const{
    return m_reactions_isValid;
}

qint32 OAIObjs_comment::getTimestamp() const {
    return m_timestamp;
}
void OAIObjs_comment::setTimestamp(const qint32 &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIObjs_comment::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIObjs_comment::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIObjs_comment::getUser() const {
    return m_user;
}
void OAIObjs_comment::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIObjs_comment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIObjs_comment::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIObjs_comment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_intro_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_stars_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_comment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_comment_isValid && m_created_isValid && m_id_isValid && m_is_intro_isValid && m_timestamp_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
