/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReactions_list_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReactions_list_schema::OAIReactions_list_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReactions_list_schema::OAIReactions_list_schema() {
    this->initializeModel();
}

OAIReactions_list_schema::~OAIReactions_list_schema() {}

void OAIReactions_list_schema::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;

    m_response_metadata_isSet = false;
    m_response_metadata_isValid = false;
}

void OAIReactions_list_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReactions_list_schema::fromJsonObject(QJsonObject json) {

    if(json["items"].isArray()){
        auto arr = json["items"].toArray();
        m_items_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIReactions_list_schema_items_inner_inner> item;
                m_items_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_items_isSet = !jval.isNull() && m_items_isValid;
                m_items.push_back(item);
            }
        }
    }

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(m_paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;

    m_response_metadata_isValid = ::OpenAPI::fromJsonValue(m_response_metadata, json[QString("response_metadata")]);
    m_response_metadata_isSet = !json[QString("response_metadata")].isNull() && m_response_metadata_isValid;
}

QString OAIReactions_list_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReactions_list_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        
        obj.insert(QString("items"), toJsonValue(m_items));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    if (m_paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(m_paging));
    }
    if (m_response_metadata.size() > 0) {
        obj.insert(QString("response_metadata"), ::OpenAPI::toJsonValue(m_response_metadata));
    }
    return obj;
}

QList<QList<OAIReactions_list_schema_items_inner_inner>> OAIReactions_list_schema::getItems() const {
    return m_items;
}
void OAIReactions_list_schema::setItems(const QList<QList<OAIReactions_list_schema_items_inner_inner>> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIReactions_list_schema::is_items_Set() const{
    return m_items_isSet;
}

bool OAIReactions_list_schema::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIReactions_list_schema::isOk() const {
    return m_ok;
}
void OAIReactions_list_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIReactions_list_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIReactions_list_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

OAIObjs_paging OAIReactions_list_schema::getPaging() const {
    return m_paging;
}
void OAIReactions_list_schema::setPaging(const OAIObjs_paging &paging) {
    m_paging = paging;
    m_paging_isSet = true;
}

bool OAIReactions_list_schema::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIReactions_list_schema::is_paging_Valid() const{
    return m_paging_isValid;
}

QList<OAIObjs_response_metadata_inner> OAIReactions_list_schema::getResponseMetadata() const {
    return m_response_metadata;
}
void OAIReactions_list_schema::setResponseMetadata(const QList<OAIObjs_response_metadata_inner> &response_metadata) {
    m_response_metadata = response_metadata;
    m_response_metadata_isSet = true;
}

bool OAIReactions_list_schema::is_response_metadata_Set() const{
    return m_response_metadata_isSet;
}

bool OAIReactions_list_schema::is_response_metadata_Valid() const{
    return m_response_metadata_isValid;
}

bool OAIReactions_list_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReactions_list_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
