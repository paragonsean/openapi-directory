/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChatApi_H
#define OAI_OAIChatApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChat_deleteScheduledMessage_error_schema.h"
#include "OAIChat_deleteScheduledMessage_schema.h"
#include "OAIChat_delete_error_schema.h"
#include "OAIChat_delete_success_schema.h"
#include "OAIChat_getPermalink_error_schema.h"
#include "OAIChat_getPermalink_success_schema.h"
#include "OAIChat_meMessage_error_schema.h"
#include "OAIChat_meMessage_schema.h"
#include "OAIChat_postEphemeral_error_schema.h"
#include "OAIChat_postEphemeral_success_schema.h"
#include "OAIChat_postMessage_error_schema.h"
#include "OAIChat_postMessage_success_schema.h"
#include "OAIChat_scheduleMessage_error_schema.h"
#include "OAIChat_scheduleMessage_success_schema.h"
#include "OAIChat_scheduledMessages_list_error_schema.h"
#include "OAIChat_scheduledMessages_list_schema.h"
#include "OAIChat_unfurl_error_schema.h"
#include "OAIChat_unfurl_success_schema.h"
#include "OAIChat_update_error_schema.h"
#include "OAIChat_update_success_schema.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChatApi : public QObject {
    Q_OBJECT

public:
    OAIChatApi(const int timeOut = 0);
    ~OAIChatApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    * @param[in]  as_user bool [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  ts double [optional]
    */
    virtual void chatDelete(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &as_user = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &ts = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  scheduled_message_id QString [required]
    * @param[in]  as_user bool [optional]
    */
    virtual void chatDeleteScheduledMessage(const QString &token, const QString &channel, const QString &scheduled_message_id, const ::OpenAPI::OptionalParam<bool> &as_user = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  message_ts QString [required]
    */
    virtual void chatGetPermalink(const QString &token, const QString &channel, const QString &message_ts);

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void chatMeMessage(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  user QString [required]
    * @param[in]  as_user bool [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  blocks QString [optional]
    * @param[in]  icon_emoji QString [optional]
    * @param[in]  icon_url QString [optional]
    * @param[in]  link_names bool [optional]
    * @param[in]  parse QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  thread_ts QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void chatPostEphemeral(const QString &token, const QString &channel, const QString &user, const ::OpenAPI::OptionalParam<bool> &as_user = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &blocks = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icon_emoji = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icon_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &link_names = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &parse = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &thread_ts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  as_user QString [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  blocks QString [optional]
    * @param[in]  icon_emoji QString [optional]
    * @param[in]  icon_url QString [optional]
    * @param[in]  link_names bool [optional]
    * @param[in]  mrkdwn bool [optional]
    * @param[in]  parse QString [optional]
    * @param[in]  reply_broadcast bool [optional]
    * @param[in]  text QString [optional]
    * @param[in]  thread_ts QString [optional]
    * @param[in]  unfurl_links bool [optional]
    * @param[in]  unfurl_media bool [optional]
    * @param[in]  username QString [optional]
    */
    virtual void chatPostMessage(const QString &token, const QString &channel, const ::OpenAPI::OptionalParam<QString> &as_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &blocks = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icon_emoji = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icon_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &link_names = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &mrkdwn = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &parse = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reply_broadcast = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &thread_ts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unfurl_links = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &unfurl_media = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  as_user bool [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  blocks QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  link_names bool [optional]
    * @param[in]  parse QString [optional]
    * @param[in]  post_at QString [optional]
    * @param[in]  reply_broadcast bool [optional]
    * @param[in]  text QString [optional]
    * @param[in]  thread_ts double [optional]
    * @param[in]  unfurl_links bool [optional]
    * @param[in]  unfurl_media bool [optional]
    */
    virtual void chatScheduleMessage(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &as_user = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &blocks = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &link_names = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &parse = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &post_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reply_broadcast = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &thread_ts = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &unfurl_links = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &unfurl_media = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  latest double [optional]
    * @param[in]  oldest double [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void chatScheduledMessagesList(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &latest = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &oldest = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  ts QString [required]
    * @param[in]  unfurls QString [optional]
    * @param[in]  user_auth_message QString [optional]
    * @param[in]  user_auth_required bool [optional]
    * @param[in]  user_auth_url QString [optional]
    */
    virtual void chatUnfurl(const QString &token, const QString &channel, const QString &ts, const ::OpenAPI::OptionalParam<QString> &unfurls = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_auth_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &user_auth_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &user_auth_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel QString [required]
    * @param[in]  ts QString [required]
    * @param[in]  as_user QString [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  blocks QString [optional]
    * @param[in]  link_names QString [optional]
    * @param[in]  parse QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void chatUpdate(const QString &token, const QString &channel, const QString &ts, const ::OpenAPI::OptionalParam<QString> &as_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &blocks = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &link_names = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parse = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void chatDeleteCallback(OAIHttpRequestWorker *worker);
    void chatDeleteScheduledMessageCallback(OAIHttpRequestWorker *worker);
    void chatGetPermalinkCallback(OAIHttpRequestWorker *worker);
    void chatMeMessageCallback(OAIHttpRequestWorker *worker);
    void chatPostEphemeralCallback(OAIHttpRequestWorker *worker);
    void chatPostMessageCallback(OAIHttpRequestWorker *worker);
    void chatScheduleMessageCallback(OAIHttpRequestWorker *worker);
    void chatScheduledMessagesListCallback(OAIHttpRequestWorker *worker);
    void chatUnfurlCallback(OAIHttpRequestWorker *worker);
    void chatUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void chatDeleteSignal(OAIChat_delete_success_schema summary);
    void chatDeleteScheduledMessageSignal(OAIChat_deleteScheduledMessage_schema summary);
    void chatGetPermalinkSignal(OAIChat_getPermalink_success_schema summary);
    void chatMeMessageSignal(OAIChat_meMessage_schema summary);
    void chatPostEphemeralSignal(OAIChat_postEphemeral_success_schema summary);
    void chatPostMessageSignal(OAIChat_postMessage_success_schema summary);
    void chatScheduleMessageSignal(OAIChat_scheduleMessage_success_schema summary);
    void chatScheduledMessagesListSignal(OAIChat_scheduledMessages_list_schema summary);
    void chatUnfurlSignal(OAIChat_unfurl_success_schema summary);
    void chatUpdateSignal(OAIChat_update_success_schema summary);


    void chatDeleteSignalFull(OAIHttpRequestWorker *worker, OAIChat_delete_success_schema summary);
    void chatDeleteScheduledMessageSignalFull(OAIHttpRequestWorker *worker, OAIChat_deleteScheduledMessage_schema summary);
    void chatGetPermalinkSignalFull(OAIHttpRequestWorker *worker, OAIChat_getPermalink_success_schema summary);
    void chatMeMessageSignalFull(OAIHttpRequestWorker *worker, OAIChat_meMessage_schema summary);
    void chatPostEphemeralSignalFull(OAIHttpRequestWorker *worker, OAIChat_postEphemeral_success_schema summary);
    void chatPostMessageSignalFull(OAIHttpRequestWorker *worker, OAIChat_postMessage_success_schema summary);
    void chatScheduleMessageSignalFull(OAIHttpRequestWorker *worker, OAIChat_scheduleMessage_success_schema summary);
    void chatScheduledMessagesListSignalFull(OAIHttpRequestWorker *worker, OAIChat_scheduledMessages_list_schema summary);
    void chatUnfurlSignalFull(OAIHttpRequestWorker *worker, OAIChat_unfurl_success_schema summary);
    void chatUpdateSignalFull(OAIHttpRequestWorker *worker, OAIChat_update_success_schema summary);

    Q_DECL_DEPRECATED_X("Use chatDeleteSignalError() instead")
    void chatDeleteSignalE(OAIChat_delete_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatDeleteSignalError(OAIChat_delete_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatDeleteScheduledMessageSignalError() instead")
    void chatDeleteScheduledMessageSignalE(OAIChat_deleteScheduledMessage_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatDeleteScheduledMessageSignalError(OAIChat_deleteScheduledMessage_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatGetPermalinkSignalError() instead")
    void chatGetPermalinkSignalE(OAIChat_getPermalink_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatGetPermalinkSignalError(OAIChat_getPermalink_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatMeMessageSignalError() instead")
    void chatMeMessageSignalE(OAIChat_meMessage_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatMeMessageSignalError(OAIChat_meMessage_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatPostEphemeralSignalError() instead")
    void chatPostEphemeralSignalE(OAIChat_postEphemeral_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatPostEphemeralSignalError(OAIChat_postEphemeral_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatPostMessageSignalError() instead")
    void chatPostMessageSignalE(OAIChat_postMessage_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatPostMessageSignalError(OAIChat_postMessage_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatScheduleMessageSignalError() instead")
    void chatScheduleMessageSignalE(OAIChat_scheduleMessage_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatScheduleMessageSignalError(OAIChat_scheduleMessage_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatScheduledMessagesListSignalError() instead")
    void chatScheduledMessagesListSignalE(OAIChat_scheduledMessages_list_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatScheduledMessagesListSignalError(OAIChat_scheduledMessages_list_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatUnfurlSignalError() instead")
    void chatUnfurlSignalE(OAIChat_unfurl_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatUnfurlSignalError(OAIChat_unfurl_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatUpdateSignalError() instead")
    void chatUpdateSignalE(OAIChat_update_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chatUpdateSignalError(OAIChat_update_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use chatDeleteSignalErrorFull() instead")
    void chatDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatDeleteScheduledMessageSignalErrorFull() instead")
    void chatDeleteScheduledMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatDeleteScheduledMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatGetPermalinkSignalErrorFull() instead")
    void chatGetPermalinkSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatGetPermalinkSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatMeMessageSignalErrorFull() instead")
    void chatMeMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatMeMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatPostEphemeralSignalErrorFull() instead")
    void chatPostEphemeralSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatPostEphemeralSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatPostMessageSignalErrorFull() instead")
    void chatPostMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatPostMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatScheduleMessageSignalErrorFull() instead")
    void chatScheduleMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatScheduleMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatScheduledMessagesListSignalErrorFull() instead")
    void chatScheduledMessagesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatScheduledMessagesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatUnfurlSignalErrorFull() instead")
    void chatUnfurlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatUnfurlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chatUpdateSignalErrorFull() instead")
    void chatUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chatUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
