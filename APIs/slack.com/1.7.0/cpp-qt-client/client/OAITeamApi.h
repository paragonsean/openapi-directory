/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamApi_H
#define OAI_OAITeamApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefault_error_template.h"
#include "OAIDefault_success_template.h"
#include "OAITeam_accessLogs_error_schema.h"
#include "OAITeam_accessLogs_schema.h"
#include "OAITeam_info_error_schema.h"
#include "OAITeam_info_schema.h"
#include "OAITeam_integrationLogs_error_schema.h"
#include "OAITeam_integrationLogs_schema.h"
#include "OAITeam_profile_get_error_schema.h"
#include "OAITeam_profile_get_success_schema.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamApi : public QObject {
    Q_OBJECT

public:
    OAITeamApi(const int timeOut = 0);
    ~OAITeamApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  before QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  page QString [optional]
    */
    virtual void teamAccessLogs(const QString &token, const ::OpenAPI::OptionalParam<QString> &before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  user QString [optional]
    */
    virtual void teamBillableInfo(const QString &token, const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team QString [optional]
    */
    virtual void teamInfo(const QString &token, const ::OpenAPI::OptionalParam<QString> &team = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  app_id QString [optional]
    * @param[in]  change_type QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  service_id QString [optional]
    * @param[in]  user QString [optional]
    */
    virtual void teamIntegrationLogs(const QString &token, const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  visibility QString [optional]
    */
    virtual void teamProfileGet(const QString &token, const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teamAccessLogsCallback(OAIHttpRequestWorker *worker);
    void teamBillableInfoCallback(OAIHttpRequestWorker *worker);
    void teamInfoCallback(OAIHttpRequestWorker *worker);
    void teamIntegrationLogsCallback(OAIHttpRequestWorker *worker);
    void teamProfileGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void teamAccessLogsSignal(OAITeam_accessLogs_schema summary);
    void teamBillableInfoSignal(OAIDefault_success_template summary);
    void teamInfoSignal(OAITeam_info_schema summary);
    void teamIntegrationLogsSignal(OAITeam_integrationLogs_schema summary);
    void teamProfileGetSignal(OAITeam_profile_get_success_schema summary);


    void teamAccessLogsSignalFull(OAIHttpRequestWorker *worker, OAITeam_accessLogs_schema summary);
    void teamBillableInfoSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void teamInfoSignalFull(OAIHttpRequestWorker *worker, OAITeam_info_schema summary);
    void teamIntegrationLogsSignalFull(OAIHttpRequestWorker *worker, OAITeam_integrationLogs_schema summary);
    void teamProfileGetSignalFull(OAIHttpRequestWorker *worker, OAITeam_profile_get_success_schema summary);

    Q_DECL_DEPRECATED_X("Use teamAccessLogsSignalError() instead")
    void teamAccessLogsSignalE(OAITeam_accessLogs_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamAccessLogsSignalError(OAITeam_accessLogs_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamBillableInfoSignalError() instead")
    void teamBillableInfoSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamBillableInfoSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamInfoSignalError() instead")
    void teamInfoSignalE(OAITeam_info_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamInfoSignalError(OAITeam_info_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamIntegrationLogsSignalError() instead")
    void teamIntegrationLogsSignalE(OAITeam_integrationLogs_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamIntegrationLogsSignalError(OAITeam_integrationLogs_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamProfileGetSignalError() instead")
    void teamProfileGetSignalE(OAITeam_profile_get_success_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamProfileGetSignalError(OAITeam_profile_get_success_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use teamAccessLogsSignalErrorFull() instead")
    void teamAccessLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamAccessLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamBillableInfoSignalErrorFull() instead")
    void teamBillableInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamBillableInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamInfoSignalErrorFull() instead")
    void teamInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamIntegrationLogsSignalErrorFull() instead")
    void teamIntegrationLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamIntegrationLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamProfileGetSignalErrorFull() instead")
    void teamProfileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamProfileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
