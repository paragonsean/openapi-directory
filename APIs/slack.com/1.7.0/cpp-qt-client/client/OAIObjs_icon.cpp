/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_icon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_icon::OAIObjs_icon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_icon::OAIObjs_icon() {
    this->initializeModel();
}

OAIObjs_icon::~OAIObjs_icon() {}

void OAIObjs_icon::initializeModel() {

    m_image_102_isSet = false;
    m_image_102_isValid = false;

    m_image_132_isSet = false;
    m_image_132_isValid = false;

    m_image_230_isSet = false;
    m_image_230_isValid = false;

    m_image_34_isSet = false;
    m_image_34_isValid = false;

    m_image_44_isSet = false;
    m_image_44_isValid = false;

    m_image_68_isSet = false;
    m_image_68_isValid = false;

    m_image_88_isSet = false;
    m_image_88_isValid = false;

    m_image_default_isSet = false;
    m_image_default_isValid = false;
}

void OAIObjs_icon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_icon::fromJsonObject(QJsonObject json) {

    m_image_102_isValid = ::OpenAPI::fromJsonValue(m_image_102, json[QString("image_102")]);
    m_image_102_isSet = !json[QString("image_102")].isNull() && m_image_102_isValid;

    m_image_132_isValid = ::OpenAPI::fromJsonValue(m_image_132, json[QString("image_132")]);
    m_image_132_isSet = !json[QString("image_132")].isNull() && m_image_132_isValid;

    m_image_230_isValid = ::OpenAPI::fromJsonValue(m_image_230, json[QString("image_230")]);
    m_image_230_isSet = !json[QString("image_230")].isNull() && m_image_230_isValid;

    m_image_34_isValid = ::OpenAPI::fromJsonValue(m_image_34, json[QString("image_34")]);
    m_image_34_isSet = !json[QString("image_34")].isNull() && m_image_34_isValid;

    m_image_44_isValid = ::OpenAPI::fromJsonValue(m_image_44, json[QString("image_44")]);
    m_image_44_isSet = !json[QString("image_44")].isNull() && m_image_44_isValid;

    m_image_68_isValid = ::OpenAPI::fromJsonValue(m_image_68, json[QString("image_68")]);
    m_image_68_isSet = !json[QString("image_68")].isNull() && m_image_68_isValid;

    m_image_88_isValid = ::OpenAPI::fromJsonValue(m_image_88, json[QString("image_88")]);
    m_image_88_isSet = !json[QString("image_88")].isNull() && m_image_88_isValid;

    m_image_default_isValid = ::OpenAPI::fromJsonValue(m_image_default, json[QString("image_default")]);
    m_image_default_isSet = !json[QString("image_default")].isNull() && m_image_default_isValid;
}

QString OAIObjs_icon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_icon::asJsonObject() const {
    QJsonObject obj;
    if (m_image_102_isSet) {
        obj.insert(QString("image_102"), ::OpenAPI::toJsonValue(m_image_102));
    }
    if (m_image_132_isSet) {
        obj.insert(QString("image_132"), ::OpenAPI::toJsonValue(m_image_132));
    }
    if (m_image_230_isSet) {
        obj.insert(QString("image_230"), ::OpenAPI::toJsonValue(m_image_230));
    }
    if (m_image_34_isSet) {
        obj.insert(QString("image_34"), ::OpenAPI::toJsonValue(m_image_34));
    }
    if (m_image_44_isSet) {
        obj.insert(QString("image_44"), ::OpenAPI::toJsonValue(m_image_44));
    }
    if (m_image_68_isSet) {
        obj.insert(QString("image_68"), ::OpenAPI::toJsonValue(m_image_68));
    }
    if (m_image_88_isSet) {
        obj.insert(QString("image_88"), ::OpenAPI::toJsonValue(m_image_88));
    }
    if (m_image_default_isSet) {
        obj.insert(QString("image_default"), ::OpenAPI::toJsonValue(m_image_default));
    }
    return obj;
}

QString OAIObjs_icon::getImage102() const {
    return m_image_102;
}
void OAIObjs_icon::setImage102(const QString &image_102) {
    m_image_102 = image_102;
    m_image_102_isSet = true;
}

bool OAIObjs_icon::is_image_102_Set() const{
    return m_image_102_isSet;
}

bool OAIObjs_icon::is_image_102_Valid() const{
    return m_image_102_isValid;
}

QString OAIObjs_icon::getImage132() const {
    return m_image_132;
}
void OAIObjs_icon::setImage132(const QString &image_132) {
    m_image_132 = image_132;
    m_image_132_isSet = true;
}

bool OAIObjs_icon::is_image_132_Set() const{
    return m_image_132_isSet;
}

bool OAIObjs_icon::is_image_132_Valid() const{
    return m_image_132_isValid;
}

QString OAIObjs_icon::getImage230() const {
    return m_image_230;
}
void OAIObjs_icon::setImage230(const QString &image_230) {
    m_image_230 = image_230;
    m_image_230_isSet = true;
}

bool OAIObjs_icon::is_image_230_Set() const{
    return m_image_230_isSet;
}

bool OAIObjs_icon::is_image_230_Valid() const{
    return m_image_230_isValid;
}

QString OAIObjs_icon::getImage34() const {
    return m_image_34;
}
void OAIObjs_icon::setImage34(const QString &image_34) {
    m_image_34 = image_34;
    m_image_34_isSet = true;
}

bool OAIObjs_icon::is_image_34_Set() const{
    return m_image_34_isSet;
}

bool OAIObjs_icon::is_image_34_Valid() const{
    return m_image_34_isValid;
}

QString OAIObjs_icon::getImage44() const {
    return m_image_44;
}
void OAIObjs_icon::setImage44(const QString &image_44) {
    m_image_44 = image_44;
    m_image_44_isSet = true;
}

bool OAIObjs_icon::is_image_44_Set() const{
    return m_image_44_isSet;
}

bool OAIObjs_icon::is_image_44_Valid() const{
    return m_image_44_isValid;
}

QString OAIObjs_icon::getImage68() const {
    return m_image_68;
}
void OAIObjs_icon::setImage68(const QString &image_68) {
    m_image_68 = image_68;
    m_image_68_isSet = true;
}

bool OAIObjs_icon::is_image_68_Set() const{
    return m_image_68_isSet;
}

bool OAIObjs_icon::is_image_68_Valid() const{
    return m_image_68_isValid;
}

QString OAIObjs_icon::getImage88() const {
    return m_image_88;
}
void OAIObjs_icon::setImage88(const QString &image_88) {
    m_image_88 = image_88;
    m_image_88_isSet = true;
}

bool OAIObjs_icon::is_image_88_Set() const{
    return m_image_88_isSet;
}

bool OAIObjs_icon::is_image_88_Valid() const{
    return m_image_88_isValid;
}

bool OAIObjs_icon::isImageDefault() const {
    return m_image_default;
}
void OAIObjs_icon::setImageDefault(const bool &image_default) {
    m_image_default = image_default;
    m_image_default_isSet = true;
}

bool OAIObjs_icon::is_image_default_Set() const{
    return m_image_default_isSet;
}

bool OAIObjs_icon::is_image_default_Valid() const{
    return m_image_default_isValid;
}

bool OAIObjs_icon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_102_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_132_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_230_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_34_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_44_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_68_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_88_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_default_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_icon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
