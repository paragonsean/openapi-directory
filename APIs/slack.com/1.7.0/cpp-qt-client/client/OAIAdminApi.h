/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminApi_H
#define OAI_OAIAdminApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdmin_conversations_archive_error_schema.h"
#include "OAIAdmin_conversations_archive_schema.h"
#include "OAIAdmin_conversations_convertToPrivate_error_schema.h"
#include "OAIAdmin_conversations_convertToPrivate_schema.h"
#include "OAIAdmin_conversations_create_error_schema.h"
#include "OAIAdmin_conversations_create_schema.h"
#include "OAIAdmin_conversations_delete_error_schema.h"
#include "OAIAdmin_conversations_delete_schema.h"
#include "OAIAdmin_conversations_disconnectShared_error_schema.h"
#include "OAIAdmin_conversations_getConversationPrefs_schema.h"
#include "OAIAdmin_conversations_getTeams_error_schema.h"
#include "OAIAdmin_conversations_getTeams_schema.h"
#include "OAIAdmin_conversations_invite_error_schema.h"
#include "OAIAdmin_conversations_invite_schema.h"
#include "OAIAdmin_conversations_rename_schema.h"
#include "OAIAdmin_conversations_rename_schema_1.h"
#include "OAIAdmin_conversations_search_error_schema.h"
#include "OAIAdmin_conversations_search_schema.h"
#include "OAIAdmin_conversations_setConversationPrefs_error_schema.h"
#include "OAIAdmin_conversations_setConversationPrefs_schema.h"
#include "OAIAdmin_conversations_unarchive_error_schema.h"
#include "OAIAdmin_conversations_unarchive_error_schema_1.h"
#include "OAIAdmin_conversations_unarchive_error_schema_2.h"
#include "OAIAdmin_conversations_unarchive_schema.h"
#include "OAIDefault_error_template.h"
#include "OAIDefault_success_template.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminApi : public QObject {
    Q_OBJECT

public:
    OAIAdminApi(const int timeOut = 0);
    ~OAIAdminApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  app_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminAppsApprove(const QString &token, const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  team_id QString [optional]
    * @param[in]  enterprise_id QString [optional]
    */
    virtual void adminAppsApprovedList(const QString &token, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enterprise_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminAppsRequestsList(const QString &token, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  app_id QString [optional]
    * @param[in]  request_id QString [optional]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminAppsRestrict(const QString &token, const ::OpenAPI::OptionalParam<QString> &app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  team_id QString [optional]
    * @param[in]  enterprise_id QString [optional]
    */
    virtual void adminAppsRestrictedList(const QString &token, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &enterprise_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsArchive(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsConvertToPrivate(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  is_private bool [required]
    * @param[in]  name QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  org_wide bool [optional]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminConversationsCreate(const QString &token, const bool &is_private, const QString &name, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &org_wide = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsDelete(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  leaving_team_ids QString [optional]
    */
    virtual void adminConversationsDisconnectShared(const QString &token, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &leaving_team_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_ids QString [optional]
    * @param[in]  team_ids QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void adminConversationsEkmListOriginalConnectedChannelInfo(const QString &token, const ::OpenAPI::OptionalParam<QString> &channel_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsGetConversationPrefs(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminConversationsGetTeams(const QString &token, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  user_ids QString [required]
    */
    virtual void adminConversationsInvite(const QString &token, const QString &channel_id, const QString &user_ids);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void adminConversationsRename(const QString &token, const QString &channel_id, const QString &name);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminConversationsRestrictAccessAddGroup(const QString &channel_id, const QString &group_id, const QString &token, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminConversationsRestrictAccessListGroups(const QString &token, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminConversationsRestrictAccessRemoveGroup(const QString &channel_id, const QString &group_id, const QString &team_id, const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_ids QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  search_channel_types QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_dir QString [optional]
    */
    virtual void adminConversationsSearch(const QString &token, const ::OpenAPI::OptionalParam<QString> &team_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_channel_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_dir = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  prefs QString [required]
    */
    virtual void adminConversationsSetConversationPrefs(const QString &token, const QString &channel_id, const QString &prefs);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  org_channel bool [optional]
    * @param[in]  target_team_ids QString [optional]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminConversationsSetTeams(const QString &token, const QString &channel_id, const ::OpenAPI::OptionalParam<bool> &org_channel = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &target_team_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsUnarchive(const QString &token, const QString &channel_id);

    /**
    * @param[in]  alias_for QString [required]
    * @param[in]  name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminEmojiAddAlias(const QString &alias_for, const QString &name, const QString &token);

    /**
    * @param[in]  name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  url QString [required]
    */
    virtual void adminEmojiAdd(const QString &name, const QString &token, const QString &url);

    /**
    * @param[in]  token QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminEmojiList(const QString &token, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminEmojiRemove(const QString &name, const QString &token);

    /**
    * @param[in]  name QString [required]
    * @param[in]  new_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminEmojiRename(const QString &name, const QString &new_name, const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  invite_request_id QString [required]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminInviteRequestsApprove(const QString &token, const QString &invite_request_id, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminInviteRequestsApprovedList(const QString &token, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminInviteRequestsDeniedList(const QString &token, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  invite_request_id QString [required]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminInviteRequestsDeny(const QString &token, const QString &invite_request_id, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminInviteRequestsList(const QString &token, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void adminTeamsAdminsList(const QString &token, const QString &team_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_domain QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  team_description QString [optional]
    * @param[in]  team_discoverability QString [optional]
    */
    virtual void adminTeamsCreate(const QString &token, const QString &team_domain, const QString &team_name, const ::OpenAPI::OptionalParam<QString> &team_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_discoverability = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void adminTeamsList(const QString &token, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void adminTeamsOwnersList(const QString &token, const QString &team_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsInfo(const QString &token, const QString &team_id);

    /**
    * @param[in]  channel_ids QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminTeamsSettingsSetDefaultChannels(const QString &channel_ids, const QString &team_id, const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  description QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsSetDescription(const QString &token, const QString &description, const QString &team_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  discoverability QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsSetDiscoverability(const QString &token, const QString &discoverability, const QString &team_id);

    /**
    * @param[in]  image_url QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminTeamsSettingsSetIcon(const QString &image_url, const QString &team_id, const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  name QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminTeamsSettingsSetName(const QString &token, const QString &name, const QString &team_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_ids QString [required]
    * @param[in]  usergroup_id QString [required]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminUsergroupsAddChannels(const QString &token, const QString &channel_ids, const QString &usergroup_id, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_ids QString [required]
    * @param[in]  usergroup_id QString [required]
    * @param[in]  auto_provision bool [optional]
    */
    virtual void adminUsergroupsAddTeams(const QString &token, const QString &team_ids, const QString &usergroup_id, const ::OpenAPI::OptionalParam<bool> &auto_provision = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  usergroup_id QString [required]
    * @param[in]  team_id QString [optional]
    * @param[in]  include_num_members bool [optional]
    */
    virtual void adminUsergroupsListChannels(const QString &token, const QString &usergroup_id, const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_num_members = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_ids QString [required]
    * @param[in]  usergroup_id QString [required]
    */
    virtual void adminUsergroupsRemoveChannels(const QString &token, const QString &channel_ids, const QString &usergroup_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  channel_ids QString [optional]
    * @param[in]  is_restricted bool [optional]
    * @param[in]  is_ultra_restricted bool [optional]
    */
    virtual void adminUsersAssign(const QString &token, const QString &team_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &channel_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_restricted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_ultra_restricted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_ids QString [required]
    * @param[in]  email QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  custom_message QString [optional]
    * @param[in]  guest_expiration_ts QString [optional]
    * @param[in]  is_restricted bool [optional]
    * @param[in]  is_ultra_restricted bool [optional]
    * @param[in]  real_name QString [optional]
    * @param[in]  resend bool [optional]
    */
    virtual void adminUsersInvite(const QString &token, const QString &channel_ids, const QString &email, const QString &team_id, const ::OpenAPI::OptionalParam<QString> &custom_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &guest_expiration_ts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_restricted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_ultra_restricted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &real_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &resend = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminUsersList(const QString &token, const QString &team_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersRemove(const QString &token, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  session_id qint32 [required]
    * @param[in]  team_id QString [required]
    */
    virtual void adminUsersSessionInvalidate(const QString &token, const qint32 &session_id, const QString &team_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  mobile_only bool [optional]
    * @param[in]  web_only bool [optional]
    */
    virtual void adminUsersSessionReset(const QString &token, const QString &user_id, const ::OpenAPI::OptionalParam<bool> &mobile_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &web_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetAdmin(const QString &token, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  expiration_ts qint32 [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetExpiration(const QString &token, const qint32 &expiration_ts, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetOwner(const QString &token, const QString &team_id, const QString &user_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void adminUsersSetRegular(const QString &token, const QString &team_id, const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminAppsApproveCallback(OAIHttpRequestWorker *worker);
    void adminAppsApprovedListCallback(OAIHttpRequestWorker *worker);
    void adminAppsRequestsListCallback(OAIHttpRequestWorker *worker);
    void adminAppsRestrictCallback(OAIHttpRequestWorker *worker);
    void adminAppsRestrictedListCallback(OAIHttpRequestWorker *worker);
    void adminConversationsArchiveCallback(OAIHttpRequestWorker *worker);
    void adminConversationsConvertToPrivateCallback(OAIHttpRequestWorker *worker);
    void adminConversationsCreateCallback(OAIHttpRequestWorker *worker);
    void adminConversationsDeleteCallback(OAIHttpRequestWorker *worker);
    void adminConversationsDisconnectSharedCallback(OAIHttpRequestWorker *worker);
    void adminConversationsEkmListOriginalConnectedChannelInfoCallback(OAIHttpRequestWorker *worker);
    void adminConversationsGetConversationPrefsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsGetTeamsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsInviteCallback(OAIHttpRequestWorker *worker);
    void adminConversationsRenameCallback(OAIHttpRequestWorker *worker);
    void adminConversationsRestrictAccessAddGroupCallback(OAIHttpRequestWorker *worker);
    void adminConversationsRestrictAccessListGroupsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsRestrictAccessRemoveGroupCallback(OAIHttpRequestWorker *worker);
    void adminConversationsSearchCallback(OAIHttpRequestWorker *worker);
    void adminConversationsSetConversationPrefsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsSetTeamsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsUnarchiveCallback(OAIHttpRequestWorker *worker);
    void adminEmojiAddAliasCallback(OAIHttpRequestWorker *worker);
    void adminEmojiAddCallback(OAIHttpRequestWorker *worker);
    void adminEmojiListCallback(OAIHttpRequestWorker *worker);
    void adminEmojiRemoveCallback(OAIHttpRequestWorker *worker);
    void adminEmojiRenameCallback(OAIHttpRequestWorker *worker);
    void adminInviteRequestsApproveCallback(OAIHttpRequestWorker *worker);
    void adminInviteRequestsApprovedListCallback(OAIHttpRequestWorker *worker);
    void adminInviteRequestsDeniedListCallback(OAIHttpRequestWorker *worker);
    void adminInviteRequestsDenyCallback(OAIHttpRequestWorker *worker);
    void adminInviteRequestsListCallback(OAIHttpRequestWorker *worker);
    void adminTeamsAdminsListCallback(OAIHttpRequestWorker *worker);
    void adminTeamsCreateCallback(OAIHttpRequestWorker *worker);
    void adminTeamsListCallback(OAIHttpRequestWorker *worker);
    void adminTeamsOwnersListCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsInfoCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetDefaultChannelsCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetDescriptionCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetDiscoverabilityCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetIconCallback(OAIHttpRequestWorker *worker);
    void adminTeamsSettingsSetNameCallback(OAIHttpRequestWorker *worker);
    void adminUsergroupsAddChannelsCallback(OAIHttpRequestWorker *worker);
    void adminUsergroupsAddTeamsCallback(OAIHttpRequestWorker *worker);
    void adminUsergroupsListChannelsCallback(OAIHttpRequestWorker *worker);
    void adminUsergroupsRemoveChannelsCallback(OAIHttpRequestWorker *worker);
    void adminUsersAssignCallback(OAIHttpRequestWorker *worker);
    void adminUsersInviteCallback(OAIHttpRequestWorker *worker);
    void adminUsersListCallback(OAIHttpRequestWorker *worker);
    void adminUsersRemoveCallback(OAIHttpRequestWorker *worker);
    void adminUsersSessionInvalidateCallback(OAIHttpRequestWorker *worker);
    void adminUsersSessionResetCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetAdminCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetExpirationCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetOwnerCallback(OAIHttpRequestWorker *worker);
    void adminUsersSetRegularCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminAppsApproveSignal(OAIDefault_success_template summary);
    void adminAppsApprovedListSignal(OAIDefault_success_template summary);
    void adminAppsRequestsListSignal(OAIDefault_success_template summary);
    void adminAppsRestrictSignal(OAIDefault_success_template summary);
    void adminAppsRestrictedListSignal(OAIDefault_success_template summary);
    void adminConversationsArchiveSignal(OAIAdmin_conversations_archive_schema summary);
    void adminConversationsConvertToPrivateSignal(OAIAdmin_conversations_convertToPrivate_schema summary);
    void adminConversationsCreateSignal(OAIAdmin_conversations_create_schema summary);
    void adminConversationsDeleteSignal(OAIAdmin_conversations_delete_schema summary);
    void adminConversationsDisconnectSharedSignal(OAIAdmin_conversations_rename_schema summary);
    void adminConversationsEkmListOriginalConnectedChannelInfoSignal(OAIDefault_success_template summary);
    void adminConversationsGetConversationPrefsSignal(OAIAdmin_conversations_getConversationPrefs_schema summary);
    void adminConversationsGetTeamsSignal(OAIAdmin_conversations_getTeams_schema summary);
    void adminConversationsInviteSignal(OAIAdmin_conversations_invite_schema summary);
    void adminConversationsRenameSignal(OAIAdmin_conversations_rename_schema_1 summary);
    void adminConversationsRestrictAccessAddGroupSignal(OAIDefault_success_template summary);
    void adminConversationsRestrictAccessListGroupsSignal(OAIDefault_success_template summary);
    void adminConversationsRestrictAccessRemoveGroupSignal(OAIDefault_success_template summary);
    void adminConversationsSearchSignal(OAIAdmin_conversations_search_schema summary);
    void adminConversationsSetConversationPrefsSignal(OAIAdmin_conversations_setConversationPrefs_schema summary);
    void adminConversationsSetTeamsSignal(OAIDefault_success_template summary);
    void adminConversationsUnarchiveSignal(OAIAdmin_conversations_unarchive_schema summary);
    void adminEmojiAddAliasSignal(OAIDefault_success_template summary);
    void adminEmojiAddSignal(OAIDefault_success_template summary);
    void adminEmojiListSignal(OAIDefault_success_template summary);
    void adminEmojiRemoveSignal(OAIDefault_success_template summary);
    void adminEmojiRenameSignal(OAIDefault_success_template summary);
    void adminInviteRequestsApproveSignal(OAIDefault_success_template summary);
    void adminInviteRequestsApprovedListSignal(OAIDefault_success_template summary);
    void adminInviteRequestsDeniedListSignal(OAIDefault_success_template summary);
    void adminInviteRequestsDenySignal(OAIDefault_success_template summary);
    void adminInviteRequestsListSignal(OAIDefault_success_template summary);
    void adminTeamsAdminsListSignal(OAIDefault_success_template summary);
    void adminTeamsCreateSignal(OAIDefault_success_template summary);
    void adminTeamsListSignal(OAIDefault_success_template summary);
    void adminTeamsOwnersListSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsInfoSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetDefaultChannelsSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetDescriptionSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetDiscoverabilitySignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetIconSignal(OAIDefault_success_template summary);
    void adminTeamsSettingsSetNameSignal(OAIDefault_success_template summary);
    void adminUsergroupsAddChannelsSignal(OAIDefault_success_template summary);
    void adminUsergroupsAddTeamsSignal(OAIDefault_success_template summary);
    void adminUsergroupsListChannelsSignal(OAIDefault_success_template summary);
    void adminUsergroupsRemoveChannelsSignal(OAIDefault_success_template summary);
    void adminUsersAssignSignal(OAIDefault_success_template summary);
    void adminUsersInviteSignal(OAIDefault_success_template summary);
    void adminUsersListSignal(OAIDefault_success_template summary);
    void adminUsersRemoveSignal(OAIDefault_success_template summary);
    void adminUsersSessionInvalidateSignal(OAIDefault_success_template summary);
    void adminUsersSessionResetSignal(OAIDefault_success_template summary);
    void adminUsersSetAdminSignal(OAIDefault_success_template summary);
    void adminUsersSetExpirationSignal(OAIDefault_success_template summary);
    void adminUsersSetOwnerSignal(OAIDefault_success_template summary);
    void adminUsersSetRegularSignal(OAIDefault_success_template summary);


    void adminAppsApproveSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminAppsApprovedListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminAppsRequestsListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminAppsRestrictSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminAppsRestrictedListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminConversationsArchiveSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_archive_schema summary);
    void adminConversationsConvertToPrivateSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_convertToPrivate_schema summary);
    void adminConversationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_create_schema summary);
    void adminConversationsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_delete_schema summary);
    void adminConversationsDisconnectSharedSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_rename_schema summary);
    void adminConversationsEkmListOriginalConnectedChannelInfoSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminConversationsGetConversationPrefsSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_getConversationPrefs_schema summary);
    void adminConversationsGetTeamsSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_getTeams_schema summary);
    void adminConversationsInviteSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_invite_schema summary);
    void adminConversationsRenameSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_rename_schema_1 summary);
    void adminConversationsRestrictAccessAddGroupSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminConversationsRestrictAccessListGroupsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminConversationsRestrictAccessRemoveGroupSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminConversationsSearchSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_search_schema summary);
    void adminConversationsSetConversationPrefsSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_setConversationPrefs_schema summary);
    void adminConversationsSetTeamsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminConversationsUnarchiveSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_unarchive_schema summary);
    void adminEmojiAddAliasSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiAddSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiRemoveSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiRenameSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminInviteRequestsApproveSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminInviteRequestsApprovedListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminInviteRequestsDeniedListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminInviteRequestsDenySignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminInviteRequestsListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsAdminsListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsCreateSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsOwnersListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsInfoSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetDefaultChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetDescriptionSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetDiscoverabilitySignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetIconSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminTeamsSettingsSetNameSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsergroupsAddChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsergroupsAddTeamsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsergroupsListChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsergroupsRemoveChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersAssignSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersInviteSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersRemoveSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSessionInvalidateSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSessionResetSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetAdminSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetExpirationSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetOwnerSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminUsersSetRegularSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);

    Q_DECL_DEPRECATED_X("Use adminAppsApproveSignalError() instead")
    void adminAppsApproveSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsApproveSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsApprovedListSignalError() instead")
    void adminAppsApprovedListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsApprovedListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsRequestsListSignalError() instead")
    void adminAppsRequestsListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsRequestsListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsRestrictSignalError() instead")
    void adminAppsRestrictSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsRestrictSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsRestrictedListSignalError() instead")
    void adminAppsRestrictedListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsRestrictedListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsArchiveSignalError() instead")
    void adminConversationsArchiveSignalE(OAIAdmin_conversations_archive_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsArchiveSignalError(OAIAdmin_conversations_archive_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsConvertToPrivateSignalError() instead")
    void adminConversationsConvertToPrivateSignalE(OAIAdmin_conversations_convertToPrivate_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsConvertToPrivateSignalError(OAIAdmin_conversations_convertToPrivate_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsCreateSignalError() instead")
    void adminConversationsCreateSignalE(OAIAdmin_conversations_create_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsCreateSignalError(OAIAdmin_conversations_create_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDeleteSignalError() instead")
    void adminConversationsDeleteSignalE(OAIAdmin_conversations_delete_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDeleteSignalError(OAIAdmin_conversations_delete_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDisconnectSharedSignalError() instead")
    void adminConversationsDisconnectSharedSignalE(OAIAdmin_conversations_rename_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDisconnectSharedSignalError(OAIAdmin_conversations_rename_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsEkmListOriginalConnectedChannelInfoSignalError() instead")
    void adminConversationsEkmListOriginalConnectedChannelInfoSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsEkmListOriginalConnectedChannelInfoSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetConversationPrefsSignalError() instead")
    void adminConversationsGetConversationPrefsSignalE(OAIAdmin_conversations_getConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetConversationPrefsSignalError(OAIAdmin_conversations_getConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetTeamsSignalError() instead")
    void adminConversationsGetTeamsSignalE(OAIAdmin_conversations_getTeams_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetTeamsSignalError(OAIAdmin_conversations_getTeams_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsInviteSignalError() instead")
    void adminConversationsInviteSignalE(OAIAdmin_conversations_invite_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsInviteSignalError(OAIAdmin_conversations_invite_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRenameSignalError() instead")
    void adminConversationsRenameSignalE(OAIAdmin_conversations_rename_schema_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRenameSignalError(OAIAdmin_conversations_rename_schema_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRestrictAccessAddGroupSignalError() instead")
    void adminConversationsRestrictAccessAddGroupSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRestrictAccessAddGroupSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRestrictAccessListGroupsSignalError() instead")
    void adminConversationsRestrictAccessListGroupsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRestrictAccessListGroupsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRestrictAccessRemoveGroupSignalError() instead")
    void adminConversationsRestrictAccessRemoveGroupSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRestrictAccessRemoveGroupSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSearchSignalError() instead")
    void adminConversationsSearchSignalE(OAIAdmin_conversations_search_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSearchSignalError(OAIAdmin_conversations_search_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetConversationPrefsSignalError() instead")
    void adminConversationsSetConversationPrefsSignalE(OAIAdmin_conversations_setConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetConversationPrefsSignalError(OAIAdmin_conversations_setConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetTeamsSignalError() instead")
    void adminConversationsSetTeamsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetTeamsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsUnarchiveSignalError() instead")
    void adminConversationsUnarchiveSignalE(OAIAdmin_conversations_unarchive_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsUnarchiveSignalError(OAIAdmin_conversations_unarchive_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiAddAliasSignalError() instead")
    void adminEmojiAddAliasSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddAliasSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiAddSignalError() instead")
    void adminEmojiAddSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiListSignalError() instead")
    void adminEmojiListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRemoveSignalError() instead")
    void adminEmojiRemoveSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRemoveSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRenameSignalError() instead")
    void adminEmojiRenameSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRenameSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsApproveSignalError() instead")
    void adminInviteRequestsApproveSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsApproveSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsApprovedListSignalError() instead")
    void adminInviteRequestsApprovedListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsApprovedListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsDeniedListSignalError() instead")
    void adminInviteRequestsDeniedListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsDeniedListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsDenySignalError() instead")
    void adminInviteRequestsDenySignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsDenySignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsListSignalError() instead")
    void adminInviteRequestsListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsAdminsListSignalError() instead")
    void adminTeamsAdminsListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsAdminsListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsCreateSignalError() instead")
    void adminTeamsCreateSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsCreateSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsListSignalError() instead")
    void adminTeamsListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsOwnersListSignalError() instead")
    void adminTeamsOwnersListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsOwnersListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsInfoSignalError() instead")
    void adminTeamsSettingsInfoSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsInfoSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDefaultChannelsSignalError() instead")
    void adminTeamsSettingsSetDefaultChannelsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDefaultChannelsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDescriptionSignalError() instead")
    void adminTeamsSettingsSetDescriptionSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDescriptionSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDiscoverabilitySignalError() instead")
    void adminTeamsSettingsSetDiscoverabilitySignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDiscoverabilitySignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetIconSignalError() instead")
    void adminTeamsSettingsSetIconSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetIconSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetNameSignalError() instead")
    void adminTeamsSettingsSetNameSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetNameSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsAddChannelsSignalError() instead")
    void adminUsergroupsAddChannelsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsAddChannelsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsAddTeamsSignalError() instead")
    void adminUsergroupsAddTeamsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsAddTeamsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsListChannelsSignalError() instead")
    void adminUsergroupsListChannelsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsListChannelsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsRemoveChannelsSignalError() instead")
    void adminUsergroupsRemoveChannelsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsRemoveChannelsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersAssignSignalError() instead")
    void adminUsersAssignSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersAssignSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersInviteSignalError() instead")
    void adminUsersInviteSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersInviteSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersListSignalError() instead")
    void adminUsersListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersRemoveSignalError() instead")
    void adminUsersRemoveSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersRemoveSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSessionInvalidateSignalError() instead")
    void adminUsersSessionInvalidateSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSessionInvalidateSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSessionResetSignalError() instead")
    void adminUsersSessionResetSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSessionResetSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetAdminSignalError() instead")
    void adminUsersSetAdminSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetAdminSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetExpirationSignalError() instead")
    void adminUsersSetExpirationSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetExpirationSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetOwnerSignalError() instead")
    void adminUsersSetOwnerSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetOwnerSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetRegularSignalError() instead")
    void adminUsersSetRegularSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetRegularSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminAppsApproveSignalErrorFull() instead")
    void adminAppsApproveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsApproveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsApprovedListSignalErrorFull() instead")
    void adminAppsApprovedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsApprovedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsRequestsListSignalErrorFull() instead")
    void adminAppsRequestsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsRequestsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsRestrictSignalErrorFull() instead")
    void adminAppsRestrictSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsRestrictSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminAppsRestrictedListSignalErrorFull() instead")
    void adminAppsRestrictedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminAppsRestrictedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsArchiveSignalErrorFull() instead")
    void adminConversationsArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsConvertToPrivateSignalErrorFull() instead")
    void adminConversationsConvertToPrivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsConvertToPrivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsCreateSignalErrorFull() instead")
    void adminConversationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDeleteSignalErrorFull() instead")
    void adminConversationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDisconnectSharedSignalErrorFull() instead")
    void adminConversationsDisconnectSharedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDisconnectSharedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsEkmListOriginalConnectedChannelInfoSignalErrorFull() instead")
    void adminConversationsEkmListOriginalConnectedChannelInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsEkmListOriginalConnectedChannelInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetConversationPrefsSignalErrorFull() instead")
    void adminConversationsGetConversationPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetConversationPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetTeamsSignalErrorFull() instead")
    void adminConversationsGetTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsInviteSignalErrorFull() instead")
    void adminConversationsInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRenameSignalErrorFull() instead")
    void adminConversationsRenameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRenameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRestrictAccessAddGroupSignalErrorFull() instead")
    void adminConversationsRestrictAccessAddGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRestrictAccessAddGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRestrictAccessListGroupsSignalErrorFull() instead")
    void adminConversationsRestrictAccessListGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRestrictAccessListGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRestrictAccessRemoveGroupSignalErrorFull() instead")
    void adminConversationsRestrictAccessRemoveGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRestrictAccessRemoveGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSearchSignalErrorFull() instead")
    void adminConversationsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetConversationPrefsSignalErrorFull() instead")
    void adminConversationsSetConversationPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetConversationPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetTeamsSignalErrorFull() instead")
    void adminConversationsSetTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsUnarchiveSignalErrorFull() instead")
    void adminConversationsUnarchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsUnarchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiAddAliasSignalErrorFull() instead")
    void adminEmojiAddAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiAddSignalErrorFull() instead")
    void adminEmojiAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiListSignalErrorFull() instead")
    void adminEmojiListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRemoveSignalErrorFull() instead")
    void adminEmojiRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRenameSignalErrorFull() instead")
    void adminEmojiRenameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRenameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsApproveSignalErrorFull() instead")
    void adminInviteRequestsApproveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsApproveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsApprovedListSignalErrorFull() instead")
    void adminInviteRequestsApprovedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsApprovedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsDeniedListSignalErrorFull() instead")
    void adminInviteRequestsDeniedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsDeniedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsDenySignalErrorFull() instead")
    void adminInviteRequestsDenySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsDenySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminInviteRequestsListSignalErrorFull() instead")
    void adminInviteRequestsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminInviteRequestsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsAdminsListSignalErrorFull() instead")
    void adminTeamsAdminsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsAdminsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsCreateSignalErrorFull() instead")
    void adminTeamsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsListSignalErrorFull() instead")
    void adminTeamsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsOwnersListSignalErrorFull() instead")
    void adminTeamsOwnersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsOwnersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsInfoSignalErrorFull() instead")
    void adminTeamsSettingsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDefaultChannelsSignalErrorFull() instead")
    void adminTeamsSettingsSetDefaultChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDefaultChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDescriptionSignalErrorFull() instead")
    void adminTeamsSettingsSetDescriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDescriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetDiscoverabilitySignalErrorFull() instead")
    void adminTeamsSettingsSetDiscoverabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetDiscoverabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetIconSignalErrorFull() instead")
    void adminTeamsSettingsSetIconSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetIconSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminTeamsSettingsSetNameSignalErrorFull() instead")
    void adminTeamsSettingsSetNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminTeamsSettingsSetNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsAddChannelsSignalErrorFull() instead")
    void adminUsergroupsAddChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsAddChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsAddTeamsSignalErrorFull() instead")
    void adminUsergroupsAddTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsAddTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsListChannelsSignalErrorFull() instead")
    void adminUsergroupsListChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsListChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsergroupsRemoveChannelsSignalErrorFull() instead")
    void adminUsergroupsRemoveChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsergroupsRemoveChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersAssignSignalErrorFull() instead")
    void adminUsersAssignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersAssignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersInviteSignalErrorFull() instead")
    void adminUsersInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersListSignalErrorFull() instead")
    void adminUsersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersRemoveSignalErrorFull() instead")
    void adminUsersRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSessionInvalidateSignalErrorFull() instead")
    void adminUsersSessionInvalidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSessionInvalidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSessionResetSignalErrorFull() instead")
    void adminUsersSessionResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSessionResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetAdminSignalErrorFull() instead")
    void adminUsersSetAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetExpirationSignalErrorFull() instead")
    void adminUsersSetExpirationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetExpirationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetOwnerSignalErrorFull() instead")
    void adminUsersSetOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminUsersSetRegularSignalErrorFull() instead")
    void adminUsersSetRegularSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminUsersSetRegularSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
