/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1() {
    this->initializeModel();
}

OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::~OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1() {}

void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::initializeModel() {

    m_is_starred_isSet = false;
    m_is_starred_isValid = false;

    m_parent_user_id_isSet = false;
    m_parent_user_id_isValid = false;

    m_source_team_isSet = false;
    m_source_team_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thread_ts_isSet = false;
    m_thread_ts_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_profile_isSet = false;
    m_user_profile_isValid = false;

    m_user_team_isSet = false;
    m_user_team_isValid = false;
}

void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::fromJsonObject(QJsonObject json) {

    m_is_starred_isValid = ::OpenAPI::fromJsonValue(m_is_starred, json[QString("is_starred")]);
    m_is_starred_isSet = !json[QString("is_starred")].isNull() && m_is_starred_isValid;

    m_parent_user_id_isValid = ::OpenAPI::fromJsonValue(m_parent_user_id, json[QString("parent_user_id")]);
    m_parent_user_id_isSet = !json[QString("parent_user_id")].isNull() && m_parent_user_id_isValid;

    m_source_team_isValid = ::OpenAPI::fromJsonValue(m_source_team, json[QString("source_team")]);
    m_source_team_isSet = !json[QString("source_team")].isNull() && m_source_team_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thread_ts_isValid = ::OpenAPI::fromJsonValue(m_thread_ts, json[QString("thread_ts")]);
    m_thread_ts_isSet = !json[QString("thread_ts")].isNull() && m_thread_ts_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_profile_isValid = ::OpenAPI::fromJsonValue(m_user_profile, json[QString("user_profile")]);
    m_user_profile_isSet = !json[QString("user_profile")].isNull() && m_user_profile_isValid;

    m_user_team_isValid = ::OpenAPI::fromJsonValue(m_user_team, json[QString("user_team")]);
    m_user_team_isSet = !json[QString("user_team")].isNull() && m_user_team_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::asJsonObject() const {
    QJsonObject obj;
    if (m_is_starred_isSet) {
        obj.insert(QString("is_starred"), ::OpenAPI::toJsonValue(m_is_starred));
    }
    if (m_parent_user_id_isSet) {
        obj.insert(QString("parent_user_id"), ::OpenAPI::toJsonValue(m_parent_user_id));
    }
    if (m_source_team_isSet) {
        obj.insert(QString("source_team"), ::OpenAPI::toJsonValue(m_source_team));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thread_ts_isSet) {
        obj.insert(QString("thread_ts"), ::OpenAPI::toJsonValue(m_thread_ts));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_profile.isSet()) {
        obj.insert(QString("user_profile"), ::OpenAPI::toJsonValue(m_user_profile));
    }
    if (m_user_team_isSet) {
        obj.insert(QString("user_team"), ::OpenAPI::toJsonValue(m_user_team));
    }
    return obj;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::isIsStarred() const {
    return m_is_starred;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setIsStarred(const bool &is_starred) {
    m_is_starred = is_starred;
    m_is_starred_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_is_starred_Set() const{
    return m_is_starred_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_is_starred_Valid() const{
    return m_is_starred_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getParentUserId() const {
    return m_parent_user_id;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setParentUserId(const QString &parent_user_id) {
    m_parent_user_id = parent_user_id;
    m_parent_user_id_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_parent_user_id_Set() const{
    return m_parent_user_id_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_parent_user_id_Valid() const{
    return m_parent_user_id_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getSourceTeam() const {
    return m_source_team;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setSourceTeam(const QString &source_team) {
    m_source_team = source_team;
    m_source_team_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_source_team_Set() const{
    return m_source_team_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_source_team_Valid() const{
    return m_source_team_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getTeam() const {
    return m_team;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_team_Set() const{
    return m_team_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getText() const {
    return m_text;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_text_Set() const{
    return m_text_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getThreadTs() const {
    return m_thread_ts;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setThreadTs(const QString &thread_ts) {
    m_thread_ts = thread_ts;
    m_thread_ts_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_thread_ts_Set() const{
    return m_thread_ts_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_thread_ts_Valid() const{
    return m_thread_ts_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getTs() const {
    return m_ts;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setTs(const QString &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getType() const {
    return m_type;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getUser() const {
    return m_user;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_user_Set() const{
    return m_user_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_user_Valid() const{
    return m_user_isValid;
}

OAIObjs_user_profile_short OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getUserProfile() const {
    return m_user_profile;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setUserProfile(const OAIObjs_user_profile_short &user_profile) {
    m_user_profile = user_profile;
    m_user_profile_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_user_profile_Set() const{
    return m_user_profile_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_user_profile_Valid() const{
    return m_user_profile_isValid;
}

QString OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::getUserTeam() const {
    return m_user_team;
}
void OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::setUserTeam(const QString &user_team) {
    m_user_team = user_team;
    m_user_team_isSet = true;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_user_team_Set() const{
    return m_user_team_isSet;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::is_user_team_Valid() const{
    return m_user_team_isValid;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_team_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_replies_success_schema_messages_inner_inner_anyOf_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parent_user_id_isValid && m_text_isValid && m_thread_ts_isValid && m_ts_isValid && m_type_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
