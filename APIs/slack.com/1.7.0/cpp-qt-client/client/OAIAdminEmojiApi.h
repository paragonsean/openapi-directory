/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminEmojiApi_H
#define OAI_OAIAdminEmojiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefault_error_template.h"
#include "OAIDefault_success_template.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminEmojiApi : public QObject {
    Q_OBJECT

public:
    OAIAdminEmojiApi(const int timeOut = 0);
    ~OAIAdminEmojiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  token QString [required]
    * @param[in]  url QString [required]
    */
    virtual void adminEmojiAdd(const QString &name, const QString &token, const QString &url);

    /**
    * @param[in]  alias_for QString [required]
    * @param[in]  name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminEmojiAddAlias(const QString &alias_for, const QString &name, const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminEmojiList(const QString &token, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminEmojiRemove(const QString &name, const QString &token);

    /**
    * @param[in]  name QString [required]
    * @param[in]  new_name QString [required]
    * @param[in]  token QString [required]
    */
    virtual void adminEmojiRename(const QString &name, const QString &new_name, const QString &token);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminEmojiAddCallback(OAIHttpRequestWorker *worker);
    void adminEmojiAddAliasCallback(OAIHttpRequestWorker *worker);
    void adminEmojiListCallback(OAIHttpRequestWorker *worker);
    void adminEmojiRemoveCallback(OAIHttpRequestWorker *worker);
    void adminEmojiRenameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminEmojiAddSignal(OAIDefault_success_template summary);
    void adminEmojiAddAliasSignal(OAIDefault_success_template summary);
    void adminEmojiListSignal(OAIDefault_success_template summary);
    void adminEmojiRemoveSignal(OAIDefault_success_template summary);
    void adminEmojiRenameSignal(OAIDefault_success_template summary);


    void adminEmojiAddSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiAddAliasSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiRemoveSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminEmojiRenameSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);

    Q_DECL_DEPRECATED_X("Use adminEmojiAddSignalError() instead")
    void adminEmojiAddSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiAddAliasSignalError() instead")
    void adminEmojiAddAliasSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddAliasSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiListSignalError() instead")
    void adminEmojiListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRemoveSignalError() instead")
    void adminEmojiRemoveSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRemoveSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRenameSignalError() instead")
    void adminEmojiRenameSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRenameSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminEmojiAddSignalErrorFull() instead")
    void adminEmojiAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiAddAliasSignalErrorFull() instead")
    void adminEmojiAddAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiAddAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiListSignalErrorFull() instead")
    void adminEmojiListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRemoveSignalErrorFull() instead")
    void adminEmojiRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminEmojiRenameSignalErrorFull() instead")
    void adminEmojiRenameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminEmojiRenameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
