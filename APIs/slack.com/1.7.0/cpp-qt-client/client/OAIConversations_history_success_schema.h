/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversations_history_success_schema.h
 *
 * Schema for successful response from conversations.history method
 */

#ifndef OAIConversations_history_success_schema_H
#define OAIConversations_history_success_schema_H

#include <QJsonObject>

#include "OAIConversations_history_success_schema_channel_actions_ts_inner.h"
#include "OAIObjs_message.h"
#include <QList>
#include <QSet>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjs_message;

class OAIConversations_history_success_schema : public OAIObject {
public:
    OAIConversations_history_success_schema();
    OAIConversations_history_success_schema(QString json);
    ~OAIConversations_history_success_schema() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getChannelActionsCount() const;
    void setChannelActionsCount(const qint32 &channel_actions_count);
    bool is_channel_actions_count_Set() const;
    bool is_channel_actions_count_Valid() const;

    QList<OAIConversations_history_success_schema_channel_actions_ts_inner> getChannelActionsTs() const;
    void setChannelActionsTs(const QList<OAIConversations_history_success_schema_channel_actions_ts_inner> &channel_actions_ts);
    bool is_channel_actions_ts_Set() const;
    bool is_channel_actions_ts_Valid() const;

    bool isHasMore() const;
    void setHasMore(const bool &has_more);
    bool is_has_more_Set() const;
    bool is_has_more_Valid() const;

    QSet<OAIObjs_message> getMessages() const;
    void setMessages(const QSet<OAIObjs_message> &messages);
    bool is_messages_Set() const;
    bool is_messages_Valid() const;

    bool isOk() const;
    void setOk(const bool &ok);
    bool is_ok_Set() const;
    bool is_ok_Valid() const;

    qint32 getPinCount() const;
    void setPinCount(const qint32 &pin_count);
    bool is_pin_count_Set() const;
    bool is_pin_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_channel_actions_count;
    bool m_channel_actions_count_isSet;
    bool m_channel_actions_count_isValid;

    QList<OAIConversations_history_success_schema_channel_actions_ts_inner> m_channel_actions_ts;
    bool m_channel_actions_ts_isSet;
    bool m_channel_actions_ts_isValid;

    bool m_has_more;
    bool m_has_more_isSet;
    bool m_has_more_isValid;

    QSet<OAIObjs_message> m_messages;
    bool m_messages_isSet;
    bool m_messages_isValid;

    bool m_ok;
    bool m_ok_isSet;
    bool m_ok_isValid;

    qint32 m_pin_count;
    bool m_pin_count_isSet;
    bool m_pin_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversations_history_success_schema)

#endif // OAIConversations_history_success_schema_H
