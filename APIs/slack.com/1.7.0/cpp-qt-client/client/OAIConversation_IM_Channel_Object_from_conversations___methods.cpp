/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation_IM_Channel_Object_from_conversations___methods.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation_IM_Channel_Object_from_conversations___methods::OAIConversation_IM_Channel_Object_from_conversations___methods(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation_IM_Channel_Object_from_conversations___methods::OAIConversation_IM_Channel_Object_from_conversations___methods() {
    this->initializeModel();
}

OAIConversation_IM_Channel_Object_from_conversations___methods::~OAIConversation_IM_Channel_Object_from_conversations___methods() {}

void OAIConversation_IM_Channel_Object_from_conversations___methods::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_has_pins_isSet = false;
    m_has_pins_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_is_ext_shared_isSet = false;
    m_is_ext_shared_isValid = false;

    m_is_frozen_isSet = false;
    m_is_frozen_isValid = false;

    m_is_im_isSet = false;
    m_is_im_isValid = false;

    m_is_open_isSet = false;
    m_is_open_isValid = false;

    m_is_org_shared_isSet = false;
    m_is_org_shared_isValid = false;

    m_is_shared_isSet = false;
    m_is_shared_isValid = false;

    m_is_starred_isSet = false;
    m_is_starred_isValid = false;

    m_is_user_deleted_isSet = false;
    m_is_user_deleted_isValid = false;

    m_last_read_isSet = false;
    m_last_read_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_parent_conversation_isSet = false;
    m_parent_conversation_isValid = false;

    m_pin_count_isSet = false;
    m_pin_count_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_shares_isSet = false;
    m_shares_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;

    m_unread_count_display_isSet = false;
    m_unread_count_display_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConversation_IM_Channel_Object_from_conversations___methods::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation_IM_Channel_Object_from_conversations___methods::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_has_pins_isValid = ::OpenAPI::fromJsonValue(m_has_pins, json[QString("has_pins")]);
    m_has_pins_isSet = !json[QString("has_pins")].isNull() && m_has_pins_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("is_archived")]);
    m_is_archived_isSet = !json[QString("is_archived")].isNull() && m_is_archived_isValid;

    m_is_ext_shared_isValid = ::OpenAPI::fromJsonValue(m_is_ext_shared, json[QString("is_ext_shared")]);
    m_is_ext_shared_isSet = !json[QString("is_ext_shared")].isNull() && m_is_ext_shared_isValid;

    m_is_frozen_isValid = ::OpenAPI::fromJsonValue(m_is_frozen, json[QString("is_frozen")]);
    m_is_frozen_isSet = !json[QString("is_frozen")].isNull() && m_is_frozen_isValid;

    m_is_im_isValid = ::OpenAPI::fromJsonValue(m_is_im, json[QString("is_im")]);
    m_is_im_isSet = !json[QString("is_im")].isNull() && m_is_im_isValid;

    m_is_open_isValid = ::OpenAPI::fromJsonValue(m_is_open, json[QString("is_open")]);
    m_is_open_isSet = !json[QString("is_open")].isNull() && m_is_open_isValid;

    m_is_org_shared_isValid = ::OpenAPI::fromJsonValue(m_is_org_shared, json[QString("is_org_shared")]);
    m_is_org_shared_isSet = !json[QString("is_org_shared")].isNull() && m_is_org_shared_isValid;

    m_is_shared_isValid = ::OpenAPI::fromJsonValue(m_is_shared, json[QString("is_shared")]);
    m_is_shared_isSet = !json[QString("is_shared")].isNull() && m_is_shared_isValid;

    m_is_starred_isValid = ::OpenAPI::fromJsonValue(m_is_starred, json[QString("is_starred")]);
    m_is_starred_isSet = !json[QString("is_starred")].isNull() && m_is_starred_isValid;

    m_is_user_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_user_deleted, json[QString("is_user_deleted")]);
    m_is_user_deleted_isSet = !json[QString("is_user_deleted")].isNull() && m_is_user_deleted_isValid;

    m_last_read_isValid = ::OpenAPI::fromJsonValue(m_last_read, json[QString("last_read")]);
    m_last_read_isSet = !json[QString("last_read")].isNull() && m_last_read_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_parent_conversation_isValid = ::OpenAPI::fromJsonValue(m_parent_conversation, json[QString("parent_conversation")]);
    m_parent_conversation_isSet = !json[QString("parent_conversation")].isNull() && m_parent_conversation_isValid;

    m_pin_count_isValid = ::OpenAPI::fromJsonValue(m_pin_count, json[QString("pin_count")]);
    m_pin_count_isSet = !json[QString("pin_count")].isNull() && m_pin_count_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_shares_isValid = ::OpenAPI::fromJsonValue(m_shares, json[QString("shares")]);
    m_shares_isSet = !json[QString("shares")].isNull() && m_shares_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("unread_count")]);
    m_unread_count_isSet = !json[QString("unread_count")].isNull() && m_unread_count_isValid;

    m_unread_count_display_isValid = ::OpenAPI::fromJsonValue(m_unread_count_display, json[QString("unread_count_display")]);
    m_unread_count_display_isSet = !json[QString("unread_count_display")].isNull() && m_unread_count_display_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConversation_IM_Channel_Object_from_conversations___methods::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation_IM_Channel_Object_from_conversations___methods::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_has_pins_isSet) {
        obj.insert(QString("has_pins"), ::OpenAPI::toJsonValue(m_has_pins));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("is_archived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_is_ext_shared_isSet) {
        obj.insert(QString("is_ext_shared"), ::OpenAPI::toJsonValue(m_is_ext_shared));
    }
    if (m_is_frozen_isSet) {
        obj.insert(QString("is_frozen"), ::OpenAPI::toJsonValue(m_is_frozen));
    }
    if (m_is_im_isSet) {
        obj.insert(QString("is_im"), ::OpenAPI::toJsonValue(m_is_im));
    }
    if (m_is_open_isSet) {
        obj.insert(QString("is_open"), ::OpenAPI::toJsonValue(m_is_open));
    }
    if (m_is_org_shared_isSet) {
        obj.insert(QString("is_org_shared"), ::OpenAPI::toJsonValue(m_is_org_shared));
    }
    if (m_is_shared_isSet) {
        obj.insert(QString("is_shared"), ::OpenAPI::toJsonValue(m_is_shared));
    }
    if (m_is_starred_isSet) {
        obj.insert(QString("is_starred"), ::OpenAPI::toJsonValue(m_is_starred));
    }
    if (m_is_user_deleted_isSet) {
        obj.insert(QString("is_user_deleted"), ::OpenAPI::toJsonValue(m_is_user_deleted));
    }
    if (m_last_read_isSet) {
        obj.insert(QString("last_read"), ::OpenAPI::toJsonValue(m_last_read));
    }
    if (m_latest.size() > 0) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_parent_conversation.size() > 0) {
        obj.insert(QString("parent_conversation"), ::OpenAPI::toJsonValue(m_parent_conversation));
    }
    if (m_pin_count_isSet) {
        obj.insert(QString("pin_count"), ::OpenAPI::toJsonValue(m_pin_count));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_shares.size() > 0) {
        obj.insert(QString("shares"), ::OpenAPI::toJsonValue(m_shares));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("unread_count"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    if (m_unread_count_display_isSet) {
        obj.insert(QString("unread_count_display"), ::OpenAPI::toJsonValue(m_unread_count_display));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIConversation_IM_Channel_Object_from_conversations___methods::getCreated() const {
    return m_created;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_created_Set() const{
    return m_created_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_created_Valid() const{
    return m_created_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isHasPins() const {
    return m_has_pins;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setHasPins(const bool &has_pins) {
    m_has_pins = has_pins;
    m_has_pins_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_has_pins_Set() const{
    return m_has_pins_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_has_pins_Valid() const{
    return m_has_pins_isValid;
}

QString OAIConversation_IM_Channel_Object_from_conversations___methods::getId() const {
    return m_id;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsArchived() const {
    return m_is_archived;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsExtShared() const {
    return m_is_ext_shared;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsExtShared(const bool &is_ext_shared) {
    m_is_ext_shared = is_ext_shared;
    m_is_ext_shared_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_ext_shared_Set() const{
    return m_is_ext_shared_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_ext_shared_Valid() const{
    return m_is_ext_shared_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsFrozen() const {
    return m_is_frozen;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsFrozen(const bool &is_frozen) {
    m_is_frozen = is_frozen;
    m_is_frozen_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_frozen_Set() const{
    return m_is_frozen_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_frozen_Valid() const{
    return m_is_frozen_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsIm() const {
    return m_is_im;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsIm(const bool &is_im) {
    m_is_im = is_im;
    m_is_im_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_im_Set() const{
    return m_is_im_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_im_Valid() const{
    return m_is_im_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsOpen() const {
    return m_is_open;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsOpen(const bool &is_open) {
    m_is_open = is_open;
    m_is_open_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_open_Set() const{
    return m_is_open_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_open_Valid() const{
    return m_is_open_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsOrgShared() const {
    return m_is_org_shared;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsOrgShared(const bool &is_org_shared) {
    m_is_org_shared = is_org_shared;
    m_is_org_shared_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_org_shared_Set() const{
    return m_is_org_shared_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_org_shared_Valid() const{
    return m_is_org_shared_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsShared() const {
    return m_is_shared;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsShared(const bool &is_shared) {
    m_is_shared = is_shared;
    m_is_shared_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_shared_Set() const{
    return m_is_shared_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_shared_Valid() const{
    return m_is_shared_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsStarred() const {
    return m_is_starred;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsStarred(const bool &is_starred) {
    m_is_starred = is_starred;
    m_is_starred_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_starred_Set() const{
    return m_is_starred_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_starred_Valid() const{
    return m_is_starred_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isIsUserDeleted() const {
    return m_is_user_deleted;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setIsUserDeleted(const bool &is_user_deleted) {
    m_is_user_deleted = is_user_deleted;
    m_is_user_deleted_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_user_deleted_Set() const{
    return m_is_user_deleted_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_is_user_deleted_Valid() const{
    return m_is_user_deleted_isValid;
}

QString OAIConversation_IM_Channel_Object_from_conversations___methods::getLastRead() const {
    return m_last_read;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setLastRead(const QString &last_read) {
    m_last_read = last_read;
    m_last_read_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_last_read_Set() const{
    return m_last_read_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_last_read_Valid() const{
    return m_last_read_isValid;
}

QList<OAIObjs_channel_latest_inner> OAIConversation_IM_Channel_Object_from_conversations___methods::getLatest() const {
    return m_latest;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setLatest(const QList<OAIObjs_channel_latest_inner> &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_latest_Valid() const{
    return m_latest_isValid;
}

QList<OAIConversation_object_parent_conversation_inner> OAIConversation_IM_Channel_Object_from_conversations___methods::getParentConversation() const {
    return m_parent_conversation;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setParentConversation(const QList<OAIConversation_object_parent_conversation_inner> &parent_conversation) {
    m_parent_conversation = parent_conversation;
    m_parent_conversation_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_parent_conversation_Set() const{
    return m_parent_conversation_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_parent_conversation_Valid() const{
    return m_parent_conversation_isValid;
}

qint32 OAIConversation_IM_Channel_Object_from_conversations___methods::getPinCount() const {
    return m_pin_count;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setPinCount(const qint32 &pin_count) {
    m_pin_count = pin_count;
    m_pin_count_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_pin_count_Set() const{
    return m_pin_count_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_pin_count_Valid() const{
    return m_pin_count_isValid;
}

double OAIConversation_IM_Channel_Object_from_conversations___methods::getPriority() const {
    return m_priority;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setPriority(const double &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_priority_Valid() const{
    return m_priority_isValid;
}

QSet<OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner> OAIConversation_IM_Channel_Object_from_conversations___methods::getShares() const {
    return m_shares;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setShares(const QSet<OAIConversation_IM_Channel_Object_from_conversations___methods_shares_inner> &shares) {
    m_shares = shares;
    m_shares_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_shares_Set() const{
    return m_shares_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_shares_Valid() const{
    return m_shares_isValid;
}

qint32 OAIConversation_IM_Channel_Object_from_conversations___methods::getUnreadCount() const {
    return m_unread_count;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setUnreadCount(const qint32 &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

qint32 OAIConversation_IM_Channel_Object_from_conversations___methods::getUnreadCountDisplay() const {
    return m_unread_count_display;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setUnreadCountDisplay(const qint32 &unread_count_display) {
    m_unread_count_display = unread_count_display;
    m_unread_count_display_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_unread_count_display_Set() const{
    return m_unread_count_display_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_unread_count_display_Valid() const{
    return m_unread_count_display_isValid;
}

QString OAIConversation_IM_Channel_Object_from_conversations___methods::getUser() const {
    return m_user;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_user_Set() const{
    return m_user_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_user_Valid() const{
    return m_user_isValid;
}

qint32 OAIConversation_IM_Channel_Object_from_conversations___methods::getVersion() const {
    return m_version;
}
void OAIConversation_IM_Channel_Object_from_conversations___methods::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ext_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_frozen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_im_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_org_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_conversation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation_IM_Channel_Object_from_conversations___methods::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_id_isValid && m_is_im_isValid && m_is_org_shared_isValid && m_priority_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
