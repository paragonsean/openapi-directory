/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefault_error_template.h"
#include "OAIDefault_success_template.h"
#include "OAIFiles_comments_delete_error_schema.h"
#include "OAIFiles_comments_delete_schema.h"
#include "OAIFiles_delete_error_schema.h"
#include "OAIFiles_delete_schema.h"
#include "OAIFiles_info_error_schema.h"
#include "OAIFiles_info_schema.h"
#include "OAIFiles_list_error_schema.h"
#include "OAIFiles_list_schema.h"
#include "OAIFiles_revokePublicURL_error_schema.h"
#include "OAIFiles_revokePublicURL_schema.h"
#include "OAIFiles_sharedPublicURL_error_schema.h"
#include "OAIFiles_sharedPublicURL_schema.h"
#include "OAIFiles_upload_error_schema.h"
#include "OAIFiles_upload_schema.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  id QString [optional]
    */
    virtual void filesCommentsDelete(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  file QString [optional]
    */
    virtual void filesDelete(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void filesInfo(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  user QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  ts_from double [optional]
    * @param[in]  ts_to double [optional]
    * @param[in]  types QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  page QString [optional]
    * @param[in]  show_files_hidden_by_limit bool [optional]
    */
    virtual void filesList(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &ts_from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ts_to = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_files_hidden_by_limit = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  external_id QString [optional]
    * @param[in]  external_url QString [optional]
    * @param[in]  filetype QString [optional]
    * @param[in]  indexable_file_contents QString [optional]
    * @param[in]  preview_image QString [optional]
    * @param[in]  title QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void filesRemoteAdd(const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filetype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &indexable_file_contents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preview_image = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  external_id QString [optional]
    */
    virtual void filesRemoteInfo(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  channel QString [optional]
    * @param[in]  ts_from double [optional]
    * @param[in]  ts_to double [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void filesRemoteList(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &ts_from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &ts_to = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  external_id QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void filesRemoteRemove(const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  external_id QString [optional]
    * @param[in]  channels QString [optional]
    */
    virtual void filesRemoteShare(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &channels = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  external_id QString [optional]
    * @param[in]  external_url QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  filetype QString [optional]
    * @param[in]  indexable_file_contents QString [optional]
    * @param[in]  preview_image QString [optional]
    * @param[in]  title QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void filesRemoteUpdate(const ::OpenAPI::OptionalParam<QString> &external_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filetype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &indexable_file_contents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preview_image = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  file QString [optional]
    */
    virtual void filesRevokePublicURL(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [optional]
    * @param[in]  file QString [optional]
    */
    virtual void filesSharedPublicURL(const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channels QString [optional]
    * @param[in]  content QString [optional]
    * @param[in]  file QString [optional]
    * @param[in]  filename QString [optional]
    * @param[in]  filetype QString [optional]
    * @param[in]  initial_comment QString [optional]
    * @param[in]  thread_ts double [optional]
    * @param[in]  title QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void filesUpload(const ::OpenAPI::OptionalParam<QString> &channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filetype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &initial_comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &thread_ts = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void filesCommentsDeleteCallback(OAIHttpRequestWorker *worker);
    void filesDeleteCallback(OAIHttpRequestWorker *worker);
    void filesInfoCallback(OAIHttpRequestWorker *worker);
    void filesListCallback(OAIHttpRequestWorker *worker);
    void filesRemoteAddCallback(OAIHttpRequestWorker *worker);
    void filesRemoteInfoCallback(OAIHttpRequestWorker *worker);
    void filesRemoteListCallback(OAIHttpRequestWorker *worker);
    void filesRemoteRemoveCallback(OAIHttpRequestWorker *worker);
    void filesRemoteShareCallback(OAIHttpRequestWorker *worker);
    void filesRemoteUpdateCallback(OAIHttpRequestWorker *worker);
    void filesRevokePublicURLCallback(OAIHttpRequestWorker *worker);
    void filesSharedPublicURLCallback(OAIHttpRequestWorker *worker);
    void filesUploadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void filesCommentsDeleteSignal(OAIFiles_comments_delete_schema summary);
    void filesDeleteSignal(OAIFiles_delete_schema summary);
    void filesInfoSignal(OAIFiles_info_schema summary);
    void filesListSignal(OAIFiles_list_schema summary);
    void filesRemoteAddSignal(OAIDefault_success_template summary);
    void filesRemoteInfoSignal(OAIDefault_success_template summary);
    void filesRemoteListSignal(OAIDefault_success_template summary);
    void filesRemoteRemoveSignal(OAIDefault_success_template summary);
    void filesRemoteShareSignal(OAIDefault_success_template summary);
    void filesRemoteUpdateSignal(OAIDefault_success_template summary);
    void filesRevokePublicURLSignal(OAIFiles_revokePublicURL_schema summary);
    void filesSharedPublicURLSignal(OAIFiles_sharedPublicURL_schema summary);
    void filesUploadSignal(OAIFiles_upload_schema summary);


    void filesCommentsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIFiles_comments_delete_schema summary);
    void filesDeleteSignalFull(OAIHttpRequestWorker *worker, OAIFiles_delete_schema summary);
    void filesInfoSignalFull(OAIHttpRequestWorker *worker, OAIFiles_info_schema summary);
    void filesListSignalFull(OAIHttpRequestWorker *worker, OAIFiles_list_schema summary);
    void filesRemoteAddSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void filesRemoteInfoSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void filesRemoteListSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void filesRemoteRemoveSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void filesRemoteShareSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void filesRemoteUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void filesRevokePublicURLSignalFull(OAIHttpRequestWorker *worker, OAIFiles_revokePublicURL_schema summary);
    void filesSharedPublicURLSignalFull(OAIHttpRequestWorker *worker, OAIFiles_sharedPublicURL_schema summary);
    void filesUploadSignalFull(OAIHttpRequestWorker *worker, OAIFiles_upload_schema summary);

    Q_DECL_DEPRECATED_X("Use filesCommentsDeleteSignalError() instead")
    void filesCommentsDeleteSignalE(OAIFiles_comments_delete_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesCommentsDeleteSignalError(OAIFiles_comments_delete_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesDeleteSignalError() instead")
    void filesDeleteSignalE(OAIFiles_delete_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesDeleteSignalError(OAIFiles_delete_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesInfoSignalError() instead")
    void filesInfoSignalE(OAIFiles_info_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesInfoSignalError(OAIFiles_info_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesListSignalError() instead")
    void filesListSignalE(OAIFiles_list_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesListSignalError(OAIFiles_list_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteAddSignalError() instead")
    void filesRemoteAddSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteAddSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteInfoSignalError() instead")
    void filesRemoteInfoSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteInfoSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteListSignalError() instead")
    void filesRemoteListSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteListSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteRemoveSignalError() instead")
    void filesRemoteRemoveSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteRemoveSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteShareSignalError() instead")
    void filesRemoteShareSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteShareSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteUpdateSignalError() instead")
    void filesRemoteUpdateSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteUpdateSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRevokePublicURLSignalError() instead")
    void filesRevokePublicURLSignalE(OAIFiles_revokePublicURL_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRevokePublicURLSignalError(OAIFiles_revokePublicURL_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesSharedPublicURLSignalError() instead")
    void filesSharedPublicURLSignalE(OAIFiles_sharedPublicURL_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesSharedPublicURLSignalError(OAIFiles_sharedPublicURL_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesUploadSignalError() instead")
    void filesUploadSignalE(OAIFiles_upload_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filesUploadSignalError(OAIFiles_upload_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use filesCommentsDeleteSignalErrorFull() instead")
    void filesCommentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesCommentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesDeleteSignalErrorFull() instead")
    void filesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesInfoSignalErrorFull() instead")
    void filesInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesListSignalErrorFull() instead")
    void filesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteAddSignalErrorFull() instead")
    void filesRemoteAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteInfoSignalErrorFull() instead")
    void filesRemoteInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteListSignalErrorFull() instead")
    void filesRemoteListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteRemoveSignalErrorFull() instead")
    void filesRemoteRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteShareSignalErrorFull() instead")
    void filesRemoteShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRemoteUpdateSignalErrorFull() instead")
    void filesRemoteUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRemoteUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesRevokePublicURLSignalErrorFull() instead")
    void filesRevokePublicURLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesRevokePublicURLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesSharedPublicURLSignalErrorFull() instead")
    void filesSharedPublicURLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesSharedPublicURLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filesUploadSignalErrorFull() instead")
    void filesUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filesUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
