/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDnd_info_schema.h
 *
 * Schema for successful response from dnd.info method
 */

#ifndef OAIDnd_info_schema_H
#define OAIDnd_info_schema_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDnd_info_schema : public OAIObject {
public:
    OAIDnd_info_schema();
    OAIDnd_info_schema(QString json);
    ~OAIDnd_info_schema() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDndEnabled() const;
    void setDndEnabled(const bool &dnd_enabled);
    bool is_dnd_enabled_Set() const;
    bool is_dnd_enabled_Valid() const;

    qint32 getNextDndEndTs() const;
    void setNextDndEndTs(const qint32 &next_dnd_end_ts);
    bool is_next_dnd_end_ts_Set() const;
    bool is_next_dnd_end_ts_Valid() const;

    qint32 getNextDndStartTs() const;
    void setNextDndStartTs(const qint32 &next_dnd_start_ts);
    bool is_next_dnd_start_ts_Set() const;
    bool is_next_dnd_start_ts_Valid() const;

    bool isOk() const;
    void setOk(const bool &ok);
    bool is_ok_Set() const;
    bool is_ok_Valid() const;

    bool isSnoozeEnabled() const;
    void setSnoozeEnabled(const bool &snooze_enabled);
    bool is_snooze_enabled_Set() const;
    bool is_snooze_enabled_Valid() const;

    qint32 getSnoozeEndtime() const;
    void setSnoozeEndtime(const qint32 &snooze_endtime);
    bool is_snooze_endtime_Set() const;
    bool is_snooze_endtime_Valid() const;

    qint32 getSnoozeRemaining() const;
    void setSnoozeRemaining(const qint32 &snooze_remaining);
    bool is_snooze_remaining_Set() const;
    bool is_snooze_remaining_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_dnd_enabled;
    bool m_dnd_enabled_isSet;
    bool m_dnd_enabled_isValid;

    qint32 m_next_dnd_end_ts;
    bool m_next_dnd_end_ts_isSet;
    bool m_next_dnd_end_ts_isValid;

    qint32 m_next_dnd_start_ts;
    bool m_next_dnd_start_ts_isSet;
    bool m_next_dnd_start_ts_isValid;

    bool m_ok;
    bool m_ok_isSet;
    bool m_ok_isValid;

    bool m_snooze_enabled;
    bool m_snooze_enabled_isSet;
    bool m_snooze_enabled_isValid;

    qint32 m_snooze_endtime;
    bool m_snooze_endtime_isSet;
    bool m_snooze_endtime_isValid;

    qint32 m_snooze_remaining;
    bool m_snooze_remaining_isSet;
    bool m_snooze_remaining_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDnd_info_schema)

#endif // OAIDnd_info_schema_H
