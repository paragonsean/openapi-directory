/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIChatApi::OAIChatApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIChatApi::~OAIChatApi() {
}

void OAIChatApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://slack.com/api"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("chatDelete", defaultConf);
    _serverIndices.insert("chatDelete", 0);
    _serverConfigs.insert("chatDeleteScheduledMessage", defaultConf);
    _serverIndices.insert("chatDeleteScheduledMessage", 0);
    _serverConfigs.insert("chatGetPermalink", defaultConf);
    _serverIndices.insert("chatGetPermalink", 0);
    _serverConfigs.insert("chatMeMessage", defaultConf);
    _serverIndices.insert("chatMeMessage", 0);
    _serverConfigs.insert("chatPostEphemeral", defaultConf);
    _serverIndices.insert("chatPostEphemeral", 0);
    _serverConfigs.insert("chatPostMessage", defaultConf);
    _serverIndices.insert("chatPostMessage", 0);
    _serverConfigs.insert("chatScheduleMessage", defaultConf);
    _serverIndices.insert("chatScheduleMessage", 0);
    _serverConfigs.insert("chatScheduledMessagesList", defaultConf);
    _serverIndices.insert("chatScheduledMessagesList", 0);
    _serverConfigs.insert("chatUnfurl", defaultConf);
    _serverIndices.insert("chatUnfurl", 0);
    _serverConfigs.insert("chatUpdate", defaultConf);
    _serverIndices.insert("chatUpdate", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIChatApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIChatApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIChatApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIChatApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIChatApi::setUsername(const QString &username) {
    _username = username;
}

void OAIChatApi::setPassword(const QString &password) {
    _password = password;
}


void OAIChatApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIChatApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIChatApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIChatApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChatApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIChatApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIChatApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIChatApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIChatApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIChatApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIChatApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIChatApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIChatApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIChatApi::chatDelete(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<bool> &as_user, const ::OpenAPI::OptionalParam<QString> &channel, const ::OpenAPI::OptionalParam<double> &ts) {
    QString fullPath = QString(_serverConfigs["chatDelete"][_serverIndices.value("chatDelete")].URL()+"/chat.delete");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (as_user.hasValue())
    {
        input.add_var("as_user", ::OpenAPI::toStringValue(as_user.value()));
    }
    if (channel.hasValue())
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel.value()));
    }
    if (ts.hasValue())
    {
        input.add_var("ts", ::OpenAPI::toStringValue(ts.value()));
    }

    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatDeleteCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("chat:write:user");
    scope.append("chat:write:bot");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatDeleteCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_delete_success_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatDeleteSignal(output);
        Q_EMIT chatDeleteSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("chat:write:user");
        scope.append("chat:write:bot");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatDeleteSignalE(output, error_type, error_str);
        Q_EMIT chatDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatDeleteSignalError(output, error_type, error_str);
        Q_EMIT chatDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatDeleteScheduledMessage(const QString &token, const QString &channel, const QString &scheduled_message_id, const ::OpenAPI::OptionalParam<bool> &as_user) {
    QString fullPath = QString(_serverConfigs["chatDeleteScheduledMessage"][_serverIndices.value("chatDeleteScheduledMessage")].URL()+"/chat.deleteScheduledMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (as_user.hasValue())
    {
        input.add_var("as_user", ::OpenAPI::toStringValue(as_user.value()));
    }
    
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel));
    }
    
    {
        input.add_var("scheduled_message_id", ::OpenAPI::toStringValue(scheduled_message_id));
    }

    
    {
        if (!::OpenAPI::toStringValue(token).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatDeleteScheduledMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("chat:write:user");
    scope.append("chat:write:bot");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatDeleteScheduledMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatDeleteScheduledMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_deleteScheduledMessage_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatDeleteScheduledMessageSignal(output);
        Q_EMIT chatDeleteScheduledMessageSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("chat:write:user");
        scope.append("chat:write:bot");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatDeleteScheduledMessageSignalE(output, error_type, error_str);
        Q_EMIT chatDeleteScheduledMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatDeleteScheduledMessageSignalError(output, error_type, error_str);
        Q_EMIT chatDeleteScheduledMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatGetPermalink(const QString &token, const QString &channel, const QString &message_ts) {
    QString fullPath = QString(_serverConfigs["chatGetPermalink"][_serverIndices.value("chatGetPermalink")].URL()+"/chat.getPermalink");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "token", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("token")).append(querySuffix).append(QUrl::toPercentEncoding(token));
    }
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "channel", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("channel")).append(querySuffix).append(QUrl::toPercentEncoding(channel));
    }
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "message_ts", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("message_ts")).append(querySuffix).append(QUrl::toPercentEncoding(message_ts));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatGetPermalinkCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("none");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatGetPermalinkCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatGetPermalinkCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_getPermalink_success_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatGetPermalinkSignal(output);
        Q_EMIT chatGetPermalinkSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("none");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatGetPermalinkSignalE(output, error_type, error_str);
        Q_EMIT chatGetPermalinkSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatGetPermalinkSignalError(output, error_type, error_str);
        Q_EMIT chatGetPermalinkSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatMeMessage(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<QString> &channel, const ::OpenAPI::OptionalParam<QString> &text) {
    QString fullPath = QString(_serverConfigs["chatMeMessage"][_serverIndices.value("chatMeMessage")].URL()+"/chat.meMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (channel.hasValue())
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel.value()));
    }
    if (text.hasValue())
    {
        input.add_var("text", ::OpenAPI::toStringValue(text.value()));
    }

    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatMeMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("chat:write:user");
    scope.append("chat:write:bot");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatMeMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatMeMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_meMessage_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatMeMessageSignal(output);
        Q_EMIT chatMeMessageSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("chat:write:user");
        scope.append("chat:write:bot");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatMeMessageSignalE(output, error_type, error_str);
        Q_EMIT chatMeMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatMeMessageSignalError(output, error_type, error_str);
        Q_EMIT chatMeMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatPostEphemeral(const QString &token, const QString &channel, const QString &user, const ::OpenAPI::OptionalParam<bool> &as_user, const ::OpenAPI::OptionalParam<QString> &attachments, const ::OpenAPI::OptionalParam<QString> &blocks, const ::OpenAPI::OptionalParam<QString> &icon_emoji, const ::OpenAPI::OptionalParam<QString> &icon_url, const ::OpenAPI::OptionalParam<bool> &link_names, const ::OpenAPI::OptionalParam<QString> &parse, const ::OpenAPI::OptionalParam<QString> &text, const ::OpenAPI::OptionalParam<QString> &thread_ts, const ::OpenAPI::OptionalParam<QString> &username) {
    QString fullPath = QString(_serverConfigs["chatPostEphemeral"][_serverIndices.value("chatPostEphemeral")].URL()+"/chat.postEphemeral");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (as_user.hasValue())
    {
        input.add_var("as_user", ::OpenAPI::toStringValue(as_user.value()));
    }
    if (attachments.hasValue())
    {
        input.add_var("attachments", ::OpenAPI::toStringValue(attachments.value()));
    }
    if (blocks.hasValue())
    {
        input.add_var("blocks", ::OpenAPI::toStringValue(blocks.value()));
    }
    
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel));
    }
    if (icon_emoji.hasValue())
    {
        input.add_var("icon_emoji", ::OpenAPI::toStringValue(icon_emoji.value()));
    }
    if (icon_url.hasValue())
    {
        input.add_var("icon_url", ::OpenAPI::toStringValue(icon_url.value()));
    }
    if (link_names.hasValue())
    {
        input.add_var("link_names", ::OpenAPI::toStringValue(link_names.value()));
    }
    if (parse.hasValue())
    {
        input.add_var("parse", ::OpenAPI::toStringValue(parse.value()));
    }
    if (text.hasValue())
    {
        input.add_var("text", ::OpenAPI::toStringValue(text.value()));
    }
    if (thread_ts.hasValue())
    {
        input.add_var("thread_ts", ::OpenAPI::toStringValue(thread_ts.value()));
    }
    
    {
        input.add_var("user", ::OpenAPI::toStringValue(user));
    }
    if (username.hasValue())
    {
        input.add_var("username", ::OpenAPI::toStringValue(username.value()));
    }

    
    {
        if (!::OpenAPI::toStringValue(token).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatPostEphemeralCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("chat:write:user");
    scope.append("chat:write:bot");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatPostEphemeralCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatPostEphemeralCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_postEphemeral_success_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatPostEphemeralSignal(output);
        Q_EMIT chatPostEphemeralSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("chat:write:user");
        scope.append("chat:write:bot");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatPostEphemeralSignalE(output, error_type, error_str);
        Q_EMIT chatPostEphemeralSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatPostEphemeralSignalError(output, error_type, error_str);
        Q_EMIT chatPostEphemeralSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatPostMessage(const QString &token, const QString &channel, const ::OpenAPI::OptionalParam<QString> &as_user, const ::OpenAPI::OptionalParam<QString> &attachments, const ::OpenAPI::OptionalParam<QString> &blocks, const ::OpenAPI::OptionalParam<QString> &icon_emoji, const ::OpenAPI::OptionalParam<QString> &icon_url, const ::OpenAPI::OptionalParam<bool> &link_names, const ::OpenAPI::OptionalParam<bool> &mrkdwn, const ::OpenAPI::OptionalParam<QString> &parse, const ::OpenAPI::OptionalParam<bool> &reply_broadcast, const ::OpenAPI::OptionalParam<QString> &text, const ::OpenAPI::OptionalParam<QString> &thread_ts, const ::OpenAPI::OptionalParam<bool> &unfurl_links, const ::OpenAPI::OptionalParam<bool> &unfurl_media, const ::OpenAPI::OptionalParam<QString> &username) {
    QString fullPath = QString(_serverConfigs["chatPostMessage"][_serverIndices.value("chatPostMessage")].URL()+"/chat.postMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (as_user.hasValue())
    {
        input.add_var("as_user", ::OpenAPI::toStringValue(as_user.value()));
    }
    if (attachments.hasValue())
    {
        input.add_var("attachments", ::OpenAPI::toStringValue(attachments.value()));
    }
    if (blocks.hasValue())
    {
        input.add_var("blocks", ::OpenAPI::toStringValue(blocks.value()));
    }
    
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel));
    }
    if (icon_emoji.hasValue())
    {
        input.add_var("icon_emoji", ::OpenAPI::toStringValue(icon_emoji.value()));
    }
    if (icon_url.hasValue())
    {
        input.add_var("icon_url", ::OpenAPI::toStringValue(icon_url.value()));
    }
    if (link_names.hasValue())
    {
        input.add_var("link_names", ::OpenAPI::toStringValue(link_names.value()));
    }
    if (mrkdwn.hasValue())
    {
        input.add_var("mrkdwn", ::OpenAPI::toStringValue(mrkdwn.value()));
    }
    if (parse.hasValue())
    {
        input.add_var("parse", ::OpenAPI::toStringValue(parse.value()));
    }
    if (reply_broadcast.hasValue())
    {
        input.add_var("reply_broadcast", ::OpenAPI::toStringValue(reply_broadcast.value()));
    }
    if (text.hasValue())
    {
        input.add_var("text", ::OpenAPI::toStringValue(text.value()));
    }
    if (thread_ts.hasValue())
    {
        input.add_var("thread_ts", ::OpenAPI::toStringValue(thread_ts.value()));
    }
    if (unfurl_links.hasValue())
    {
        input.add_var("unfurl_links", ::OpenAPI::toStringValue(unfurl_links.value()));
    }
    if (unfurl_media.hasValue())
    {
        input.add_var("unfurl_media", ::OpenAPI::toStringValue(unfurl_media.value()));
    }
    if (username.hasValue())
    {
        input.add_var("username", ::OpenAPI::toStringValue(username.value()));
    }

    
    {
        if (!::OpenAPI::toStringValue(token).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatPostMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("chat:write:user");
    scope.append("chat:write:bot");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatPostMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatPostMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_postMessage_success_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatPostMessageSignal(output);
        Q_EMIT chatPostMessageSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("chat:write:user");
        scope.append("chat:write:bot");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatPostMessageSignalE(output, error_type, error_str);
        Q_EMIT chatPostMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatPostMessageSignalError(output, error_type, error_str);
        Q_EMIT chatPostMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatScheduleMessage(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<bool> &as_user, const ::OpenAPI::OptionalParam<QString> &attachments, const ::OpenAPI::OptionalParam<QString> &blocks, const ::OpenAPI::OptionalParam<QString> &channel, const ::OpenAPI::OptionalParam<bool> &link_names, const ::OpenAPI::OptionalParam<QString> &parse, const ::OpenAPI::OptionalParam<QString> &post_at, const ::OpenAPI::OptionalParam<bool> &reply_broadcast, const ::OpenAPI::OptionalParam<QString> &text, const ::OpenAPI::OptionalParam<double> &thread_ts, const ::OpenAPI::OptionalParam<bool> &unfurl_links, const ::OpenAPI::OptionalParam<bool> &unfurl_media) {
    QString fullPath = QString(_serverConfigs["chatScheduleMessage"][_serverIndices.value("chatScheduleMessage")].URL()+"/chat.scheduleMessage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (as_user.hasValue())
    {
        input.add_var("as_user", ::OpenAPI::toStringValue(as_user.value()));
    }
    if (attachments.hasValue())
    {
        input.add_var("attachments", ::OpenAPI::toStringValue(attachments.value()));
    }
    if (blocks.hasValue())
    {
        input.add_var("blocks", ::OpenAPI::toStringValue(blocks.value()));
    }
    if (channel.hasValue())
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel.value()));
    }
    if (link_names.hasValue())
    {
        input.add_var("link_names", ::OpenAPI::toStringValue(link_names.value()));
    }
    if (parse.hasValue())
    {
        input.add_var("parse", ::OpenAPI::toStringValue(parse.value()));
    }
    if (post_at.hasValue())
    {
        input.add_var("post_at", ::OpenAPI::toStringValue(post_at.value()));
    }
    if (reply_broadcast.hasValue())
    {
        input.add_var("reply_broadcast", ::OpenAPI::toStringValue(reply_broadcast.value()));
    }
    if (text.hasValue())
    {
        input.add_var("text", ::OpenAPI::toStringValue(text.value()));
    }
    if (thread_ts.hasValue())
    {
        input.add_var("thread_ts", ::OpenAPI::toStringValue(thread_ts.value()));
    }
    if (unfurl_links.hasValue())
    {
        input.add_var("unfurl_links", ::OpenAPI::toStringValue(unfurl_links.value()));
    }
    if (unfurl_media.hasValue())
    {
        input.add_var("unfurl_media", ::OpenAPI::toStringValue(unfurl_media.value()));
    }

    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatScheduleMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("chat:write:user");
    scope.append("chat:write:bot");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatScheduleMessageCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatScheduleMessageCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_scheduleMessage_success_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatScheduleMessageSignal(output);
        Q_EMIT chatScheduleMessageSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("chat:write:user");
        scope.append("chat:write:bot");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatScheduleMessageSignalE(output, error_type, error_str);
        Q_EMIT chatScheduleMessageSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatScheduleMessageSignalError(output, error_type, error_str);
        Q_EMIT chatScheduleMessageSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatScheduledMessagesList(const ::OpenAPI::OptionalParam<QString> &token, const ::OpenAPI::OptionalParam<QString> &channel, const ::OpenAPI::OptionalParam<double> &latest, const ::OpenAPI::OptionalParam<double> &oldest, const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<QString> &cursor) {
    QString fullPath = QString(_serverConfigs["chatScheduledMessagesList"][_serverIndices.value("chatScheduledMessagesList")].URL()+"/chat.scheduledMessages.list");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (channel.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "channel", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("channel")).append(querySuffix).append(QUrl::toPercentEncoding(channel.stringValue()));
    }
    if (latest.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "latest", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("latest")).append(querySuffix).append(QUrl::toPercentEncoding(latest.stringValue()));
    }
    if (oldest.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "oldest", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("oldest")).append(querySuffix).append(QUrl::toPercentEncoding(oldest.stringValue()));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (cursor.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cursor", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cursor")).append(querySuffix).append(QUrl::toPercentEncoding(cursor.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (token.hasValue())
    {
        if (!::OpenAPI::toStringValue(token.value()).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatScheduledMessagesListCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("none");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatScheduledMessagesListCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatScheduledMessagesListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_scheduledMessages_list_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatScheduledMessagesListSignal(output);
        Q_EMIT chatScheduledMessagesListSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("none");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatScheduledMessagesListSignalE(output, error_type, error_str);
        Q_EMIT chatScheduledMessagesListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatScheduledMessagesListSignalError(output, error_type, error_str);
        Q_EMIT chatScheduledMessagesListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatUnfurl(const QString &token, const QString &channel, const QString &ts, const ::OpenAPI::OptionalParam<QString> &unfurls, const ::OpenAPI::OptionalParam<QString> &user_auth_message, const ::OpenAPI::OptionalParam<bool> &user_auth_required, const ::OpenAPI::OptionalParam<QString> &user_auth_url) {
    QString fullPath = QString(_serverConfigs["chatUnfurl"][_serverIndices.value("chatUnfurl")].URL()+"/chat.unfurl");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel));
    }
    
    {
        input.add_var("ts", ::OpenAPI::toStringValue(ts));
    }
    if (unfurls.hasValue())
    {
        input.add_var("unfurls", ::OpenAPI::toStringValue(unfurls.value()));
    }
    if (user_auth_message.hasValue())
    {
        input.add_var("user_auth_message", ::OpenAPI::toStringValue(user_auth_message.value()));
    }
    if (user_auth_required.hasValue())
    {
        input.add_var("user_auth_required", ::OpenAPI::toStringValue(user_auth_required.value()));
    }
    if (user_auth_url.hasValue())
    {
        input.add_var("user_auth_url", ::OpenAPI::toStringValue(user_auth_url.value()));
    }

    
    {
        if (!::OpenAPI::toStringValue(token).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatUnfurlCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("links:write");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatUnfurlCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatUnfurlCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_unfurl_success_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatUnfurlSignal(output);
        Q_EMIT chatUnfurlSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("links:write");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatUnfurlSignalE(output, error_type, error_str);
        Q_EMIT chatUnfurlSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatUnfurlSignalError(output, error_type, error_str);
        Q_EMIT chatUnfurlSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::chatUpdate(const QString &token, const QString &channel, const QString &ts, const ::OpenAPI::OptionalParam<QString> &as_user, const ::OpenAPI::OptionalParam<QString> &attachments, const ::OpenAPI::OptionalParam<QString> &blocks, const ::OpenAPI::OptionalParam<QString> &link_names, const ::OpenAPI::OptionalParam<QString> &parse, const ::OpenAPI::OptionalParam<QString> &text) {
    QString fullPath = QString(_serverConfigs["chatUpdate"][_serverIndices.value("chatUpdate")].URL()+"/chat.update");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (as_user.hasValue())
    {
        input.add_var("as_user", ::OpenAPI::toStringValue(as_user.value()));
    }
    if (attachments.hasValue())
    {
        input.add_var("attachments", ::OpenAPI::toStringValue(attachments.value()));
    }
    if (blocks.hasValue())
    {
        input.add_var("blocks", ::OpenAPI::toStringValue(blocks.value()));
    }
    
    {
        input.add_var("channel", ::OpenAPI::toStringValue(channel));
    }
    if (link_names.hasValue())
    {
        input.add_var("link_names", ::OpenAPI::toStringValue(link_names.value()));
    }
    if (parse.hasValue())
    {
        input.add_var("parse", ::OpenAPI::toStringValue(parse.value()));
    }
    if (text.hasValue())
    {
        input.add_var("text", ::OpenAPI::toStringValue(text.value()));
    }
    
    {
        input.add_var("ts", ::OpenAPI::toStringValue(ts));
    }

    
    {
        if (!::OpenAPI::toStringValue(token).isEmpty()) {
            input.headers.insert("token", ::OpenAPI::toStringValue(token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatUpdateCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("chat:write:user");
    scope.append("chat:write:bot");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIChatApi::chatUpdateCallback);
    connect(this, &OAIChatApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIChatApi::chatUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChat_update_success_schema output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT chatUpdateSignal(output);
        Q_EMIT chatUpdateSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("chat:write:user");
        scope.append("chat:write:bot");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://slack.com/oauth/authorize");
        QString tokenUrl("https://slack.com/api/oauth.access");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT chatUpdateSignalE(output, error_type, error_str);
        Q_EMIT chatUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT chatUpdateSignalError(output, error_type, error_str);
        Q_EMIT chatUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIChatApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
