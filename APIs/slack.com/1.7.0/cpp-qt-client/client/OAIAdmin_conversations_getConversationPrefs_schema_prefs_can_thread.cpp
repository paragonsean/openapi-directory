/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread() {
    this->initializeModel();
}

OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::~OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread() {}

void OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::asJsonObject() const {
    QJsonObject obj;
    if (m_type.size() > 0) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.size() > 0) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<QString> OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::getType() const {
    return m_type;
}
void OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::setType(const QList<QString> &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::getUser() const {
    return m_user;
}
void OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::setUser(const QList<QString> &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdmin_conversations_getConversationPrefs_schema_prefs_can_thread::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
