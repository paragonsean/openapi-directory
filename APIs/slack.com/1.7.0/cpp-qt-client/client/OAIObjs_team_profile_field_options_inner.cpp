/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_team_profile_field_options_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_team_profile_field_options_inner::OAIObjs_team_profile_field_options_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_team_profile_field_options_inner::OAIObjs_team_profile_field_options_inner() {
    this->initializeModel();
}

OAIObjs_team_profile_field_options_inner::~OAIObjs_team_profile_field_options_inner() {}

void OAIObjs_team_profile_field_options_inner::initializeModel() {

    m_is_custom_isSet = false;
    m_is_custom_isValid = false;

    m_is_multiple_entry_isSet = false;
    m_is_multiple_entry_isValid = false;

    m_is_protected_isSet = false;
    m_is_protected_isValid = false;

    m_is_scim_isSet = false;
    m_is_scim_isValid = false;
}

void OAIObjs_team_profile_field_options_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_team_profile_field_options_inner::fromJsonObject(QJsonObject json) {

    m_is_custom_isValid = ::OpenAPI::fromJsonValue(m_is_custom, json[QString("is_custom")]);
    m_is_custom_isSet = !json[QString("is_custom")].isNull() && m_is_custom_isValid;

    m_is_multiple_entry_isValid = ::OpenAPI::fromJsonValue(m_is_multiple_entry, json[QString("is_multiple_entry")]);
    m_is_multiple_entry_isSet = !json[QString("is_multiple_entry")].isNull() && m_is_multiple_entry_isValid;

    m_is_protected_isValid = ::OpenAPI::fromJsonValue(m_is_protected, json[QString("is_protected")]);
    m_is_protected_isSet = !json[QString("is_protected")].isNull() && m_is_protected_isValid;

    m_is_scim_isValid = ::OpenAPI::fromJsonValue(m_is_scim, json[QString("is_scim")]);
    m_is_scim_isSet = !json[QString("is_scim")].isNull() && m_is_scim_isValid;
}

QString OAIObjs_team_profile_field_options_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_team_profile_field_options_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_is_custom_isSet) {
        obj.insert(QString("is_custom"), ::OpenAPI::toJsonValue(m_is_custom));
    }
    if (m_is_multiple_entry_isSet) {
        obj.insert(QString("is_multiple_entry"), ::OpenAPI::toJsonValue(m_is_multiple_entry));
    }
    if (m_is_protected_isSet) {
        obj.insert(QString("is_protected"), ::OpenAPI::toJsonValue(m_is_protected));
    }
    if (m_is_scim_isSet) {
        obj.insert(QString("is_scim"), ::OpenAPI::toJsonValue(m_is_scim));
    }
    return obj;
}

bool OAIObjs_team_profile_field_options_inner::isIsCustom() const {
    return m_is_custom;
}
void OAIObjs_team_profile_field_options_inner::setIsCustom(const bool &is_custom) {
    m_is_custom = is_custom;
    m_is_custom_isSet = true;
}

bool OAIObjs_team_profile_field_options_inner::is_is_custom_Set() const{
    return m_is_custom_isSet;
}

bool OAIObjs_team_profile_field_options_inner::is_is_custom_Valid() const{
    return m_is_custom_isValid;
}

bool OAIObjs_team_profile_field_options_inner::isIsMultipleEntry() const {
    return m_is_multiple_entry;
}
void OAIObjs_team_profile_field_options_inner::setIsMultipleEntry(const bool &is_multiple_entry) {
    m_is_multiple_entry = is_multiple_entry;
    m_is_multiple_entry_isSet = true;
}

bool OAIObjs_team_profile_field_options_inner::is_is_multiple_entry_Set() const{
    return m_is_multiple_entry_isSet;
}

bool OAIObjs_team_profile_field_options_inner::is_is_multiple_entry_Valid() const{
    return m_is_multiple_entry_isValid;
}

bool OAIObjs_team_profile_field_options_inner::isIsProtected() const {
    return m_is_protected;
}
void OAIObjs_team_profile_field_options_inner::setIsProtected(const bool &is_protected) {
    m_is_protected = is_protected;
    m_is_protected_isSet = true;
}

bool OAIObjs_team_profile_field_options_inner::is_is_protected_Set() const{
    return m_is_protected_isSet;
}

bool OAIObjs_team_profile_field_options_inner::is_is_protected_Valid() const{
    return m_is_protected_isValid;
}

bool OAIObjs_team_profile_field_options_inner::isIsScim() const {
    return m_is_scim;
}
void OAIObjs_team_profile_field_options_inner::setIsScim(const bool &is_scim) {
    m_is_scim = is_scim;
    m_is_scim_isSet = true;
}

bool OAIObjs_team_profile_field_options_inner::is_is_scim_Set() const{
    return m_is_scim_isSet;
}

bool OAIObjs_team_profile_field_options_inner::is_is_scim_Valid() const{
    return m_is_scim_isValid;
}

bool OAIObjs_team_profile_field_options_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_multiple_entry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_scim_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_team_profile_field_options_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
