/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversations_replies_success_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversations_replies_success_schema::OAIConversations_replies_success_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversations_replies_success_schema::OAIConversations_replies_success_schema() {
    this->initializeModel();
}

OAIConversations_replies_success_schema::~OAIConversations_replies_success_schema() {}

void OAIConversations_replies_success_schema::initializeModel() {

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_ok_isSet = false;
    m_ok_isValid = false;
}

void OAIConversations_replies_success_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversations_replies_success_schema::fromJsonObject(QJsonObject json) {

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("has_more")]);
    m_has_more_isSet = !json[QString("has_more")].isNull() && m_has_more_isValid;

    if(json["messages"].isArray()){
        auto arr = json["messages"].toArray();
        m_messages_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIConversations_replies_success_schema_messages_inner_inner> item;
                m_messages_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_messages_isSet = !jval.isNull() && m_messages_isValid;
                m_messages.push_back(item);
            }
        }
    }

    m_ok_isValid = ::OpenAPI::fromJsonValue(m_ok, json[QString("ok")]);
    m_ok_isSet = !json[QString("ok")].isNull() && m_ok_isValid;
}

QString OAIConversations_replies_success_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversations_replies_success_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_has_more_isSet) {
        obj.insert(QString("has_more"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_messages.size() > 0) {
        
        obj.insert(QString("messages"), toJsonValue(m_messages));
    }
    if (m_ok_isSet) {
        obj.insert(QString("ok"), ::OpenAPI::toJsonValue(m_ok));
    }
    return obj;
}

bool OAIConversations_replies_success_schema::isHasMore() const {
    return m_has_more;
}
void OAIConversations_replies_success_schema::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAIConversations_replies_success_schema::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAIConversations_replies_success_schema::is_has_more_Valid() const{
    return m_has_more_isValid;
}

QList<QList<OAIConversations_replies_success_schema_messages_inner_inner>> OAIConversations_replies_success_schema::getMessages() const {
    return m_messages;
}
void OAIConversations_replies_success_schema::setMessages(const QList<QList<OAIConversations_replies_success_schema_messages_inner_inner>> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIConversations_replies_success_schema::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIConversations_replies_success_schema::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIConversations_replies_success_schema::isOk() const {
    return m_ok;
}
void OAIConversations_replies_success_schema::setOk(const bool &ok) {
    m_ok = ok;
    m_ok_isSet = true;
}

bool OAIConversations_replies_success_schema::is_ok_Set() const{
    return m_ok_isSet;
}

bool OAIConversations_replies_success_schema::is_ok_Valid() const{
    return m_ok_isValid;
}

bool OAIConversations_replies_success_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ok_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversations_replies_success_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_isValid && m_ok_isValid && true;
}

} // namespace OpenAPI
