/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_bot_profile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_bot_profile::OAIObjs_bot_profile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_bot_profile::OAIObjs_bot_profile() {
    this->initializeModel();
}

OAIObjs_bot_profile::~OAIObjs_bot_profile() {}

void OAIObjs_bot_profile::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIObjs_bot_profile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_bot_profile::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("team_id")]);
    m_team_id_isSet = !json[QString("team_id")].isNull() && m_team_id_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIObjs_bot_profile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_bot_profile::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_icons.isSet()) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("team_id"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QString OAIObjs_bot_profile::getAppId() const {
    return m_app_id;
}
void OAIObjs_bot_profile::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIObjs_bot_profile::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIObjs_bot_profile::is_app_id_Valid() const{
    return m_app_id_isValid;
}

bool OAIObjs_bot_profile::isDeleted() const {
    return m_deleted;
}
void OAIObjs_bot_profile::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIObjs_bot_profile::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIObjs_bot_profile::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAIBots_info_schema_bot_icons OAIObjs_bot_profile::getIcons() const {
    return m_icons;
}
void OAIObjs_bot_profile::setIcons(const OAIBots_info_schema_bot_icons &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAIObjs_bot_profile::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAIObjs_bot_profile::is_icons_Valid() const{
    return m_icons_isValid;
}

QString OAIObjs_bot_profile::getId() const {
    return m_id;
}
void OAIObjs_bot_profile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_bot_profile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_bot_profile::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIObjs_bot_profile::getName() const {
    return m_name;
}
void OAIObjs_bot_profile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_bot_profile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_bot_profile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObjs_bot_profile::getTeamId() const {
    return m_team_id;
}
void OAIObjs_bot_profile::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIObjs_bot_profile::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIObjs_bot_profile::is_team_id_Valid() const{
    return m_team_id_isValid;
}

qint32 OAIObjs_bot_profile::getUpdated() const {
    return m_updated;
}
void OAIObjs_bot_profile::setUpdated(const qint32 &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIObjs_bot_profile::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIObjs_bot_profile::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIObjs_bot_profile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_bot_profile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_deleted_isValid && m_icons_isValid && m_id_isValid && m_name_isValid && m_team_id_isValid && m_updated_isValid && true;
}

} // namespace OpenAPI
