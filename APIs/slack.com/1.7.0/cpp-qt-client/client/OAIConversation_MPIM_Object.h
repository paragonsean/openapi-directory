/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConversation_MPIM_Object.h
 *
 * 
 */

#ifndef OAIConversation_MPIM_Object_H
#define OAIConversation_MPIM_Object_H

#include <QJsonObject>

#include "OAIConversation_object_display_counts.h"
#include "OAIConversation_object_parent_conversation_inner.h"
#include "OAIConversation_object_shares_inner.h"
#include "OAIObjs_channel_latest_inner.h"
#include "OAIObjs_channel_purpose.h"
#include <QList>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConversation_object_display_counts;
class OAIObjs_channel_latest_inner;
class OAIObjs_channel_purpose;
class OAIConversation_object_shares_inner;

class OAIConversation_MPIM_Object : public OAIObject {
public:
    OAIConversation_MPIM_Object();
    OAIConversation_MPIM_Object(QString json);
    ~OAIConversation_MPIM_Object() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcceptedUser() const;
    void setAcceptedUser(const QString &accepted_user);
    bool is_accepted_user_Set() const;
    bool is_accepted_user_Valid() const;

    QSet<QString> getConnectedTeamIds() const;
    void setConnectedTeamIds(const QSet<QString> &connected_team_ids);
    bool is_connected_team_ids_Set() const;
    bool is_connected_team_ids_Valid() const;

    QString getConversationHostId() const;
    void setConversationHostId(const QString &conversation_host_id);
    bool is_conversation_host_id_Set() const;
    bool is_conversation_host_id_Valid() const;

    qint32 getCreated() const;
    void setCreated(const qint32 &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QString getCreator() const;
    void setCreator(const QString &creator);
    bool is_creator_Set() const;
    bool is_creator_Valid() const;

    OAIConversation_object_display_counts getDisplayCounts() const;
    void setDisplayCounts(const OAIConversation_object_display_counts &display_counts);
    bool is_display_counts_Set() const;
    bool is_display_counts_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QSet<QString> getInternalTeamIds() const;
    void setInternalTeamIds(const QSet<QString> &internal_team_ids);
    bool is_internal_team_ids_Set() const;
    bool is_internal_team_ids_Valid() const;

    bool isIsArchived() const;
    void setIsArchived(const bool &is_archived);
    bool is_is_archived_Set() const;
    bool is_is_archived_Valid() const;

    bool isIsChannel() const;
    void setIsChannel(const bool &is_channel);
    bool is_is_channel_Set() const;
    bool is_is_channel_Valid() const;

    bool isIsExtShared() const;
    void setIsExtShared(const bool &is_ext_shared);
    bool is_is_ext_shared_Set() const;
    bool is_is_ext_shared_Valid() const;

    bool isIsFrozen() const;
    void setIsFrozen(const bool &is_frozen);
    bool is_is_frozen_Set() const;
    bool is_is_frozen_Valid() const;

    bool isIsGeneral() const;
    void setIsGeneral(const bool &is_general);
    bool is_is_general_Set() const;
    bool is_is_general_Valid() const;

    bool isIsGroup() const;
    void setIsGroup(const bool &is_group);
    bool is_is_group_Set() const;
    bool is_is_group_Valid() const;

    bool isIsIm() const;
    void setIsIm(const bool &is_im);
    bool is_is_im_Set() const;
    bool is_is_im_Valid() const;

    bool isIsMember() const;
    void setIsMember(const bool &is_member);
    bool is_is_member_Set() const;
    bool is_is_member_Valid() const;

    qint32 getIsMoved() const;
    void setIsMoved(const qint32 &is_moved);
    bool is_is_moved_Set() const;
    bool is_is_moved_Valid() const;

    bool isIsMpim() const;
    void setIsMpim(const bool &is_mpim);
    bool is_is_mpim_Set() const;
    bool is_is_mpim_Valid() const;

    bool isIsNonThreadable() const;
    void setIsNonThreadable(const bool &is_non_threadable);
    bool is_is_non_threadable_Set() const;
    bool is_is_non_threadable_Valid() const;

    bool isIsOpen() const;
    void setIsOpen(const bool &is_open);
    bool is_is_open_Set() const;
    bool is_is_open_Valid() const;

    bool isIsOrgShared() const;
    void setIsOrgShared(const bool &is_org_shared);
    bool is_is_org_shared_Set() const;
    bool is_is_org_shared_Valid() const;

    bool isIsPendingExtShared() const;
    void setIsPendingExtShared(const bool &is_pending_ext_shared);
    bool is_is_pending_ext_shared_Set() const;
    bool is_is_pending_ext_shared_Valid() const;

    bool isIsPrivate() const;
    void setIsPrivate(const bool &is_private);
    bool is_is_private_Set() const;
    bool is_is_private_Valid() const;

    bool isIsReadOnly() const;
    void setIsReadOnly(const bool &is_read_only);
    bool is_is_read_only_Set() const;
    bool is_is_read_only_Valid() const;

    bool isIsShared() const;
    void setIsShared(const bool &is_shared);
    bool is_is_shared_Set() const;
    bool is_is_shared_Valid() const;

    bool isIsStarred() const;
    void setIsStarred(const bool &is_starred);
    bool is_is_starred_Set() const;
    bool is_is_starred_Valid() const;

    bool isIsThreadOnly() const;
    void setIsThreadOnly(const bool &is_thread_only);
    bool is_is_thread_only_Set() const;
    bool is_is_thread_only_Valid() const;

    QString getLastRead() const;
    void setLastRead(const QString &last_read);
    bool is_last_read_Set() const;
    bool is_last_read_Valid() const;

    QList<OAIObjs_channel_latest_inner> getLatest() const;
    void setLatest(const QList<OAIObjs_channel_latest_inner> &latest);
    bool is_latest_Set() const;
    bool is_latest_Valid() const;

    QSet<QString> getMembers() const;
    void setMembers(const QSet<QString> &members);
    bool is_members_Set() const;
    bool is_members_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNameNormalized() const;
    void setNameNormalized(const QString &name_normalized);
    bool is_name_normalized_Set() const;
    bool is_name_normalized_Valid() const;

    qint32 getNumMembers() const;
    void setNumMembers(const qint32 &num_members);
    bool is_num_members_Set() const;
    bool is_num_members_Valid() const;

    QList<OAIConversation_object_parent_conversation_inner> getParentConversation() const;
    void setParentConversation(const QList<OAIConversation_object_parent_conversation_inner> &parent_conversation);
    bool is_parent_conversation_Set() const;
    bool is_parent_conversation_Valid() const;

    QSet<QString> getPendingConnectedTeamIds() const;
    void setPendingConnectedTeamIds(const QSet<QString> &pending_connected_team_ids);
    bool is_pending_connected_team_ids_Set() const;
    bool is_pending_connected_team_ids_Valid() const;

    QSet<QString> getPendingShared() const;
    void setPendingShared(const QSet<QString> &pending_shared);
    bool is_pending_shared_Set() const;
    bool is_pending_shared_Valid() const;

    qint32 getPinCount() const;
    void setPinCount(const qint32 &pin_count);
    bool is_pin_count_Set() const;
    bool is_pin_count_Valid() const;

    QSet<QString> getPreviousNames() const;
    void setPreviousNames(const QSet<QString> &previous_names);
    bool is_previous_names_Set() const;
    bool is_previous_names_Valid() const;

    double getPriority() const;
    void setPriority(const double &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    OAIObjs_channel_purpose getPurpose() const;
    void setPurpose(const OAIObjs_channel_purpose &purpose);
    bool is_purpose_Set() const;
    bool is_purpose_Valid() const;

    QSet<QString> getSharedTeamIds() const;
    void setSharedTeamIds(const QSet<QString> &shared_team_ids);
    bool is_shared_team_ids_Set() const;
    bool is_shared_team_ids_Valid() const;

    QSet<OAIConversation_object_shares_inner> getShares() const;
    void setShares(const QSet<OAIConversation_object_shares_inner> &shares);
    bool is_shares_Set() const;
    bool is_shares_Valid() const;

    qint32 getTimezoneCount() const;
    void setTimezoneCount(const qint32 &timezone_count);
    bool is_timezone_count_Set() const;
    bool is_timezone_count_Valid() const;

    OAIObjs_channel_purpose getTopic() const;
    void setTopic(const OAIObjs_channel_purpose &topic);
    bool is_topic_Set() const;
    bool is_topic_Valid() const;

    qint32 getUnlinked() const;
    void setUnlinked(const qint32 &unlinked);
    bool is_unlinked_Set() const;
    bool is_unlinked_Valid() const;

    qint32 getUnreadCount() const;
    void setUnreadCount(const qint32 &unread_count);
    bool is_unread_count_Set() const;
    bool is_unread_count_Valid() const;

    qint32 getUnreadCountDisplay() const;
    void setUnreadCountDisplay(const qint32 &unread_count_display);
    bool is_unread_count_display_Set() const;
    bool is_unread_count_display_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accepted_user;
    bool m_accepted_user_isSet;
    bool m_accepted_user_isValid;

    QSet<QString> m_connected_team_ids;
    bool m_connected_team_ids_isSet;
    bool m_connected_team_ids_isValid;

    QString m_conversation_host_id;
    bool m_conversation_host_id_isSet;
    bool m_conversation_host_id_isValid;

    qint32 m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QString m_creator;
    bool m_creator_isSet;
    bool m_creator_isValid;

    OAIConversation_object_display_counts m_display_counts;
    bool m_display_counts_isSet;
    bool m_display_counts_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QSet<QString> m_internal_team_ids;
    bool m_internal_team_ids_isSet;
    bool m_internal_team_ids_isValid;

    bool m_is_archived;
    bool m_is_archived_isSet;
    bool m_is_archived_isValid;

    bool m_is_channel;
    bool m_is_channel_isSet;
    bool m_is_channel_isValid;

    bool m_is_ext_shared;
    bool m_is_ext_shared_isSet;
    bool m_is_ext_shared_isValid;

    bool m_is_frozen;
    bool m_is_frozen_isSet;
    bool m_is_frozen_isValid;

    bool m_is_general;
    bool m_is_general_isSet;
    bool m_is_general_isValid;

    bool m_is_group;
    bool m_is_group_isSet;
    bool m_is_group_isValid;

    bool m_is_im;
    bool m_is_im_isSet;
    bool m_is_im_isValid;

    bool m_is_member;
    bool m_is_member_isSet;
    bool m_is_member_isValid;

    qint32 m_is_moved;
    bool m_is_moved_isSet;
    bool m_is_moved_isValid;

    bool m_is_mpim;
    bool m_is_mpim_isSet;
    bool m_is_mpim_isValid;

    bool m_is_non_threadable;
    bool m_is_non_threadable_isSet;
    bool m_is_non_threadable_isValid;

    bool m_is_open;
    bool m_is_open_isSet;
    bool m_is_open_isValid;

    bool m_is_org_shared;
    bool m_is_org_shared_isSet;
    bool m_is_org_shared_isValid;

    bool m_is_pending_ext_shared;
    bool m_is_pending_ext_shared_isSet;
    bool m_is_pending_ext_shared_isValid;

    bool m_is_private;
    bool m_is_private_isSet;
    bool m_is_private_isValid;

    bool m_is_read_only;
    bool m_is_read_only_isSet;
    bool m_is_read_only_isValid;

    bool m_is_shared;
    bool m_is_shared_isSet;
    bool m_is_shared_isValid;

    bool m_is_starred;
    bool m_is_starred_isSet;
    bool m_is_starred_isValid;

    bool m_is_thread_only;
    bool m_is_thread_only_isSet;
    bool m_is_thread_only_isValid;

    QString m_last_read;
    bool m_last_read_isSet;
    bool m_last_read_isValid;

    QList<OAIObjs_channel_latest_inner> m_latest;
    bool m_latest_isSet;
    bool m_latest_isValid;

    QSet<QString> m_members;
    bool m_members_isSet;
    bool m_members_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_name_normalized;
    bool m_name_normalized_isSet;
    bool m_name_normalized_isValid;

    qint32 m_num_members;
    bool m_num_members_isSet;
    bool m_num_members_isValid;

    QList<OAIConversation_object_parent_conversation_inner> m_parent_conversation;
    bool m_parent_conversation_isSet;
    bool m_parent_conversation_isValid;

    QSet<QString> m_pending_connected_team_ids;
    bool m_pending_connected_team_ids_isSet;
    bool m_pending_connected_team_ids_isValid;

    QSet<QString> m_pending_shared;
    bool m_pending_shared_isSet;
    bool m_pending_shared_isValid;

    qint32 m_pin_count;
    bool m_pin_count_isSet;
    bool m_pin_count_isValid;

    QSet<QString> m_previous_names;
    bool m_previous_names_isSet;
    bool m_previous_names_isValid;

    double m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    OAIObjs_channel_purpose m_purpose;
    bool m_purpose_isSet;
    bool m_purpose_isValid;

    QSet<QString> m_shared_team_ids;
    bool m_shared_team_ids_isSet;
    bool m_shared_team_ids_isValid;

    QSet<OAIConversation_object_shares_inner> m_shares;
    bool m_shares_isSet;
    bool m_shares_isValid;

    qint32 m_timezone_count;
    bool m_timezone_count_isSet;
    bool m_timezone_count_isValid;

    OAIObjs_channel_purpose m_topic;
    bool m_topic_isSet;
    bool m_topic_isValid;

    qint32 m_unlinked;
    bool m_unlinked_isSet;
    bool m_unlinked_isValid;

    qint32 m_unread_count;
    bool m_unread_count_isSet;
    bool m_unread_count_isValid;

    qint32 m_unread_count_display;
    bool m_unread_count_display_isSet;
    bool m_unread_count_display_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConversation_MPIM_Object)

#endif // OAIConversation_MPIM_Object_H
