/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_message_attachments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_message_attachments_inner::OAIObjs_message_attachments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_message_attachments_inner::OAIObjs_message_attachments_inner() {
    this->initializeModel();
}

OAIObjs_message_attachments_inner::~OAIObjs_message_attachments_inner() {}

void OAIObjs_message_attachments_inner::initializeModel() {

    m_fallback_isSet = false;
    m_fallback_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_bytes_isSet = false;
    m_image_bytes_isValid = false;

    m_image_height_isSet = false;
    m_image_height_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_image_width_isSet = false;
    m_image_width_isValid = false;
}

void OAIObjs_message_attachments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_message_attachments_inner::fromJsonObject(QJsonObject json) {

    m_fallback_isValid = ::OpenAPI::fromJsonValue(m_fallback, json[QString("fallback")]);
    m_fallback_isSet = !json[QString("fallback")].isNull() && m_fallback_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_bytes_isValid = ::OpenAPI::fromJsonValue(m_image_bytes, json[QString("image_bytes")]);
    m_image_bytes_isSet = !json[QString("image_bytes")].isNull() && m_image_bytes_isValid;

    m_image_height_isValid = ::OpenAPI::fromJsonValue(m_image_height, json[QString("image_height")]);
    m_image_height_isSet = !json[QString("image_height")].isNull() && m_image_height_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_image_width_isValid = ::OpenAPI::fromJsonValue(m_image_width, json[QString("image_width")]);
    m_image_width_isSet = !json[QString("image_width")].isNull() && m_image_width_isValid;
}

QString OAIObjs_message_attachments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_message_attachments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_fallback_isSet) {
        obj.insert(QString("fallback"), ::OpenAPI::toJsonValue(m_fallback));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_bytes_isSet) {
        obj.insert(QString("image_bytes"), ::OpenAPI::toJsonValue(m_image_bytes));
    }
    if (m_image_height_isSet) {
        obj.insert(QString("image_height"), ::OpenAPI::toJsonValue(m_image_height));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_image_width_isSet) {
        obj.insert(QString("image_width"), ::OpenAPI::toJsonValue(m_image_width));
    }
    return obj;
}

QString OAIObjs_message_attachments_inner::getFallback() const {
    return m_fallback;
}
void OAIObjs_message_attachments_inner::setFallback(const QString &fallback) {
    m_fallback = fallback;
    m_fallback_isSet = true;
}

bool OAIObjs_message_attachments_inner::is_fallback_Set() const{
    return m_fallback_isSet;
}

bool OAIObjs_message_attachments_inner::is_fallback_Valid() const{
    return m_fallback_isValid;
}

qint32 OAIObjs_message_attachments_inner::getId() const {
    return m_id;
}
void OAIObjs_message_attachments_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_message_attachments_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_message_attachments_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIObjs_message_attachments_inner::getImageBytes() const {
    return m_image_bytes;
}
void OAIObjs_message_attachments_inner::setImageBytes(const qint32 &image_bytes) {
    m_image_bytes = image_bytes;
    m_image_bytes_isSet = true;
}

bool OAIObjs_message_attachments_inner::is_image_bytes_Set() const{
    return m_image_bytes_isSet;
}

bool OAIObjs_message_attachments_inner::is_image_bytes_Valid() const{
    return m_image_bytes_isValid;
}

qint32 OAIObjs_message_attachments_inner::getImageHeight() const {
    return m_image_height;
}
void OAIObjs_message_attachments_inner::setImageHeight(const qint32 &image_height) {
    m_image_height = image_height;
    m_image_height_isSet = true;
}

bool OAIObjs_message_attachments_inner::is_image_height_Set() const{
    return m_image_height_isSet;
}

bool OAIObjs_message_attachments_inner::is_image_height_Valid() const{
    return m_image_height_isValid;
}

QString OAIObjs_message_attachments_inner::getImageUrl() const {
    return m_image_url;
}
void OAIObjs_message_attachments_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIObjs_message_attachments_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIObjs_message_attachments_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

qint32 OAIObjs_message_attachments_inner::getImageWidth() const {
    return m_image_width;
}
void OAIObjs_message_attachments_inner::setImageWidth(const qint32 &image_width) {
    m_image_width = image_width;
    m_image_width_isSet = true;
}

bool OAIObjs_message_attachments_inner::is_image_width_Set() const{
    return m_image_width_isSet;
}

bool OAIObjs_message_attachments_inner::is_image_width_Valid() const{
    return m_image_width_isValid;
}

bool OAIObjs_message_attachments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_message_attachments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
