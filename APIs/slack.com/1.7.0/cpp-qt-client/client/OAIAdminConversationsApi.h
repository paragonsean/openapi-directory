/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAdminConversationsApi_H
#define OAI_OAIAdminConversationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdmin_conversations_archive_error_schema.h"
#include "OAIAdmin_conversations_archive_schema.h"
#include "OAIAdmin_conversations_convertToPrivate_error_schema.h"
#include "OAIAdmin_conversations_convertToPrivate_schema.h"
#include "OAIAdmin_conversations_create_error_schema.h"
#include "OAIAdmin_conversations_create_schema.h"
#include "OAIAdmin_conversations_delete_error_schema.h"
#include "OAIAdmin_conversations_delete_schema.h"
#include "OAIAdmin_conversations_disconnectShared_error_schema.h"
#include "OAIAdmin_conversations_getConversationPrefs_schema.h"
#include "OAIAdmin_conversations_getTeams_error_schema.h"
#include "OAIAdmin_conversations_getTeams_schema.h"
#include "OAIAdmin_conversations_invite_error_schema.h"
#include "OAIAdmin_conversations_invite_schema.h"
#include "OAIAdmin_conversations_rename_schema.h"
#include "OAIAdmin_conversations_rename_schema_1.h"
#include "OAIAdmin_conversations_search_error_schema.h"
#include "OAIAdmin_conversations_search_schema.h"
#include "OAIAdmin_conversations_setConversationPrefs_error_schema.h"
#include "OAIAdmin_conversations_setConversationPrefs_schema.h"
#include "OAIAdmin_conversations_unarchive_error_schema.h"
#include "OAIAdmin_conversations_unarchive_error_schema_1.h"
#include "OAIAdmin_conversations_unarchive_error_schema_2.h"
#include "OAIAdmin_conversations_unarchive_schema.h"
#include "OAIDefault_error_template.h"
#include "OAIDefault_success_template.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAdminConversationsApi : public QObject {
    Q_OBJECT

public:
    OAIAdminConversationsApi(const int timeOut = 0);
    ~OAIAdminConversationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsArchive(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsConvertToPrivate(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  is_private bool [required]
    * @param[in]  name QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  org_wide bool [optional]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminConversationsCreate(const QString &token, const bool &is_private, const QString &name, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &org_wide = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsDelete(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  leaving_team_ids QString [optional]
    */
    virtual void adminConversationsDisconnectShared(const QString &token, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &leaving_team_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsGetConversationPrefs(const QString &token, const QString &channel_id);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void adminConversationsGetTeams(const QString &token, const QString &channel_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  user_ids QString [required]
    */
    virtual void adminConversationsInvite(const QString &token, const QString &channel_id, const QString &user_ids);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  name QString [required]
    */
    virtual void adminConversationsRename(const QString &token, const QString &channel_id, const QString &name);

    /**
    * @param[in]  token QString [required]
    * @param[in]  team_ids QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  search_channel_types QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_dir QString [optional]
    */
    virtual void adminConversationsSearch(const QString &token, const ::OpenAPI::OptionalParam<QString> &team_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_channel_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_dir = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  prefs QString [required]
    */
    virtual void adminConversationsSetConversationPrefs(const QString &token, const QString &channel_id, const QString &prefs);

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    * @param[in]  org_channel bool [optional]
    * @param[in]  target_team_ids QString [optional]
    * @param[in]  team_id QString [optional]
    */
    virtual void adminConversationsSetTeams(const QString &token, const QString &channel_id, const ::OpenAPI::OptionalParam<bool> &org_channel = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &target_team_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void adminConversationsUnarchive(const QString &token, const QString &channel_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminConversationsArchiveCallback(OAIHttpRequestWorker *worker);
    void adminConversationsConvertToPrivateCallback(OAIHttpRequestWorker *worker);
    void adminConversationsCreateCallback(OAIHttpRequestWorker *worker);
    void adminConversationsDeleteCallback(OAIHttpRequestWorker *worker);
    void adminConversationsDisconnectSharedCallback(OAIHttpRequestWorker *worker);
    void adminConversationsGetConversationPrefsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsGetTeamsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsInviteCallback(OAIHttpRequestWorker *worker);
    void adminConversationsRenameCallback(OAIHttpRequestWorker *worker);
    void adminConversationsSearchCallback(OAIHttpRequestWorker *worker);
    void adminConversationsSetConversationPrefsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsSetTeamsCallback(OAIHttpRequestWorker *worker);
    void adminConversationsUnarchiveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminConversationsArchiveSignal(OAIAdmin_conversations_archive_schema summary);
    void adminConversationsConvertToPrivateSignal(OAIAdmin_conversations_convertToPrivate_schema summary);
    void adminConversationsCreateSignal(OAIAdmin_conversations_create_schema summary);
    void adminConversationsDeleteSignal(OAIAdmin_conversations_delete_schema summary);
    void adminConversationsDisconnectSharedSignal(OAIAdmin_conversations_rename_schema summary);
    void adminConversationsGetConversationPrefsSignal(OAIAdmin_conversations_getConversationPrefs_schema summary);
    void adminConversationsGetTeamsSignal(OAIAdmin_conversations_getTeams_schema summary);
    void adminConversationsInviteSignal(OAIAdmin_conversations_invite_schema summary);
    void adminConversationsRenameSignal(OAIAdmin_conversations_rename_schema_1 summary);
    void adminConversationsSearchSignal(OAIAdmin_conversations_search_schema summary);
    void adminConversationsSetConversationPrefsSignal(OAIAdmin_conversations_setConversationPrefs_schema summary);
    void adminConversationsSetTeamsSignal(OAIDefault_success_template summary);
    void adminConversationsUnarchiveSignal(OAIAdmin_conversations_unarchive_schema summary);


    void adminConversationsArchiveSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_archive_schema summary);
    void adminConversationsConvertToPrivateSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_convertToPrivate_schema summary);
    void adminConversationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_create_schema summary);
    void adminConversationsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_delete_schema summary);
    void adminConversationsDisconnectSharedSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_rename_schema summary);
    void adminConversationsGetConversationPrefsSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_getConversationPrefs_schema summary);
    void adminConversationsGetTeamsSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_getTeams_schema summary);
    void adminConversationsInviteSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_invite_schema summary);
    void adminConversationsRenameSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_rename_schema_1 summary);
    void adminConversationsSearchSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_search_schema summary);
    void adminConversationsSetConversationPrefsSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_setConversationPrefs_schema summary);
    void adminConversationsSetTeamsSignalFull(OAIHttpRequestWorker *worker, OAIDefault_success_template summary);
    void adminConversationsUnarchiveSignalFull(OAIHttpRequestWorker *worker, OAIAdmin_conversations_unarchive_schema summary);

    Q_DECL_DEPRECATED_X("Use adminConversationsArchiveSignalError() instead")
    void adminConversationsArchiveSignalE(OAIAdmin_conversations_archive_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsArchiveSignalError(OAIAdmin_conversations_archive_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsConvertToPrivateSignalError() instead")
    void adminConversationsConvertToPrivateSignalE(OAIAdmin_conversations_convertToPrivate_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsConvertToPrivateSignalError(OAIAdmin_conversations_convertToPrivate_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsCreateSignalError() instead")
    void adminConversationsCreateSignalE(OAIAdmin_conversations_create_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsCreateSignalError(OAIAdmin_conversations_create_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDeleteSignalError() instead")
    void adminConversationsDeleteSignalE(OAIAdmin_conversations_delete_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDeleteSignalError(OAIAdmin_conversations_delete_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDisconnectSharedSignalError() instead")
    void adminConversationsDisconnectSharedSignalE(OAIAdmin_conversations_rename_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDisconnectSharedSignalError(OAIAdmin_conversations_rename_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetConversationPrefsSignalError() instead")
    void adminConversationsGetConversationPrefsSignalE(OAIAdmin_conversations_getConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetConversationPrefsSignalError(OAIAdmin_conversations_getConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetTeamsSignalError() instead")
    void adminConversationsGetTeamsSignalE(OAIAdmin_conversations_getTeams_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetTeamsSignalError(OAIAdmin_conversations_getTeams_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsInviteSignalError() instead")
    void adminConversationsInviteSignalE(OAIAdmin_conversations_invite_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsInviteSignalError(OAIAdmin_conversations_invite_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRenameSignalError() instead")
    void adminConversationsRenameSignalE(OAIAdmin_conversations_rename_schema_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRenameSignalError(OAIAdmin_conversations_rename_schema_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSearchSignalError() instead")
    void adminConversationsSearchSignalE(OAIAdmin_conversations_search_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSearchSignalError(OAIAdmin_conversations_search_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetConversationPrefsSignalError() instead")
    void adminConversationsSetConversationPrefsSignalE(OAIAdmin_conversations_setConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetConversationPrefsSignalError(OAIAdmin_conversations_setConversationPrefs_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetTeamsSignalError() instead")
    void adminConversationsSetTeamsSignalE(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetTeamsSignalError(OAIDefault_success_template summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsUnarchiveSignalError() instead")
    void adminConversationsUnarchiveSignalE(OAIAdmin_conversations_unarchive_schema summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsUnarchiveSignalError(OAIAdmin_conversations_unarchive_schema summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminConversationsArchiveSignalErrorFull() instead")
    void adminConversationsArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsConvertToPrivateSignalErrorFull() instead")
    void adminConversationsConvertToPrivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsConvertToPrivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsCreateSignalErrorFull() instead")
    void adminConversationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDeleteSignalErrorFull() instead")
    void adminConversationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsDisconnectSharedSignalErrorFull() instead")
    void adminConversationsDisconnectSharedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsDisconnectSharedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetConversationPrefsSignalErrorFull() instead")
    void adminConversationsGetConversationPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetConversationPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsGetTeamsSignalErrorFull() instead")
    void adminConversationsGetTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsGetTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsInviteSignalErrorFull() instead")
    void adminConversationsInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsRenameSignalErrorFull() instead")
    void adminConversationsRenameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsRenameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSearchSignalErrorFull() instead")
    void adminConversationsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetConversationPrefsSignalErrorFull() instead")
    void adminConversationsSetConversationPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetConversationPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsSetTeamsSignalErrorFull() instead")
    void adminConversationsSetTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsSetTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminConversationsUnarchiveSignalErrorFull() instead")
    void adminConversationsUnarchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminConversationsUnarchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
