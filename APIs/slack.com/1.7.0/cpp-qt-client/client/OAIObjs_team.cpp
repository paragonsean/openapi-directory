/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_team.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_team::OAIObjs_team(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_team::OAIObjs_team() {
    this->initializeModel();
}

OAIObjs_team::~OAIObjs_team() {}

void OAIObjs_team::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_avatar_base_url_isSet = false;
    m_avatar_base_url_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_date_create_isSet = false;
    m_date_create_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discoverable_isSet = false;
    m_discoverable_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_email_domain_isSet = false;
    m_email_domain_isValid = false;

    m_enterprise_id_isSet = false;
    m_enterprise_id_isValid = false;

    m_enterprise_name_isSet = false;
    m_enterprise_name_isValid = false;

    m_external_org_migrations_isSet = false;
    m_external_org_migrations_isValid = false;

    m_has_compliance_export_isSet = false;
    m_has_compliance_export_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_assigned_isSet = false;
    m_is_assigned_isValid = false;

    m_is_enterprise_isSet = false;
    m_is_enterprise_isValid = false;

    m_is_over_storage_limit_isSet = false;
    m_is_over_storage_limit_isValid = false;

    m_limit_ts_isSet = false;
    m_limit_ts_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_messages_count_isSet = false;
    m_messages_count_isValid = false;

    m_msg_edit_window_mins_isSet = false;
    m_msg_edit_window_mins_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_over_integrations_limit_isSet = false;
    m_over_integrations_limit_isValid = false;

    m_over_storage_limit_isSet = false;
    m_over_storage_limit_isValid = false;

    m_pay_prod_cur_isSet = false;
    m_pay_prod_cur_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_primary_owner_isSet = false;
    m_primary_owner_isValid = false;

    m_sso_provider_isSet = false;
    m_sso_provider_isValid = false;
}

void OAIObjs_team::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_team::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_avatar_base_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_base_url, json[QString("avatar_base_url")]);
    m_avatar_base_url_isSet = !json[QString("avatar_base_url")].isNull() && m_avatar_base_url_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_date_create_isValid = ::OpenAPI::fromJsonValue(m_date_create, json[QString("date_create")]);
    m_date_create_isSet = !json[QString("date_create")].isNull() && m_date_create_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discoverable_isValid = ::OpenAPI::fromJsonValue(m_discoverable, json[QString("discoverable")]);
    m_discoverable_isSet = !json[QString("discoverable")].isNull() && m_discoverable_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_email_domain_isValid = ::OpenAPI::fromJsonValue(m_email_domain, json[QString("email_domain")]);
    m_email_domain_isSet = !json[QString("email_domain")].isNull() && m_email_domain_isValid;

    m_enterprise_id_isValid = ::OpenAPI::fromJsonValue(m_enterprise_id, json[QString("enterprise_id")]);
    m_enterprise_id_isSet = !json[QString("enterprise_id")].isNull() && m_enterprise_id_isValid;

    m_enterprise_name_isValid = ::OpenAPI::fromJsonValue(m_enterprise_name, json[QString("enterprise_name")]);
    m_enterprise_name_isSet = !json[QString("enterprise_name")].isNull() && m_enterprise_name_isValid;

    m_external_org_migrations_isValid = ::OpenAPI::fromJsonValue(m_external_org_migrations, json[QString("external_org_migrations")]);
    m_external_org_migrations_isSet = !json[QString("external_org_migrations")].isNull() && m_external_org_migrations_isValid;

    m_has_compliance_export_isValid = ::OpenAPI::fromJsonValue(m_has_compliance_export, json[QString("has_compliance_export")]);
    m_has_compliance_export_isSet = !json[QString("has_compliance_export")].isNull() && m_has_compliance_export_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_assigned_isValid = ::OpenAPI::fromJsonValue(m_is_assigned, json[QString("is_assigned")]);
    m_is_assigned_isSet = !json[QString("is_assigned")].isNull() && m_is_assigned_isValid;

    m_is_enterprise_isValid = ::OpenAPI::fromJsonValue(m_is_enterprise, json[QString("is_enterprise")]);
    m_is_enterprise_isSet = !json[QString("is_enterprise")].isNull() && m_is_enterprise_isValid;

    m_is_over_storage_limit_isValid = ::OpenAPI::fromJsonValue(m_is_over_storage_limit, json[QString("is_over_storage_limit")]);
    m_is_over_storage_limit_isSet = !json[QString("is_over_storage_limit")].isNull() && m_is_over_storage_limit_isValid;

    m_limit_ts_isValid = ::OpenAPI::fromJsonValue(m_limit_ts, json[QString("limit_ts")]);
    m_limit_ts_isSet = !json[QString("limit_ts")].isNull() && m_limit_ts_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_messages_count_isValid = ::OpenAPI::fromJsonValue(m_messages_count, json[QString("messages_count")]);
    m_messages_count_isSet = !json[QString("messages_count")].isNull() && m_messages_count_isValid;

    m_msg_edit_window_mins_isValid = ::OpenAPI::fromJsonValue(m_msg_edit_window_mins, json[QString("msg_edit_window_mins")]);
    m_msg_edit_window_mins_isSet = !json[QString("msg_edit_window_mins")].isNull() && m_msg_edit_window_mins_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_over_integrations_limit_isValid = ::OpenAPI::fromJsonValue(m_over_integrations_limit, json[QString("over_integrations_limit")]);
    m_over_integrations_limit_isSet = !json[QString("over_integrations_limit")].isNull() && m_over_integrations_limit_isValid;

    m_over_storage_limit_isValid = ::OpenAPI::fromJsonValue(m_over_storage_limit, json[QString("over_storage_limit")]);
    m_over_storage_limit_isSet = !json[QString("over_storage_limit")].isNull() && m_over_storage_limit_isValid;

    m_pay_prod_cur_isValid = ::OpenAPI::fromJsonValue(m_pay_prod_cur, json[QString("pay_prod_cur")]);
    m_pay_prod_cur_isSet = !json[QString("pay_prod_cur")].isNull() && m_pay_prod_cur_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_primary_owner_isValid = ::OpenAPI::fromJsonValue(m_primary_owner, json[QString("primary_owner")]);
    m_primary_owner_isSet = !json[QString("primary_owner")].isNull() && m_primary_owner_isValid;

    m_sso_provider_isValid = ::OpenAPI::fromJsonValue(m_sso_provider, json[QString("sso_provider")]);
    m_sso_provider_isSet = !json[QString("sso_provider")].isNull() && m_sso_provider_isValid;
}

QString OAIObjs_team::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_team::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_avatar_base_url_isSet) {
        obj.insert(QString("avatar_base_url"), ::OpenAPI::toJsonValue(m_avatar_base_url));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_date_create_isSet) {
        obj.insert(QString("date_create"), ::OpenAPI::toJsonValue(m_date_create));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discoverable.size() > 0) {
        obj.insert(QString("discoverable"), ::OpenAPI::toJsonValue(m_discoverable));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_email_domain_isSet) {
        obj.insert(QString("email_domain"), ::OpenAPI::toJsonValue(m_email_domain));
    }
    if (m_enterprise_id_isSet) {
        obj.insert(QString("enterprise_id"), ::OpenAPI::toJsonValue(m_enterprise_id));
    }
    if (m_enterprise_name_isSet) {
        obj.insert(QString("enterprise_name"), ::OpenAPI::toJsonValue(m_enterprise_name));
    }
    if (m_external_org_migrations.isSet()) {
        obj.insert(QString("external_org_migrations"), ::OpenAPI::toJsonValue(m_external_org_migrations));
    }
    if (m_has_compliance_export_isSet) {
        obj.insert(QString("has_compliance_export"), ::OpenAPI::toJsonValue(m_has_compliance_export));
    }
    if (m_icon.isSet()) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_assigned_isSet) {
        obj.insert(QString("is_assigned"), ::OpenAPI::toJsonValue(m_is_assigned));
    }
    if (m_is_enterprise_isSet) {
        obj.insert(QString("is_enterprise"), ::OpenAPI::toJsonValue(m_is_enterprise));
    }
    if (m_is_over_storage_limit_isSet) {
        obj.insert(QString("is_over_storage_limit"), ::OpenAPI::toJsonValue(m_is_over_storage_limit));
    }
    if (m_limit_ts_isSet) {
        obj.insert(QString("limit_ts"), ::OpenAPI::toJsonValue(m_limit_ts));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_messages_count_isSet) {
        obj.insert(QString("messages_count"), ::OpenAPI::toJsonValue(m_messages_count));
    }
    if (m_msg_edit_window_mins_isSet) {
        obj.insert(QString("msg_edit_window_mins"), ::OpenAPI::toJsonValue(m_msg_edit_window_mins));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_over_integrations_limit_isSet) {
        obj.insert(QString("over_integrations_limit"), ::OpenAPI::toJsonValue(m_over_integrations_limit));
    }
    if (m_over_storage_limit_isSet) {
        obj.insert(QString("over_storage_limit"), ::OpenAPI::toJsonValue(m_over_storage_limit));
    }
    if (m_pay_prod_cur_isSet) {
        obj.insert(QString("pay_prod_cur"), ::OpenAPI::toJsonValue(m_pay_prod_cur));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_primary_owner.isSet()) {
        obj.insert(QString("primary_owner"), ::OpenAPI::toJsonValue(m_primary_owner));
    }
    if (m_sso_provider.isSet()) {
        obj.insert(QString("sso_provider"), ::OpenAPI::toJsonValue(m_sso_provider));
    }
    return obj;
}

bool OAIObjs_team::isArchived() const {
    return m_archived;
}
void OAIObjs_team::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAIObjs_team::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAIObjs_team::is_archived_Valid() const{
    return m_archived_isValid;
}

QString OAIObjs_team::getAvatarBaseUrl() const {
    return m_avatar_base_url;
}
void OAIObjs_team::setAvatarBaseUrl(const QString &avatar_base_url) {
    m_avatar_base_url = avatar_base_url;
    m_avatar_base_url_isSet = true;
}

bool OAIObjs_team::is_avatar_base_url_Set() const{
    return m_avatar_base_url_isSet;
}

bool OAIObjs_team::is_avatar_base_url_Valid() const{
    return m_avatar_base_url_isValid;
}

qint32 OAIObjs_team::getCreated() const {
    return m_created;
}
void OAIObjs_team::setCreated(const qint32 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIObjs_team::is_created_Set() const{
    return m_created_isSet;
}

bool OAIObjs_team::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIObjs_team::getDateCreate() const {
    return m_date_create;
}
void OAIObjs_team::setDateCreate(const qint32 &date_create) {
    m_date_create = date_create;
    m_date_create_isSet = true;
}

bool OAIObjs_team::is_date_create_Set() const{
    return m_date_create_isSet;
}

bool OAIObjs_team::is_date_create_Valid() const{
    return m_date_create_isValid;
}

bool OAIObjs_team::isDeleted() const {
    return m_deleted;
}
void OAIObjs_team::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIObjs_team::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIObjs_team::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIObjs_team::getDescription() const {
    return m_description;
}
void OAIObjs_team::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIObjs_team::is_description_Set() const{
    return m_description_isSet;
}

bool OAIObjs_team::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIObjs_team_discoverable_inner> OAIObjs_team::getDiscoverable() const {
    return m_discoverable;
}
void OAIObjs_team::setDiscoverable(const QList<OAIObjs_team_discoverable_inner> &discoverable) {
    m_discoverable = discoverable;
    m_discoverable_isSet = true;
}

bool OAIObjs_team::is_discoverable_Set() const{
    return m_discoverable_isSet;
}

bool OAIObjs_team::is_discoverable_Valid() const{
    return m_discoverable_isValid;
}

QString OAIObjs_team::getDomain() const {
    return m_domain;
}
void OAIObjs_team::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIObjs_team::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIObjs_team::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIObjs_team::getEmailDomain() const {
    return m_email_domain;
}
void OAIObjs_team::setEmailDomain(const QString &email_domain) {
    m_email_domain = email_domain;
    m_email_domain_isSet = true;
}

bool OAIObjs_team::is_email_domain_Set() const{
    return m_email_domain_isSet;
}

bool OAIObjs_team::is_email_domain_Valid() const{
    return m_email_domain_isValid;
}

QString OAIObjs_team::getEnterpriseId() const {
    return m_enterprise_id;
}
void OAIObjs_team::setEnterpriseId(const QString &enterprise_id) {
    m_enterprise_id = enterprise_id;
    m_enterprise_id_isSet = true;
}

bool OAIObjs_team::is_enterprise_id_Set() const{
    return m_enterprise_id_isSet;
}

bool OAIObjs_team::is_enterprise_id_Valid() const{
    return m_enterprise_id_isValid;
}

QString OAIObjs_team::getEnterpriseName() const {
    return m_enterprise_name;
}
void OAIObjs_team::setEnterpriseName(const QString &enterprise_name) {
    m_enterprise_name = enterprise_name;
    m_enterprise_name_isSet = true;
}

bool OAIObjs_team::is_enterprise_name_Set() const{
    return m_enterprise_name_isSet;
}

bool OAIObjs_team::is_enterprise_name_Valid() const{
    return m_enterprise_name_isValid;
}

OAIObjs_external_org_migrations OAIObjs_team::getExternalOrgMigrations() const {
    return m_external_org_migrations;
}
void OAIObjs_team::setExternalOrgMigrations(const OAIObjs_external_org_migrations &external_org_migrations) {
    m_external_org_migrations = external_org_migrations;
    m_external_org_migrations_isSet = true;
}

bool OAIObjs_team::is_external_org_migrations_Set() const{
    return m_external_org_migrations_isSet;
}

bool OAIObjs_team::is_external_org_migrations_Valid() const{
    return m_external_org_migrations_isValid;
}

bool OAIObjs_team::isHasComplianceExport() const {
    return m_has_compliance_export;
}
void OAIObjs_team::setHasComplianceExport(const bool &has_compliance_export) {
    m_has_compliance_export = has_compliance_export;
    m_has_compliance_export_isSet = true;
}

bool OAIObjs_team::is_has_compliance_export_Set() const{
    return m_has_compliance_export_isSet;
}

bool OAIObjs_team::is_has_compliance_export_Valid() const{
    return m_has_compliance_export_isValid;
}

OAIObjs_icon OAIObjs_team::getIcon() const {
    return m_icon;
}
void OAIObjs_team::setIcon(const OAIObjs_icon &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIObjs_team::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIObjs_team::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIObjs_team::getId() const {
    return m_id;
}
void OAIObjs_team::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_team::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_team::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIObjs_team::isIsAssigned() const {
    return m_is_assigned;
}
void OAIObjs_team::setIsAssigned(const bool &is_assigned) {
    m_is_assigned = is_assigned;
    m_is_assigned_isSet = true;
}

bool OAIObjs_team::is_is_assigned_Set() const{
    return m_is_assigned_isSet;
}

bool OAIObjs_team::is_is_assigned_Valid() const{
    return m_is_assigned_isValid;
}

qint32 OAIObjs_team::getIsEnterprise() const {
    return m_is_enterprise;
}
void OAIObjs_team::setIsEnterprise(const qint32 &is_enterprise) {
    m_is_enterprise = is_enterprise;
    m_is_enterprise_isSet = true;
}

bool OAIObjs_team::is_is_enterprise_Set() const{
    return m_is_enterprise_isSet;
}

bool OAIObjs_team::is_is_enterprise_Valid() const{
    return m_is_enterprise_isValid;
}

bool OAIObjs_team::isIsOverStorageLimit() const {
    return m_is_over_storage_limit;
}
void OAIObjs_team::setIsOverStorageLimit(const bool &is_over_storage_limit) {
    m_is_over_storage_limit = is_over_storage_limit;
    m_is_over_storage_limit_isSet = true;
}

bool OAIObjs_team::is_is_over_storage_limit_Set() const{
    return m_is_over_storage_limit_isSet;
}

bool OAIObjs_team::is_is_over_storage_limit_Valid() const{
    return m_is_over_storage_limit_isValid;
}

qint32 OAIObjs_team::getLimitTs() const {
    return m_limit_ts;
}
void OAIObjs_team::setLimitTs(const qint32 &limit_ts) {
    m_limit_ts = limit_ts;
    m_limit_ts_isSet = true;
}

bool OAIObjs_team::is_limit_ts_Set() const{
    return m_limit_ts_isSet;
}

bool OAIObjs_team::is_limit_ts_Valid() const{
    return m_limit_ts_isValid;
}

QString OAIObjs_team::getLocale() const {
    return m_locale;
}
void OAIObjs_team::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIObjs_team::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIObjs_team::is_locale_Valid() const{
    return m_locale_isValid;
}

qint32 OAIObjs_team::getMessagesCount() const {
    return m_messages_count;
}
void OAIObjs_team::setMessagesCount(const qint32 &messages_count) {
    m_messages_count = messages_count;
    m_messages_count_isSet = true;
}

bool OAIObjs_team::is_messages_count_Set() const{
    return m_messages_count_isSet;
}

bool OAIObjs_team::is_messages_count_Valid() const{
    return m_messages_count_isValid;
}

qint32 OAIObjs_team::getMsgEditWindowMins() const {
    return m_msg_edit_window_mins;
}
void OAIObjs_team::setMsgEditWindowMins(const qint32 &msg_edit_window_mins) {
    m_msg_edit_window_mins = msg_edit_window_mins;
    m_msg_edit_window_mins_isSet = true;
}

bool OAIObjs_team::is_msg_edit_window_mins_Set() const{
    return m_msg_edit_window_mins_isSet;
}

bool OAIObjs_team::is_msg_edit_window_mins_Valid() const{
    return m_msg_edit_window_mins_isValid;
}

QString OAIObjs_team::getName() const {
    return m_name;
}
void OAIObjs_team::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_team::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_team::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIObjs_team::isOverIntegrationsLimit() const {
    return m_over_integrations_limit;
}
void OAIObjs_team::setOverIntegrationsLimit(const bool &over_integrations_limit) {
    m_over_integrations_limit = over_integrations_limit;
    m_over_integrations_limit_isSet = true;
}

bool OAIObjs_team::is_over_integrations_limit_Set() const{
    return m_over_integrations_limit_isSet;
}

bool OAIObjs_team::is_over_integrations_limit_Valid() const{
    return m_over_integrations_limit_isValid;
}

bool OAIObjs_team::isOverStorageLimit() const {
    return m_over_storage_limit;
}
void OAIObjs_team::setOverStorageLimit(const bool &over_storage_limit) {
    m_over_storage_limit = over_storage_limit;
    m_over_storage_limit_isSet = true;
}

bool OAIObjs_team::is_over_storage_limit_Set() const{
    return m_over_storage_limit_isSet;
}

bool OAIObjs_team::is_over_storage_limit_Valid() const{
    return m_over_storage_limit_isValid;
}

QString OAIObjs_team::getPayProdCur() const {
    return m_pay_prod_cur;
}
void OAIObjs_team::setPayProdCur(const QString &pay_prod_cur) {
    m_pay_prod_cur = pay_prod_cur;
    m_pay_prod_cur_isSet = true;
}

bool OAIObjs_team::is_pay_prod_cur_Set() const{
    return m_pay_prod_cur_isSet;
}

bool OAIObjs_team::is_pay_prod_cur_Valid() const{
    return m_pay_prod_cur_isValid;
}

QString OAIObjs_team::getPlan() const {
    return m_plan;
}
void OAIObjs_team::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIObjs_team::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIObjs_team::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIObjs_primary_owner OAIObjs_team::getPrimaryOwner() const {
    return m_primary_owner;
}
void OAIObjs_team::setPrimaryOwner(const OAIObjs_primary_owner &primary_owner) {
    m_primary_owner = primary_owner;
    m_primary_owner_isSet = true;
}

bool OAIObjs_team::is_primary_owner_Set() const{
    return m_primary_owner_isSet;
}

bool OAIObjs_team::is_primary_owner_Valid() const{
    return m_primary_owner_isValid;
}

OAIObjs_team_sso_provider OAIObjs_team::getSsoProvider() const {
    return m_sso_provider;
}
void OAIObjs_team::setSsoProvider(const OAIObjs_team_sso_provider &sso_provider) {
    m_sso_provider = sso_provider;
    m_sso_provider_isSet = true;
}

bool OAIObjs_team::is_sso_provider_Set() const{
    return m_sso_provider_isSet;
}

bool OAIObjs_team::is_sso_provider_Valid() const{
    return m_sso_provider_isValid;
}

bool OAIObjs_team::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverable.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_org_migrations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_compliance_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_assigned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enterprise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_over_storage_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msg_edit_window_mins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_integrations_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_over_storage_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_prod_cur_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_team::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_isValid && m_email_domain_isValid && m_icon_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
