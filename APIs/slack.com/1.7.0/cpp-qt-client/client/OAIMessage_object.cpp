/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_object::OAIMessage_object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_object::OAIMessage_object() {
    this->initializeModel();
}

OAIMessage_object::~OAIMessage_object() {}

void OAIMessage_object::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIMessage_object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage_object::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("blocks")]);
    m_blocks_isSet = !json[QString("blocks")].isNull() && m_blocks_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIMessage_object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage_object::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_blocks_isSet) {
        obj.insert(QString("blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList<OAIObject> OAIMessage_object::getAttachments() const {
    return m_attachments;
}
void OAIMessage_object::setAttachments(const QList<OAIObject> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIMessage_object::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIMessage_object::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIObject OAIMessage_object::getBlocks() const {
    return m_blocks;
}
void OAIMessage_object::setBlocks(const OAIObject &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIMessage_object::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIMessage_object::is_blocks_Valid() const{
    return m_blocks_isValid;
}

QString OAIMessage_object::getText() const {
    return m_text;
}
void OAIMessage_object::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessage_object::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessage_object::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIMessage_object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage_object::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
