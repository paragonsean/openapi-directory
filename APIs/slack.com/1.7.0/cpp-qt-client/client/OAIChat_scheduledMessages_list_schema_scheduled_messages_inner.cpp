/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChat_scheduledMessages_list_schema_scheduled_messages_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::OAIChat_scheduledMessages_list_schema_scheduled_messages_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::OAIChat_scheduledMessages_list_schema_scheduled_messages_inner() {
    this->initializeModel();
}

OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::~OAIChat_scheduledMessages_list_schema_scheduled_messages_inner() {}

void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_post_at_isSet = false;
    m_post_at_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_post_at_isValid = ::OpenAPI::fromJsonValue(m_post_at, json[QString("post_at")]);
    m_post_at_isSet = !json[QString("post_at")].isNull() && m_post_at_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_post_at_isSet) {
        obj.insert(QString("post_at"), ::OpenAPI::toJsonValue(m_post_at));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::getChannelId() const {
    return m_channel_id;
}
void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

qint32 OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::getDateCreated() const {
    return m_date_created;
}
void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::setDateCreated(const qint32 &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::getId() const {
    return m_id;
}
void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::getPostAt() const {
    return m_post_at;
}
void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::setPostAt(const qint32 &post_at) {
    m_post_at = post_at;
    m_post_at_isSet = true;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_post_at_Set() const{
    return m_post_at_isSet;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_post_at_Valid() const{
    return m_post_at_isValid;
}

QString OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::getText() const {
    return m_text;
}
void OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_text_Set() const{
    return m_text_isSet;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChat_scheduledMessages_list_schema_scheduled_messages_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_date_created_isValid && m_id_isValid && m_post_at_isValid && true;
}

} // namespace OpenAPI
