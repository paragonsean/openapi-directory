/**
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjs_user_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjs_user_inner::OAIObjs_user_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjs_user_inner::OAIObjs_user_inner() {
    this->initializeModel();
}

OAIObjs_user_inner::~OAIObjs_user_inner() {}

void OAIObjs_user_inner::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_enterprise_user_isSet = false;
    m_enterprise_user_isValid = false;

    m_has_2fa_isSet = false;
    m_has_2fa_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_admin_isSet = false;
    m_is_admin_isValid = false;

    m_is_app_user_isSet = false;
    m_is_app_user_isValid = false;

    m_is_bot_isSet = false;
    m_is_bot_isValid = false;

    m_is_external_isSet = false;
    m_is_external_isValid = false;

    m_is_forgotten_isSet = false;
    m_is_forgotten_isValid = false;

    m_is_invited_user_isSet = false;
    m_is_invited_user_isValid = false;

    m_is_owner_isSet = false;
    m_is_owner_isValid = false;

    m_is_primary_owner_isSet = false;
    m_is_primary_owner_isValid = false;

    m_is_restricted_isSet = false;
    m_is_restricted_isValid = false;

    m_is_stranger_isSet = false;
    m_is_stranger_isValid = false;

    m_is_ultra_restricted_isSet = false;
    m_is_ultra_restricted_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_presence_isSet = false;
    m_presence_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_real_name_isSet = false;
    m_real_name_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_team_profile_isSet = false;
    m_team_profile_isValid = false;

    m_two_factor_type_isSet = false;
    m_two_factor_type_isValid = false;

    m_tz_isSet = false;
    m_tz_isValid = false;

    m_tz_label_isSet = false;
    m_tz_label_isValid = false;

    m_tz_offset_isSet = false;
    m_tz_offset_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;
}

void OAIObjs_user_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjs_user_inner::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_enterprise_user_isValid = ::OpenAPI::fromJsonValue(m_enterprise_user, json[QString("enterprise_user")]);
    m_enterprise_user_isSet = !json[QString("enterprise_user")].isNull() && m_enterprise_user_isValid;

    m_has_2fa_isValid = ::OpenAPI::fromJsonValue(m_has_2fa, json[QString("has_2fa")]);
    m_has_2fa_isSet = !json[QString("has_2fa")].isNull() && m_has_2fa_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_admin_isValid = ::OpenAPI::fromJsonValue(m_is_admin, json[QString("is_admin")]);
    m_is_admin_isSet = !json[QString("is_admin")].isNull() && m_is_admin_isValid;

    m_is_app_user_isValid = ::OpenAPI::fromJsonValue(m_is_app_user, json[QString("is_app_user")]);
    m_is_app_user_isSet = !json[QString("is_app_user")].isNull() && m_is_app_user_isValid;

    m_is_bot_isValid = ::OpenAPI::fromJsonValue(m_is_bot, json[QString("is_bot")]);
    m_is_bot_isSet = !json[QString("is_bot")].isNull() && m_is_bot_isValid;

    m_is_external_isValid = ::OpenAPI::fromJsonValue(m_is_external, json[QString("is_external")]);
    m_is_external_isSet = !json[QString("is_external")].isNull() && m_is_external_isValid;

    m_is_forgotten_isValid = ::OpenAPI::fromJsonValue(m_is_forgotten, json[QString("is_forgotten")]);
    m_is_forgotten_isSet = !json[QString("is_forgotten")].isNull() && m_is_forgotten_isValid;

    m_is_invited_user_isValid = ::OpenAPI::fromJsonValue(m_is_invited_user, json[QString("is_invited_user")]);
    m_is_invited_user_isSet = !json[QString("is_invited_user")].isNull() && m_is_invited_user_isValid;

    m_is_owner_isValid = ::OpenAPI::fromJsonValue(m_is_owner, json[QString("is_owner")]);
    m_is_owner_isSet = !json[QString("is_owner")].isNull() && m_is_owner_isValid;

    m_is_primary_owner_isValid = ::OpenAPI::fromJsonValue(m_is_primary_owner, json[QString("is_primary_owner")]);
    m_is_primary_owner_isSet = !json[QString("is_primary_owner")].isNull() && m_is_primary_owner_isValid;

    m_is_restricted_isValid = ::OpenAPI::fromJsonValue(m_is_restricted, json[QString("is_restricted")]);
    m_is_restricted_isSet = !json[QString("is_restricted")].isNull() && m_is_restricted_isValid;

    m_is_stranger_isValid = ::OpenAPI::fromJsonValue(m_is_stranger, json[QString("is_stranger")]);
    m_is_stranger_isSet = !json[QString("is_stranger")].isNull() && m_is_stranger_isValid;

    m_is_ultra_restricted_isValid = ::OpenAPI::fromJsonValue(m_is_ultra_restricted, json[QString("is_ultra_restricted")]);
    m_is_ultra_restricted_isSet = !json[QString("is_ultra_restricted")].isNull() && m_is_ultra_restricted_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_presence_isValid = ::OpenAPI::fromJsonValue(m_presence, json[QString("presence")]);
    m_presence_isSet = !json[QString("presence")].isNull() && m_presence_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("profile")]);
    m_profile_isSet = !json[QString("profile")].isNull() && m_profile_isValid;

    m_real_name_isValid = ::OpenAPI::fromJsonValue(m_real_name, json[QString("real_name")]);
    m_real_name_isSet = !json[QString("real_name")].isNull() && m_real_name_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("team_id")]);
    m_team_id_isSet = !json[QString("team_id")].isNull() && m_team_id_isValid;

    m_team_profile_isValid = ::OpenAPI::fromJsonValue(m_team_profile, json[QString("team_profile")]);
    m_team_profile_isSet = !json[QString("team_profile")].isNull() && m_team_profile_isValid;

    m_two_factor_type_isValid = ::OpenAPI::fromJsonValue(m_two_factor_type, json[QString("two_factor_type")]);
    m_two_factor_type_isSet = !json[QString("two_factor_type")].isNull() && m_two_factor_type_isValid;

    m_tz_isValid = ::OpenAPI::fromJsonValue(m_tz, json[QString("tz")]);
    m_tz_isSet = !json[QString("tz")].isNull() && m_tz_isValid;

    m_tz_label_isValid = ::OpenAPI::fromJsonValue(m_tz_label, json[QString("tz_label")]);
    m_tz_label_isSet = !json[QString("tz_label")].isNull() && m_tz_label_isValid;

    m_tz_offset_isValid = ::OpenAPI::fromJsonValue(m_tz_offset, json[QString("tz_offset")]);
    m_tz_offset_isSet = !json[QString("tz_offset")].isNull() && m_tz_offset_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;
}

QString OAIObjs_user_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjs_user_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_enterprise_user.isSet()) {
        obj.insert(QString("enterprise_user"), ::OpenAPI::toJsonValue(m_enterprise_user));
    }
    if (m_has_2fa_isSet) {
        obj.insert(QString("has_2fa"), ::OpenAPI::toJsonValue(m_has_2fa));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_admin_isSet) {
        obj.insert(QString("is_admin"), ::OpenAPI::toJsonValue(m_is_admin));
    }
    if (m_is_app_user_isSet) {
        obj.insert(QString("is_app_user"), ::OpenAPI::toJsonValue(m_is_app_user));
    }
    if (m_is_bot_isSet) {
        obj.insert(QString("is_bot"), ::OpenAPI::toJsonValue(m_is_bot));
    }
    if (m_is_external_isSet) {
        obj.insert(QString("is_external"), ::OpenAPI::toJsonValue(m_is_external));
    }
    if (m_is_forgotten_isSet) {
        obj.insert(QString("is_forgotten"), ::OpenAPI::toJsonValue(m_is_forgotten));
    }
    if (m_is_invited_user_isSet) {
        obj.insert(QString("is_invited_user"), ::OpenAPI::toJsonValue(m_is_invited_user));
    }
    if (m_is_owner_isSet) {
        obj.insert(QString("is_owner"), ::OpenAPI::toJsonValue(m_is_owner));
    }
    if (m_is_primary_owner_isSet) {
        obj.insert(QString("is_primary_owner"), ::OpenAPI::toJsonValue(m_is_primary_owner));
    }
    if (m_is_restricted_isSet) {
        obj.insert(QString("is_restricted"), ::OpenAPI::toJsonValue(m_is_restricted));
    }
    if (m_is_stranger_isSet) {
        obj.insert(QString("is_stranger"), ::OpenAPI::toJsonValue(m_is_stranger));
    }
    if (m_is_ultra_restricted_isSet) {
        obj.insert(QString("is_ultra_restricted"), ::OpenAPI::toJsonValue(m_is_ultra_restricted));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_presence_isSet) {
        obj.insert(QString("presence"), ::OpenAPI::toJsonValue(m_presence));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_real_name_isSet) {
        obj.insert(QString("real_name"), ::OpenAPI::toJsonValue(m_real_name));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("team_id"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_team_profile.isSet()) {
        obj.insert(QString("team_profile"), ::OpenAPI::toJsonValue(m_team_profile));
    }
    if (m_two_factor_type_isSet) {
        obj.insert(QString("two_factor_type"), ::OpenAPI::toJsonValue(m_two_factor_type));
    }
    if (m_tz.size() > 0) {
        obj.insert(QString("tz"), ::OpenAPI::toJsonValue(m_tz));
    }
    if (m_tz_label_isSet) {
        obj.insert(QString("tz_label"), ::OpenAPI::toJsonValue(m_tz_label));
    }
    if (m_tz_offset_isSet) {
        obj.insert(QString("tz_offset"), ::OpenAPI::toJsonValue(m_tz_offset));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    return obj;
}

QString OAIObjs_user_inner::getColor() const {
    return m_color;
}
void OAIObjs_user_inner::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIObjs_user_inner::is_color_Set() const{
    return m_color_isSet;
}

bool OAIObjs_user_inner::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIObjs_user_inner::isDeleted() const {
    return m_deleted;
}
void OAIObjs_user_inner::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIObjs_user_inner::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIObjs_user_inner::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAIObjs_enterprise_user OAIObjs_user_inner::getEnterpriseUser() const {
    return m_enterprise_user;
}
void OAIObjs_user_inner::setEnterpriseUser(const OAIObjs_enterprise_user &enterprise_user) {
    m_enterprise_user = enterprise_user;
    m_enterprise_user_isSet = true;
}

bool OAIObjs_user_inner::is_enterprise_user_Set() const{
    return m_enterprise_user_isSet;
}

bool OAIObjs_user_inner::is_enterprise_user_Valid() const{
    return m_enterprise_user_isValid;
}

bool OAIObjs_user_inner::isHas2fa() const {
    return m_has_2fa;
}
void OAIObjs_user_inner::setHas2fa(const bool &has_2fa) {
    m_has_2fa = has_2fa;
    m_has_2fa_isSet = true;
}

bool OAIObjs_user_inner::is_has_2fa_Set() const{
    return m_has_2fa_isSet;
}

bool OAIObjs_user_inner::is_has_2fa_Valid() const{
    return m_has_2fa_isValid;
}

QString OAIObjs_user_inner::getId() const {
    return m_id;
}
void OAIObjs_user_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIObjs_user_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIObjs_user_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIObjs_user_inner::isIsAdmin() const {
    return m_is_admin;
}
void OAIObjs_user_inner::setIsAdmin(const bool &is_admin) {
    m_is_admin = is_admin;
    m_is_admin_isSet = true;
}

bool OAIObjs_user_inner::is_is_admin_Set() const{
    return m_is_admin_isSet;
}

bool OAIObjs_user_inner::is_is_admin_Valid() const{
    return m_is_admin_isValid;
}

bool OAIObjs_user_inner::isIsAppUser() const {
    return m_is_app_user;
}
void OAIObjs_user_inner::setIsAppUser(const bool &is_app_user) {
    m_is_app_user = is_app_user;
    m_is_app_user_isSet = true;
}

bool OAIObjs_user_inner::is_is_app_user_Set() const{
    return m_is_app_user_isSet;
}

bool OAIObjs_user_inner::is_is_app_user_Valid() const{
    return m_is_app_user_isValid;
}

bool OAIObjs_user_inner::isIsBot() const {
    return m_is_bot;
}
void OAIObjs_user_inner::setIsBot(const bool &is_bot) {
    m_is_bot = is_bot;
    m_is_bot_isSet = true;
}

bool OAIObjs_user_inner::is_is_bot_Set() const{
    return m_is_bot_isSet;
}

bool OAIObjs_user_inner::is_is_bot_Valid() const{
    return m_is_bot_isValid;
}

bool OAIObjs_user_inner::isIsExternal() const {
    return m_is_external;
}
void OAIObjs_user_inner::setIsExternal(const bool &is_external) {
    m_is_external = is_external;
    m_is_external_isSet = true;
}

bool OAIObjs_user_inner::is_is_external_Set() const{
    return m_is_external_isSet;
}

bool OAIObjs_user_inner::is_is_external_Valid() const{
    return m_is_external_isValid;
}

bool OAIObjs_user_inner::isIsForgotten() const {
    return m_is_forgotten;
}
void OAIObjs_user_inner::setIsForgotten(const bool &is_forgotten) {
    m_is_forgotten = is_forgotten;
    m_is_forgotten_isSet = true;
}

bool OAIObjs_user_inner::is_is_forgotten_Set() const{
    return m_is_forgotten_isSet;
}

bool OAIObjs_user_inner::is_is_forgotten_Valid() const{
    return m_is_forgotten_isValid;
}

bool OAIObjs_user_inner::isIsInvitedUser() const {
    return m_is_invited_user;
}
void OAIObjs_user_inner::setIsInvitedUser(const bool &is_invited_user) {
    m_is_invited_user = is_invited_user;
    m_is_invited_user_isSet = true;
}

bool OAIObjs_user_inner::is_is_invited_user_Set() const{
    return m_is_invited_user_isSet;
}

bool OAIObjs_user_inner::is_is_invited_user_Valid() const{
    return m_is_invited_user_isValid;
}

bool OAIObjs_user_inner::isIsOwner() const {
    return m_is_owner;
}
void OAIObjs_user_inner::setIsOwner(const bool &is_owner) {
    m_is_owner = is_owner;
    m_is_owner_isSet = true;
}

bool OAIObjs_user_inner::is_is_owner_Set() const{
    return m_is_owner_isSet;
}

bool OAIObjs_user_inner::is_is_owner_Valid() const{
    return m_is_owner_isValid;
}

bool OAIObjs_user_inner::isIsPrimaryOwner() const {
    return m_is_primary_owner;
}
void OAIObjs_user_inner::setIsPrimaryOwner(const bool &is_primary_owner) {
    m_is_primary_owner = is_primary_owner;
    m_is_primary_owner_isSet = true;
}

bool OAIObjs_user_inner::is_is_primary_owner_Set() const{
    return m_is_primary_owner_isSet;
}

bool OAIObjs_user_inner::is_is_primary_owner_Valid() const{
    return m_is_primary_owner_isValid;
}

bool OAIObjs_user_inner::isIsRestricted() const {
    return m_is_restricted;
}
void OAIObjs_user_inner::setIsRestricted(const bool &is_restricted) {
    m_is_restricted = is_restricted;
    m_is_restricted_isSet = true;
}

bool OAIObjs_user_inner::is_is_restricted_Set() const{
    return m_is_restricted_isSet;
}

bool OAIObjs_user_inner::is_is_restricted_Valid() const{
    return m_is_restricted_isValid;
}

bool OAIObjs_user_inner::isIsStranger() const {
    return m_is_stranger;
}
void OAIObjs_user_inner::setIsStranger(const bool &is_stranger) {
    m_is_stranger = is_stranger;
    m_is_stranger_isSet = true;
}

bool OAIObjs_user_inner::is_is_stranger_Set() const{
    return m_is_stranger_isSet;
}

bool OAIObjs_user_inner::is_is_stranger_Valid() const{
    return m_is_stranger_isValid;
}

bool OAIObjs_user_inner::isIsUltraRestricted() const {
    return m_is_ultra_restricted;
}
void OAIObjs_user_inner::setIsUltraRestricted(const bool &is_ultra_restricted) {
    m_is_ultra_restricted = is_ultra_restricted;
    m_is_ultra_restricted_isSet = true;
}

bool OAIObjs_user_inner::is_is_ultra_restricted_Set() const{
    return m_is_ultra_restricted_isSet;
}

bool OAIObjs_user_inner::is_is_ultra_restricted_Valid() const{
    return m_is_ultra_restricted_isValid;
}

QString OAIObjs_user_inner::getLocale() const {
    return m_locale;
}
void OAIObjs_user_inner::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIObjs_user_inner::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIObjs_user_inner::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIObjs_user_inner::getName() const {
    return m_name;
}
void OAIObjs_user_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIObjs_user_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIObjs_user_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIObjs_user_inner::getPresence() const {
    return m_presence;
}
void OAIObjs_user_inner::setPresence(const QString &presence) {
    m_presence = presence;
    m_presence_isSet = true;
}

bool OAIObjs_user_inner::is_presence_Set() const{
    return m_presence_isSet;
}

bool OAIObjs_user_inner::is_presence_Valid() const{
    return m_presence_isValid;
}

OAIObjs_user_profile OAIObjs_user_inner::getProfile() const {
    return m_profile;
}
void OAIObjs_user_inner::setProfile(const OAIObjs_user_profile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIObjs_user_inner::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIObjs_user_inner::is_profile_Valid() const{
    return m_profile_isValid;
}

QString OAIObjs_user_inner::getRealName() const {
    return m_real_name;
}
void OAIObjs_user_inner::setRealName(const QString &real_name) {
    m_real_name = real_name;
    m_real_name_isSet = true;
}

bool OAIObjs_user_inner::is_real_name_Set() const{
    return m_real_name_isSet;
}

bool OAIObjs_user_inner::is_real_name_Valid() const{
    return m_real_name_isValid;
}

QString OAIObjs_user_inner::getTeam() const {
    return m_team;
}
void OAIObjs_user_inner::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIObjs_user_inner::is_team_Set() const{
    return m_team_isSet;
}

bool OAIObjs_user_inner::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIObjs_user_inner::getTeamId() const {
    return m_team_id;
}
void OAIObjs_user_inner::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIObjs_user_inner::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIObjs_user_inner::is_team_id_Valid() const{
    return m_team_id_isValid;
}

OAIObjs_user_inner_anyOf_team_profile OAIObjs_user_inner::getTeamProfile() const {
    return m_team_profile;
}
void OAIObjs_user_inner::setTeamProfile(const OAIObjs_user_inner_anyOf_team_profile &team_profile) {
    m_team_profile = team_profile;
    m_team_profile_isSet = true;
}

bool OAIObjs_user_inner::is_team_profile_Set() const{
    return m_team_profile_isSet;
}

bool OAIObjs_user_inner::is_team_profile_Valid() const{
    return m_team_profile_isValid;
}

QString OAIObjs_user_inner::getTwoFactorType() const {
    return m_two_factor_type;
}
void OAIObjs_user_inner::setTwoFactorType(const QString &two_factor_type) {
    m_two_factor_type = two_factor_type;
    m_two_factor_type_isSet = true;
}

bool OAIObjs_user_inner::is_two_factor_type_Set() const{
    return m_two_factor_type_isSet;
}

bool OAIObjs_user_inner::is_two_factor_type_Valid() const{
    return m_two_factor_type_isValid;
}

QList<OAIObjs_team_discoverable_inner> OAIObjs_user_inner::getTz() const {
    return m_tz;
}
void OAIObjs_user_inner::setTz(const QList<OAIObjs_team_discoverable_inner> &tz) {
    m_tz = tz;
    m_tz_isSet = true;
}

bool OAIObjs_user_inner::is_tz_Set() const{
    return m_tz_isSet;
}

bool OAIObjs_user_inner::is_tz_Valid() const{
    return m_tz_isValid;
}

QString OAIObjs_user_inner::getTzLabel() const {
    return m_tz_label;
}
void OAIObjs_user_inner::setTzLabel(const QString &tz_label) {
    m_tz_label = tz_label;
    m_tz_label_isSet = true;
}

bool OAIObjs_user_inner::is_tz_label_Set() const{
    return m_tz_label_isSet;
}

bool OAIObjs_user_inner::is_tz_label_Valid() const{
    return m_tz_label_isValid;
}

double OAIObjs_user_inner::getTzOffset() const {
    return m_tz_offset;
}
void OAIObjs_user_inner::setTzOffset(const double &tz_offset) {
    m_tz_offset = tz_offset;
    m_tz_offset_isSet = true;
}

bool OAIObjs_user_inner::is_tz_offset_Set() const{
    return m_tz_offset_isSet;
}

bool OAIObjs_user_inner::is_tz_offset_Valid() const{
    return m_tz_offset_isValid;
}

double OAIObjs_user_inner::getUpdated() const {
    return m_updated;
}
void OAIObjs_user_inner::setUpdated(const double &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIObjs_user_inner::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIObjs_user_inner::is_updated_Valid() const{
    return m_updated_isValid;
}

QSet<QString> OAIObjs_user_inner::getTeams() const {
    return m_teams;
}
void OAIObjs_user_inner::setTeams(const QSet<QString> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIObjs_user_inner::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIObjs_user_inner::is_teams_Valid() const{
    return m_teams_isValid;
}

bool OAIObjs_user_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enterprise_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_2fa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_app_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_bot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_forgotten_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_invited_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_primary_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_stranger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ultra_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_real_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_two_factor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tz.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tz_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tz_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjs_user_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_is_app_user_isValid && m_is_bot_isValid && m_name_isValid && m_profile_isValid && m_updated_isValid && true;
}

} // namespace OpenAPI
