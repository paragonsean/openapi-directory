# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model200SingleResultResultKeysGlobalKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope: str=None):
        """Model200SingleResultResultKeysGlobalKey - a model defined in OpenAPI

        :param scope: The scope of this Model200SingleResultResultKeysGlobalKey.
        """
        self.openapi_types = {
            'scope': str
        }

        self.attribute_map = {
            'scope': 'scope'
        }

        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model200SingleResultResultKeysGlobalKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _200SingleResult_result_keys_global_key of this Model200SingleResultResultKeysGlobalKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self):
        """Gets the scope of this Model200SingleResultResultKeysGlobalKey.

        Scope

        :return: The scope of this Model200SingleResultResultKeysGlobalKey.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Model200SingleResultResultKeysGlobalKey.

        Scope

        :param scope: The scope of this Model200SingleResultResultKeysGlobalKey.
        :type scope: str
        """
        if scope is not None and len(scope) < 1:
            raise ValueError("Invalid value for `scope`, length must be greater than or equal to `1`")

        self._scope = scope
