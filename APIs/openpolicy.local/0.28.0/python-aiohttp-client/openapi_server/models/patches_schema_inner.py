# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchesSchemaInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, op: str=None, path: str=None, value: Dict[str, object]=None):
        """PatchesSchemaInner - a model defined in OpenAPI

        :param op: The op of this PatchesSchemaInner.
        :param path: The path of this PatchesSchemaInner.
        :param value: The value of this PatchesSchemaInner.
        """
        self.openapi_types = {
            'op': str,
            'path': str,
            'value': Dict[str, object]
        }

        self.attribute_map = {
            'op': 'op',
            'path': 'path',
            'value': 'value'
        }

        self._op = op
        self._path = path
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchesSchemaInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The patchesSchema_inner of this PatchesSchemaInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def op(self):
        """Gets the op of this PatchesSchemaInner.

        JSON patch operation type

        :return: The op of this PatchesSchemaInner.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this PatchesSchemaInner.

        JSON patch operation type

        :param op: The op of this PatchesSchemaInner.
        :type op: str
        """
        allowed_values = ["add", "remove", "replace", "move", "copy", "test"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def path(self):
        """Gets the path of this PatchesSchemaInner.

        A [JSON pointer](https://tools.ietf.org/html/rfc6901) to a location within the target document where the operation is performed.  The *effective path* is this value prefixed with the API call's `path` parameter.  The server will return a *bad request* (404) response if:  - The *parent* of the effective path does not refer to an existing document - For **remove** and **replace** operations, the effective path does not refer to an existing document.

        :return: The path of this PatchesSchemaInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PatchesSchemaInner.

        A [JSON pointer](https://tools.ietf.org/html/rfc6901) to a location within the target document where the operation is performed.  The *effective path* is this value prefixed with the API call's `path` parameter.  The server will return a *bad request* (404) response if:  - The *parent* of the effective path does not refer to an existing document - For **remove** and **replace** operations, the effective path does not refer to an existing document.

        :param path: The path of this PatchesSchemaInner.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")
        if path is not None and len(path) < 1:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `1`")

        self._path = path

    @property
    def value(self):
        """Gets the value of this PatchesSchemaInner.

        The value to add, replace or test.

        :return: The value of this PatchesSchemaInner.
        :rtype: Dict[str, object]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PatchesSchemaInner.

        The value to add, replace or test.

        :param value: The value of this PatchesSchemaInner.
        :type value: Dict[str, object]
        """

        self._value = value
