# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model200_result_result_inner_ast import Model200ResultResultInnerAst
from openapi_server import util


class Model200ResultResultInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ast: Model200ResultResultInnerAst=None, id: str=None, raw: str=None):
        """Model200ResultResultInner - a model defined in OpenAPI

        :param ast: The ast of this Model200ResultResultInner.
        :param id: The id of this Model200ResultResultInner.
        :param raw: The raw of this Model200ResultResultInner.
        """
        self.openapi_types = {
            'ast': Model200ResultResultInnerAst,
            'id': str,
            'raw': str
        }

        self.attribute_map = {
            'ast': 'ast',
            'id': 'id',
            'raw': 'raw'
        }

        self._ast = ast
        self._id = id
        self._raw = raw

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model200ResultResultInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _200Result_result_inner of this Model200ResultResultInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ast(self):
        """Gets the ast of this Model200ResultResultInner.


        :return: The ast of this Model200ResultResultInner.
        :rtype: Model200ResultResultInnerAst
        """
        return self._ast

    @ast.setter
    def ast(self, ast):
        """Sets the ast of this Model200ResultResultInner.


        :param ast: The ast of this Model200ResultResultInner.
        :type ast: Model200ResultResultInnerAst
        """

        self._ast = ast

    @property
    def id(self):
        """Gets the id of this Model200ResultResultInner.

        The name of a policy module

        :return: The id of this Model200ResultResultInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model200ResultResultInner.

        The name of a policy module

        :param id: The id of this Model200ResultResultInner.
        :type id: str
        """
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def raw(self):
        """Gets the raw of this Model200ResultResultInner.

        A string representation of the full Rego policy

        :return: The raw of this Model200ResultResultInner.
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this Model200ResultResultInner.

        A string representation of the full Rego policy

        :param raw: The raw of this Model200ResultResultInner.
        :type raw: str
        """
        if raw is not None and len(raw) < 1:
            raise ValueError("Invalid value for `raw`, length must be greater than or equal to `1`")

        self._raw = raw
