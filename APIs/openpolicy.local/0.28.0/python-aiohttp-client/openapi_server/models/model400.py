# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model400_errors_inner import Model400ErrorsInner
from openapi_server import util


class Model400(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, errors: list[Model400ErrorsInner]=None, message: str=None):
        """Model400 - a model defined in OpenAPI

        :param code: The code of this Model400.
        :param errors: The errors of this Model400.
        :param message: The message of this Model400.
        """
        self.openapi_types = {
            'code': str,
            'errors': list[Model400ErrorsInner],
            'message': str
        }

        self.attribute_map = {
            'code': 'code',
            'errors': 'errors',
            'message': 'message'
        }

        self._code = code
        self._errors = errors
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model400':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The 400 of this Model400.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Model400.

        The error code name

        :return: The code of this Model400.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Model400.

        The error code name

        :param code: The code of this Model400.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if code is not None and len(code) < 1:
            raise ValueError("Invalid value for `code`, length must be greater than or equal to `1`")

        self._code = code

    @property
    def errors(self):
        """Gets the errors of this Model400.

        Errors that may have been generated during the parse, compile, or installation of a policy module

        :return: The errors of this Model400.
        :rtype: list[Model400ErrorsInner]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Model400.

        Errors that may have been generated during the parse, compile, or installation of a policy module

        :param errors: The errors of this Model400.
        :type errors: list[Model400ErrorsInner]
        """

        self._errors = errors

    @property
    def message(self):
        """Gets the message of this Model400.

        The description of the error

        :return: The message of this Model400.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Model400.

        The description of the error

        :param message: The message of this Model400.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")
        if message is not None and len(message) < 1:
            raise ValueError("Invalid value for `message`, length must be greater than or equal to `1`")

        self._message = message
