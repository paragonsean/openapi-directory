# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model200_explanations_explanation_inner_locals_inner import Model200ExplanationsExplanationInnerLocalsInner
from openapi_server.models.model200_explanations_explanation_inner_node import Model200ExplanationsExplanationInnerNode
from openapi_server import util


class Model200ExplanationsExplanationInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locals: List[Model200ExplanationsExplanationInnerLocalsInner]=None, node: Model200ExplanationsExplanationInnerNode=None, op: str=None, parent_id: float=None, query_id: float=None, type: str=None):
        """Model200ExplanationsExplanationInner - a model defined in OpenAPI

        :param locals: The locals of this Model200ExplanationsExplanationInner.
        :param node: The node of this Model200ExplanationsExplanationInner.
        :param op: The op of this Model200ExplanationsExplanationInner.
        :param parent_id: The parent_id of this Model200ExplanationsExplanationInner.
        :param query_id: The query_id of this Model200ExplanationsExplanationInner.
        :param type: The type of this Model200ExplanationsExplanationInner.
        """
        self.openapi_types = {
            'locals': List[Model200ExplanationsExplanationInnerLocalsInner],
            'node': Model200ExplanationsExplanationInnerNode,
            'op': str,
            'parent_id': float,
            'query_id': float,
            'type': str
        }

        self.attribute_map = {
            'locals': 'locals',
            'node': 'node',
            'op': 'op',
            'parent_id': 'parent_id',
            'query_id': 'query_id',
            'type': 'type'
        }

        self._locals = locals
        self._node = node
        self._op = op
        self._parent_id = parent_id
        self._query_id = query_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model200ExplanationsExplanationInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _200Explanations_explanation_inner of this Model200ExplanationsExplanationInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locals(self):
        """Gets the locals of this Model200ExplanationsExplanationInner.

        The query's term bindings at the point when the trace event was emitted.

        :return: The locals of this Model200ExplanationsExplanationInner.
        :rtype: List[Model200ExplanationsExplanationInnerLocalsInner]
        """
        return self._locals

    @locals.setter
    def locals(self, locals):
        """Sets the locals of this Model200ExplanationsExplanationInner.

        The query's term bindings at the point when the trace event was emitted.

        :param locals: The locals of this Model200ExplanationsExplanationInner.
        :type locals: List[Model200ExplanationsExplanationInnerLocalsInner]
        """

        self._locals = locals

    @property
    def node(self):
        """Gets the node of this Model200ExplanationsExplanationInner.


        :return: The node of this Model200ExplanationsExplanationInner.
        :rtype: Model200ExplanationsExplanationInnerNode
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this Model200ExplanationsExplanationInner.


        :param node: The node of this Model200ExplanationsExplanationInner.
        :type node: Model200ExplanationsExplanationInnerNode
        """

        self._node = node

    @property
    def op(self):
        """Gets the op of this Model200ExplanationsExplanationInner.

        The kind of *trace event*  Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points: - enter - before a body or rule is evaluated - exit - after a body or rule has evaluated successfully - eval - before an expression is evaluated - fail - after an expression has evaluated to false. - redo - before evaluation restarts from a body, rule, or expression.  By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.

        :return: The op of this Model200ExplanationsExplanationInner.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this Model200ExplanationsExplanationInner.

        The kind of *trace event*  Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points: - enter - before a body or rule is evaluated - exit - after a body or rule has evaluated successfully - eval - before an expression is evaluated - fail - after an expression has evaluated to false. - redo - before evaluation restarts from a body, rule, or expression.  By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.

        :param op: The op of this Model200ExplanationsExplanationInner.
        :type op: str
        """
        allowed_values = ["enter", "exit", "eval", "fail", "redo"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def parent_id(self):
        """Gets the parent_id of this Model200ExplanationsExplanationInner.

        The parent query. Use this field to identify trace events from related queries.  For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query A’s *query_id*.

        :return: The parent_id of this Model200ExplanationsExplanationInner.
        :rtype: float
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Model200ExplanationsExplanationInner.

        The parent query. Use this field to identify trace events from related queries.  For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query A’s *query_id*.

        :param parent_id: The parent_id of this Model200ExplanationsExplanationInner.
        :type parent_id: float
        """
        if parent_id is not None and parent_id < 0:
            raise ValueError("Invalid value for `parent_id`, must be a value greater than or equal to `0`")

        self._parent_id = parent_id

    @property
    def query_id(self):
        """Gets the query_id of this Model200ExplanationsExplanationInner.

        The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.

        :return: The query_id of this Model200ExplanationsExplanationInner.
        :rtype: float
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this Model200ExplanationsExplanationInner.

        The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.

        :param query_id: The query_id of this Model200ExplanationsExplanationInner.
        :type query_id: float
        """
        if query_id is not None and query_id < 0:
            raise ValueError("Invalid value for `query_id`, must be a value greater than or equal to `0`")

        self._query_id = query_id

    @property
    def type(self):
        """Gets the type of this Model200ExplanationsExplanationInner.

        The type of the **node** field

        :return: The type of this Model200ExplanationsExplanationInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Model200ExplanationsExplanationInner.

        The type of the **node** field

        :param type: The type of this Model200ExplanationsExplanationInner.
        :type type: str
        """
        allowed_values = ["expr", "rule", "body"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
