# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model200_single_result_result_bundles import Model200SingleResultResultBundles
from openapi_server.models.model200_single_result_result_decision_logs import Model200SingleResultResultDecisionLogs
from openapi_server.models.model200_single_result_result_keys import Model200SingleResultResultKeys
from openapi_server.models.model200_single_result_result_labels import Model200SingleResultResultLabels
from openapi_server.models.model200_single_result_result_services import Model200SingleResultResultServices
from openapi_server.models.model200_single_result_result_status import Model200SingleResultResultStatus
from openapi_server import util


class Model200SingleResultResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundles: Model200SingleResultResultBundles=None, decision_logs: Model200SingleResultResultDecisionLogs=None, default_authorization_decision: str=None, default_decision: str=None, keys: Model200SingleResultResultKeys=None, labels: Model200SingleResultResultLabels=None, services: Model200SingleResultResultServices=None, status: Model200SingleResultResultStatus=None):
        """Model200SingleResultResult - a model defined in OpenAPI

        :param bundles: The bundles of this Model200SingleResultResult.
        :param decision_logs: The decision_logs of this Model200SingleResultResult.
        :param default_authorization_decision: The default_authorization_decision of this Model200SingleResultResult.
        :param default_decision: The default_decision of this Model200SingleResultResult.
        :param keys: The keys of this Model200SingleResultResult.
        :param labels: The labels of this Model200SingleResultResult.
        :param services: The services of this Model200SingleResultResult.
        :param status: The status of this Model200SingleResultResult.
        """
        self.openapi_types = {
            'bundles': Model200SingleResultResultBundles,
            'decision_logs': Model200SingleResultResultDecisionLogs,
            'default_authorization_decision': str,
            'default_decision': str,
            'keys': Model200SingleResultResultKeys,
            'labels': Model200SingleResultResultLabels,
            'services': Model200SingleResultResultServices,
            'status': Model200SingleResultResultStatus
        }

        self.attribute_map = {
            'bundles': 'bundles',
            'decision_logs': 'decision_logs',
            'default_authorization_decision': 'default_authorization_decision',
            'default_decision': 'default_decision',
            'keys': 'keys',
            'labels': 'labels',
            'services': 'services',
            'status': 'status'
        }

        self._bundles = bundles
        self._decision_logs = decision_logs
        self._default_authorization_decision = default_authorization_decision
        self._default_decision = default_decision
        self._keys = keys
        self._labels = labels
        self._services = services
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model200SingleResultResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _200SingleResult_result of this Model200SingleResultResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundles(self):
        """Gets the bundles of this Model200SingleResultResult.


        :return: The bundles of this Model200SingleResultResult.
        :rtype: Model200SingleResultResultBundles
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this Model200SingleResultResult.


        :param bundles: The bundles of this Model200SingleResultResult.
        :type bundles: Model200SingleResultResultBundles
        """

        self._bundles = bundles

    @property
    def decision_logs(self):
        """Gets the decision_logs of this Model200SingleResultResult.


        :return: The decision_logs of this Model200SingleResultResult.
        :rtype: Model200SingleResultResultDecisionLogs
        """
        return self._decision_logs

    @decision_logs.setter
    def decision_logs(self, decision_logs):
        """Sets the decision_logs of this Model200SingleResultResult.


        :param decision_logs: The decision_logs of this Model200SingleResultResult.
        :type decision_logs: Model200SingleResultResultDecisionLogs
        """

        self._decision_logs = decision_logs

    @property
    def default_authorization_decision(self):
        """Gets the default_authorization_decision of this Model200SingleResultResult.


        :return: The default_authorization_decision of this Model200SingleResultResult.
        :rtype: str
        """
        return self._default_authorization_decision

    @default_authorization_decision.setter
    def default_authorization_decision(self, default_authorization_decision):
        """Sets the default_authorization_decision of this Model200SingleResultResult.


        :param default_authorization_decision: The default_authorization_decision of this Model200SingleResultResult.
        :type default_authorization_decision: str
        """

        self._default_authorization_decision = default_authorization_decision

    @property
    def default_decision(self):
        """Gets the default_decision of this Model200SingleResultResult.


        :return: The default_decision of this Model200SingleResultResult.
        :rtype: str
        """
        return self._default_decision

    @default_decision.setter
    def default_decision(self, default_decision):
        """Sets the default_decision of this Model200SingleResultResult.


        :param default_decision: The default_decision of this Model200SingleResultResult.
        :type default_decision: str
        """

        self._default_decision = default_decision

    @property
    def keys(self):
        """Gets the keys of this Model200SingleResultResult.


        :return: The keys of this Model200SingleResultResult.
        :rtype: Model200SingleResultResultKeys
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this Model200SingleResultResult.


        :param keys: The keys of this Model200SingleResultResult.
        :type keys: Model200SingleResultResultKeys
        """

        self._keys = keys

    @property
    def labels(self):
        """Gets the labels of this Model200SingleResultResult.


        :return: The labels of this Model200SingleResultResult.
        :rtype: Model200SingleResultResultLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Model200SingleResultResult.


        :param labels: The labels of this Model200SingleResultResult.
        :type labels: Model200SingleResultResultLabels
        """

        self._labels = labels

    @property
    def services(self):
        """Gets the services of this Model200SingleResultResult.


        :return: The services of this Model200SingleResultResult.
        :rtype: Model200SingleResultResultServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Model200SingleResultResult.


        :param services: The services of this Model200SingleResultResult.
        :type services: Model200SingleResultResultServices
        """

        self._services = services

    @property
    def status(self):
        """Gets the status of this Model200SingleResultResult.


        :return: The status of this Model200SingleResultResult.
        :rtype: Model200SingleResultResultStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Model200SingleResultResult.


        :param status: The status of this Model200SingleResultResult.
        :type status: Model200SingleResultResultStatus
        """

        self._status = status
