/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyAPIApi_H
#define OAI_OAIPolicyAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI200Result.h"
#include "OAI400.h"
#include "OAI404.h"
#include "OAIGetDocumentWithWebHook_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyAPIApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyAPIApi(const int timeOut = 0);
    ~OAIPolicyAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  pretty bool [optional]
    */
    virtual void deletePolicyModule(const QString &id, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  pretty bool [optional]
    */
    virtual void getPolicies(const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  pretty bool [optional]
    */
    virtual void getPolicyModule(const QString &id, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  body QString [required]
    * @param[in]  pretty bool [optional]
    * @param[in]  metrics bool [optional]
    */
    virtual void putPolicyModule(const QString &id, const QString &body, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &metrics = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePolicyModuleCallback(OAIHttpRequestWorker *worker);
    void getPoliciesCallback(OAIHttpRequestWorker *worker);
    void getPolicyModuleCallback(OAIHttpRequestWorker *worker);
    void putPolicyModuleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePolicyModuleSignal(OAIGetDocumentWithWebHook_200_response summary);
    void getPoliciesSignal(OAI200Result summary);
    void getPolicyModuleSignal(OAI200Result summary);
    void putPolicyModuleSignal(OAI200Result summary);


    void deletePolicyModuleSignalFull(OAIHttpRequestWorker *worker, OAIGetDocumentWithWebHook_200_response summary);
    void getPoliciesSignalFull(OAIHttpRequestWorker *worker, OAI200Result summary);
    void getPolicyModuleSignalFull(OAIHttpRequestWorker *worker, OAI200Result summary);
    void putPolicyModuleSignalFull(OAIHttpRequestWorker *worker, OAI200Result summary);

    Q_DECL_DEPRECATED_X("Use deletePolicyModuleSignalError() instead")
    void deletePolicyModuleSignalE(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePolicyModuleSignalError(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPoliciesSignalError() instead")
    void getPoliciesSignalE(OAI200Result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPoliciesSignalError(OAI200Result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPolicyModuleSignalError() instead")
    void getPolicyModuleSignalE(OAI200Result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPolicyModuleSignalError(OAI200Result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPolicyModuleSignalError() instead")
    void putPolicyModuleSignalE(OAI200Result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPolicyModuleSignalError(OAI200Result summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePolicyModuleSignalErrorFull() instead")
    void deletePolicyModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePolicyModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPoliciesSignalErrorFull() instead")
    void getPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPolicyModuleSignalErrorFull() instead")
    void getPolicyModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPolicyModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPolicyModuleSignalErrorFull() instead")
    void putPolicyModuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPolicyModuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
