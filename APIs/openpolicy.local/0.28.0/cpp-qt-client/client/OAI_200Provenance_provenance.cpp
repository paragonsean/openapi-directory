/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_200Provenance_provenance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_200Provenance_provenance::OAI_200Provenance_provenance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_200Provenance_provenance::OAI_200Provenance_provenance() {
    this->initializeModel();
}

OAI_200Provenance_provenance::~OAI_200Provenance_provenance() {}

void OAI_200Provenance_provenance::initializeModel() {

    m_build_commit_isSet = false;
    m_build_commit_isValid = false;

    m_build_hostname_isSet = false;
    m_build_hostname_isValid = false;

    m_build_timestamp_isSet = false;
    m_build_timestamp_isValid = false;

    m_bundles_isSet = false;
    m_bundles_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAI_200Provenance_provenance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_200Provenance_provenance::fromJsonObject(QJsonObject json) {

    m_build_commit_isValid = ::OpenAPI::fromJsonValue(m_build_commit, json[QString("build_commit")]);
    m_build_commit_isSet = !json[QString("build_commit")].isNull() && m_build_commit_isValid;

    m_build_hostname_isValid = ::OpenAPI::fromJsonValue(m_build_hostname, json[QString("build_hostname")]);
    m_build_hostname_isSet = !json[QString("build_hostname")].isNull() && m_build_hostname_isValid;

    m_build_timestamp_isValid = ::OpenAPI::fromJsonValue(m_build_timestamp, json[QString("build_timestamp")]);
    m_build_timestamp_isSet = !json[QString("build_timestamp")].isNull() && m_build_timestamp_isValid;

    m_bundles_isValid = ::OpenAPI::fromJsonValue(m_bundles, json[QString("bundles")]);
    m_bundles_isSet = !json[QString("bundles")].isNull() && m_bundles_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAI_200Provenance_provenance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_200Provenance_provenance::asJsonObject() const {
    QJsonObject obj;
    if (m_build_commit_isSet) {
        obj.insert(QString("build_commit"), ::OpenAPI::toJsonValue(m_build_commit));
    }
    if (m_build_hostname_isSet) {
        obj.insert(QString("build_hostname"), ::OpenAPI::toJsonValue(m_build_hostname));
    }
    if (m_build_timestamp_isSet) {
        obj.insert(QString("build_timestamp"), ::OpenAPI::toJsonValue(m_build_timestamp));
    }
    if (m_bundles.size() > 0) {
        obj.insert(QString("bundles"), ::OpenAPI::toJsonValue(m_bundles));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAI_200Provenance_provenance::getBuildCommit() const {
    return m_build_commit;
}
void OAI_200Provenance_provenance::setBuildCommit(const QString &build_commit) {
    m_build_commit = build_commit;
    m_build_commit_isSet = true;
}

bool OAI_200Provenance_provenance::is_build_commit_Set() const{
    return m_build_commit_isSet;
}

bool OAI_200Provenance_provenance::is_build_commit_Valid() const{
    return m_build_commit_isValid;
}

QString OAI_200Provenance_provenance::getBuildHostname() const {
    return m_build_hostname;
}
void OAI_200Provenance_provenance::setBuildHostname(const QString &build_hostname) {
    m_build_hostname = build_hostname;
    m_build_hostname_isSet = true;
}

bool OAI_200Provenance_provenance::is_build_hostname_Set() const{
    return m_build_hostname_isSet;
}

bool OAI_200Provenance_provenance::is_build_hostname_Valid() const{
    return m_build_hostname_isValid;
}

QString OAI_200Provenance_provenance::getBuildTimestamp() const {
    return m_build_timestamp;
}
void OAI_200Provenance_provenance::setBuildTimestamp(const QString &build_timestamp) {
    m_build_timestamp = build_timestamp;
    m_build_timestamp_isSet = true;
}

bool OAI_200Provenance_provenance::is_build_timestamp_Set() const{
    return m_build_timestamp_isSet;
}

bool OAI_200Provenance_provenance::is_build_timestamp_Valid() const{
    return m_build_timestamp_isValid;
}

QMap<QString, QJsonValue> OAI_200Provenance_provenance::getBundles() const {
    return m_bundles;
}
void OAI_200Provenance_provenance::setBundles(const QMap<QString, QJsonValue> &bundles) {
    m_bundles = bundles;
    m_bundles_isSet = true;
}

bool OAI_200Provenance_provenance::is_bundles_Set() const{
    return m_bundles_isSet;
}

bool OAI_200Provenance_provenance::is_bundles_Valid() const{
    return m_bundles_isValid;
}

QString OAI_200Provenance_provenance::getVersion() const {
    return m_version;
}
void OAI_200Provenance_provenance::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAI_200Provenance_provenance::is_version_Set() const{
    return m_version_isSet;
}

bool OAI_200Provenance_provenance::is_version_Valid() const{
    return m_version_isValid;
}

bool OAI_200Provenance_provenance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_200Provenance_provenance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
