/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataAPIApi_H
#define OAI_OAIDataAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI400.h"
#include "OAI404.h"
#include "OAIGetDocumentWithWebHook_200_response.h"
#include "OAIPatchesSchema_inner.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataAPIApi : public QObject {
    Q_OBJECT

public:
    OAIDataAPIApi(const int timeOut = 0);
    ~OAIDataAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  path QString [required]
    */
    virtual void deleteDocument(const QString &path);

    /**
    * @param[in]  path QString [required]
    * @param[in]  input QMap<QString, QJsonValue> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  provenance bool [optional]
    * @param[in]  explain QString [optional]
    * @param[in]  metrics bool [optional]
    * @param[in]  instrument bool [optional]
    */
    virtual void getDocument(const QString &path, const ::OpenAPI::OptionalParam<QMap<QString, QJsonValue>> &input = ::OpenAPI::OptionalParam<QMap<QString, QJsonValue>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &provenance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &explain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &metrics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &instrument = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    * @param[in]  pretty bool [optional]
    * @param[in]  provenance bool [optional]
    * @param[in]  explain QString [optional]
    * @param[in]  metrics bool [optional]
    * @param[in]  instrument bool [optional]
    */
    virtual void getDocumentWithPath(const QString &path, const QMap<QString, QJsonValue> &request_body, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &provenance = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &explain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &metrics = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &instrument = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    * @param[in]  pretty bool [optional]
    */
    virtual void getDocumentWithWebHook(const QString &path, const QMap<QString, QJsonValue> &request_body, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  oai_patches_schema_inner QList<OAIPatchesSchema_inner> [required]
    */
    virtual void patchDocument(const QString &path, const QList<OAIPatchesSchema_inner> &oai_patches_schema_inner);

    /**
    * @param[in]  path QString [required]
    * @param[in]  body QJsonValue [required]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void putDocument(const QString &path, const QJsonValue &body, const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteDocumentCallback(OAIHttpRequestWorker *worker);
    void getDocumentCallback(OAIHttpRequestWorker *worker);
    void getDocumentWithPathCallback(OAIHttpRequestWorker *worker);
    void getDocumentWithWebHookCallback(OAIHttpRequestWorker *worker);
    void patchDocumentCallback(OAIHttpRequestWorker *worker);
    void putDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteDocumentSignal();
    void getDocumentSignal(OAIGetDocumentWithWebHook_200_response summary);
    void getDocumentWithPathSignal(OAIGetDocumentWithWebHook_200_response summary);
    void getDocumentWithWebHookSignal(OAIGetDocumentWithWebHook_200_response summary);
    void patchDocumentSignal();
    void putDocumentSignal();


    void deleteDocumentSignalFull(OAIHttpRequestWorker *worker);
    void getDocumentSignalFull(OAIHttpRequestWorker *worker, OAIGetDocumentWithWebHook_200_response summary);
    void getDocumentWithPathSignalFull(OAIHttpRequestWorker *worker, OAIGetDocumentWithWebHook_200_response summary);
    void getDocumentWithWebHookSignalFull(OAIHttpRequestWorker *worker, OAIGetDocumentWithWebHook_200_response summary);
    void patchDocumentSignalFull(OAIHttpRequestWorker *worker);
    void putDocumentSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteDocumentSignalError() instead")
    void deleteDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalError() instead")
    void getDocumentSignalE(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalError(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentWithPathSignalError() instead")
    void getDocumentWithPathSignalE(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentWithPathSignalError(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentWithWebHookSignalError() instead")
    void getDocumentWithWebHookSignalE(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentWithWebHookSignalError(OAIGetDocumentWithWebHook_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDocumentSignalError() instead")
    void patchDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDocumentSignalError() instead")
    void putDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteDocumentSignalErrorFull() instead")
    void deleteDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentSignalErrorFull() instead")
    void getDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentWithPathSignalErrorFull() instead")
    void getDocumentWithPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentWithPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDocumentWithWebHookSignalErrorFull() instead")
    void getDocumentWithWebHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDocumentWithWebHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDocumentSignalErrorFull() instead")
    void patchDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDocumentSignalErrorFull() instead")
    void putDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
