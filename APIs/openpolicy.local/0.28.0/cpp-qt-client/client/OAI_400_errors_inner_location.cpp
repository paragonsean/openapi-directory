/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_400_errors_inner_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_400_errors_inner_location::OAI_400_errors_inner_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_400_errors_inner_location::OAI_400_errors_inner_location() {
    this->initializeModel();
}

OAI_400_errors_inner_location::~OAI_400_errors_inner_location() {}

void OAI_400_errors_inner_location::initializeModel() {

    m_col_isSet = false;
    m_col_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;
}

void OAI_400_errors_inner_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_400_errors_inner_location::fromJsonObject(QJsonObject json) {

    m_col_isValid = ::OpenAPI::fromJsonValue(m_col, json[QString("col")]);
    m_col_isSet = !json[QString("col")].isNull() && m_col_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("row")]);
    m_row_isSet = !json[QString("row")].isNull() && m_row_isValid;
}

QString OAI_400_errors_inner_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_400_errors_inner_location::asJsonObject() const {
    QJsonObject obj;
    if (m_col_isSet) {
        obj.insert(QString("col"), ::OpenAPI::toJsonValue(m_col));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_row_isSet) {
        obj.insert(QString("row"), ::OpenAPI::toJsonValue(m_row));
    }
    return obj;
}

double OAI_400_errors_inner_location::getCol() const {
    return m_col;
}
void OAI_400_errors_inner_location::setCol(const double &col) {
    m_col = col;
    m_col_isSet = true;
}

bool OAI_400_errors_inner_location::is_col_Set() const{
    return m_col_isSet;
}

bool OAI_400_errors_inner_location::is_col_Valid() const{
    return m_col_isValid;
}

QString OAI_400_errors_inner_location::getFile() const {
    return m_file;
}
void OAI_400_errors_inner_location::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAI_400_errors_inner_location::is_file_Set() const{
    return m_file_isSet;
}

bool OAI_400_errors_inner_location::is_file_Valid() const{
    return m_file_isValid;
}

double OAI_400_errors_inner_location::getRow() const {
    return m_row;
}
void OAI_400_errors_inner_location::setRow(const double &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAI_400_errors_inner_location::is_row_Set() const{
    return m_row_isSet;
}

bool OAI_400_errors_inner_location::is_row_Valid() const{
    return m_row_isValid;
}

bool OAI_400_errors_inner_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_col_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_400_errors_inner_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
