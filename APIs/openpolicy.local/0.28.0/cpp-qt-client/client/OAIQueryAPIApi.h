/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueryAPIApi_H
#define OAI_OAIQueryAPIApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI400.h"
#include "OAI404.h"
#include "OAIPostCompile_200_response.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueryAPIApi : public QObject {
    Q_OBJECT

public:
    OAIQueryAPIApi(const int timeOut = 0);
    ~OAIQueryAPIApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QString [required]
    * @param[in]  pretty bool [optional]
    * @param[in]  explain QString [optional]
    * @param[in]  metrics bool [optional]
    */
    virtual void getQuery(const QString &q, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &explain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &metrics = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    * @param[in]  pretty bool [optional]
    * @param[in]  explain QString [optional]
    * @param[in]  metrics bool [optional]
    */
    virtual void postQuery(const QMap<QString, QJsonValue> &request_body, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &explain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &metrics = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  request_body QMap<QString, QJsonValue> [required]
    * @param[in]  pretty bool [optional]
    */
    virtual void postSimpleQuery(const QMap<QString, QJsonValue> &request_body, const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getQueryCallback(OAIHttpRequestWorker *worker);
    void postQueryCallback(OAIHttpRequestWorker *worker);
    void postSimpleQueryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getQuerySignal(OAIPostCompile_200_response summary);
    void postQuerySignal(OAIPostCompile_200_response summary);
    void postSimpleQuerySignal();


    void getQuerySignalFull(OAIHttpRequestWorker *worker, OAIPostCompile_200_response summary);
    void postQuerySignalFull(OAIHttpRequestWorker *worker, OAIPostCompile_200_response summary);
    void postSimpleQuerySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getQuerySignalError() instead")
    void getQuerySignalE(OAIPostCompile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySignalError(OAIPostCompile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQuerySignalError() instead")
    void postQuerySignalE(OAIPostCompile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postQuerySignalError(OAIPostCompile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSimpleQuerySignalError() instead")
    void postSimpleQuerySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postSimpleQuerySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getQuerySignalErrorFull() instead")
    void getQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQuerySignalErrorFull() instead")
    void postQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSimpleQuerySignalErrorFull() instead")
    void postSimpleQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSimpleQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
