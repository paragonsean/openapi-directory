/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_200Result_result_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_200Result_result_inner::OAI_200Result_result_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_200Result_result_inner::OAI_200Result_result_inner() {
    this->initializeModel();
}

OAI_200Result_result_inner::~OAI_200Result_result_inner() {}

void OAI_200Result_result_inner::initializeModel() {

    m_ast_isSet = false;
    m_ast_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;
}

void OAI_200Result_result_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_200Result_result_inner::fromJsonObject(QJsonObject json) {

    m_ast_isValid = ::OpenAPI::fromJsonValue(m_ast, json[QString("ast")]);
    m_ast_isSet = !json[QString("ast")].isNull() && m_ast_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;
}

QString OAI_200Result_result_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_200Result_result_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ast.isSet()) {
        obj.insert(QString("ast"), ::OpenAPI::toJsonValue(m_ast));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    return obj;
}

OAI_200Result_result_inner_ast OAI_200Result_result_inner::getAst() const {
    return m_ast;
}
void OAI_200Result_result_inner::setAst(const OAI_200Result_result_inner_ast &ast) {
    m_ast = ast;
    m_ast_isSet = true;
}

bool OAI_200Result_result_inner::is_ast_Set() const{
    return m_ast_isSet;
}

bool OAI_200Result_result_inner::is_ast_Valid() const{
    return m_ast_isValid;
}

QString OAI_200Result_result_inner::getId() const {
    return m_id;
}
void OAI_200Result_result_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAI_200Result_result_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAI_200Result_result_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAI_200Result_result_inner::getRaw() const {
    return m_raw;
}
void OAI_200Result_result_inner::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAI_200Result_result_inner::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAI_200Result_result_inner::is_raw_Valid() const{
    return m_raw_isValid;
}

bool OAI_200Result_result_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_200Result_result_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
