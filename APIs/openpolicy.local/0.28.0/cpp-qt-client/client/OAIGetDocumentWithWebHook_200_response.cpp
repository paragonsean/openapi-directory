/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDocumentWithWebHook_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDocumentWithWebHook_200_response::OAIGetDocumentWithWebHook_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDocumentWithWebHook_200_response::OAIGetDocumentWithWebHook_200_response() {
    this->initializeModel();
}

OAIGetDocumentWithWebHook_200_response::~OAIGetDocumentWithWebHook_200_response() {}

void OAIGetDocumentWithWebHook_200_response::initializeModel() {

    m_result_isSet = false;
    m_result_isValid = false;

    m_provenance_isSet = false;
    m_provenance_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;
}

void OAIGetDocumentWithWebHook_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDocumentWithWebHook_200_response::fromJsonObject(QJsonObject json) {

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_provenance_isValid = ::OpenAPI::fromJsonValue(m_provenance, json[QString("provenance")]);
    m_provenance_isSet = !json[QString("provenance")].isNull() && m_provenance_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("explanation")]);
    m_explanation_isSet = !json[QString("explanation")].isNull() && m_explanation_isValid;
}

QString OAIGetDocumentWithWebHook_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDocumentWithWebHook_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_result.size() > 0) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_provenance.isSet()) {
        obj.insert(QString("provenance"), ::OpenAPI::toJsonValue(m_provenance));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_explanation.size() > 0) {
        obj.insert(QString("explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    return obj;
}

QList<OAI_200Result_result_inner> OAIGetDocumentWithWebHook_200_response::getResult() const {
    return m_result;
}
void OAIGetDocumentWithWebHook_200_response::setResult(const QList<OAI_200Result_result_inner> &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIGetDocumentWithWebHook_200_response::is_result_Set() const{
    return m_result_isSet;
}

bool OAIGetDocumentWithWebHook_200_response::is_result_Valid() const{
    return m_result_isValid;
}

OAI_200Provenance_provenance OAIGetDocumentWithWebHook_200_response::getProvenance() const {
    return m_provenance;
}
void OAIGetDocumentWithWebHook_200_response::setProvenance(const OAI_200Provenance_provenance &provenance) {
    m_provenance = provenance;
    m_provenance_isSet = true;
}

bool OAIGetDocumentWithWebHook_200_response::is_provenance_Set() const{
    return m_provenance_isSet;
}

bool OAIGetDocumentWithWebHook_200_response::is_provenance_Valid() const{
    return m_provenance_isValid;
}

OAI_200Metrics_metrics OAIGetDocumentWithWebHook_200_response::getMetrics() const {
    return m_metrics;
}
void OAIGetDocumentWithWebHook_200_response::setMetrics(const OAI_200Metrics_metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIGetDocumentWithWebHook_200_response::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIGetDocumentWithWebHook_200_response::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAI_200Explanations_explanation_inner> OAIGetDocumentWithWebHook_200_response::getExplanation() const {
    return m_explanation;
}
void OAIGetDocumentWithWebHook_200_response::setExplanation(const QList<OAI_200Explanations_explanation_inner> &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAIGetDocumentWithWebHook_200_response::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAIGetDocumentWithWebHook_200_response::is_explanation_Valid() const{
    return m_explanation_isValid;
}

bool OAIGetDocumentWithWebHook_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDocumentWithWebHook_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
