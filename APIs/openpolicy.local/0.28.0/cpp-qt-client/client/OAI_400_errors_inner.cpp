/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_400_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_400_errors_inner::OAI_400_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_400_errors_inner::OAI_400_errors_inner() {
    this->initializeModel();
}

OAI_400_errors_inner::~OAI_400_errors_inner() {}

void OAI_400_errors_inner::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAI_400_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_400_errors_inner::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAI_400_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_400_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAI_400_errors_inner::getCode() const {
    return m_code;
}
void OAI_400_errors_inner::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAI_400_errors_inner::is_code_Set() const{
    return m_code_isSet;
}

bool OAI_400_errors_inner::is_code_Valid() const{
    return m_code_isValid;
}

OAI_400_errors_inner_location OAI_400_errors_inner::getLocation() const {
    return m_location;
}
void OAI_400_errors_inner::setLocation(const OAI_400_errors_inner_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAI_400_errors_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAI_400_errors_inner::is_location_Valid() const{
    return m_location_isValid;
}

QString OAI_400_errors_inner::getMessage() const {
    return m_message;
}
void OAI_400_errors_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAI_400_errors_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAI_400_errors_inner::is_message_Valid() const{
    return m_message_isValid;
}

bool OAI_400_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_400_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
