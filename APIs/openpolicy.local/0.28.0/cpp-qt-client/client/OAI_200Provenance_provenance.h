/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAI_200Provenance_provenance.h
 *
 * 
 */

#ifndef OAI_200Provenance_provenance_H
#define OAI_200Provenance_provenance_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAI_200Provenance_provenance : public OAIObject {
public:
    OAI_200Provenance_provenance();
    OAI_200Provenance_provenance(QString json);
    ~OAI_200Provenance_provenance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBuildCommit() const;
    void setBuildCommit(const QString &build_commit);
    bool is_build_commit_Set() const;
    bool is_build_commit_Valid() const;

    QString getBuildHostname() const;
    void setBuildHostname(const QString &build_hostname);
    bool is_build_hostname_Set() const;
    bool is_build_hostname_Valid() const;

    QString getBuildTimestamp() const;
    void setBuildTimestamp(const QString &build_timestamp);
    bool is_build_timestamp_Set() const;
    bool is_build_timestamp_Valid() const;

    QMap<QString, QJsonValue> getBundles() const;
    void setBundles(const QMap<QString, QJsonValue> &bundles);
    bool is_bundles_Set() const;
    bool is_bundles_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_build_commit;
    bool m_build_commit_isSet;
    bool m_build_commit_isValid;

    QString m_build_hostname;
    bool m_build_hostname_isSet;
    bool m_build_hostname_isValid;

    QString m_build_timestamp;
    bool m_build_timestamp_isSet;
    bool m_build_timestamp_isValid;

    QMap<QString, QJsonValue> m_bundles;
    bool m_bundles_isSet;
    bool m_bundles_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAI_200Provenance_provenance)

#endif // OAI_200Provenance_provenance_H
