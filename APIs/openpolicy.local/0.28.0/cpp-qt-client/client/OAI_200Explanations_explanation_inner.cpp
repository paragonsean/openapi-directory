/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_200Explanations_explanation_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_200Explanations_explanation_inner::OAI_200Explanations_explanation_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_200Explanations_explanation_inner::OAI_200Explanations_explanation_inner() {
    this->initializeModel();
}

OAI_200Explanations_explanation_inner::~OAI_200Explanations_explanation_inner() {}

void OAI_200Explanations_explanation_inner::initializeModel() {

    m_locals_isSet = false;
    m_locals_isValid = false;

    m_node_isSet = false;
    m_node_isValid = false;

    m_op_isSet = false;
    m_op_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_query_id_isSet = false;
    m_query_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAI_200Explanations_explanation_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_200Explanations_explanation_inner::fromJsonObject(QJsonObject json) {

    m_locals_isValid = ::OpenAPI::fromJsonValue(m_locals, json[QString("locals")]);
    m_locals_isSet = !json[QString("locals")].isNull() && m_locals_isValid;

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_op_isValid = ::OpenAPI::fromJsonValue(m_op, json[QString("op")]);
    m_op_isSet = !json[QString("op")].isNull() && m_op_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_query_id_isValid = ::OpenAPI::fromJsonValue(m_query_id, json[QString("query_id")]);
    m_query_id_isSet = !json[QString("query_id")].isNull() && m_query_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAI_200Explanations_explanation_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_200Explanations_explanation_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_locals.size() > 0) {
        obj.insert(QString("locals"), ::OpenAPI::toJsonValue(m_locals));
    }
    if (m_node.isSet()) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_op_isSet) {
        obj.insert(QString("op"), ::OpenAPI::toJsonValue(m_op));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_query_id_isSet) {
        obj.insert(QString("query_id"), ::OpenAPI::toJsonValue(m_query_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAI_200Explanations_explanation_inner_locals_inner> OAI_200Explanations_explanation_inner::getLocals() const {
    return m_locals;
}
void OAI_200Explanations_explanation_inner::setLocals(const QList<OAI_200Explanations_explanation_inner_locals_inner> &locals) {
    m_locals = locals;
    m_locals_isSet = true;
}

bool OAI_200Explanations_explanation_inner::is_locals_Set() const{
    return m_locals_isSet;
}

bool OAI_200Explanations_explanation_inner::is_locals_Valid() const{
    return m_locals_isValid;
}

OAI_200Explanations_explanation_inner_node OAI_200Explanations_explanation_inner::getNode() const {
    return m_node;
}
void OAI_200Explanations_explanation_inner::setNode(const OAI_200Explanations_explanation_inner_node &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAI_200Explanations_explanation_inner::is_node_Set() const{
    return m_node_isSet;
}

bool OAI_200Explanations_explanation_inner::is_node_Valid() const{
    return m_node_isValid;
}

QString OAI_200Explanations_explanation_inner::getOp() const {
    return m_op;
}
void OAI_200Explanations_explanation_inner::setOp(const QString &op) {
    m_op = op;
    m_op_isSet = true;
}

bool OAI_200Explanations_explanation_inner::is_op_Set() const{
    return m_op_isSet;
}

bool OAI_200Explanations_explanation_inner::is_op_Valid() const{
    return m_op_isValid;
}

double OAI_200Explanations_explanation_inner::getParentId() const {
    return m_parent_id;
}
void OAI_200Explanations_explanation_inner::setParentId(const double &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAI_200Explanations_explanation_inner::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAI_200Explanations_explanation_inner::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

double OAI_200Explanations_explanation_inner::getQueryId() const {
    return m_query_id;
}
void OAI_200Explanations_explanation_inner::setQueryId(const double &query_id) {
    m_query_id = query_id;
    m_query_id_isSet = true;
}

bool OAI_200Explanations_explanation_inner::is_query_id_Set() const{
    return m_query_id_isSet;
}

bool OAI_200Explanations_explanation_inner::is_query_id_Valid() const{
    return m_query_id_isValid;
}

QString OAI_200Explanations_explanation_inner::getType() const {
    return m_type;
}
void OAI_200Explanations_explanation_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAI_200Explanations_explanation_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAI_200Explanations_explanation_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAI_200Explanations_explanation_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_op_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_200Explanations_explanation_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
