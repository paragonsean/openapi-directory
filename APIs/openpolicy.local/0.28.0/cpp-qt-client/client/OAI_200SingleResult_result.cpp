/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_200SingleResult_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_200SingleResult_result::OAI_200SingleResult_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_200SingleResult_result::OAI_200SingleResult_result() {
    this->initializeModel();
}

OAI_200SingleResult_result::~OAI_200SingleResult_result() {}

void OAI_200SingleResult_result::initializeModel() {

    m_bundles_isSet = false;
    m_bundles_isValid = false;

    m_decision_logs_isSet = false;
    m_decision_logs_isValid = false;

    m_default_authorization_decision_isSet = false;
    m_default_authorization_decision_isValid = false;

    m_default_decision_isSet = false;
    m_default_decision_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAI_200SingleResult_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_200SingleResult_result::fromJsonObject(QJsonObject json) {

    m_bundles_isValid = ::OpenAPI::fromJsonValue(m_bundles, json[QString("bundles")]);
    m_bundles_isSet = !json[QString("bundles")].isNull() && m_bundles_isValid;

    m_decision_logs_isValid = ::OpenAPI::fromJsonValue(m_decision_logs, json[QString("decision_logs")]);
    m_decision_logs_isSet = !json[QString("decision_logs")].isNull() && m_decision_logs_isValid;

    m_default_authorization_decision_isValid = ::OpenAPI::fromJsonValue(m_default_authorization_decision, json[QString("default_authorization_decision")]);
    m_default_authorization_decision_isSet = !json[QString("default_authorization_decision")].isNull() && m_default_authorization_decision_isValid;

    m_default_decision_isValid = ::OpenAPI::fromJsonValue(m_default_decision, json[QString("default_decision")]);
    m_default_decision_isSet = !json[QString("default_decision")].isNull() && m_default_decision_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAI_200SingleResult_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_200SingleResult_result::asJsonObject() const {
    QJsonObject obj;
    if (m_bundles.isSet()) {
        obj.insert(QString("bundles"), ::OpenAPI::toJsonValue(m_bundles));
    }
    if (m_decision_logs.isSet()) {
        obj.insert(QString("decision_logs"), ::OpenAPI::toJsonValue(m_decision_logs));
    }
    if (m_default_authorization_decision_isSet) {
        obj.insert(QString("default_authorization_decision"), ::OpenAPI::toJsonValue(m_default_authorization_decision));
    }
    if (m_default_decision_isSet) {
        obj.insert(QString("default_decision"), ::OpenAPI::toJsonValue(m_default_decision));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_labels.isSet()) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_services.isSet()) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAI_200SingleResult_result_bundles OAI_200SingleResult_result::getBundles() const {
    return m_bundles;
}
void OAI_200SingleResult_result::setBundles(const OAI_200SingleResult_result_bundles &bundles) {
    m_bundles = bundles;
    m_bundles_isSet = true;
}

bool OAI_200SingleResult_result::is_bundles_Set() const{
    return m_bundles_isSet;
}

bool OAI_200SingleResult_result::is_bundles_Valid() const{
    return m_bundles_isValid;
}

OAI_200SingleResult_result_decision_logs OAI_200SingleResult_result::getDecisionLogs() const {
    return m_decision_logs;
}
void OAI_200SingleResult_result::setDecisionLogs(const OAI_200SingleResult_result_decision_logs &decision_logs) {
    m_decision_logs = decision_logs;
    m_decision_logs_isSet = true;
}

bool OAI_200SingleResult_result::is_decision_logs_Set() const{
    return m_decision_logs_isSet;
}

bool OAI_200SingleResult_result::is_decision_logs_Valid() const{
    return m_decision_logs_isValid;
}

QString OAI_200SingleResult_result::getDefaultAuthorizationDecision() const {
    return m_default_authorization_decision;
}
void OAI_200SingleResult_result::setDefaultAuthorizationDecision(const QString &default_authorization_decision) {
    m_default_authorization_decision = default_authorization_decision;
    m_default_authorization_decision_isSet = true;
}

bool OAI_200SingleResult_result::is_default_authorization_decision_Set() const{
    return m_default_authorization_decision_isSet;
}

bool OAI_200SingleResult_result::is_default_authorization_decision_Valid() const{
    return m_default_authorization_decision_isValid;
}

QString OAI_200SingleResult_result::getDefaultDecision() const {
    return m_default_decision;
}
void OAI_200SingleResult_result::setDefaultDecision(const QString &default_decision) {
    m_default_decision = default_decision;
    m_default_decision_isSet = true;
}

bool OAI_200SingleResult_result::is_default_decision_Set() const{
    return m_default_decision_isSet;
}

bool OAI_200SingleResult_result::is_default_decision_Valid() const{
    return m_default_decision_isValid;
}

OAI_200SingleResult_result_keys OAI_200SingleResult_result::getKeys() const {
    return m_keys;
}
void OAI_200SingleResult_result::setKeys(const OAI_200SingleResult_result_keys &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAI_200SingleResult_result::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAI_200SingleResult_result::is_keys_Valid() const{
    return m_keys_isValid;
}

OAI_200SingleResult_result_labels OAI_200SingleResult_result::getLabels() const {
    return m_labels;
}
void OAI_200SingleResult_result::setLabels(const OAI_200SingleResult_result_labels &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAI_200SingleResult_result::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAI_200SingleResult_result::is_labels_Valid() const{
    return m_labels_isValid;
}

OAI_200SingleResult_result_services OAI_200SingleResult_result::getServices() const {
    return m_services;
}
void OAI_200SingleResult_result::setServices(const OAI_200SingleResult_result_services &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAI_200SingleResult_result::is_services_Set() const{
    return m_services_isSet;
}

bool OAI_200SingleResult_result::is_services_Valid() const{
    return m_services_isValid;
}

OAI_200SingleResult_result_status OAI_200SingleResult_result::getStatus() const {
    return m_status;
}
void OAI_200SingleResult_result::setStatus(const OAI_200SingleResult_result_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI_200SingleResult_result::is_status_Set() const{
    return m_status_isSet;
}

bool OAI_200SingleResult_result::is_status_Valid() const{
    return m_status_isValid;
}

bool OAI_200SingleResult_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_authorization_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_200SingleResult_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
