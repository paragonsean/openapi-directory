/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Model400;
import org.openapitools.client.model.Model404;
import org.openapitools.client.model.PostCompile200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueryApiApi
 */
@Disabled
public class QueryApiApiTest {

    private final QueryApiApi api = new QueryApiApi();

    /**
     * Execute an ad-hoc query (simple)
     *
     * This API endpoint returns bindings for the variables in the query.  For more complex JSON queries, use &#x60;POST /v1/query&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryTest() throws ApiException {
        String q = null;
        Boolean pretty = null;
        String explain = null;
        Boolean metrics = null;
        PostCompile200Response response = api.getQuery(q, pretty, explain, metrics);
        // TODO: test validations
    }

    /**
     * Execute an ad-hoc query (complex)
     *
     * This API endpoint returns bindings for the variables in the query.  For simpler JSON queries, you may use &#x60;GET /v1/query&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postQueryTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Boolean pretty = null;
        String explain = null;
        Boolean metrics = null;
        PostCompile200Response response = api.postQuery(requestBody, pretty, explain, metrics);
        // TODO: test validations
    }

    /**
     * Execute a simple query
     *
     * This API queries the document at *_/data/system/main* by default (however, you can [configure OPA](https://www.openpolicyagent.org/docs/latest/configuration/) to use a different path to serve these queries). That document defines the response. For example, use the following in &#x60;PUT /v1/policies/{path}&#x60;) to define a rule that will produce a value for the *_/data/system/main* document:    &#x60;&#x60;&#x60;yaml   package system   main &#x3D; msg {     msg :&#x3D; sprintf(\&quot;hello, %v\&quot;, input.user)   }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if *_/data/system/main* is undefined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSimpleQueryTest() throws ApiException {
        Map<String, Object> requestBody = null;
        Boolean pretty = null;
        api.postSimpleQuery(requestBody, pretty);
        // TODO: test validations
    }

}
