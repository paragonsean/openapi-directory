/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetDocumentWithWebHook200Response;
import org.openapitools.client.model.Model400;
import org.openapitools.client.model.Model404;
import org.openapitools.client.model.PatchesSchemaInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataApiApi
 */
@Disabled
public class DataApiApiTest {

    private final DataApiApi api = new DataApiApi();

    /**
     * Delete a document
     *
     * This API endpoint deletes an existing document from the server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        String path = null;
        api.deleteDocument(path);
        // TODO: test validations
    }

    /**
     * Get a document
     *
     * This API endpoint returns the document specified by &#x60;path&#x60;.  The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provide the input document but the query has already defined it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        String path = null;
        Map<String, Object> input = null;
        Boolean pretty = null;
        Boolean provenance = null;
        String explain = null;
        Boolean metrics = null;
        Boolean instrument = null;
        GetDocumentWithWebHook200Response response = api.getDocument(path, input, pretty, provenance, explain, metrics, instrument);
        // TODO: test validations
    }

    /**
     * Get a document (with input)
     *
     * The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provided an input document but the query has already defined it.  If &#x60;path&#x60; indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentWithPathTest() throws ApiException {
        String path = null;
        Map<String, Object> requestBody = null;
        Boolean pretty = null;
        Boolean provenance = null;
        String explain = null;
        Boolean metrics = null;
        Boolean instrument = null;
        GetDocumentWithWebHook200Response response = api.getDocumentWithPath(path, requestBody, pretty, provenance, explain, metrics, instrument);
        // TODO: test validations
    }

    /**
     * Get a document (with webhook)
     *
     * The example given here assumes you have created a policy (with &#x60;PUT /v1/policies/{path}&#x60;), such as:    &#x60;&#x60;&#x60;yaml   package opa.examples   import input.example.flag   allow_request { flag &#x3D;&#x3D; true }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if the requested document is missing or undefined. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentWithWebHookTest() throws ApiException {
        String path = null;
        Map<String, Object> requestBody = null;
        Boolean pretty = null;
        GetDocumentWithWebHook200Response response = api.getDocumentWithWebHook(path, requestBody, pretty);
        // TODO: test validations
    }

    /**
     * Update a document
     *
     * This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDocumentTest() throws ApiException {
        String path = null;
        List<PatchesSchemaInner> patchesSchemaInner = null;
        api.patchDocument(path, patchesSchemaInner);
        // TODO: test validations
    }

    /**
     * Create or overwrite a document
     *
     * If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.  This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDocumentTest() throws ApiException {
        String path = null;
        Object body = null;
        String ifNoneMatch = null;
        api.putDocument(path, body, ifNoneMatch);
        // TODO: test validations
    }

}
