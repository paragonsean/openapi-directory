/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Model400;
import org.openapitools.client.model.PostCompile200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompileApiApi
 */
@Disabled
public class CompileApiApiTest {

    private final CompileApiApi api = new CompileApiApi();

    /**
     * Compile
     *
     * This API endpoint allows you to partially evaluate Rego queries and obtain a simplified version of the policy. The example below assumes that OPA has been given the following policy (use &#x60;PUT /v1/policies/{path}&#x60;):  &#x60;&#x60;&#x60;yaml package example allow {   input.subject.clearance_level &gt;&#x3D; data.reports[_].clearance_level } &#x60;&#x60;&#x60; Compile API **request body** so that it contain the following fields:  | Field | Type | Required | Description | | --- | --- | --- | --- | | &#x60;query&#x60; | &#x60;string&#x60; | Yes | The query to partially evaluate and compile. | | &#x60;input&#x60; | &#x60;any&#x60; | No | The input document to use during partial evaluation (default: undefined). | | &#x60;unknowns&#x60; | &#x60;array[string]&#x60; | No | The terms to treat as unknown during partial evaluation (default: &#x60;[\&quot;input\&quot;]&#x60;]). |  For example:  &#x60;&#x60;&#x60;json {   \&quot;query\&quot;: \&quot;data.example.allow &#x3D;&#x3D; true\&quot;,   \&quot;input\&quot;: {     \&quot;subject\&quot;: {       \&quot;clearance_level\&quot;: 4     }   },   \&quot;unknowns\&quot;: [     \&quot;data.reports\&quot;     ] } &#x60;&#x60;&#x60; ### Partial evaluation In some cases, the result of partial valuation is a conclusive, unconditional answer. See [the guidance](https://www.openpolicyagent.org/docs/latest/rest-api/#unconditional-results-from-partial-evaluation) for details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCompileTest() throws ApiException {
        Boolean pretty = null;
        String explain = null;
        Boolean metrics = null;
        Boolean instrument = null;
        Map<String, Object> requestBody = null;
        PostCompile200Response response = api.postCompile(pretty, explain, metrics, instrument, requestBody);
        // TODO: test validations
    }

}
