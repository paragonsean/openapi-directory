/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetDocumentWithWebHook200Response;
import org.openapitools.client.model.Model400;
import org.openapitools.client.model.Model404;
import org.openapitools.client.model.PatchesSchemaInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteDocument
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentCall(String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDocumentValidateBeforeCall(String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling deleteDocument(Async)");
        }

        return deleteDocumentCall(path, _callback);

    }

    /**
     * Delete a document
     * This API endpoint deletes an existing document from the server
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDocument(String path) throws ApiException {
        deleteDocumentWithHttpInfo(path);
    }

    /**
     * Delete a document
     * This API endpoint deletes an existing document from the server
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(String path) throws ApiException {
        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(path, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a document (asynchronously)
     * This API endpoint deletes an existing document from the server
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDocumentAsync(String path, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(path, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocument
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param input Provide the text for an [input document](https://www.openpolicyagent.org/docs/latest/kubernetes-primer/#input-document) in JSON format (optional)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentCall(String path, Map<String, Object> input, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/data/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (input != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(input));
        }

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (provenance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provenance", provenance));
        }

        if (explain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("explain", explain));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentValidateBeforeCall(String path, Map<String, Object> input, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getDocument(Async)");
        }

        return getDocumentCall(path, input, pretty, provenance, explain, metrics, instrument, _callback);

    }

    /**
     * Get a document
     * This API endpoint returns the document specified by &#x60;path&#x60;.  The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provide the input document but the query has already defined it.
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param input Provide the text for an [input document](https://www.openpolicyagent.org/docs/latest/kubernetes-primer/#input-document) in JSON format (optional)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @return GetDocumentWithWebHook200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentWithWebHook200Response getDocument(String path, Map<String, Object> input, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument) throws ApiException {
        ApiResponse<GetDocumentWithWebHook200Response> localVarResp = getDocumentWithHttpInfo(path, input, pretty, provenance, explain, metrics, instrument);
        return localVarResp.getData();
    }

    /**
     * Get a document
     * This API endpoint returns the document specified by &#x60;path&#x60;.  The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provide the input document but the query has already defined it.
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param input Provide the text for an [input document](https://www.openpolicyagent.org/docs/latest/kubernetes-primer/#input-document) in JSON format (optional)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @return ApiResponse&lt;GetDocumentWithWebHook200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDocumentWithWebHook200Response> getDocumentWithHttpInfo(String path, Map<String, Object> input, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument) throws ApiException {
        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(path, input, pretty, provenance, explain, metrics, instrument, null);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a document (asynchronously)
     * This API endpoint returns the document specified by &#x60;path&#x60;.  The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provide the input document but the query has already defined it.
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param input Provide the text for an [input document](https://www.openpolicyagent.org/docs/latest/kubernetes-primer/#input-document) in JSON format (optional)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentAsync(String path, Map<String, Object> input, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument, final ApiCallback<GetDocumentWithWebHook200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentValidateBeforeCall(path, input, pretty, provenance, explain, metrics, instrument, _callback);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentWithPath
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentWithPathCall(String path, Map<String, Object> requestBody, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/data/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (provenance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("provenance", provenance));
        }

        if (explain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("explain", explain));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        if (instrument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument", instrument));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentWithPathValidateBeforeCall(String path, Map<String, Object> requestBody, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getDocumentWithPath(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling getDocumentWithPath(Async)");
        }

        return getDocumentWithPathCall(path, requestBody, pretty, provenance, explain, metrics, instrument, _callback);

    }

    /**
     * Get a document (with input)
     * The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provided an input document but the query has already defined it.  If &#x60;path&#x60; indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @return GetDocumentWithWebHook200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentWithWebHook200Response getDocumentWithPath(String path, Map<String, Object> requestBody, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument) throws ApiException {
        ApiResponse<GetDocumentWithWebHook200Response> localVarResp = getDocumentWithPathWithHttpInfo(path, requestBody, pretty, provenance, explain, metrics, instrument);
        return localVarResp.getData();
    }

    /**
     * Get a document (with input)
     * The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provided an input document but the query has already defined it.  If &#x60;path&#x60; indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @return ApiResponse&lt;GetDocumentWithWebHook200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDocumentWithWebHook200Response> getDocumentWithPathWithHttpInfo(String path, Map<String, Object> requestBody, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument) throws ApiException {
        okhttp3.Call localVarCall = getDocumentWithPathValidateBeforeCall(path, requestBody, pretty, provenance, explain, metrics, instrument, null);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a document (with input) (asynchronously)
     * The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provided an input document but the query has already defined it.  If &#x60;path&#x60; indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param provenance If true, response will include build and version information in addition to the result. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param instrument If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentWithPathAsync(String path, Map<String, Object> requestBody, Boolean pretty, Boolean provenance, String explain, Boolean metrics, Boolean instrument, final ApiCallback<GetDocumentWithWebHook200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentWithPathValidateBeforeCall(path, requestBody, pretty, provenance, explain, metrics, instrument, _callback);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDocumentWithWebHook
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentWithWebHookCall(String path, Map<String, Object> requestBody, Boolean pretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v0/data/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentWithWebHookValidateBeforeCall(String path, Map<String, Object> requestBody, Boolean pretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getDocumentWithWebHook(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling getDocumentWithWebHook(Async)");
        }

        return getDocumentWithWebHookCall(path, requestBody, pretty, _callback);

    }

    /**
     * Get a document (with webhook)
     * The example given here assumes you have created a policy (with &#x60;PUT /v1/policies/{path}&#x60;), such as:    &#x60;&#x60;&#x60;yaml   package opa.examples   import input.example.flag   allow_request { flag &#x3D;&#x3D; true }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if the requested document is missing or undefined. 
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return GetDocumentWithWebHook200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentWithWebHook200Response getDocumentWithWebHook(String path, Map<String, Object> requestBody, Boolean pretty) throws ApiException {
        ApiResponse<GetDocumentWithWebHook200Response> localVarResp = getDocumentWithWebHookWithHttpInfo(path, requestBody, pretty);
        return localVarResp.getData();
    }

    /**
     * Get a document (with webhook)
     * The example given here assumes you have created a policy (with &#x60;PUT /v1/policies/{path}&#x60;), such as:    &#x60;&#x60;&#x60;yaml   package opa.examples   import input.example.flag   allow_request { flag &#x3D;&#x3D; true }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if the requested document is missing or undefined. 
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return ApiResponse&lt;GetDocumentWithWebHook200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDocumentWithWebHook200Response> getDocumentWithWebHookWithHttpInfo(String path, Map<String, Object> requestBody, Boolean pretty) throws ApiException {
        okhttp3.Call localVarCall = getDocumentWithWebHookValidateBeforeCall(path, requestBody, pretty, null);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a document (with webhook) (asynchronously)
     * The example given here assumes you have created a policy (with &#x60;PUT /v1/policies/{path}&#x60;), such as:    &#x60;&#x60;&#x60;yaml   package opa.examples   import input.example.flag   allow_request { flag &#x3D;&#x3D; true }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if the requested document is missing or undefined. 
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param requestBody The input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDocumentWithWebHookAsync(String path, Map<String, Object> requestBody, Boolean pretty, final ApiCallback<GetDocumentWithWebHook200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentWithWebHookValidateBeforeCall(path, requestBody, pretty, _callback);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchDocument
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param patchesSchemaInner The list of JSON patch operations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDocumentCall(String path, List<PatchesSchemaInner> patchesSchemaInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchesSchemaInner;

        // create path and map variables
        String localVarPath = "/v1/data/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchDocumentValidateBeforeCall(String path, List<PatchesSchemaInner> patchesSchemaInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling patchDocument(Async)");
        }

        // verify the required parameter 'patchesSchemaInner' is set
        if (patchesSchemaInner == null) {
            throw new ApiException("Missing the required parameter 'patchesSchemaInner' when calling patchDocument(Async)");
        }

        return patchDocumentCall(path, patchesSchemaInner, _callback);

    }

    /**
     * Update a document
     * This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param patchesSchemaInner The list of JSON patch operations. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public void patchDocument(String path, List<PatchesSchemaInner> patchesSchemaInner) throws ApiException {
        patchDocumentWithHttpInfo(path, patchesSchemaInner);
    }

    /**
     * Update a document
     * This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param patchesSchemaInner The list of JSON patch operations. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchDocumentWithHttpInfo(String path, List<PatchesSchemaInner> patchesSchemaInner) throws ApiException {
        okhttp3.Call localVarCall = patchDocumentValidateBeforeCall(path, patchesSchemaInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a document (asynchronously)
     * This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param patchesSchemaInner The list of JSON patch operations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchDocumentAsync(String path, List<PatchesSchemaInner> patchesSchemaInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchDocumentValidateBeforeCall(path, patchesSchemaInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putDocument
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param body The JSON document to write to the specified path. (required)
     * @param ifNoneMatch The server will respect the If-None-Match header if it is set to * (in other words, it will not overwrite an existing document located at the specified &#x60;path&#x60;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Document was not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDocumentCall(String path, Object body, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/data/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putDocumentValidateBeforeCall(String path, Object body, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling putDocument(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putDocument(Async)");
        }

        return putDocumentCall(path, body, ifNoneMatch, _callback);

    }

    /**
     * Create or overwrite a document
     * If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.  This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param body The JSON document to write to the specified path. (required)
     * @param ifNoneMatch The server will respect the If-None-Match header if it is set to * (in other words, it will not overwrite an existing document located at the specified &#x60;path&#x60;). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Document was not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public void putDocument(String path, Object body, String ifNoneMatch) throws ApiException {
        putDocumentWithHttpInfo(path, body, ifNoneMatch);
    }

    /**
     * Create or overwrite a document
     * If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.  This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param body The JSON document to write to the specified path. (required)
     * @param ifNoneMatch The server will respect the If-None-Match header if it is set to * (in other words, it will not overwrite an existing document located at the specified &#x60;path&#x60;). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Document was not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putDocumentWithHttpInfo(String path, Object body, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = putDocumentValidateBeforeCall(path, body, ifNoneMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create or overwrite a document (asynchronously)
     * If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.  This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).
     * @param path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404. (required)
     * @param body The JSON document to write to the specified path. (required)
     * @param ifNoneMatch The server will respect the If-None-Match header if it is set to * (in other words, it will not overwrite an existing document located at the specified &#x60;path&#x60;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> Document was not modified </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putDocumentAsync(String path, Object body, String ifNoneMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putDocumentValidateBeforeCall(path, body, ifNoneMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
