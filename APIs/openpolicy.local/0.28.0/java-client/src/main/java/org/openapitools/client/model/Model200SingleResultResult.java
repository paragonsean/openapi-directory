/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Model200SingleResultResultBundles;
import org.openapitools.client.model.Model200SingleResultResultDecisionLogs;
import org.openapitools.client.model.Model200SingleResultResultKeys;
import org.openapitools.client.model.Model200SingleResultResultLabels;
import org.openapitools.client.model.Model200SingleResultResultServices;
import org.openapitools.client.model.Model200SingleResultResultStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model200SingleResultResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:44.834605-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Model200SingleResultResult {
  public static final String SERIALIZED_NAME_BUNDLES = "bundles";
  @SerializedName(SERIALIZED_NAME_BUNDLES)
  private Model200SingleResultResultBundles bundles;

  public static final String SERIALIZED_NAME_DECISION_LOGS = "decision_logs";
  @SerializedName(SERIALIZED_NAME_DECISION_LOGS)
  private Model200SingleResultResultDecisionLogs decisionLogs;

  public static final String SERIALIZED_NAME_DEFAULT_AUTHORIZATION_DECISION = "default_authorization_decision";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AUTHORIZATION_DECISION)
  private String defaultAuthorizationDecision;

  public static final String SERIALIZED_NAME_DEFAULT_DECISION = "default_decision";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DECISION)
  private String defaultDecision;

  public static final String SERIALIZED_NAME_KEYS = "keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private Model200SingleResultResultKeys keys;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Model200SingleResultResultLabels labels;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private Model200SingleResultResultServices services;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Model200SingleResultResultStatus status;

  public Model200SingleResultResult() {
  }

  public Model200SingleResultResult bundles(Model200SingleResultResultBundles bundles) {
    this.bundles = bundles;
    return this;
  }

  /**
   * Get bundles
   * @return bundles
   */
  @javax.annotation.Nullable
  public Model200SingleResultResultBundles getBundles() {
    return bundles;
  }

  public void setBundles(Model200SingleResultResultBundles bundles) {
    this.bundles = bundles;
  }


  public Model200SingleResultResult decisionLogs(Model200SingleResultResultDecisionLogs decisionLogs) {
    this.decisionLogs = decisionLogs;
    return this;
  }

  /**
   * Get decisionLogs
   * @return decisionLogs
   */
  @javax.annotation.Nullable
  public Model200SingleResultResultDecisionLogs getDecisionLogs() {
    return decisionLogs;
  }

  public void setDecisionLogs(Model200SingleResultResultDecisionLogs decisionLogs) {
    this.decisionLogs = decisionLogs;
  }


  public Model200SingleResultResult defaultAuthorizationDecision(String defaultAuthorizationDecision) {
    this.defaultAuthorizationDecision = defaultAuthorizationDecision;
    return this;
  }

  /**
   * Get defaultAuthorizationDecision
   * @return defaultAuthorizationDecision
   */
  @javax.annotation.Nullable
  public String getDefaultAuthorizationDecision() {
    return defaultAuthorizationDecision;
  }

  public void setDefaultAuthorizationDecision(String defaultAuthorizationDecision) {
    this.defaultAuthorizationDecision = defaultAuthorizationDecision;
  }


  public Model200SingleResultResult defaultDecision(String defaultDecision) {
    this.defaultDecision = defaultDecision;
    return this;
  }

  /**
   * Get defaultDecision
   * @return defaultDecision
   */
  @javax.annotation.Nullable
  public String getDefaultDecision() {
    return defaultDecision;
  }

  public void setDefaultDecision(String defaultDecision) {
    this.defaultDecision = defaultDecision;
  }


  public Model200SingleResultResult keys(Model200SingleResultResultKeys keys) {
    this.keys = keys;
    return this;
  }

  /**
   * Get keys
   * @return keys
   */
  @javax.annotation.Nullable
  public Model200SingleResultResultKeys getKeys() {
    return keys;
  }

  public void setKeys(Model200SingleResultResultKeys keys) {
    this.keys = keys;
  }


  public Model200SingleResultResult labels(Model200SingleResultResultLabels labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public Model200SingleResultResultLabels getLabels() {
    return labels;
  }

  public void setLabels(Model200SingleResultResultLabels labels) {
    this.labels = labels;
  }


  public Model200SingleResultResult services(Model200SingleResultResultServices services) {
    this.services = services;
    return this;
  }

  /**
   * Get services
   * @return services
   */
  @javax.annotation.Nullable
  public Model200SingleResultResultServices getServices() {
    return services;
  }

  public void setServices(Model200SingleResultResultServices services) {
    this.services = services;
  }


  public Model200SingleResultResult status(Model200SingleResultResultStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Model200SingleResultResultStatus getStatus() {
    return status;
  }

  public void setStatus(Model200SingleResultResultStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model200SingleResultResult _200singleResultResult = (Model200SingleResultResult) o;
    return Objects.equals(this.bundles, _200singleResultResult.bundles) &&
        Objects.equals(this.decisionLogs, _200singleResultResult.decisionLogs) &&
        Objects.equals(this.defaultAuthorizationDecision, _200singleResultResult.defaultAuthorizationDecision) &&
        Objects.equals(this.defaultDecision, _200singleResultResult.defaultDecision) &&
        Objects.equals(this.keys, _200singleResultResult.keys) &&
        Objects.equals(this.labels, _200singleResultResult.labels) &&
        Objects.equals(this.services, _200singleResultResult.services) &&
        Objects.equals(this.status, _200singleResultResult.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundles, decisionLogs, defaultAuthorizationDecision, defaultDecision, keys, labels, services, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model200SingleResultResult {\n");
    sb.append("    bundles: ").append(toIndentedString(bundles)).append("\n");
    sb.append("    decisionLogs: ").append(toIndentedString(decisionLogs)).append("\n");
    sb.append("    defaultAuthorizationDecision: ").append(toIndentedString(defaultAuthorizationDecision)).append("\n");
    sb.append("    defaultDecision: ").append(toIndentedString(defaultDecision)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundles");
    openapiFields.add("decision_logs");
    openapiFields.add("default_authorization_decision");
    openapiFields.add("default_decision");
    openapiFields.add("keys");
    openapiFields.add("labels");
    openapiFields.add("services");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Model200SingleResultResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model200SingleResultResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model200SingleResultResult is not found in the empty JSON string", Model200SingleResultResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model200SingleResultResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model200SingleResultResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bundles`
      if (jsonObj.get("bundles") != null && !jsonObj.get("bundles").isJsonNull()) {
        Model200SingleResultResultBundles.validateJsonElement(jsonObj.get("bundles"));
      }
      // validate the optional field `decision_logs`
      if (jsonObj.get("decision_logs") != null && !jsonObj.get("decision_logs").isJsonNull()) {
        Model200SingleResultResultDecisionLogs.validateJsonElement(jsonObj.get("decision_logs"));
      }
      if ((jsonObj.get("default_authorization_decision") != null && !jsonObj.get("default_authorization_decision").isJsonNull()) && !jsonObj.get("default_authorization_decision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_authorization_decision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_authorization_decision").toString()));
      }
      if ((jsonObj.get("default_decision") != null && !jsonObj.get("default_decision").isJsonNull()) && !jsonObj.get("default_decision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_decision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_decision").toString()));
      }
      // validate the optional field `keys`
      if (jsonObj.get("keys") != null && !jsonObj.get("keys").isJsonNull()) {
        Model200SingleResultResultKeys.validateJsonElement(jsonObj.get("keys"));
      }
      // validate the optional field `labels`
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        Model200SingleResultResultLabels.validateJsonElement(jsonObj.get("labels"));
      }
      // validate the optional field `services`
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        Model200SingleResultResultServices.validateJsonElement(jsonObj.get("services"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Model200SingleResultResultStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model200SingleResultResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model200SingleResultResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model200SingleResultResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model200SingleResultResult.class));

       return (TypeAdapter<T>) new TypeAdapter<Model200SingleResultResult>() {
           @Override
           public void write(JsonWriter out, Model200SingleResultResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model200SingleResultResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Model200SingleResultResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Model200SingleResultResult
   * @throws IOException if the JSON string is invalid with respect to Model200SingleResultResult
   */
  public static Model200SingleResultResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model200SingleResultResult.class);
  }

  /**
   * Convert an instance of Model200SingleResultResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

