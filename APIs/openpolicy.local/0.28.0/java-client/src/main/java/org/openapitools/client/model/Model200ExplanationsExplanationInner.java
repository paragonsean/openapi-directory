/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Model200ExplanationsExplanationInnerLocalsInner;
import org.openapitools.client.model.Model200ExplanationsExplanationInnerNode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model200ExplanationsExplanationInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:44.834605-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Model200ExplanationsExplanationInner {
  public static final String SERIALIZED_NAME_LOCALS = "locals";
  @SerializedName(SERIALIZED_NAME_LOCALS)
  private List<Model200ExplanationsExplanationInnerLocalsInner> locals = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private Model200ExplanationsExplanationInnerNode node;

  /**
   * The kind of *trace event*  Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points: - enter - before a body or rule is evaluated - exit - after a body or rule has evaluated successfully - eval - before an expression is evaluated - fail - after an expression has evaluated to false. - redo - before evaluation restarts from a body, rule, or expression.  By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
   */
  @JsonAdapter(OpEnum.Adapter.class)
  public enum OpEnum {
    ENTER("enter"),
    
    EXIT("exit"),
    
    EVAL("eval"),
    
    FAIL("fail"),
    
    REDO("redo");

    private String value;

    OpEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OpEnum fromValue(String value) {
      for (OpEnum b : OpEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OpEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OpEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OpEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OpEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OpEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OP = "op";
  @SerializedName(SERIALIZED_NAME_OP)
  private OpEnum op;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private BigDecimal parentId;

  public static final String SERIALIZED_NAME_QUERY_ID = "query_id";
  @SerializedName(SERIALIZED_NAME_QUERY_ID)
  private BigDecimal queryId;

  /**
   * The type of the **node** field
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EXPR("expr"),
    
    RULE("rule"),
    
    BODY("body");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Model200ExplanationsExplanationInner() {
  }

  public Model200ExplanationsExplanationInner locals(List<Model200ExplanationsExplanationInnerLocalsInner> locals) {
    this.locals = locals;
    return this;
  }

  public Model200ExplanationsExplanationInner addLocalsItem(Model200ExplanationsExplanationInnerLocalsInner localsItem) {
    if (this.locals == null) {
      this.locals = new ArrayList<>();
    }
    this.locals.add(localsItem);
    return this;
  }

  /**
   * The query&#39;s term bindings at the point when the trace event was emitted.
   * @return locals
   */
  @javax.annotation.Nullable
  public List<Model200ExplanationsExplanationInnerLocalsInner> getLocals() {
    return locals;
  }

  public void setLocals(List<Model200ExplanationsExplanationInnerLocalsInner> locals) {
    this.locals = locals;
  }


  public Model200ExplanationsExplanationInner node(Model200ExplanationsExplanationInnerNode node) {
    this.node = node;
    return this;
  }

  /**
   * Get node
   * @return node
   */
  @javax.annotation.Nullable
  public Model200ExplanationsExplanationInnerNode getNode() {
    return node;
  }

  public void setNode(Model200ExplanationsExplanationInnerNode node) {
    this.node = node;
  }


  public Model200ExplanationsExplanationInner op(OpEnum op) {
    this.op = op;
    return this;
  }

  /**
   * The kind of *trace event*  Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points: - enter - before a body or rule is evaluated - exit - after a body or rule has evaluated successfully - eval - before an expression is evaluated - fail - after an expression has evaluated to false. - redo - before evaluation restarts from a body, rule, or expression.  By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
   * @return op
   */
  @javax.annotation.Nullable
  public OpEnum getOp() {
    return op;
  }

  public void setOp(OpEnum op) {
    this.op = op;
  }


  public Model200ExplanationsExplanationInner parentId(BigDecimal parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The parent query. Use this field to identify trace events from related queries.  For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query Aâ€™s *query_id*.
   * minimum: 0
   * @return parentId
   */
  @javax.annotation.Nullable
  public BigDecimal getParentId() {
    return parentId;
  }

  public void setParentId(BigDecimal parentId) {
    this.parentId = parentId;
  }


  public Model200ExplanationsExplanationInner queryId(BigDecimal queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.
   * minimum: 0
   * @return queryId
   */
  @javax.annotation.Nullable
  public BigDecimal getQueryId() {
    return queryId;
  }

  public void setQueryId(BigDecimal queryId) {
    this.queryId = queryId;
  }


  public Model200ExplanationsExplanationInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the **node** field
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model200ExplanationsExplanationInner _200explanationsExplanationInner = (Model200ExplanationsExplanationInner) o;
    return Objects.equals(this.locals, _200explanationsExplanationInner.locals) &&
        Objects.equals(this.node, _200explanationsExplanationInner.node) &&
        Objects.equals(this.op, _200explanationsExplanationInner.op) &&
        Objects.equals(this.parentId, _200explanationsExplanationInner.parentId) &&
        Objects.equals(this.queryId, _200explanationsExplanationInner.queryId) &&
        Objects.equals(this.type, _200explanationsExplanationInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locals, node, op, parentId, queryId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model200ExplanationsExplanationInner {\n");
    sb.append("    locals: ").append(toIndentedString(locals)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locals");
    openapiFields.add("node");
    openapiFields.add("op");
    openapiFields.add("parent_id");
    openapiFields.add("query_id");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Model200ExplanationsExplanationInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model200ExplanationsExplanationInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model200ExplanationsExplanationInner is not found in the empty JSON string", Model200ExplanationsExplanationInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model200ExplanationsExplanationInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model200ExplanationsExplanationInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("locals") != null && !jsonObj.get("locals").isJsonNull()) {
        JsonArray jsonArraylocals = jsonObj.getAsJsonArray("locals");
        if (jsonArraylocals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locals` to be an array in the JSON string but got `%s`", jsonObj.get("locals").toString()));
          }

          // validate the optional field `locals` (array)
          for (int i = 0; i < jsonArraylocals.size(); i++) {
            Model200ExplanationsExplanationInnerLocalsInner.validateJsonElement(jsonArraylocals.get(i));
          };
        }
      }
      // validate the optional field `node`
      if (jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) {
        Model200ExplanationsExplanationInnerNode.validateJsonElement(jsonObj.get("node"));
      }
      if ((jsonObj.get("op") != null && !jsonObj.get("op").isJsonNull()) && !jsonObj.get("op").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `op` to be a primitive type in the JSON string but got `%s`", jsonObj.get("op").toString()));
      }
      // validate the optional field `op`
      if (jsonObj.get("op") != null && !jsonObj.get("op").isJsonNull()) {
        OpEnum.validateJsonElement(jsonObj.get("op"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model200ExplanationsExplanationInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model200ExplanationsExplanationInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model200ExplanationsExplanationInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model200ExplanationsExplanationInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Model200ExplanationsExplanationInner>() {
           @Override
           public void write(JsonWriter out, Model200ExplanationsExplanationInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model200ExplanationsExplanationInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Model200ExplanationsExplanationInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Model200ExplanationsExplanationInner
   * @throws IOException if the JSON string is invalid with respect to Model200ExplanationsExplanationInner
   */
  public static Model200ExplanationsExplanationInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model200ExplanationsExplanationInner.class);
  }

  /**
   * Convert an instance of Model200ExplanationsExplanationInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

