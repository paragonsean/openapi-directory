/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HealthApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HealthApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HealthApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getHealth
     * @param bundles Reports on bundle activation status (useful for &#39;ready&#39; checks at startup).  This includes any discovery bundles or bundles defined in the loaded discovery configuration. (optional)
     * @param plugins Reports on plugin status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OPA service is healthy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> OPA service is not healthy </td><td>  -  </td></tr>
     </table>
     * Bundles
     * @see <a href="https://www.openpolicyagent.org/docs/latest/management/#bundles">Health Documentation</a>
     */
    public okhttp3.Call getHealthCall(Boolean bundles, Boolean plugins, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bundles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bundles", bundles));
        }

        if (plugins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plugins", plugins));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHealthValidateBeforeCall(Boolean bundles, Boolean plugins, final ApiCallback _callback) throws ApiException {
        return getHealthCall(bundles, plugins, _callback);

    }

    /**
     * Health
     * This API endpoint verifies that the server is operational.  The response from the server is either 200 or 500: - **200** - OPA service is healthy. If &#x60;bundles&#x60; is true, then all configured bundles have been activated. If &#x60;plugins&#x60; is true, then all plugins are in an &#39;OK&#39; state. - **500** - OPA service is *not* healthy. If &#x60;bundles&#x60; is true, at least one of configured bundles has not yet been activated. If &#x60;plugins&#x60; is true, at least one plugins is in a &#39;not OK&#39; state.  --- **Note** This check is only for initial bundle activation. Subsequent downloads will not affect the health check.  Use the **status** endpoint (in the (management API)[management.html]) for more fine-grained bundle status monitoring.  ---
     * @param bundles Reports on bundle activation status (useful for &#39;ready&#39; checks at startup).  This includes any discovery bundles or bundles defined in the loaded discovery configuration. (optional)
     * @param plugins Reports on plugin status (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OPA service is healthy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> OPA service is not healthy </td><td>  -  </td></tr>
     </table>
     * Bundles
     * @see <a href="https://www.openpolicyagent.org/docs/latest/management/#bundles">Health Documentation</a>
     */
    public void getHealth(Boolean bundles, Boolean plugins) throws ApiException {
        getHealthWithHttpInfo(bundles, plugins);
    }

    /**
     * Health
     * This API endpoint verifies that the server is operational.  The response from the server is either 200 or 500: - **200** - OPA service is healthy. If &#x60;bundles&#x60; is true, then all configured bundles have been activated. If &#x60;plugins&#x60; is true, then all plugins are in an &#39;OK&#39; state. - **500** - OPA service is *not* healthy. If &#x60;bundles&#x60; is true, at least one of configured bundles has not yet been activated. If &#x60;plugins&#x60; is true, at least one plugins is in a &#39;not OK&#39; state.  --- **Note** This check is only for initial bundle activation. Subsequent downloads will not affect the health check.  Use the **status** endpoint (in the (management API)[management.html]) for more fine-grained bundle status monitoring.  ---
     * @param bundles Reports on bundle activation status (useful for &#39;ready&#39; checks at startup).  This includes any discovery bundles or bundles defined in the loaded discovery configuration. (optional)
     * @param plugins Reports on plugin status (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OPA service is healthy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> OPA service is not healthy </td><td>  -  </td></tr>
     </table>
     * Bundles
     * @see <a href="https://www.openpolicyagent.org/docs/latest/management/#bundles">Health Documentation</a>
     */
    public ApiResponse<Void> getHealthWithHttpInfo(Boolean bundles, Boolean plugins) throws ApiException {
        okhttp3.Call localVarCall = getHealthValidateBeforeCall(bundles, plugins, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Health (asynchronously)
     * This API endpoint verifies that the server is operational.  The response from the server is either 200 or 500: - **200** - OPA service is healthy. If &#x60;bundles&#x60; is true, then all configured bundles have been activated. If &#x60;plugins&#x60; is true, then all plugins are in an &#39;OK&#39; state. - **500** - OPA service is *not* healthy. If &#x60;bundles&#x60; is true, at least one of configured bundles has not yet been activated. If &#x60;plugins&#x60; is true, at least one plugins is in a &#39;not OK&#39; state.  --- **Note** This check is only for initial bundle activation. Subsequent downloads will not affect the health check.  Use the **status** endpoint (in the (management API)[management.html]) for more fine-grained bundle status monitoring.  ---
     * @param bundles Reports on bundle activation status (useful for &#39;ready&#39; checks at startup).  This includes any discovery bundles or bundles defined in the loaded discovery configuration. (optional)
     * @param plugins Reports on plugin status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OPA service is healthy </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> OPA service is not healthy </td><td>  -  </td></tr>
     </table>
     * Bundles
     * @see <a href="https://www.openpolicyagent.org/docs/latest/management/#bundles">Health Documentation</a>
     */
    public okhttp3.Call getHealthAsync(Boolean bundles, Boolean plugins, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHealthValidateBeforeCall(bundles, plugins, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
