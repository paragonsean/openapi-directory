/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetDocumentWithWebHook200Response;
import org.openapitools.client.model.Model200Result;
import org.openapitools.client.model.Model400;
import org.openapitools.client.model.Model404;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePolicyModule
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyModuleCall(String id, Boolean pretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyModuleValidateBeforeCall(String id, Boolean pretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePolicyModule(Async)");
        }

        return deletePolicyModuleCall(id, pretty, _callback);

    }

    /**
     * Delete a policy module
     * This API endpoint removes an existing policy module from the server
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return GetDocumentWithWebHook200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentWithWebHook200Response deletePolicyModule(String id, Boolean pretty) throws ApiException {
        ApiResponse<GetDocumentWithWebHook200Response> localVarResp = deletePolicyModuleWithHttpInfo(id, pretty);
        return localVarResp.getData();
    }

    /**
     * Delete a policy module
     * This API endpoint removes an existing policy module from the server
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return ApiResponse&lt;GetDocumentWithWebHook200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDocumentWithWebHook200Response> deletePolicyModuleWithHttpInfo(String id, Boolean pretty) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyModuleValidateBeforeCall(id, pretty, null);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a policy module (asynchronously)
     * This API endpoint removes an existing policy module from the server
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyModuleAsync(String id, Boolean pretty, final ApiCallback<GetDocumentWithWebHook200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyModuleValidateBeforeCall(id, pretty, _callback);
        Type localVarReturnType = new TypeToken<GetDocumentWithWebHook200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPolicies
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPoliciesCall(Boolean pretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoliciesValidateBeforeCall(Boolean pretty, final ApiCallback _callback) throws ApiException {
        return getPoliciesCall(pretty, _callback);

    }

    /**
     * List policies
     * This API endpoint responds with a list of all policy modules on the server (result response)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return Model200Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public Model200Result getPolicies(Boolean pretty) throws ApiException {
        ApiResponse<Model200Result> localVarResp = getPoliciesWithHttpInfo(pretty);
        return localVarResp.getData();
    }

    /**
     * List policies
     * This API endpoint responds with a list of all policy modules on the server (result response)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return ApiResponse&lt;Model200Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Result> getPoliciesWithHttpInfo(Boolean pretty) throws ApiException {
        okhttp3.Call localVarCall = getPoliciesValidateBeforeCall(pretty, null);
        Type localVarReturnType = new TypeToken<Model200Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List policies (asynchronously)
     * This API endpoint responds with a list of all policy modules on the server (result response)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPoliciesAsync(Boolean pretty, final ApiCallback<Model200Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoliciesValidateBeforeCall(pretty, _callback);
        Type localVarReturnType = new TypeToken<Model200Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPolicyModule
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyModuleCall(String id, Boolean pretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyModuleValidateBeforeCall(String id, Boolean pretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPolicyModule(Async)");
        }

        return getPolicyModuleCall(id, pretty, _callback);

    }

    /**
     * Get a policy module
     * This API endpoint returns the details of the specified policy module (&#x60;{id}&#x60;)
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return Model200Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public Model200Result getPolicyModule(String id, Boolean pretty) throws ApiException {
        ApiResponse<Model200Result> localVarResp = getPolicyModuleWithHttpInfo(id, pretty);
        return localVarResp.getData();
    }

    /**
     * Get a policy module
     * This API endpoint returns the details of the specified policy module (&#x60;{id}&#x60;)
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return ApiResponse&lt;Model200Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Result> getPolicyModuleWithHttpInfo(String id, Boolean pretty) throws ApiException {
        okhttp3.Call localVarCall = getPolicyModuleValidateBeforeCall(id, pretty, null);
        Type localVarReturnType = new TypeToken<Model200Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a policy module (asynchronously)
     * This API endpoint returns the details of the specified policy module (&#x60;{id}&#x60;)
     * @param id The name of a policy module (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyModuleAsync(String id, Boolean pretty, final ApiCallback<Model200Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyModuleValidateBeforeCall(id, pretty, _callback);
        Type localVarReturnType = new TypeToken<Model200Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPolicyModule
     * @param id The name of a policy module (required)
     * @param body  (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPolicyModuleCall(String id, String body, Boolean pretty, Boolean metrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPolicyModuleValidateBeforeCall(String id, String body, Boolean pretty, Boolean metrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putPolicyModule(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPolicyModule(Async)");
        }

        return putPolicyModuleCall(id, body, pretty, metrics, _callback);

    }

    /**
     * Create or update a policy module
     * - If the policy module does not exist, it is created. - If the policy module already exists, it is replaced.  If the policy module isn&#39;t correctly defined, a *bad request* (400) response is returned.  ### Example policy module &#x60;&#x60;&#x60;yaml package opa.examples  import data.servers import data.networks import data.ports  public_servers[server] {   some k, m    server :&#x3D; servers[_]    server.ports[_] &#x3D;&#x3D; ports[k].id    ports[k].networks[_] &#x3D;&#x3D; networks[m].id    networks[m].public &#x3D;&#x3D; true } &#x60;&#x60;&#x60;
     * @param id The name of a policy module (required)
     * @param body  (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @return Model200Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public Model200Result putPolicyModule(String id, String body, Boolean pretty, Boolean metrics) throws ApiException {
        ApiResponse<Model200Result> localVarResp = putPolicyModuleWithHttpInfo(id, body, pretty, metrics);
        return localVarResp.getData();
    }

    /**
     * Create or update a policy module
     * - If the policy module does not exist, it is created. - If the policy module already exists, it is replaced.  If the policy module isn&#39;t correctly defined, a *bad request* (400) response is returned.  ### Example policy module &#x60;&#x60;&#x60;yaml package opa.examples  import data.servers import data.networks import data.ports  public_servers[server] {   some k, m    server :&#x3D; servers[_]    server.ports[_] &#x3D;&#x3D; ports[k].id    ports[k].networks[_] &#x3D;&#x3D; networks[m].id    networks[m].public &#x3D;&#x3D; true } &#x60;&#x60;&#x60;
     * @param id The name of a policy module (required)
     * @param body  (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @return ApiResponse&lt;Model200Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Model200Result> putPolicyModuleWithHttpInfo(String id, String body, Boolean pretty, Boolean metrics) throws ApiException {
        okhttp3.Call localVarCall = putPolicyModuleValidateBeforeCall(id, body, pretty, metrics, null);
        Type localVarReturnType = new TypeToken<Model200Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a policy module (asynchronously)
     * - If the policy module does not exist, it is created. - If the policy module already exists, it is replaced.  If the policy module isn&#39;t correctly defined, a *bad request* (400) response is returned.  ### Example policy module &#x60;&#x60;&#x60;yaml package opa.examples  import data.servers import data.networks import data.ports  public_servers[server] {   some k, m    server :&#x3D; servers[_]    server.ports[_] &#x3D;&#x3D; ports[k].id    ports[k].networks[_] &#x3D;&#x3D; networks[m].id    networks[m].public &#x3D;&#x3D; true } &#x60;&#x60;&#x60;
     * @param id The name of a policy module (required)
     * @param body  (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPolicyModuleAsync(String id, String body, Boolean pretty, Boolean metrics, final ApiCallback<Model200Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPolicyModuleValidateBeforeCall(id, body, pretty, metrics, _callback);
        Type localVarReturnType = new TypeToken<Model200Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
