/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Model200ExplanationsExplanationInner;
import org.openapitools.client.model.Model200MetricsMetrics;
import org.openapitools.client.model.Model200ResultResultInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostCompile200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:44.834605-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostCompile200Response {
  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private List<Model200ResultResultInner> result = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Model200MetricsMetrics metrics;

  public static final String SERIALIZED_NAME_EXPLANATION = "explanation";
  @SerializedName(SERIALIZED_NAME_EXPLANATION)
  private List<Model200ExplanationsExplanationInner> explanation = new ArrayList<>();

  public PostCompile200Response() {
  }

  public PostCompile200Response result(List<Model200ResultResultInner> result) {
    this.result = result;
    return this;
  }

  public PostCompile200Response addResultItem(Model200ResultResultInner resultItem) {
    if (this.result == null) {
      this.result = new ArrayList<>();
    }
    this.result.add(resultItem);
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public List<Model200ResultResultInner> getResult() {
    return result;
  }

  public void setResult(List<Model200ResultResultInner> result) {
    this.result = result;
  }


  public PostCompile200Response metrics(Model200MetricsMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public Model200MetricsMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(Model200MetricsMetrics metrics) {
    this.metrics = metrics;
  }


  public PostCompile200Response explanation(List<Model200ExplanationsExplanationInner> explanation) {
    this.explanation = explanation;
    return this;
  }

  public PostCompile200Response addExplanationItem(Model200ExplanationsExplanationInner explanationItem) {
    if (this.explanation == null) {
      this.explanation = new ArrayList<>();
    }
    this.explanation.add(explanationItem);
    return this;
  }

  /**
   * Get explanation
   * @return explanation
   */
  @javax.annotation.Nullable
  public List<Model200ExplanationsExplanationInner> getExplanation() {
    return explanation;
  }

  public void setExplanation(List<Model200ExplanationsExplanationInner> explanation) {
    this.explanation = explanation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostCompile200Response postCompile200Response = (PostCompile200Response) o;
    return Objects.equals(this.result, postCompile200Response.result) &&
        Objects.equals(this.metrics, postCompile200Response.metrics) &&
        Objects.equals(this.explanation, postCompile200Response.explanation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, metrics, explanation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostCompile200Response {\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    explanation: ").append(toIndentedString(explanation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("result");
    openapiFields.add("metrics");
    openapiFields.add("explanation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostCompile200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostCompile200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostCompile200Response is not found in the empty JSON string", PostCompile200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostCompile200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostCompile200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        JsonArray jsonArrayresult = jsonObj.getAsJsonArray("result");
        if (jsonArrayresult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("result").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `result` to be an array in the JSON string but got `%s`", jsonObj.get("result").toString()));
          }

          // validate the optional field `result` (array)
          for (int i = 0; i < jsonArrayresult.size(); i++) {
            Model200ResultResultInner.validateJsonElement(jsonArrayresult.get(i));
          };
        }
      }
      // validate the optional field `metrics`
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        Model200MetricsMetrics.validateJsonElement(jsonObj.get("metrics"));
      }
      if (jsonObj.get("explanation") != null && !jsonObj.get("explanation").isJsonNull()) {
        JsonArray jsonArrayexplanation = jsonObj.getAsJsonArray("explanation");
        if (jsonArrayexplanation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("explanation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `explanation` to be an array in the JSON string but got `%s`", jsonObj.get("explanation").toString()));
          }

          // validate the optional field `explanation` (array)
          for (int i = 0; i < jsonArrayexplanation.size(); i++) {
            Model200ExplanationsExplanationInner.validateJsonElement(jsonArrayexplanation.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostCompile200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostCompile200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostCompile200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostCompile200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<PostCompile200Response>() {
           @Override
           public void write(JsonWriter out, PostCompile200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostCompile200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostCompile200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostCompile200Response
   * @throws IOException if the JSON string is invalid with respect to PostCompile200Response
   */
  public static PostCompile200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostCompile200Response.class);
  }

  /**
   * Convert an instance of PostCompile200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

