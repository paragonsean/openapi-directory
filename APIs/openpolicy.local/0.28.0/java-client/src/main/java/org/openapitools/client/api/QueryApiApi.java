/*
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Model400;
import org.openapitools.client.model.Model404;
import org.openapitools.client.model.PostCompile200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueryApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getQuery
     * @param q The [URL-encoded](https://www.w3schools.com/tags/ref_urlencode.ASP) ad-hoc query to execute. (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryCall(String q, Boolean pretty, String explain, Boolean metrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (explain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("explain", explain));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryValidateBeforeCall(String q, Boolean pretty, String explain, Boolean metrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling getQuery(Async)");
        }

        return getQueryCall(q, pretty, explain, metrics, _callback);

    }

    /**
     * Execute an ad-hoc query (simple)
     * This API endpoint returns bindings for the variables in the query.  For more complex JSON queries, use &#x60;POST /v1/query&#x60; instead.
     * @param q The [URL-encoded](https://www.w3schools.com/tags/ref_urlencode.ASP) ad-hoc query to execute. (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @return PostCompile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public PostCompile200Response getQuery(String q, Boolean pretty, String explain, Boolean metrics) throws ApiException {
        ApiResponse<PostCompile200Response> localVarResp = getQueryWithHttpInfo(q, pretty, explain, metrics);
        return localVarResp.getData();
    }

    /**
     * Execute an ad-hoc query (simple)
     * This API endpoint returns bindings for the variables in the query.  For more complex JSON queries, use &#x60;POST /v1/query&#x60; instead.
     * @param q The [URL-encoded](https://www.w3schools.com/tags/ref_urlencode.ASP) ad-hoc query to execute. (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @return ApiResponse&lt;PostCompile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostCompile200Response> getQueryWithHttpInfo(String q, Boolean pretty, String explain, Boolean metrics) throws ApiException {
        okhttp3.Call localVarCall = getQueryValidateBeforeCall(q, pretty, explain, metrics, null);
        Type localVarReturnType = new TypeToken<PostCompile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute an ad-hoc query (simple) (asynchronously)
     * This API endpoint returns bindings for the variables in the query.  For more complex JSON queries, use &#x60;POST /v1/query&#x60; instead.
     * @param q The [URL-encoded](https://www.w3schools.com/tags/ref_urlencode.ASP) ad-hoc query to execute. (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryAsync(String q, Boolean pretty, String explain, Boolean metrics, final ApiCallback<PostCompile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryValidateBeforeCall(q, pretty, explain, metrics, _callback);
        Type localVarReturnType = new TypeToken<PostCompile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postQuery
     * @param requestBody The test of the query (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Streaming not implemented </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryCall(Map<String, Object> requestBody, Boolean pretty, String explain, Boolean metrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        if (explain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("explain", explain));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postQueryValidateBeforeCall(Map<String, Object> requestBody, Boolean pretty, String explain, Boolean metrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling postQuery(Async)");
        }

        return postQueryCall(requestBody, pretty, explain, metrics, _callback);

    }

    /**
     * Execute an ad-hoc query (complex)
     * This API endpoint returns bindings for the variables in the query.  For simpler JSON queries, you may use &#x60;GET /v1/query&#x60; instead.
     * @param requestBody The test of the query (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @return PostCompile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Streaming not implemented </td><td>  -  </td></tr>
     </table>
     */
    public PostCompile200Response postQuery(Map<String, Object> requestBody, Boolean pretty, String explain, Boolean metrics) throws ApiException {
        ApiResponse<PostCompile200Response> localVarResp = postQueryWithHttpInfo(requestBody, pretty, explain, metrics);
        return localVarResp.getData();
    }

    /**
     * Execute an ad-hoc query (complex)
     * This API endpoint returns bindings for the variables in the query.  For simpler JSON queries, you may use &#x60;GET /v1/query&#x60; instead.
     * @param requestBody The test of the query (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @return ApiResponse&lt;PostCompile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Streaming not implemented </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostCompile200Response> postQueryWithHttpInfo(Map<String, Object> requestBody, Boolean pretty, String explain, Boolean metrics) throws ApiException {
        okhttp3.Call localVarCall = postQueryValidateBeforeCall(requestBody, pretty, explain, metrics, null);
        Type localVarReturnType = new TypeToken<PostCompile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute an ad-hoc query (complex) (asynchronously)
     * This API endpoint returns bindings for the variables in the query.  For simpler JSON queries, you may use &#x60;GET /v1/query&#x60; instead.
     * @param requestBody The test of the query (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param explain If set to *full*, response will include query explanations in addition to the result. (optional)
     * @param metrics If true, compiler performance metrics will be returned in the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> Streaming not implemented </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postQueryAsync(Map<String, Object> requestBody, Boolean pretty, String explain, Boolean metrics, final ApiCallback<PostCompile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postQueryValidateBeforeCall(requestBody, pretty, explain, metrics, _callback);
        Type localVarReturnType = new TypeToken<PostCompile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSimpleQuery
     * @param requestBody The text of the input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSimpleQueryCall(Map<String, Object> requestBody, Boolean pretty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pretty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pretty", pretty));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSimpleQueryValidateBeforeCall(Map<String, Object> requestBody, Boolean pretty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling postSimpleQuery(Async)");
        }

        return postSimpleQueryCall(requestBody, pretty, _callback);

    }

    /**
     * Execute a simple query
     * This API queries the document at *_/data/system/main* by default (however, you can [configure OPA](https://www.openpolicyagent.org/docs/latest/configuration/) to use a different path to serve these queries). That document defines the response. For example, use the following in &#x60;PUT /v1/policies/{path}&#x60;) to define a rule that will produce a value for the *_/data/system/main* document:    &#x60;&#x60;&#x60;yaml   package system   main &#x3D; msg {     msg :&#x3D; sprintf(\&quot;hello, %v\&quot;, input.user)   }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if *_/data/system/main* is undefined.
     * @param requestBody The text of the input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public void postSimpleQuery(Map<String, Object> requestBody, Boolean pretty) throws ApiException {
        postSimpleQueryWithHttpInfo(requestBody, pretty);
    }

    /**
     * Execute a simple query
     * This API queries the document at *_/data/system/main* by default (however, you can [configure OPA](https://www.openpolicyagent.org/docs/latest/configuration/) to use a different path to serve these queries). That document defines the response. For example, use the following in &#x60;PUT /v1/policies/{path}&#x60;) to define a rule that will produce a value for the *_/data/system/main* document:    &#x60;&#x60;&#x60;yaml   package system   main &#x3D; msg {     msg :&#x3D; sprintf(\&quot;hello, %v\&quot;, input.user)   }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if *_/data/system/main* is undefined.
     * @param requestBody The text of the input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postSimpleQueryWithHttpInfo(Map<String, Object> requestBody, Boolean pretty) throws ApiException {
        okhttp3.Call localVarCall = postSimpleQueryValidateBeforeCall(requestBody, pretty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Execute a simple query (asynchronously)
     * This API queries the document at *_/data/system/main* by default (however, you can [configure OPA](https://www.openpolicyagent.org/docs/latest/configuration/) to use a different path to serve these queries). That document defines the response. For example, use the following in &#x60;PUT /v1/policies/{path}&#x60;) to define a rule that will produce a value for the *_/data/system/main* document:    &#x60;&#x60;&#x60;yaml   package system   main &#x3D; msg {     msg :&#x3D; sprintf(\&quot;hello, %v\&quot;, input.user)   }   &#x60;&#x60;&#x60;  The server will return a *not found* (404) response if *_/data/system/main* is undefined.
     * @param requestBody The text of the input document (in JSON format) (required)
     * @param pretty If true, response will be in a human-readable format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found (for example, a requested policy module or document does not exist) </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSimpleQueryAsync(Map<String, Object> requestBody, Boolean pretty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSimpleQueryValidateBeforeCall(requestBody, pretty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
