/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDocumentWithWebHook200Response from '../model/GetDocumentWithWebHook200Response';
import Model400 from '../model/Model400';
import Model404 from '../model/Model404';
import PatchesSchemaInner from '../model/PatchesSchemaInner';

/**
* DataAPI service.
* @module api/DataAPIApi
* @version 0.28.0
*/
export default class DataAPIApi {

    /**
    * Constructs a new DataAPIApi. 
    * @alias module:api/DataAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteDocument operation.
     * @callback module:api/DataAPIApi~deleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a document
     * This API endpoint deletes an existing document from the server
     * @param {String} path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     * @param {module:api/DataAPIApi~deleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocument(path, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteDocument");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback module:api/DataAPIApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocumentWithWebHook200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a document
     * This API endpoint returns the document specified by `path`.  The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provide the input document but the query has already defined it.
     * @param {String} path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: Object}>} [input] Provide the text for an [input document](https://www.openpolicyagent.org/docs/latest/kubernetes-primer/#input-document) in JSON format
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {Boolean} [provenance] If true, response will include build and version information in addition to the result.
     * @param {String} [explain] If set to *full*, response will include query explanations in addition to the result.
     * @param {Boolean} [metrics] If true, compiler performance metrics will be returned in the response.
     * @param {Boolean} [instrument] If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem.
     * @param {module:api/DataAPIApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocumentWithWebHook200Response}
     */
    getDocument(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getDocument");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'input': opts['input'],
        'pretty': opts['pretty'],
        'provenance': opts['provenance'],
        'explain': opts['explain'],
        'metrics': opts['metrics'],
        'instrument': opts['instrument']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDocumentWithWebHook200Response;
      return this.apiClient.callApi(
        '/v1/data/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentWithPath operation.
     * @callback module:api/DataAPIApi~getDocumentWithPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocumentWithWebHook200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a document (with input)
     * The server will return a *bad request* (400) response if either: - The query requires an input document and you do not provide it - You provided an input document but the query has already defined it.  If `path` indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.
     * @param {String} path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     * @param {Object.<String, {String: Object}>} requestBody The input document (in JSON format)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {Boolean} [provenance] If true, response will include build and version information in addition to the result.
     * @param {String} [explain] If set to *full*, response will include query explanations in addition to the result.
     * @param {Boolean} [metrics] If true, compiler performance metrics will be returned in the response.
     * @param {Boolean} [instrument] If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem.
     * @param {module:api/DataAPIApi~getDocumentWithPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocumentWithWebHook200Response}
     */
    getDocumentWithPath(path, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getDocumentWithPath");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling getDocumentWithPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'provenance': opts['provenance'],
        'explain': opts['explain'],
        'metrics': opts['metrics'],
        'instrument': opts['instrument']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = GetDocumentWithWebHook200Response;
      return this.apiClient.callApi(
        '/v1/data/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentWithWebHook operation.
     * @callback module:api/DataAPIApi~getDocumentWithWebHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocumentWithWebHook200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a document (with webhook)
     * The example given here assumes you have created a policy (with `PUT /v1/policies/{path}`), such as:    ```yaml   package opa.examples   import input.example.flag   allow_request { flag == true }   ```  The server will return a *not found* (404) response if the requested document is missing or undefined. 
     * @param {String} path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     * @param {Object.<String, {String: Object}>} requestBody The input document (in JSON format)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {module:api/DataAPIApi~getDocumentWithWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocumentWithWebHook200Response}
     */
    getDocumentWithWebHook(path, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getDocumentWithWebHook");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling getDocumentWithWebHook");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = GetDocumentWithWebHook200Response;
      return this.apiClient.callApi(
        '/v0/data/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchDocument operation.
     * @callback module:api/DataAPIApi~patchDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a document
     * This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))
     * @param {String} path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     * @param {Array.<module:model/PatchesSchemaInner>} patchesSchemaInner The list of JSON patch operations.
     * @param {module:api/DataAPIApi~patchDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    patchDocument(path, patchesSchemaInner, callback) {
      let postBody = patchesSchemaInner;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling patchDocument");
      }
      // verify the required parameter 'patchesSchemaInner' is set
      if (patchesSchemaInner === undefined || patchesSchemaInner === null) {
        throw new Error("Missing the required parameter 'patchesSchemaInner' when calling patchDocument");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data/{path}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDocument operation.
     * @callback module:api/DataAPIApi~putDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or overwrite a document
     * If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.  This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).
     * @param {String} path A backslash (/) delimited path to access values inside object and array documents. If the path points to an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, the server will respond with 404.
     * @param {Object} body The JSON document to write to the specified path.
     * @param {Object} opts Optional parameters
     * @param {String} [ifNoneMatch] The server will respect the If-None-Match header if it is set to * (in other words, it will not overwrite an existing document located at the specified `path`).
     * @param {module:api/DataAPIApi~putDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putDocument(path, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling putDocument");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putDocument");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data/{path}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
