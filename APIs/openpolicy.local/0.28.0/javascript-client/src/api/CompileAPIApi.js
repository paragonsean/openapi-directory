/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Model400 from '../model/Model400';
import PostCompile200Response from '../model/PostCompile200Response';

/**
* CompileAPI service.
* @module api/CompileAPIApi
* @version 0.28.0
*/
export default class CompileAPIApi {

    /**
    * Constructs a new CompileAPIApi. 
    * @alias module:api/CompileAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postCompile operation.
     * @callback module:api/CompileAPIApi~postCompileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostCompile200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compile
     * This API endpoint allows you to partially evaluate Rego queries and obtain a simplified version of the policy. The example below assumes that OPA has been given the following policy (use `PUT /v1/policies/{path}`):  ```yaml package example allow {   input.subject.clearance_level >= data.reports[_].clearance_level } ``` Compile API **request body** so that it contain the following fields:  | Field | Type | Required | Description | | --- | --- | --- | --- | | `query` | `string` | Yes | The query to partially evaluate and compile. | | `input` | `any` | No | The input document to use during partial evaluation (default: undefined). | | `unknowns` | `array[string]` | No | The terms to treat as unknown during partial evaluation (default: `[\"input\"]`]). |  For example:  ```json {   \"query\": \"data.example.allow == true\",   \"input\": {     \"subject\": {       \"clearance_level\": 4     }   },   \"unknowns\": [     \"data.reports\"     ] } ``` ### Partial evaluation In some cases, the result of partial valuation is a conclusive, unconditional answer. See [the guidance](https://www.openpolicyagent.org/docs/latest/rest-api/#unconditional-results-from-partial-evaluation) for details.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {String} [explain] If set to *full*, response will include query explanations in addition to the result.
     * @param {Boolean} [metrics] If true, compiler performance metrics will be returned in the response.
     * @param {Boolean} [instrument] If true, response will return additional performance metrics in addition to the result and the standard metrics.  **Caution:** This can add significant overhead to query evaluation. The recommendation is to only use this parameter if you are debugging a performance problem.
     * @param {Object.<String, {String: Object}>} [requestBody] The query (in JSON format)
     * @param {module:api/CompileAPIApi~postCompileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostCompile200Response}
     */
    postCompile(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];

      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'explain': opts['explain'],
        'metrics': opts['metrics'],
        'instrument': opts['instrument']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostCompile200Response;
      return this.apiClient.callApi(
        '/v1/compile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
