/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDocumentWithWebHook200Response from '../model/GetDocumentWithWebHook200Response';
import Model200Result from '../model/Model200Result';
import Model400 from '../model/Model400';
import Model404 from '../model/Model404';

/**
* PolicyAPI service.
* @module api/PolicyAPIApi
* @version 0.28.0
*/
export default class PolicyAPIApi {

    /**
    * Constructs a new PolicyAPIApi. 
    * @alias module:api/PolicyAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePolicyModule operation.
     * @callback module:api/PolicyAPIApi~deletePolicyModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocumentWithWebHook200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a policy module
     * This API endpoint removes an existing policy module from the server
     * @param {String} id The name of a policy module
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {module:api/PolicyAPIApi~deletePolicyModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocumentWithWebHook200Response}
     */
    deletePolicyModule(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePolicyModule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDocumentWithWebHook200Response;
      return this.apiClient.callApi(
        '/v1/policies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicies operation.
     * @callback module:api/PolicyAPIApi~getPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List policies
     * This API endpoint responds with a list of all policy modules on the server (result response)
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {module:api/PolicyAPIApi~getPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Result}
     */
    getPolicies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Result;
      return this.apiClient.callApi(
        '/v1/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPolicyModule operation.
     * @callback module:api/PolicyAPIApi~getPolicyModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a policy module
     * This API endpoint returns the details of the specified policy module (`{id}`)
     * @param {String} id The name of a policy module
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {module:api/PolicyAPIApi~getPolicyModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Result}
     */
    getPolicyModule(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPolicyModule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Model200Result;
      return this.apiClient.callApi(
        '/v1/policies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPolicyModule operation.
     * @callback module:api/PolicyAPIApi~putPolicyModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model200Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a policy module
     * - If the policy module does not exist, it is created. - If the policy module already exists, it is replaced.  If the policy module isn't correctly defined, a *bad request* (400) response is returned.  ### Example policy module ```yaml package opa.examples  import data.servers import data.networks import data.ports  public_servers[server] {   some k, m    server := servers[_]    server.ports[_] == ports[k].id    ports[k].networks[_] == networks[m].id    networks[m].public == true } ```
     * @param {String} id The name of a policy module
     * @param {String} body 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [pretty] If true, response will be in a human-readable format.
     * @param {Boolean} [metrics] If true, compiler performance metrics will be returned in the response.
     * @param {module:api/PolicyAPIApi~putPolicyModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model200Result}
     */
    putPolicyModule(id, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putPolicyModule");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling putPolicyModule");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pretty': opts['pretty'],
        'metrics': opts['metrics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = Model200Result;
      return this.apiClient.callApi(
        '/v1/policies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
