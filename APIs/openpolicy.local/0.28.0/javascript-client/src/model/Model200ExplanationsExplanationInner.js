/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Model200ExplanationsExplanationInnerLocalsInner from './Model200ExplanationsExplanationInnerLocalsInner';
import Model200ExplanationsExplanationInnerNode from './Model200ExplanationsExplanationInnerNode';

/**
 * The Model200ExplanationsExplanationInner model module.
 * @module model/Model200ExplanationsExplanationInner
 * @version 0.28.0
 */
class Model200ExplanationsExplanationInner {
    /**
     * Constructs a new <code>Model200ExplanationsExplanationInner</code>.
     * @alias module:model/Model200ExplanationsExplanationInner
     */
    constructor() { 
        
        Model200ExplanationsExplanationInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Model200ExplanationsExplanationInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model200ExplanationsExplanationInner} obj Optional instance to populate.
     * @return {module:model/Model200ExplanationsExplanationInner} The populated <code>Model200ExplanationsExplanationInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model200ExplanationsExplanationInner();

            if (data.hasOwnProperty('locals')) {
                obj['locals'] = ApiClient.convertToType(data['locals'], [Model200ExplanationsExplanationInnerLocalsInner]);
            }
            if (data.hasOwnProperty('node')) {
                obj['node'] = Model200ExplanationsExplanationInnerNode.constructFromObject(data['node']);
            }
            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'Number');
            }
            if (data.hasOwnProperty('query_id')) {
                obj['query_id'] = ApiClient.convertToType(data['query_id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model200ExplanationsExplanationInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model200ExplanationsExplanationInner</code>.
     */
    static validateJSON(data) {
        if (data['locals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locals'])) {
                throw new Error("Expected the field `locals` to be an array in the JSON data but got " + data['locals']);
            }
            // validate the optional field `locals` (array)
            for (const item of data['locals']) {
                Model200ExplanationsExplanationInnerLocalsInner.validateJSON(item);
            };
        }
        // validate the optional field `node`
        if (data['node']) { // data not null
          Model200ExplanationsExplanationInnerNode.validateJSON(data['node']);
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The query's term bindings at the point when the trace event was emitted.
 * @member {Array.<module:model/Model200ExplanationsExplanationInnerLocalsInner>} locals
 */
Model200ExplanationsExplanationInner.prototype['locals'] = undefined;

/**
 * @member {module:model/Model200ExplanationsExplanationInnerNode} node
 */
Model200ExplanationsExplanationInner.prototype['node'] = undefined;

/**
 * The kind of *trace event*  Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points: - enter - before a body or rule is evaluated - exit - after a body or rule has evaluated successfully - eval - before an expression is evaluated - fail - after an expression has evaluated to false. - redo - before evaluation restarts from a body, rule, or expression.  By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
 * @member {module:model/Model200ExplanationsExplanationInner.OpEnum} op
 */
Model200ExplanationsExplanationInner.prototype['op'] = undefined;

/**
 * The parent query. Use this field to identify trace events from related queries.  For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query Aâ€™s *query_id*.
 * @member {Number} parent_id
 */
Model200ExplanationsExplanationInner.prototype['parent_id'] = undefined;

/**
 * The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.
 * @member {Number} query_id
 */
Model200ExplanationsExplanationInner.prototype['query_id'] = undefined;

/**
 * The type of the **node** field
 * @member {module:model/Model200ExplanationsExplanationInner.TypeEnum} type
 */
Model200ExplanationsExplanationInner.prototype['type'] = undefined;





/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
Model200ExplanationsExplanationInner['OpEnum'] = {

    /**
     * value: "enter"
     * @const
     */
    "enter": "enter",

    /**
     * value: "exit"
     * @const
     */
    "exit": "exit",

    /**
     * value: "eval"
     * @const
     */
    "eval": "eval",

    /**
     * value: "fail"
     * @const
     */
    "fail": "fail",

    /**
     * value: "redo"
     * @const
     */
    "redo": "redo"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Model200ExplanationsExplanationInner['TypeEnum'] = {

    /**
     * value: "expr"
     * @const
     */
    "expr": "expr",

    /**
     * value: "rule"
     * @const
     */
    "rule": "rule",

    /**
     * value: "body"
     * @const
     */
    "body": "body"
};



export default Model200ExplanationsExplanationInner;

