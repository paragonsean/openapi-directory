/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Model200Explanations from './Model200Explanations';
import Model200ExplanationsExplanationInner from './Model200ExplanationsExplanationInner';
import Model200Metrics from './Model200Metrics';
import Model200MetricsMetrics from './Model200MetricsMetrics';
import Model200Result from './Model200Result';
import Model200ResultResultInner from './Model200ResultResultInner';

/**
 * The PostCompile200Response model module.
 * @module model/PostCompile200Response
 * @version 0.28.0
 */
class PostCompile200Response {
    /**
     * Constructs a new <code>PostCompile200Response</code>.
     * @alias module:model/PostCompile200Response
     * @implements module:model/Model200Result
     * @implements module:model/Model200Metrics
     * @implements module:model/Model200Explanations
     */
    constructor() { 
        Model200Result.initialize(this);Model200Metrics.initialize(this);Model200Explanations.initialize(this);
        PostCompile200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostCompile200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostCompile200Response} obj Optional instance to populate.
     * @return {module:model/PostCompile200Response} The populated <code>PostCompile200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostCompile200Response();
            Model200Result.constructFromObject(data, obj);
            Model200Metrics.constructFromObject(data, obj);
            Model200Explanations.constructFromObject(data, obj);

            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], [Model200ResultResultInner]);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = Model200MetricsMetrics.constructFromObject(data['metrics']);
            }
            if (data.hasOwnProperty('explanation')) {
                obj['explanation'] = ApiClient.convertToType(data['explanation'], [Model200ExplanationsExplanationInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostCompile200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostCompile200Response</code>.
     */
    static validateJSON(data) {
        if (data['result']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['result'])) {
                throw new Error("Expected the field `result` to be an array in the JSON data but got " + data['result']);
            }
            // validate the optional field `result` (array)
            for (const item of data['result']) {
                Model200ResultResultInner.validateJSON(item);
            };
        }
        // validate the optional field `metrics`
        if (data['metrics']) { // data not null
          Model200MetricsMetrics.validateJSON(data['metrics']);
        }
        if (data['explanation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['explanation'])) {
                throw new Error("Expected the field `explanation` to be an array in the JSON data but got " + data['explanation']);
            }
            // validate the optional field `explanation` (array)
            for (const item of data['explanation']) {
                Model200ExplanationsExplanationInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Model200ResultResultInner>} result
 */
PostCompile200Response.prototype['result'] = undefined;

/**
 * @member {module:model/Model200MetricsMetrics} metrics
 */
PostCompile200Response.prototype['metrics'] = undefined;

/**
 * @member {Array.<module:model/Model200ExplanationsExplanationInner>} explanation
 */
PostCompile200Response.prototype['explanation'] = undefined;


// Implement Model200Result interface:
/**
 * @member {Array.<module:model/Model200ResultResultInner>} result
 */
Model200Result.prototype['result'] = undefined;
// Implement Model200Metrics interface:
/**
 * @member {module:model/Model200MetricsMetrics} metrics
 */
Model200Metrics.prototype['metrics'] = undefined;
// Implement Model200Explanations interface:
/**
 * @member {Array.<module:model/Model200ExplanationsExplanationInner>} explanation
 */
Model200Explanations.prototype['explanation'] = undefined;




export default PostCompile200Response;

