/**
 * Open Policy Agent (OPA) REST API
 * OPA provides policy-based control for cloud native environments. The following *endpoints* (such as `PUT /v1/policies`) provide reference documentation for the OPA REST API.  ### API specification viewing options  - **[View the specification in *Redoc* (default)](index.html)** - **[View the specification in *Swagger UI*](swagger-ui.html)**
 *
 * The version of the OpenAPI document: 0.28.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchesSchemaInner model module.
 * @module model/PatchesSchemaInner
 * @version 0.28.0
 */
class PatchesSchemaInner {
    /**
     * Constructs a new <code>PatchesSchemaInner</code>.
     * A JSON patch operation
     * @alias module:model/PatchesSchemaInner
     * @param op {module:model/PatchesSchemaInner.OpEnum} JSON patch operation type
     * @param path {String} A [JSON pointer](https://tools.ietf.org/html/rfc6901) to a location within the target document where the operation is performed.  The *effective path* is this value prefixed with the API call's `path` parameter.  The server will return a *bad request* (404) response if:  - The *parent* of the effective path does not refer to an existing document - For **remove** and **replace** operations, the effective path does not refer to an existing document.
     */
    constructor(op, path) { 
        
        PatchesSchemaInner.initialize(this, op, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, op, path) { 
        obj['op'] = op;
        obj['path'] = path;
    }

    /**
     * Constructs a <code>PatchesSchemaInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchesSchemaInner} obj Optional instance to populate.
     * @return {module:model/PatchesSchemaInner} The populated <code>PatchesSchemaInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchesSchemaInner();

            if (data.hasOwnProperty('op')) {
                obj['op'] = ApiClient.convertToType(data['op'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchesSchemaInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchesSchemaInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PatchesSchemaInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['op'] && !(typeof data['op'] === 'string' || data['op'] instanceof String)) {
            throw new Error("Expected the field `op` to be a primitive type in the JSON string but got " + data['op']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}

PatchesSchemaInner.RequiredProperties = ["op", "path"];

/**
 * JSON patch operation type
 * @member {module:model/PatchesSchemaInner.OpEnum} op
 */
PatchesSchemaInner.prototype['op'] = undefined;

/**
 * A [JSON pointer](https://tools.ietf.org/html/rfc6901) to a location within the target document where the operation is performed.  The *effective path* is this value prefixed with the API call's `path` parameter.  The server will return a *bad request* (404) response if:  - The *parent* of the effective path does not refer to an existing document - For **remove** and **replace** operations, the effective path does not refer to an existing document.
 * @member {String} path
 */
PatchesSchemaInner.prototype['path'] = undefined;

/**
 * The value to add, replace or test.
 * @member {Object.<String, Object>} value
 */
PatchesSchemaInner.prototype['value'] = undefined;





/**
 * Allowed values for the <code>op</code> property.
 * @enum {String}
 * @readonly
 */
PatchesSchemaInner['OpEnum'] = {

    /**
     * value: "add"
     * @const
     */
    "add": "add",

    /**
     * value: "remove"
     * @const
     */
    "remove": "remove",

    /**
     * value: "replace"
     * @const
     */
    "replace": "replace",

    /**
     * value: "move"
     * @const
     */
    "move": "move",

    /**
     * value: "copy"
     * @const
     */
    "copy": "copy",

    /**
     * value: "test"
     * @const
     */
    "test": "test"
};



export default PatchesSchemaInner;

