/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GoogleHome);
  }
}(this, function(expect, GoogleHome) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GoogleHome.Capabilities();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Capabilities', function() {
    it('should create an instance of Capabilities', function() {
      // uncomment below and update the code to test Capabilities
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be.a(GoogleHome.Capabilities);
    });

    it('should have the property aoghSupported (base name: "aogh_supported")', function() {
      // uncomment below and update the code to test the property aoghSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property assistantSupported (base name: "assistant_supported")', function() {
      // uncomment below and update the code to test the property assistantSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property audioHdrSupported (base name: "audio_hdr_supported")', function() {
      // uncomment below and update the code to test the property audioHdrSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property audioSurroundModeSupported (base name: "audio_surround_mode_supported")', function() {
      // uncomment below and update the code to test the property audioSurroundModeSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property bleSupported (base name: "ble_supported")', function() {
      // uncomment below and update the code to test the property bleSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property bluetoothAudioSinkSupported (base name: "bluetooth_audio_sink_supported")', function() {
      // uncomment below and update the code to test the property bluetoothAudioSinkSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property bluetoothAudioSourceSupported (base name: "bluetooth_audio_source_supported")', function() {
      // uncomment below and update the code to test the property bluetoothAudioSourceSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property bluetoothSupported (base name: "bluetooth_supported")', function() {
      // uncomment below and update the code to test the property bluetoothSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property cloudcastSupported (base name: "cloudcast_supported")', function() {
      // uncomment below and update the code to test the property cloudcastSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property contentFiltersSupported (base name: "content_filters_supported")', function() {
      // uncomment below and update the code to test the property contentFiltersSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property displaySupported (base name: "display_supported")', function() {
      // uncomment below and update the code to test the property displaySupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property fdrSupported (base name: "fdr_supported")', function() {
      // uncomment below and update the code to test the property fdrSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property hdmiPrefer50hzSupported (base name: "hdmi_prefer_50hz_supported")', function() {
      // uncomment below and update the code to test the property hdmiPrefer50hzSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property hdmiPreferHighFpsSupported (base name: "hdmi_prefer_high_fps_supported")', function() {
      // uncomment below and update the code to test the property hdmiPreferHighFpsSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property hotspotSupported (base name: "hotspot_supported")', function() {
      // uncomment below and update the code to test the property hotspotSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property httpsSetupSupported (base name: "https_setup_supported")', function() {
      // uncomment below and update the code to test the property httpsSetupSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property inputManagementSupported (base name: "input_management_supported")', function() {
      // uncomment below and update the code to test the property inputManagementSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property keepHotspotUntilConnectedSupported (base name: "keep_hotspot_until_connected_supported")', function() {
      // uncomment below and update the code to test the property keepHotspotUntilConnectedSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property multiUserSupported (base name: "multi_user_supported")', function() {
      // uncomment below and update the code to test the property multiUserSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property multichannelGroupSupported (base name: "multichannel_group_supported")', function() {
      // uncomment below and update the code to test the property multichannelGroupSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property multizoneSupported (base name: "multizone_supported")', function() {
      // uncomment below and update the code to test the property multizoneSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property nightModeSupported (base name: "night_mode_supported")', function() {
      // uncomment below and update the code to test the property nightModeSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property nightModeSupportedV2 (base name: "night_mode_supported_v2")', function() {
      // uncomment below and update the code to test the property nightModeSupportedV2
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property opencastSupported (base name: "opencast_supported")', function() {
      // uncomment below and update the code to test the property opencastSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property previewChannelSupported (base name: "preview_channel_supported")', function() {
      // uncomment below and update the code to test the property previewChannelSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property rebootSupported (base name: "reboot_supported")', function() {
      // uncomment below and update the code to test the property rebootSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property remoteDuckingSupported (base name: "remote_ducking_supported")', function() {
      // uncomment below and update the code to test the property remoteDuckingSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property separateTtsVolumeSupported (base name: "separate_tts_volume_supported")', function() {
      // uncomment below and update the code to test the property separateTtsVolumeSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property setupSupported (base name: "setup_supported")', function() {
      // uncomment below and update the code to test the property setupSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property sleepModeSupported (base name: "sleep_mode_supported")', function() {
      // uncomment below and update the code to test the property sleepModeSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property statsSupported (base name: "stats_supported")', function() {
      // uncomment below and update the code to test the property statsSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property systemSoundEffectsSupported (base name: "system_sound_effects_supported")', function() {
      // uncomment below and update the code to test the property systemSoundEffectsSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property userEqSupported (base name: "user_eq_supported")', function() {
      // uncomment below and update the code to test the property userEqSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property wifiAutoSaveSupported (base name: "wifi_auto_save_supported")', function() {
      // uncomment below and update the code to test the property wifiAutoSaveSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property wifiRegulatoryDomainLocked (base name: "wifi_regulatory_domain_locked")', function() {
      // uncomment below and update the code to test the property wifiRegulatoryDomainLocked
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

    it('should have the property wifiSupported (base name: "wifi_supported")', function() {
      // uncomment below and update the code to test the property wifiSupported
      //var instance = new GoogleHome.Capabilities();
      //expect(instance).to.be();
    });

  });

}));
