/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessibilityRequest from '../model/AccessibilityRequest';
import AlarmVolumeRequest from '../model/AlarmVolumeRequest';
import DeleteAlarmsandTimersRequest from '../model/DeleteAlarmsandTimersRequest';
import Example18 from '../model/Example18';
import Example19 from '../model/Example19';
import Getcurrentstate from '../model/Getcurrentstate';
import Getcurrentvalues from '../model/Getcurrentvalues';
import Getvolume from '../model/Getvolume';
import SetEqualizerValuesRequest from '../model/SetEqualizerValuesRequest';

/**
* Assistant service.
* @module api/AssistantApi
* @version 2.0
*/
export default class AssistantApi {

    /**
    * Constructs a new AssistantApi. 
    * @alias module:api/AssistantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accessibility operation.
     * @callback module:api/AssistantApi~accessibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getcurrentvalues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accessibility
     * This controls Accessibility sounds. `hotword_enabled` is for 'Play start sound' and `endpoint_enabled` is for 'Play end sound'.   Sending an empty-body POST request returns the current values.   Either of the fields or both can be sent and new values will be saved.
     * @param {module:model/AccessibilityRequest} accessibilityRequest 
     * @param {module:api/AssistantApi~accessibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getcurrentvalues}
     */
    accessibility(accessibilityRequest, callback) {
      let postBody = accessibilityRequest;
      // verify the required parameter 'accessibilityRequest' is set
      if (accessibilityRequest === undefined || accessibilityRequest === null) {
        throw new Error("Missing the required parameter 'accessibilityRequest' when calling accessibility");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Getcurrentvalues;
      return this.apiClient.callApi(
        '/assistant/a11y_mode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alarmVolume operation.
     * @callback module:api/AssistantApi~alarmVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getvolume} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Alarm Volume
     * This gets and sets alarms and timers volume.   **Note:** This is not the same as normal volume.  Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.   Sending an empty body gets the volume. Sending `volume` sets the volume.
     * @param {module:model/AlarmVolumeRequest} alarmVolumeRequest 
     * @param {module:api/AssistantApi~alarmVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getvolume}
     */
    alarmVolume(alarmVolumeRequest, callback) {
      let postBody = alarmVolumeRequest;
      // verify the required parameter 'alarmVolumeRequest' is set
      if (alarmVolumeRequest === undefined || alarmVolumeRequest === null) {
        throw new Error("Missing the required parameter 'alarmVolumeRequest' when calling alarmVolume");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Getvolume;
      return this.apiClient.callApi(
        '/assistant/alarms/volume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlarmsandTimers operation.
     * @callback module:api/AssistantApi~deleteAlarmsandTimersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Example19} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Alarms and Timers
     * This deletes alarms and timers by their id.  `ids` is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The `/` in the ids have to be escaped like `/`.
     * @param {module:model/DeleteAlarmsandTimersRequest} deleteAlarmsandTimersRequest 
     * @param {module:api/AssistantApi~deleteAlarmsandTimersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Example19}
     */
    deleteAlarmsandTimers(deleteAlarmsandTimersRequest, callback) {
      let postBody = deleteAlarmsandTimersRequest;
      // verify the required parameter 'deleteAlarmsandTimersRequest' is set
      if (deleteAlarmsandTimersRequest === undefined || deleteAlarmsandTimersRequest === null) {
        throw new Error("Missing the required parameter 'deleteAlarmsandTimersRequest' when calling deleteAlarmsandTimers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Example19;
      return this.apiClient.callApi(
        '/assistant/alarms/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doNotDisturb operation.
     * @callback module:api/AssistantApi~doNotDisturbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getcurrentstate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Do Not Disturb
     * This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.
     * @param {String} contentType 
     * @param {module:api/AssistantApi~doNotDisturbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getcurrentstate}
     */
    doNotDisturb(contentType, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling doNotDisturb");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getcurrentstate;
      return this.apiClient.callApi(
        '/assistant/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlarmsandTimers operation.
     * @callback module:api/AssistantApi~getAlarmsandTimersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Example18} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Alarms and Timers
     * This gives a list of all active alarms and timers.  Both alarms and timers have `id`s which can be used to delete them. (There is no known way of creating/deleting yet). The value of `status` have different meanings for alarms and timers (given below).  Alarms have `date_pattern` and `time_pattern` with day, month, year, hour, minute, second. `fire_time` is the same in unix time (milliseconds, not seconds).   `status` is 1 for set up and 2 for ringing.  Timers have `original_duration` is the original duration.   `status` is 1 for set up and 3 for ringing.
     * @param {module:api/AssistantApi~getAlarmsandTimersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Example18}
     */
    getAlarmsandTimers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Example18;
      return this.apiClient.callApi(
        '/assistant/alarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setEqualizerValues operation.
     * @callback module:api/AssistantApi~setEqualizerValuesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Equalizer Values
     * This can only set new equalizer values. To get already set values, use /setup/eureka_info.  The body is mandatory. It can either contain `low_shelf` or `high_shelf` or both.  `low_shelf.gain_db` and `high_shelf.gain_db` refer to **bass** and **treble** respectively.  Default values are 0 for both.   While the slider in the Home app only ranges from -6 to +6, they can be set to any integer like 50 or -100. These changes persist.
     * @param {module:model/SetEqualizerValuesRequest} setEqualizerValuesRequest 
     * @param {module:api/AssistantApi~setEqualizerValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setEqualizerValues(setEqualizerValuesRequest, callback) {
      let postBody = setEqualizerValuesRequest;
      // verify the required parameter 'setEqualizerValuesRequest' is set
      if (setEqualizerValuesRequest === undefined || setEqualizerValuesRequest === null) {
        throw new Error("Missing the required parameter 'setEqualizerValuesRequest' when calling setEqualizerValues");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/user_eq/set_equalizer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
