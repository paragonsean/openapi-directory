/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeDiscoverabilityRequest from '../model/ChangeDiscoverabilityRequest';
import Example110 from '../model/Example110';
import Example111 from '../model/Example111';
import Example112 from '../model/Example112';
import ForgetpaireddeviceRequest from '../model/ForgetpaireddeviceRequest';
import PairwithSpeakerRequest from '../model/PairwithSpeakerRequest';
import ScanfordevicesRequest from '../model/ScanfordevicesRequest';

/**
* Bluetooth service.
* @module api/BluetoothApi
* @version 2.0
*/
export default class BluetoothApi {

    /**
    * Constructs a new BluetoothApi. 
    * @alias module:api/BluetoothApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeDiscoverability operation.
     * @callback module:api/BluetoothApi~changeDiscoverabilityCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Discoverability
     * *See note for Bluetooth under `/setup/bluetooth/status`*  **For Part 1 only**  This enables/disables Home's bluetooth discovery and other devices can pair with Home (where Home acts as a speaker).
     * @param {module:model/ChangeDiscoverabilityRequest} changeDiscoverabilityRequest 
     * @param {module:api/BluetoothApi~changeDiscoverabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    changeDiscoverability(changeDiscoverabilityRequest, callback) {
      let postBody = changeDiscoverabilityRequest;
      // verify the required parameter 'changeDiscoverabilityRequest' is set
      if (changeDiscoverabilityRequest === undefined || changeDiscoverabilityRequest === null) {
        throw new Error("Missing the required parameter 'changeDiscoverabilityRequest' when calling changeDiscoverability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bluetooth/discovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgetpaireddevice operation.
     * @callback module:api/BluetoothApi~forgetpaireddeviceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forget paired device
     * *See note for Bluetooth under `/setup/bluetooth/status`*  **For both parts**  This is to forget paired devices by mac address. Works for both kinds of devices (Part 1 and Part 2).
     * @param {module:model/ForgetpaireddeviceRequest} forgetpaireddeviceRequest 
     * @param {module:api/BluetoothApi~forgetpaireddeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    forgetpaireddevice(forgetpaireddeviceRequest, callback) {
      let postBody = forgetpaireddeviceRequest;
      // verify the required parameter 'forgetpaireddeviceRequest' is set
      if (forgetpaireddeviceRequest === undefined || forgetpaireddeviceRequest === null) {
        throw new Error("Missing the required parameter 'forgetpaireddeviceRequest' when calling forgetpaireddevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bluetooth/bond', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPairedDevices operation.
     * @callback module:api/BluetoothApi~getPairedDevicesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Example111>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Paired Devices
     * *See note for Bluetooth under `/setup/bluetooth/status`*  **For both parts**  This gives a list of all paired or 'bonded' devices. The response field names are self-descriptive.
     * @param {module:api/BluetoothApi~getPairedDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Example111>}
     */
    getPairedDevices(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Example111];
      return this.apiClient.callApi(
        '/bluetooth/get_bonded', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScanResults operation.
     * @callback module:api/BluetoothApi~getScanResultsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Example112>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Scan Results
     * *See note for Bluetooth under `/setup/bluetooth/status`*  **For Part 2 only**  This returns a list of all nearby bluetooth devices. While the Home app only shows speakers, this list contains all devices including TVs, mobiles, etc.  `rssi` is signal strength, `name` is name, `mac_address` is mac address.   `device_class` and `device_type` are bluetooth codes.    The Home app only lists those devices with `expected_profiles` > 0. Basically, the device should function as a speaker.
     * @param {module:api/BluetoothApi~getScanResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Example112>}
     */
    getScanResults(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Example112];
      return this.apiClient.callApi(
        '/bluetooth/scan_results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pairwithSpeaker operation.
     * @callback module:api/BluetoothApi~pairwithSpeakerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pair with Speaker
     * *See note for Bluetooth under `/setup/bluetooth/status`*  **For Part 2 only**  This pairs with other bluetooth speakers by mac address.
     * @param {module:model/PairwithSpeakerRequest} pairwithSpeakerRequest 
     * @param {module:api/BluetoothApi~pairwithSpeakerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    pairwithSpeaker(pairwithSpeakerRequest, callback) {
      let postBody = pairwithSpeakerRequest;
      // verify the required parameter 'pairwithSpeakerRequest' is set
      if (pairwithSpeakerRequest === undefined || pairwithSpeakerRequest === null) {
        throw new Error("Missing the required parameter 'pairwithSpeakerRequest' when calling pairwithSpeaker");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bluetooth/connect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scanfordevices operation.
     * @callback module:api/BluetoothApi~scanfordevicesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scan for devices
     * *See note for Bluetooth under `/setup/bluetooth/status`*  **For Part 2 only**  This initiates scan for other bluetooth speakers/devices. Scan results will be updated continuously for `timeout` seconds.   To get the scan results, see /setup/bluetooth/scan_results.
     * @param {module:model/ScanfordevicesRequest} scanfordevicesRequest 
     * @param {module:api/BluetoothApi~scanfordevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    scanfordevices(scanfordevicesRequest, callback) {
      let postBody = scanfordevicesRequest;
      // verify the required parameter 'scanfordevicesRequest' is set
      if (scanfordevicesRequest === undefined || scanfordevicesRequest === null) {
        throw new Error("Missing the required parameter 'scanfordevicesRequest' when calling scanfordevices");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/bluetooth/scan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the status operation.
     * @callback module:api/BluetoothApi~statusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Example110} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status
     * > **There are 2 parts of Bluetooth.** > > *Part 1*: Devices like phones connect to Home and play audio through Home.   > For this, /setup/bluetooth/discovery is used to make Home discoverable. Then devices can connect to it as if Home is just another bluetooth speaker. > > *Part 2*: Bluetooth speakers connect to Home and Home plays audio through the speakers. > For this, /setup/bluetooth/scan and /setup/bluetooth/scan_results are used to connect to other speakers. > > The other endpoints are common for both parts.   **For both parts**  This gives the status of all bluetooth things. - Not sure what `audio_mode` is. - `discovery_enabled` states whether Home is discoverable. (**Part 1**) - `connecting_devices` is a list of all media sources (like phones) connected to Home. (**Part 1**) - `scanning_enabled` states whether Home scanning for other bluetooth speakers/devices. (**Part 2**) - `connected_devices` is a list of all speakers connected to Home. (**Part 2**)
     * @param {module:api/BluetoothApi~statusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Example110}
     */
    status(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cast-local-authorization-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Example110;
      return this.apiClient.callApi(
        '/bluetooth/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
