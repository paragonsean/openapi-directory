/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Capabilities from './Capabilities';

/**
 * The DeviceInfo model module.
 * @module model/DeviceInfo
 * @version 2.0
 */
class DeviceInfo {
    /**
     * Constructs a new <code>DeviceInfo</code>.
     * @alias module:model/DeviceInfo
     * @param _4kBlocked {Number} 
     * @param capabilities {module:model/Capabilities} 
     * @param cloudDeviceId {String} 
     * @param factoryCountryCode {String} 
     * @param hotspotBssid {String} 
     * @param localAuthorizationTokenHash {String} 
     * @param macAddress {String} 
     * @param manufacturer {String} 
     * @param modelName {String} 
     * @param productName {String} 
     * @param publicKey {String} 
     * @param ssdpUdn {String} 
     * @param umaClientId {String} 
     * @param uptime {Number} 
     * @param weaveDeviceId {String} 
     */
    constructor(_4kBlocked, capabilities, cloudDeviceId, factoryCountryCode, hotspotBssid, localAuthorizationTokenHash, macAddress, manufacturer, modelName, productName, publicKey, ssdpUdn, umaClientId, uptime, weaveDeviceId) { 
        
        DeviceInfo.initialize(this, _4kBlocked, capabilities, cloudDeviceId, factoryCountryCode, hotspotBssid, localAuthorizationTokenHash, macAddress, manufacturer, modelName, productName, publicKey, ssdpUdn, umaClientId, uptime, weaveDeviceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, _4kBlocked, capabilities, cloudDeviceId, factoryCountryCode, hotspotBssid, localAuthorizationTokenHash, macAddress, manufacturer, modelName, productName, publicKey, ssdpUdn, umaClientId, uptime, weaveDeviceId) { 
        obj['4k_blocked'] = _4kBlocked;
        obj['capabilities'] = capabilities;
        obj['cloud_device_id'] = cloudDeviceId;
        obj['factory_country_code'] = factoryCountryCode;
        obj['hotspot_bssid'] = hotspotBssid;
        obj['local_authorization_token_hash'] = localAuthorizationTokenHash;
        obj['mac_address'] = macAddress;
        obj['manufacturer'] = manufacturer;
        obj['model_name'] = modelName;
        obj['product_name'] = productName;
        obj['public_key'] = publicKey;
        obj['ssdp_udn'] = ssdpUdn;
        obj['uma_client_id'] = umaClientId;
        obj['uptime'] = uptime;
        obj['weave_device_id'] = weaveDeviceId;
    }

    /**
     * Constructs a <code>DeviceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceInfo} obj Optional instance to populate.
     * @return {module:model/DeviceInfo} The populated <code>DeviceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceInfo();

            if (data.hasOwnProperty('4k_blocked')) {
                obj['4k_blocked'] = ApiClient.convertToType(data['4k_blocked'], 'Number');
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = Capabilities.constructFromObject(data['capabilities']);
            }
            if (data.hasOwnProperty('cloud_device_id')) {
                obj['cloud_device_id'] = ApiClient.convertToType(data['cloud_device_id'], 'String');
            }
            if (data.hasOwnProperty('factory_country_code')) {
                obj['factory_country_code'] = ApiClient.convertToType(data['factory_country_code'], 'String');
            }
            if (data.hasOwnProperty('hotspot_bssid')) {
                obj['hotspot_bssid'] = ApiClient.convertToType(data['hotspot_bssid'], 'String');
            }
            if (data.hasOwnProperty('local_authorization_token_hash')) {
                obj['local_authorization_token_hash'] = ApiClient.convertToType(data['local_authorization_token_hash'], 'String');
            }
            if (data.hasOwnProperty('mac_address')) {
                obj['mac_address'] = ApiClient.convertToType(data['mac_address'], 'String');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('model_name')) {
                obj['model_name'] = ApiClient.convertToType(data['model_name'], 'String');
            }
            if (data.hasOwnProperty('product_name')) {
                obj['product_name'] = ApiClient.convertToType(data['product_name'], 'String');
            }
            if (data.hasOwnProperty('public_key')) {
                obj['public_key'] = ApiClient.convertToType(data['public_key'], 'String');
            }
            if (data.hasOwnProperty('ssdp_udn')) {
                obj['ssdp_udn'] = ApiClient.convertToType(data['ssdp_udn'], 'String');
            }
            if (data.hasOwnProperty('uma_client_id')) {
                obj['uma_client_id'] = ApiClient.convertToType(data['uma_client_id'], 'String');
            }
            if (data.hasOwnProperty('uptime')) {
                obj['uptime'] = ApiClient.convertToType(data['uptime'], 'Number');
            }
            if (data.hasOwnProperty('weave_device_id')) {
                obj['weave_device_id'] = ApiClient.convertToType(data['weave_device_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `capabilities`
        if (data['capabilities']) { // data not null
          Capabilities.validateJSON(data['capabilities']);
        }
        // ensure the json data is a string
        if (data['cloud_device_id'] && !(typeof data['cloud_device_id'] === 'string' || data['cloud_device_id'] instanceof String)) {
            throw new Error("Expected the field `cloud_device_id` to be a primitive type in the JSON string but got " + data['cloud_device_id']);
        }
        // ensure the json data is a string
        if (data['factory_country_code'] && !(typeof data['factory_country_code'] === 'string' || data['factory_country_code'] instanceof String)) {
            throw new Error("Expected the field `factory_country_code` to be a primitive type in the JSON string but got " + data['factory_country_code']);
        }
        // ensure the json data is a string
        if (data['hotspot_bssid'] && !(typeof data['hotspot_bssid'] === 'string' || data['hotspot_bssid'] instanceof String)) {
            throw new Error("Expected the field `hotspot_bssid` to be a primitive type in the JSON string but got " + data['hotspot_bssid']);
        }
        // ensure the json data is a string
        if (data['local_authorization_token_hash'] && !(typeof data['local_authorization_token_hash'] === 'string' || data['local_authorization_token_hash'] instanceof String)) {
            throw new Error("Expected the field `local_authorization_token_hash` to be a primitive type in the JSON string but got " + data['local_authorization_token_hash']);
        }
        // ensure the json data is a string
        if (data['mac_address'] && !(typeof data['mac_address'] === 'string' || data['mac_address'] instanceof String)) {
            throw new Error("Expected the field `mac_address` to be a primitive type in the JSON string but got " + data['mac_address']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['model_name'] && !(typeof data['model_name'] === 'string' || data['model_name'] instanceof String)) {
            throw new Error("Expected the field `model_name` to be a primitive type in the JSON string but got " + data['model_name']);
        }
        // ensure the json data is a string
        if (data['product_name'] && !(typeof data['product_name'] === 'string' || data['product_name'] instanceof String)) {
            throw new Error("Expected the field `product_name` to be a primitive type in the JSON string but got " + data['product_name']);
        }
        // ensure the json data is a string
        if (data['public_key'] && !(typeof data['public_key'] === 'string' || data['public_key'] instanceof String)) {
            throw new Error("Expected the field `public_key` to be a primitive type in the JSON string but got " + data['public_key']);
        }
        // ensure the json data is a string
        if (data['ssdp_udn'] && !(typeof data['ssdp_udn'] === 'string' || data['ssdp_udn'] instanceof String)) {
            throw new Error("Expected the field `ssdp_udn` to be a primitive type in the JSON string but got " + data['ssdp_udn']);
        }
        // ensure the json data is a string
        if (data['uma_client_id'] && !(typeof data['uma_client_id'] === 'string' || data['uma_client_id'] instanceof String)) {
            throw new Error("Expected the field `uma_client_id` to be a primitive type in the JSON string but got " + data['uma_client_id']);
        }
        // ensure the json data is a string
        if (data['weave_device_id'] && !(typeof data['weave_device_id'] === 'string' || data['weave_device_id'] instanceof String)) {
            throw new Error("Expected the field `weave_device_id` to be a primitive type in the JSON string but got " + data['weave_device_id']);
        }

        return true;
    }


}

DeviceInfo.RequiredProperties = ["4k_blocked", "capabilities", "cloud_device_id", "factory_country_code", "hotspot_bssid", "local_authorization_token_hash", "mac_address", "manufacturer", "model_name", "product_name", "public_key", "ssdp_udn", "uma_client_id", "uptime", "weave_device_id"];

/**
 * @member {Number} 4k_blocked
 */
DeviceInfo.prototype['4k_blocked'] = undefined;

/**
 * @member {module:model/Capabilities} capabilities
 */
DeviceInfo.prototype['capabilities'] = undefined;

/**
 * @member {String} cloud_device_id
 */
DeviceInfo.prototype['cloud_device_id'] = undefined;

/**
 * @member {String} factory_country_code
 */
DeviceInfo.prototype['factory_country_code'] = undefined;

/**
 * @member {String} hotspot_bssid
 */
DeviceInfo.prototype['hotspot_bssid'] = undefined;

/**
 * @member {String} local_authorization_token_hash
 */
DeviceInfo.prototype['local_authorization_token_hash'] = undefined;

/**
 * @member {String} mac_address
 */
DeviceInfo.prototype['mac_address'] = undefined;

/**
 * @member {String} manufacturer
 */
DeviceInfo.prototype['manufacturer'] = undefined;

/**
 * @member {String} model_name
 */
DeviceInfo.prototype['model_name'] = undefined;

/**
 * @member {String} product_name
 */
DeviceInfo.prototype['product_name'] = undefined;

/**
 * @member {String} public_key
 */
DeviceInfo.prototype['public_key'] = undefined;

/**
 * @member {String} ssdp_udn
 */
DeviceInfo.prototype['ssdp_udn'] = undefined;

/**
 * @member {String} uma_client_id
 */
DeviceInfo.prototype['uma_client_id'] = undefined;

/**
 * @member {Number} uptime
 */
DeviceInfo.prototype['uptime'] = undefined;

/**
 * @member {String} weave_device_id
 */
DeviceInfo.prototype['weave_device_id'] = undefined;






export default DeviceInfo;

