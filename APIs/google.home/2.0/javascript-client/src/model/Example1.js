/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Aogh from './Aogh';
import Audio from './Audio';
import BuildInfo from './BuildInfo';
import Detail from './Detail';
import DeviceInfo from './DeviceInfo';
import Multizone from './Multizone';
import Net from './Net';
import NightModeParams from './NightModeParams';
import Opencast from './Opencast';
import OptIn from './OptIn';
import Proxy from './Proxy';
import Settings from './Settings';
import Setup from './Setup';
import Sign from './Sign';
import UserEq from './UserEq';
import Wifi from './Wifi';

/**
 * The Example1 model module.
 * @module model/Example1
 * @version 2.0
 */
class Example1 {
    /**
     * Constructs a new <code>Example1</code>.
     * @alias module:model/Example1
     * @param aogh {module:model/Aogh} 
     * @param audio {module:model/Audio} 
     * @param buildInfo {module:model/BuildInfo} 
     * @param detail {module:model/Detail} 
     * @param deviceInfo {module:model/DeviceInfo} 
     * @param multizone {module:model/Multizone} 
     * @param name {String} 
     * @param net {module:model/Net} 
     * @param nightModeParams {module:model/NightModeParams} 
     * @param opencast {module:model/Opencast} 
     * @param optIn {module:model/OptIn} 
     * @param proxy {module:model/Proxy} 
     * @param settings {module:model/Settings} 
     * @param setup {module:model/Setup} 
     * @param sign {module:model/Sign} 
     * @param userEq {module:model/UserEq} 
     * @param version {Number} 
     * @param wifi {module:model/Wifi} 
     */
    constructor(aogh, audio, buildInfo, detail, deviceInfo, multizone, name, net, nightModeParams, opencast, optIn, proxy, settings, setup, sign, userEq, version, wifi) { 
        
        Example1.initialize(this, aogh, audio, buildInfo, detail, deviceInfo, multizone, name, net, nightModeParams, opencast, optIn, proxy, settings, setup, sign, userEq, version, wifi);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aogh, audio, buildInfo, detail, deviceInfo, multizone, name, net, nightModeParams, opencast, optIn, proxy, settings, setup, sign, userEq, version, wifi) { 
        obj['aogh'] = aogh;
        obj['audio'] = audio;
        obj['build_info'] = buildInfo;
        obj['detail'] = detail;
        obj['device_info'] = deviceInfo;
        obj['multizone'] = multizone;
        obj['name'] = name;
        obj['net'] = net;
        obj['night_mode_params'] = nightModeParams;
        obj['opencast'] = opencast;
        obj['opt_in'] = optIn;
        obj['proxy'] = proxy;
        obj['settings'] = settings;
        obj['setup'] = setup;
        obj['sign'] = sign;
        obj['user_eq'] = userEq;
        obj['version'] = version;
        obj['wifi'] = wifi;
    }

    /**
     * Constructs a <code>Example1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Example1} obj Optional instance to populate.
     * @return {module:model/Example1} The populated <code>Example1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Example1();

            if (data.hasOwnProperty('aogh')) {
                obj['aogh'] = Aogh.constructFromObject(data['aogh']);
            }
            if (data.hasOwnProperty('audio')) {
                obj['audio'] = Audio.constructFromObject(data['audio']);
            }
            if (data.hasOwnProperty('build_info')) {
                obj['build_info'] = BuildInfo.constructFromObject(data['build_info']);
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = Detail.constructFromObject(data['detail']);
            }
            if (data.hasOwnProperty('device_info')) {
                obj['device_info'] = DeviceInfo.constructFromObject(data['device_info']);
            }
            if (data.hasOwnProperty('multizone')) {
                obj['multizone'] = Multizone.constructFromObject(data['multizone']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('net')) {
                obj['net'] = Net.constructFromObject(data['net']);
            }
            if (data.hasOwnProperty('night_mode_params')) {
                obj['night_mode_params'] = NightModeParams.constructFromObject(data['night_mode_params']);
            }
            if (data.hasOwnProperty('opencast')) {
                obj['opencast'] = Opencast.constructFromObject(data['opencast']);
            }
            if (data.hasOwnProperty('opt_in')) {
                obj['opt_in'] = OptIn.constructFromObject(data['opt_in']);
            }
            if (data.hasOwnProperty('proxy')) {
                obj['proxy'] = Proxy.constructFromObject(data['proxy']);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = Settings.constructFromObject(data['settings']);
            }
            if (data.hasOwnProperty('setup')) {
                obj['setup'] = Setup.constructFromObject(data['setup']);
            }
            if (data.hasOwnProperty('sign')) {
                obj['sign'] = Sign.constructFromObject(data['sign']);
            }
            if (data.hasOwnProperty('user_eq')) {
                obj['user_eq'] = UserEq.constructFromObject(data['user_eq']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('wifi')) {
                obj['wifi'] = Wifi.constructFromObject(data['wifi']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Example1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Example1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Example1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `aogh`
        if (data['aogh']) { // data not null
          Aogh.validateJSON(data['aogh']);
        }
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          Audio.validateJSON(data['audio']);
        }
        // validate the optional field `build_info`
        if (data['build_info']) { // data not null
          BuildInfo.validateJSON(data['build_info']);
        }
        // validate the optional field `detail`
        if (data['detail']) { // data not null
          Detail.validateJSON(data['detail']);
        }
        // validate the optional field `device_info`
        if (data['device_info']) { // data not null
          DeviceInfo.validateJSON(data['device_info']);
        }
        // validate the optional field `multizone`
        if (data['multizone']) { // data not null
          Multizone.validateJSON(data['multizone']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `net`
        if (data['net']) { // data not null
          Net.validateJSON(data['net']);
        }
        // validate the optional field `night_mode_params`
        if (data['night_mode_params']) { // data not null
          NightModeParams.validateJSON(data['night_mode_params']);
        }
        // validate the optional field `opencast`
        if (data['opencast']) { // data not null
          Opencast.validateJSON(data['opencast']);
        }
        // validate the optional field `opt_in`
        if (data['opt_in']) { // data not null
          OptIn.validateJSON(data['opt_in']);
        }
        // validate the optional field `proxy`
        if (data['proxy']) { // data not null
          Proxy.validateJSON(data['proxy']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          Settings.validateJSON(data['settings']);
        }
        // validate the optional field `setup`
        if (data['setup']) { // data not null
          Setup.validateJSON(data['setup']);
        }
        // validate the optional field `sign`
        if (data['sign']) { // data not null
          Sign.validateJSON(data['sign']);
        }
        // validate the optional field `user_eq`
        if (data['user_eq']) { // data not null
          UserEq.validateJSON(data['user_eq']);
        }
        // validate the optional field `wifi`
        if (data['wifi']) { // data not null
          Wifi.validateJSON(data['wifi']);
        }

        return true;
    }


}

Example1.RequiredProperties = ["aogh", "audio", "build_info", "detail", "device_info", "multizone", "name", "net", "night_mode_params", "opencast", "opt_in", "proxy", "settings", "setup", "sign", "user_eq", "version", "wifi"];

/**
 * @member {module:model/Aogh} aogh
 */
Example1.prototype['aogh'] = undefined;

/**
 * @member {module:model/Audio} audio
 */
Example1.prototype['audio'] = undefined;

/**
 * @member {module:model/BuildInfo} build_info
 */
Example1.prototype['build_info'] = undefined;

/**
 * @member {module:model/Detail} detail
 */
Example1.prototype['detail'] = undefined;

/**
 * @member {module:model/DeviceInfo} device_info
 */
Example1.prototype['device_info'] = undefined;

/**
 * @member {module:model/Multizone} multizone
 */
Example1.prototype['multizone'] = undefined;

/**
 * @member {String} name
 */
Example1.prototype['name'] = undefined;

/**
 * @member {module:model/Net} net
 */
Example1.prototype['net'] = undefined;

/**
 * @member {module:model/NightModeParams} night_mode_params
 */
Example1.prototype['night_mode_params'] = undefined;

/**
 * @member {module:model/Opencast} opencast
 */
Example1.prototype['opencast'] = undefined;

/**
 * @member {module:model/OptIn} opt_in
 */
Example1.prototype['opt_in'] = undefined;

/**
 * @member {module:model/Proxy} proxy
 */
Example1.prototype['proxy'] = undefined;

/**
 * @member {module:model/Settings} settings
 */
Example1.prototype['settings'] = undefined;

/**
 * @member {module:model/Setup} setup
 */
Example1.prototype['setup'] = undefined;

/**
 * @member {module:model/Sign} sign
 */
Example1.prototype['sign'] = undefined;

/**
 * @member {module:model/UserEq} user_eq
 */
Example1.prototype['user_eq'] = undefined;

/**
 * @member {Number} version
 */
Example1.prototype['version'] = undefined;

/**
 * @member {module:model/Wifi} wifi
 */
Example1.prototype['wifi'] = undefined;






export default Example1;

