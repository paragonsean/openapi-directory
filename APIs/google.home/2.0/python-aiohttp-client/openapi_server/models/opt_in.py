# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OptIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_hdr: bool=None, audio_surround_mode: int=None, autoplay_on_signal: bool=None, cloud_ipc: bool=None, hdmi_prefer_50hz: bool=None, hdmi_prefer_high_fps: bool=None, managed_mode: bool=None, opencast: bool=None, preview_channel: bool=None, remote_ducking: bool=None, stats: bool=None, ui_flipped: bool=None, wpa3_support_enabled: bool=None):
        """OptIn - a model defined in OpenAPI

        :param audio_hdr: The audio_hdr of this OptIn.
        :param audio_surround_mode: The audio_surround_mode of this OptIn.
        :param autoplay_on_signal: The autoplay_on_signal of this OptIn.
        :param cloud_ipc: The cloud_ipc of this OptIn.
        :param hdmi_prefer_50hz: The hdmi_prefer_50hz of this OptIn.
        :param hdmi_prefer_high_fps: The hdmi_prefer_high_fps of this OptIn.
        :param managed_mode: The managed_mode of this OptIn.
        :param opencast: The opencast of this OptIn.
        :param preview_channel: The preview_channel of this OptIn.
        :param remote_ducking: The remote_ducking of this OptIn.
        :param stats: The stats of this OptIn.
        :param ui_flipped: The ui_flipped of this OptIn.
        :param wpa3_support_enabled: The wpa3_support_enabled of this OptIn.
        """
        self.openapi_types = {
            'audio_hdr': bool,
            'audio_surround_mode': int,
            'autoplay_on_signal': bool,
            'cloud_ipc': bool,
            'hdmi_prefer_50hz': bool,
            'hdmi_prefer_high_fps': bool,
            'managed_mode': bool,
            'opencast': bool,
            'preview_channel': bool,
            'remote_ducking': bool,
            'stats': bool,
            'ui_flipped': bool,
            'wpa3_support_enabled': bool
        }

        self.attribute_map = {
            'audio_hdr': 'audio_hdr',
            'audio_surround_mode': 'audio_surround_mode',
            'autoplay_on_signal': 'autoplay_on_signal',
            'cloud_ipc': 'cloud_ipc',
            'hdmi_prefer_50hz': 'hdmi_prefer_50hz',
            'hdmi_prefer_high_fps': 'hdmi_prefer_high_fps',
            'managed_mode': 'managed_mode',
            'opencast': 'opencast',
            'preview_channel': 'preview_channel',
            'remote_ducking': 'remote_ducking',
            'stats': 'stats',
            'ui_flipped': 'ui_flipped',
            'wpa3_support_enabled': 'wpa3_support_enabled'
        }

        self._audio_hdr = audio_hdr
        self._audio_surround_mode = audio_surround_mode
        self._autoplay_on_signal = autoplay_on_signal
        self._cloud_ipc = cloud_ipc
        self._hdmi_prefer_50hz = hdmi_prefer_50hz
        self._hdmi_prefer_high_fps = hdmi_prefer_high_fps
        self._managed_mode = managed_mode
        self._opencast = opencast
        self._preview_channel = preview_channel
        self._remote_ducking = remote_ducking
        self._stats = stats
        self._ui_flipped = ui_flipped
        self._wpa3_support_enabled = wpa3_support_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptIn of this OptIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_hdr(self):
        """Gets the audio_hdr of this OptIn.


        :return: The audio_hdr of this OptIn.
        :rtype: bool
        """
        return self._audio_hdr

    @audio_hdr.setter
    def audio_hdr(self, audio_hdr):
        """Sets the audio_hdr of this OptIn.


        :param audio_hdr: The audio_hdr of this OptIn.
        :type audio_hdr: bool
        """
        if audio_hdr is None:
            raise ValueError("Invalid value for `audio_hdr`, must not be `None`")

        self._audio_hdr = audio_hdr

    @property
    def audio_surround_mode(self):
        """Gets the audio_surround_mode of this OptIn.


        :return: The audio_surround_mode of this OptIn.
        :rtype: int
        """
        return self._audio_surround_mode

    @audio_surround_mode.setter
    def audio_surround_mode(self, audio_surround_mode):
        """Sets the audio_surround_mode of this OptIn.


        :param audio_surround_mode: The audio_surround_mode of this OptIn.
        :type audio_surround_mode: int
        """
        if audio_surround_mode is None:
            raise ValueError("Invalid value for `audio_surround_mode`, must not be `None`")

        self._audio_surround_mode = audio_surround_mode

    @property
    def autoplay_on_signal(self):
        """Gets the autoplay_on_signal of this OptIn.


        :return: The autoplay_on_signal of this OptIn.
        :rtype: bool
        """
        return self._autoplay_on_signal

    @autoplay_on_signal.setter
    def autoplay_on_signal(self, autoplay_on_signal):
        """Sets the autoplay_on_signal of this OptIn.


        :param autoplay_on_signal: The autoplay_on_signal of this OptIn.
        :type autoplay_on_signal: bool
        """
        if autoplay_on_signal is None:
            raise ValueError("Invalid value for `autoplay_on_signal`, must not be `None`")

        self._autoplay_on_signal = autoplay_on_signal

    @property
    def cloud_ipc(self):
        """Gets the cloud_ipc of this OptIn.


        :return: The cloud_ipc of this OptIn.
        :rtype: bool
        """
        return self._cloud_ipc

    @cloud_ipc.setter
    def cloud_ipc(self, cloud_ipc):
        """Sets the cloud_ipc of this OptIn.


        :param cloud_ipc: The cloud_ipc of this OptIn.
        :type cloud_ipc: bool
        """
        if cloud_ipc is None:
            raise ValueError("Invalid value for `cloud_ipc`, must not be `None`")

        self._cloud_ipc = cloud_ipc

    @property
    def hdmi_prefer_50hz(self):
        """Gets the hdmi_prefer_50hz of this OptIn.


        :return: The hdmi_prefer_50hz of this OptIn.
        :rtype: bool
        """
        return self._hdmi_prefer_50hz

    @hdmi_prefer_50hz.setter
    def hdmi_prefer_50hz(self, hdmi_prefer_50hz):
        """Sets the hdmi_prefer_50hz of this OptIn.


        :param hdmi_prefer_50hz: The hdmi_prefer_50hz of this OptIn.
        :type hdmi_prefer_50hz: bool
        """
        if hdmi_prefer_50hz is None:
            raise ValueError("Invalid value for `hdmi_prefer_50hz`, must not be `None`")

        self._hdmi_prefer_50hz = hdmi_prefer_50hz

    @property
    def hdmi_prefer_high_fps(self):
        """Gets the hdmi_prefer_high_fps of this OptIn.


        :return: The hdmi_prefer_high_fps of this OptIn.
        :rtype: bool
        """
        return self._hdmi_prefer_high_fps

    @hdmi_prefer_high_fps.setter
    def hdmi_prefer_high_fps(self, hdmi_prefer_high_fps):
        """Sets the hdmi_prefer_high_fps of this OptIn.


        :param hdmi_prefer_high_fps: The hdmi_prefer_high_fps of this OptIn.
        :type hdmi_prefer_high_fps: bool
        """
        if hdmi_prefer_high_fps is None:
            raise ValueError("Invalid value for `hdmi_prefer_high_fps`, must not be `None`")

        self._hdmi_prefer_high_fps = hdmi_prefer_high_fps

    @property
    def managed_mode(self):
        """Gets the managed_mode of this OptIn.


        :return: The managed_mode of this OptIn.
        :rtype: bool
        """
        return self._managed_mode

    @managed_mode.setter
    def managed_mode(self, managed_mode):
        """Sets the managed_mode of this OptIn.


        :param managed_mode: The managed_mode of this OptIn.
        :type managed_mode: bool
        """
        if managed_mode is None:
            raise ValueError("Invalid value for `managed_mode`, must not be `None`")

        self._managed_mode = managed_mode

    @property
    def opencast(self):
        """Gets the opencast of this OptIn.


        :return: The opencast of this OptIn.
        :rtype: bool
        """
        return self._opencast

    @opencast.setter
    def opencast(self, opencast):
        """Sets the opencast of this OptIn.


        :param opencast: The opencast of this OptIn.
        :type opencast: bool
        """
        if opencast is None:
            raise ValueError("Invalid value for `opencast`, must not be `None`")

        self._opencast = opencast

    @property
    def preview_channel(self):
        """Gets the preview_channel of this OptIn.


        :return: The preview_channel of this OptIn.
        :rtype: bool
        """
        return self._preview_channel

    @preview_channel.setter
    def preview_channel(self, preview_channel):
        """Sets the preview_channel of this OptIn.


        :param preview_channel: The preview_channel of this OptIn.
        :type preview_channel: bool
        """
        if preview_channel is None:
            raise ValueError("Invalid value for `preview_channel`, must not be `None`")

        self._preview_channel = preview_channel

    @property
    def remote_ducking(self):
        """Gets the remote_ducking of this OptIn.


        :return: The remote_ducking of this OptIn.
        :rtype: bool
        """
        return self._remote_ducking

    @remote_ducking.setter
    def remote_ducking(self, remote_ducking):
        """Sets the remote_ducking of this OptIn.


        :param remote_ducking: The remote_ducking of this OptIn.
        :type remote_ducking: bool
        """
        if remote_ducking is None:
            raise ValueError("Invalid value for `remote_ducking`, must not be `None`")

        self._remote_ducking = remote_ducking

    @property
    def stats(self):
        """Gets the stats of this OptIn.


        :return: The stats of this OptIn.
        :rtype: bool
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this OptIn.


        :param stats: The stats of this OptIn.
        :type stats: bool
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def ui_flipped(self):
        """Gets the ui_flipped of this OptIn.


        :return: The ui_flipped of this OptIn.
        :rtype: bool
        """
        return self._ui_flipped

    @ui_flipped.setter
    def ui_flipped(self, ui_flipped):
        """Sets the ui_flipped of this OptIn.


        :param ui_flipped: The ui_flipped of this OptIn.
        :type ui_flipped: bool
        """
        if ui_flipped is None:
            raise ValueError("Invalid value for `ui_flipped`, must not be `None`")

        self._ui_flipped = ui_flipped

    @property
    def wpa3_support_enabled(self):
        """Gets the wpa3_support_enabled of this OptIn.


        :return: The wpa3_support_enabled of this OptIn.
        :rtype: bool
        """
        return self._wpa3_support_enabled

    @wpa3_support_enabled.setter
    def wpa3_support_enabled(self, wpa3_support_enabled):
        """Sets the wpa3_support_enabled of this OptIn.


        :param wpa3_support_enabled: The wpa3_support_enabled of this OptIn.
        :type wpa3_support_enabled: bool
        """
        if wpa3_support_enabled is None:
            raise ValueError("Invalid value for `wpa3_support_enabled`, must not be `None`")

        self._wpa3_support_enabled = wpa3_support_enabled
