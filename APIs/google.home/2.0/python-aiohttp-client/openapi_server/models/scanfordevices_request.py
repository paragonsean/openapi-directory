# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScanfordevicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clear_results: bool=None, enable: bool=None, timeout: int=None):
        """ScanfordevicesRequest - a model defined in OpenAPI

        :param clear_results: The clear_results of this ScanfordevicesRequest.
        :param enable: The enable of this ScanfordevicesRequest.
        :param timeout: The timeout of this ScanfordevicesRequest.
        """
        self.openapi_types = {
            'clear_results': bool,
            'enable': bool,
            'timeout': int
        }

        self.attribute_map = {
            'clear_results': 'clear_results',
            'enable': 'enable',
            'timeout': 'timeout'
        }

        self._clear_results = clear_results
        self._enable = enable
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanfordevicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanfordevicesRequest of this ScanfordevicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clear_results(self):
        """Gets the clear_results of this ScanfordevicesRequest.


        :return: The clear_results of this ScanfordevicesRequest.
        :rtype: bool
        """
        return self._clear_results

    @clear_results.setter
    def clear_results(self, clear_results):
        """Sets the clear_results of this ScanfordevicesRequest.


        :param clear_results: The clear_results of this ScanfordevicesRequest.
        :type clear_results: bool
        """
        if clear_results is None:
            raise ValueError("Invalid value for `clear_results`, must not be `None`")

        self._clear_results = clear_results

    @property
    def enable(self):
        """Gets the enable of this ScanfordevicesRequest.


        :return: The enable of this ScanfordevicesRequest.
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this ScanfordevicesRequest.


        :param enable: The enable of this ScanfordevicesRequest.
        :type enable: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")

        self._enable = enable

    @property
    def timeout(self):
        """Gets the timeout of this ScanfordevicesRequest.


        :return: The timeout of this ScanfordevicesRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ScanfordevicesRequest.


        :param timeout: The timeout of this ScanfordevicesRequest.
        :type timeout: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")

        self._timeout = timeout
