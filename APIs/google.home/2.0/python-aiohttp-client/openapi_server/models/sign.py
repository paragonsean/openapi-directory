# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sign(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, intermediate_certs: List[str]=None, nonce: str=None, signed_data: str=None):
        """Sign - a model defined in OpenAPI

        :param certificate: The certificate of this Sign.
        :param intermediate_certs: The intermediate_certs of this Sign.
        :param nonce: The nonce of this Sign.
        :param signed_data: The signed_data of this Sign.
        """
        self.openapi_types = {
            'certificate': str,
            'intermediate_certs': List[str],
            'nonce': str,
            'signed_data': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'intermediate_certs': 'intermediate_certs',
            'nonce': 'nonce',
            'signed_data': 'signed_data'
        }

        self._certificate = certificate
        self._intermediate_certs = intermediate_certs
        self._nonce = nonce
        self._signed_data = signed_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sign':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sign of this Sign.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this Sign.


        :return: The certificate of this Sign.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this Sign.


        :param certificate: The certificate of this Sign.
        :type certificate: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def intermediate_certs(self):
        """Gets the intermediate_certs of this Sign.


        :return: The intermediate_certs of this Sign.
        :rtype: List[str]
        """
        return self._intermediate_certs

    @intermediate_certs.setter
    def intermediate_certs(self, intermediate_certs):
        """Sets the intermediate_certs of this Sign.


        :param intermediate_certs: The intermediate_certs of this Sign.
        :type intermediate_certs: List[str]
        """
        if intermediate_certs is None:
            raise ValueError("Invalid value for `intermediate_certs`, must not be `None`")

        self._intermediate_certs = intermediate_certs

    @property
    def nonce(self):
        """Gets the nonce of this Sign.


        :return: The nonce of this Sign.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Sign.


        :param nonce: The nonce of this Sign.
        :type nonce: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")

        self._nonce = nonce

    @property
    def signed_data(self):
        """Gets the signed_data of this Sign.


        :return: The signed_data of this Sign.
        :rtype: str
        """
        return self._signed_data

    @signed_data.setter
    def signed_data(self, signed_data):
        """Sets the signed_data of this Sign.


        :param signed_data: The signed_data of this Sign.
        :type signed_data: str
        """
        if signed_data is None:
            raise ValueError("Invalid value for `signed_data`, must not be `None`")

        self._signed_data = signed_data
