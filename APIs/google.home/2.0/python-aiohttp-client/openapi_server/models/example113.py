# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Example113(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ssid: str=None, wpa_auth: int=None, wpa_cipher: int=None, wpa_id: int=None):
        """Example113 - a model defined in OpenAPI

        :param ssid: The ssid of this Example113.
        :param wpa_auth: The wpa_auth of this Example113.
        :param wpa_cipher: The wpa_cipher of this Example113.
        :param wpa_id: The wpa_id of this Example113.
        """
        self.openapi_types = {
            'ssid': str,
            'wpa_auth': int,
            'wpa_cipher': int,
            'wpa_id': int
        }

        self.attribute_map = {
            'ssid': 'ssid',
            'wpa_auth': 'wpa_auth',
            'wpa_cipher': 'wpa_cipher',
            'wpa_id': 'wpa_id'
        }

        self._ssid = ssid
        self._wpa_auth = wpa_auth
        self._wpa_cipher = wpa_cipher
        self._wpa_id = wpa_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example113':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example113 of this Example113.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ssid(self):
        """Gets the ssid of this Example113.


        :return: The ssid of this Example113.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this Example113.


        :param ssid: The ssid of this Example113.
        :type ssid: str
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")

        self._ssid = ssid

    @property
    def wpa_auth(self):
        """Gets the wpa_auth of this Example113.


        :return: The wpa_auth of this Example113.
        :rtype: int
        """
        return self._wpa_auth

    @wpa_auth.setter
    def wpa_auth(self, wpa_auth):
        """Sets the wpa_auth of this Example113.


        :param wpa_auth: The wpa_auth of this Example113.
        :type wpa_auth: int
        """
        if wpa_auth is None:
            raise ValueError("Invalid value for `wpa_auth`, must not be `None`")

        self._wpa_auth = wpa_auth

    @property
    def wpa_cipher(self):
        """Gets the wpa_cipher of this Example113.


        :return: The wpa_cipher of this Example113.
        :rtype: int
        """
        return self._wpa_cipher

    @wpa_cipher.setter
    def wpa_cipher(self, wpa_cipher):
        """Sets the wpa_cipher of this Example113.


        :param wpa_cipher: The wpa_cipher of this Example113.
        :type wpa_cipher: int
        """
        if wpa_cipher is None:
            raise ValueError("Invalid value for `wpa_cipher`, must not be `None`")

        self._wpa_cipher = wpa_cipher

    @property
    def wpa_id(self):
        """Gets the wpa_id of this Example113.


        :return: The wpa_id of this Example113.
        :rtype: int
        """
        return self._wpa_id

    @wpa_id.setter
    def wpa_id(self, wpa_id):
        """Sets the wpa_id of this Example113.


        :param wpa_id: The wpa_id of this Example113.
        :type wpa_id: int
        """
        if wpa_id is None:
            raise ValueError("Invalid value for `wpa_id`, must not be `None`")

        self._wpa_id = wpa_id
