# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Settings1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_notifications: int=None):
        """Settings1 - a model defined in OpenAPI

        :param control_notifications: The control_notifications of this Settings1.
        """
        self.openapi_types = {
            'control_notifications': int
        }

        self.attribute_map = {
            'control_notifications': 'control_notifications'
        }

        self._control_notifications = control_notifications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Settings1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Settings1 of this Settings1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_notifications(self):
        """Gets the control_notifications of this Settings1.


        :return: The control_notifications of this Settings1.
        :rtype: int
        """
        return self._control_notifications

    @control_notifications.setter
    def control_notifications(self, control_notifications):
        """Sets the control_notifications of this Settings1.


        :param control_notifications: The control_notifications of this Settings1.
        :type control_notifications: int
        """
        if control_notifications is None:
            raise ValueError("Invalid value for `control_notifications`, must not be `None`")

        self._control_notifications = control_notifications
