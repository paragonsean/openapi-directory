# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IconList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, depth: int=None, height: int=None, mimetype: str=None, url: str=None, width: int=None):
        """IconList - a model defined in OpenAPI

        :param depth: The depth of this IconList.
        :param height: The height of this IconList.
        :param mimetype: The mimetype of this IconList.
        :param url: The url of this IconList.
        :param width: The width of this IconList.
        """
        self.openapi_types = {
            'depth': int,
            'height': int,
            'mimetype': str,
            'url': str,
            'width': int
        }

        self.attribute_map = {
            'depth': 'depth',
            'height': 'height',
            'mimetype': 'mimetype',
            'url': 'url',
            'width': 'width'
        }

        self._depth = depth
        self._height = height
        self._mimetype = mimetype
        self._url = url
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IconList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IconList of this IconList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def depth(self):
        """Gets the depth of this IconList.


        :return: The depth of this IconList.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this IconList.


        :param depth: The depth of this IconList.
        :type depth: int
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")

        self._depth = depth

    @property
    def height(self):
        """Gets the height of this IconList.


        :return: The height of this IconList.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this IconList.


        :param height: The height of this IconList.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def mimetype(self):
        """Gets the mimetype of this IconList.


        :return: The mimetype of this IconList.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this IconList.


        :param mimetype: The mimetype of this IconList.
        :type mimetype: str
        """
        if mimetype is None:
            raise ValueError("Invalid value for `mimetype`, must not be `None`")

        self._mimetype = mimetype

    @property
    def url(self):
        """Gets the url of this IconList.


        :return: The url of this IconList.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IconList.


        :param url: The url of this IconList.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def width(self):
        """Gets the width of this IconList.


        :return: The width of this IconList.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this IconList.


        :param width: The width of this IconList.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
