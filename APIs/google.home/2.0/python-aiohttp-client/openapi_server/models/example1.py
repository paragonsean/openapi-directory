# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aogh import Aogh
from openapi_server.models.audio import Audio
from openapi_server.models.build_info import BuildInfo
from openapi_server.models.detail import Detail
from openapi_server.models.device_info import DeviceInfo
from openapi_server.models.multizone import Multizone
from openapi_server.models.net import Net
from openapi_server.models.night_mode_params import NightModeParams
from openapi_server.models.opencast import Opencast
from openapi_server.models.opt_in import OptIn
from openapi_server.models.proxy import Proxy
from openapi_server.models.settings import Settings
from openapi_server.models.setup import Setup
from openapi_server.models.sign import Sign
from openapi_server.models.user_eq import UserEq
from openapi_server.models.wifi import Wifi
from openapi_server import util


class Example1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aogh: Aogh=None, audio: Audio=None, build_info: BuildInfo=None, detail: Detail=None, device_info: DeviceInfo=None, multizone: Multizone=None, name: str=None, net: Net=None, night_mode_params: NightModeParams=None, opencast: Opencast=None, opt_in: OptIn=None, proxy: Proxy=None, settings: Settings=None, setup: Setup=None, sign: Sign=None, user_eq: UserEq=None, version: int=None, wifi: Wifi=None):
        """Example1 - a model defined in OpenAPI

        :param aogh: The aogh of this Example1.
        :param audio: The audio of this Example1.
        :param build_info: The build_info of this Example1.
        :param detail: The detail of this Example1.
        :param device_info: The device_info of this Example1.
        :param multizone: The multizone of this Example1.
        :param name: The name of this Example1.
        :param net: The net of this Example1.
        :param night_mode_params: The night_mode_params of this Example1.
        :param opencast: The opencast of this Example1.
        :param opt_in: The opt_in of this Example1.
        :param proxy: The proxy of this Example1.
        :param settings: The settings of this Example1.
        :param setup: The setup of this Example1.
        :param sign: The sign of this Example1.
        :param user_eq: The user_eq of this Example1.
        :param version: The version of this Example1.
        :param wifi: The wifi of this Example1.
        """
        self.openapi_types = {
            'aogh': Aogh,
            'audio': Audio,
            'build_info': BuildInfo,
            'detail': Detail,
            'device_info': DeviceInfo,
            'multizone': Multizone,
            'name': str,
            'net': Net,
            'night_mode_params': NightModeParams,
            'opencast': Opencast,
            'opt_in': OptIn,
            'proxy': Proxy,
            'settings': Settings,
            'setup': Setup,
            'sign': Sign,
            'user_eq': UserEq,
            'version': int,
            'wifi': Wifi
        }

        self.attribute_map = {
            'aogh': 'aogh',
            'audio': 'audio',
            'build_info': 'build_info',
            'detail': 'detail',
            'device_info': 'device_info',
            'multizone': 'multizone',
            'name': 'name',
            'net': 'net',
            'night_mode_params': 'night_mode_params',
            'opencast': 'opencast',
            'opt_in': 'opt_in',
            'proxy': 'proxy',
            'settings': 'settings',
            'setup': 'setup',
            'sign': 'sign',
            'user_eq': 'user_eq',
            'version': 'version',
            'wifi': 'wifi'
        }

        self._aogh = aogh
        self._audio = audio
        self._build_info = build_info
        self._detail = detail
        self._device_info = device_info
        self._multizone = multizone
        self._name = name
        self._net = net
        self._night_mode_params = night_mode_params
        self._opencast = opencast
        self._opt_in = opt_in
        self._proxy = proxy
        self._settings = settings
        self._setup = setup
        self._sign = sign
        self._user_eq = user_eq
        self._version = version
        self._wifi = wifi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example1 of this Example1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aogh(self):
        """Gets the aogh of this Example1.


        :return: The aogh of this Example1.
        :rtype: Aogh
        """
        return self._aogh

    @aogh.setter
    def aogh(self, aogh):
        """Sets the aogh of this Example1.


        :param aogh: The aogh of this Example1.
        :type aogh: Aogh
        """
        if aogh is None:
            raise ValueError("Invalid value for `aogh`, must not be `None`")

        self._aogh = aogh

    @property
    def audio(self):
        """Gets the audio of this Example1.


        :return: The audio of this Example1.
        :rtype: Audio
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this Example1.


        :param audio: The audio of this Example1.
        :type audio: Audio
        """
        if audio is None:
            raise ValueError("Invalid value for `audio`, must not be `None`")

        self._audio = audio

    @property
    def build_info(self):
        """Gets the build_info of this Example1.


        :return: The build_info of this Example1.
        :rtype: BuildInfo
        """
        return self._build_info

    @build_info.setter
    def build_info(self, build_info):
        """Sets the build_info of this Example1.


        :param build_info: The build_info of this Example1.
        :type build_info: BuildInfo
        """
        if build_info is None:
            raise ValueError("Invalid value for `build_info`, must not be `None`")

        self._build_info = build_info

    @property
    def detail(self):
        """Gets the detail of this Example1.


        :return: The detail of this Example1.
        :rtype: Detail
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Example1.


        :param detail: The detail of this Example1.
        :type detail: Detail
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")

        self._detail = detail

    @property
    def device_info(self):
        """Gets the device_info of this Example1.


        :return: The device_info of this Example1.
        :rtype: DeviceInfo
        """
        return self._device_info

    @device_info.setter
    def device_info(self, device_info):
        """Sets the device_info of this Example1.


        :param device_info: The device_info of this Example1.
        :type device_info: DeviceInfo
        """
        if device_info is None:
            raise ValueError("Invalid value for `device_info`, must not be `None`")

        self._device_info = device_info

    @property
    def multizone(self):
        """Gets the multizone of this Example1.


        :return: The multizone of this Example1.
        :rtype: Multizone
        """
        return self._multizone

    @multizone.setter
    def multizone(self, multizone):
        """Sets the multizone of this Example1.


        :param multizone: The multizone of this Example1.
        :type multizone: Multizone
        """
        if multizone is None:
            raise ValueError("Invalid value for `multizone`, must not be `None`")

        self._multizone = multizone

    @property
    def name(self):
        """Gets the name of this Example1.


        :return: The name of this Example1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Example1.


        :param name: The name of this Example1.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def net(self):
        """Gets the net of this Example1.


        :return: The net of this Example1.
        :rtype: Net
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this Example1.


        :param net: The net of this Example1.
        :type net: Net
        """
        if net is None:
            raise ValueError("Invalid value for `net`, must not be `None`")

        self._net = net

    @property
    def night_mode_params(self):
        """Gets the night_mode_params of this Example1.


        :return: The night_mode_params of this Example1.
        :rtype: NightModeParams
        """
        return self._night_mode_params

    @night_mode_params.setter
    def night_mode_params(self, night_mode_params):
        """Sets the night_mode_params of this Example1.


        :param night_mode_params: The night_mode_params of this Example1.
        :type night_mode_params: NightModeParams
        """
        if night_mode_params is None:
            raise ValueError("Invalid value for `night_mode_params`, must not be `None`")

        self._night_mode_params = night_mode_params

    @property
    def opencast(self):
        """Gets the opencast of this Example1.


        :return: The opencast of this Example1.
        :rtype: Opencast
        """
        return self._opencast

    @opencast.setter
    def opencast(self, opencast):
        """Sets the opencast of this Example1.


        :param opencast: The opencast of this Example1.
        :type opencast: Opencast
        """
        if opencast is None:
            raise ValueError("Invalid value for `opencast`, must not be `None`")

        self._opencast = opencast

    @property
    def opt_in(self):
        """Gets the opt_in of this Example1.


        :return: The opt_in of this Example1.
        :rtype: OptIn
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this Example1.


        :param opt_in: The opt_in of this Example1.
        :type opt_in: OptIn
        """
        if opt_in is None:
            raise ValueError("Invalid value for `opt_in`, must not be `None`")

        self._opt_in = opt_in

    @property
    def proxy(self):
        """Gets the proxy of this Example1.


        :return: The proxy of this Example1.
        :rtype: Proxy
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this Example1.


        :param proxy: The proxy of this Example1.
        :type proxy: Proxy
        """
        if proxy is None:
            raise ValueError("Invalid value for `proxy`, must not be `None`")

        self._proxy = proxy

    @property
    def settings(self):
        """Gets the settings of this Example1.


        :return: The settings of this Example1.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Example1.


        :param settings: The settings of this Example1.
        :type settings: Settings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def setup(self):
        """Gets the setup of this Example1.


        :return: The setup of this Example1.
        :rtype: Setup
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this Example1.


        :param setup: The setup of this Example1.
        :type setup: Setup
        """
        if setup is None:
            raise ValueError("Invalid value for `setup`, must not be `None`")

        self._setup = setup

    @property
    def sign(self):
        """Gets the sign of this Example1.


        :return: The sign of this Example1.
        :rtype: Sign
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this Example1.


        :param sign: The sign of this Example1.
        :type sign: Sign
        """
        if sign is None:
            raise ValueError("Invalid value for `sign`, must not be `None`")

        self._sign = sign

    @property
    def user_eq(self):
        """Gets the user_eq of this Example1.


        :return: The user_eq of this Example1.
        :rtype: UserEq
        """
        return self._user_eq

    @user_eq.setter
    def user_eq(self, user_eq):
        """Sets the user_eq of this Example1.


        :param user_eq: The user_eq of this Example1.
        :type user_eq: UserEq
        """
        if user_eq is None:
            raise ValueError("Invalid value for `user_eq`, must not be `None`")

        self._user_eq = user_eq

    @property
    def version(self):
        """Gets the version of this Example1.


        :return: The version of this Example1.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Example1.


        :param version: The version of this Example1.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def wifi(self):
        """Gets the wifi of this Example1.


        :return: The wifi of this Example1.
        :rtype: Wifi
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this Example1.


        :param wifi: The wifi of this Example1.
        :type wifi: Wifi
        """
        if wifi is None:
            raise ValueError("Invalid value for `wifi`, must not be `None`")

        self._wifi = wifi
