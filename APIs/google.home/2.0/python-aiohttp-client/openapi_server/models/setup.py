# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stats import Stats
from openapi_server import util


class Setup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, qr_ssid_suffix: str=None, setup_state: int=None, ssid_suffix: str=None, stats: Stats=None, tos_accepted: bool=None):
        """Setup - a model defined in OpenAPI

        :param qr_ssid_suffix: The qr_ssid_suffix of this Setup.
        :param setup_state: The setup_state of this Setup.
        :param ssid_suffix: The ssid_suffix of this Setup.
        :param stats: The stats of this Setup.
        :param tos_accepted: The tos_accepted of this Setup.
        """
        self.openapi_types = {
            'qr_ssid_suffix': str,
            'setup_state': int,
            'ssid_suffix': str,
            'stats': Stats,
            'tos_accepted': bool
        }

        self.attribute_map = {
            'qr_ssid_suffix': 'qr_ssid_suffix',
            'setup_state': 'setup_state',
            'ssid_suffix': 'ssid_suffix',
            'stats': 'stats',
            'tos_accepted': 'tos_accepted'
        }

        self._qr_ssid_suffix = qr_ssid_suffix
        self._setup_state = setup_state
        self._ssid_suffix = ssid_suffix
        self._stats = stats
        self._tos_accepted = tos_accepted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Setup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Setup of this Setup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qr_ssid_suffix(self):
        """Gets the qr_ssid_suffix of this Setup.


        :return: The qr_ssid_suffix of this Setup.
        :rtype: str
        """
        return self._qr_ssid_suffix

    @qr_ssid_suffix.setter
    def qr_ssid_suffix(self, qr_ssid_suffix):
        """Sets the qr_ssid_suffix of this Setup.


        :param qr_ssid_suffix: The qr_ssid_suffix of this Setup.
        :type qr_ssid_suffix: str
        """
        if qr_ssid_suffix is None:
            raise ValueError("Invalid value for `qr_ssid_suffix`, must not be `None`")

        self._qr_ssid_suffix = qr_ssid_suffix

    @property
    def setup_state(self):
        """Gets the setup_state of this Setup.


        :return: The setup_state of this Setup.
        :rtype: int
        """
        return self._setup_state

    @setup_state.setter
    def setup_state(self, setup_state):
        """Sets the setup_state of this Setup.


        :param setup_state: The setup_state of this Setup.
        :type setup_state: int
        """
        if setup_state is None:
            raise ValueError("Invalid value for `setup_state`, must not be `None`")

        self._setup_state = setup_state

    @property
    def ssid_suffix(self):
        """Gets the ssid_suffix of this Setup.


        :return: The ssid_suffix of this Setup.
        :rtype: str
        """
        return self._ssid_suffix

    @ssid_suffix.setter
    def ssid_suffix(self, ssid_suffix):
        """Sets the ssid_suffix of this Setup.


        :param ssid_suffix: The ssid_suffix of this Setup.
        :type ssid_suffix: str
        """
        if ssid_suffix is None:
            raise ValueError("Invalid value for `ssid_suffix`, must not be `None`")

        self._ssid_suffix = ssid_suffix

    @property
    def stats(self):
        """Gets the stats of this Setup.


        :return: The stats of this Setup.
        :rtype: Stats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Setup.


        :param stats: The stats of this Setup.
        :type stats: Stats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats

    @property
    def tos_accepted(self):
        """Gets the tos_accepted of this Setup.


        :return: The tos_accepted of this Setup.
        :rtype: bool
        """
        return self._tos_accepted

    @tos_accepted.setter
    def tos_accepted(self, tos_accepted):
        """Sets the tos_accepted of this Setup.


        :param tos_accepted: The tos_accepted of this Setup.
        :type tos_accepted: bool
        """
        if tos_accepted is None:
            raise ValueError("Invalid value for `tos_accepted`, must not be `None`")

        self._tos_accepted = tos_accepted
