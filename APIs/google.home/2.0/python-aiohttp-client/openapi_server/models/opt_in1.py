# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OptIn1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opencast: bool=None, preview_channel: bool=None, remote_ducking: bool=None, stats: bool=None):
        """OptIn1 - a model defined in OpenAPI

        :param opencast: The opencast of this OptIn1.
        :param preview_channel: The preview_channel of this OptIn1.
        :param remote_ducking: The remote_ducking of this OptIn1.
        :param stats: The stats of this OptIn1.
        """
        self.openapi_types = {
            'opencast': bool,
            'preview_channel': bool,
            'remote_ducking': bool,
            'stats': bool
        }

        self.attribute_map = {
            'opencast': 'opencast',
            'preview_channel': 'preview_channel',
            'remote_ducking': 'remote_ducking',
            'stats': 'stats'
        }

        self._opencast = opencast
        self._preview_channel = preview_channel
        self._remote_ducking = remote_ducking
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OptIn1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OptIn1 of this OptIn1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opencast(self):
        """Gets the opencast of this OptIn1.


        :return: The opencast of this OptIn1.
        :rtype: bool
        """
        return self._opencast

    @opencast.setter
    def opencast(self, opencast):
        """Sets the opencast of this OptIn1.


        :param opencast: The opencast of this OptIn1.
        :type opencast: bool
        """
        if opencast is None:
            raise ValueError("Invalid value for `opencast`, must not be `None`")

        self._opencast = opencast

    @property
    def preview_channel(self):
        """Gets the preview_channel of this OptIn1.


        :return: The preview_channel of this OptIn1.
        :rtype: bool
        """
        return self._preview_channel

    @preview_channel.setter
    def preview_channel(self, preview_channel):
        """Sets the preview_channel of this OptIn1.


        :param preview_channel: The preview_channel of this OptIn1.
        :type preview_channel: bool
        """
        if preview_channel is None:
            raise ValueError("Invalid value for `preview_channel`, must not be `None`")

        self._preview_channel = preview_channel

    @property
    def remote_ducking(self):
        """Gets the remote_ducking of this OptIn1.


        :return: The remote_ducking of this OptIn1.
        :rtype: bool
        """
        return self._remote_ducking

    @remote_ducking.setter
    def remote_ducking(self, remote_ducking):
        """Sets the remote_ducking of this OptIn1.


        :param remote_ducking: The remote_ducking of this OptIn1.
        :type remote_ducking: bool
        """
        if remote_ducking is None:
            raise ValueError("Invalid value for `remote_ducking`, must not be `None`")

        self._remote_ducking = remote_ducking

    @property
    def stats(self):
        """Gets the stats of this OptIn1.


        :return: The stats of this OptIn1.
        :rtype: bool
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this OptIn1.


        :param stats: The stats of this OptIn1.
        :type stats: bool
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")

        self._stats = stats
