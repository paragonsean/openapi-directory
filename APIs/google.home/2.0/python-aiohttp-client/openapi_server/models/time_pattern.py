# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimePattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hour: int=None, minute: int=None, second: int=None):
        """TimePattern - a model defined in OpenAPI

        :param hour: The hour of this TimePattern.
        :param minute: The minute of this TimePattern.
        :param second: The second of this TimePattern.
        """
        self.openapi_types = {
            'hour': int,
            'minute': int,
            'second': int
        }

        self.attribute_map = {
            'hour': 'hour',
            'minute': 'minute',
            'second': 'second'
        }

        self._hour = hour
        self._minute = minute
        self._second = second

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimePattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimePattern of this TimePattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hour(self):
        """Gets the hour of this TimePattern.


        :return: The hour of this TimePattern.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this TimePattern.


        :param hour: The hour of this TimePattern.
        :type hour: int
        """
        if hour is None:
            raise ValueError("Invalid value for `hour`, must not be `None`")

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this TimePattern.


        :return: The minute of this TimePattern.
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this TimePattern.


        :param minute: The minute of this TimePattern.
        :type minute: int
        """
        if minute is None:
            raise ValueError("Invalid value for `minute`, must not be `None`")

        self._minute = minute

    @property
    def second(self):
        """Gets the second of this TimePattern.


        :return: The second of this TimePattern.
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this TimePattern.


        :param second: The second of this TimePattern.
        :type second: int
        """
        if second is None:
            raise ValueError("Invalid value for `second`, must not be `None`")

        self._second = second
