# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Example111(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bond_date: float=None, device_class: int=None, device_type: int=None, last_connect_date: float=None, mac_address: str=None, name: str=None, rssi: int=None, service_uuids: List[str]=None):
        """Example111 - a model defined in OpenAPI

        :param bond_date: The bond_date of this Example111.
        :param device_class: The device_class of this Example111.
        :param device_type: The device_type of this Example111.
        :param last_connect_date: The last_connect_date of this Example111.
        :param mac_address: The mac_address of this Example111.
        :param name: The name of this Example111.
        :param rssi: The rssi of this Example111.
        :param service_uuids: The service_uuids of this Example111.
        """
        self.openapi_types = {
            'bond_date': float,
            'device_class': int,
            'device_type': int,
            'last_connect_date': float,
            'mac_address': str,
            'name': str,
            'rssi': int,
            'service_uuids': List[str]
        }

        self.attribute_map = {
            'bond_date': 'bond_date',
            'device_class': 'device_class',
            'device_type': 'device_type',
            'last_connect_date': 'last_connect_date',
            'mac_address': 'mac_address',
            'name': 'name',
            'rssi': 'rssi',
            'service_uuids': 'service_uuids'
        }

        self._bond_date = bond_date
        self._device_class = device_class
        self._device_type = device_type
        self._last_connect_date = last_connect_date
        self._mac_address = mac_address
        self._name = name
        self._rssi = rssi
        self._service_uuids = service_uuids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example111':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example111 of this Example111.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bond_date(self):
        """Gets the bond_date of this Example111.


        :return: The bond_date of this Example111.
        :rtype: float
        """
        return self._bond_date

    @bond_date.setter
    def bond_date(self, bond_date):
        """Sets the bond_date of this Example111.


        :param bond_date: The bond_date of this Example111.
        :type bond_date: float
        """
        if bond_date is None:
            raise ValueError("Invalid value for `bond_date`, must not be `None`")

        self._bond_date = bond_date

    @property
    def device_class(self):
        """Gets the device_class of this Example111.


        :return: The device_class of this Example111.
        :rtype: int
        """
        return self._device_class

    @device_class.setter
    def device_class(self, device_class):
        """Sets the device_class of this Example111.


        :param device_class: The device_class of this Example111.
        :type device_class: int
        """
        if device_class is None:
            raise ValueError("Invalid value for `device_class`, must not be `None`")

        self._device_class = device_class

    @property
    def device_type(self):
        """Gets the device_type of this Example111.


        :return: The device_type of this Example111.
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Example111.


        :param device_type: The device_type of this Example111.
        :type device_type: int
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type

    @property
    def last_connect_date(self):
        """Gets the last_connect_date of this Example111.


        :return: The last_connect_date of this Example111.
        :rtype: float
        """
        return self._last_connect_date

    @last_connect_date.setter
    def last_connect_date(self, last_connect_date):
        """Sets the last_connect_date of this Example111.


        :param last_connect_date: The last_connect_date of this Example111.
        :type last_connect_date: float
        """
        if last_connect_date is None:
            raise ValueError("Invalid value for `last_connect_date`, must not be `None`")

        self._last_connect_date = last_connect_date

    @property
    def mac_address(self):
        """Gets the mac_address of this Example111.


        :return: The mac_address of this Example111.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Example111.


        :param mac_address: The mac_address of this Example111.
        :type mac_address: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")

        self._mac_address = mac_address

    @property
    def name(self):
        """Gets the name of this Example111.


        :return: The name of this Example111.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Example111.


        :param name: The name of this Example111.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rssi(self):
        """Gets the rssi of this Example111.


        :return: The rssi of this Example111.
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this Example111.


        :param rssi: The rssi of this Example111.
        :type rssi: int
        """
        if rssi is None:
            raise ValueError("Invalid value for `rssi`, must not be `None`")

        self._rssi = rssi

    @property
    def service_uuids(self):
        """Gets the service_uuids of this Example111.


        :return: The service_uuids of this Example111.
        :rtype: List[str]
        """
        return self._service_uuids

    @service_uuids.setter
    def service_uuids(self, service_uuids):
        """Sets the service_uuids of this Example111.


        :param service_uuids: The service_uuids of this Example111.
        :type service_uuids: List[str]
        """
        if service_uuids is None:
            raise ValueError("Invalid value for `service_uuids`, must not be `None`")

        self._service_uuids = service_uuids
