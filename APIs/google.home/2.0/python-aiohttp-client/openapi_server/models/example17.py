# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.window2 import Window2
from openapi_server import util


class Example17(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, do_not_disturb: bool=None, enabled: bool=None, led_brightness: float=None, volume: float=None, windows: List[Window2]=None):
        """Example17 - a model defined in OpenAPI

        :param do_not_disturb: The do_not_disturb of this Example17.
        :param enabled: The enabled of this Example17.
        :param led_brightness: The led_brightness of this Example17.
        :param volume: The volume of this Example17.
        :param windows: The windows of this Example17.
        """
        self.openapi_types = {
            'do_not_disturb': bool,
            'enabled': bool,
            'led_brightness': float,
            'volume': float,
            'windows': List[Window2]
        }

        self.attribute_map = {
            'do_not_disturb': 'do_not_disturb',
            'enabled': 'enabled',
            'led_brightness': 'led_brightness',
            'volume': 'volume',
            'windows': 'windows'
        }

        self._do_not_disturb = do_not_disturb
        self._enabled = enabled
        self._led_brightness = led_brightness
        self._volume = volume
        self._windows = windows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example17':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example17 of this Example17.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def do_not_disturb(self):
        """Gets the do_not_disturb of this Example17.


        :return: The do_not_disturb of this Example17.
        :rtype: bool
        """
        return self._do_not_disturb

    @do_not_disturb.setter
    def do_not_disturb(self, do_not_disturb):
        """Sets the do_not_disturb of this Example17.


        :param do_not_disturb: The do_not_disturb of this Example17.
        :type do_not_disturb: bool
        """
        if do_not_disturb is None:
            raise ValueError("Invalid value for `do_not_disturb`, must not be `None`")

        self._do_not_disturb = do_not_disturb

    @property
    def enabled(self):
        """Gets the enabled of this Example17.


        :return: The enabled of this Example17.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Example17.


        :param enabled: The enabled of this Example17.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def led_brightness(self):
        """Gets the led_brightness of this Example17.


        :return: The led_brightness of this Example17.
        :rtype: float
        """
        return self._led_brightness

    @led_brightness.setter
    def led_brightness(self, led_brightness):
        """Sets the led_brightness of this Example17.


        :param led_brightness: The led_brightness of this Example17.
        :type led_brightness: float
        """
        if led_brightness is None:
            raise ValueError("Invalid value for `led_brightness`, must not be `None`")

        self._led_brightness = led_brightness

    @property
    def volume(self):
        """Gets the volume of this Example17.


        :return: The volume of this Example17.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Example17.


        :param volume: The volume of this Example17.
        :type volume: float
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")

        self._volume = volume

    @property
    def windows(self):
        """Gets the windows of this Example17.


        :return: The windows of this Example17.
        :rtype: List[Window2]
        """
        return self._windows

    @windows.setter
    def windows(self, windows):
        """Sets the windows of this Example17.


        :param windows: The windows of this Example17.
        :type windows: List[Window2]
        """
        if windows is None:
            raise ValueError("Invalid value for `windows`, must not be `None`")

        self._windows = windows
