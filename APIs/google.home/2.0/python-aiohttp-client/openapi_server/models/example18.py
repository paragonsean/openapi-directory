# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alarm import Alarm
from openapi_server.models.timer import Timer
from openapi_server import util


class Example18(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alarm: List[Alarm]=None, timer: List[Timer]=None):
        """Example18 - a model defined in OpenAPI

        :param alarm: The alarm of this Example18.
        :param timer: The timer of this Example18.
        """
        self.openapi_types = {
            'alarm': List[Alarm],
            'timer': List[Timer]
        }

        self.attribute_map = {
            'alarm': 'alarm',
            'timer': 'timer'
        }

        self._alarm = alarm
        self._timer = timer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example18':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example18 of this Example18.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alarm(self):
        """Gets the alarm of this Example18.


        :return: The alarm of this Example18.
        :rtype: List[Alarm]
        """
        return self._alarm

    @alarm.setter
    def alarm(self, alarm):
        """Sets the alarm of this Example18.


        :param alarm: The alarm of this Example18.
        :type alarm: List[Alarm]
        """
        if alarm is None:
            raise ValueError("Invalid value for `alarm`, must not be `None`")

        self._alarm = alarm

    @property
    def timer(self):
        """Gets the timer of this Example18.


        :return: The timer of this Example18.
        :rtype: List[Timer]
        """
        return self._timer

    @timer.setter
    def timer(self, timer):
        """Sets the timer of this Example18.


        :param timer: The timer of this Example18.
        :type timer: List[Timer]
        """
        if timer is None:
            raise ValueError("Invalid value for `timer`, must not be `None`")

        self._timer = timer
