# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.icon_list import IconList
from openapi_server.models.locale import Locale
from openapi_server.models.timezone import Timezone
from openapi_server import util


class Detail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon_list: List[IconList]=None, locale: Locale=None, timezone: Timezone=None):
        """Detail - a model defined in OpenAPI

        :param icon_list: The icon_list of this Detail.
        :param locale: The locale of this Detail.
        :param timezone: The timezone of this Detail.
        """
        self.openapi_types = {
            'icon_list': List[IconList],
            'locale': Locale,
            'timezone': Timezone
        }

        self.attribute_map = {
            'icon_list': 'icon_list',
            'locale': 'locale',
            'timezone': 'timezone'
        }

        self._icon_list = icon_list
        self._locale = locale
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Detail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Detail of this Detail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon_list(self):
        """Gets the icon_list of this Detail.


        :return: The icon_list of this Detail.
        :rtype: List[IconList]
        """
        return self._icon_list

    @icon_list.setter
    def icon_list(self, icon_list):
        """Sets the icon_list of this Detail.


        :param icon_list: The icon_list of this Detail.
        :type icon_list: List[IconList]
        """
        if icon_list is None:
            raise ValueError("Invalid value for `icon_list`, must not be `None`")

        self._icon_list = icon_list

    @property
    def locale(self):
        """Gets the locale of this Detail.


        :return: The locale of this Detail.
        :rtype: Locale
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Detail.


        :param locale: The locale of this Detail.
        :type locale: Locale
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")

        self._locale = locale

    @property
    def timezone(self):
        """Gets the timezone of this Detail.


        :return: The timezone of this Detail.
        :rtype: Timezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Detail.


        :param timezone: The timezone of this Detail.
        :type timezone: Timezone
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone
