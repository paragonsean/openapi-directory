# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PairwithSpeakerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connect: bool=None, mac_address: str=None, profile: int=None):
        """PairwithSpeakerRequest - a model defined in OpenAPI

        :param connect: The connect of this PairwithSpeakerRequest.
        :param mac_address: The mac_address of this PairwithSpeakerRequest.
        :param profile: The profile of this PairwithSpeakerRequest.
        """
        self.openapi_types = {
            'connect': bool,
            'mac_address': str,
            'profile': int
        }

        self.attribute_map = {
            'connect': 'connect',
            'mac_address': 'mac_address',
            'profile': 'profile'
        }

        self._connect = connect
        self._mac_address = mac_address
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PairwithSpeakerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PairwithSpeakerRequest of this PairwithSpeakerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connect(self):
        """Gets the connect of this PairwithSpeakerRequest.


        :return: The connect of this PairwithSpeakerRequest.
        :rtype: bool
        """
        return self._connect

    @connect.setter
    def connect(self, connect):
        """Sets the connect of this PairwithSpeakerRequest.


        :param connect: The connect of this PairwithSpeakerRequest.
        :type connect: bool
        """
        if connect is None:
            raise ValueError("Invalid value for `connect`, must not be `None`")

        self._connect = connect

    @property
    def mac_address(self):
        """Gets the mac_address of this PairwithSpeakerRequest.


        :return: The mac_address of this PairwithSpeakerRequest.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this PairwithSpeakerRequest.


        :param mac_address: The mac_address of this PairwithSpeakerRequest.
        :type mac_address: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")

        self._mac_address = mac_address

    @property
    def profile(self):
        """Gets the profile of this PairwithSpeakerRequest.


        :return: The profile of this PairwithSpeakerRequest.
        :rtype: int
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this PairwithSpeakerRequest.


        :param profile: The profile of this PairwithSpeakerRequest.
        :type profile: int
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")

        self._profile = profile
