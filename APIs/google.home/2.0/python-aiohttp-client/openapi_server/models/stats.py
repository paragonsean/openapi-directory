# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Stats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_check_connectivity: int=None, num_connect_wifi: int=None, num_connected_wifi_not_saved: int=None, num_initial_eureka_info: int=None, num_obtain_ip: int=None):
        """Stats - a model defined in OpenAPI

        :param num_check_connectivity: The num_check_connectivity of this Stats.
        :param num_connect_wifi: The num_connect_wifi of this Stats.
        :param num_connected_wifi_not_saved: The num_connected_wifi_not_saved of this Stats.
        :param num_initial_eureka_info: The num_initial_eureka_info of this Stats.
        :param num_obtain_ip: The num_obtain_ip of this Stats.
        """
        self.openapi_types = {
            'num_check_connectivity': int,
            'num_connect_wifi': int,
            'num_connected_wifi_not_saved': int,
            'num_initial_eureka_info': int,
            'num_obtain_ip': int
        }

        self.attribute_map = {
            'num_check_connectivity': 'num_check_connectivity',
            'num_connect_wifi': 'num_connect_wifi',
            'num_connected_wifi_not_saved': 'num_connected_wifi_not_saved',
            'num_initial_eureka_info': 'num_initial_eureka_info',
            'num_obtain_ip': 'num_obtain_ip'
        }

        self._num_check_connectivity = num_check_connectivity
        self._num_connect_wifi = num_connect_wifi
        self._num_connected_wifi_not_saved = num_connected_wifi_not_saved
        self._num_initial_eureka_info = num_initial_eureka_info
        self._num_obtain_ip = num_obtain_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stats of this Stats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_check_connectivity(self):
        """Gets the num_check_connectivity of this Stats.


        :return: The num_check_connectivity of this Stats.
        :rtype: int
        """
        return self._num_check_connectivity

    @num_check_connectivity.setter
    def num_check_connectivity(self, num_check_connectivity):
        """Sets the num_check_connectivity of this Stats.


        :param num_check_connectivity: The num_check_connectivity of this Stats.
        :type num_check_connectivity: int
        """
        if num_check_connectivity is None:
            raise ValueError("Invalid value for `num_check_connectivity`, must not be `None`")

        self._num_check_connectivity = num_check_connectivity

    @property
    def num_connect_wifi(self):
        """Gets the num_connect_wifi of this Stats.


        :return: The num_connect_wifi of this Stats.
        :rtype: int
        """
        return self._num_connect_wifi

    @num_connect_wifi.setter
    def num_connect_wifi(self, num_connect_wifi):
        """Sets the num_connect_wifi of this Stats.


        :param num_connect_wifi: The num_connect_wifi of this Stats.
        :type num_connect_wifi: int
        """
        if num_connect_wifi is None:
            raise ValueError("Invalid value for `num_connect_wifi`, must not be `None`")

        self._num_connect_wifi = num_connect_wifi

    @property
    def num_connected_wifi_not_saved(self):
        """Gets the num_connected_wifi_not_saved of this Stats.


        :return: The num_connected_wifi_not_saved of this Stats.
        :rtype: int
        """
        return self._num_connected_wifi_not_saved

    @num_connected_wifi_not_saved.setter
    def num_connected_wifi_not_saved(self, num_connected_wifi_not_saved):
        """Sets the num_connected_wifi_not_saved of this Stats.


        :param num_connected_wifi_not_saved: The num_connected_wifi_not_saved of this Stats.
        :type num_connected_wifi_not_saved: int
        """
        if num_connected_wifi_not_saved is None:
            raise ValueError("Invalid value for `num_connected_wifi_not_saved`, must not be `None`")

        self._num_connected_wifi_not_saved = num_connected_wifi_not_saved

    @property
    def num_initial_eureka_info(self):
        """Gets the num_initial_eureka_info of this Stats.


        :return: The num_initial_eureka_info of this Stats.
        :rtype: int
        """
        return self._num_initial_eureka_info

    @num_initial_eureka_info.setter
    def num_initial_eureka_info(self, num_initial_eureka_info):
        """Sets the num_initial_eureka_info of this Stats.


        :param num_initial_eureka_info: The num_initial_eureka_info of this Stats.
        :type num_initial_eureka_info: int
        """
        if num_initial_eureka_info is None:
            raise ValueError("Invalid value for `num_initial_eureka_info`, must not be `None`")

        self._num_initial_eureka_info = num_initial_eureka_info

    @property
    def num_obtain_ip(self):
        """Gets the num_obtain_ip of this Stats.


        :return: The num_obtain_ip of this Stats.
        :rtype: int
        """
        return self._num_obtain_ip

    @num_obtain_ip.setter
    def num_obtain_ip(self, num_obtain_ip):
        """Sets the num_obtain_ip of this Stats.


        :param num_obtain_ip: The num_obtain_ip of this Stats.
        :type num_obtain_ip: int
        """
        if num_obtain_ip is None:
            raise ValueError("Invalid value for `num_obtain_ip`, must not be `None`")

        self._num_obtain_ip = num_obtain_ip
