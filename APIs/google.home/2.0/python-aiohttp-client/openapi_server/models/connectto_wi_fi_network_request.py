# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnecttoWiFiNetworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bssid: str=None, enc_passwd: str=None, signal_level: int=None, ssid: str=None, wpa_auth: int=None, wpa_cipher: int=None):
        """ConnecttoWiFiNetworkRequest - a model defined in OpenAPI

        :param bssid: The bssid of this ConnecttoWiFiNetworkRequest.
        :param enc_passwd: The enc_passwd of this ConnecttoWiFiNetworkRequest.
        :param signal_level: The signal_level of this ConnecttoWiFiNetworkRequest.
        :param ssid: The ssid of this ConnecttoWiFiNetworkRequest.
        :param wpa_auth: The wpa_auth of this ConnecttoWiFiNetworkRequest.
        :param wpa_cipher: The wpa_cipher of this ConnecttoWiFiNetworkRequest.
        """
        self.openapi_types = {
            'bssid': str,
            'enc_passwd': str,
            'signal_level': int,
            'ssid': str,
            'wpa_auth': int,
            'wpa_cipher': int
        }

        self.attribute_map = {
            'bssid': 'bssid',
            'enc_passwd': 'enc_passwd',
            'signal_level': 'signal_level',
            'ssid': 'ssid',
            'wpa_auth': 'wpa_auth',
            'wpa_cipher': 'wpa_cipher'
        }

        self._bssid = bssid
        self._enc_passwd = enc_passwd
        self._signal_level = signal_level
        self._ssid = ssid
        self._wpa_auth = wpa_auth
        self._wpa_cipher = wpa_cipher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnecttoWiFiNetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnecttoWi-FiNetworkRequest of this ConnecttoWiFiNetworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bssid(self):
        """Gets the bssid of this ConnecttoWiFiNetworkRequest.


        :return: The bssid of this ConnecttoWiFiNetworkRequest.
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """Sets the bssid of this ConnecttoWiFiNetworkRequest.


        :param bssid: The bssid of this ConnecttoWiFiNetworkRequest.
        :type bssid: str
        """
        if bssid is None:
            raise ValueError("Invalid value for `bssid`, must not be `None`")

        self._bssid = bssid

    @property
    def enc_passwd(self):
        """Gets the enc_passwd of this ConnecttoWiFiNetworkRequest.


        :return: The enc_passwd of this ConnecttoWiFiNetworkRequest.
        :rtype: str
        """
        return self._enc_passwd

    @enc_passwd.setter
    def enc_passwd(self, enc_passwd):
        """Sets the enc_passwd of this ConnecttoWiFiNetworkRequest.


        :param enc_passwd: The enc_passwd of this ConnecttoWiFiNetworkRequest.
        :type enc_passwd: str
        """
        if enc_passwd is None:
            raise ValueError("Invalid value for `enc_passwd`, must not be `None`")

        self._enc_passwd = enc_passwd

    @property
    def signal_level(self):
        """Gets the signal_level of this ConnecttoWiFiNetworkRequest.


        :return: The signal_level of this ConnecttoWiFiNetworkRequest.
        :rtype: int
        """
        return self._signal_level

    @signal_level.setter
    def signal_level(self, signal_level):
        """Sets the signal_level of this ConnecttoWiFiNetworkRequest.


        :param signal_level: The signal_level of this ConnecttoWiFiNetworkRequest.
        :type signal_level: int
        """
        if signal_level is None:
            raise ValueError("Invalid value for `signal_level`, must not be `None`")

        self._signal_level = signal_level

    @property
    def ssid(self):
        """Gets the ssid of this ConnecttoWiFiNetworkRequest.


        :return: The ssid of this ConnecttoWiFiNetworkRequest.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this ConnecttoWiFiNetworkRequest.


        :param ssid: The ssid of this ConnecttoWiFiNetworkRequest.
        :type ssid: str
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")

        self._ssid = ssid

    @property
    def wpa_auth(self):
        """Gets the wpa_auth of this ConnecttoWiFiNetworkRequest.


        :return: The wpa_auth of this ConnecttoWiFiNetworkRequest.
        :rtype: int
        """
        return self._wpa_auth

    @wpa_auth.setter
    def wpa_auth(self, wpa_auth):
        """Sets the wpa_auth of this ConnecttoWiFiNetworkRequest.


        :param wpa_auth: The wpa_auth of this ConnecttoWiFiNetworkRequest.
        :type wpa_auth: int
        """
        if wpa_auth is None:
            raise ValueError("Invalid value for `wpa_auth`, must not be `None`")

        self._wpa_auth = wpa_auth

    @property
    def wpa_cipher(self):
        """Gets the wpa_cipher of this ConnecttoWiFiNetworkRequest.


        :return: The wpa_cipher of this ConnecttoWiFiNetworkRequest.
        :rtype: int
        """
        return self._wpa_cipher

    @wpa_cipher.setter
    def wpa_cipher(self, wpa_cipher):
        """Sets the wpa_cipher of this ConnecttoWiFiNetworkRequest.


        :param wpa_cipher: The wpa_cipher of this ConnecttoWiFiNetworkRequest.
        :type wpa_cipher: int
        """
        if wpa_cipher is None:
            raise ValueError("Invalid value for `wpa_cipher`, must not be `None`")

        self._wpa_cipher = wpa_cipher
