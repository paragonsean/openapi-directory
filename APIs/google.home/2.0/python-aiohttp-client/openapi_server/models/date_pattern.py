# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatePattern(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day: int=None, month: int=None, year: int=None):
        """DatePattern - a model defined in OpenAPI

        :param day: The day of this DatePattern.
        :param month: The month of this DatePattern.
        :param year: The year of this DatePattern.
        """
        self.openapi_types = {
            'day': int,
            'month': int,
            'year': int
        }

        self.attribute_map = {
            'day': 'day',
            'month': 'month',
            'year': 'year'
        }

        self._day = day
        self._month = month
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatePattern':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatePattern of this DatePattern.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day(self):
        """Gets the day of this DatePattern.


        :return: The day of this DatePattern.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DatePattern.


        :param day: The day of this DatePattern.
        :type day: int
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")

        self._day = day

    @property
    def month(self):
        """Gets the month of this DatePattern.


        :return: The month of this DatePattern.
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this DatePattern.


        :param month: The month of this DatePattern.
        :type month: int
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")

        self._month = month

    @property
    def year(self):
        """Gets the year of this DatePattern.


        :return: The year of this DatePattern.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DatePattern.


        :param year: The year of this DatePattern.
        :type year: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")

        self._year = year
