# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Multizone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_output_delay: int=None, audio_output_delay_hdmi: int=None, audio_output_delay_oem: int=None, aux_in_group: str=None, dynamic_groups: List[str]=None, groups: List[str]=None, multichannel_status: int=None):
        """Multizone - a model defined in OpenAPI

        :param audio_output_delay: The audio_output_delay of this Multizone.
        :param audio_output_delay_hdmi: The audio_output_delay_hdmi of this Multizone.
        :param audio_output_delay_oem: The audio_output_delay_oem of this Multizone.
        :param aux_in_group: The aux_in_group of this Multizone.
        :param dynamic_groups: The dynamic_groups of this Multizone.
        :param groups: The groups of this Multizone.
        :param multichannel_status: The multichannel_status of this Multizone.
        """
        self.openapi_types = {
            'audio_output_delay': int,
            'audio_output_delay_hdmi': int,
            'audio_output_delay_oem': int,
            'aux_in_group': str,
            'dynamic_groups': List[str],
            'groups': List[str],
            'multichannel_status': int
        }

        self.attribute_map = {
            'audio_output_delay': 'audio_output_delay',
            'audio_output_delay_hdmi': 'audio_output_delay_hdmi',
            'audio_output_delay_oem': 'audio_output_delay_oem',
            'aux_in_group': 'aux_in_group',
            'dynamic_groups': 'dynamic_groups',
            'groups': 'groups',
            'multichannel_status': 'multichannel_status'
        }

        self._audio_output_delay = audio_output_delay
        self._audio_output_delay_hdmi = audio_output_delay_hdmi
        self._audio_output_delay_oem = audio_output_delay_oem
        self._aux_in_group = aux_in_group
        self._dynamic_groups = dynamic_groups
        self._groups = groups
        self._multichannel_status = multichannel_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Multizone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Multizone of this Multizone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_output_delay(self):
        """Gets the audio_output_delay of this Multizone.


        :return: The audio_output_delay of this Multizone.
        :rtype: int
        """
        return self._audio_output_delay

    @audio_output_delay.setter
    def audio_output_delay(self, audio_output_delay):
        """Sets the audio_output_delay of this Multizone.


        :param audio_output_delay: The audio_output_delay of this Multizone.
        :type audio_output_delay: int
        """
        if audio_output_delay is None:
            raise ValueError("Invalid value for `audio_output_delay`, must not be `None`")

        self._audio_output_delay = audio_output_delay

    @property
    def audio_output_delay_hdmi(self):
        """Gets the audio_output_delay_hdmi of this Multizone.


        :return: The audio_output_delay_hdmi of this Multizone.
        :rtype: int
        """
        return self._audio_output_delay_hdmi

    @audio_output_delay_hdmi.setter
    def audio_output_delay_hdmi(self, audio_output_delay_hdmi):
        """Sets the audio_output_delay_hdmi of this Multizone.


        :param audio_output_delay_hdmi: The audio_output_delay_hdmi of this Multizone.
        :type audio_output_delay_hdmi: int
        """
        if audio_output_delay_hdmi is None:
            raise ValueError("Invalid value for `audio_output_delay_hdmi`, must not be `None`")

        self._audio_output_delay_hdmi = audio_output_delay_hdmi

    @property
    def audio_output_delay_oem(self):
        """Gets the audio_output_delay_oem of this Multizone.


        :return: The audio_output_delay_oem of this Multizone.
        :rtype: int
        """
        return self._audio_output_delay_oem

    @audio_output_delay_oem.setter
    def audio_output_delay_oem(self, audio_output_delay_oem):
        """Sets the audio_output_delay_oem of this Multizone.


        :param audio_output_delay_oem: The audio_output_delay_oem of this Multizone.
        :type audio_output_delay_oem: int
        """
        if audio_output_delay_oem is None:
            raise ValueError("Invalid value for `audio_output_delay_oem`, must not be `None`")

        self._audio_output_delay_oem = audio_output_delay_oem

    @property
    def aux_in_group(self):
        """Gets the aux_in_group of this Multizone.


        :return: The aux_in_group of this Multizone.
        :rtype: str
        """
        return self._aux_in_group

    @aux_in_group.setter
    def aux_in_group(self, aux_in_group):
        """Sets the aux_in_group of this Multizone.


        :param aux_in_group: The aux_in_group of this Multizone.
        :type aux_in_group: str
        """
        if aux_in_group is None:
            raise ValueError("Invalid value for `aux_in_group`, must not be `None`")

        self._aux_in_group = aux_in_group

    @property
    def dynamic_groups(self):
        """Gets the dynamic_groups of this Multizone.


        :return: The dynamic_groups of this Multizone.
        :rtype: List[str]
        """
        return self._dynamic_groups

    @dynamic_groups.setter
    def dynamic_groups(self, dynamic_groups):
        """Sets the dynamic_groups of this Multizone.


        :param dynamic_groups: The dynamic_groups of this Multizone.
        :type dynamic_groups: List[str]
        """
        if dynamic_groups is None:
            raise ValueError("Invalid value for `dynamic_groups`, must not be `None`")

        self._dynamic_groups = dynamic_groups

    @property
    def groups(self):
        """Gets the groups of this Multizone.


        :return: The groups of this Multizone.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Multizone.


        :param groups: The groups of this Multizone.
        :type groups: List[str]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def multichannel_status(self):
        """Gets the multichannel_status of this Multizone.


        :return: The multichannel_status of this Multizone.
        :rtype: int
        """
        return self._multichannel_status

    @multichannel_status.setter
    def multichannel_status(self, multichannel_status):
        """Sets the multichannel_status of this Multizone.


        :param multichannel_status: The multichannel_status of this Multizone.
        :type multichannel_status: int
        """
        if multichannel_status is None:
            raise ValueError("Invalid value for `multichannel_status`, must not be `None`")

        self._multichannel_status = multichannel_status
