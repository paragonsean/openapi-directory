# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BuildInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_type: int=None, cast_build_revision: str=None, cast_control_version: int=None, preview_channel_state: int=None, release_track: str=None, system_build_number: str=None):
        """BuildInfo - a model defined in OpenAPI

        :param build_type: The build_type of this BuildInfo.
        :param cast_build_revision: The cast_build_revision of this BuildInfo.
        :param cast_control_version: The cast_control_version of this BuildInfo.
        :param preview_channel_state: The preview_channel_state of this BuildInfo.
        :param release_track: The release_track of this BuildInfo.
        :param system_build_number: The system_build_number of this BuildInfo.
        """
        self.openapi_types = {
            'build_type': int,
            'cast_build_revision': str,
            'cast_control_version': int,
            'preview_channel_state': int,
            'release_track': str,
            'system_build_number': str
        }

        self.attribute_map = {
            'build_type': 'build_type',
            'cast_build_revision': 'cast_build_revision',
            'cast_control_version': 'cast_control_version',
            'preview_channel_state': 'preview_channel_state',
            'release_track': 'release_track',
            'system_build_number': 'system_build_number'
        }

        self._build_type = build_type
        self._cast_build_revision = cast_build_revision
        self._cast_control_version = cast_control_version
        self._preview_channel_state = preview_channel_state
        self._release_track = release_track
        self._system_build_number = system_build_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildInfo of this BuildInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_type(self):
        """Gets the build_type of this BuildInfo.


        :return: The build_type of this BuildInfo.
        :rtype: int
        """
        return self._build_type

    @build_type.setter
    def build_type(self, build_type):
        """Sets the build_type of this BuildInfo.


        :param build_type: The build_type of this BuildInfo.
        :type build_type: int
        """
        if build_type is None:
            raise ValueError("Invalid value for `build_type`, must not be `None`")

        self._build_type = build_type

    @property
    def cast_build_revision(self):
        """Gets the cast_build_revision of this BuildInfo.


        :return: The cast_build_revision of this BuildInfo.
        :rtype: str
        """
        return self._cast_build_revision

    @cast_build_revision.setter
    def cast_build_revision(self, cast_build_revision):
        """Sets the cast_build_revision of this BuildInfo.


        :param cast_build_revision: The cast_build_revision of this BuildInfo.
        :type cast_build_revision: str
        """
        if cast_build_revision is None:
            raise ValueError("Invalid value for `cast_build_revision`, must not be `None`")

        self._cast_build_revision = cast_build_revision

    @property
    def cast_control_version(self):
        """Gets the cast_control_version of this BuildInfo.


        :return: The cast_control_version of this BuildInfo.
        :rtype: int
        """
        return self._cast_control_version

    @cast_control_version.setter
    def cast_control_version(self, cast_control_version):
        """Sets the cast_control_version of this BuildInfo.


        :param cast_control_version: The cast_control_version of this BuildInfo.
        :type cast_control_version: int
        """
        if cast_control_version is None:
            raise ValueError("Invalid value for `cast_control_version`, must not be `None`")

        self._cast_control_version = cast_control_version

    @property
    def preview_channel_state(self):
        """Gets the preview_channel_state of this BuildInfo.


        :return: The preview_channel_state of this BuildInfo.
        :rtype: int
        """
        return self._preview_channel_state

    @preview_channel_state.setter
    def preview_channel_state(self, preview_channel_state):
        """Sets the preview_channel_state of this BuildInfo.


        :param preview_channel_state: The preview_channel_state of this BuildInfo.
        :type preview_channel_state: int
        """
        if preview_channel_state is None:
            raise ValueError("Invalid value for `preview_channel_state`, must not be `None`")

        self._preview_channel_state = preview_channel_state

    @property
    def release_track(self):
        """Gets the release_track of this BuildInfo.


        :return: The release_track of this BuildInfo.
        :rtype: str
        """
        return self._release_track

    @release_track.setter
    def release_track(self, release_track):
        """Sets the release_track of this BuildInfo.


        :param release_track: The release_track of this BuildInfo.
        :type release_track: str
        """
        if release_track is None:
            raise ValueError("Invalid value for `release_track`, must not be `None`")

        self._release_track = release_track

    @property
    def system_build_number(self):
        """Gets the system_build_number of this BuildInfo.


        :return: The system_build_number of this BuildInfo.
        :rtype: str
        """
        return self._system_build_number

    @system_build_number.setter
    def system_build_number(self, system_build_number):
        """Sets the system_build_number of this BuildInfo.


        :param system_build_number: The system_build_number of this BuildInfo.
        :type system_build_number: str
        """
        if system_build_number is None:
            raise ValueError("Invalid value for `system_build_number`, must not be `None`")

        self._system_build_number = system_build_number
