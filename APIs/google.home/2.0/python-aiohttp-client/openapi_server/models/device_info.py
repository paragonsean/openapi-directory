# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capabilities import Capabilities
from openapi_server import util


class DeviceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _4k_blocked: int=None, capabilities: Capabilities=None, cloud_device_id: str=None, factory_country_code: str=None, hotspot_bssid: str=None, local_authorization_token_hash: str=None, mac_address: str=None, manufacturer: str=None, model_name: str=None, product_name: str=None, public_key: str=None, ssdp_udn: str=None, uma_client_id: str=None, uptime: float=None, weave_device_id: str=None):
        """DeviceInfo - a model defined in OpenAPI

        :param _4k_blocked: The _4k_blocked of this DeviceInfo.
        :param capabilities: The capabilities of this DeviceInfo.
        :param cloud_device_id: The cloud_device_id of this DeviceInfo.
        :param factory_country_code: The factory_country_code of this DeviceInfo.
        :param hotspot_bssid: The hotspot_bssid of this DeviceInfo.
        :param local_authorization_token_hash: The local_authorization_token_hash of this DeviceInfo.
        :param mac_address: The mac_address of this DeviceInfo.
        :param manufacturer: The manufacturer of this DeviceInfo.
        :param model_name: The model_name of this DeviceInfo.
        :param product_name: The product_name of this DeviceInfo.
        :param public_key: The public_key of this DeviceInfo.
        :param ssdp_udn: The ssdp_udn of this DeviceInfo.
        :param uma_client_id: The uma_client_id of this DeviceInfo.
        :param uptime: The uptime of this DeviceInfo.
        :param weave_device_id: The weave_device_id of this DeviceInfo.
        """
        self.openapi_types = {
            '_4k_blocked': int,
            'capabilities': Capabilities,
            'cloud_device_id': str,
            'factory_country_code': str,
            'hotspot_bssid': str,
            'local_authorization_token_hash': str,
            'mac_address': str,
            'manufacturer': str,
            'model_name': str,
            'product_name': str,
            'public_key': str,
            'ssdp_udn': str,
            'uma_client_id': str,
            'uptime': float,
            'weave_device_id': str
        }

        self.attribute_map = {
            '_4k_blocked': '4k_blocked',
            'capabilities': 'capabilities',
            'cloud_device_id': 'cloud_device_id',
            'factory_country_code': 'factory_country_code',
            'hotspot_bssid': 'hotspot_bssid',
            'local_authorization_token_hash': 'local_authorization_token_hash',
            'mac_address': 'mac_address',
            'manufacturer': 'manufacturer',
            'model_name': 'model_name',
            'product_name': 'product_name',
            'public_key': 'public_key',
            'ssdp_udn': 'ssdp_udn',
            'uma_client_id': 'uma_client_id',
            'uptime': 'uptime',
            'weave_device_id': 'weave_device_id'
        }

        self.__4k_blocked = _4k_blocked
        self._capabilities = capabilities
        self._cloud_device_id = cloud_device_id
        self._factory_country_code = factory_country_code
        self._hotspot_bssid = hotspot_bssid
        self._local_authorization_token_hash = local_authorization_token_hash
        self._mac_address = mac_address
        self._manufacturer = manufacturer
        self._model_name = model_name
        self._product_name = product_name
        self._public_key = public_key
        self._ssdp_udn = ssdp_udn
        self._uma_client_id = uma_client_id
        self._uptime = uptime
        self._weave_device_id = weave_device_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceInfo of this DeviceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _4k_blocked(self):
        """Gets the _4k_blocked of this DeviceInfo.


        :return: The _4k_blocked of this DeviceInfo.
        :rtype: int
        """
        return self.__4k_blocked

    @_4k_blocked.setter
    def _4k_blocked(self, _4k_blocked):
        """Sets the _4k_blocked of this DeviceInfo.


        :param _4k_blocked: The _4k_blocked of this DeviceInfo.
        :type _4k_blocked: int
        """
        if _4k_blocked is None:
            raise ValueError("Invalid value for `_4k_blocked`, must not be `None`")

        self.__4k_blocked = _4k_blocked

    @property
    def capabilities(self):
        """Gets the capabilities of this DeviceInfo.


        :return: The capabilities of this DeviceInfo.
        :rtype: Capabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this DeviceInfo.


        :param capabilities: The capabilities of this DeviceInfo.
        :type capabilities: Capabilities
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")

        self._capabilities = capabilities

    @property
    def cloud_device_id(self):
        """Gets the cloud_device_id of this DeviceInfo.


        :return: The cloud_device_id of this DeviceInfo.
        :rtype: str
        """
        return self._cloud_device_id

    @cloud_device_id.setter
    def cloud_device_id(self, cloud_device_id):
        """Sets the cloud_device_id of this DeviceInfo.


        :param cloud_device_id: The cloud_device_id of this DeviceInfo.
        :type cloud_device_id: str
        """
        if cloud_device_id is None:
            raise ValueError("Invalid value for `cloud_device_id`, must not be `None`")

        self._cloud_device_id = cloud_device_id

    @property
    def factory_country_code(self):
        """Gets the factory_country_code of this DeviceInfo.


        :return: The factory_country_code of this DeviceInfo.
        :rtype: str
        """
        return self._factory_country_code

    @factory_country_code.setter
    def factory_country_code(self, factory_country_code):
        """Sets the factory_country_code of this DeviceInfo.


        :param factory_country_code: The factory_country_code of this DeviceInfo.
        :type factory_country_code: str
        """
        if factory_country_code is None:
            raise ValueError("Invalid value for `factory_country_code`, must not be `None`")

        self._factory_country_code = factory_country_code

    @property
    def hotspot_bssid(self):
        """Gets the hotspot_bssid of this DeviceInfo.


        :return: The hotspot_bssid of this DeviceInfo.
        :rtype: str
        """
        return self._hotspot_bssid

    @hotspot_bssid.setter
    def hotspot_bssid(self, hotspot_bssid):
        """Sets the hotspot_bssid of this DeviceInfo.


        :param hotspot_bssid: The hotspot_bssid of this DeviceInfo.
        :type hotspot_bssid: str
        """
        if hotspot_bssid is None:
            raise ValueError("Invalid value for `hotspot_bssid`, must not be `None`")

        self._hotspot_bssid = hotspot_bssid

    @property
    def local_authorization_token_hash(self):
        """Gets the local_authorization_token_hash of this DeviceInfo.


        :return: The local_authorization_token_hash of this DeviceInfo.
        :rtype: str
        """
        return self._local_authorization_token_hash

    @local_authorization_token_hash.setter
    def local_authorization_token_hash(self, local_authorization_token_hash):
        """Sets the local_authorization_token_hash of this DeviceInfo.


        :param local_authorization_token_hash: The local_authorization_token_hash of this DeviceInfo.
        :type local_authorization_token_hash: str
        """
        if local_authorization_token_hash is None:
            raise ValueError("Invalid value for `local_authorization_token_hash`, must not be `None`")

        self._local_authorization_token_hash = local_authorization_token_hash

    @property
    def mac_address(self):
        """Gets the mac_address of this DeviceInfo.


        :return: The mac_address of this DeviceInfo.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this DeviceInfo.


        :param mac_address: The mac_address of this DeviceInfo.
        :type mac_address: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")

        self._mac_address = mac_address

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceInfo.


        :return: The manufacturer of this DeviceInfo.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceInfo.


        :param manufacturer: The manufacturer of this DeviceInfo.
        :type manufacturer: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")

        self._manufacturer = manufacturer

    @property
    def model_name(self):
        """Gets the model_name of this DeviceInfo.


        :return: The model_name of this DeviceInfo.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DeviceInfo.


        :param model_name: The model_name of this DeviceInfo.
        :type model_name: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")

        self._model_name = model_name

    @property
    def product_name(self):
        """Gets the product_name of this DeviceInfo.


        :return: The product_name of this DeviceInfo.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this DeviceInfo.


        :param product_name: The product_name of this DeviceInfo.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def public_key(self):
        """Gets the public_key of this DeviceInfo.


        :return: The public_key of this DeviceInfo.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this DeviceInfo.


        :param public_key: The public_key of this DeviceInfo.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def ssdp_udn(self):
        """Gets the ssdp_udn of this DeviceInfo.


        :return: The ssdp_udn of this DeviceInfo.
        :rtype: str
        """
        return self._ssdp_udn

    @ssdp_udn.setter
    def ssdp_udn(self, ssdp_udn):
        """Sets the ssdp_udn of this DeviceInfo.


        :param ssdp_udn: The ssdp_udn of this DeviceInfo.
        :type ssdp_udn: str
        """
        if ssdp_udn is None:
            raise ValueError("Invalid value for `ssdp_udn`, must not be `None`")

        self._ssdp_udn = ssdp_udn

    @property
    def uma_client_id(self):
        """Gets the uma_client_id of this DeviceInfo.


        :return: The uma_client_id of this DeviceInfo.
        :rtype: str
        """
        return self._uma_client_id

    @uma_client_id.setter
    def uma_client_id(self, uma_client_id):
        """Sets the uma_client_id of this DeviceInfo.


        :param uma_client_id: The uma_client_id of this DeviceInfo.
        :type uma_client_id: str
        """
        if uma_client_id is None:
            raise ValueError("Invalid value for `uma_client_id`, must not be `None`")

        self._uma_client_id = uma_client_id

    @property
    def uptime(self):
        """Gets the uptime of this DeviceInfo.


        :return: The uptime of this DeviceInfo.
        :rtype: float
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this DeviceInfo.


        :param uptime: The uptime of this DeviceInfo.
        :type uptime: float
        """
        if uptime is None:
            raise ValueError("Invalid value for `uptime`, must not be `None`")

        self._uptime = uptime

    @property
    def weave_device_id(self):
        """Gets the weave_device_id of this DeviceInfo.


        :return: The weave_device_id of this DeviceInfo.
        :rtype: str
        """
        return self._weave_device_id

    @weave_device_id.setter
    def weave_device_id(self, weave_device_id):
        """Sets the weave_device_id of this DeviceInfo.


        :param weave_device_id: The weave_device_id of this DeviceInfo.
        :type weave_device_id: str
        """
        if weave_device_id is None:
            raise ValueError("Invalid value for `weave_device_id`, must not be `None`")

        self._weave_device_id = weave_device_id
