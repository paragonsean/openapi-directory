# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_pattern import DatePattern
from openapi_server.models.time_pattern import TimePattern
from openapi_server import util


class Alarm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_pattern: DatePattern=None, fire_time: float=None, id: str=None, status: int=None, time_pattern: TimePattern=None):
        """Alarm - a model defined in OpenAPI

        :param date_pattern: The date_pattern of this Alarm.
        :param fire_time: The fire_time of this Alarm.
        :param id: The id of this Alarm.
        :param status: The status of this Alarm.
        :param time_pattern: The time_pattern of this Alarm.
        """
        self.openapi_types = {
            'date_pattern': DatePattern,
            'fire_time': float,
            'id': str,
            'status': int,
            'time_pattern': TimePattern
        }

        self.attribute_map = {
            'date_pattern': 'date_pattern',
            'fire_time': 'fire_time',
            'id': 'id',
            'status': 'status',
            'time_pattern': 'time_pattern'
        }

        self._date_pattern = date_pattern
        self._fire_time = fire_time
        self._id = id
        self._status = status
        self._time_pattern = time_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Alarm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Alarm of this Alarm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_pattern(self):
        """Gets the date_pattern of this Alarm.


        :return: The date_pattern of this Alarm.
        :rtype: DatePattern
        """
        return self._date_pattern

    @date_pattern.setter
    def date_pattern(self, date_pattern):
        """Sets the date_pattern of this Alarm.


        :param date_pattern: The date_pattern of this Alarm.
        :type date_pattern: DatePattern
        """
        if date_pattern is None:
            raise ValueError("Invalid value for `date_pattern`, must not be `None`")

        self._date_pattern = date_pattern

    @property
    def fire_time(self):
        """Gets the fire_time of this Alarm.


        :return: The fire_time of this Alarm.
        :rtype: float
        """
        return self._fire_time

    @fire_time.setter
    def fire_time(self, fire_time):
        """Sets the fire_time of this Alarm.


        :param fire_time: The fire_time of this Alarm.
        :type fire_time: float
        """
        if fire_time is None:
            raise ValueError("Invalid value for `fire_time`, must not be `None`")

        self._fire_time = fire_time

    @property
    def id(self):
        """Gets the id of this Alarm.


        :return: The id of this Alarm.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Alarm.


        :param id: The id of this Alarm.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this Alarm.


        :return: The status of this Alarm.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Alarm.


        :param status: The status of this Alarm.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def time_pattern(self):
        """Gets the time_pattern of this Alarm.


        :return: The time_pattern of this Alarm.
        :rtype: TimePattern
        """
        return self._time_pattern

    @time_pattern.setter
    def time_pattern(self, time_pattern):
        """Sets the time_pattern of this Alarm.


        :param time_pattern: The time_pattern of this Alarm.
        :type time_pattern: TimePattern
        """
        if time_pattern is None:
            raise ValueError("Invalid value for `time_pattern`, must not be `None`")

        self._time_pattern = time_pattern
