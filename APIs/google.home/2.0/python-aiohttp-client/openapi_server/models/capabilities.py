# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Capabilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aogh_supported: bool=None, assistant_supported: bool=None, audio_hdr_supported: bool=None, audio_surround_mode_supported: bool=None, ble_supported: bool=None, bluetooth_audio_sink_supported: bool=None, bluetooth_audio_source_supported: bool=None, bluetooth_supported: bool=None, cloudcast_supported: bool=None, content_filters_supported: bool=None, display_supported: bool=None, fdr_supported: bool=None, hdmi_prefer_50hz_supported: bool=None, hdmi_prefer_high_fps_supported: bool=None, hotspot_supported: bool=None, https_setup_supported: bool=None, input_management_supported: bool=None, keep_hotspot_until_connected_supported: bool=None, multi_user_supported: bool=None, multichannel_group_supported: bool=None, multizone_supported: bool=None, night_mode_supported: bool=None, night_mode_supported_v2: bool=None, opencast_supported: bool=None, preview_channel_supported: bool=None, reboot_supported: bool=None, remote_ducking_supported: bool=None, separate_tts_volume_supported: bool=None, setup_supported: bool=None, sleep_mode_supported: bool=None, stats_supported: bool=None, system_sound_effects_supported: bool=None, user_eq_supported: bool=None, wifi_auto_save_supported: bool=None, wifi_regulatory_domain_locked: bool=None, wifi_supported: bool=None):
        """Capabilities - a model defined in OpenAPI

        :param aogh_supported: The aogh_supported of this Capabilities.
        :param assistant_supported: The assistant_supported of this Capabilities.
        :param audio_hdr_supported: The audio_hdr_supported of this Capabilities.
        :param audio_surround_mode_supported: The audio_surround_mode_supported of this Capabilities.
        :param ble_supported: The ble_supported of this Capabilities.
        :param bluetooth_audio_sink_supported: The bluetooth_audio_sink_supported of this Capabilities.
        :param bluetooth_audio_source_supported: The bluetooth_audio_source_supported of this Capabilities.
        :param bluetooth_supported: The bluetooth_supported of this Capabilities.
        :param cloudcast_supported: The cloudcast_supported of this Capabilities.
        :param content_filters_supported: The content_filters_supported of this Capabilities.
        :param display_supported: The display_supported of this Capabilities.
        :param fdr_supported: The fdr_supported of this Capabilities.
        :param hdmi_prefer_50hz_supported: The hdmi_prefer_50hz_supported of this Capabilities.
        :param hdmi_prefer_high_fps_supported: The hdmi_prefer_high_fps_supported of this Capabilities.
        :param hotspot_supported: The hotspot_supported of this Capabilities.
        :param https_setup_supported: The https_setup_supported of this Capabilities.
        :param input_management_supported: The input_management_supported of this Capabilities.
        :param keep_hotspot_until_connected_supported: The keep_hotspot_until_connected_supported of this Capabilities.
        :param multi_user_supported: The multi_user_supported of this Capabilities.
        :param multichannel_group_supported: The multichannel_group_supported of this Capabilities.
        :param multizone_supported: The multizone_supported of this Capabilities.
        :param night_mode_supported: The night_mode_supported of this Capabilities.
        :param night_mode_supported_v2: The night_mode_supported_v2 of this Capabilities.
        :param opencast_supported: The opencast_supported of this Capabilities.
        :param preview_channel_supported: The preview_channel_supported of this Capabilities.
        :param reboot_supported: The reboot_supported of this Capabilities.
        :param remote_ducking_supported: The remote_ducking_supported of this Capabilities.
        :param separate_tts_volume_supported: The separate_tts_volume_supported of this Capabilities.
        :param setup_supported: The setup_supported of this Capabilities.
        :param sleep_mode_supported: The sleep_mode_supported of this Capabilities.
        :param stats_supported: The stats_supported of this Capabilities.
        :param system_sound_effects_supported: The system_sound_effects_supported of this Capabilities.
        :param user_eq_supported: The user_eq_supported of this Capabilities.
        :param wifi_auto_save_supported: The wifi_auto_save_supported of this Capabilities.
        :param wifi_regulatory_domain_locked: The wifi_regulatory_domain_locked of this Capabilities.
        :param wifi_supported: The wifi_supported of this Capabilities.
        """
        self.openapi_types = {
            'aogh_supported': bool,
            'assistant_supported': bool,
            'audio_hdr_supported': bool,
            'audio_surround_mode_supported': bool,
            'ble_supported': bool,
            'bluetooth_audio_sink_supported': bool,
            'bluetooth_audio_source_supported': bool,
            'bluetooth_supported': bool,
            'cloudcast_supported': bool,
            'content_filters_supported': bool,
            'display_supported': bool,
            'fdr_supported': bool,
            'hdmi_prefer_50hz_supported': bool,
            'hdmi_prefer_high_fps_supported': bool,
            'hotspot_supported': bool,
            'https_setup_supported': bool,
            'input_management_supported': bool,
            'keep_hotspot_until_connected_supported': bool,
            'multi_user_supported': bool,
            'multichannel_group_supported': bool,
            'multizone_supported': bool,
            'night_mode_supported': bool,
            'night_mode_supported_v2': bool,
            'opencast_supported': bool,
            'preview_channel_supported': bool,
            'reboot_supported': bool,
            'remote_ducking_supported': bool,
            'separate_tts_volume_supported': bool,
            'setup_supported': bool,
            'sleep_mode_supported': bool,
            'stats_supported': bool,
            'system_sound_effects_supported': bool,
            'user_eq_supported': bool,
            'wifi_auto_save_supported': bool,
            'wifi_regulatory_domain_locked': bool,
            'wifi_supported': bool
        }

        self.attribute_map = {
            'aogh_supported': 'aogh_supported',
            'assistant_supported': 'assistant_supported',
            'audio_hdr_supported': 'audio_hdr_supported',
            'audio_surround_mode_supported': 'audio_surround_mode_supported',
            'ble_supported': 'ble_supported',
            'bluetooth_audio_sink_supported': 'bluetooth_audio_sink_supported',
            'bluetooth_audio_source_supported': 'bluetooth_audio_source_supported',
            'bluetooth_supported': 'bluetooth_supported',
            'cloudcast_supported': 'cloudcast_supported',
            'content_filters_supported': 'content_filters_supported',
            'display_supported': 'display_supported',
            'fdr_supported': 'fdr_supported',
            'hdmi_prefer_50hz_supported': 'hdmi_prefer_50hz_supported',
            'hdmi_prefer_high_fps_supported': 'hdmi_prefer_high_fps_supported',
            'hotspot_supported': 'hotspot_supported',
            'https_setup_supported': 'https_setup_supported',
            'input_management_supported': 'input_management_supported',
            'keep_hotspot_until_connected_supported': 'keep_hotspot_until_connected_supported',
            'multi_user_supported': 'multi_user_supported',
            'multichannel_group_supported': 'multichannel_group_supported',
            'multizone_supported': 'multizone_supported',
            'night_mode_supported': 'night_mode_supported',
            'night_mode_supported_v2': 'night_mode_supported_v2',
            'opencast_supported': 'opencast_supported',
            'preview_channel_supported': 'preview_channel_supported',
            'reboot_supported': 'reboot_supported',
            'remote_ducking_supported': 'remote_ducking_supported',
            'separate_tts_volume_supported': 'separate_tts_volume_supported',
            'setup_supported': 'setup_supported',
            'sleep_mode_supported': 'sleep_mode_supported',
            'stats_supported': 'stats_supported',
            'system_sound_effects_supported': 'system_sound_effects_supported',
            'user_eq_supported': 'user_eq_supported',
            'wifi_auto_save_supported': 'wifi_auto_save_supported',
            'wifi_regulatory_domain_locked': 'wifi_regulatory_domain_locked',
            'wifi_supported': 'wifi_supported'
        }

        self._aogh_supported = aogh_supported
        self._assistant_supported = assistant_supported
        self._audio_hdr_supported = audio_hdr_supported
        self._audio_surround_mode_supported = audio_surround_mode_supported
        self._ble_supported = ble_supported
        self._bluetooth_audio_sink_supported = bluetooth_audio_sink_supported
        self._bluetooth_audio_source_supported = bluetooth_audio_source_supported
        self._bluetooth_supported = bluetooth_supported
        self._cloudcast_supported = cloudcast_supported
        self._content_filters_supported = content_filters_supported
        self._display_supported = display_supported
        self._fdr_supported = fdr_supported
        self._hdmi_prefer_50hz_supported = hdmi_prefer_50hz_supported
        self._hdmi_prefer_high_fps_supported = hdmi_prefer_high_fps_supported
        self._hotspot_supported = hotspot_supported
        self._https_setup_supported = https_setup_supported
        self._input_management_supported = input_management_supported
        self._keep_hotspot_until_connected_supported = keep_hotspot_until_connected_supported
        self._multi_user_supported = multi_user_supported
        self._multichannel_group_supported = multichannel_group_supported
        self._multizone_supported = multizone_supported
        self._night_mode_supported = night_mode_supported
        self._night_mode_supported_v2 = night_mode_supported_v2
        self._opencast_supported = opencast_supported
        self._preview_channel_supported = preview_channel_supported
        self._reboot_supported = reboot_supported
        self._remote_ducking_supported = remote_ducking_supported
        self._separate_tts_volume_supported = separate_tts_volume_supported
        self._setup_supported = setup_supported
        self._sleep_mode_supported = sleep_mode_supported
        self._stats_supported = stats_supported
        self._system_sound_effects_supported = system_sound_effects_supported
        self._user_eq_supported = user_eq_supported
        self._wifi_auto_save_supported = wifi_auto_save_supported
        self._wifi_regulatory_domain_locked = wifi_regulatory_domain_locked
        self._wifi_supported = wifi_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Capabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Capabilities of this Capabilities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aogh_supported(self):
        """Gets the aogh_supported of this Capabilities.


        :return: The aogh_supported of this Capabilities.
        :rtype: bool
        """
        return self._aogh_supported

    @aogh_supported.setter
    def aogh_supported(self, aogh_supported):
        """Sets the aogh_supported of this Capabilities.


        :param aogh_supported: The aogh_supported of this Capabilities.
        :type aogh_supported: bool
        """
        if aogh_supported is None:
            raise ValueError("Invalid value for `aogh_supported`, must not be `None`")

        self._aogh_supported = aogh_supported

    @property
    def assistant_supported(self):
        """Gets the assistant_supported of this Capabilities.


        :return: The assistant_supported of this Capabilities.
        :rtype: bool
        """
        return self._assistant_supported

    @assistant_supported.setter
    def assistant_supported(self, assistant_supported):
        """Sets the assistant_supported of this Capabilities.


        :param assistant_supported: The assistant_supported of this Capabilities.
        :type assistant_supported: bool
        """
        if assistant_supported is None:
            raise ValueError("Invalid value for `assistant_supported`, must not be `None`")

        self._assistant_supported = assistant_supported

    @property
    def audio_hdr_supported(self):
        """Gets the audio_hdr_supported of this Capabilities.


        :return: The audio_hdr_supported of this Capabilities.
        :rtype: bool
        """
        return self._audio_hdr_supported

    @audio_hdr_supported.setter
    def audio_hdr_supported(self, audio_hdr_supported):
        """Sets the audio_hdr_supported of this Capabilities.


        :param audio_hdr_supported: The audio_hdr_supported of this Capabilities.
        :type audio_hdr_supported: bool
        """
        if audio_hdr_supported is None:
            raise ValueError("Invalid value for `audio_hdr_supported`, must not be `None`")

        self._audio_hdr_supported = audio_hdr_supported

    @property
    def audio_surround_mode_supported(self):
        """Gets the audio_surround_mode_supported of this Capabilities.


        :return: The audio_surround_mode_supported of this Capabilities.
        :rtype: bool
        """
        return self._audio_surround_mode_supported

    @audio_surround_mode_supported.setter
    def audio_surround_mode_supported(self, audio_surround_mode_supported):
        """Sets the audio_surround_mode_supported of this Capabilities.


        :param audio_surround_mode_supported: The audio_surround_mode_supported of this Capabilities.
        :type audio_surround_mode_supported: bool
        """
        if audio_surround_mode_supported is None:
            raise ValueError("Invalid value for `audio_surround_mode_supported`, must not be `None`")

        self._audio_surround_mode_supported = audio_surround_mode_supported

    @property
    def ble_supported(self):
        """Gets the ble_supported of this Capabilities.


        :return: The ble_supported of this Capabilities.
        :rtype: bool
        """
        return self._ble_supported

    @ble_supported.setter
    def ble_supported(self, ble_supported):
        """Sets the ble_supported of this Capabilities.


        :param ble_supported: The ble_supported of this Capabilities.
        :type ble_supported: bool
        """
        if ble_supported is None:
            raise ValueError("Invalid value for `ble_supported`, must not be `None`")

        self._ble_supported = ble_supported

    @property
    def bluetooth_audio_sink_supported(self):
        """Gets the bluetooth_audio_sink_supported of this Capabilities.


        :return: The bluetooth_audio_sink_supported of this Capabilities.
        :rtype: bool
        """
        return self._bluetooth_audio_sink_supported

    @bluetooth_audio_sink_supported.setter
    def bluetooth_audio_sink_supported(self, bluetooth_audio_sink_supported):
        """Sets the bluetooth_audio_sink_supported of this Capabilities.


        :param bluetooth_audio_sink_supported: The bluetooth_audio_sink_supported of this Capabilities.
        :type bluetooth_audio_sink_supported: bool
        """
        if bluetooth_audio_sink_supported is None:
            raise ValueError("Invalid value for `bluetooth_audio_sink_supported`, must not be `None`")

        self._bluetooth_audio_sink_supported = bluetooth_audio_sink_supported

    @property
    def bluetooth_audio_source_supported(self):
        """Gets the bluetooth_audio_source_supported of this Capabilities.


        :return: The bluetooth_audio_source_supported of this Capabilities.
        :rtype: bool
        """
        return self._bluetooth_audio_source_supported

    @bluetooth_audio_source_supported.setter
    def bluetooth_audio_source_supported(self, bluetooth_audio_source_supported):
        """Sets the bluetooth_audio_source_supported of this Capabilities.


        :param bluetooth_audio_source_supported: The bluetooth_audio_source_supported of this Capabilities.
        :type bluetooth_audio_source_supported: bool
        """
        if bluetooth_audio_source_supported is None:
            raise ValueError("Invalid value for `bluetooth_audio_source_supported`, must not be `None`")

        self._bluetooth_audio_source_supported = bluetooth_audio_source_supported

    @property
    def bluetooth_supported(self):
        """Gets the bluetooth_supported of this Capabilities.


        :return: The bluetooth_supported of this Capabilities.
        :rtype: bool
        """
        return self._bluetooth_supported

    @bluetooth_supported.setter
    def bluetooth_supported(self, bluetooth_supported):
        """Sets the bluetooth_supported of this Capabilities.


        :param bluetooth_supported: The bluetooth_supported of this Capabilities.
        :type bluetooth_supported: bool
        """
        if bluetooth_supported is None:
            raise ValueError("Invalid value for `bluetooth_supported`, must not be `None`")

        self._bluetooth_supported = bluetooth_supported

    @property
    def cloudcast_supported(self):
        """Gets the cloudcast_supported of this Capabilities.


        :return: The cloudcast_supported of this Capabilities.
        :rtype: bool
        """
        return self._cloudcast_supported

    @cloudcast_supported.setter
    def cloudcast_supported(self, cloudcast_supported):
        """Sets the cloudcast_supported of this Capabilities.


        :param cloudcast_supported: The cloudcast_supported of this Capabilities.
        :type cloudcast_supported: bool
        """
        if cloudcast_supported is None:
            raise ValueError("Invalid value for `cloudcast_supported`, must not be `None`")

        self._cloudcast_supported = cloudcast_supported

    @property
    def content_filters_supported(self):
        """Gets the content_filters_supported of this Capabilities.


        :return: The content_filters_supported of this Capabilities.
        :rtype: bool
        """
        return self._content_filters_supported

    @content_filters_supported.setter
    def content_filters_supported(self, content_filters_supported):
        """Sets the content_filters_supported of this Capabilities.


        :param content_filters_supported: The content_filters_supported of this Capabilities.
        :type content_filters_supported: bool
        """
        if content_filters_supported is None:
            raise ValueError("Invalid value for `content_filters_supported`, must not be `None`")

        self._content_filters_supported = content_filters_supported

    @property
    def display_supported(self):
        """Gets the display_supported of this Capabilities.


        :return: The display_supported of this Capabilities.
        :rtype: bool
        """
        return self._display_supported

    @display_supported.setter
    def display_supported(self, display_supported):
        """Sets the display_supported of this Capabilities.


        :param display_supported: The display_supported of this Capabilities.
        :type display_supported: bool
        """
        if display_supported is None:
            raise ValueError("Invalid value for `display_supported`, must not be `None`")

        self._display_supported = display_supported

    @property
    def fdr_supported(self):
        """Gets the fdr_supported of this Capabilities.


        :return: The fdr_supported of this Capabilities.
        :rtype: bool
        """
        return self._fdr_supported

    @fdr_supported.setter
    def fdr_supported(self, fdr_supported):
        """Sets the fdr_supported of this Capabilities.


        :param fdr_supported: The fdr_supported of this Capabilities.
        :type fdr_supported: bool
        """
        if fdr_supported is None:
            raise ValueError("Invalid value for `fdr_supported`, must not be `None`")

        self._fdr_supported = fdr_supported

    @property
    def hdmi_prefer_50hz_supported(self):
        """Gets the hdmi_prefer_50hz_supported of this Capabilities.


        :return: The hdmi_prefer_50hz_supported of this Capabilities.
        :rtype: bool
        """
        return self._hdmi_prefer_50hz_supported

    @hdmi_prefer_50hz_supported.setter
    def hdmi_prefer_50hz_supported(self, hdmi_prefer_50hz_supported):
        """Sets the hdmi_prefer_50hz_supported of this Capabilities.


        :param hdmi_prefer_50hz_supported: The hdmi_prefer_50hz_supported of this Capabilities.
        :type hdmi_prefer_50hz_supported: bool
        """
        if hdmi_prefer_50hz_supported is None:
            raise ValueError("Invalid value for `hdmi_prefer_50hz_supported`, must not be `None`")

        self._hdmi_prefer_50hz_supported = hdmi_prefer_50hz_supported

    @property
    def hdmi_prefer_high_fps_supported(self):
        """Gets the hdmi_prefer_high_fps_supported of this Capabilities.


        :return: The hdmi_prefer_high_fps_supported of this Capabilities.
        :rtype: bool
        """
        return self._hdmi_prefer_high_fps_supported

    @hdmi_prefer_high_fps_supported.setter
    def hdmi_prefer_high_fps_supported(self, hdmi_prefer_high_fps_supported):
        """Sets the hdmi_prefer_high_fps_supported of this Capabilities.


        :param hdmi_prefer_high_fps_supported: The hdmi_prefer_high_fps_supported of this Capabilities.
        :type hdmi_prefer_high_fps_supported: bool
        """
        if hdmi_prefer_high_fps_supported is None:
            raise ValueError("Invalid value for `hdmi_prefer_high_fps_supported`, must not be `None`")

        self._hdmi_prefer_high_fps_supported = hdmi_prefer_high_fps_supported

    @property
    def hotspot_supported(self):
        """Gets the hotspot_supported of this Capabilities.


        :return: The hotspot_supported of this Capabilities.
        :rtype: bool
        """
        return self._hotspot_supported

    @hotspot_supported.setter
    def hotspot_supported(self, hotspot_supported):
        """Sets the hotspot_supported of this Capabilities.


        :param hotspot_supported: The hotspot_supported of this Capabilities.
        :type hotspot_supported: bool
        """
        if hotspot_supported is None:
            raise ValueError("Invalid value for `hotspot_supported`, must not be `None`")

        self._hotspot_supported = hotspot_supported

    @property
    def https_setup_supported(self):
        """Gets the https_setup_supported of this Capabilities.


        :return: The https_setup_supported of this Capabilities.
        :rtype: bool
        """
        return self._https_setup_supported

    @https_setup_supported.setter
    def https_setup_supported(self, https_setup_supported):
        """Sets the https_setup_supported of this Capabilities.


        :param https_setup_supported: The https_setup_supported of this Capabilities.
        :type https_setup_supported: bool
        """
        if https_setup_supported is None:
            raise ValueError("Invalid value for `https_setup_supported`, must not be `None`")

        self._https_setup_supported = https_setup_supported

    @property
    def input_management_supported(self):
        """Gets the input_management_supported of this Capabilities.


        :return: The input_management_supported of this Capabilities.
        :rtype: bool
        """
        return self._input_management_supported

    @input_management_supported.setter
    def input_management_supported(self, input_management_supported):
        """Sets the input_management_supported of this Capabilities.


        :param input_management_supported: The input_management_supported of this Capabilities.
        :type input_management_supported: bool
        """
        if input_management_supported is None:
            raise ValueError("Invalid value for `input_management_supported`, must not be `None`")

        self._input_management_supported = input_management_supported

    @property
    def keep_hotspot_until_connected_supported(self):
        """Gets the keep_hotspot_until_connected_supported of this Capabilities.


        :return: The keep_hotspot_until_connected_supported of this Capabilities.
        :rtype: bool
        """
        return self._keep_hotspot_until_connected_supported

    @keep_hotspot_until_connected_supported.setter
    def keep_hotspot_until_connected_supported(self, keep_hotspot_until_connected_supported):
        """Sets the keep_hotspot_until_connected_supported of this Capabilities.


        :param keep_hotspot_until_connected_supported: The keep_hotspot_until_connected_supported of this Capabilities.
        :type keep_hotspot_until_connected_supported: bool
        """
        if keep_hotspot_until_connected_supported is None:
            raise ValueError("Invalid value for `keep_hotspot_until_connected_supported`, must not be `None`")

        self._keep_hotspot_until_connected_supported = keep_hotspot_until_connected_supported

    @property
    def multi_user_supported(self):
        """Gets the multi_user_supported of this Capabilities.


        :return: The multi_user_supported of this Capabilities.
        :rtype: bool
        """
        return self._multi_user_supported

    @multi_user_supported.setter
    def multi_user_supported(self, multi_user_supported):
        """Sets the multi_user_supported of this Capabilities.


        :param multi_user_supported: The multi_user_supported of this Capabilities.
        :type multi_user_supported: bool
        """
        if multi_user_supported is None:
            raise ValueError("Invalid value for `multi_user_supported`, must not be `None`")

        self._multi_user_supported = multi_user_supported

    @property
    def multichannel_group_supported(self):
        """Gets the multichannel_group_supported of this Capabilities.


        :return: The multichannel_group_supported of this Capabilities.
        :rtype: bool
        """
        return self._multichannel_group_supported

    @multichannel_group_supported.setter
    def multichannel_group_supported(self, multichannel_group_supported):
        """Sets the multichannel_group_supported of this Capabilities.


        :param multichannel_group_supported: The multichannel_group_supported of this Capabilities.
        :type multichannel_group_supported: bool
        """
        if multichannel_group_supported is None:
            raise ValueError("Invalid value for `multichannel_group_supported`, must not be `None`")

        self._multichannel_group_supported = multichannel_group_supported

    @property
    def multizone_supported(self):
        """Gets the multizone_supported of this Capabilities.


        :return: The multizone_supported of this Capabilities.
        :rtype: bool
        """
        return self._multizone_supported

    @multizone_supported.setter
    def multizone_supported(self, multizone_supported):
        """Sets the multizone_supported of this Capabilities.


        :param multizone_supported: The multizone_supported of this Capabilities.
        :type multizone_supported: bool
        """
        if multizone_supported is None:
            raise ValueError("Invalid value for `multizone_supported`, must not be `None`")

        self._multizone_supported = multizone_supported

    @property
    def night_mode_supported(self):
        """Gets the night_mode_supported of this Capabilities.


        :return: The night_mode_supported of this Capabilities.
        :rtype: bool
        """
        return self._night_mode_supported

    @night_mode_supported.setter
    def night_mode_supported(self, night_mode_supported):
        """Sets the night_mode_supported of this Capabilities.


        :param night_mode_supported: The night_mode_supported of this Capabilities.
        :type night_mode_supported: bool
        """
        if night_mode_supported is None:
            raise ValueError("Invalid value for `night_mode_supported`, must not be `None`")

        self._night_mode_supported = night_mode_supported

    @property
    def night_mode_supported_v2(self):
        """Gets the night_mode_supported_v2 of this Capabilities.


        :return: The night_mode_supported_v2 of this Capabilities.
        :rtype: bool
        """
        return self._night_mode_supported_v2

    @night_mode_supported_v2.setter
    def night_mode_supported_v2(self, night_mode_supported_v2):
        """Sets the night_mode_supported_v2 of this Capabilities.


        :param night_mode_supported_v2: The night_mode_supported_v2 of this Capabilities.
        :type night_mode_supported_v2: bool
        """
        if night_mode_supported_v2 is None:
            raise ValueError("Invalid value for `night_mode_supported_v2`, must not be `None`")

        self._night_mode_supported_v2 = night_mode_supported_v2

    @property
    def opencast_supported(self):
        """Gets the opencast_supported of this Capabilities.


        :return: The opencast_supported of this Capabilities.
        :rtype: bool
        """
        return self._opencast_supported

    @opencast_supported.setter
    def opencast_supported(self, opencast_supported):
        """Sets the opencast_supported of this Capabilities.


        :param opencast_supported: The opencast_supported of this Capabilities.
        :type opencast_supported: bool
        """
        if opencast_supported is None:
            raise ValueError("Invalid value for `opencast_supported`, must not be `None`")

        self._opencast_supported = opencast_supported

    @property
    def preview_channel_supported(self):
        """Gets the preview_channel_supported of this Capabilities.


        :return: The preview_channel_supported of this Capabilities.
        :rtype: bool
        """
        return self._preview_channel_supported

    @preview_channel_supported.setter
    def preview_channel_supported(self, preview_channel_supported):
        """Sets the preview_channel_supported of this Capabilities.


        :param preview_channel_supported: The preview_channel_supported of this Capabilities.
        :type preview_channel_supported: bool
        """
        if preview_channel_supported is None:
            raise ValueError("Invalid value for `preview_channel_supported`, must not be `None`")

        self._preview_channel_supported = preview_channel_supported

    @property
    def reboot_supported(self):
        """Gets the reboot_supported of this Capabilities.


        :return: The reboot_supported of this Capabilities.
        :rtype: bool
        """
        return self._reboot_supported

    @reboot_supported.setter
    def reboot_supported(self, reboot_supported):
        """Sets the reboot_supported of this Capabilities.


        :param reboot_supported: The reboot_supported of this Capabilities.
        :type reboot_supported: bool
        """
        if reboot_supported is None:
            raise ValueError("Invalid value for `reboot_supported`, must not be `None`")

        self._reboot_supported = reboot_supported

    @property
    def remote_ducking_supported(self):
        """Gets the remote_ducking_supported of this Capabilities.


        :return: The remote_ducking_supported of this Capabilities.
        :rtype: bool
        """
        return self._remote_ducking_supported

    @remote_ducking_supported.setter
    def remote_ducking_supported(self, remote_ducking_supported):
        """Sets the remote_ducking_supported of this Capabilities.


        :param remote_ducking_supported: The remote_ducking_supported of this Capabilities.
        :type remote_ducking_supported: bool
        """
        if remote_ducking_supported is None:
            raise ValueError("Invalid value for `remote_ducking_supported`, must not be `None`")

        self._remote_ducking_supported = remote_ducking_supported

    @property
    def separate_tts_volume_supported(self):
        """Gets the separate_tts_volume_supported of this Capabilities.


        :return: The separate_tts_volume_supported of this Capabilities.
        :rtype: bool
        """
        return self._separate_tts_volume_supported

    @separate_tts_volume_supported.setter
    def separate_tts_volume_supported(self, separate_tts_volume_supported):
        """Sets the separate_tts_volume_supported of this Capabilities.


        :param separate_tts_volume_supported: The separate_tts_volume_supported of this Capabilities.
        :type separate_tts_volume_supported: bool
        """
        if separate_tts_volume_supported is None:
            raise ValueError("Invalid value for `separate_tts_volume_supported`, must not be `None`")

        self._separate_tts_volume_supported = separate_tts_volume_supported

    @property
    def setup_supported(self):
        """Gets the setup_supported of this Capabilities.


        :return: The setup_supported of this Capabilities.
        :rtype: bool
        """
        return self._setup_supported

    @setup_supported.setter
    def setup_supported(self, setup_supported):
        """Sets the setup_supported of this Capabilities.


        :param setup_supported: The setup_supported of this Capabilities.
        :type setup_supported: bool
        """
        if setup_supported is None:
            raise ValueError("Invalid value for `setup_supported`, must not be `None`")

        self._setup_supported = setup_supported

    @property
    def sleep_mode_supported(self):
        """Gets the sleep_mode_supported of this Capabilities.


        :return: The sleep_mode_supported of this Capabilities.
        :rtype: bool
        """
        return self._sleep_mode_supported

    @sleep_mode_supported.setter
    def sleep_mode_supported(self, sleep_mode_supported):
        """Sets the sleep_mode_supported of this Capabilities.


        :param sleep_mode_supported: The sleep_mode_supported of this Capabilities.
        :type sleep_mode_supported: bool
        """
        if sleep_mode_supported is None:
            raise ValueError("Invalid value for `sleep_mode_supported`, must not be `None`")

        self._sleep_mode_supported = sleep_mode_supported

    @property
    def stats_supported(self):
        """Gets the stats_supported of this Capabilities.


        :return: The stats_supported of this Capabilities.
        :rtype: bool
        """
        return self._stats_supported

    @stats_supported.setter
    def stats_supported(self, stats_supported):
        """Sets the stats_supported of this Capabilities.


        :param stats_supported: The stats_supported of this Capabilities.
        :type stats_supported: bool
        """
        if stats_supported is None:
            raise ValueError("Invalid value for `stats_supported`, must not be `None`")

        self._stats_supported = stats_supported

    @property
    def system_sound_effects_supported(self):
        """Gets the system_sound_effects_supported of this Capabilities.


        :return: The system_sound_effects_supported of this Capabilities.
        :rtype: bool
        """
        return self._system_sound_effects_supported

    @system_sound_effects_supported.setter
    def system_sound_effects_supported(self, system_sound_effects_supported):
        """Sets the system_sound_effects_supported of this Capabilities.


        :param system_sound_effects_supported: The system_sound_effects_supported of this Capabilities.
        :type system_sound_effects_supported: bool
        """
        if system_sound_effects_supported is None:
            raise ValueError("Invalid value for `system_sound_effects_supported`, must not be `None`")

        self._system_sound_effects_supported = system_sound_effects_supported

    @property
    def user_eq_supported(self):
        """Gets the user_eq_supported of this Capabilities.


        :return: The user_eq_supported of this Capabilities.
        :rtype: bool
        """
        return self._user_eq_supported

    @user_eq_supported.setter
    def user_eq_supported(self, user_eq_supported):
        """Sets the user_eq_supported of this Capabilities.


        :param user_eq_supported: The user_eq_supported of this Capabilities.
        :type user_eq_supported: bool
        """
        if user_eq_supported is None:
            raise ValueError("Invalid value for `user_eq_supported`, must not be `None`")

        self._user_eq_supported = user_eq_supported

    @property
    def wifi_auto_save_supported(self):
        """Gets the wifi_auto_save_supported of this Capabilities.


        :return: The wifi_auto_save_supported of this Capabilities.
        :rtype: bool
        """
        return self._wifi_auto_save_supported

    @wifi_auto_save_supported.setter
    def wifi_auto_save_supported(self, wifi_auto_save_supported):
        """Sets the wifi_auto_save_supported of this Capabilities.


        :param wifi_auto_save_supported: The wifi_auto_save_supported of this Capabilities.
        :type wifi_auto_save_supported: bool
        """
        if wifi_auto_save_supported is None:
            raise ValueError("Invalid value for `wifi_auto_save_supported`, must not be `None`")

        self._wifi_auto_save_supported = wifi_auto_save_supported

    @property
    def wifi_regulatory_domain_locked(self):
        """Gets the wifi_regulatory_domain_locked of this Capabilities.


        :return: The wifi_regulatory_domain_locked of this Capabilities.
        :rtype: bool
        """
        return self._wifi_regulatory_domain_locked

    @wifi_regulatory_domain_locked.setter
    def wifi_regulatory_domain_locked(self, wifi_regulatory_domain_locked):
        """Sets the wifi_regulatory_domain_locked of this Capabilities.


        :param wifi_regulatory_domain_locked: The wifi_regulatory_domain_locked of this Capabilities.
        :type wifi_regulatory_domain_locked: bool
        """
        if wifi_regulatory_domain_locked is None:
            raise ValueError("Invalid value for `wifi_regulatory_domain_locked`, must not be `None`")

        self._wifi_regulatory_domain_locked = wifi_regulatory_domain_locked

    @property
    def wifi_supported(self):
        """Gets the wifi_supported of this Capabilities.


        :return: The wifi_supported of this Capabilities.
        :rtype: bool
        """
        return self._wifi_supported

    @wifi_supported.setter
    def wifi_supported(self, wifi_supported):
        """Sets the wifi_supported of this Capabilities.


        :param wifi_supported: The wifi_supported of this Capabilities.
        :type wifi_supported: bool
        """
        if wifi_supported is None:
            raise ValueError("Invalid value for `wifi_supported`, must not be `None`")

        self._wifi_supported = wifi_supported
