# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device import Device
from openapi_server import util


class ConnectedDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: Device=None, enabled_profiles: int=None):
        """ConnectedDevice - a model defined in OpenAPI

        :param device: The device of this ConnectedDevice.
        :param enabled_profiles: The enabled_profiles of this ConnectedDevice.
        """
        self.openapi_types = {
            'device': Device,
            'enabled_profiles': int
        }

        self.attribute_map = {
            'device': 'device',
            'enabled_profiles': 'enabled_profiles'
        }

        self._device = device
        self._enabled_profiles = enabled_profiles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectedDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectedDevice of this ConnectedDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this ConnectedDevice.


        :return: The device of this ConnectedDevice.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ConnectedDevice.


        :param device: The device of this ConnectedDevice.
        :type device: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def enabled_profiles(self):
        """Gets the enabled_profiles of this ConnectedDevice.


        :return: The enabled_profiles of this ConnectedDevice.
        :rtype: int
        """
        return self._enabled_profiles

    @enabled_profiles.setter
    def enabled_profiles(self, enabled_profiles):
        """Sets the enabled_profiles of this ConnectedDevice.


        :param enabled_profiles: The enabled_profiles of this ConnectedDevice.
        :type enabled_profiles: int
        """
        if enabled_profiles is None:
            raise ValueError("Invalid value for `enabled_profiles`, must not be `None`")

        self._enabled_profiles = enabled_profiles
