# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Example11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_device_id: str=None, certificate: str=None, signed_data: str=None):
        """Example11 - a model defined in OpenAPI

        :param app_device_id: The app_device_id of this Example11.
        :param certificate: The certificate of this Example11.
        :param signed_data: The signed_data of this Example11.
        """
        self.openapi_types = {
            'app_device_id': str,
            'certificate': str,
            'signed_data': str
        }

        self.attribute_map = {
            'app_device_id': 'app_device_id',
            'certificate': 'certificate',
            'signed_data': 'signed_data'
        }

        self._app_device_id = app_device_id
        self._certificate = certificate
        self._signed_data = signed_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example11 of this Example11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_device_id(self):
        """Gets the app_device_id of this Example11.


        :return: The app_device_id of this Example11.
        :rtype: str
        """
        return self._app_device_id

    @app_device_id.setter
    def app_device_id(self, app_device_id):
        """Sets the app_device_id of this Example11.


        :param app_device_id: The app_device_id of this Example11.
        :type app_device_id: str
        """
        if app_device_id is None:
            raise ValueError("Invalid value for `app_device_id`, must not be `None`")

        self._app_device_id = app_device_id

    @property
    def certificate(self):
        """Gets the certificate of this Example11.


        :return: The certificate of this Example11.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this Example11.


        :param certificate: The certificate of this Example11.
        :type certificate: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def signed_data(self):
        """Gets the signed_data of this Example11.


        :return: The signed_data of this Example11.
        :rtype: str
        """
        return self._signed_data

    @signed_data.setter
    def signed_data(self, signed_data):
        """Sets the signed_data of this Example11.


        :param signed_data: The signed_data of this Example11.
        :type signed_data: str
        """
        if signed_data is None:
            raise ValueError("Invalid value for `signed_data`, must not be `None`")

        self._signed_data = signed_data
