# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connected_device import ConnectedDevice
from openapi_server.models.remote_sink import RemoteSink
from openapi_server import util


class Example110(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_mode: int=None, connected_devices: List[ConnectedDevice]=None, connecting_devices: List[str]=None, discovery_enabled: bool=None, remote_sink: RemoteSink=None, scanning_enabled: bool=None):
        """Example110 - a model defined in OpenAPI

        :param audio_mode: The audio_mode of this Example110.
        :param connected_devices: The connected_devices of this Example110.
        :param connecting_devices: The connecting_devices of this Example110.
        :param discovery_enabled: The discovery_enabled of this Example110.
        :param remote_sink: The remote_sink of this Example110.
        :param scanning_enabled: The scanning_enabled of this Example110.
        """
        self.openapi_types = {
            'audio_mode': int,
            'connected_devices': List[ConnectedDevice],
            'connecting_devices': List[str],
            'discovery_enabled': bool,
            'remote_sink': RemoteSink,
            'scanning_enabled': bool
        }

        self.attribute_map = {
            'audio_mode': 'audio_mode',
            'connected_devices': 'connected_devices',
            'connecting_devices': 'connecting_devices',
            'discovery_enabled': 'discovery_enabled',
            'remote_sink': 'remote_sink',
            'scanning_enabled': 'scanning_enabled'
        }

        self._audio_mode = audio_mode
        self._connected_devices = connected_devices
        self._connecting_devices = connecting_devices
        self._discovery_enabled = discovery_enabled
        self._remote_sink = remote_sink
        self._scanning_enabled = scanning_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Example110':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Example110 of this Example110.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_mode(self):
        """Gets the audio_mode of this Example110.


        :return: The audio_mode of this Example110.
        :rtype: int
        """
        return self._audio_mode

    @audio_mode.setter
    def audio_mode(self, audio_mode):
        """Sets the audio_mode of this Example110.


        :param audio_mode: The audio_mode of this Example110.
        :type audio_mode: int
        """
        if audio_mode is None:
            raise ValueError("Invalid value for `audio_mode`, must not be `None`")

        self._audio_mode = audio_mode

    @property
    def connected_devices(self):
        """Gets the connected_devices of this Example110.


        :return: The connected_devices of this Example110.
        :rtype: List[ConnectedDevice]
        """
        return self._connected_devices

    @connected_devices.setter
    def connected_devices(self, connected_devices):
        """Sets the connected_devices of this Example110.


        :param connected_devices: The connected_devices of this Example110.
        :type connected_devices: List[ConnectedDevice]
        """
        if connected_devices is None:
            raise ValueError("Invalid value for `connected_devices`, must not be `None`")

        self._connected_devices = connected_devices

    @property
    def connecting_devices(self):
        """Gets the connecting_devices of this Example110.


        :return: The connecting_devices of this Example110.
        :rtype: List[str]
        """
        return self._connecting_devices

    @connecting_devices.setter
    def connecting_devices(self, connecting_devices):
        """Sets the connecting_devices of this Example110.


        :param connecting_devices: The connecting_devices of this Example110.
        :type connecting_devices: List[str]
        """
        if connecting_devices is None:
            raise ValueError("Invalid value for `connecting_devices`, must not be `None`")

        self._connecting_devices = connecting_devices

    @property
    def discovery_enabled(self):
        """Gets the discovery_enabled of this Example110.


        :return: The discovery_enabled of this Example110.
        :rtype: bool
        """
        return self._discovery_enabled

    @discovery_enabled.setter
    def discovery_enabled(self, discovery_enabled):
        """Sets the discovery_enabled of this Example110.


        :param discovery_enabled: The discovery_enabled of this Example110.
        :type discovery_enabled: bool
        """
        if discovery_enabled is None:
            raise ValueError("Invalid value for `discovery_enabled`, must not be `None`")

        self._discovery_enabled = discovery_enabled

    @property
    def remote_sink(self):
        """Gets the remote_sink of this Example110.


        :return: The remote_sink of this Example110.
        :rtype: RemoteSink
        """
        return self._remote_sink

    @remote_sink.setter
    def remote_sink(self, remote_sink):
        """Sets the remote_sink of this Example110.


        :param remote_sink: The remote_sink of this Example110.
        :type remote_sink: RemoteSink
        """
        if remote_sink is None:
            raise ValueError("Invalid value for `remote_sink`, must not be `None`")

        self._remote_sink = remote_sink

    @property
    def scanning_enabled(self):
        """Gets the scanning_enabled of this Example110.


        :return: The scanning_enabled of this Example110.
        :rtype: bool
        """
        return self._scanning_enabled

    @scanning_enabled.setter
    def scanning_enabled(self, scanning_enabled):
        """Sets the scanning_enabled of this Example110.


        :param scanning_enabled: The scanning_enabled of this Example110.
        :type scanning_enabled: bool
        """
        if scanning_enabled is None:
            raise ValueError("Invalid value for `scanning_enabled`, must not be `None`")

        self._scanning_enabled = scanning_enabled
