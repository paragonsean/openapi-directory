# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessibilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_enabled: bool=None, hotword_enabled: bool=None):
        """AccessibilityRequest - a model defined in OpenAPI

        :param endpoint_enabled: The endpoint_enabled of this AccessibilityRequest.
        :param hotword_enabled: The hotword_enabled of this AccessibilityRequest.
        """
        self.openapi_types = {
            'endpoint_enabled': bool,
            'hotword_enabled': bool
        }

        self.attribute_map = {
            'endpoint_enabled': 'endpoint_enabled',
            'hotword_enabled': 'hotword_enabled'
        }

        self._endpoint_enabled = endpoint_enabled
        self._hotword_enabled = hotword_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessibilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessibilityRequest of this AccessibilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_enabled(self):
        """Gets the endpoint_enabled of this AccessibilityRequest.


        :return: The endpoint_enabled of this AccessibilityRequest.
        :rtype: bool
        """
        return self._endpoint_enabled

    @endpoint_enabled.setter
    def endpoint_enabled(self, endpoint_enabled):
        """Sets the endpoint_enabled of this AccessibilityRequest.


        :param endpoint_enabled: The endpoint_enabled of this AccessibilityRequest.
        :type endpoint_enabled: bool
        """
        if endpoint_enabled is None:
            raise ValueError("Invalid value for `endpoint_enabled`, must not be `None`")

        self._endpoint_enabled = endpoint_enabled

    @property
    def hotword_enabled(self):
        """Gets the hotword_enabled of this AccessibilityRequest.


        :return: The hotword_enabled of this AccessibilityRequest.
        :rtype: bool
        """
        return self._hotword_enabled

    @hotword_enabled.setter
    def hotword_enabled(self, hotword_enabled):
        """Sets the hotword_enabled of this AccessibilityRequest.


        :param hotword_enabled: The hotword_enabled of this AccessibilityRequest.
        :type hotword_enabled: bool
        """
        if hotword_enabled is None:
            raise ValueError("Invalid value for `hotword_enabled`, must not be `None`")

        self._hotword_enabled = hotword_enabled
