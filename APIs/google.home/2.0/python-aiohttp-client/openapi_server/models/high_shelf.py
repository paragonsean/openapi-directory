# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HighShelf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: int=None, gain_db: int=None, quality: float=None):
        """HighShelf - a model defined in OpenAPI

        :param frequency: The frequency of this HighShelf.
        :param gain_db: The gain_db of this HighShelf.
        :param quality: The quality of this HighShelf.
        """
        self.openapi_types = {
            'frequency': int,
            'gain_db': int,
            'quality': float
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'gain_db': 'gain_db',
            'quality': 'quality'
        }

        self._frequency = frequency
        self._gain_db = gain_db
        self._quality = quality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HighShelf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HighShelf of this HighShelf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this HighShelf.


        :return: The frequency of this HighShelf.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this HighShelf.


        :param frequency: The frequency of this HighShelf.
        :type frequency: int
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def gain_db(self):
        """Gets the gain_db of this HighShelf.


        :return: The gain_db of this HighShelf.
        :rtype: int
        """
        return self._gain_db

    @gain_db.setter
    def gain_db(self, gain_db):
        """Sets the gain_db of this HighShelf.


        :param gain_db: The gain_db of this HighShelf.
        :type gain_db: int
        """
        if gain_db is None:
            raise ValueError("Invalid value for `gain_db`, must not be `None`")

        self._gain_db = gain_db

    @property
    def quality(self):
        """Gets the quality of this HighShelf.


        :return: The quality of this HighShelf.
        :rtype: float
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this HighShelf.


        :param quality: The quality of this HighShelf.
        :type quality: float
        """
        if quality is None:
            raise ValueError("Invalid value for `quality`, must not be `None`")

        self._quality = quality
