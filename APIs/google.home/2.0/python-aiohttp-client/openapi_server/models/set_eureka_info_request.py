# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.opt_in1 import OptIn1
from openapi_server.models.settings1 import Settings1
from openapi_server import util


class SetEurekaInfoRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, opt_in: OptIn1=None, settings: Settings1=None):
        """SetEurekaInfoRequest - a model defined in OpenAPI

        :param name: The name of this SetEurekaInfoRequest.
        :param opt_in: The opt_in of this SetEurekaInfoRequest.
        :param settings: The settings of this SetEurekaInfoRequest.
        """
        self.openapi_types = {
            'name': str,
            'opt_in': OptIn1,
            'settings': Settings1
        }

        self.attribute_map = {
            'name': 'name',
            'opt_in': 'opt_in',
            'settings': 'settings'
        }

        self._name = name
        self._opt_in = opt_in
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetEurekaInfoRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetEurekaInfoRequest of this SetEurekaInfoRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SetEurekaInfoRequest.


        :return: The name of this SetEurekaInfoRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SetEurekaInfoRequest.


        :param name: The name of this SetEurekaInfoRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def opt_in(self):
        """Gets the opt_in of this SetEurekaInfoRequest.


        :return: The opt_in of this SetEurekaInfoRequest.
        :rtype: OptIn1
        """
        return self._opt_in

    @opt_in.setter
    def opt_in(self, opt_in):
        """Sets the opt_in of this SetEurekaInfoRequest.


        :param opt_in: The opt_in of this SetEurekaInfoRequest.
        :type opt_in: OptIn1
        """
        if opt_in is None:
            raise ValueError("Invalid value for `opt_in`, must not be `None`")

        self._opt_in = opt_in

    @property
    def settings(self):
        """Gets the settings of this SetEurekaInfoRequest.


        :return: The settings of this SetEurekaInfoRequest.
        :rtype: Settings1
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this SetEurekaInfoRequest.


        :param settings: The settings of this SetEurekaInfoRequest.
        :type settings: Settings1
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings
