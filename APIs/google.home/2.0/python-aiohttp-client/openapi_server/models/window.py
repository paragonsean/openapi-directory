# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Window(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days: List[int]=None, length_hours: int=None, start_hour: int=None):
        """Window - a model defined in OpenAPI

        :param days: The days of this Window.
        :param length_hours: The length_hours of this Window.
        :param start_hour: The start_hour of this Window.
        """
        self.openapi_types = {
            'days': List[int],
            'length_hours': int,
            'start_hour': int
        }

        self.attribute_map = {
            'days': 'days',
            'length_hours': 'length_hours',
            'start_hour': 'start_hour'
        }

        self._days = days
        self._length_hours = length_hours
        self._start_hour = start_hour

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Window':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Window of this Window.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days(self):
        """Gets the days of this Window.


        :return: The days of this Window.
        :rtype: List[int]
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this Window.


        :param days: The days of this Window.
        :type days: List[int]
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")

        self._days = days

    @property
    def length_hours(self):
        """Gets the length_hours of this Window.


        :return: The length_hours of this Window.
        :rtype: int
        """
        return self._length_hours

    @length_hours.setter
    def length_hours(self, length_hours):
        """Sets the length_hours of this Window.


        :param length_hours: The length_hours of this Window.
        :type length_hours: int
        """
        if length_hours is None:
            raise ValueError("Invalid value for `length_hours`, must not be `None`")

        self._length_hours = length_hours

    @property
    def start_hour(self):
        """Gets the start_hour of this Window.


        :return: The start_hour of this Window.
        :rtype: int
        """
        return self._start_hour

    @start_hour.setter
    def start_hour(self, start_hour):
        """Sets the start_hour of this Window.


        :param start_hour: The start_hour of this Window.
        :type start_hour: int
        """
        if start_hour is None:
            raise ValueError("Invalid value for `start_hour`, must not be `None`")

        self._start_hour = start_hour
