# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Timezone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_string: str=None, offset: int=None):
        """Timezone - a model defined in OpenAPI

        :param display_string: The display_string of this Timezone.
        :param offset: The offset of this Timezone.
        """
        self.openapi_types = {
            'display_string': str,
            'offset': int
        }

        self.attribute_map = {
            'display_string': 'display_string',
            'offset': 'offset'
        }

        self._display_string = display_string
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Timezone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Timezone of this Timezone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_string(self):
        """Gets the display_string of this Timezone.


        :return: The display_string of this Timezone.
        :rtype: str
        """
        return self._display_string

    @display_string.setter
    def display_string(self, display_string):
        """Sets the display_string of this Timezone.


        :param display_string: The display_string of this Timezone.
        :type display_string: str
        """
        if display_string is None:
            raise ValueError("Invalid value for `display_string`, must not be `None`")

        self._display_string = display_string

    @property
    def offset(self):
        """Gets the offset of this Timezone.


        :return: The offset of this Timezone.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Timezone.


        :param offset: The offset of this Timezone.
        :type offset: int
        """
        if offset is None:
            raise ValueError("Invalid value for `offset`, must not be `None`")

        self._offset = offset
