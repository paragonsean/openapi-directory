/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExample1.h
 *
 * 
 */

#ifndef OAIExample1_H
#define OAIExample1_H

#include <QJsonObject>

#include "OAIAogh.h"
#include "OAIAudio.h"
#include "OAIBuildInfo.h"
#include "OAIDetail.h"
#include "OAIDeviceInfo.h"
#include "OAIMultizone.h"
#include "OAINet.h"
#include "OAINightModeParams.h"
#include "OAIOpencast.h"
#include "OAIOptIn.h"
#include "OAIProxy.h"
#include "OAISettings.h"
#include "OAISetup.h"
#include "OAISign.h"
#include "OAIUserEq.h"
#include "OAIWifi.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAogh;
class OAIAudio;
class OAIBuildInfo;
class OAIDetail;
class OAIDeviceInfo;
class OAIMultizone;
class OAINet;
class OAINightModeParams;
class OAIOpencast;
class OAIOptIn;
class OAIProxy;
class OAISettings;
class OAISetup;
class OAISign;
class OAIUserEq;
class OAIWifi;

class OAIExample1 : public OAIObject {
public:
    OAIExample1();
    OAIExample1(QString json);
    ~OAIExample1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAogh getAogh() const;
    void setAogh(const OAIAogh &aogh);
    bool is_aogh_Set() const;
    bool is_aogh_Valid() const;

    OAIAudio getAudio() const;
    void setAudio(const OAIAudio &audio);
    bool is_audio_Set() const;
    bool is_audio_Valid() const;

    OAIBuildInfo getBuildInfo() const;
    void setBuildInfo(const OAIBuildInfo &build_info);
    bool is_build_info_Set() const;
    bool is_build_info_Valid() const;

    OAIDetail getDetail() const;
    void setDetail(const OAIDetail &detail);
    bool is_detail_Set() const;
    bool is_detail_Valid() const;

    OAIDeviceInfo getDeviceInfo() const;
    void setDeviceInfo(const OAIDeviceInfo &device_info);
    bool is_device_info_Set() const;
    bool is_device_info_Valid() const;

    OAIMultizone getMultizone() const;
    void setMultizone(const OAIMultizone &multizone);
    bool is_multizone_Set() const;
    bool is_multizone_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINet getNet() const;
    void setNet(const OAINet &net);
    bool is_net_Set() const;
    bool is_net_Valid() const;

    OAINightModeParams getNightModeParams() const;
    void setNightModeParams(const OAINightModeParams &night_mode_params);
    bool is_night_mode_params_Set() const;
    bool is_night_mode_params_Valid() const;

    OAIOpencast getOpencast() const;
    void setOpencast(const OAIOpencast &opencast);
    bool is_opencast_Set() const;
    bool is_opencast_Valid() const;

    OAIOptIn getOptIn() const;
    void setOptIn(const OAIOptIn &opt_in);
    bool is_opt_in_Set() const;
    bool is_opt_in_Valid() const;

    OAIProxy getProxy() const;
    void setProxy(const OAIProxy &proxy);
    bool is_proxy_Set() const;
    bool is_proxy_Valid() const;

    OAISettings getSettings() const;
    void setSettings(const OAISettings &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    OAISetup getSetup() const;
    void setSetup(const OAISetup &setup);
    bool is_setup_Set() const;
    bool is_setup_Valid() const;

    OAISign getSign() const;
    void setSign(const OAISign &sign);
    bool is_sign_Set() const;
    bool is_sign_Valid() const;

    OAIUserEq getUserEq() const;
    void setUserEq(const OAIUserEq &user_eq);
    bool is_user_eq_Set() const;
    bool is_user_eq_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAIWifi getWifi() const;
    void setWifi(const OAIWifi &wifi);
    bool is_wifi_Set() const;
    bool is_wifi_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAogh m_aogh;
    bool m_aogh_isSet;
    bool m_aogh_isValid;

    OAIAudio m_audio;
    bool m_audio_isSet;
    bool m_audio_isValid;

    OAIBuildInfo m_build_info;
    bool m_build_info_isSet;
    bool m_build_info_isValid;

    OAIDetail m_detail;
    bool m_detail_isSet;
    bool m_detail_isValid;

    OAIDeviceInfo m_device_info;
    bool m_device_info_isSet;
    bool m_device_info_isValid;

    OAIMultizone m_multizone;
    bool m_multizone_isSet;
    bool m_multizone_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINet m_net;
    bool m_net_isSet;
    bool m_net_isValid;

    OAINightModeParams m_night_mode_params;
    bool m_night_mode_params_isSet;
    bool m_night_mode_params_isValid;

    OAIOpencast m_opencast;
    bool m_opencast_isSet;
    bool m_opencast_isValid;

    OAIOptIn m_opt_in;
    bool m_opt_in_isSet;
    bool m_opt_in_isValid;

    OAIProxy m_proxy;
    bool m_proxy_isSet;
    bool m_proxy_isValid;

    OAISettings m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    OAISetup m_setup;
    bool m_setup_isSet;
    bool m_setup_isValid;

    OAISign m_sign;
    bool m_sign_isSet;
    bool m_sign_isValid;

    OAIUserEq m_user_eq;
    bool m_user_eq_isSet;
    bool m_user_eq_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAIWifi m_wifi;
    bool m_wifi_isSet;
    bool m_wifi_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExample1)

#endif // OAIExample1_H
