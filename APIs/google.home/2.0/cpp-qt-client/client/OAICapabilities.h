/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapabilities.h
 *
 * 
 */

#ifndef OAICapabilities_H
#define OAICapabilities_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICapabilities : public OAIObject {
public:
    OAICapabilities();
    OAICapabilities(QString json);
    ~OAICapabilities() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAoghSupported() const;
    void setAoghSupported(const bool &aogh_supported);
    bool is_aogh_supported_Set() const;
    bool is_aogh_supported_Valid() const;

    bool isAssistantSupported() const;
    void setAssistantSupported(const bool &assistant_supported);
    bool is_assistant_supported_Set() const;
    bool is_assistant_supported_Valid() const;

    bool isAudioHdrSupported() const;
    void setAudioHdrSupported(const bool &audio_hdr_supported);
    bool is_audio_hdr_supported_Set() const;
    bool is_audio_hdr_supported_Valid() const;

    bool isAudioSurroundModeSupported() const;
    void setAudioSurroundModeSupported(const bool &audio_surround_mode_supported);
    bool is_audio_surround_mode_supported_Set() const;
    bool is_audio_surround_mode_supported_Valid() const;

    bool isBleSupported() const;
    void setBleSupported(const bool &ble_supported);
    bool is_ble_supported_Set() const;
    bool is_ble_supported_Valid() const;

    bool isBluetoothAudioSinkSupported() const;
    void setBluetoothAudioSinkSupported(const bool &bluetooth_audio_sink_supported);
    bool is_bluetooth_audio_sink_supported_Set() const;
    bool is_bluetooth_audio_sink_supported_Valid() const;

    bool isBluetoothAudioSourceSupported() const;
    void setBluetoothAudioSourceSupported(const bool &bluetooth_audio_source_supported);
    bool is_bluetooth_audio_source_supported_Set() const;
    bool is_bluetooth_audio_source_supported_Valid() const;

    bool isBluetoothSupported() const;
    void setBluetoothSupported(const bool &bluetooth_supported);
    bool is_bluetooth_supported_Set() const;
    bool is_bluetooth_supported_Valid() const;

    bool isCloudcastSupported() const;
    void setCloudcastSupported(const bool &cloudcast_supported);
    bool is_cloudcast_supported_Set() const;
    bool is_cloudcast_supported_Valid() const;

    bool isContentFiltersSupported() const;
    void setContentFiltersSupported(const bool &content_filters_supported);
    bool is_content_filters_supported_Set() const;
    bool is_content_filters_supported_Valid() const;

    bool isDisplaySupported() const;
    void setDisplaySupported(const bool &display_supported);
    bool is_display_supported_Set() const;
    bool is_display_supported_Valid() const;

    bool isFdrSupported() const;
    void setFdrSupported(const bool &fdr_supported);
    bool is_fdr_supported_Set() const;
    bool is_fdr_supported_Valid() const;

    bool isHdmiPrefer50hzSupported() const;
    void setHdmiPrefer50hzSupported(const bool &hdmi_prefer_50hz_supported);
    bool is_hdmi_prefer_50hz_supported_Set() const;
    bool is_hdmi_prefer_50hz_supported_Valid() const;

    bool isHdmiPreferHighFpsSupported() const;
    void setHdmiPreferHighFpsSupported(const bool &hdmi_prefer_high_fps_supported);
    bool is_hdmi_prefer_high_fps_supported_Set() const;
    bool is_hdmi_prefer_high_fps_supported_Valid() const;

    bool isHotspotSupported() const;
    void setHotspotSupported(const bool &hotspot_supported);
    bool is_hotspot_supported_Set() const;
    bool is_hotspot_supported_Valid() const;

    bool isHttpsSetupSupported() const;
    void setHttpsSetupSupported(const bool &https_setup_supported);
    bool is_https_setup_supported_Set() const;
    bool is_https_setup_supported_Valid() const;

    bool isInputManagementSupported() const;
    void setInputManagementSupported(const bool &input_management_supported);
    bool is_input_management_supported_Set() const;
    bool is_input_management_supported_Valid() const;

    bool isKeepHotspotUntilConnectedSupported() const;
    void setKeepHotspotUntilConnectedSupported(const bool &keep_hotspot_until_connected_supported);
    bool is_keep_hotspot_until_connected_supported_Set() const;
    bool is_keep_hotspot_until_connected_supported_Valid() const;

    bool isMultiUserSupported() const;
    void setMultiUserSupported(const bool &multi_user_supported);
    bool is_multi_user_supported_Set() const;
    bool is_multi_user_supported_Valid() const;

    bool isMultichannelGroupSupported() const;
    void setMultichannelGroupSupported(const bool &multichannel_group_supported);
    bool is_multichannel_group_supported_Set() const;
    bool is_multichannel_group_supported_Valid() const;

    bool isMultizoneSupported() const;
    void setMultizoneSupported(const bool &multizone_supported);
    bool is_multizone_supported_Set() const;
    bool is_multizone_supported_Valid() const;

    bool isNightModeSupported() const;
    void setNightModeSupported(const bool &night_mode_supported);
    bool is_night_mode_supported_Set() const;
    bool is_night_mode_supported_Valid() const;

    bool isNightModeSupportedV2() const;
    void setNightModeSupportedV2(const bool &night_mode_supported_v2);
    bool is_night_mode_supported_v2_Set() const;
    bool is_night_mode_supported_v2_Valid() const;

    bool isOpencastSupported() const;
    void setOpencastSupported(const bool &opencast_supported);
    bool is_opencast_supported_Set() const;
    bool is_opencast_supported_Valid() const;

    bool isPreviewChannelSupported() const;
    void setPreviewChannelSupported(const bool &preview_channel_supported);
    bool is_preview_channel_supported_Set() const;
    bool is_preview_channel_supported_Valid() const;

    bool isRebootSupported() const;
    void setRebootSupported(const bool &reboot_supported);
    bool is_reboot_supported_Set() const;
    bool is_reboot_supported_Valid() const;

    bool isRemoteDuckingSupported() const;
    void setRemoteDuckingSupported(const bool &remote_ducking_supported);
    bool is_remote_ducking_supported_Set() const;
    bool is_remote_ducking_supported_Valid() const;

    bool isSeparateTtsVolumeSupported() const;
    void setSeparateTtsVolumeSupported(const bool &separate_tts_volume_supported);
    bool is_separate_tts_volume_supported_Set() const;
    bool is_separate_tts_volume_supported_Valid() const;

    bool isSetupSupported() const;
    void setSetupSupported(const bool &setup_supported);
    bool is_setup_supported_Set() const;
    bool is_setup_supported_Valid() const;

    bool isSleepModeSupported() const;
    void setSleepModeSupported(const bool &sleep_mode_supported);
    bool is_sleep_mode_supported_Set() const;
    bool is_sleep_mode_supported_Valid() const;

    bool isStatsSupported() const;
    void setStatsSupported(const bool &stats_supported);
    bool is_stats_supported_Set() const;
    bool is_stats_supported_Valid() const;

    bool isSystemSoundEffectsSupported() const;
    void setSystemSoundEffectsSupported(const bool &system_sound_effects_supported);
    bool is_system_sound_effects_supported_Set() const;
    bool is_system_sound_effects_supported_Valid() const;

    bool isUserEqSupported() const;
    void setUserEqSupported(const bool &user_eq_supported);
    bool is_user_eq_supported_Set() const;
    bool is_user_eq_supported_Valid() const;

    bool isWifiAutoSaveSupported() const;
    void setWifiAutoSaveSupported(const bool &wifi_auto_save_supported);
    bool is_wifi_auto_save_supported_Set() const;
    bool is_wifi_auto_save_supported_Valid() const;

    bool isWifiRegulatoryDomainLocked() const;
    void setWifiRegulatoryDomainLocked(const bool &wifi_regulatory_domain_locked);
    bool is_wifi_regulatory_domain_locked_Set() const;
    bool is_wifi_regulatory_domain_locked_Valid() const;

    bool isWifiSupported() const;
    void setWifiSupported(const bool &wifi_supported);
    bool is_wifi_supported_Set() const;
    bool is_wifi_supported_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_aogh_supported;
    bool m_aogh_supported_isSet;
    bool m_aogh_supported_isValid;

    bool m_assistant_supported;
    bool m_assistant_supported_isSet;
    bool m_assistant_supported_isValid;

    bool m_audio_hdr_supported;
    bool m_audio_hdr_supported_isSet;
    bool m_audio_hdr_supported_isValid;

    bool m_audio_surround_mode_supported;
    bool m_audio_surround_mode_supported_isSet;
    bool m_audio_surround_mode_supported_isValid;

    bool m_ble_supported;
    bool m_ble_supported_isSet;
    bool m_ble_supported_isValid;

    bool m_bluetooth_audio_sink_supported;
    bool m_bluetooth_audio_sink_supported_isSet;
    bool m_bluetooth_audio_sink_supported_isValid;

    bool m_bluetooth_audio_source_supported;
    bool m_bluetooth_audio_source_supported_isSet;
    bool m_bluetooth_audio_source_supported_isValid;

    bool m_bluetooth_supported;
    bool m_bluetooth_supported_isSet;
    bool m_bluetooth_supported_isValid;

    bool m_cloudcast_supported;
    bool m_cloudcast_supported_isSet;
    bool m_cloudcast_supported_isValid;

    bool m_content_filters_supported;
    bool m_content_filters_supported_isSet;
    bool m_content_filters_supported_isValid;

    bool m_display_supported;
    bool m_display_supported_isSet;
    bool m_display_supported_isValid;

    bool m_fdr_supported;
    bool m_fdr_supported_isSet;
    bool m_fdr_supported_isValid;

    bool m_hdmi_prefer_50hz_supported;
    bool m_hdmi_prefer_50hz_supported_isSet;
    bool m_hdmi_prefer_50hz_supported_isValid;

    bool m_hdmi_prefer_high_fps_supported;
    bool m_hdmi_prefer_high_fps_supported_isSet;
    bool m_hdmi_prefer_high_fps_supported_isValid;

    bool m_hotspot_supported;
    bool m_hotspot_supported_isSet;
    bool m_hotspot_supported_isValid;

    bool m_https_setup_supported;
    bool m_https_setup_supported_isSet;
    bool m_https_setup_supported_isValid;

    bool m_input_management_supported;
    bool m_input_management_supported_isSet;
    bool m_input_management_supported_isValid;

    bool m_keep_hotspot_until_connected_supported;
    bool m_keep_hotspot_until_connected_supported_isSet;
    bool m_keep_hotspot_until_connected_supported_isValid;

    bool m_multi_user_supported;
    bool m_multi_user_supported_isSet;
    bool m_multi_user_supported_isValid;

    bool m_multichannel_group_supported;
    bool m_multichannel_group_supported_isSet;
    bool m_multichannel_group_supported_isValid;

    bool m_multizone_supported;
    bool m_multizone_supported_isSet;
    bool m_multizone_supported_isValid;

    bool m_night_mode_supported;
    bool m_night_mode_supported_isSet;
    bool m_night_mode_supported_isValid;

    bool m_night_mode_supported_v2;
    bool m_night_mode_supported_v2_isSet;
    bool m_night_mode_supported_v2_isValid;

    bool m_opencast_supported;
    bool m_opencast_supported_isSet;
    bool m_opencast_supported_isValid;

    bool m_preview_channel_supported;
    bool m_preview_channel_supported_isSet;
    bool m_preview_channel_supported_isValid;

    bool m_reboot_supported;
    bool m_reboot_supported_isSet;
    bool m_reboot_supported_isValid;

    bool m_remote_ducking_supported;
    bool m_remote_ducking_supported_isSet;
    bool m_remote_ducking_supported_isValid;

    bool m_separate_tts_volume_supported;
    bool m_separate_tts_volume_supported_isSet;
    bool m_separate_tts_volume_supported_isValid;

    bool m_setup_supported;
    bool m_setup_supported_isSet;
    bool m_setup_supported_isValid;

    bool m_sleep_mode_supported;
    bool m_sleep_mode_supported_isSet;
    bool m_sleep_mode_supported_isValid;

    bool m_stats_supported;
    bool m_stats_supported_isSet;
    bool m_stats_supported_isValid;

    bool m_system_sound_effects_supported;
    bool m_system_sound_effects_supported_isSet;
    bool m_system_sound_effects_supported_isValid;

    bool m_user_eq_supported;
    bool m_user_eq_supported_isSet;
    bool m_user_eq_supported_isValid;

    bool m_wifi_auto_save_supported;
    bool m_wifi_auto_save_supported_isSet;
    bool m_wifi_auto_save_supported_isValid;

    bool m_wifi_regulatory_domain_locked;
    bool m_wifi_regulatory_domain_locked_isSet;
    bool m_wifi_regulatory_domain_locked_isValid;

    bool m_wifi_supported;
    bool m_wifi_supported_isSet;
    bool m_wifi_supported_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapabilities)

#endif // OAICapabilities_H
