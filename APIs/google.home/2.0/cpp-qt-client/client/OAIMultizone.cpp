/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultizone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultizone::OAIMultizone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultizone::OAIMultizone() {
    this->initializeModel();
}

OAIMultizone::~OAIMultizone() {}

void OAIMultizone::initializeModel() {

    m_audio_output_delay_isSet = false;
    m_audio_output_delay_isValid = false;

    m_audio_output_delay_hdmi_isSet = false;
    m_audio_output_delay_hdmi_isValid = false;

    m_audio_output_delay_oem_isSet = false;
    m_audio_output_delay_oem_isValid = false;

    m_aux_in_group_isSet = false;
    m_aux_in_group_isValid = false;

    m_dynamic_groups_isSet = false;
    m_dynamic_groups_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_multichannel_status_isSet = false;
    m_multichannel_status_isValid = false;
}

void OAIMultizone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultizone::fromJsonObject(QJsonObject json) {

    m_audio_output_delay_isValid = ::OpenAPI::fromJsonValue(m_audio_output_delay, json[QString("audio_output_delay")]);
    m_audio_output_delay_isSet = !json[QString("audio_output_delay")].isNull() && m_audio_output_delay_isValid;

    m_audio_output_delay_hdmi_isValid = ::OpenAPI::fromJsonValue(m_audio_output_delay_hdmi, json[QString("audio_output_delay_hdmi")]);
    m_audio_output_delay_hdmi_isSet = !json[QString("audio_output_delay_hdmi")].isNull() && m_audio_output_delay_hdmi_isValid;

    m_audio_output_delay_oem_isValid = ::OpenAPI::fromJsonValue(m_audio_output_delay_oem, json[QString("audio_output_delay_oem")]);
    m_audio_output_delay_oem_isSet = !json[QString("audio_output_delay_oem")].isNull() && m_audio_output_delay_oem_isValid;

    m_aux_in_group_isValid = ::OpenAPI::fromJsonValue(m_aux_in_group, json[QString("aux_in_group")]);
    m_aux_in_group_isSet = !json[QString("aux_in_group")].isNull() && m_aux_in_group_isValid;

    m_dynamic_groups_isValid = ::OpenAPI::fromJsonValue(m_dynamic_groups, json[QString("dynamic_groups")]);
    m_dynamic_groups_isSet = !json[QString("dynamic_groups")].isNull() && m_dynamic_groups_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_multichannel_status_isValid = ::OpenAPI::fromJsonValue(m_multichannel_status, json[QString("multichannel_status")]);
    m_multichannel_status_isSet = !json[QString("multichannel_status")].isNull() && m_multichannel_status_isValid;
}

QString OAIMultizone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultizone::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_output_delay_isSet) {
        obj.insert(QString("audio_output_delay"), ::OpenAPI::toJsonValue(m_audio_output_delay));
    }
    if (m_audio_output_delay_hdmi_isSet) {
        obj.insert(QString("audio_output_delay_hdmi"), ::OpenAPI::toJsonValue(m_audio_output_delay_hdmi));
    }
    if (m_audio_output_delay_oem_isSet) {
        obj.insert(QString("audio_output_delay_oem"), ::OpenAPI::toJsonValue(m_audio_output_delay_oem));
    }
    if (m_aux_in_group_isSet) {
        obj.insert(QString("aux_in_group"), ::OpenAPI::toJsonValue(m_aux_in_group));
    }
    if (m_dynamic_groups.size() > 0) {
        obj.insert(QString("dynamic_groups"), ::OpenAPI::toJsonValue(m_dynamic_groups));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_multichannel_status_isSet) {
        obj.insert(QString("multichannel_status"), ::OpenAPI::toJsonValue(m_multichannel_status));
    }
    return obj;
}

qint32 OAIMultizone::getAudioOutputDelay() const {
    return m_audio_output_delay;
}
void OAIMultizone::setAudioOutputDelay(const qint32 &audio_output_delay) {
    m_audio_output_delay = audio_output_delay;
    m_audio_output_delay_isSet = true;
}

bool OAIMultizone::is_audio_output_delay_Set() const{
    return m_audio_output_delay_isSet;
}

bool OAIMultizone::is_audio_output_delay_Valid() const{
    return m_audio_output_delay_isValid;
}

qint32 OAIMultizone::getAudioOutputDelayHdmi() const {
    return m_audio_output_delay_hdmi;
}
void OAIMultizone::setAudioOutputDelayHdmi(const qint32 &audio_output_delay_hdmi) {
    m_audio_output_delay_hdmi = audio_output_delay_hdmi;
    m_audio_output_delay_hdmi_isSet = true;
}

bool OAIMultizone::is_audio_output_delay_hdmi_Set() const{
    return m_audio_output_delay_hdmi_isSet;
}

bool OAIMultizone::is_audio_output_delay_hdmi_Valid() const{
    return m_audio_output_delay_hdmi_isValid;
}

qint32 OAIMultizone::getAudioOutputDelayOem() const {
    return m_audio_output_delay_oem;
}
void OAIMultizone::setAudioOutputDelayOem(const qint32 &audio_output_delay_oem) {
    m_audio_output_delay_oem = audio_output_delay_oem;
    m_audio_output_delay_oem_isSet = true;
}

bool OAIMultizone::is_audio_output_delay_oem_Set() const{
    return m_audio_output_delay_oem_isSet;
}

bool OAIMultizone::is_audio_output_delay_oem_Valid() const{
    return m_audio_output_delay_oem_isValid;
}

QString OAIMultizone::getAuxInGroup() const {
    return m_aux_in_group;
}
void OAIMultizone::setAuxInGroup(const QString &aux_in_group) {
    m_aux_in_group = aux_in_group;
    m_aux_in_group_isSet = true;
}

bool OAIMultizone::is_aux_in_group_Set() const{
    return m_aux_in_group_isSet;
}

bool OAIMultizone::is_aux_in_group_Valid() const{
    return m_aux_in_group_isValid;
}

QList<QString> OAIMultizone::getDynamicGroups() const {
    return m_dynamic_groups;
}
void OAIMultizone::setDynamicGroups(const QList<QString> &dynamic_groups) {
    m_dynamic_groups = dynamic_groups;
    m_dynamic_groups_isSet = true;
}

bool OAIMultizone::is_dynamic_groups_Set() const{
    return m_dynamic_groups_isSet;
}

bool OAIMultizone::is_dynamic_groups_Valid() const{
    return m_dynamic_groups_isValid;
}

QList<QString> OAIMultizone::getGroups() const {
    return m_groups;
}
void OAIMultizone::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIMultizone::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIMultizone::is_groups_Valid() const{
    return m_groups_isValid;
}

qint32 OAIMultizone::getMultichannelStatus() const {
    return m_multichannel_status;
}
void OAIMultizone::setMultichannelStatus(const qint32 &multichannel_status) {
    m_multichannel_status = multichannel_status;
    m_multichannel_status_isSet = true;
}

bool OAIMultizone::is_multichannel_status_Set() const{
    return m_multichannel_status_isSet;
}

bool OAIMultizone::is_multichannel_status_Valid() const{
    return m_multichannel_status_isValid;
}

bool OAIMultizone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_output_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_output_delay_hdmi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_output_delay_oem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aux_in_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_multichannel_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultizone::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_output_delay_isValid && m_audio_output_delay_hdmi_isValid && m_audio_output_delay_oem_isValid && m_aux_in_group_isValid && m_dynamic_groups_isValid && m_groups_isValid && m_multichannel_status_isValid && true;
}

} // namespace OpenAPI
