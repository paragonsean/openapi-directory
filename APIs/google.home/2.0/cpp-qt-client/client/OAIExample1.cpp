/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExample1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExample1::OAIExample1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExample1::OAIExample1() {
    this->initializeModel();
}

OAIExample1::~OAIExample1() {}

void OAIExample1::initializeModel() {

    m_aogh_isSet = false;
    m_aogh_isValid = false;

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_build_info_isSet = false;
    m_build_info_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_device_info_isSet = false;
    m_device_info_isValid = false;

    m_multizone_isSet = false;
    m_multizone_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_net_isSet = false;
    m_net_isValid = false;

    m_night_mode_params_isSet = false;
    m_night_mode_params_isValid = false;

    m_opencast_isSet = false;
    m_opencast_isValid = false;

    m_opt_in_isSet = false;
    m_opt_in_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_setup_isSet = false;
    m_setup_isValid = false;

    m_sign_isSet = false;
    m_sign_isValid = false;

    m_user_eq_isSet = false;
    m_user_eq_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_wifi_isSet = false;
    m_wifi_isValid = false;
}

void OAIExample1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExample1::fromJsonObject(QJsonObject json) {

    m_aogh_isValid = ::OpenAPI::fromJsonValue(m_aogh, json[QString("aogh")]);
    m_aogh_isSet = !json[QString("aogh")].isNull() && m_aogh_isValid;

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_build_info_isValid = ::OpenAPI::fromJsonValue(m_build_info, json[QString("build_info")]);
    m_build_info_isSet = !json[QString("build_info")].isNull() && m_build_info_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_device_info_isValid = ::OpenAPI::fromJsonValue(m_device_info, json[QString("device_info")]);
    m_device_info_isSet = !json[QString("device_info")].isNull() && m_device_info_isValid;

    m_multizone_isValid = ::OpenAPI::fromJsonValue(m_multizone, json[QString("multizone")]);
    m_multizone_isSet = !json[QString("multizone")].isNull() && m_multizone_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_net_isValid = ::OpenAPI::fromJsonValue(m_net, json[QString("net")]);
    m_net_isSet = !json[QString("net")].isNull() && m_net_isValid;

    m_night_mode_params_isValid = ::OpenAPI::fromJsonValue(m_night_mode_params, json[QString("night_mode_params")]);
    m_night_mode_params_isSet = !json[QString("night_mode_params")].isNull() && m_night_mode_params_isValid;

    m_opencast_isValid = ::OpenAPI::fromJsonValue(m_opencast, json[QString("opencast")]);
    m_opencast_isSet = !json[QString("opencast")].isNull() && m_opencast_isValid;

    m_opt_in_isValid = ::OpenAPI::fromJsonValue(m_opt_in, json[QString("opt_in")]);
    m_opt_in_isSet = !json[QString("opt_in")].isNull() && m_opt_in_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_setup_isValid = ::OpenAPI::fromJsonValue(m_setup, json[QString("setup")]);
    m_setup_isSet = !json[QString("setup")].isNull() && m_setup_isValid;

    m_sign_isValid = ::OpenAPI::fromJsonValue(m_sign, json[QString("sign")]);
    m_sign_isSet = !json[QString("sign")].isNull() && m_sign_isValid;

    m_user_eq_isValid = ::OpenAPI::fromJsonValue(m_user_eq, json[QString("user_eq")]);
    m_user_eq_isSet = !json[QString("user_eq")].isNull() && m_user_eq_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_wifi_isValid = ::OpenAPI::fromJsonValue(m_wifi, json[QString("wifi")]);
    m_wifi_isSet = !json[QString("wifi")].isNull() && m_wifi_isValid;
}

QString OAIExample1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExample1::asJsonObject() const {
    QJsonObject obj;
    if (m_aogh.isSet()) {
        obj.insert(QString("aogh"), ::OpenAPI::toJsonValue(m_aogh));
    }
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_build_info.isSet()) {
        obj.insert(QString("build_info"), ::OpenAPI::toJsonValue(m_build_info));
    }
    if (m_detail.isSet()) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_device_info.isSet()) {
        obj.insert(QString("device_info"), ::OpenAPI::toJsonValue(m_device_info));
    }
    if (m_multizone.isSet()) {
        obj.insert(QString("multizone"), ::OpenAPI::toJsonValue(m_multizone));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_net.isSet()) {
        obj.insert(QString("net"), ::OpenAPI::toJsonValue(m_net));
    }
    if (m_night_mode_params.isSet()) {
        obj.insert(QString("night_mode_params"), ::OpenAPI::toJsonValue(m_night_mode_params));
    }
    if (m_opencast.isSet()) {
        obj.insert(QString("opencast"), ::OpenAPI::toJsonValue(m_opencast));
    }
    if (m_opt_in.isSet()) {
        obj.insert(QString("opt_in"), ::OpenAPI::toJsonValue(m_opt_in));
    }
    if (m_proxy.isSet()) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_setup.isSet()) {
        obj.insert(QString("setup"), ::OpenAPI::toJsonValue(m_setup));
    }
    if (m_sign.isSet()) {
        obj.insert(QString("sign"), ::OpenAPI::toJsonValue(m_sign));
    }
    if (m_user_eq.isSet()) {
        obj.insert(QString("user_eq"), ::OpenAPI::toJsonValue(m_user_eq));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_wifi.isSet()) {
        obj.insert(QString("wifi"), ::OpenAPI::toJsonValue(m_wifi));
    }
    return obj;
}

OAIAogh OAIExample1::getAogh() const {
    return m_aogh;
}
void OAIExample1::setAogh(const OAIAogh &aogh) {
    m_aogh = aogh;
    m_aogh_isSet = true;
}

bool OAIExample1::is_aogh_Set() const{
    return m_aogh_isSet;
}

bool OAIExample1::is_aogh_Valid() const{
    return m_aogh_isValid;
}

OAIAudio OAIExample1::getAudio() const {
    return m_audio;
}
void OAIExample1::setAudio(const OAIAudio &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIExample1::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIExample1::is_audio_Valid() const{
    return m_audio_isValid;
}

OAIBuildInfo OAIExample1::getBuildInfo() const {
    return m_build_info;
}
void OAIExample1::setBuildInfo(const OAIBuildInfo &build_info) {
    m_build_info = build_info;
    m_build_info_isSet = true;
}

bool OAIExample1::is_build_info_Set() const{
    return m_build_info_isSet;
}

bool OAIExample1::is_build_info_Valid() const{
    return m_build_info_isValid;
}

OAIDetail OAIExample1::getDetail() const {
    return m_detail;
}
void OAIExample1::setDetail(const OAIDetail &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIExample1::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIExample1::is_detail_Valid() const{
    return m_detail_isValid;
}

OAIDeviceInfo OAIExample1::getDeviceInfo() const {
    return m_device_info;
}
void OAIExample1::setDeviceInfo(const OAIDeviceInfo &device_info) {
    m_device_info = device_info;
    m_device_info_isSet = true;
}

bool OAIExample1::is_device_info_Set() const{
    return m_device_info_isSet;
}

bool OAIExample1::is_device_info_Valid() const{
    return m_device_info_isValid;
}

OAIMultizone OAIExample1::getMultizone() const {
    return m_multizone;
}
void OAIExample1::setMultizone(const OAIMultizone &multizone) {
    m_multizone = multizone;
    m_multizone_isSet = true;
}

bool OAIExample1::is_multizone_Set() const{
    return m_multizone_isSet;
}

bool OAIExample1::is_multizone_Valid() const{
    return m_multizone_isValid;
}

QString OAIExample1::getName() const {
    return m_name;
}
void OAIExample1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExample1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExample1::is_name_Valid() const{
    return m_name_isValid;
}

OAINet OAIExample1::getNet() const {
    return m_net;
}
void OAIExample1::setNet(const OAINet &net) {
    m_net = net;
    m_net_isSet = true;
}

bool OAIExample1::is_net_Set() const{
    return m_net_isSet;
}

bool OAIExample1::is_net_Valid() const{
    return m_net_isValid;
}

OAINightModeParams OAIExample1::getNightModeParams() const {
    return m_night_mode_params;
}
void OAIExample1::setNightModeParams(const OAINightModeParams &night_mode_params) {
    m_night_mode_params = night_mode_params;
    m_night_mode_params_isSet = true;
}

bool OAIExample1::is_night_mode_params_Set() const{
    return m_night_mode_params_isSet;
}

bool OAIExample1::is_night_mode_params_Valid() const{
    return m_night_mode_params_isValid;
}

OAIOpencast OAIExample1::getOpencast() const {
    return m_opencast;
}
void OAIExample1::setOpencast(const OAIOpencast &opencast) {
    m_opencast = opencast;
    m_opencast_isSet = true;
}

bool OAIExample1::is_opencast_Set() const{
    return m_opencast_isSet;
}

bool OAIExample1::is_opencast_Valid() const{
    return m_opencast_isValid;
}

OAIOptIn OAIExample1::getOptIn() const {
    return m_opt_in;
}
void OAIExample1::setOptIn(const OAIOptIn &opt_in) {
    m_opt_in = opt_in;
    m_opt_in_isSet = true;
}

bool OAIExample1::is_opt_in_Set() const{
    return m_opt_in_isSet;
}

bool OAIExample1::is_opt_in_Valid() const{
    return m_opt_in_isValid;
}

OAIProxy OAIExample1::getProxy() const {
    return m_proxy;
}
void OAIExample1::setProxy(const OAIProxy &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAIExample1::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAIExample1::is_proxy_Valid() const{
    return m_proxy_isValid;
}

OAISettings OAIExample1::getSettings() const {
    return m_settings;
}
void OAIExample1::setSettings(const OAISettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIExample1::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIExample1::is_settings_Valid() const{
    return m_settings_isValid;
}

OAISetup OAIExample1::getSetup() const {
    return m_setup;
}
void OAIExample1::setSetup(const OAISetup &setup) {
    m_setup = setup;
    m_setup_isSet = true;
}

bool OAIExample1::is_setup_Set() const{
    return m_setup_isSet;
}

bool OAIExample1::is_setup_Valid() const{
    return m_setup_isValid;
}

OAISign OAIExample1::getSign() const {
    return m_sign;
}
void OAIExample1::setSign(const OAISign &sign) {
    m_sign = sign;
    m_sign_isSet = true;
}

bool OAIExample1::is_sign_Set() const{
    return m_sign_isSet;
}

bool OAIExample1::is_sign_Valid() const{
    return m_sign_isValid;
}

OAIUserEq OAIExample1::getUserEq() const {
    return m_user_eq;
}
void OAIExample1::setUserEq(const OAIUserEq &user_eq) {
    m_user_eq = user_eq;
    m_user_eq_isSet = true;
}

bool OAIExample1::is_user_eq_Set() const{
    return m_user_eq_isSet;
}

bool OAIExample1::is_user_eq_Valid() const{
    return m_user_eq_isValid;
}

qint32 OAIExample1::getVersion() const {
    return m_version;
}
void OAIExample1::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExample1::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExample1::is_version_Valid() const{
    return m_version_isValid;
}

OAIWifi OAIExample1::getWifi() const {
    return m_wifi;
}
void OAIExample1::setWifi(const OAIWifi &wifi) {
    m_wifi = wifi;
    m_wifi_isSet = true;
}

bool OAIExample1::is_wifi_Set() const{
    return m_wifi_isSet;
}

bool OAIExample1::is_wifi_Valid() const{
    return m_wifi_isValid;
}

bool OAIExample1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aogh.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multizone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_night_mode_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opencast.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_eq.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExample1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aogh_isValid && m_audio_isValid && m_build_info_isValid && m_detail_isValid && m_device_info_isValid && m_multizone_isValid && m_name_isValid && m_net_isValid && m_night_mode_params_isValid && m_opencast_isValid && m_opt_in_isValid && m_proxy_isValid && m_settings_isValid && m_setup_isValid && m_sign_isValid && m_user_eq_isValid && m_version_isValid && m_wifi_isValid && true;
}

} // namespace OpenAPI
