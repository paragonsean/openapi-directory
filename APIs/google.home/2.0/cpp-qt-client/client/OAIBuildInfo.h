/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildInfo.h
 *
 * 
 */

#ifndef OAIBuildInfo_H
#define OAIBuildInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBuildInfo : public OAIObject {
public:
    OAIBuildInfo();
    OAIBuildInfo(QString json);
    ~OAIBuildInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBuildType() const;
    void setBuildType(const qint32 &build_type);
    bool is_build_type_Set() const;
    bool is_build_type_Valid() const;

    QString getCastBuildRevision() const;
    void setCastBuildRevision(const QString &cast_build_revision);
    bool is_cast_build_revision_Set() const;
    bool is_cast_build_revision_Valid() const;

    qint32 getCastControlVersion() const;
    void setCastControlVersion(const qint32 &cast_control_version);
    bool is_cast_control_version_Set() const;
    bool is_cast_control_version_Valid() const;

    qint32 getPreviewChannelState() const;
    void setPreviewChannelState(const qint32 &preview_channel_state);
    bool is_preview_channel_state_Set() const;
    bool is_preview_channel_state_Valid() const;

    QString getReleaseTrack() const;
    void setReleaseTrack(const QString &release_track);
    bool is_release_track_Set() const;
    bool is_release_track_Valid() const;

    QString getSystemBuildNumber() const;
    void setSystemBuildNumber(const QString &system_build_number);
    bool is_system_build_number_Set() const;
    bool is_system_build_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_build_type;
    bool m_build_type_isSet;
    bool m_build_type_isValid;

    QString m_cast_build_revision;
    bool m_cast_build_revision_isSet;
    bool m_cast_build_revision_isValid;

    qint32 m_cast_control_version;
    bool m_cast_control_version_isSet;
    bool m_cast_control_version_isValid;

    qint32 m_preview_channel_state;
    bool m_preview_channel_state_isSet;
    bool m_preview_channel_state_isValid;

    QString m_release_track;
    bool m_release_track_isSet;
    bool m_release_track_isValid;

    QString m_system_build_number;
    bool m_system_build_number_isSet;
    bool m_system_build_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildInfo)

#endif // OAIBuildInfo_H
