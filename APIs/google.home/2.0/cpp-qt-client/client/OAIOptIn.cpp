/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptIn::OAIOptIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptIn::OAIOptIn() {
    this->initializeModel();
}

OAIOptIn::~OAIOptIn() {}

void OAIOptIn::initializeModel() {

    m_audio_hdr_isSet = false;
    m_audio_hdr_isValid = false;

    m_audio_surround_mode_isSet = false;
    m_audio_surround_mode_isValid = false;

    m_autoplay_on_signal_isSet = false;
    m_autoplay_on_signal_isValid = false;

    m_cloud_ipc_isSet = false;
    m_cloud_ipc_isValid = false;

    m_hdmi_prefer_50hz_isSet = false;
    m_hdmi_prefer_50hz_isValid = false;

    m_hdmi_prefer_high_fps_isSet = false;
    m_hdmi_prefer_high_fps_isValid = false;

    m_managed_mode_isSet = false;
    m_managed_mode_isValid = false;

    m_opencast_isSet = false;
    m_opencast_isValid = false;

    m_preview_channel_isSet = false;
    m_preview_channel_isValid = false;

    m_remote_ducking_isSet = false;
    m_remote_ducking_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_ui_flipped_isSet = false;
    m_ui_flipped_isValid = false;

    m_wpa3_support_enabled_isSet = false;
    m_wpa3_support_enabled_isValid = false;
}

void OAIOptIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptIn::fromJsonObject(QJsonObject json) {

    m_audio_hdr_isValid = ::OpenAPI::fromJsonValue(m_audio_hdr, json[QString("audio_hdr")]);
    m_audio_hdr_isSet = !json[QString("audio_hdr")].isNull() && m_audio_hdr_isValid;

    m_audio_surround_mode_isValid = ::OpenAPI::fromJsonValue(m_audio_surround_mode, json[QString("audio_surround_mode")]);
    m_audio_surround_mode_isSet = !json[QString("audio_surround_mode")].isNull() && m_audio_surround_mode_isValid;

    m_autoplay_on_signal_isValid = ::OpenAPI::fromJsonValue(m_autoplay_on_signal, json[QString("autoplay_on_signal")]);
    m_autoplay_on_signal_isSet = !json[QString("autoplay_on_signal")].isNull() && m_autoplay_on_signal_isValid;

    m_cloud_ipc_isValid = ::OpenAPI::fromJsonValue(m_cloud_ipc, json[QString("cloud_ipc")]);
    m_cloud_ipc_isSet = !json[QString("cloud_ipc")].isNull() && m_cloud_ipc_isValid;

    m_hdmi_prefer_50hz_isValid = ::OpenAPI::fromJsonValue(m_hdmi_prefer_50hz, json[QString("hdmi_prefer_50hz")]);
    m_hdmi_prefer_50hz_isSet = !json[QString("hdmi_prefer_50hz")].isNull() && m_hdmi_prefer_50hz_isValid;

    m_hdmi_prefer_high_fps_isValid = ::OpenAPI::fromJsonValue(m_hdmi_prefer_high_fps, json[QString("hdmi_prefer_high_fps")]);
    m_hdmi_prefer_high_fps_isSet = !json[QString("hdmi_prefer_high_fps")].isNull() && m_hdmi_prefer_high_fps_isValid;

    m_managed_mode_isValid = ::OpenAPI::fromJsonValue(m_managed_mode, json[QString("managed_mode")]);
    m_managed_mode_isSet = !json[QString("managed_mode")].isNull() && m_managed_mode_isValid;

    m_opencast_isValid = ::OpenAPI::fromJsonValue(m_opencast, json[QString("opencast")]);
    m_opencast_isSet = !json[QString("opencast")].isNull() && m_opencast_isValid;

    m_preview_channel_isValid = ::OpenAPI::fromJsonValue(m_preview_channel, json[QString("preview_channel")]);
    m_preview_channel_isSet = !json[QString("preview_channel")].isNull() && m_preview_channel_isValid;

    m_remote_ducking_isValid = ::OpenAPI::fromJsonValue(m_remote_ducking, json[QString("remote_ducking")]);
    m_remote_ducking_isSet = !json[QString("remote_ducking")].isNull() && m_remote_ducking_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_ui_flipped_isValid = ::OpenAPI::fromJsonValue(m_ui_flipped, json[QString("ui_flipped")]);
    m_ui_flipped_isSet = !json[QString("ui_flipped")].isNull() && m_ui_flipped_isValid;

    m_wpa3_support_enabled_isValid = ::OpenAPI::fromJsonValue(m_wpa3_support_enabled, json[QString("wpa3_support_enabled")]);
    m_wpa3_support_enabled_isSet = !json[QString("wpa3_support_enabled")].isNull() && m_wpa3_support_enabled_isValid;
}

QString OAIOptIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptIn::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_hdr_isSet) {
        obj.insert(QString("audio_hdr"), ::OpenAPI::toJsonValue(m_audio_hdr));
    }
    if (m_audio_surround_mode_isSet) {
        obj.insert(QString("audio_surround_mode"), ::OpenAPI::toJsonValue(m_audio_surround_mode));
    }
    if (m_autoplay_on_signal_isSet) {
        obj.insert(QString("autoplay_on_signal"), ::OpenAPI::toJsonValue(m_autoplay_on_signal));
    }
    if (m_cloud_ipc_isSet) {
        obj.insert(QString("cloud_ipc"), ::OpenAPI::toJsonValue(m_cloud_ipc));
    }
    if (m_hdmi_prefer_50hz_isSet) {
        obj.insert(QString("hdmi_prefer_50hz"), ::OpenAPI::toJsonValue(m_hdmi_prefer_50hz));
    }
    if (m_hdmi_prefer_high_fps_isSet) {
        obj.insert(QString("hdmi_prefer_high_fps"), ::OpenAPI::toJsonValue(m_hdmi_prefer_high_fps));
    }
    if (m_managed_mode_isSet) {
        obj.insert(QString("managed_mode"), ::OpenAPI::toJsonValue(m_managed_mode));
    }
    if (m_opencast_isSet) {
        obj.insert(QString("opencast"), ::OpenAPI::toJsonValue(m_opencast));
    }
    if (m_preview_channel_isSet) {
        obj.insert(QString("preview_channel"), ::OpenAPI::toJsonValue(m_preview_channel));
    }
    if (m_remote_ducking_isSet) {
        obj.insert(QString("remote_ducking"), ::OpenAPI::toJsonValue(m_remote_ducking));
    }
    if (m_stats_isSet) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_ui_flipped_isSet) {
        obj.insert(QString("ui_flipped"), ::OpenAPI::toJsonValue(m_ui_flipped));
    }
    if (m_wpa3_support_enabled_isSet) {
        obj.insert(QString("wpa3_support_enabled"), ::OpenAPI::toJsonValue(m_wpa3_support_enabled));
    }
    return obj;
}

bool OAIOptIn::isAudioHdr() const {
    return m_audio_hdr;
}
void OAIOptIn::setAudioHdr(const bool &audio_hdr) {
    m_audio_hdr = audio_hdr;
    m_audio_hdr_isSet = true;
}

bool OAIOptIn::is_audio_hdr_Set() const{
    return m_audio_hdr_isSet;
}

bool OAIOptIn::is_audio_hdr_Valid() const{
    return m_audio_hdr_isValid;
}

qint32 OAIOptIn::getAudioSurroundMode() const {
    return m_audio_surround_mode;
}
void OAIOptIn::setAudioSurroundMode(const qint32 &audio_surround_mode) {
    m_audio_surround_mode = audio_surround_mode;
    m_audio_surround_mode_isSet = true;
}

bool OAIOptIn::is_audio_surround_mode_Set() const{
    return m_audio_surround_mode_isSet;
}

bool OAIOptIn::is_audio_surround_mode_Valid() const{
    return m_audio_surround_mode_isValid;
}

bool OAIOptIn::isAutoplayOnSignal() const {
    return m_autoplay_on_signal;
}
void OAIOptIn::setAutoplayOnSignal(const bool &autoplay_on_signal) {
    m_autoplay_on_signal = autoplay_on_signal;
    m_autoplay_on_signal_isSet = true;
}

bool OAIOptIn::is_autoplay_on_signal_Set() const{
    return m_autoplay_on_signal_isSet;
}

bool OAIOptIn::is_autoplay_on_signal_Valid() const{
    return m_autoplay_on_signal_isValid;
}

bool OAIOptIn::isCloudIpc() const {
    return m_cloud_ipc;
}
void OAIOptIn::setCloudIpc(const bool &cloud_ipc) {
    m_cloud_ipc = cloud_ipc;
    m_cloud_ipc_isSet = true;
}

bool OAIOptIn::is_cloud_ipc_Set() const{
    return m_cloud_ipc_isSet;
}

bool OAIOptIn::is_cloud_ipc_Valid() const{
    return m_cloud_ipc_isValid;
}

bool OAIOptIn::isHdmiPrefer50hz() const {
    return m_hdmi_prefer_50hz;
}
void OAIOptIn::setHdmiPrefer50hz(const bool &hdmi_prefer_50hz) {
    m_hdmi_prefer_50hz = hdmi_prefer_50hz;
    m_hdmi_prefer_50hz_isSet = true;
}

bool OAIOptIn::is_hdmi_prefer_50hz_Set() const{
    return m_hdmi_prefer_50hz_isSet;
}

bool OAIOptIn::is_hdmi_prefer_50hz_Valid() const{
    return m_hdmi_prefer_50hz_isValid;
}

bool OAIOptIn::isHdmiPreferHighFps() const {
    return m_hdmi_prefer_high_fps;
}
void OAIOptIn::setHdmiPreferHighFps(const bool &hdmi_prefer_high_fps) {
    m_hdmi_prefer_high_fps = hdmi_prefer_high_fps;
    m_hdmi_prefer_high_fps_isSet = true;
}

bool OAIOptIn::is_hdmi_prefer_high_fps_Set() const{
    return m_hdmi_prefer_high_fps_isSet;
}

bool OAIOptIn::is_hdmi_prefer_high_fps_Valid() const{
    return m_hdmi_prefer_high_fps_isValid;
}

bool OAIOptIn::isManagedMode() const {
    return m_managed_mode;
}
void OAIOptIn::setManagedMode(const bool &managed_mode) {
    m_managed_mode = managed_mode;
    m_managed_mode_isSet = true;
}

bool OAIOptIn::is_managed_mode_Set() const{
    return m_managed_mode_isSet;
}

bool OAIOptIn::is_managed_mode_Valid() const{
    return m_managed_mode_isValid;
}

bool OAIOptIn::isOpencast() const {
    return m_opencast;
}
void OAIOptIn::setOpencast(const bool &opencast) {
    m_opencast = opencast;
    m_opencast_isSet = true;
}

bool OAIOptIn::is_opencast_Set() const{
    return m_opencast_isSet;
}

bool OAIOptIn::is_opencast_Valid() const{
    return m_opencast_isValid;
}

bool OAIOptIn::isPreviewChannel() const {
    return m_preview_channel;
}
void OAIOptIn::setPreviewChannel(const bool &preview_channel) {
    m_preview_channel = preview_channel;
    m_preview_channel_isSet = true;
}

bool OAIOptIn::is_preview_channel_Set() const{
    return m_preview_channel_isSet;
}

bool OAIOptIn::is_preview_channel_Valid() const{
    return m_preview_channel_isValid;
}

bool OAIOptIn::isRemoteDucking() const {
    return m_remote_ducking;
}
void OAIOptIn::setRemoteDucking(const bool &remote_ducking) {
    m_remote_ducking = remote_ducking;
    m_remote_ducking_isSet = true;
}

bool OAIOptIn::is_remote_ducking_Set() const{
    return m_remote_ducking_isSet;
}

bool OAIOptIn::is_remote_ducking_Valid() const{
    return m_remote_ducking_isValid;
}

bool OAIOptIn::isStats() const {
    return m_stats;
}
void OAIOptIn::setStats(const bool &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIOptIn::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIOptIn::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIOptIn::isUiFlipped() const {
    return m_ui_flipped;
}
void OAIOptIn::setUiFlipped(const bool &ui_flipped) {
    m_ui_flipped = ui_flipped;
    m_ui_flipped_isSet = true;
}

bool OAIOptIn::is_ui_flipped_Set() const{
    return m_ui_flipped_isSet;
}

bool OAIOptIn::is_ui_flipped_Valid() const{
    return m_ui_flipped_isValid;
}

bool OAIOptIn::isWpa3SupportEnabled() const {
    return m_wpa3_support_enabled;
}
void OAIOptIn::setWpa3SupportEnabled(const bool &wpa3_support_enabled) {
    m_wpa3_support_enabled = wpa3_support_enabled;
    m_wpa3_support_enabled_isSet = true;
}

bool OAIOptIn::is_wpa3_support_enabled_Set() const{
    return m_wpa3_support_enabled_isSet;
}

bool OAIOptIn::is_wpa3_support_enabled_Valid() const{
    return m_wpa3_support_enabled_isValid;
}

bool OAIOptIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_hdr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_surround_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autoplay_on_signal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_ipc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdmi_prefer_50hz_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdmi_prefer_high_fps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opencast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ducking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_flipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wpa3_support_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_hdr_isValid && m_audio_surround_mode_isValid && m_autoplay_on_signal_isValid && m_cloud_ipc_isValid && m_hdmi_prefer_50hz_isValid && m_hdmi_prefer_high_fps_isValid && m_managed_mode_isValid && m_opencast_isValid && m_preview_channel_isValid && m_remote_ducking_isValid && m_stats_isValid && m_ui_flipped_isValid && m_wpa3_support_enabled_isValid && true;
}

} // namespace OpenAPI
