/**
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOptIn.h
 *
 * 
 */

#ifndef OAIOptIn_H
#define OAIOptIn_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOptIn : public OAIObject {
public:
    OAIOptIn();
    OAIOptIn(QString json);
    ~OAIOptIn() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAudioHdr() const;
    void setAudioHdr(const bool &audio_hdr);
    bool is_audio_hdr_Set() const;
    bool is_audio_hdr_Valid() const;

    qint32 getAudioSurroundMode() const;
    void setAudioSurroundMode(const qint32 &audio_surround_mode);
    bool is_audio_surround_mode_Set() const;
    bool is_audio_surround_mode_Valid() const;

    bool isAutoplayOnSignal() const;
    void setAutoplayOnSignal(const bool &autoplay_on_signal);
    bool is_autoplay_on_signal_Set() const;
    bool is_autoplay_on_signal_Valid() const;

    bool isCloudIpc() const;
    void setCloudIpc(const bool &cloud_ipc);
    bool is_cloud_ipc_Set() const;
    bool is_cloud_ipc_Valid() const;

    bool isHdmiPrefer50hz() const;
    void setHdmiPrefer50hz(const bool &hdmi_prefer_50hz);
    bool is_hdmi_prefer_50hz_Set() const;
    bool is_hdmi_prefer_50hz_Valid() const;

    bool isHdmiPreferHighFps() const;
    void setHdmiPreferHighFps(const bool &hdmi_prefer_high_fps);
    bool is_hdmi_prefer_high_fps_Set() const;
    bool is_hdmi_prefer_high_fps_Valid() const;

    bool isManagedMode() const;
    void setManagedMode(const bool &managed_mode);
    bool is_managed_mode_Set() const;
    bool is_managed_mode_Valid() const;

    bool isOpencast() const;
    void setOpencast(const bool &opencast);
    bool is_opencast_Set() const;
    bool is_opencast_Valid() const;

    bool isPreviewChannel() const;
    void setPreviewChannel(const bool &preview_channel);
    bool is_preview_channel_Set() const;
    bool is_preview_channel_Valid() const;

    bool isRemoteDucking() const;
    void setRemoteDucking(const bool &remote_ducking);
    bool is_remote_ducking_Set() const;
    bool is_remote_ducking_Valid() const;

    bool isStats() const;
    void setStats(const bool &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    bool isUiFlipped() const;
    void setUiFlipped(const bool &ui_flipped);
    bool is_ui_flipped_Set() const;
    bool is_ui_flipped_Valid() const;

    bool isWpa3SupportEnabled() const;
    void setWpa3SupportEnabled(const bool &wpa3_support_enabled);
    bool is_wpa3_support_enabled_Set() const;
    bool is_wpa3_support_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_audio_hdr;
    bool m_audio_hdr_isSet;
    bool m_audio_hdr_isValid;

    qint32 m_audio_surround_mode;
    bool m_audio_surround_mode_isSet;
    bool m_audio_surround_mode_isValid;

    bool m_autoplay_on_signal;
    bool m_autoplay_on_signal_isSet;
    bool m_autoplay_on_signal_isValid;

    bool m_cloud_ipc;
    bool m_cloud_ipc_isSet;
    bool m_cloud_ipc_isValid;

    bool m_hdmi_prefer_50hz;
    bool m_hdmi_prefer_50hz_isSet;
    bool m_hdmi_prefer_50hz_isValid;

    bool m_hdmi_prefer_high_fps;
    bool m_hdmi_prefer_high_fps_isSet;
    bool m_hdmi_prefer_high_fps_isValid;

    bool m_managed_mode;
    bool m_managed_mode_isSet;
    bool m_managed_mode_isValid;

    bool m_opencast;
    bool m_opencast_isSet;
    bool m_opencast_isValid;

    bool m_preview_channel;
    bool m_preview_channel_isSet;
    bool m_preview_channel_isValid;

    bool m_remote_ducking;
    bool m_remote_ducking_isSet;
    bool m_remote_ducking_isValid;

    bool m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;

    bool m_ui_flipped;
    bool m_ui_flipped_isSet;
    bool m_ui_flipped_isValid;

    bool m_wpa3_support_enabled;
    bool m_wpa3_support_enabled_isSet;
    bool m_wpa3_support_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOptIn)

#endif // OAIOptIn_H
