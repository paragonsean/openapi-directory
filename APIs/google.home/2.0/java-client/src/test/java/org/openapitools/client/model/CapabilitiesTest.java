/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Capabilities
 */
public class CapabilitiesTest {
    private final Capabilities model = new Capabilities();

    /**
     * Model tests for Capabilities
     */
    @Test
    public void testCapabilities() {
        // TODO: test Capabilities
    }

    /**
     * Test the property 'aoghSupported'
     */
    @Test
    public void aoghSupportedTest() {
        // TODO: test aoghSupported
    }

    /**
     * Test the property 'assistantSupported'
     */
    @Test
    public void assistantSupportedTest() {
        // TODO: test assistantSupported
    }

    /**
     * Test the property 'audioHdrSupported'
     */
    @Test
    public void audioHdrSupportedTest() {
        // TODO: test audioHdrSupported
    }

    /**
     * Test the property 'audioSurroundModeSupported'
     */
    @Test
    public void audioSurroundModeSupportedTest() {
        // TODO: test audioSurroundModeSupported
    }

    /**
     * Test the property 'bleSupported'
     */
    @Test
    public void bleSupportedTest() {
        // TODO: test bleSupported
    }

    /**
     * Test the property 'bluetoothAudioSinkSupported'
     */
    @Test
    public void bluetoothAudioSinkSupportedTest() {
        // TODO: test bluetoothAudioSinkSupported
    }

    /**
     * Test the property 'bluetoothAudioSourceSupported'
     */
    @Test
    public void bluetoothAudioSourceSupportedTest() {
        // TODO: test bluetoothAudioSourceSupported
    }

    /**
     * Test the property 'bluetoothSupported'
     */
    @Test
    public void bluetoothSupportedTest() {
        // TODO: test bluetoothSupported
    }

    /**
     * Test the property 'cloudcastSupported'
     */
    @Test
    public void cloudcastSupportedTest() {
        // TODO: test cloudcastSupported
    }

    /**
     * Test the property 'contentFiltersSupported'
     */
    @Test
    public void contentFiltersSupportedTest() {
        // TODO: test contentFiltersSupported
    }

    /**
     * Test the property 'displaySupported'
     */
    @Test
    public void displaySupportedTest() {
        // TODO: test displaySupported
    }

    /**
     * Test the property 'fdrSupported'
     */
    @Test
    public void fdrSupportedTest() {
        // TODO: test fdrSupported
    }

    /**
     * Test the property 'hdmiPrefer50hzSupported'
     */
    @Test
    public void hdmiPrefer50hzSupportedTest() {
        // TODO: test hdmiPrefer50hzSupported
    }

    /**
     * Test the property 'hdmiPreferHighFpsSupported'
     */
    @Test
    public void hdmiPreferHighFpsSupportedTest() {
        // TODO: test hdmiPreferHighFpsSupported
    }

    /**
     * Test the property 'hotspotSupported'
     */
    @Test
    public void hotspotSupportedTest() {
        // TODO: test hotspotSupported
    }

    /**
     * Test the property 'httpsSetupSupported'
     */
    @Test
    public void httpsSetupSupportedTest() {
        // TODO: test httpsSetupSupported
    }

    /**
     * Test the property 'inputManagementSupported'
     */
    @Test
    public void inputManagementSupportedTest() {
        // TODO: test inputManagementSupported
    }

    /**
     * Test the property 'keepHotspotUntilConnectedSupported'
     */
    @Test
    public void keepHotspotUntilConnectedSupportedTest() {
        // TODO: test keepHotspotUntilConnectedSupported
    }

    /**
     * Test the property 'multiUserSupported'
     */
    @Test
    public void multiUserSupportedTest() {
        // TODO: test multiUserSupported
    }

    /**
     * Test the property 'multichannelGroupSupported'
     */
    @Test
    public void multichannelGroupSupportedTest() {
        // TODO: test multichannelGroupSupported
    }

    /**
     * Test the property 'multizoneSupported'
     */
    @Test
    public void multizoneSupportedTest() {
        // TODO: test multizoneSupported
    }

    /**
     * Test the property 'nightModeSupported'
     */
    @Test
    public void nightModeSupportedTest() {
        // TODO: test nightModeSupported
    }

    /**
     * Test the property 'nightModeSupportedV2'
     */
    @Test
    public void nightModeSupportedV2Test() {
        // TODO: test nightModeSupportedV2
    }

    /**
     * Test the property 'opencastSupported'
     */
    @Test
    public void opencastSupportedTest() {
        // TODO: test opencastSupported
    }

    /**
     * Test the property 'previewChannelSupported'
     */
    @Test
    public void previewChannelSupportedTest() {
        // TODO: test previewChannelSupported
    }

    /**
     * Test the property 'rebootSupported'
     */
    @Test
    public void rebootSupportedTest() {
        // TODO: test rebootSupported
    }

    /**
     * Test the property 'remoteDuckingSupported'
     */
    @Test
    public void remoteDuckingSupportedTest() {
        // TODO: test remoteDuckingSupported
    }

    /**
     * Test the property 'separateTtsVolumeSupported'
     */
    @Test
    public void separateTtsVolumeSupportedTest() {
        // TODO: test separateTtsVolumeSupported
    }

    /**
     * Test the property 'setupSupported'
     */
    @Test
    public void setupSupportedTest() {
        // TODO: test setupSupported
    }

    /**
     * Test the property 'sleepModeSupported'
     */
    @Test
    public void sleepModeSupportedTest() {
        // TODO: test sleepModeSupported
    }

    /**
     * Test the property 'statsSupported'
     */
    @Test
    public void statsSupportedTest() {
        // TODO: test statsSupported
    }

    /**
     * Test the property 'systemSoundEffectsSupported'
     */
    @Test
    public void systemSoundEffectsSupportedTest() {
        // TODO: test systemSoundEffectsSupported
    }

    /**
     * Test the property 'userEqSupported'
     */
    @Test
    public void userEqSupportedTest() {
        // TODO: test userEqSupported
    }

    /**
     * Test the property 'wifiAutoSaveSupported'
     */
    @Test
    public void wifiAutoSaveSupportedTest() {
        // TODO: test wifiAutoSaveSupported
    }

    /**
     * Test the property 'wifiRegulatoryDomainLocked'
     */
    @Test
    public void wifiRegulatoryDomainLockedTest() {
        // TODO: test wifiRegulatoryDomainLocked
    }

    /**
     * Test the property 'wifiSupported'
     */
    @Test
    public void wifiSupportedTest() {
        // TODO: test wifiSupported
    }

}
