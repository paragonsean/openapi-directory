/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConnecttoWiFiNetworkRequest;
import org.openapitools.client.model.Example113;
import org.openapitools.client.model.Example114;
import org.openapitools.client.model.ForgetWiFiNetworkRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WifiApi
 */
@Disabled
public class WifiApiTest {

    private final WifiApi api = new WifiApi();

    /**
     * Connect to Wi-Fi Network
     *
     * **Note:** Not sure how the password is encrypted. Might be using the public certificate from /setup/eureka_info. So this cannot be used as of now. If someone figures it out, please [create a new issue here](https://github.com/rithvikvibhu/GHLocalApi/issues/new).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connecttoWiFiNetworkTest() throws ApiException {
        ConnecttoWiFiNetworkRequest connecttoWiFiNetworkRequest = null;
        api.connecttoWiFiNetwork(connecttoWiFiNetworkRequest);
        // TODO: test validations
    }

    /**
     * Forget Wi-Fi Network
     *
     * This is to forget a saved network by &#x60;wpa_id&#x60;. Get the &#x60;wpa_id&#x60; from /setup/configured_networks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgetWiFiNetworkTest() throws ApiException {
        ForgetWiFiNetworkRequest forgetWiFiNetworkRequest = null;
        Object response = api.forgetWiFiNetwork(forgetWiFiNetworkRequest);
        // TODO: test validations
    }

    /**
     * Get Saved Networks
     *
     * This gets a list of all saved Wi-Fi networks.  Each network has &#x60;ssid&#x60;, &#x60;wpa_auth&#x60;, &#x60;wpa_cipher&#x60; and &#x60;wpa_id&#x60;.   &#x60;wpa_id&#x60; is an incrementing number used to identify a saved network.   #TODO: Add values for &#x60;wpa_auth&#x60; and &#x60;wpa_cipher&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSavedNetworksTest() throws ApiException {
        List<Example113> response = api.getSavedNetworks();
        // TODO: test validations
    }

    /**
     * Get Wi-Fi Scan Results
     *
     * This gets a list of all nearby Wi-Fi access points.  The list only has the connected AP by default. Once a scan is triggered by &#x60;/setup/scan_wifi&#x60;, the whole list is cached for ~3 minutes. Then it will revert to returning only the connected AP again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWiFiScanResultsTest() throws ApiException {
        List<Example114> response = api.getWiFiScanResults();
        // TODO: test validations
    }

    /**
     * Scan for Networks
     *
     * This initiates scanning for Wi-Fi networks.  The results can be obtained with &#x60;/setup/scan_results&#x60; after triggering the scan with this request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scanforNetworksTest() throws ApiException {
        Object response = api.scanforNetworks();
        // TODO: test validations
    }

}
