/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessibilityRequest;
import org.openapitools.client.model.AlarmVolumeRequest;
import org.openapitools.client.model.DeleteAlarmsandTimersRequest;
import org.openapitools.client.model.Example18;
import org.openapitools.client.model.Example19;
import org.openapitools.client.model.Getcurrentstate;
import org.openapitools.client.model.Getcurrentvalues;
import org.openapitools.client.model.Getvolume;
import org.openapitools.client.model.SetEqualizerValuesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssistantApi
 */
@Disabled
public class AssistantApiTest {

    private final AssistantApi api = new AssistantApi();

    /**
     * Accessibility
     *
     * This controls Accessibility sounds. &#x60;hotword_enabled&#x60; is for &#39;Play start sound&#39; and &#x60;endpoint_enabled&#x60; is for &#39;Play end sound&#39;.   Sending an empty-body POST request returns the current values.   Either of the fields or both can be sent and new values will be saved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessibilityTest() throws ApiException {
        AccessibilityRequest accessibilityRequest = null;
        Getcurrentvalues response = api.accessibility(accessibilityRequest);
        // TODO: test validations
    }

    /**
     * Alarm Volume
     *
     * This gets and sets alarms and timers volume.   **Note:** This is not the same as normal volume.  Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.   Sending an empty body gets the volume. Sending &#x60;volume&#x60; sets the volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alarmVolumeTest() throws ApiException {
        AlarmVolumeRequest alarmVolumeRequest = null;
        Getvolume response = api.alarmVolume(alarmVolumeRequest);
        // TODO: test validations
    }

    /**
     * Delete Alarms and Timers
     *
     * This deletes alarms and timers by their id.  &#x60;ids&#x60; is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The &#x60;/&#x60; in the ids have to be escaped like &#x60;/&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlarmsandTimersTest() throws ApiException {
        DeleteAlarmsandTimersRequest deleteAlarmsandTimersRequest = null;
        Example19 response = api.deleteAlarmsandTimers(deleteAlarmsandTimersRequest);
        // TODO: test validations
    }

    /**
     * Do Not Disturb
     *
     * This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doNotDisturbTest() throws ApiException {
        String contentType = null;
        Getcurrentstate response = api.doNotDisturb(contentType);
        // TODO: test validations
    }

    /**
     * Get Alarms and Timers
     *
     * This gives a list of all active alarms and timers.  Both alarms and timers have &#x60;id&#x60;s which can be used to delete them. (There is no known way of creating/deleting yet). The value of &#x60;status&#x60; have different meanings for alarms and timers (given below).  Alarms have &#x60;date_pattern&#x60; and &#x60;time_pattern&#x60; with day, month, year, hour, minute, second. &#x60;fire_time&#x60; is the same in unix time (milliseconds, not seconds).   &#x60;status&#x60; is 1 for set up and 2 for ringing.  Timers have &#x60;original_duration&#x60; is the original duration.   &#x60;status&#x60; is 1 for set up and 3 for ringing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlarmsandTimersTest() throws ApiException {
        Example18 response = api.getAlarmsandTimers();
        // TODO: test validations
    }

    /**
     * Set Equalizer Values
     *
     * This can only set new equalizer values. To get already set values, use /setup/eureka_info.  The body is mandatory. It can either contain &#x60;low_shelf&#x60; or &#x60;high_shelf&#x60; or both.  &#x60;low_shelf.gain_db&#x60; and &#x60;high_shelf.gain_db&#x60; refer to **bass** and **treble** respectively.  Default values are 0 for both.   While the slider in the Home app only ranges from -6 to +6, they can be set to any integer like 50 or -100. These changes persist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setEqualizerValuesTest() throws ApiException {
        SetEqualizerValuesRequest setEqualizerValuesRequest = null;
        Object response = api.setEqualizerValues(setEqualizerValuesRequest);
        // TODO: test validations
    }

}
