/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppDeviceIDRequest;
import org.openapitools.client.model.CheckReadyStatusRequest;
import org.openapitools.client.model.Example1;
import org.openapitools.client.model.Example11;
import org.openapitools.client.model.Example12;
import org.openapitools.client.model.Example13;
import org.openapitools.client.model.Example14;
import org.openapitools.client.model.Example15;
import org.openapitools.client.model.Example16;
import org.openapitools.client.model.TestInternetDownloadSpeedRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceInfoApi
 */
@Disabled
public class DeviceInfoApiTest {

    private final DeviceInfoApi api = new DeviceInfoApi();

    /**
     * App Device ID
     *
     * This gives \&quot;app device id\&quot;, \&quot;certificate\&quot; and \&quot;signed data\&quot;.   The &#x60;app_id&#x60; in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to &#x60;E8C28D3C&#x60;.    The certificate is valid and issued by &#x60;Chromecast ICA 6 (Audio Assist), Google Inc&#x60;.  Not sure what the other two are.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appDeviceIDTest() throws ApiException {
        AppDeviceIDRequest appDeviceIDRequest = null;
        Example11 response = api.appDeviceID(appDeviceIDRequest);
        // TODO: test validations
    }

    /**
     * Check Ready Status
     *
     * **Update:** This seems to have changed now and is no longer possible. The error is also new.  Setting &#x60;play_ready_message&#x60; to true plays a welcome message on the device saying \&quot;Hi, I&#39;m your Google Assistant. I&#39;m here to help. To learn a few things you can do, continue in the Google Home app.\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkReadyStatusTest() throws ApiException {
        CheckReadyStatusRequest checkReadyStatusRequest = null;
        Example13 response = api.checkReadyStatus(checkReadyStatusRequest);
        // TODO: test validations
    }

    /**
     * Eureka Info
     *
     * This gives most of the device info. The GET parameter &#x60;param&#x60; is a comma separated list of json keys to fetch. Currently, these params are known: &#x60;version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer,sign,aogh,ultrasound,mesh&#x60;  Nested items can also be filtered using the dot notation. Example: &#x60;audio.digital&#x60;  The &#x60;options&#x60; GET parameter is always set to &#x60;detail&#x60; or &#x60;detail,sign&#x60;. &#x60;sign&#x60; signs the &#x60;nonce&#x60; and returns some value.  The &#x60;nonce&#x60; GET parameter is an integer value signed with needed (see &#x60;option&#x60; parameter above).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eurekaInfoTest() throws ApiException {
        String params = null;
        String options = null;
        Integer nonce = null;
        Example1 response = api.eurekaInfo(params, options, nonce);
        // TODO: test validations
    }

    /**
     * Locales
     *
     * Simply returns a list of all supported locales.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void localesTest() throws ApiException {
        List<Example15> response = api.locales();
        // TODO: test validations
    }

    /**
     * Offer
     *
     * This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device.   A new token is generated for every request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void offerTest() throws ApiException {
        Example12 response = api.offer();
        // TODO: test validations
    }

    /**
     * Test Internet Download Speed
     *
     * **Update:** This seems to have been removed. Returns 404 Not Found.  This endpoint tests internet download speed. Any sample file URL can be provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testInternetDownloadSpeedTest() throws ApiException {
        TestInternetDownloadSpeedRequest testInternetDownloadSpeedRequest = null;
        Example16 response = api.testInternetDownloadSpeed(testInternetDownloadSpeedRequest);
        // TODO: test validations
    }

    /**
     * Timezones
     *
     * Simply returns a list of all supported timezones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timezonesTest() throws ApiException {
        List<Example14> response = api.timezones();
        // TODO: test validations
    }

}
