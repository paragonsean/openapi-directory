/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangeDiscoverabilityRequest;
import org.openapitools.client.model.Example110;
import org.openapitools.client.model.Example111;
import org.openapitools.client.model.Example112;
import org.openapitools.client.model.ForgetpaireddeviceRequest;
import org.openapitools.client.model.PairwithSpeakerRequest;
import org.openapitools.client.model.ScanfordevicesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BluetoothApi
 */
@Disabled
public class BluetoothApiTest {

    private final BluetoothApi api = new BluetoothApi();

    /**
     * Change Discoverability
     *
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 1 only**  This enables/disables Home&#39;s bluetooth discovery and other devices can pair with Home (where Home acts as a speaker).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeDiscoverabilityTest() throws ApiException {
        ChangeDiscoverabilityRequest changeDiscoverabilityRequest = null;
        Object response = api.changeDiscoverability(changeDiscoverabilityRequest);
        // TODO: test validations
    }

    /**
     * Forget paired device
     *
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This is to forget paired devices by mac address. Works for both kinds of devices (Part 1 and Part 2).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgetpaireddeviceTest() throws ApiException {
        ForgetpaireddeviceRequest forgetpaireddeviceRequest = null;
        Object response = api.forgetpaireddevice(forgetpaireddeviceRequest);
        // TODO: test validations
    }

    /**
     * Get Paired Devices
     *
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This gives a list of all paired or &#39;bonded&#39; devices. The response field names are self-descriptive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPairedDevicesTest() throws ApiException {
        List<Example111> response = api.getPairedDevices();
        // TODO: test validations
    }

    /**
     * Get Scan Results
     *
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This returns a list of all nearby bluetooth devices. While the Home app only shows speakers, this list contains all devices including TVs, mobiles, etc.  &#x60;rssi&#x60; is signal strength, &#x60;name&#x60; is name, &#x60;mac_address&#x60; is mac address.   &#x60;device_class&#x60; and &#x60;device_type&#x60; are bluetooth codes.    The Home app only lists those devices with &#x60;expected_profiles&#x60; &gt; 0. Basically, the device should function as a speaker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScanResultsTest() throws ApiException {
        List<Example112> response = api.getScanResults();
        // TODO: test validations
    }

    /**
     * Pair with Speaker
     *
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This pairs with other bluetooth speakers by mac address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pairwithSpeakerTest() throws ApiException {
        PairwithSpeakerRequest pairwithSpeakerRequest = null;
        Object response = api.pairwithSpeaker(pairwithSpeakerRequest);
        // TODO: test validations
    }

    /**
     * Scan for devices
     *
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This initiates scan for other bluetooth speakers/devices. Scan results will be updated continuously for &#x60;timeout&#x60; seconds.   To get the scan results, see /setup/bluetooth/scan_results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scanfordevicesTest() throws ApiException {
        ScanfordevicesRequest scanfordevicesRequest = null;
        Object response = api.scanfordevices(scanfordevicesRequest);
        // TODO: test validations
    }

    /**
     * Status
     *
     * &gt; **There are 2 parts of Bluetooth.** &gt; &gt; *Part 1*: Devices like phones connect to Home and play audio through Home.   &gt; For this, /setup/bluetooth/discovery is used to make Home discoverable. Then devices can connect to it as if Home is just another bluetooth speaker. &gt; &gt; *Part 2*: Bluetooth speakers connect to Home and Home plays audio through the speakers. &gt; For this, /setup/bluetooth/scan and /setup/bluetooth/scan_results are used to connect to other speakers. &gt; &gt; The other endpoints are common for both parts.   **For both parts**  This gives the status of all bluetooth things. - Not sure what &#x60;audio_mode&#x60; is. - &#x60;discovery_enabled&#x60; states whether Home is discoverable. (**Part 1**) - &#x60;connecting_devices&#x60; is a list of all media sources (like phones) connected to Home. (**Part 1**) - &#x60;scanning_enabled&#x60; states whether Home scanning for other bluetooth speakers/devices. (**Part 2**) - &#x60;connected_devices&#x60; is a list of all speakers connected to Home. (**Part 2**)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void statusTest() throws ApiException {
        Example110 response = api.status();
        // TODO: test validations
    }

}
