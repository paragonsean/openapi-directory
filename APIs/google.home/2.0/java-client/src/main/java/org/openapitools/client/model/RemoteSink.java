/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RemoteSink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:31.661536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteSink {
  public static final String SERIALIZED_NAME_BOND_DATE = "bond_date";
  @SerializedName(SERIALIZED_NAME_BOND_DATE)
  private BigDecimal bondDate;

  public static final String SERIALIZED_NAME_DEVICE_CLASS = "device_class";
  @SerializedName(SERIALIZED_NAME_DEVICE_CLASS)
  private Integer deviceClass;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "device_type";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private Integer deviceType;

  public static final String SERIALIZED_NAME_LAST_CONNECT_DATE = "last_connect_date";
  @SerializedName(SERIALIZED_NAME_LAST_CONNECT_DATE)
  private Integer lastConnectDate;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RSSI = "rssi";
  @SerializedName(SERIALIZED_NAME_RSSI)
  private Integer rssi;

  public static final String SERIALIZED_NAME_SERVICE_UUIDS = "service_uuids";
  @SerializedName(SERIALIZED_NAME_SERVICE_UUIDS)
  private List<String> serviceUuids = new ArrayList<>();

  public RemoteSink() {
  }

  public RemoteSink bondDate(BigDecimal bondDate) {
    this.bondDate = bondDate;
    return this;
  }

  /**
   * Get bondDate
   * @return bondDate
   */
  @javax.annotation.Nonnull
  public BigDecimal getBondDate() {
    return bondDate;
  }

  public void setBondDate(BigDecimal bondDate) {
    this.bondDate = bondDate;
  }


  public RemoteSink deviceClass(Integer deviceClass) {
    this.deviceClass = deviceClass;
    return this;
  }

  /**
   * Get deviceClass
   * @return deviceClass
   */
  @javax.annotation.Nonnull
  public Integer getDeviceClass() {
    return deviceClass;
  }

  public void setDeviceClass(Integer deviceClass) {
    this.deviceClass = deviceClass;
  }


  public RemoteSink deviceType(Integer deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nonnull
  public Integer getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(Integer deviceType) {
    this.deviceType = deviceType;
  }


  public RemoteSink lastConnectDate(Integer lastConnectDate) {
    this.lastConnectDate = lastConnectDate;
    return this;
  }

  /**
   * Get lastConnectDate
   * @return lastConnectDate
   */
  @javax.annotation.Nonnull
  public Integer getLastConnectDate() {
    return lastConnectDate;
  }

  public void setLastConnectDate(Integer lastConnectDate) {
    this.lastConnectDate = lastConnectDate;
  }


  public RemoteSink macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nonnull
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public RemoteSink name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RemoteSink rssi(Integer rssi) {
    this.rssi = rssi;
    return this;
  }

  /**
   * Get rssi
   * @return rssi
   */
  @javax.annotation.Nonnull
  public Integer getRssi() {
    return rssi;
  }

  public void setRssi(Integer rssi) {
    this.rssi = rssi;
  }


  public RemoteSink serviceUuids(List<String> serviceUuids) {
    this.serviceUuids = serviceUuids;
    return this;
  }

  public RemoteSink addServiceUuidsItem(String serviceUuidsItem) {
    if (this.serviceUuids == null) {
      this.serviceUuids = new ArrayList<>();
    }
    this.serviceUuids.add(serviceUuidsItem);
    return this;
  }

  /**
   * Get serviceUuids
   * @return serviceUuids
   */
  @javax.annotation.Nonnull
  public List<String> getServiceUuids() {
    return serviceUuids;
  }

  public void setServiceUuids(List<String> serviceUuids) {
    this.serviceUuids = serviceUuids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteSink remoteSink = (RemoteSink) o;
    return Objects.equals(this.bondDate, remoteSink.bondDate) &&
        Objects.equals(this.deviceClass, remoteSink.deviceClass) &&
        Objects.equals(this.deviceType, remoteSink.deviceType) &&
        Objects.equals(this.lastConnectDate, remoteSink.lastConnectDate) &&
        Objects.equals(this.macAddress, remoteSink.macAddress) &&
        Objects.equals(this.name, remoteSink.name) &&
        Objects.equals(this.rssi, remoteSink.rssi) &&
        Objects.equals(this.serviceUuids, remoteSink.serviceUuids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bondDate, deviceClass, deviceType, lastConnectDate, macAddress, name, rssi, serviceUuids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteSink {\n");
    sb.append("    bondDate: ").append(toIndentedString(bondDate)).append("\n");
    sb.append("    deviceClass: ").append(toIndentedString(deviceClass)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    lastConnectDate: ").append(toIndentedString(lastConnectDate)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rssi: ").append(toIndentedString(rssi)).append("\n");
    sb.append("    serviceUuids: ").append(toIndentedString(serviceUuids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bond_date");
    openapiFields.add("device_class");
    openapiFields.add("device_type");
    openapiFields.add("last_connect_date");
    openapiFields.add("mac_address");
    openapiFields.add("name");
    openapiFields.add("rssi");
    openapiFields.add("service_uuids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bond_date");
    openapiRequiredFields.add("device_class");
    openapiRequiredFields.add("device_type");
    openapiRequiredFields.add("last_connect_date");
    openapiRequiredFields.add("mac_address");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("rssi");
    openapiRequiredFields.add("service_uuids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteSink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteSink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteSink is not found in the empty JSON string", RemoteSink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteSink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteSink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RemoteSink.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("service_uuids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("service_uuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_uuids` to be an array in the JSON string but got `%s`", jsonObj.get("service_uuids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteSink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteSink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteSink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteSink.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteSink>() {
           @Override
           public void write(JsonWriter out, RemoteSink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteSink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteSink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteSink
   * @throws IOException if the JSON string is invalid with respect to RemoteSink
   */
  public static RemoteSink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteSink.class);
  }

  /**
   * Convert an instance of RemoteSink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

