/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Example17;
import org.openapitools.client.model.NightModesettingsRequest;
import org.openapitools.client.model.RebootandFactoryResetRequest;
import org.openapitools.client.model.SetEurekaInfoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeviceSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for nightModesettings
     * @param nightModesettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nightModesettingsCall(NightModesettingsRequest nightModesettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = nightModesettingsRequest;

        // create path and map variables
        String localVarPath = "/assistant/set_night_mode_params";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nightModesettingsValidateBeforeCall(NightModesettingsRequest nightModesettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nightModesettingsRequest' is set
        if (nightModesettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'nightModesettingsRequest' when calling nightModesettings(Async)");
        }

        return nightModesettingsCall(nightModesettingsRequest, _callback);

    }

    /**
     * Night Mode settings
     * This sets night mode options.   To view currently set values, use /setup/eureka_info.   If &#x60;enabled&#x60; is set to false, night mode is disabled and the other values do not matter.   &#x60;led_brightness&#x60; and &#x60;volume&#x60; refer to the maximum LED Brightness and Volume that is set during night mode.   &#x60;demo_to_user&#x60; is always set to &#x60;true&#x60; so change in values will be visible in realtime (like brightness).   &#x60;windows&#x60;: A combination of &#x60;length_hours&#x60; and &#x60;start_hour&#x60; is used to define start and end times for night mode. In this example, night mode starts at 10 PM (22) and ends at 6 AM (8 hours later). &#x60;windows.days&#x60; is an array of days of week when night mode will be enabled. Example: 0-&gt;Sunday, 1-&gt; Monday, ..., 6-&gt;Saturday.
     * @param nightModesettingsRequest  (required)
     * @return Example17
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example17 nightModesettings(NightModesettingsRequest nightModesettingsRequest) throws ApiException {
        ApiResponse<Example17> localVarResp = nightModesettingsWithHttpInfo(nightModesettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Night Mode settings
     * This sets night mode options.   To view currently set values, use /setup/eureka_info.   If &#x60;enabled&#x60; is set to false, night mode is disabled and the other values do not matter.   &#x60;led_brightness&#x60; and &#x60;volume&#x60; refer to the maximum LED Brightness and Volume that is set during night mode.   &#x60;demo_to_user&#x60; is always set to &#x60;true&#x60; so change in values will be visible in realtime (like brightness).   &#x60;windows&#x60;: A combination of &#x60;length_hours&#x60; and &#x60;start_hour&#x60; is used to define start and end times for night mode. In this example, night mode starts at 10 PM (22) and ends at 6 AM (8 hours later). &#x60;windows.days&#x60; is an array of days of week when night mode will be enabled. Example: 0-&gt;Sunday, 1-&gt; Monday, ..., 6-&gt;Saturday.
     * @param nightModesettingsRequest  (required)
     * @return ApiResponse&lt;Example17&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example17> nightModesettingsWithHttpInfo(NightModesettingsRequest nightModesettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = nightModesettingsValidateBeforeCall(nightModesettingsRequest, null);
        Type localVarReturnType = new TypeToken<Example17>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Night Mode settings (asynchronously)
     * This sets night mode options.   To view currently set values, use /setup/eureka_info.   If &#x60;enabled&#x60; is set to false, night mode is disabled and the other values do not matter.   &#x60;led_brightness&#x60; and &#x60;volume&#x60; refer to the maximum LED Brightness and Volume that is set during night mode.   &#x60;demo_to_user&#x60; is always set to &#x60;true&#x60; so change in values will be visible in realtime (like brightness).   &#x60;windows&#x60;: A combination of &#x60;length_hours&#x60; and &#x60;start_hour&#x60; is used to define start and end times for night mode. In this example, night mode starts at 10 PM (22) and ends at 6 AM (8 hours later). &#x60;windows.days&#x60; is an array of days of week when night mode will be enabled. Example: 0-&gt;Sunday, 1-&gt; Monday, ..., 6-&gt;Saturday.
     * @param nightModesettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nightModesettingsAsync(NightModesettingsRequest nightModesettingsRequest, final ApiCallback<Example17> _callback) throws ApiException {

        okhttp3.Call localVarCall = nightModesettingsValidateBeforeCall(nightModesettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Example17>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rebootandFactoryReset
     * @param rebootandFactoryResetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebootandFactoryResetCall(RebootandFactoryResetRequest rebootandFactoryResetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rebootandFactoryResetRequest;

        // create path and map variables
        String localVarPath = "/reboot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebootandFactoryResetValidateBeforeCall(RebootandFactoryResetRequest rebootandFactoryResetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rebootandFactoryResetRequest' is set
        if (rebootandFactoryResetRequest == null) {
            throw new ApiException("Missing the required parameter 'rebootandFactoryResetRequest' when calling rebootandFactoryReset(Async)");
        }

        return rebootandFactoryResetCall(rebootandFactoryResetRequest, _callback);

    }

    /**
     * Reboot and Factory Reset
     * This can simply reboot the device (&#x60;params: \&quot;now\&quot;&#x60;) or factory reset the device (&#x60;params: \&quot;fdr\&quot;&#x60;).
     * @param rebootandFactoryResetRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object rebootandFactoryReset(RebootandFactoryResetRequest rebootandFactoryResetRequest) throws ApiException {
        ApiResponse<Object> localVarResp = rebootandFactoryResetWithHttpInfo(rebootandFactoryResetRequest);
        return localVarResp.getData();
    }

    /**
     * Reboot and Factory Reset
     * This can simply reboot the device (&#x60;params: \&quot;now\&quot;&#x60;) or factory reset the device (&#x60;params: \&quot;fdr\&quot;&#x60;).
     * @param rebootandFactoryResetRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> rebootandFactoryResetWithHttpInfo(RebootandFactoryResetRequest rebootandFactoryResetRequest) throws ApiException {
        okhttp3.Call localVarCall = rebootandFactoryResetValidateBeforeCall(rebootandFactoryResetRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reboot and Factory Reset (asynchronously)
     * This can simply reboot the device (&#x60;params: \&quot;now\&quot;&#x60;) or factory reset the device (&#x60;params: \&quot;fdr\&quot;&#x60;).
     * @param rebootandFactoryResetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rebootandFactoryResetAsync(RebootandFactoryResetRequest rebootandFactoryResetRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = rebootandFactoryResetValidateBeforeCall(rebootandFactoryResetRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setEurekaInfo
     * @param setEurekaInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setEurekaInfoCall(SetEurekaInfoRequest setEurekaInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setEurekaInfoRequest;

        // create path and map variables
        String localVarPath = "/set_eureka_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setEurekaInfoValidateBeforeCall(SetEurekaInfoRequest setEurekaInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setEurekaInfoRequest' is set
        if (setEurekaInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'setEurekaInfoRequest' when calling setEurekaInfo(Async)");
        }

        return setEurekaInfoCall(setEurekaInfoRequest, _callback);

    }

    /**
     * Set Eureka Info
     * This can set custom values to some options.  Only fields to be modified need to be sent, not all. The example has some modifiable fields.  TODO: List all modifiable fields.  Sending non-existant fields will still return a 200 OK, but they are not saved.
     * @param setEurekaInfoRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object setEurekaInfo(SetEurekaInfoRequest setEurekaInfoRequest) throws ApiException {
        ApiResponse<Object> localVarResp = setEurekaInfoWithHttpInfo(setEurekaInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Set Eureka Info
     * This can set custom values to some options.  Only fields to be modified need to be sent, not all. The example has some modifiable fields.  TODO: List all modifiable fields.  Sending non-existant fields will still return a 200 OK, but they are not saved.
     * @param setEurekaInfoRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setEurekaInfoWithHttpInfo(SetEurekaInfoRequest setEurekaInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = setEurekaInfoValidateBeforeCall(setEurekaInfoRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Eureka Info (asynchronously)
     * This can set custom values to some options.  Only fields to be modified need to be sent, not all. The example has some modifiable fields.  TODO: List all modifiable fields.  Sending non-existant fields will still return a 200 OK, but they are not saved.
     * @param setEurekaInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setEurekaInfoAsync(SetEurekaInfoRequest setEurekaInfoRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setEurekaInfoValidateBeforeCall(setEurekaInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
