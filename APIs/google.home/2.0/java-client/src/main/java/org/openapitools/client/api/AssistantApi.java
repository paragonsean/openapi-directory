/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessibilityRequest;
import org.openapitools.client.model.AlarmVolumeRequest;
import org.openapitools.client.model.DeleteAlarmsandTimersRequest;
import org.openapitools.client.model.Example18;
import org.openapitools.client.model.Example19;
import org.openapitools.client.model.Getcurrentstate;
import org.openapitools.client.model.Getcurrentvalues;
import org.openapitools.client.model.Getvolume;
import org.openapitools.client.model.SetEqualizerValuesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssistantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssistantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssistantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessibility
     * @param accessibilityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessibilityCall(AccessibilityRequest accessibilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessibilityRequest;

        // create path and map variables
        String localVarPath = "/assistant/a11y_mode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessibilityValidateBeforeCall(AccessibilityRequest accessibilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessibilityRequest' is set
        if (accessibilityRequest == null) {
            throw new ApiException("Missing the required parameter 'accessibilityRequest' when calling accessibility(Async)");
        }

        return accessibilityCall(accessibilityRequest, _callback);

    }

    /**
     * Accessibility
     * This controls Accessibility sounds. &#x60;hotword_enabled&#x60; is for &#39;Play start sound&#39; and &#x60;endpoint_enabled&#x60; is for &#39;Play end sound&#39;.   Sending an empty-body POST request returns the current values.   Either of the fields or both can be sent and new values will be saved.
     * @param accessibilityRequest  (required)
     * @return Getcurrentvalues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Getcurrentvalues accessibility(AccessibilityRequest accessibilityRequest) throws ApiException {
        ApiResponse<Getcurrentvalues> localVarResp = accessibilityWithHttpInfo(accessibilityRequest);
        return localVarResp.getData();
    }

    /**
     * Accessibility
     * This controls Accessibility sounds. &#x60;hotword_enabled&#x60; is for &#39;Play start sound&#39; and &#x60;endpoint_enabled&#x60; is for &#39;Play end sound&#39;.   Sending an empty-body POST request returns the current values.   Either of the fields or both can be sent and new values will be saved.
     * @param accessibilityRequest  (required)
     * @return ApiResponse&lt;Getcurrentvalues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getcurrentvalues> accessibilityWithHttpInfo(AccessibilityRequest accessibilityRequest) throws ApiException {
        okhttp3.Call localVarCall = accessibilityValidateBeforeCall(accessibilityRequest, null);
        Type localVarReturnType = new TypeToken<Getcurrentvalues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accessibility (asynchronously)
     * This controls Accessibility sounds. &#x60;hotword_enabled&#x60; is for &#39;Play start sound&#39; and &#x60;endpoint_enabled&#x60; is for &#39;Play end sound&#39;.   Sending an empty-body POST request returns the current values.   Either of the fields or both can be sent and new values will be saved.
     * @param accessibilityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessibilityAsync(AccessibilityRequest accessibilityRequest, final ApiCallback<Getcurrentvalues> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessibilityValidateBeforeCall(accessibilityRequest, _callback);
        Type localVarReturnType = new TypeToken<Getcurrentvalues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alarmVolume
     * @param alarmVolumeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alarmVolumeCall(AlarmVolumeRequest alarmVolumeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alarmVolumeRequest;

        // create path and map variables
        String localVarPath = "/assistant/alarms/volume";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alarmVolumeValidateBeforeCall(AlarmVolumeRequest alarmVolumeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alarmVolumeRequest' is set
        if (alarmVolumeRequest == null) {
            throw new ApiException("Missing the required parameter 'alarmVolumeRequest' when calling alarmVolume(Async)");
        }

        return alarmVolumeCall(alarmVolumeRequest, _callback);

    }

    /**
     * Alarm Volume
     * This gets and sets alarms and timers volume.   **Note:** This is not the same as normal volume.  Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.   Sending an empty body gets the volume. Sending &#x60;volume&#x60; sets the volume.
     * @param alarmVolumeRequest  (required)
     * @return Getvolume
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Getvolume alarmVolume(AlarmVolumeRequest alarmVolumeRequest) throws ApiException {
        ApiResponse<Getvolume> localVarResp = alarmVolumeWithHttpInfo(alarmVolumeRequest);
        return localVarResp.getData();
    }

    /**
     * Alarm Volume
     * This gets and sets alarms and timers volume.   **Note:** This is not the same as normal volume.  Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.   Sending an empty body gets the volume. Sending &#x60;volume&#x60; sets the volume.
     * @param alarmVolumeRequest  (required)
     * @return ApiResponse&lt;Getvolume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getvolume> alarmVolumeWithHttpInfo(AlarmVolumeRequest alarmVolumeRequest) throws ApiException {
        okhttp3.Call localVarCall = alarmVolumeValidateBeforeCall(alarmVolumeRequest, null);
        Type localVarReturnType = new TypeToken<Getvolume>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Alarm Volume (asynchronously)
     * This gets and sets alarms and timers volume.   **Note:** This is not the same as normal volume.  Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.   Sending an empty body gets the volume. Sending &#x60;volume&#x60; sets the volume.
     * @param alarmVolumeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alarmVolumeAsync(AlarmVolumeRequest alarmVolumeRequest, final ApiCallback<Getvolume> _callback) throws ApiException {

        okhttp3.Call localVarCall = alarmVolumeValidateBeforeCall(alarmVolumeRequest, _callback);
        Type localVarReturnType = new TypeToken<Getvolume>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAlarmsandTimers
     * @param deleteAlarmsandTimersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlarmsandTimersCall(DeleteAlarmsandTimersRequest deleteAlarmsandTimersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAlarmsandTimersRequest;

        // create path and map variables
        String localVarPath = "/assistant/alarms/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAlarmsandTimersValidateBeforeCall(DeleteAlarmsandTimersRequest deleteAlarmsandTimersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteAlarmsandTimersRequest' is set
        if (deleteAlarmsandTimersRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteAlarmsandTimersRequest' when calling deleteAlarmsandTimers(Async)");
        }

        return deleteAlarmsandTimersCall(deleteAlarmsandTimersRequest, _callback);

    }

    /**
     * Delete Alarms and Timers
     * This deletes alarms and timers by their id.  &#x60;ids&#x60; is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The &#x60;/&#x60; in the ids have to be escaped like &#x60;/&#x60;.
     * @param deleteAlarmsandTimersRequest  (required)
     * @return Example19
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example19 deleteAlarmsandTimers(DeleteAlarmsandTimersRequest deleteAlarmsandTimersRequest) throws ApiException {
        ApiResponse<Example19> localVarResp = deleteAlarmsandTimersWithHttpInfo(deleteAlarmsandTimersRequest);
        return localVarResp.getData();
    }

    /**
     * Delete Alarms and Timers
     * This deletes alarms and timers by their id.  &#x60;ids&#x60; is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The &#x60;/&#x60; in the ids have to be escaped like &#x60;/&#x60;.
     * @param deleteAlarmsandTimersRequest  (required)
     * @return ApiResponse&lt;Example19&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example19> deleteAlarmsandTimersWithHttpInfo(DeleteAlarmsandTimersRequest deleteAlarmsandTimersRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteAlarmsandTimersValidateBeforeCall(deleteAlarmsandTimersRequest, null);
        Type localVarReturnType = new TypeToken<Example19>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Alarms and Timers (asynchronously)
     * This deletes alarms and timers by their id.  &#x60;ids&#x60; is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The &#x60;/&#x60; in the ids have to be escaped like &#x60;/&#x60;.
     * @param deleteAlarmsandTimersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlarmsandTimersAsync(DeleteAlarmsandTimersRequest deleteAlarmsandTimersRequest, final ApiCallback<Example19> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAlarmsandTimersValidateBeforeCall(deleteAlarmsandTimersRequest, _callback);
        Type localVarReturnType = new TypeToken<Example19>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for doNotDisturb
     * @param contentType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doNotDisturbCall(String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assistant/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doNotDisturbValidateBeforeCall(String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling doNotDisturb(Async)");
        }

        return doNotDisturbCall(contentType, _callback);

    }

    /**
     * Do Not Disturb
     * This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.
     * @param contentType  (required)
     * @return Getcurrentstate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Getcurrentstate doNotDisturb(String contentType) throws ApiException {
        ApiResponse<Getcurrentstate> localVarResp = doNotDisturbWithHttpInfo(contentType);
        return localVarResp.getData();
    }

    /**
     * Do Not Disturb
     * This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.
     * @param contentType  (required)
     * @return ApiResponse&lt;Getcurrentstate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getcurrentstate> doNotDisturbWithHttpInfo(String contentType) throws ApiException {
        okhttp3.Call localVarCall = doNotDisturbValidateBeforeCall(contentType, null);
        Type localVarReturnType = new TypeToken<Getcurrentstate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Do Not Disturb (asynchronously)
     * This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.
     * @param contentType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call doNotDisturbAsync(String contentType, final ApiCallback<Getcurrentstate> _callback) throws ApiException {

        okhttp3.Call localVarCall = doNotDisturbValidateBeforeCall(contentType, _callback);
        Type localVarReturnType = new TypeToken<Getcurrentstate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAlarmsandTimers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlarmsandTimersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/assistant/alarms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlarmsandTimersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAlarmsandTimersCall(_callback);

    }

    /**
     * Get Alarms and Timers
     * This gives a list of all active alarms and timers.  Both alarms and timers have &#x60;id&#x60;s which can be used to delete them. (There is no known way of creating/deleting yet). The value of &#x60;status&#x60; have different meanings for alarms and timers (given below).  Alarms have &#x60;date_pattern&#x60; and &#x60;time_pattern&#x60; with day, month, year, hour, minute, second. &#x60;fire_time&#x60; is the same in unix time (milliseconds, not seconds).   &#x60;status&#x60; is 1 for set up and 2 for ringing.  Timers have &#x60;original_duration&#x60; is the original duration.   &#x60;status&#x60; is 1 for set up and 3 for ringing.
     * @return Example18
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example18 getAlarmsandTimers() throws ApiException {
        ApiResponse<Example18> localVarResp = getAlarmsandTimersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Alarms and Timers
     * This gives a list of all active alarms and timers.  Both alarms and timers have &#x60;id&#x60;s which can be used to delete them. (There is no known way of creating/deleting yet). The value of &#x60;status&#x60; have different meanings for alarms and timers (given below).  Alarms have &#x60;date_pattern&#x60; and &#x60;time_pattern&#x60; with day, month, year, hour, minute, second. &#x60;fire_time&#x60; is the same in unix time (milliseconds, not seconds).   &#x60;status&#x60; is 1 for set up and 2 for ringing.  Timers have &#x60;original_duration&#x60; is the original duration.   &#x60;status&#x60; is 1 for set up and 3 for ringing.
     * @return ApiResponse&lt;Example18&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example18> getAlarmsandTimersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAlarmsandTimersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Example18>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Alarms and Timers (asynchronously)
     * This gives a list of all active alarms and timers.  Both alarms and timers have &#x60;id&#x60;s which can be used to delete them. (There is no known way of creating/deleting yet). The value of &#x60;status&#x60; have different meanings for alarms and timers (given below).  Alarms have &#x60;date_pattern&#x60; and &#x60;time_pattern&#x60; with day, month, year, hour, minute, second. &#x60;fire_time&#x60; is the same in unix time (milliseconds, not seconds).   &#x60;status&#x60; is 1 for set up and 2 for ringing.  Timers have &#x60;original_duration&#x60; is the original duration.   &#x60;status&#x60; is 1 for set up and 3 for ringing.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlarmsandTimersAsync(final ApiCallback<Example18> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlarmsandTimersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Example18>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setEqualizerValues
     * @param setEqualizerValuesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setEqualizerValuesCall(SetEqualizerValuesRequest setEqualizerValuesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setEqualizerValuesRequest;

        // create path and map variables
        String localVarPath = "/user_eq/set_equalizer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setEqualizerValuesValidateBeforeCall(SetEqualizerValuesRequest setEqualizerValuesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setEqualizerValuesRequest' is set
        if (setEqualizerValuesRequest == null) {
            throw new ApiException("Missing the required parameter 'setEqualizerValuesRequest' when calling setEqualizerValues(Async)");
        }

        return setEqualizerValuesCall(setEqualizerValuesRequest, _callback);

    }

    /**
     * Set Equalizer Values
     * This can only set new equalizer values. To get already set values, use /setup/eureka_info.  The body is mandatory. It can either contain &#x60;low_shelf&#x60; or &#x60;high_shelf&#x60; or both.  &#x60;low_shelf.gain_db&#x60; and &#x60;high_shelf.gain_db&#x60; refer to **bass** and **treble** respectively.  Default values are 0 for both.   While the slider in the Home app only ranges from -6 to +6, they can be set to any integer like 50 or -100. These changes persist.
     * @param setEqualizerValuesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object setEqualizerValues(SetEqualizerValuesRequest setEqualizerValuesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = setEqualizerValuesWithHttpInfo(setEqualizerValuesRequest);
        return localVarResp.getData();
    }

    /**
     * Set Equalizer Values
     * This can only set new equalizer values. To get already set values, use /setup/eureka_info.  The body is mandatory. It can either contain &#x60;low_shelf&#x60; or &#x60;high_shelf&#x60; or both.  &#x60;low_shelf.gain_db&#x60; and &#x60;high_shelf.gain_db&#x60; refer to **bass** and **treble** respectively.  Default values are 0 for both.   While the slider in the Home app only ranges from -6 to +6, they can be set to any integer like 50 or -100. These changes persist.
     * @param setEqualizerValuesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setEqualizerValuesWithHttpInfo(SetEqualizerValuesRequest setEqualizerValuesRequest) throws ApiException {
        okhttp3.Call localVarCall = setEqualizerValuesValidateBeforeCall(setEqualizerValuesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set Equalizer Values (asynchronously)
     * This can only set new equalizer values. To get already set values, use /setup/eureka_info.  The body is mandatory. It can either contain &#x60;low_shelf&#x60; or &#x60;high_shelf&#x60; or both.  &#x60;low_shelf.gain_db&#x60; and &#x60;high_shelf.gain_db&#x60; refer to **bass** and **treble** respectively.  Default values are 0 for both.   While the slider in the Home app only ranges from -6 to +6, they can be set to any integer like 50 or -100. These changes persist.
     * @param setEqualizerValuesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setEqualizerValuesAsync(SetEqualizerValuesRequest setEqualizerValuesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setEqualizerValuesValidateBeforeCall(setEqualizerValuesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
