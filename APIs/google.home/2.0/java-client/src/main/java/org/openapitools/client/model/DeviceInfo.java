/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Capabilities;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:31.661536-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceInfo {
  public static final String SERIALIZED_NAME_4K_BLOCKED = "4k_blocked";
  @SerializedName(SERIALIZED_NAME_4K_BLOCKED)
  private Integer _4kBlocked;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Capabilities capabilities;

  public static final String SERIALIZED_NAME_CLOUD_DEVICE_ID = "cloud_device_id";
  @SerializedName(SERIALIZED_NAME_CLOUD_DEVICE_ID)
  private String cloudDeviceId;

  public static final String SERIALIZED_NAME_FACTORY_COUNTRY_CODE = "factory_country_code";
  @SerializedName(SERIALIZED_NAME_FACTORY_COUNTRY_CODE)
  private String factoryCountryCode;

  public static final String SERIALIZED_NAME_HOTSPOT_BSSID = "hotspot_bssid";
  @SerializedName(SERIALIZED_NAME_HOTSPOT_BSSID)
  private String hotspotBssid;

  public static final String SERIALIZED_NAME_LOCAL_AUTHORIZATION_TOKEN_HASH = "local_authorization_token_hash";
  @SerializedName(SERIALIZED_NAME_LOCAL_AUTHORIZATION_TOKEN_HASH)
  private String localAuthorizationTokenHash;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MODEL_NAME = "model_name";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "product_name";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_SSDP_UDN = "ssdp_udn";
  @SerializedName(SERIALIZED_NAME_SSDP_UDN)
  private String ssdpUdn;

  public static final String SERIALIZED_NAME_UMA_CLIENT_ID = "uma_client_id";
  @SerializedName(SERIALIZED_NAME_UMA_CLIENT_ID)
  private String umaClientId;

  public static final String SERIALIZED_NAME_UPTIME = "uptime";
  @SerializedName(SERIALIZED_NAME_UPTIME)
  private BigDecimal uptime;

  public static final String SERIALIZED_NAME_WEAVE_DEVICE_ID = "weave_device_id";
  @SerializedName(SERIALIZED_NAME_WEAVE_DEVICE_ID)
  private String weaveDeviceId;

  public DeviceInfo() {
  }

  public DeviceInfo _4kBlocked(Integer _4kBlocked) {
    this._4kBlocked = _4kBlocked;
    return this;
  }

  /**
   * Get _4kBlocked
   * @return _4kBlocked
   */
  @javax.annotation.Nonnull
  public Integer get4kBlocked() {
    return _4kBlocked;
  }

  public void set4kBlocked(Integer _4kBlocked) {
    this._4kBlocked = _4kBlocked;
  }


  public DeviceInfo capabilities(Capabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nonnull
  public Capabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(Capabilities capabilities) {
    this.capabilities = capabilities;
  }


  public DeviceInfo cloudDeviceId(String cloudDeviceId) {
    this.cloudDeviceId = cloudDeviceId;
    return this;
  }

  /**
   * Get cloudDeviceId
   * @return cloudDeviceId
   */
  @javax.annotation.Nonnull
  public String getCloudDeviceId() {
    return cloudDeviceId;
  }

  public void setCloudDeviceId(String cloudDeviceId) {
    this.cloudDeviceId = cloudDeviceId;
  }


  public DeviceInfo factoryCountryCode(String factoryCountryCode) {
    this.factoryCountryCode = factoryCountryCode;
    return this;
  }

  /**
   * Get factoryCountryCode
   * @return factoryCountryCode
   */
  @javax.annotation.Nonnull
  public String getFactoryCountryCode() {
    return factoryCountryCode;
  }

  public void setFactoryCountryCode(String factoryCountryCode) {
    this.factoryCountryCode = factoryCountryCode;
  }


  public DeviceInfo hotspotBssid(String hotspotBssid) {
    this.hotspotBssid = hotspotBssid;
    return this;
  }

  /**
   * Get hotspotBssid
   * @return hotspotBssid
   */
  @javax.annotation.Nonnull
  public String getHotspotBssid() {
    return hotspotBssid;
  }

  public void setHotspotBssid(String hotspotBssid) {
    this.hotspotBssid = hotspotBssid;
  }


  public DeviceInfo localAuthorizationTokenHash(String localAuthorizationTokenHash) {
    this.localAuthorizationTokenHash = localAuthorizationTokenHash;
    return this;
  }

  /**
   * Get localAuthorizationTokenHash
   * @return localAuthorizationTokenHash
   */
  @javax.annotation.Nonnull
  public String getLocalAuthorizationTokenHash() {
    return localAuthorizationTokenHash;
  }

  public void setLocalAuthorizationTokenHash(String localAuthorizationTokenHash) {
    this.localAuthorizationTokenHash = localAuthorizationTokenHash;
  }


  public DeviceInfo macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nonnull
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public DeviceInfo manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Get manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nonnull
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceInfo modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

  /**
   * Get modelName
   * @return modelName
   */
  @javax.annotation.Nonnull
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public DeviceInfo productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @javax.annotation.Nonnull
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public DeviceInfo publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nonnull
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public DeviceInfo ssdpUdn(String ssdpUdn) {
    this.ssdpUdn = ssdpUdn;
    return this;
  }

  /**
   * Get ssdpUdn
   * @return ssdpUdn
   */
  @javax.annotation.Nonnull
  public String getSsdpUdn() {
    return ssdpUdn;
  }

  public void setSsdpUdn(String ssdpUdn) {
    this.ssdpUdn = ssdpUdn;
  }


  public DeviceInfo umaClientId(String umaClientId) {
    this.umaClientId = umaClientId;
    return this;
  }

  /**
   * Get umaClientId
   * @return umaClientId
   */
  @javax.annotation.Nonnull
  public String getUmaClientId() {
    return umaClientId;
  }

  public void setUmaClientId(String umaClientId) {
    this.umaClientId = umaClientId;
  }


  public DeviceInfo uptime(BigDecimal uptime) {
    this.uptime = uptime;
    return this;
  }

  /**
   * Get uptime
   * @return uptime
   */
  @javax.annotation.Nonnull
  public BigDecimal getUptime() {
    return uptime;
  }

  public void setUptime(BigDecimal uptime) {
    this.uptime = uptime;
  }


  public DeviceInfo weaveDeviceId(String weaveDeviceId) {
    this.weaveDeviceId = weaveDeviceId;
    return this;
  }

  /**
   * Get weaveDeviceId
   * @return weaveDeviceId
   */
  @javax.annotation.Nonnull
  public String getWeaveDeviceId() {
    return weaveDeviceId;
  }

  public void setWeaveDeviceId(String weaveDeviceId) {
    this.weaveDeviceId = weaveDeviceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceInfo deviceInfo = (DeviceInfo) o;
    return Objects.equals(this._4kBlocked, deviceInfo._4kBlocked) &&
        Objects.equals(this.capabilities, deviceInfo.capabilities) &&
        Objects.equals(this.cloudDeviceId, deviceInfo.cloudDeviceId) &&
        Objects.equals(this.factoryCountryCode, deviceInfo.factoryCountryCode) &&
        Objects.equals(this.hotspotBssid, deviceInfo.hotspotBssid) &&
        Objects.equals(this.localAuthorizationTokenHash, deviceInfo.localAuthorizationTokenHash) &&
        Objects.equals(this.macAddress, deviceInfo.macAddress) &&
        Objects.equals(this.manufacturer, deviceInfo.manufacturer) &&
        Objects.equals(this.modelName, deviceInfo.modelName) &&
        Objects.equals(this.productName, deviceInfo.productName) &&
        Objects.equals(this.publicKey, deviceInfo.publicKey) &&
        Objects.equals(this.ssdpUdn, deviceInfo.ssdpUdn) &&
        Objects.equals(this.umaClientId, deviceInfo.umaClientId) &&
        Objects.equals(this.uptime, deviceInfo.uptime) &&
        Objects.equals(this.weaveDeviceId, deviceInfo.weaveDeviceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_4kBlocked, capabilities, cloudDeviceId, factoryCountryCode, hotspotBssid, localAuthorizationTokenHash, macAddress, manufacturer, modelName, productName, publicKey, ssdpUdn, umaClientId, uptime, weaveDeviceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceInfo {\n");
    sb.append("    _4kBlocked: ").append(toIndentedString(_4kBlocked)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    cloudDeviceId: ").append(toIndentedString(cloudDeviceId)).append("\n");
    sb.append("    factoryCountryCode: ").append(toIndentedString(factoryCountryCode)).append("\n");
    sb.append("    hotspotBssid: ").append(toIndentedString(hotspotBssid)).append("\n");
    sb.append("    localAuthorizationTokenHash: ").append(toIndentedString(localAuthorizationTokenHash)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    ssdpUdn: ").append(toIndentedString(ssdpUdn)).append("\n");
    sb.append("    umaClientId: ").append(toIndentedString(umaClientId)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    weaveDeviceId: ").append(toIndentedString(weaveDeviceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("4k_blocked");
    openapiFields.add("capabilities");
    openapiFields.add("cloud_device_id");
    openapiFields.add("factory_country_code");
    openapiFields.add("hotspot_bssid");
    openapiFields.add("local_authorization_token_hash");
    openapiFields.add("mac_address");
    openapiFields.add("manufacturer");
    openapiFields.add("model_name");
    openapiFields.add("product_name");
    openapiFields.add("public_key");
    openapiFields.add("ssdp_udn");
    openapiFields.add("uma_client_id");
    openapiFields.add("uptime");
    openapiFields.add("weave_device_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("4k_blocked");
    openapiRequiredFields.add("capabilities");
    openapiRequiredFields.add("cloud_device_id");
    openapiRequiredFields.add("factory_country_code");
    openapiRequiredFields.add("hotspot_bssid");
    openapiRequiredFields.add("local_authorization_token_hash");
    openapiRequiredFields.add("mac_address");
    openapiRequiredFields.add("manufacturer");
    openapiRequiredFields.add("model_name");
    openapiRequiredFields.add("product_name");
    openapiRequiredFields.add("public_key");
    openapiRequiredFields.add("ssdp_udn");
    openapiRequiredFields.add("uma_client_id");
    openapiRequiredFields.add("uptime");
    openapiRequiredFields.add("weave_device_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceInfo is not found in the empty JSON string", DeviceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `capabilities`
      Capabilities.validateJsonElement(jsonObj.get("capabilities"));
      if (!jsonObj.get("cloud_device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloud_device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloud_device_id").toString()));
      }
      if (!jsonObj.get("factory_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `factory_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("factory_country_code").toString()));
      }
      if (!jsonObj.get("hotspot_bssid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotspot_bssid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotspot_bssid").toString()));
      }
      if (!jsonObj.get("local_authorization_token_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `local_authorization_token_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("local_authorization_token_hash").toString()));
      }
      if (!jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      if (!jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if (!jsonObj.get("model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_name").toString()));
      }
      if (!jsonObj.get("product_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_name").toString()));
      }
      if (!jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if (!jsonObj.get("ssdp_udn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssdp_udn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssdp_udn").toString()));
      }
      if (!jsonObj.get("uma_client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uma_client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uma_client_id").toString()));
      }
      if (!jsonObj.get("weave_device_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weave_device_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weave_device_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceInfo>() {
           @Override
           public void write(JsonWriter out, DeviceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceInfo
   * @throws IOException if the JSON string is invalid with respect to DeviceInfo
   */
  public static DeviceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceInfo.class);
  }

  /**
   * Convert an instance of DeviceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

