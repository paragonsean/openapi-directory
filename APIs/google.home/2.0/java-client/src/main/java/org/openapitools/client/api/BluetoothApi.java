/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChangeDiscoverabilityRequest;
import org.openapitools.client.model.Example110;
import org.openapitools.client.model.Example111;
import org.openapitools.client.model.Example112;
import org.openapitools.client.model.ForgetpaireddeviceRequest;
import org.openapitools.client.model.PairwithSpeakerRequest;
import org.openapitools.client.model.ScanfordevicesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BluetoothApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BluetoothApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BluetoothApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeDiscoverability
     * @param changeDiscoverabilityRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDiscoverabilityCall(ChangeDiscoverabilityRequest changeDiscoverabilityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeDiscoverabilityRequest;

        // create path and map variables
        String localVarPath = "/bluetooth/discovery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeDiscoverabilityValidateBeforeCall(ChangeDiscoverabilityRequest changeDiscoverabilityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeDiscoverabilityRequest' is set
        if (changeDiscoverabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'changeDiscoverabilityRequest' when calling changeDiscoverability(Async)");
        }

        return changeDiscoverabilityCall(changeDiscoverabilityRequest, _callback);

    }

    /**
     * Change Discoverability
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 1 only**  This enables/disables Home&#39;s bluetooth discovery and other devices can pair with Home (where Home acts as a speaker).
     * @param changeDiscoverabilityRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object changeDiscoverability(ChangeDiscoverabilityRequest changeDiscoverabilityRequest) throws ApiException {
        ApiResponse<Object> localVarResp = changeDiscoverabilityWithHttpInfo(changeDiscoverabilityRequest);
        return localVarResp.getData();
    }

    /**
     * Change Discoverability
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 1 only**  This enables/disables Home&#39;s bluetooth discovery and other devices can pair with Home (where Home acts as a speaker).
     * @param changeDiscoverabilityRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> changeDiscoverabilityWithHttpInfo(ChangeDiscoverabilityRequest changeDiscoverabilityRequest) throws ApiException {
        okhttp3.Call localVarCall = changeDiscoverabilityValidateBeforeCall(changeDiscoverabilityRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change Discoverability (asynchronously)
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 1 only**  This enables/disables Home&#39;s bluetooth discovery and other devices can pair with Home (where Home acts as a speaker).
     * @param changeDiscoverabilityRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeDiscoverabilityAsync(ChangeDiscoverabilityRequest changeDiscoverabilityRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeDiscoverabilityValidateBeforeCall(changeDiscoverabilityRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forgetpaireddevice
     * @param forgetpaireddeviceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forgetpaireddeviceCall(ForgetpaireddeviceRequest forgetpaireddeviceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forgetpaireddeviceRequest;

        // create path and map variables
        String localVarPath = "/bluetooth/bond";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forgetpaireddeviceValidateBeforeCall(ForgetpaireddeviceRequest forgetpaireddeviceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'forgetpaireddeviceRequest' is set
        if (forgetpaireddeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'forgetpaireddeviceRequest' when calling forgetpaireddevice(Async)");
        }

        return forgetpaireddeviceCall(forgetpaireddeviceRequest, _callback);

    }

    /**
     * Forget paired device
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This is to forget paired devices by mac address. Works for both kinds of devices (Part 1 and Part 2).
     * @param forgetpaireddeviceRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object forgetpaireddevice(ForgetpaireddeviceRequest forgetpaireddeviceRequest) throws ApiException {
        ApiResponse<Object> localVarResp = forgetpaireddeviceWithHttpInfo(forgetpaireddeviceRequest);
        return localVarResp.getData();
    }

    /**
     * Forget paired device
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This is to forget paired devices by mac address. Works for both kinds of devices (Part 1 and Part 2).
     * @param forgetpaireddeviceRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> forgetpaireddeviceWithHttpInfo(ForgetpaireddeviceRequest forgetpaireddeviceRequest) throws ApiException {
        okhttp3.Call localVarCall = forgetpaireddeviceValidateBeforeCall(forgetpaireddeviceRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Forget paired device (asynchronously)
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This is to forget paired devices by mac address. Works for both kinds of devices (Part 1 and Part 2).
     * @param forgetpaireddeviceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forgetpaireddeviceAsync(ForgetpaireddeviceRequest forgetpaireddeviceRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = forgetpaireddeviceValidateBeforeCall(forgetpaireddeviceRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPairedDevices
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPairedDevicesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bluetooth/get_bonded";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPairedDevicesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPairedDevicesCall(_callback);

    }

    /**
     * Get Paired Devices
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This gives a list of all paired or &#39;bonded&#39; devices. The response field names are self-descriptive.
     * @return List&lt;Example111&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Example111> getPairedDevices() throws ApiException {
        ApiResponse<List<Example111>> localVarResp = getPairedDevicesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Paired Devices
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This gives a list of all paired or &#39;bonded&#39; devices. The response field names are self-descriptive.
     * @return ApiResponse&lt;List&lt;Example111&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Example111>> getPairedDevicesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPairedDevicesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Example111>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Paired Devices (asynchronously)
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For both parts**  This gives a list of all paired or &#39;bonded&#39; devices. The response field names are self-descriptive.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPairedDevicesAsync(final ApiCallback<List<Example111>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPairedDevicesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Example111>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScanResults
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanResultsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bluetooth/scan_results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScanResultsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getScanResultsCall(_callback);

    }

    /**
     * Get Scan Results
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This returns a list of all nearby bluetooth devices. While the Home app only shows speakers, this list contains all devices including TVs, mobiles, etc.  &#x60;rssi&#x60; is signal strength, &#x60;name&#x60; is name, &#x60;mac_address&#x60; is mac address.   &#x60;device_class&#x60; and &#x60;device_type&#x60; are bluetooth codes.    The Home app only lists those devices with &#x60;expected_profiles&#x60; &gt; 0. Basically, the device should function as a speaker.
     * @return List&lt;Example112&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Example112> getScanResults() throws ApiException {
        ApiResponse<List<Example112>> localVarResp = getScanResultsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Scan Results
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This returns a list of all nearby bluetooth devices. While the Home app only shows speakers, this list contains all devices including TVs, mobiles, etc.  &#x60;rssi&#x60; is signal strength, &#x60;name&#x60; is name, &#x60;mac_address&#x60; is mac address.   &#x60;device_class&#x60; and &#x60;device_type&#x60; are bluetooth codes.    The Home app only lists those devices with &#x60;expected_profiles&#x60; &gt; 0. Basically, the device should function as a speaker.
     * @return ApiResponse&lt;List&lt;Example112&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Example112>> getScanResultsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getScanResultsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Example112>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Scan Results (asynchronously)
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This returns a list of all nearby bluetooth devices. While the Home app only shows speakers, this list contains all devices including TVs, mobiles, etc.  &#x60;rssi&#x60; is signal strength, &#x60;name&#x60; is name, &#x60;mac_address&#x60; is mac address.   &#x60;device_class&#x60; and &#x60;device_type&#x60; are bluetooth codes.    The Home app only lists those devices with &#x60;expected_profiles&#x60; &gt; 0. Basically, the device should function as a speaker.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScanResultsAsync(final ApiCallback<List<Example112>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScanResultsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Example112>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pairwithSpeaker
     * @param pairwithSpeakerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pairwithSpeakerCall(PairwithSpeakerRequest pairwithSpeakerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pairwithSpeakerRequest;

        // create path and map variables
        String localVarPath = "/bluetooth/connect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pairwithSpeakerValidateBeforeCall(PairwithSpeakerRequest pairwithSpeakerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pairwithSpeakerRequest' is set
        if (pairwithSpeakerRequest == null) {
            throw new ApiException("Missing the required parameter 'pairwithSpeakerRequest' when calling pairwithSpeaker(Async)");
        }

        return pairwithSpeakerCall(pairwithSpeakerRequest, _callback);

    }

    /**
     * Pair with Speaker
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This pairs with other bluetooth speakers by mac address.
     * @param pairwithSpeakerRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object pairwithSpeaker(PairwithSpeakerRequest pairwithSpeakerRequest) throws ApiException {
        ApiResponse<Object> localVarResp = pairwithSpeakerWithHttpInfo(pairwithSpeakerRequest);
        return localVarResp.getData();
    }

    /**
     * Pair with Speaker
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This pairs with other bluetooth speakers by mac address.
     * @param pairwithSpeakerRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pairwithSpeakerWithHttpInfo(PairwithSpeakerRequest pairwithSpeakerRequest) throws ApiException {
        okhttp3.Call localVarCall = pairwithSpeakerValidateBeforeCall(pairwithSpeakerRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pair with Speaker (asynchronously)
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This pairs with other bluetooth speakers by mac address.
     * @param pairwithSpeakerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pairwithSpeakerAsync(PairwithSpeakerRequest pairwithSpeakerRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pairwithSpeakerValidateBeforeCall(pairwithSpeakerRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scanfordevices
     * @param scanfordevicesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanfordevicesCall(ScanfordevicesRequest scanfordevicesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scanfordevicesRequest;

        // create path and map variables
        String localVarPath = "/bluetooth/scan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scanfordevicesValidateBeforeCall(ScanfordevicesRequest scanfordevicesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scanfordevicesRequest' is set
        if (scanfordevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'scanfordevicesRequest' when calling scanfordevices(Async)");
        }

        return scanfordevicesCall(scanfordevicesRequest, _callback);

    }

    /**
     * Scan for devices
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This initiates scan for other bluetooth speakers/devices. Scan results will be updated continuously for &#x60;timeout&#x60; seconds.   To get the scan results, see /setup/bluetooth/scan_results.
     * @param scanfordevicesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object scanfordevices(ScanfordevicesRequest scanfordevicesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = scanfordevicesWithHttpInfo(scanfordevicesRequest);
        return localVarResp.getData();
    }

    /**
     * Scan for devices
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This initiates scan for other bluetooth speakers/devices. Scan results will be updated continuously for &#x60;timeout&#x60; seconds.   To get the scan results, see /setup/bluetooth/scan_results.
     * @param scanfordevicesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> scanfordevicesWithHttpInfo(ScanfordevicesRequest scanfordevicesRequest) throws ApiException {
        okhttp3.Call localVarCall = scanfordevicesValidateBeforeCall(scanfordevicesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scan for devices (asynchronously)
     * *See note for Bluetooth under &#x60;/setup/bluetooth/status&#x60;*  **For Part 2 only**  This initiates scan for other bluetooth speakers/devices. Scan results will be updated continuously for &#x60;timeout&#x60; seconds.   To get the scan results, see /setup/bluetooth/scan_results.
     * @param scanfordevicesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scanfordevicesAsync(ScanfordevicesRequest scanfordevicesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = scanfordevicesValidateBeforeCall(scanfordevicesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for status
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bluetooth/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return statusCall(_callback);

    }

    /**
     * Status
     * &gt; **There are 2 parts of Bluetooth.** &gt; &gt; *Part 1*: Devices like phones connect to Home and play audio through Home.   &gt; For this, /setup/bluetooth/discovery is used to make Home discoverable. Then devices can connect to it as if Home is just another bluetooth speaker. &gt; &gt; *Part 2*: Bluetooth speakers connect to Home and Home plays audio through the speakers. &gt; For this, /setup/bluetooth/scan and /setup/bluetooth/scan_results are used to connect to other speakers. &gt; &gt; The other endpoints are common for both parts.   **For both parts**  This gives the status of all bluetooth things. - Not sure what &#x60;audio_mode&#x60; is. - &#x60;discovery_enabled&#x60; states whether Home is discoverable. (**Part 1**) - &#x60;connecting_devices&#x60; is a list of all media sources (like phones) connected to Home. (**Part 1**) - &#x60;scanning_enabled&#x60; states whether Home scanning for other bluetooth speakers/devices. (**Part 2**) - &#x60;connected_devices&#x60; is a list of all speakers connected to Home. (**Part 2**)
     * @return Example110
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example110 status() throws ApiException {
        ApiResponse<Example110> localVarResp = statusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Status
     * &gt; **There are 2 parts of Bluetooth.** &gt; &gt; *Part 1*: Devices like phones connect to Home and play audio through Home.   &gt; For this, /setup/bluetooth/discovery is used to make Home discoverable. Then devices can connect to it as if Home is just another bluetooth speaker. &gt; &gt; *Part 2*: Bluetooth speakers connect to Home and Home plays audio through the speakers. &gt; For this, /setup/bluetooth/scan and /setup/bluetooth/scan_results are used to connect to other speakers. &gt; &gt; The other endpoints are common for both parts.   **For both parts**  This gives the status of all bluetooth things. - Not sure what &#x60;audio_mode&#x60; is. - &#x60;discovery_enabled&#x60; states whether Home is discoverable. (**Part 1**) - &#x60;connecting_devices&#x60; is a list of all media sources (like phones) connected to Home. (**Part 1**) - &#x60;scanning_enabled&#x60; states whether Home scanning for other bluetooth speakers/devices. (**Part 2**) - &#x60;connected_devices&#x60; is a list of all speakers connected to Home. (**Part 2**)
     * @return ApiResponse&lt;Example110&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example110> statusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = statusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Example110>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Status (asynchronously)
     * &gt; **There are 2 parts of Bluetooth.** &gt; &gt; *Part 1*: Devices like phones connect to Home and play audio through Home.   &gt; For this, /setup/bluetooth/discovery is used to make Home discoverable. Then devices can connect to it as if Home is just another bluetooth speaker. &gt; &gt; *Part 2*: Bluetooth speakers connect to Home and Home plays audio through the speakers. &gt; For this, /setup/bluetooth/scan and /setup/bluetooth/scan_results are used to connect to other speakers. &gt; &gt; The other endpoints are common for both parts.   **For both parts**  This gives the status of all bluetooth things. - Not sure what &#x60;audio_mode&#x60; is. - &#x60;discovery_enabled&#x60; states whether Home is discoverable. (**Part 1**) - &#x60;connecting_devices&#x60; is a list of all media sources (like phones) connected to Home. (**Part 1**) - &#x60;scanning_enabled&#x60; states whether Home scanning for other bluetooth speakers/devices. (**Part 2**) - &#x60;connected_devices&#x60; is a list of all speakers connected to Home. (**Part 2**)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call statusAsync(final ApiCallback<Example110> _callback) throws ApiException {

        okhttp3.Call localVarCall = statusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Example110>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
