/*
 * Google Home
 * # Google Home Local API This is an unofficial documentation of the local API used by the Home app to communicate with GH devices. [GitHub Repo](https://github.com/rithvikvibhu/GHLocalApi)  [![GitHub stars](https://img.shields.io/github/stars/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/stargazers) [![GitHub license](https://img.shields.io/github/license/rithvikvibhu/GHLocalApi)](https://github.com/rithvikvibhu/GHLocalApi/blob/master/LICENSE.md)  ## Getting Started  Requests must be made over HTTPS, port 8443, so the base URL for these endpoints is: `https://<google-home-ip>:8443/setup/`  Get the IP of Google Home from the Google Home app (Device Settings -> End of the list) or from your router.  GET requests are simple, in the browser kind.   POST requests need to set the header (when there's a body): `content-type: application/json`  ## Authentication  Since June 2019, most requests (with exceptions like `/setup/eureka_info`) need a local authorization token.  There are 3 kinds of tokens involved here:  ### Local Authorization Token This token must be sent in all requests in the header `cast-local-authorization-token`. It is short-lived (~1 day) and may change unexpectedly (with a sync, change in homegraph, etc.) ##### Get this token - With access to an android device, [get this token directly by either method](https://gist.github.com/rithvikvibhu/1a0f4937af957ef6a78453e3be482c1f). - Without a device, or to integrate it with a script, use an access token to get the homegraph and extract the token. To get an access token, read the next section. Check the example section for more info.  ### Access Token This is a standard google oauth2 access token. It is in the form `ya29.***`. This gives access to the Google Home Foyer API. These expire in an hour. Use this to get the homegraph (and then the local authorization token above). ##### Get this token To get this access token, either a Google account username/password or a Google Master Token is needed. More info in the gist. Use the script [from this gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d).  ### Master Token This is in the form `aas_et/_***` and can be used to request access tokens. ##### Get this token The same [script in the gist](https://gist.github.com/rithvikvibhu/952f83ea656c6782fbd0f1645059055d) that gets the access token can also get the master token. Needs Google account creds.  ## Example  Here's the whole flow from just a pair of username/password to using the local API.  Prerequisites: - [grpcurl](https://github.com/fullstorydev/grpcurl) - [Proto files](https://drive.google.com/drive/folders/1RvnN3y-G23pd2SWHmfV_7sef8QU5GNF4?usp=sharing) (preserve folder structure)  ### 1. Get an access token with the script - Download get_tokens.py - Fill in username and password ```sh python3 get_tokens.py # Note down the access token printed. ```  ### 2. Use the access token and get home graph - This prints the json and uses jq to parse and filter out the fields deviceName and localAuthToken - This will give a list of all devices and their local auth tokens ```sh ./grpcurl -H 'authorization: Bearer ya29.a0Af****' \\  -import-path /path/to/protos \\  -proto /path/to/protos/google/internal/home/foyer/v1.proto \\  googlehomefoyer-pa.googleapis.com:443 \\  google.internal.home.foyer.v1.StructuresService/GetHomeGraph | jq '.home.devices[] | {deviceName, localAuthToken}' # Note down the local auth token for the device you want. ```  ### 3. Make the call to the local device using the local auth token ```sh curl -H \"cast-local-authorization-token: LOCAL_AUTH_TOKEN\" --verbose --insecure https://192.168.0.18:8443/setup/bluetooth/status ```
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppDeviceIDRequest;
import org.openapitools.client.model.CheckReadyStatusRequest;
import org.openapitools.client.model.Example1;
import org.openapitools.client.model.Example11;
import org.openapitools.client.model.Example12;
import org.openapitools.client.model.Example13;
import org.openapitools.client.model.Example14;
import org.openapitools.client.model.Example15;
import org.openapitools.client.model.Example16;
import org.openapitools.client.model.TestInternetDownloadSpeedRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceInfoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeviceInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appDeviceID
     * @param appDeviceIDRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDeviceIDCall(AppDeviceIDRequest appDeviceIDRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appDeviceIDRequest;

        // create path and map variables
        String localVarPath = "/get_app_device_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appDeviceIDValidateBeforeCall(AppDeviceIDRequest appDeviceIDRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appDeviceIDRequest' is set
        if (appDeviceIDRequest == null) {
            throw new ApiException("Missing the required parameter 'appDeviceIDRequest' when calling appDeviceID(Async)");
        }

        return appDeviceIDCall(appDeviceIDRequest, _callback);

    }

    /**
     * App Device ID
     * This gives \&quot;app device id\&quot;, \&quot;certificate\&quot; and \&quot;signed data\&quot;.   The &#x60;app_id&#x60; in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to &#x60;E8C28D3C&#x60;.    The certificate is valid and issued by &#x60;Chromecast ICA 6 (Audio Assist), Google Inc&#x60;.  Not sure what the other two are.
     * @param appDeviceIDRequest  (required)
     * @return Example11
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Example11 appDeviceID(AppDeviceIDRequest appDeviceIDRequest) throws ApiException {
        ApiResponse<Example11> localVarResp = appDeviceIDWithHttpInfo(appDeviceIDRequest);
        return localVarResp.getData();
    }

    /**
     * App Device ID
     * This gives \&quot;app device id\&quot;, \&quot;certificate\&quot; and \&quot;signed data\&quot;.   The &#x60;app_id&#x60; in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to &#x60;E8C28D3C&#x60;.    The certificate is valid and issued by &#x60;Chromecast ICA 6 (Audio Assist), Google Inc&#x60;.  Not sure what the other two are.
     * @param appDeviceIDRequest  (required)
     * @return ApiResponse&lt;Example11&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example11> appDeviceIDWithHttpInfo(AppDeviceIDRequest appDeviceIDRequest) throws ApiException {
        okhttp3.Call localVarCall = appDeviceIDValidateBeforeCall(appDeviceIDRequest, null);
        Type localVarReturnType = new TypeToken<Example11>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * App Device ID (asynchronously)
     * This gives \&quot;app device id\&quot;, \&quot;certificate\&quot; and \&quot;signed data\&quot;.   The &#x60;app_id&#x60; in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to &#x60;E8C28D3C&#x60;.    The certificate is valid and issued by &#x60;Chromecast ICA 6 (Audio Assist), Google Inc&#x60;.  Not sure what the other two are.
     * @param appDeviceIDRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appDeviceIDAsync(AppDeviceIDRequest appDeviceIDRequest, final ApiCallback<Example11> _callback) throws ApiException {

        okhttp3.Call localVarCall = appDeviceIDValidateBeforeCall(appDeviceIDRequest, _callback);
        Type localVarReturnType = new TypeToken<Example11>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkReadyStatus
     * @param checkReadyStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkReadyStatusCall(CheckReadyStatusRequest checkReadyStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkReadyStatusRequest;

        // create path and map variables
        String localVarPath = "/assistant/check_ready_status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkReadyStatusValidateBeforeCall(CheckReadyStatusRequest checkReadyStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkReadyStatusRequest' is set
        if (checkReadyStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'checkReadyStatusRequest' when calling checkReadyStatus(Async)");
        }

        return checkReadyStatusCall(checkReadyStatusRequest, _callback);

    }

    /**
     * Check Ready Status
     * **Update:** This seems to have changed now and is no longer possible. The error is also new.  Setting &#x60;play_ready_message&#x60; to true plays a welcome message on the device saying \&quot;Hi, I&#39;m your Google Assistant. I&#39;m here to help. To learn a few things you can do, continue in the Google Home app.\&quot;
     * @param checkReadyStatusRequest  (required)
     * @return Example13
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example13 checkReadyStatus(CheckReadyStatusRequest checkReadyStatusRequest) throws ApiException {
        ApiResponse<Example13> localVarResp = checkReadyStatusWithHttpInfo(checkReadyStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Check Ready Status
     * **Update:** This seems to have changed now and is no longer possible. The error is also new.  Setting &#x60;play_ready_message&#x60; to true plays a welcome message on the device saying \&quot;Hi, I&#39;m your Google Assistant. I&#39;m here to help. To learn a few things you can do, continue in the Google Home app.\&quot;
     * @param checkReadyStatusRequest  (required)
     * @return ApiResponse&lt;Example13&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example13> checkReadyStatusWithHttpInfo(CheckReadyStatusRequest checkReadyStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = checkReadyStatusValidateBeforeCall(checkReadyStatusRequest, null);
        Type localVarReturnType = new TypeToken<Example13>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Ready Status (asynchronously)
     * **Update:** This seems to have changed now and is no longer possible. The error is also new.  Setting &#x60;play_ready_message&#x60; to true plays a welcome message on the device saying \&quot;Hi, I&#39;m your Google Assistant. I&#39;m here to help. To learn a few things you can do, continue in the Google Home app.\&quot;
     * @param checkReadyStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkReadyStatusAsync(CheckReadyStatusRequest checkReadyStatusRequest, final ApiCallback<Example13> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkReadyStatusValidateBeforeCall(checkReadyStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Example13>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eurekaInfo
     * @param params  (required)
     * @param options  (required)
     * @param nonce  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eurekaInfoCall(String params, String options, Integer nonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eureka_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (options != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options", options));
        }

        if (nonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonce", nonce));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eurekaInfoValidateBeforeCall(String params, String options, Integer nonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'params' is set
        if (params == null) {
            throw new ApiException("Missing the required parameter 'params' when calling eurekaInfo(Async)");
        }

        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException("Missing the required parameter 'options' when calling eurekaInfo(Async)");
        }

        // verify the required parameter 'nonce' is set
        if (nonce == null) {
            throw new ApiException("Missing the required parameter 'nonce' when calling eurekaInfo(Async)");
        }

        return eurekaInfoCall(params, options, nonce, _callback);

    }

    /**
     * Eureka Info
     * This gives most of the device info. The GET parameter &#x60;param&#x60; is a comma separated list of json keys to fetch. Currently, these params are known: &#x60;version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer,sign,aogh,ultrasound,mesh&#x60;  Nested items can also be filtered using the dot notation. Example: &#x60;audio.digital&#x60;  The &#x60;options&#x60; GET parameter is always set to &#x60;detail&#x60; or &#x60;detail,sign&#x60;. &#x60;sign&#x60; signs the &#x60;nonce&#x60; and returns some value.  The &#x60;nonce&#x60; GET parameter is an integer value signed with needed (see &#x60;option&#x60; parameter above).
     * @param params  (required)
     * @param options  (required)
     * @param nonce  (required)
     * @return Example1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example1 eurekaInfo(String params, String options, Integer nonce) throws ApiException {
        ApiResponse<Example1> localVarResp = eurekaInfoWithHttpInfo(params, options, nonce);
        return localVarResp.getData();
    }

    /**
     * Eureka Info
     * This gives most of the device info. The GET parameter &#x60;param&#x60; is a comma separated list of json keys to fetch. Currently, these params are known: &#x60;version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer,sign,aogh,ultrasound,mesh&#x60;  Nested items can also be filtered using the dot notation. Example: &#x60;audio.digital&#x60;  The &#x60;options&#x60; GET parameter is always set to &#x60;detail&#x60; or &#x60;detail,sign&#x60;. &#x60;sign&#x60; signs the &#x60;nonce&#x60; and returns some value.  The &#x60;nonce&#x60; GET parameter is an integer value signed with needed (see &#x60;option&#x60; parameter above).
     * @param params  (required)
     * @param options  (required)
     * @param nonce  (required)
     * @return ApiResponse&lt;Example1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example1> eurekaInfoWithHttpInfo(String params, String options, Integer nonce) throws ApiException {
        okhttp3.Call localVarCall = eurekaInfoValidateBeforeCall(params, options, nonce, null);
        Type localVarReturnType = new TypeToken<Example1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Eureka Info (asynchronously)
     * This gives most of the device info. The GET parameter &#x60;param&#x60; is a comma separated list of json keys to fetch. Currently, these params are known: &#x60;version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer,sign,aogh,ultrasound,mesh&#x60;  Nested items can also be filtered using the dot notation. Example: &#x60;audio.digital&#x60;  The &#x60;options&#x60; GET parameter is always set to &#x60;detail&#x60; or &#x60;detail,sign&#x60;. &#x60;sign&#x60; signs the &#x60;nonce&#x60; and returns some value.  The &#x60;nonce&#x60; GET parameter is an integer value signed with needed (see &#x60;option&#x60; parameter above).
     * @param params  (required)
     * @param options  (required)
     * @param nonce  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eurekaInfoAsync(String params, String options, Integer nonce, final ApiCallback<Example1> _callback) throws ApiException {

        okhttp3.Call localVarCall = eurekaInfoValidateBeforeCall(params, options, nonce, _callback);
        Type localVarReturnType = new TypeToken<Example1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locales
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supported_locales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call localesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return localesCall(_callback);

    }

    /**
     * Locales
     * Simply returns a list of all supported locales.
     * @return List&lt;Example15&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Example15> locales() throws ApiException {
        ApiResponse<List<Example15>> localVarResp = localesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Locales
     * Simply returns a list of all supported locales.
     * @return ApiResponse&lt;List&lt;Example15&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Example15>> localesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = localesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Example15>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Locales (asynchronously)
     * Simply returns a list of all supported locales.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call localesAsync(final ApiCallback<List<Example15>> _callback) throws ApiException {

        okhttp3.Call localVarCall = localesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Example15>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for offer
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call offerValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return offerCall(_callback);

    }

    /**
     * Offer
     * This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device.   A new token is generated for every request.
     * @return Example12
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example12 offer() throws ApiException {
        ApiResponse<Example12> localVarResp = offerWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Offer
     * This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device.   A new token is generated for every request.
     * @return ApiResponse&lt;Example12&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example12> offerWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = offerValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Example12>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Offer (asynchronously)
     * This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device.   A new token is generated for every request.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call offerAsync(final ApiCallback<Example12> _callback) throws ApiException {

        okhttp3.Call localVarCall = offerValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Example12>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testInternetDownloadSpeed
     * @param testInternetDownloadSpeedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testInternetDownloadSpeedCall(TestInternetDownloadSpeedRequest testInternetDownloadSpeedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testInternetDownloadSpeedRequest;

        // create path and map variables
        String localVarPath = "/test_internet_download_speed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInternetDownloadSpeedValidateBeforeCall(TestInternetDownloadSpeedRequest testInternetDownloadSpeedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testInternetDownloadSpeedRequest' is set
        if (testInternetDownloadSpeedRequest == null) {
            throw new ApiException("Missing the required parameter 'testInternetDownloadSpeedRequest' when calling testInternetDownloadSpeed(Async)");
        }

        return testInternetDownloadSpeedCall(testInternetDownloadSpeedRequest, _callback);

    }

    /**
     * Test Internet Download Speed
     * **Update:** This seems to have been removed. Returns 404 Not Found.  This endpoint tests internet download speed. Any sample file URL can be provided.
     * @param testInternetDownloadSpeedRequest  (required)
     * @return Example16
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Example16 testInternetDownloadSpeed(TestInternetDownloadSpeedRequest testInternetDownloadSpeedRequest) throws ApiException {
        ApiResponse<Example16> localVarResp = testInternetDownloadSpeedWithHttpInfo(testInternetDownloadSpeedRequest);
        return localVarResp.getData();
    }

    /**
     * Test Internet Download Speed
     * **Update:** This seems to have been removed. Returns 404 Not Found.  This endpoint tests internet download speed. Any sample file URL can be provided.
     * @param testInternetDownloadSpeedRequest  (required)
     * @return ApiResponse&lt;Example16&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Example16> testInternetDownloadSpeedWithHttpInfo(TestInternetDownloadSpeedRequest testInternetDownloadSpeedRequest) throws ApiException {
        okhttp3.Call localVarCall = testInternetDownloadSpeedValidateBeforeCall(testInternetDownloadSpeedRequest, null);
        Type localVarReturnType = new TypeToken<Example16>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test Internet Download Speed (asynchronously)
     * **Update:** This seems to have been removed. Returns 404 Not Found.  This endpoint tests internet download speed. Any sample file URL can be provided.
     * @param testInternetDownloadSpeedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testInternetDownloadSpeedAsync(TestInternetDownloadSpeedRequest testInternetDownloadSpeedRequest, final ApiCallback<Example16> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInternetDownloadSpeedValidateBeforeCall(testInternetDownloadSpeedRequest, _callback);
        Type localVarReturnType = new TypeToken<Example16>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timezones
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezonesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supported_timezones";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "cast-local-authorization-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timezonesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return timezonesCall(_callback);

    }

    /**
     * Timezones
     * Simply returns a list of all supported timezones.
     * @return List&lt;Example14&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Example14> timezones() throws ApiException {
        ApiResponse<List<Example14>> localVarResp = timezonesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Timezones
     * Simply returns a list of all supported timezones.
     * @return ApiResponse&lt;List&lt;Example14&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Example14>> timezonesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = timezonesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Example14>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Timezones (asynchronously)
     * Simply returns a list of all supported timezones.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timezonesAsync(final ApiCallback<List<Example14>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timezonesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Example14>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
