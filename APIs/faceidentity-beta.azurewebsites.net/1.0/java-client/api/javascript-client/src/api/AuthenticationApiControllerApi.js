/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Customer from '../model/Customer';
import JwtResponse from '../model/JwtResponse';
import LoginUser from '../model/LoginUser';
import Problem from '../model/Problem';
import ResponseStatus from '../model/ResponseStatus';

/**
* AuthenticationApiController service.
* @module api/AuthenticationApiControllerApi
* @version 1.0
*/
export default class AuthenticationApiControllerApi {

    /**
    * Constructs a new AuthenticationApiControllerApi. 
    * @alias module:api/AuthenticationApiControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authenticateUser operation.
     * @callback module:api/AuthenticationApiControllerApi~authenticateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Token
     * @param {module:model/LoginUser} loginUser The LoginUser definition used to returns the token for authentication
     * @param {module:api/AuthenticationApiControllerApi~authenticateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    authenticateUser(loginUser, callback) {
      let postBody = loginUser;
      // verify the required parameter 'loginUser' is set
      if (loginUser === undefined || loginUser === null) {
        throw new Error("Missing the required parameter 'loginUser' when calling authenticateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/authentication/customer/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/AuthenticationApiControllerApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Customer Registration
     * @param {module:model/Customer} register The RegistrationForm definition is used to register the customer
     * @param {module:api/AuthenticationApiControllerApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseStatus}
     */
    register(register, callback) {
      let postBody = register;
      // verify the required parameter 'register' is set
      if (register === undefined || register === null) {
        throw new Error("Missing the required parameter 'register' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseStatus;
      return this.apiClient.callApi(
        '/authentication/customer/registration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
