openapi: 3.0.1
info:
  contact: {}
  description: Api Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  termsOfService: urn:tos
  title: Api Documentation
  version: "1.0"
  x-apisguru-categories:
  - security
  x-origin:
  - format: swagger
    url: https://faceidentity-beta.azurewebsites.net/api/v1.0.0/v2/api-docs?group=authentication-api
    version: "2.0"
  x-providerName: faceidentity-beta.azurewebsites.net
servers:
- url: //faceidentity-beta.azurewebsites.net/api/v1.0.0
tags:
- description: the authentication API
  name: authentication-api-controller
paths:
  /authentication/customer/registration:
    post:
      deprecated: false
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        description: The RegistrationForm definition is used to register the customer
        required: true
        x-body-name: register
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
          description: OK
        "201":
          content: {}
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
          description: Unexpected error
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: Customer Registration
      tags:
      - authentication-api-controller
      x-codegen-request-body-name: register
      x-openapi-router-controller: openapi_server.controllers.authentication_api_controller_controller
      x-content-type: application/json
      x-accepts:
      - application/json
  /authentication/customer/token:
    post:
      deprecated: false
      operationId: authenticate_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
        description: The LoginUser definition used to returns the token for authentication
        required: true
        x-body-name: loginUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
          description: OK
        "201":
          content: {}
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
          description: Unexpected error
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: Get Token
      tags:
      - authentication-api-controller
      x-codegen-request-body-name: loginUser
      x-openapi-router-controller: openapi_server.controllers.authentication_api_controller_controller
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    Customer:
      example:
        zip: zip
        country: country
        lastName: lastName
        city: city
        companyDescription: companyDescription
        companyName: companyName
        faceRecognitionType: AWS or AZURE
        firstName: firstName
        password: password
        phone: phone
        streetAddress: streetAddress
        state: state
        username: username
      properties:
        city:
          description: The city of address
          title: city
          type: string
        companyDescription:
          description: The company Description
          title: companyDescription
          type: string
        companyName:
          description: The company name of customer
          title: companyName
          type: string
        country:
          description: The country of address
          title: country
          type: string
        faceRecognitionType:
          description: The facial recognition type of customer
          example: AWS or AZURE
          title: faceRecognitionType
          type: string
        firstName:
          description: The first name of customer
          title: firstName
          type: string
        lastName:
          description: The last name of customer
          title: lastName
          type: string
        password:
          description: The password of customer
          title: password
          type: string
        phone:
          description: The mobile number
          title: phone
          type: string
        state:
          description: The state of customer
          title: state
          type: string
        streetAddress:
          description: The street of address
          title: streetAddress
          type: string
        username:
          description: The username of customer nothing but an email
          title: username
          type: string
        zip:
          description: The zip code of address
          title: zip
          type: string
      required:
      - companyName
      - faceRecognitionType
      - password
      - username
      title: Customer
      type: object
    JwtResponse:
      example:
        role: role
        customerId: 0
        type: type
        userId: 6
        email: email
        token: token
      properties:
        customerId:
          description: The ID of the Customer
          format: int32
          title: customerId
          type: integer
        email:
          description: The Role of the User
          title: email
          type: string
        role:
          description: The Role of the User
          title: role
          type: string
        token:
          description: The value of token
          title: token
          type: string
        type:
          description: The type of token
          title: type
          type: string
        userId:
          description: The ID of the User
          format: int32
          title: userId
          type: integer
      required:
      - token
      - type
      title: JwtResponse
      type: object
    LoginUser:
      example:
        password: password
        username: username
      properties:
        password:
          description: The user password
          title: password
          type: string
        username:
          description: The name of user
          title: username
          type: string
      required:
      - password
      - username
      title: LoginUser
      type: object
    Problem:
      example:
        code: code
        message: message
      properties:
        code:
          title: code
          type: string
        message:
          title: message
          type: string
      required:
      - code
      - message
      title: Problem
      type: object
    ResponseEntity:
      properties:
        body:
          properties: {}
          type: object
        statusCode:
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
          type: string
        statusCodeValue:
          format: int32
          type: integer
      title: ResponseEntity
      type: object
    ResponseStatus:
      example:
        code: success
        message: message
      properties:
        code:
          description: Indicates whether connection was established or not
          enum:
          - success
          - failure
          title: code
          type: string
        message:
          description: The message that provides more detail relating to the status
            code
          title: message
          type: string
      required:
      - code
      - message
      title: ResponseStatus
      type: object
x-original-swagger-version: "2.0"

