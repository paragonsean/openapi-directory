# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JwtResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_id: int=None, email: str=None, role: str=None, token: str=None, type: str=None, user_id: int=None):
        """JwtResponse - a model defined in OpenAPI

        :param customer_id: The customer_id of this JwtResponse.
        :param email: The email of this JwtResponse.
        :param role: The role of this JwtResponse.
        :param token: The token of this JwtResponse.
        :param type: The type of this JwtResponse.
        :param user_id: The user_id of this JwtResponse.
        """
        self.openapi_types = {
            'customer_id': int,
            'email': str,
            'role': str,
            'token': str,
            'type': str,
            'user_id': int
        }

        self.attribute_map = {
            'customer_id': 'customerId',
            'email': 'email',
            'role': 'role',
            'token': 'token',
            'type': 'type',
            'user_id': 'userId'
        }

        self._customer_id = customer_id
        self._email = email
        self._role = role
        self._token = token
        self._type = type
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JwtResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JwtResponse of this JwtResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_id(self):
        """Gets the customer_id of this JwtResponse.

        The ID of the Customer

        :return: The customer_id of this JwtResponse.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this JwtResponse.

        The ID of the Customer

        :param customer_id: The customer_id of this JwtResponse.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """Gets the email of this JwtResponse.

        The Role of the User

        :return: The email of this JwtResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this JwtResponse.

        The Role of the User

        :param email: The email of this JwtResponse.
        :type email: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this JwtResponse.

        The Role of the User

        :return: The role of this JwtResponse.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this JwtResponse.

        The Role of the User

        :param role: The role of this JwtResponse.
        :type role: str
        """

        self._role = role

    @property
    def token(self):
        """Gets the token of this JwtResponse.

        The value of token

        :return: The token of this JwtResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this JwtResponse.

        The value of token

        :param token: The token of this JwtResponse.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def type(self):
        """Gets the type of this JwtResponse.

        The type of token

        :return: The type of this JwtResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JwtResponse.

        The type of token

        :param type: The type of this JwtResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this JwtResponse.

        The ID of the User

        :return: The user_id of this JwtResponse.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JwtResponse.

        The ID of the User

        :param user_id: The user_id of this JwtResponse.
        :type user_id: int
        """

        self._user_id = user_id
