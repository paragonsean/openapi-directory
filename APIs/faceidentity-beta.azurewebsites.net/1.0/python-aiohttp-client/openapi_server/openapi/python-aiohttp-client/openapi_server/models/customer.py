# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, company_description: str=None, company_name: str=None, country: str=None, face_recognition_type: str=None, first_name: str=None, last_name: str=None, password: str=None, phone: str=None, state: str=None, street_address: str=None, username: str=None, zip: str=None):
        """Customer - a model defined in OpenAPI

        :param city: The city of this Customer.
        :param company_description: The company_description of this Customer.
        :param company_name: The company_name of this Customer.
        :param country: The country of this Customer.
        :param face_recognition_type: The face_recognition_type of this Customer.
        :param first_name: The first_name of this Customer.
        :param last_name: The last_name of this Customer.
        :param password: The password of this Customer.
        :param phone: The phone of this Customer.
        :param state: The state of this Customer.
        :param street_address: The street_address of this Customer.
        :param username: The username of this Customer.
        :param zip: The zip of this Customer.
        """
        self.openapi_types = {
            'city': str,
            'company_description': str,
            'company_name': str,
            'country': str,
            'face_recognition_type': str,
            'first_name': str,
            'last_name': str,
            'password': str,
            'phone': str,
            'state': str,
            'street_address': str,
            'username': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'company_description': 'companyDescription',
            'company_name': 'companyName',
            'country': 'country',
            'face_recognition_type': 'faceRecognitionType',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'password': 'password',
            'phone': 'phone',
            'state': 'state',
            'street_address': 'streetAddress',
            'username': 'username',
            'zip': 'zip'
        }

        self._city = city
        self._company_description = company_description
        self._company_name = company_name
        self._country = country
        self._face_recognition_type = face_recognition_type
        self._first_name = first_name
        self._last_name = last_name
        self._password = password
        self._phone = phone
        self._state = state
        self._street_address = street_address
        self._username = username
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Customer of this Customer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Customer.

        The city of address

        :return: The city of this Customer.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Customer.

        The city of address

        :param city: The city of this Customer.
        :type city: str
        """

        self._city = city

    @property
    def company_description(self):
        """Gets the company_description of this Customer.

        The company Description

        :return: The company_description of this Customer.
        :rtype: str
        """
        return self._company_description

    @company_description.setter
    def company_description(self, company_description):
        """Sets the company_description of this Customer.

        The company Description

        :param company_description: The company_description of this Customer.
        :type company_description: str
        """

        self._company_description = company_description

    @property
    def company_name(self):
        """Gets the company_name of this Customer.

        The company name of customer

        :return: The company_name of this Customer.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Customer.

        The company name of customer

        :param company_name: The company_name of this Customer.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this Customer.

        The country of address

        :return: The country of this Customer.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Customer.

        The country of address

        :param country: The country of this Customer.
        :type country: str
        """

        self._country = country

    @property
    def face_recognition_type(self):
        """Gets the face_recognition_type of this Customer.

        The facial recognition type of customer

        :return: The face_recognition_type of this Customer.
        :rtype: str
        """
        return self._face_recognition_type

    @face_recognition_type.setter
    def face_recognition_type(self, face_recognition_type):
        """Sets the face_recognition_type of this Customer.

        The facial recognition type of customer

        :param face_recognition_type: The face_recognition_type of this Customer.
        :type face_recognition_type: str
        """
        if face_recognition_type is None:
            raise ValueError("Invalid value for `face_recognition_type`, must not be `None`")

        self._face_recognition_type = face_recognition_type

    @property
    def first_name(self):
        """Gets the first_name of this Customer.

        The first name of customer

        :return: The first_name of this Customer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.

        The first name of customer

        :param first_name: The first_name of this Customer.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Customer.

        The last name of customer

        :return: The last_name of this Customer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.

        The last name of customer

        :param last_name: The last_name of this Customer.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this Customer.

        The password of customer

        :return: The password of this Customer.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Customer.

        The password of customer

        :param password: The password of this Customer.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this Customer.

        The mobile number

        :return: The phone of this Customer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Customer.

        The mobile number

        :param phone: The phone of this Customer.
        :type phone: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this Customer.

        The state of customer

        :return: The state of this Customer.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Customer.

        The state of customer

        :param state: The state of this Customer.
        :type state: str
        """

        self._state = state

    @property
    def street_address(self):
        """Gets the street_address of this Customer.

        The street of address

        :return: The street_address of this Customer.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Customer.

        The street of address

        :param street_address: The street_address of this Customer.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def username(self):
        """Gets the username of this Customer.

        The username of customer nothing but an email

        :return: The username of this Customer.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Customer.

        The username of customer nothing but an email

        :param username: The username of this Customer.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def zip(self):
        """Gets the zip of this Customer.

        The zip code of address

        :return: The zip of this Customer.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Customer.

        The zip code of address

        :param zip: The zip of this Customer.
        :type zip: str
        """

        self._zip = zip
