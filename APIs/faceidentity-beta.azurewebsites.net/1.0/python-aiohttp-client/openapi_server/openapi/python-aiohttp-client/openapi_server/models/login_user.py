# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoginUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, username: str=None):
        """LoginUser - a model defined in OpenAPI

        :param password: The password of this LoginUser.
        :param username: The username of this LoginUser.
        """
        self.openapi_types = {
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'password': 'password',
            'username': 'username'
        }

        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginUser of this LoginUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this LoginUser.

        The user password

        :return: The password of this LoginUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginUser.

        The user password

        :param password: The password of this LoginUser.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this LoginUser.

        The name of user

        :return: The username of this LoginUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LoginUser.

        The name of user

        :param username: The username of this LoginUser.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
