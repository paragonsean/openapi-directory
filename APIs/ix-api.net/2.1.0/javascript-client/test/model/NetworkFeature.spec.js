/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IxApi);
  }
}(this, function(expect, IxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IxApi.NetworkFeature();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NetworkFeature', function() {
    it('should create an instance of NetworkFeature', function() {
      // uncomment below and update the code to test NetworkFeature
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be.a(IxApi.NetworkFeature);
    });

    it('should have the property addressFamilies (base name: "address_families")', function() {
      // uncomment below and update the code to test the property addressFamilies
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property asn (base name: "asn")', function() {
      // uncomment below and update the code to test the property asn
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property availableBgpSessionTypes (base name: "available_bgp_session_types")', function() {
      // uncomment below and update the code to test the property availableBgpSessionTypes
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property flags (base name: "flags")', function() {
      // uncomment below and update the code to test the property flags
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property fqdn (base name: "fqdn")', function() {
      // uncomment below and update the code to test the property fqdn
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property ipV4 (base name: "ip_v4")', function() {
      // uncomment below and update the code to test the property ipV4
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property ipV6 (base name: "ip_v6")', function() {
      // uncomment below and update the code to test the property ipV6
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property lookingGlassUrl (base name: "looking_glass_url")', function() {
      // uncomment below and update the code to test the property lookingGlassUrl
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property networkService (base name: "network_service")', function() {
      // uncomment below and update the code to test the property networkService
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property nfcRequiredContactRoles (base name: "nfc_required_contact_roles")', function() {
      // uncomment below and update the code to test the property nfcRequiredContactRoles
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property sessionMode (base name: "session_mode")', function() {
      // uncomment below and update the code to test the property sessionMode
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new IxApi.NetworkFeature();
      //expect(instance).to.be();
    });

  });

}));
