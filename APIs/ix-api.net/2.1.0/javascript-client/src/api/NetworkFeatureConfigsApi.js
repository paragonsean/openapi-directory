/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import ContactsDestroy400Response from '../model/ContactsDestroy400Response';
import NetworkFeatureConfig from '../model/NetworkFeatureConfig';
import NetworkFeatureConfigRequest from '../model/NetworkFeatureConfigRequest';
import NetworkFeatureConfigUpdate from '../model/NetworkFeatureConfigUpdate';
import NetworkFeatureConfigUpdatePartial from '../model/NetworkFeatureConfigUpdatePartial';

/**
* NetworkFeatureConfigs service.
* @module api/NetworkFeatureConfigsApi
* @version 2.1.0
*/
export default class NetworkFeatureConfigsApi {

    /**
    * Constructs a new NetworkFeatureConfigsApi. 
    * @alias module:api/NetworkFeatureConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the networkFeatureConfigsCreate operation.
     * @callback module:api/NetworkFeatureConfigsApi~networkFeatureConfigsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatureConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a configuration for a `NetworkFeature` defined in the `NetworkFeature`s collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkFeatureConfigRequest} [networkFeatureConfigRequest] Polymorphic Network Feature Config Request
     * @param {module:api/NetworkFeatureConfigsApi~networkFeatureConfigsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatureConfig}
     */
    networkFeatureConfigsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['networkFeatureConfigRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkFeatureConfig;
      return this.apiClient.callApi(
        '/network-feature-configs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkFeatureConfigsDestroy operation.
     * @callback module:api/NetworkFeatureConfigsApi~networkFeatureConfigsDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatureConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a network feature config.  The network feature config will be marked as `decommission_requested`. Decommissioning a network feature config will not cascade to related services or service configs.
     * @param {String} id Get by id
     * @param {module:api/NetworkFeatureConfigsApi~networkFeatureConfigsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatureConfig}
     */
    networkFeatureConfigsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkFeatureConfigsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkFeatureConfig;
      return this.apiClient.callApi(
        '/network-feature-configs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkFeatureConfigsList operation.
     * @callback module:api/NetworkFeatureConfigsApi~networkFeatureConfigsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkFeatureConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all network feature configs.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [state] Filter by state
     * @param {String} [stateIsNot] Filter by state__is_not
     * @param {String} [managingAccount] Filter by managing_account
     * @param {String} [consumingAccount] Filter by consuming_account
     * @param {String} [externalRef] Filter by external_ref
     * @param {module:model/String} [type] Filter by type
     * @param {String} [serviceConfig] Filter by service_config
     * @param {String} [networkFeature] Filter by network_feature
     * @param {module:api/NetworkFeatureConfigsApi~networkFeatureConfigsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkFeatureConfig>}
     */
    networkFeatureConfigsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'state': opts['state'],
        'state__is_not': opts['stateIsNot'],
        'managing_account': opts['managingAccount'],
        'consuming_account': opts['consumingAccount'],
        'external_ref': opts['externalRef'],
        'type': opts['type'],
        'service_config': opts['serviceConfig'],
        'network_feature': opts['networkFeature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkFeatureConfig];
      return this.apiClient.callApi(
        '/network-feature-configs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkFeatureConfigsPartialUpdate operation.
     * @callback module:api/NetworkFeatureConfigsApi~networkFeatureConfigsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatureConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parts of a network feature configuration
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkFeatureConfigUpdatePartial} [networkFeatureConfigUpdatePartial] Polymorphic Network Feauture Config Update
     * @param {module:api/NetworkFeatureConfigsApi~networkFeatureConfigsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatureConfig}
     */
    networkFeatureConfigsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkFeatureConfigUpdatePartial'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkFeatureConfigsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json'];
      let returnType = NetworkFeatureConfig;
      return this.apiClient.callApi(
        '/network-feature-configs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkFeatureConfigsRead operation.
     * @callback module:api/NetworkFeatureConfigsApi~networkFeatureConfigsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatureConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single network feature config.
     * @param {String} id Get by id
     * @param {module:api/NetworkFeatureConfigsApi~networkFeatureConfigsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatureConfig}
     */
    networkFeatureConfigsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkFeatureConfigsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkFeatureConfig;
      return this.apiClient.callApi(
        '/network-feature-configs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkFeatureConfigsUpdate operation.
     * @callback module:api/NetworkFeatureConfigsApi~networkFeatureConfigsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatureConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a network feature configuration
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkFeatureConfigUpdate} [networkFeatureConfigUpdate] Polymorphic Network Feauture Config Update
     * @param {module:api/NetworkFeatureConfigsApi~networkFeatureConfigsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatureConfig}
     */
    networkFeatureConfigsUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkFeatureConfigUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkFeatureConfigsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkFeatureConfig;
      return this.apiClient.callApi(
        '/network-feature-configs/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
