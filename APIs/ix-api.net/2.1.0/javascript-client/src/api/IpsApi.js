/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import IpAddress from '../model/IpAddress';
import IpAddressRequest from '../model/IpAddressRequest';
import IpAddressUpdate from '../model/IpAddressUpdate';
import IpAddressUpdatePartial from '../model/IpAddressUpdatePartial';

/**
* Ips service.
* @module api/IpsApi
* @version 2.1.0
*/
export default class IpsApi {

    /**
    * Constructs a new IpsApi. 
    * @alias module:api/IpsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ipsCreate operation.
     * @callback module:api/IpsApi~ipsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an ip host address or network prefix.
     * @param {Object} opts Optional parameters
     * @param {module:model/IpAddressRequest} [ipAddressRequest] IP-Address / Prefix allocation Request
     * @param {module:api/IpsApi~ipsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpAddress}
     */
    ipsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['ipAddressRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IpAddress;
      return this.apiClient.callApi(
        '/ips', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsList operation.
     * @callback module:api/IpsApi~ipsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IpAddress>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all ip addresses (and prefixes).
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [managingAccount] Filter by managing_account
     * @param {String} [consumingAccount] Filter by consuming_account
     * @param {String} [externalRef] Filter by external_ref
     * @param {String} [networkService] Filter by network_service
     * @param {String} [networkServiceConfig] Filter by network_service_config
     * @param {String} [networkFeature] Filter by network_feature
     * @param {String} [networkFeatureConfig] Filter by network_feature_config
     * @param {Number} [version] Filter by version
     * @param {String} [fqdn] Filter by fqdn
     * @param {Number} [prefixLength] Filter by prefix_length
     * @param {String} [validNotBefore] Filter by valid_not_before
     * @param {String} [validNotAfter] Filter by valid_not_after
     * @param {module:api/IpsApi~ipsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IpAddress>}
     */
    ipsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'managing_account': opts['managingAccount'],
        'consuming_account': opts['consumingAccount'],
        'external_ref': opts['externalRef'],
        'network_service': opts['networkService'],
        'network_service_config': opts['networkServiceConfig'],
        'network_feature': opts['networkFeature'],
        'network_feature_config': opts['networkFeatureConfig'],
        'version': opts['version'],
        'fqdn': opts['fqdn'],
        'prefix_length': opts['prefixLength'],
        'valid_not_before': opts['validNotBefore'],
        'valid_not_after': opts['validNotAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IpAddress];
      return this.apiClient.callApi(
        '/ips', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsPartialUpdate operation.
     * @callback module:api/IpsApi~ipsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parts of an ip address.   As with the `PUT` opertaion, IP addresses, where you don't have update rights, will yield a `resource access denied` error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/IpAddressUpdatePartial} [ipAddressUpdatePartial] IP-Address Update
     * @param {module:api/IpsApi~ipsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpAddress}
     */
    ipsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['ipAddressUpdatePartial'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json'];
      let returnType = IpAddress;
      return this.apiClient.callApi(
        '/ips/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsRead operation.
     * @callback module:api/IpsApi~ipsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single ip addresses by it's id.
     * @param {String} id Get by id
     * @param {module:api/IpsApi~ipsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpAddress}
     */
    ipsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IpAddress;
      return this.apiClient.callApi(
        '/ips/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ipsUpdate operation.
     * @callback module:api/IpsApi~ipsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IpAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the `fqdn`.
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/IpAddressUpdate} [ipAddressUpdate] IP-Address Update
     * @param {module:api/IpsApi~ipsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IpAddress}
     */
    ipsUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['ipAddressUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling ipsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IpAddress;
      return this.apiClient.callApi(
        '/ips/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
