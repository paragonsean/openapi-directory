/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import CancellationPolicy from '../model/CancellationPolicy';
import CancellationRequest from '../model/CancellationRequest';
import ContactsDestroy400Response from '../model/ContactsDestroy400Response';
import NetworkService from '../model/NetworkService';
import NetworkServiceChangeRequest from '../model/NetworkServiceChangeRequest';
import NetworkServiceConfigsDestroy400Response from '../model/NetworkServiceConfigsDestroy400Response';
import NetworkServiceRequest from '../model/NetworkServiceRequest';
import NetworkServiceRequestPartial from '../model/NetworkServiceRequestPartial';

/**
* NetworkServices service.
* @module api/NetworkServicesApi
* @version 2.1.0
*/
export default class NetworkServicesApi {

    /**
    * Constructs a new NetworkServicesApi. 
    * @alias module:api/NetworkServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the networkServiceCancellationPolicyRead operation.
     * @callback module:api/NetworkServicesApi~networkServiceCancellationPolicyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancellationPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The cancellation-policy can be queried to answer the questions:  If I cancel my service, *when will it be technically decommissioned*? If I cancel my service, *until what date will I be charged*?  When the query parameter `decommision_at` is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {String} [decommissionAt] By providing a date in the format `YYYY-MM-DD` you can query the policy what would happen if you request a decommissioning on this date.
     * @param {module:api/NetworkServicesApi~networkServiceCancellationPolicyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancellationPolicy}
     */
    networkServiceCancellationPolicyRead(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceCancellationPolicyRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'decommission_at': opts['decommissionAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancellationPolicy;
      return this.apiClient.callApi(
        '/network-services/{id}/cancellation-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceChangeRequestCreate operation.
     * @callback module:api/NetworkServicesApi~networkServiceChangeRequestCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceChangeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a change to the network service.  A participant in a network service of type `p2p_vc` can issue a change request, expressing a desired change in the capacity. The change is accepted when all sides have configured the network service configs with the new bandwidth. These changes can sometimes require a change of the product offering. The product offering may only differ in regards to bandwidth.  The network service will change it's state from `production` into `production_change_pending`.  Only one change request may be issued at a time.
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkServiceChangeRequest} [networkServiceChangeRequest] NetworkServiceChangeRequest
     * @param {module:api/NetworkServicesApi~networkServiceChangeRequestCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceChangeRequest}
     */
    networkServiceChangeRequestCreate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkServiceChangeRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceChangeRequestCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkServiceChangeRequest;
      return this.apiClient.callApi(
        '/network-services/{id}/change-request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceChangeRequestDestroy operation.
     * @callback module:api/NetworkServicesApi~networkServiceChangeRequestDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceChangeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retract or reject a change to the network service.
     * @param {String} id Get by id
     * @param {module:api/NetworkServicesApi~networkServiceChangeRequestDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceChangeRequest}
     */
    networkServiceChangeRequestDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceChangeRequestDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkServiceChangeRequest;
      return this.apiClient.callApi(
        '/network-services/{id}/change-request', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceChangeRequestRead operation.
     * @callback module:api/NetworkServicesApi~networkServiceChangeRequestReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceChangeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the change request.
     * @param {String} id Get by id
     * @param {module:api/NetworkServicesApi~networkServiceChangeRequestReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceChangeRequest}
     */
    networkServiceChangeRequestRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceChangeRequestRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkServiceChangeRequest;
      return this.apiClient.callApi(
        '/network-services/{id}/change-request', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServicesCreate operation.
     * @callback module:api/NetworkServicesApi~networkServicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new network service
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkServiceRequest} [networkServiceRequest] Polymorphic Network Service Request
     * @param {module:api/NetworkServicesApi~networkServicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkService}
     */
    networkServicesCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['networkServiceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkService;
      return this.apiClient.callApi(
        '/network-services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServicesDestroy operation.
     * @callback module:api/NetworkServicesApi~networkServicesDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request decomissioning of the network service.  The network service will enter the state of `decommission_requested`. The request will cascade to related network service and feature configs.  An *optional request body* can be provided to request a specific service termination date.  If no date is given in the request body, it is assumed to be the earliest possible date.  Possible values for `decommission_at` can be queried through the `network_service_cancellation_policy_read` operation.  The response will contain the dates on which the changes will be effected.
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/CancellationRequest} [cancellationRequest] Service Cancellation Request
     * @param {module:api/NetworkServicesApi~networkServicesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkService}
     */
    networkServicesDestroy(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['cancellationRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServicesDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkService;
      return this.apiClient.callApi(
        '/network-services/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServicesList operation.
     * @callback module:api/NetworkServicesApi~networkServicesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkService>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available `NetworkService`s.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [state] Filter by state
     * @param {String} [stateIsNot] Filter by state__is_not
     * @param {String} [managingAccount] Filter by managing_account
     * @param {String} [consumingAccount] Filter by consuming_account
     * @param {String} [externalRef] Filter by external_ref
     * @param {module:model/String} [type] Filter by type
     * @param {String} [pop] Filter by pop
     * @param {String} [productOffering] Filter by product_offering
     * @param {module:api/NetworkServicesApi~networkServicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkService>}
     */
    networkServicesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'state': opts['state'],
        'state__is_not': opts['stateIsNot'],
        'managing_account': opts['managingAccount'],
        'consuming_account': opts['consumingAccount'],
        'external_ref': opts['externalRef'],
        'type': opts['type'],
        'pop': opts['pop'],
        'product_offering': opts['productOffering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkService];
      return this.apiClient.callApi(
        '/network-services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServicesPartialUpdate operation.
     * @callback module:api/NetworkServicesApi~networkServicesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update a network service
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkServiceRequestPartial} [networkServiceRequestPartial] Polymorphic Network Service Request
     * @param {module:api/NetworkServicesApi~networkServicesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkService}
     */
    networkServicesPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkServiceRequestPartial'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServicesPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json'];
      let returnType = NetworkService;
      return this.apiClient.callApi(
        '/network-services/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServicesRead operation.
     * @callback module:api/NetworkServicesApi~networkServicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific `network-service` by id.
     * @param {String} id Get by id
     * @param {module:api/NetworkServicesApi~networkServicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkService}
     */
    networkServicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkService;
      return this.apiClient.callApi(
        '/network-services/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServicesUpdate operation.
     * @callback module:api/NetworkServicesApi~networkServicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a network service
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkServiceRequest} [networkServiceRequest] Polymorphic Network Service Request
     * @param {module:api/NetworkServicesApi~networkServicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkService}
     */
    networkServicesUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkServiceRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServicesUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkService;
      return this.apiClient.callApi(
        '/network-services/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
