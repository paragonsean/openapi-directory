/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import ContactsDestroy400Response from '../model/ContactsDestroy400Response';
import RoleAssignment from '../model/RoleAssignment';
import RoleAssignmentRequest from '../model/RoleAssignmentRequest';
import RoleAssignmentsCreate400Response from '../model/RoleAssignmentsCreate400Response';

/**
* RoleAssignments service.
* @module api/RoleAssignmentsApi
* @version 2.1.0
*/
export default class RoleAssignmentsApi {

    /**
    * Constructs a new RoleAssignmentsApi. 
    * @alias module:api/RoleAssignmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the roleAssignmentsCreate operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign a `Role` to a `Contact`.  The contact needs to have all fields filled, which the role requires. If this is not the case a `400` `UnableToFulfill` will be returned.
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleAssignmentRequest} [roleAssignmentRequest] A role assignment request
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['roleAssignmentRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/role-assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsDestroy operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a role assignment from a contact.  If the contact is still in use with a given role required, this will yield an `UnableToFulfill` error.
     * @param {String} assignmentId Get by assignment_id
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsDestroy(assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling roleAssignmentsDestroy");
      }

      let pathParams = {
        'assignment_id': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/role-assignments/{assignment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsList operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RoleAssignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all role assignments for a contact.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [contact] Filter by contact
     * @param {String} [role] Filter by role
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RoleAssignment>}
     */
    roleAssignmentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'contact': opts['contact'],
        'role': opts['role']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RoleAssignment];
      return this.apiClient.callApi(
        '/role-assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsRead operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a role assignment for a contact.
     * @param {String} assignmentId Get by assignment_id
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsRead(assignmentId, callback) {
      let postBody = null;
      // verify the required parameter 'assignmentId' is set
      if (assignmentId === undefined || assignmentId === null) {
        throw new Error("Missing the required parameter 'assignmentId' when calling roleAssignmentsRead");
      }

      let pathParams = {
        'assignment_id': assignmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/role-assignments/{assignment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
