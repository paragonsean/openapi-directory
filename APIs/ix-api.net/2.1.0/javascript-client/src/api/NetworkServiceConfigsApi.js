/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import CancellationPolicy from '../model/CancellationPolicy';
import CancellationRequest from '../model/CancellationRequest';
import NetworkServiceConfig from '../model/NetworkServiceConfig';
import NetworkServiceConfigRequest from '../model/NetworkServiceConfigRequest';
import NetworkServiceConfigUpdate from '../model/NetworkServiceConfigUpdate';
import NetworkServiceConfigUpdatePartial from '../model/NetworkServiceConfigUpdatePartial';
import NetworkServiceConfigsDestroy400Response from '../model/NetworkServiceConfigsDestroy400Response';

/**
* NetworkServiceConfigs service.
* @module api/NetworkServiceConfigsApi
* @version 2.1.0
*/
export default class NetworkServiceConfigsApi {

    /**
    * Constructs a new NetworkServiceConfigsApi. 
    * @alias module:api/NetworkServiceConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the networkServiceConfigCancellationPolicyRead operation.
     * @callback module:api/NetworkServiceConfigsApi~networkServiceConfigCancellationPolicyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancellationPolicy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The cancellation-policy can be queried to answer the questions:  If I cancel my subscription, *when will it be technically decommissioned*? If I cancel my subscription, *until what date will I be charged*?  When the query parameter `decommision_at` is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {String} [decommissionAt] By providing a date in the format `YYYY-MM-DD` you can query the policy what would happen if you request a decommissioning on this date.
     * @param {module:api/NetworkServiceConfigsApi~networkServiceConfigCancellationPolicyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancellationPolicy}
     */
    networkServiceConfigCancellationPolicyRead(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceConfigCancellationPolicyRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'decommission_at': opts['decommissionAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancellationPolicy;
      return this.apiClient.callApi(
        '/network-service-configs/{id}/cancellation-policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceConfigsCreate operation.
     * @callback module:api/NetworkServiceConfigsApi~networkServiceConfigsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a `network-service-config`.
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkServiceConfigRequest} [networkServiceConfigRequest] Polymorhic Network Service Config Request
     * @param {module:api/NetworkServiceConfigsApi~networkServiceConfigsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceConfig}
     */
    networkServiceConfigsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['networkServiceConfigRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkServiceConfig;
      return this.apiClient.callApi(
        '/network-service-configs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceConfigsDestroy operation.
     * @callback module:api/NetworkServiceConfigsApi~networkServiceConfigsDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request decommissioning the network service configuration.  The network service config will assume the state `decommission_requested`. This will cascade to related resources like `network-feature-configs`.
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/CancellationRequest} [cancellationRequest] Service Cancellation Request
     * @param {module:api/NetworkServiceConfigsApi~networkServiceConfigsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceConfig}
     */
    networkServiceConfigsDestroy(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['cancellationRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceConfigsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkServiceConfig;
      return this.apiClient.callApi(
        '/network-service-configs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceConfigsList operation.
     * @callback module:api/NetworkServiceConfigsApi~networkServiceConfigsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkServiceConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all `network-service-config`s.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [state] Filter by state
     * @param {String} [stateIsNot] Filter by state__is_not
     * @param {String} [managingAccount] Filter by managing_account
     * @param {String} [consumingAccount] Filter by consuming_account
     * @param {String} [externalRef] Filter by external_ref
     * @param {module:model/String} [type] Filter by type
     * @param {Number} [innerVlan] Filter by inner_vlan
     * @param {Number} [outerVlan] Filter by outer_vlan
     * @param {Number} [capacity] Filter by capacity
     * @param {String} [networkService] Filter by network_service
     * @param {String} [connection] Filter by connection
     * @param {String} [productOffering] Filter by product_offering
     * @param {module:api/NetworkServiceConfigsApi~networkServiceConfigsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkServiceConfig>}
     */
    networkServiceConfigsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'state': opts['state'],
        'state__is_not': opts['stateIsNot'],
        'managing_account': opts['managingAccount'],
        'consuming_account': opts['consumingAccount'],
        'external_ref': opts['externalRef'],
        'type': opts['type'],
        'inner_vlan': opts['innerVlan'],
        'outer_vlan': opts['outerVlan'],
        'capacity': opts['capacity'],
        'network_service': opts['networkService'],
        'connection': opts['connection'],
        'product_offering': opts['productOffering']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NetworkServiceConfig];
      return this.apiClient.callApi(
        '/network-service-configs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceConfigsPartialUpdate operation.
     * @callback module:api/NetworkServiceConfigsApi~networkServiceConfigsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parts of an exisiting `network-service-config`.
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkServiceConfigUpdatePartial} [networkServiceConfigUpdatePartial] Polymorphic Network Service Config
     * @param {module:api/NetworkServiceConfigsApi~networkServiceConfigsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceConfig}
     */
    networkServiceConfigsPartialUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkServiceConfigUpdatePartial'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceConfigsPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/merge-patch+json'];
      let accepts = ['application/json'];
      let returnType = NetworkServiceConfig;
      return this.apiClient.callApi(
        '/network-service-configs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceConfigsRead operation.
     * @callback module:api/NetworkServiceConfigsApi~networkServiceConfigsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a `network-service-config`
     * @param {String} id Get by id
     * @param {module:api/NetworkServiceConfigsApi~networkServiceConfigsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceConfig}
     */
    networkServiceConfigsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceConfigsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkServiceConfig;
      return this.apiClient.callApi(
        '/network-service-configs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkServiceConfigsUpdate operation.
     * @callback module:api/NetworkServiceConfigsApi~networkServiceConfigsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkServiceConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an exisiting `network-service-config`
     * @param {String} id Get by id
     * @param {Object} opts Optional parameters
     * @param {module:model/NetworkServiceConfigUpdate} [networkServiceConfigUpdate] Polymorphic Network Service Config
     * @param {module:api/NetworkServiceConfigsApi~networkServiceConfigsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkServiceConfig}
     */
    networkServiceConfigsUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['networkServiceConfigUpdate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkServiceConfigsUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NetworkServiceConfig;
      return this.apiClient.callApi(
        '/network-service-configs/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
