/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import Connection from '../model/Connection';

/**
* Connections service.
* @module api/ConnectionsApi
* @version 2.1.0
*/
export default class ConnectionsApi {

    /**
    * Constructs a new ConnectionsApi. 
    * @alias module:api/ConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectionsList operation.
     * @callback module:api/ConnectionsApi~connectionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Connection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all `connection`s.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [state] Filter by state
     * @param {String} [stateIsNot] Filter by state__is_not
     * @param {String} [mode] Filter by mode
     * @param {String} [modeIsNot] Filter by mode__is_not
     * @param {String} [name] Filter by name
     * @param {String} [metroAreaNetwork] Filter by metro_area_network
     * @param {String} [pop] Filter by pop
     * @param {String} [facility] Filter by facility
     * @param {String} [externalRef] Filter by external_ref
     * @param {module:api/ConnectionsApi~connectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Connection>}
     */
    connectionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'state': opts['state'],
        'state__is_not': opts['stateIsNot'],
        'mode': opts['mode'],
        'mode__is_not': opts['modeIsNot'],
        'name': opts['name'],
        'metro_area_network': opts['metroAreaNetwork'],
        'pop': opts['pop'],
        'facility': opts['facility'],
        'external_ref': opts['externalRef']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Connection];
      return this.apiClient.callApi(
        '/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionsRead operation.
     * @callback module:api/ConnectionsApi~connectionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Connection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Read a `connection`.
     * @param {String} id Get by id
     * @param {module:api/ConnectionsApi~connectionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Connection}
     */
    connectionsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling connectionsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Connection;
      return this.apiClient.callApi(
        '/connections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
