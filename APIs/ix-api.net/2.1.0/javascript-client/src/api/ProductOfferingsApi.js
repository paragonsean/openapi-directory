/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import ProductOffering from '../model/ProductOffering';
import ProductOfferingPartial from '../model/ProductOfferingPartial';

/**
* ProductOfferings service.
* @module api/ProductOfferingsApi
* @version 2.1.0
*/
export default class ProductOfferingsApi {

    /**
    * Constructs a new ProductOfferingsApi. 
    * @alias module:api/ProductOfferingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productOfferingsList operation.
     * @callback module:api/ProductOfferingsApi~productOfferingsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductOfferingPartial>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all (filtered) products-offerings available on the platform
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {module:model/String} [type] Filter by type
     * @param {String} [name] Filter by name
     * @param {String} [handoverMetroArea] Filter by handover_metro_area
     * @param {String} [handoverMetroAreaNetwork] Filter by handover_metro_area_network
     * @param {String} [serviceMetroArea] Filter by service_metro_area
     * @param {String} [serviceMetroAreaNetwork] Filter by service_metro_area_network
     * @param {String} [serviceProvider] Filter by service_provider
     * @param {module:model/String} [downgradeAllowed] Filter by downgrade_allowed
     * @param {module:model/String} [upgradeAllowed] Filter by upgrade_allowed
     * @param {Number} [bandwidth] Find product offerings where bandwidth is within the range of `bandwidth_min` and `bandwidth_max`.
     * @param {Number} [physicalPortSpeed] Filter by physical_port_speed
     * @param {String} [serviceProviderRegion] Filter by service_provider_region
     * @param {String} [serviceProviderPop] Filter by service_provider_pop
     * @param {module:model/String} [deliveryMethod] Filter by delivery_method
     * @param {String} [cloudKey] For product offerings of type `cloud_vc`, if the `service_provider_workflow` is `provider_first` the `cloud_key` will be used for filtering the relevant offerings.
     * @param {String} [fields] Returned objects only have properties which are present in the list of fields. The required `type` property is *implicitly* included. The results are *deduplicated*. 
     * @param {module:api/ProductOfferingsApi~productOfferingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductOfferingPartial>}
     */
    productOfferingsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'type': opts['type'],
        'name': opts['name'],
        'handover_metro_area': opts['handoverMetroArea'],
        'handover_metro_area_network': opts['handoverMetroAreaNetwork'],
        'service_metro_area': opts['serviceMetroArea'],
        'service_metro_area_network': opts['serviceMetroAreaNetwork'],
        'service_provider': opts['serviceProvider'],
        'downgrade_allowed': opts['downgradeAllowed'],
        'upgrade_allowed': opts['upgradeAllowed'],
        'bandwidth': opts['bandwidth'],
        'physical_port_speed': opts['physicalPortSpeed'],
        'service_provider_region': opts['serviceProviderRegion'],
        'service_provider_pop': opts['serviceProviderPop'],
        'delivery_method': opts['deliveryMethod'],
        'cloud_key': opts['cloudKey'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProductOfferingPartial];
      return this.apiClient.callApi(
        '/product-offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOfferingsRead operation.
     * @callback module:api/ProductOfferingsApi~productOfferingsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOffering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single products-offering by id.
     * @param {String} id Get by id
     * @param {module:api/ProductOfferingsApi~productOfferingsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOffering}
     */
    productOfferingsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productOfferingsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOffering;
      return this.apiClient.callApi(
        '/product-offerings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
