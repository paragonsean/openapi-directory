/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import Device from '../model/Device';

/**
* Devices service.
* @module api/DevicesApi
* @version 2.1.0
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the devicesList operation.
     * @callback module:api/DevicesApi~devicesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Device>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available devices
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [name] Filter by name
     * @param {String} [capabilityMediaType] Filter by capability_media_type
     * @param {Number} [capabilitySpeed] Filter by capability_speed
     * @param {Number} [capabilitySpeedLt] Filter by capability_speed__lt
     * @param {Number} [capabilitySpeedLte] Filter by capability_speed__lte
     * @param {Number} [capabilitySpeedGt] Filter by capability_speed__gt
     * @param {Number} [capabilitySpeedGte] Filter by capability_speed__gte
     * @param {String} [facility] Filter by facility
     * @param {String} [pop] Filter by pop
     * @param {String} [metroAreaNetwork] Filter by metro_area_network
     * @param {module:api/DevicesApi~devicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Device>}
     */
    devicesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'name': opts['name'],
        'capability_media_type': opts['capabilityMediaType'],
        'capability_speed': opts['capabilitySpeed'],
        'capability_speed__lt': opts['capabilitySpeedLt'],
        'capability_speed__lte': opts['capabilitySpeedLte'],
        'capability_speed__gt': opts['capabilitySpeedGt'],
        'capability_speed__gte': opts['capabilitySpeedGte'],
        'facility': opts['facility'],
        'pop': opts['pop'],
        'metro_area_network': opts['metroAreaNetwork']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Device];
      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesRead operation.
     * @callback module:api/DevicesApi~devicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific device identified by id
     * @param {String} id Get by id
     * @param {module:api/DevicesApi~devicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    devicesRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/devices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
