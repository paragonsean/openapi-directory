/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountsList400Response from '../model/AccountsList400Response';
import AccountsList401Response from '../model/AccountsList401Response';
import AccountsList403Response from '../model/AccountsList403Response';
import AccountsRead404Response from '../model/AccountsRead404Response';
import ContactsDestroy400Response from '../model/ContactsDestroy400Response';
import MacAddress from '../model/MacAddress';
import MacAddressRequest from '../model/MacAddressRequest';

/**
* Macs service.
* @module api/MacsApi
* @version 2.1.0
*/
export default class MacsApi {

    /**
    * Constructs a new MacsApi. 
    * @alias module:api/MacsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the macsCreate operation.
     * @callback module:api/MacsApi~macsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MacAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a mac address.
     * @param {Object} opts Optional parameters
     * @param {module:model/MacAddressRequest} [macAddressRequest] MAC-Address Request
     * @param {module:api/MacsApi~macsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MacAddress}
     */
    macsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['macAddressRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MacAddress;
      return this.apiClient.callApi(
        '/macs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the macsDestroy operation.
     * @callback module:api/MacsApi~macsDestroyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MacAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a mac address.
     * @param {String} id Get by id
     * @param {module:api/MacsApi~macsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MacAddress}
     */
    macsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling macsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MacAddress;
      return this.apiClient.callApi(
        '/macs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the macsList operation.
     * @callback module:api/MacsApi~macsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MacAddress>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all mac addresses managed by the authorized customer.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Filter by id
     * @param {String} [managingAccount] Filter by managing_account
     * @param {String} [consumingAccount] Filter by consuming_account
     * @param {String} [externalRef] Filter by external_ref
     * @param {String} [networkServiceConfig] Filter by network_service_config
     * @param {String} [address] Filter by address
     * @param {String} [assignedAt] Filter by assigned_at
     * @param {String} [validNotBefore] Filter by valid_not_before
     * @param {String} [validNotAfter] Filter by valid_not_after
     * @param {module:api/MacsApi~macsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MacAddress>}
     */
    macsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'csv'),
        'managing_account': opts['managingAccount'],
        'consuming_account': opts['consumingAccount'],
        'external_ref': opts['externalRef'],
        'network_service_config': opts['networkServiceConfig'],
        'address': opts['address'],
        'assigned_at': opts['assignedAt'],
        'valid_not_before': opts['validNotBefore'],
        'valid_not_after': opts['validNotAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MacAddress];
      return this.apiClient.callApi(
        '/macs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the macsRead operation.
     * @callback module:api/MacsApi~macsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MacAddress} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single mac address by it's id.
     * @param {String} id Get by id
     * @param {module:api/MacsApi~macsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MacAddress}
     */
    macsRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling macsRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MacAddress;
      return this.apiClient.callApi(
        '/macs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
