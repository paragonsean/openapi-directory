/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudNetworkServiceRequest from './CloudNetworkServiceRequest';
import MP2MPNetworkServiceRequest from './MP2MPNetworkServiceRequest';
import P2MPNetworkServiceRequest from './P2MPNetworkServiceRequest';
import P2PNetworkServiceRequest from './P2PNetworkServiceRequest';

/**
 * The NetworkServiceRequest model module.
 * @module model/NetworkServiceRequest
 * @version 2.1.0
 */
class NetworkServiceRequest {
    /**
     * Constructs a new <code>NetworkServiceRequest</code>.
     * Polymorphic Network Service Request
     * @alias module:model/NetworkServiceRequest
     * @param {(module:model/CloudNetworkServiceRequest|module:model/MP2MPNetworkServiceRequest|module:model/P2MPNetworkServiceRequest|module:model/P2PNetworkServiceRequest)} instance The actual instance to initialize NetworkServiceRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "P2PNetworkServiceRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                P2PNetworkServiceRequest.validateJSON(instance); // throw an exception if no match
                // create P2PNetworkServiceRequest from JS object
                this.actualInstance = P2PNetworkServiceRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into P2PNetworkServiceRequest
            errorMessages.push("Failed to construct P2PNetworkServiceRequest: " + err)
        }

        try {
            if (typeof instance === "P2MPNetworkServiceRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                P2MPNetworkServiceRequest.validateJSON(instance); // throw an exception if no match
                // create P2MPNetworkServiceRequest from JS object
                this.actualInstance = P2MPNetworkServiceRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into P2MPNetworkServiceRequest
            errorMessages.push("Failed to construct P2MPNetworkServiceRequest: " + err)
        }

        try {
            if (typeof instance === "MP2MPNetworkServiceRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MP2MPNetworkServiceRequest.validateJSON(instance); // throw an exception if no match
                // create MP2MPNetworkServiceRequest from JS object
                this.actualInstance = MP2MPNetworkServiceRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MP2MPNetworkServiceRequest
            errorMessages.push("Failed to construct MP2MPNetworkServiceRequest: " + err)
        }

        try {
            if (typeof instance === "CloudNetworkServiceRequest") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CloudNetworkServiceRequest.validateJSON(instance); // throw an exception if no match
                // create CloudNetworkServiceRequest from JS object
                this.actualInstance = CloudNetworkServiceRequest.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CloudNetworkServiceRequest
            errorMessages.push("Failed to construct CloudNetworkServiceRequest: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `NetworkServiceRequest` with oneOf schemas CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `NetworkServiceRequest` with oneOf schemas CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>NetworkServiceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkServiceRequest} obj Optional instance to populate.
     * @return {module:model/NetworkServiceRequest} The populated <code>NetworkServiceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new NetworkServiceRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>CloudNetworkServiceRequest</code>, <code>MP2MPNetworkServiceRequest</code>, <code>P2MPNetworkServiceRequest</code>, <code>P2PNetworkServiceRequest</code>.
     * @return {(module:model/CloudNetworkServiceRequest|module:model/MP2MPNetworkServiceRequest|module:model/P2MPNetworkServiceRequest|module:model/P2PNetworkServiceRequest)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CloudNetworkServiceRequest</code>, <code>MP2MPNetworkServiceRequest</code>, <code>P2MPNetworkServiceRequest</code>, <code>P2PNetworkServiceRequest</code>.
     * @param {(module:model/CloudNetworkServiceRequest|module:model/MP2MPNetworkServiceRequest|module:model/P2MPNetworkServiceRequest|module:model/P2PNetworkServiceRequest)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = NetworkServiceRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of NetworkServiceRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/NetworkServiceRequest} An instance of NetworkServiceRequest.
     */
    static fromJSON = function(json_string){
        return NetworkServiceRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
NetworkServiceRequest.prototype['billing_account'] = undefined;

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
NetworkServiceRequest.prototype['consuming_account'] = undefined;

/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
NetworkServiceRequest.prototype['contract_ref'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
NetworkServiceRequest.prototype['external_ref'] = undefined;

/**
 * The account of the B-side member joining the virtual circuit. 
 * @member {String} joining_member_account
 */
NetworkServiceRequest.prototype['joining_member_account'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
NetworkServiceRequest.prototype['managing_account'] = undefined;

/**
 * @member {String} product_offering
 */
NetworkServiceRequest.prototype['product_offering'] = undefined;

/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
NetworkServiceRequest.prototype['purchase_order'] = '';

/**
 * @member {String} type
 */
NetworkServiceRequest.prototype['type'] = undefined;

/**
 * Name of the multi-point to multi-point virtual circuit.
 * @member {String} name
 */
NetworkServiceRequest.prototype['name'] = undefined;

/**
 * A public mp2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.
 * @member {Boolean} public
 * @default false
 */
NetworkServiceRequest.prototype['public'] = false;

/**
 * The capacity of the service in Mbps. When null, the maximum capacity will be used.
 * @member {Number} capacity
 */
NetworkServiceRequest.prototype['capacity'] = undefined;

/**
 * @member {String} cloud_key
 */
NetworkServiceRequest.prototype['cloud_key'] = undefined;


NetworkServiceRequest.OneOf = ["CloudNetworkServiceRequest", "MP2MPNetworkServiceRequest", "P2MPNetworkServiceRequest", "P2PNetworkServiceRequest"];

export default NetworkServiceRequest;

