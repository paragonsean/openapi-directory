/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IXPSpecificFeatureFlag from './IXPSpecificFeatureFlag';

/**
 * The RouteServerNetworkFeaturePartial model module.
 * @module model/RouteServerNetworkFeaturePartial
 * @version 2.1.0
 */
class RouteServerNetworkFeaturePartial {
    /**
     * Constructs a new <code>RouteServerNetworkFeaturePartial</code>.
     * Route Server Network Feature
     * @alias module:model/RouteServerNetworkFeaturePartial
     * @param type {String} 
     */
    constructor(type) { 
        
        RouteServerNetworkFeaturePartial.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RouteServerNetworkFeaturePartial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RouteServerNetworkFeaturePartial} obj Optional instance to populate.
     * @return {module:model/RouteServerNetworkFeaturePartial} The populated <code>RouteServerNetworkFeaturePartial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RouteServerNetworkFeaturePartial();

            if (data.hasOwnProperty('address_families')) {
                obj['address_families'] = ApiClient.convertToType(data['address_families'], ['String']);
            }
            if (data.hasOwnProperty('asn')) {
                obj['asn'] = ApiClient.convertToType(data['asn'], 'Number');
            }
            if (data.hasOwnProperty('available_bgp_session_types')) {
                obj['available_bgp_session_types'] = ApiClient.convertToType(data['available_bgp_session_types'], ['String']);
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], [IXPSpecificFeatureFlag]);
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip_v4')) {
                obj['ip_v4'] = ApiClient.convertToType(data['ip_v4'], 'String');
            }
            if (data.hasOwnProperty('ip_v6')) {
                obj['ip_v6'] = ApiClient.convertToType(data['ip_v6'], 'String');
            }
            if (data.hasOwnProperty('looking_glass_url')) {
                obj['looking_glass_url'] = ApiClient.convertToType(data['looking_glass_url'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network_service')) {
                obj['network_service'] = ApiClient.convertToType(data['network_service'], 'String');
            }
            if (data.hasOwnProperty('nfc_required_contact_roles')) {
                obj['nfc_required_contact_roles'] = ApiClient.convertToType(data['nfc_required_contact_roles'], ['String']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('session_mode')) {
                obj['session_mode'] = ApiClient.convertToType(data['session_mode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RouteServerNetworkFeaturePartial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RouteServerNetworkFeaturePartial</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RouteServerNetworkFeaturePartial.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['address_families'])) {
            throw new Error("Expected the field `address_families` to be an array in the JSON data but got " + data['address_families']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['available_bgp_session_types'])) {
            throw new Error("Expected the field `available_bgp_session_types` to be an array in the JSON data but got " + data['available_bgp_session_types']);
        }
        if (data['flags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flags'])) {
                throw new Error("Expected the field `flags` to be an array in the JSON data but got " + data['flags']);
            }
            // validate the optional field `flags` (array)
            for (const item of data['flags']) {
                IXPSpecificFeatureFlag.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ip_v4'] && !(typeof data['ip_v4'] === 'string' || data['ip_v4'] instanceof String)) {
            throw new Error("Expected the field `ip_v4` to be a primitive type in the JSON string but got " + data['ip_v4']);
        }
        // ensure the json data is a string
        if (data['ip_v6'] && !(typeof data['ip_v6'] === 'string' || data['ip_v6'] instanceof String)) {
            throw new Error("Expected the field `ip_v6` to be a primitive type in the JSON string but got " + data['ip_v6']);
        }
        // ensure the json data is a string
        if (data['looking_glass_url'] && !(typeof data['looking_glass_url'] === 'string' || data['looking_glass_url'] instanceof String)) {
            throw new Error("Expected the field `looking_glass_url` to be a primitive type in the JSON string but got " + data['looking_glass_url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network_service'] && !(typeof data['network_service'] === 'string' || data['network_service'] instanceof String)) {
            throw new Error("Expected the field `network_service` to be a primitive type in the JSON string but got " + data['network_service']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nfc_required_contact_roles'])) {
            throw new Error("Expected the field `nfc_required_contact_roles` to be an array in the JSON data but got " + data['nfc_required_contact_roles']);
        }
        // ensure the json data is a string
        if (data['session_mode'] && !(typeof data['session_mode'] === 'string' || data['session_mode'] instanceof String)) {
            throw new Error("Expected the field `session_mode` to be a primitive type in the JSON string but got " + data['session_mode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RouteServerNetworkFeaturePartial.RequiredProperties = ["type"];

/**
 * When creating a route server feature config, remember to specify which address family or families to use:  If the route server network feature only supports `af_inet`, then the `as_set_v4` in the network feature config is required.  If only `af_inet6` is supported, then the `as_set_v6` is required.  If both `af_inet` and `af_inet6` are supported, either `as_set_v4` or `as_set_v6` is required, but both can be provided in the network service config. 
 * @member {Array.<module:model/RouteServerNetworkFeaturePartial.AddressFamiliesEnum>} address_families
 */
RouteServerNetworkFeaturePartial.prototype['address_families'] = undefined;

/**
 * @member {Number} asn
 */
RouteServerNetworkFeaturePartial.prototype['asn'] = undefined;

/**
 * The route server provides the following session modes. 
 * @member {Array.<module:model/RouteServerNetworkFeaturePartial.AvailableBgpSessionTypesEnum>} available_bgp_session_types
 */
RouteServerNetworkFeaturePartial.prototype['available_bgp_session_types'] = undefined;

/**
 * A list of IXP specific feature flags. This can be used to see if e.g. RPKI hard filtering is available.
 * @member {Array.<module:model/IXPSpecificFeatureFlag>} flags
 */
RouteServerNetworkFeaturePartial.prototype['flags'] = undefined;

/**
 * The FQDN of the route server. 
 * @member {String} fqdn
 */
RouteServerNetworkFeaturePartial.prototype['fqdn'] = undefined;

/**
 * @member {String} id
 */
RouteServerNetworkFeaturePartial.prototype['id'] = undefined;

/**
 * IPv4 address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) notation. 
 * @member {String} ip_v4
 */
RouteServerNetworkFeaturePartial.prototype['ip_v4'] = undefined;

/**
 * IPv6 address in hexadecimal colon separated notation. 
 * @member {String} ip_v6
 */
RouteServerNetworkFeaturePartial.prototype['ip_v6'] = undefined;

/**
 * The url of the looking glass. 
 * @member {String} looking_glass_url
 */
RouteServerNetworkFeaturePartial.prototype['looking_glass_url'] = undefined;

/**
 * @member {String} name
 */
RouteServerNetworkFeaturePartial.prototype['name'] = undefined;

/**
 * @member {String} network_service
 */
RouteServerNetworkFeaturePartial.prototype['network_service'] = undefined;

/**
 * The configuration will require at least one of each of the specified roles assigned to contacts.  The role assignments is associated with the network feature config through the `role_assignments` list property.
 * @member {Array.<String>} nfc_required_contact_roles
 */
RouteServerNetworkFeaturePartial.prototype['nfc_required_contact_roles'] = undefined;

/**
 * @member {Boolean} required
 */
RouteServerNetworkFeaturePartial.prototype['required'] = undefined;

/**
 * When creating a route server feature config, remember to specify the same session_mode as the route server. 
 * @member {module:model/RouteServerNetworkFeaturePartial.SessionModeEnum} session_mode
 */
RouteServerNetworkFeaturePartial.prototype['session_mode'] = undefined;

/**
 * @member {String} type
 */
RouteServerNetworkFeaturePartial.prototype['type'] = undefined;





/**
 * Allowed values for the <code>addressFamilies</code> property.
 * @enum {String}
 * @readonly
 */
RouteServerNetworkFeaturePartial['AddressFamiliesEnum'] = {

    /**
     * value: "af_inet"
     * @const
     */
    "inet": "af_inet",

    /**
     * value: "af_inet6"
     * @const
     */
    "inet6": "af_inet6"
};


/**
 * Allowed values for the <code>availableBgpSessionTypes</code> property.
 * @enum {String}
 * @readonly
 */
RouteServerNetworkFeaturePartial['AvailableBgpSessionTypesEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "passive"
     * @const
     */
    "passive": "passive"
};


/**
 * Allowed values for the <code>session_mode</code> property.
 * @enum {String}
 * @readonly
 */
RouteServerNetworkFeaturePartial['SessionModeEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "collector"
     * @const
     */
    "collector": "collector"
};



export default RouteServerNetworkFeaturePartial;

