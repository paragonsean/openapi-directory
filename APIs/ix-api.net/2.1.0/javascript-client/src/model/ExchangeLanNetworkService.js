/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeLanNetworkServicePartial from './ExchangeLanNetworkServicePartial';
import Status from './Status';

/**
 * The ExchangeLanNetworkService model module.
 * @module model/ExchangeLanNetworkService
 * @version 2.1.0
 */
class ExchangeLanNetworkService {
    /**
     * Constructs a new <code>ExchangeLanNetworkService</code>.
     * @alias module:model/ExchangeLanNetworkService
     * @implements module:model/ExchangeLanNetworkServicePartial
     * @param consumingAccount {String} The `id` of the account consuming a service.  Used to be `owning_customer`. 
     * @param id {String} 
     * @param managingAccount {String} The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
     * @param metroAreaNetwork {String} Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`. 
     * @param name {String} Exchange-dependent service name, will be shown on the invoice.
     * @param networkFeatures {Array.<String>} 
     * @param state {module:model/ExchangeLanNetworkService.StateEnum} 
     * @param subnetV4 {String} IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation. 
     * @param subnetV6 {String} IPv6 subnet in hexadecimal colon separated CIDR notation. 
     * @param type {String} 
     */
    constructor(consumingAccount, id, managingAccount, metroAreaNetwork, name, networkFeatures, state, subnetV4, subnetV6, type) { 
        ExchangeLanNetworkServicePartial.initialize(this, type);
        ExchangeLanNetworkService.initialize(this, consumingAccount, id, managingAccount, metroAreaNetwork, name, networkFeatures, state, subnetV4, subnetV6, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, consumingAccount, id, managingAccount, metroAreaNetwork, name, networkFeatures, state, subnetV4, subnetV6, type) { 
        obj['consuming_account'] = consumingAccount;
        obj['id'] = id;
        obj['managing_account'] = managingAccount;
        obj['metro_area_network'] = metroAreaNetwork;
        obj['name'] = name;
        obj['network_features'] = networkFeatures;
        obj['state'] = state;
        obj['subnet_v4'] = subnetV4;
        obj['subnet_v6'] = subnetV6;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ExchangeLanNetworkService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExchangeLanNetworkService} obj Optional instance to populate.
     * @return {module:model/ExchangeLanNetworkService} The populated <code>ExchangeLanNetworkService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExchangeLanNetworkService();
            ExchangeLanNetworkServicePartial.constructFromObject(data, obj);

            if (data.hasOwnProperty('consuming_account')) {
                obj['consuming_account'] = ApiClient.convertToType(data['consuming_account'], 'String');
            }
            if (data.hasOwnProperty('external_ref')) {
                obj['external_ref'] = ApiClient.convertToType(data['external_ref'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ixfdb_ixid')) {
                obj['ixfdb_ixid'] = ApiClient.convertToType(data['ixfdb_ixid'], 'Number');
            }
            if (data.hasOwnProperty('managing_account')) {
                obj['managing_account'] = ApiClient.convertToType(data['managing_account'], 'String');
            }
            if (data.hasOwnProperty('metro_area_network')) {
                obj['metro_area_network'] = ApiClient.convertToType(data['metro_area_network'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network_features')) {
                obj['network_features'] = ApiClient.convertToType(data['network_features'], ['String']);
            }
            if (data.hasOwnProperty('nsc_required_contact_roles')) {
                obj['nsc_required_contact_roles'] = ApiClient.convertToType(data['nsc_required_contact_roles'], ['String']);
            }
            if (data.hasOwnProperty('peeringdb_ixid')) {
                obj['peeringdb_ixid'] = ApiClient.convertToType(data['peeringdb_ixid'], 'Number');
            }
            if (data.hasOwnProperty('product_offering')) {
                obj['product_offering'] = ApiClient.convertToType(data['product_offering'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], [Status]);
            }
            if (data.hasOwnProperty('subnet_v4')) {
                obj['subnet_v4'] = ApiClient.convertToType(data['subnet_v4'], 'String');
            }
            if (data.hasOwnProperty('subnet_v6')) {
                obj['subnet_v6'] = ApiClient.convertToType(data['subnet_v6'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExchangeLanNetworkService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExchangeLanNetworkService</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExchangeLanNetworkService.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['consuming_account'] && !(typeof data['consuming_account'] === 'string' || data['consuming_account'] instanceof String)) {
            throw new Error("Expected the field `consuming_account` to be a primitive type in the JSON string but got " + data['consuming_account']);
        }
        // ensure the json data is a string
        if (data['external_ref'] && !(typeof data['external_ref'] === 'string' || data['external_ref'] instanceof String)) {
            throw new Error("Expected the field `external_ref` to be a primitive type in the JSON string but got " + data['external_ref']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['managing_account'] && !(typeof data['managing_account'] === 'string' || data['managing_account'] instanceof String)) {
            throw new Error("Expected the field `managing_account` to be a primitive type in the JSON string but got " + data['managing_account']);
        }
        // ensure the json data is a string
        if (data['metro_area_network'] && !(typeof data['metro_area_network'] === 'string' || data['metro_area_network'] instanceof String)) {
            throw new Error("Expected the field `metro_area_network` to be a primitive type in the JSON string but got " + data['metro_area_network']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['network_features'])) {
            throw new Error("Expected the field `network_features` to be an array in the JSON data but got " + data['network_features']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nsc_required_contact_roles'])) {
            throw new Error("Expected the field `nsc_required_contact_roles` to be an array in the JSON data but got " + data['nsc_required_contact_roles']);
        }
        // ensure the json data is a string
        if (data['product_offering'] && !(typeof data['product_offering'] === 'string' || data['product_offering'] instanceof String)) {
            throw new Error("Expected the field `product_offering` to be a primitive type in the JSON string but got " + data['product_offering']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['status']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['status'])) {
                throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
            }
            // validate the optional field `status` (array)
            for (const item of data['status']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['subnet_v4'] && !(typeof data['subnet_v4'] === 'string' || data['subnet_v4'] instanceof String)) {
            throw new Error("Expected the field `subnet_v4` to be a primitive type in the JSON string but got " + data['subnet_v4']);
        }
        // ensure the json data is a string
        if (data['subnet_v6'] && !(typeof data['subnet_v6'] === 'string' || data['subnet_v6'] instanceof String)) {
            throw new Error("Expected the field `subnet_v6` to be a primitive type in the JSON string but got " + data['subnet_v6']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ExchangeLanNetworkService.RequiredProperties = ["consuming_account", "id", "managing_account", "metro_area_network", "name", "network_features", "state", "subnet_v4", "subnet_v6", "type"];

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
ExchangeLanNetworkService.prototype['consuming_account'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
ExchangeLanNetworkService.prototype['external_ref'] = undefined;

/**
 * @member {String} id
 */
ExchangeLanNetworkService.prototype['id'] = undefined;

/**
 * id of ixfdb
 * @member {Number} ixfdb_ixid
 */
ExchangeLanNetworkService.prototype['ixfdb_ixid'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
ExchangeLanNetworkService.prototype['managing_account'] = undefined;

/**
 * Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`. 
 * @member {String} metro_area_network
 */
ExchangeLanNetworkService.prototype['metro_area_network'] = undefined;

/**
 * Exchange-dependent service name, will be shown on the invoice.
 * @member {String} name
 */
ExchangeLanNetworkService.prototype['name'] = undefined;

/**
 * @member {Array.<String>} network_features
 */
ExchangeLanNetworkService.prototype['network_features'] = undefined;

/**
 * The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.
 * @member {Array.<String>} nsc_required_contact_roles
 */
ExchangeLanNetworkService.prototype['nsc_required_contact_roles'] = undefined;

/**
 * PeeringDB ixid
 * @member {Number} peeringdb_ixid
 */
ExchangeLanNetworkService.prototype['peeringdb_ixid'] = undefined;

/**
 * *deprecation notice*
 * @member {String} product_offering
 */
ExchangeLanNetworkService.prototype['product_offering'] = undefined;

/**
 * @member {module:model/ExchangeLanNetworkService.StateEnum} state
 */
ExchangeLanNetworkService.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/Status>} status
 */
ExchangeLanNetworkService.prototype['status'] = undefined;

/**
 * IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation. 
 * @member {String} subnet_v4
 */
ExchangeLanNetworkService.prototype['subnet_v4'] = undefined;

/**
 * IPv6 subnet in hexadecimal colon separated CIDR notation. 
 * @member {String} subnet_v6
 */
ExchangeLanNetworkService.prototype['subnet_v6'] = undefined;

/**
 * @member {String} type
 */
ExchangeLanNetworkService.prototype['type'] = undefined;


// Implement ExchangeLanNetworkServicePartial interface:
/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
ExchangeLanNetworkServicePartial.prototype['consuming_account'] = undefined;
/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
ExchangeLanNetworkServicePartial.prototype['external_ref'] = undefined;
/**
 * @member {String} id
 */
ExchangeLanNetworkServicePartial.prototype['id'] = undefined;
/**
 * id of ixfdb
 * @member {Number} ixfdb_ixid
 */
ExchangeLanNetworkServicePartial.prototype['ixfdb_ixid'] = undefined;
/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
ExchangeLanNetworkServicePartial.prototype['managing_account'] = undefined;
/**
 * Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`. 
 * @member {String} metro_area_network
 */
ExchangeLanNetworkServicePartial.prototype['metro_area_network'] = undefined;
/**
 * Exchange-dependent service name, will be shown on the invoice.
 * @member {String} name
 */
ExchangeLanNetworkServicePartial.prototype['name'] = undefined;
/**
 * @member {Array.<String>} network_features
 */
ExchangeLanNetworkServicePartial.prototype['network_features'] = undefined;
/**
 * The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.
 * @member {Array.<String>} nsc_required_contact_roles
 */
ExchangeLanNetworkServicePartial.prototype['nsc_required_contact_roles'] = undefined;
/**
 * PeeringDB ixid
 * @member {Number} peeringdb_ixid
 */
ExchangeLanNetworkServicePartial.prototype['peeringdb_ixid'] = undefined;
/**
 * *deprecation notice*
 * @member {String} product_offering
 */
ExchangeLanNetworkServicePartial.prototype['product_offering'] = undefined;
/**
 * @member {module:model/ExchangeLanNetworkServicePartial.StateEnum} state
 */
ExchangeLanNetworkServicePartial.prototype['state'] = undefined;
/**
 * @member {Array.<module:model/Status>} status
 */
ExchangeLanNetworkServicePartial.prototype['status'] = undefined;
/**
 * IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation. 
 * @member {String} subnet_v4
 */
ExchangeLanNetworkServicePartial.prototype['subnet_v4'] = undefined;
/**
 * IPv6 subnet in hexadecimal colon separated CIDR notation. 
 * @member {String} subnet_v6
 */
ExchangeLanNetworkServicePartial.prototype['subnet_v6'] = undefined;
/**
 * @member {String} type
 */
ExchangeLanNetworkServicePartial.prototype['type'] = undefined;



/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ExchangeLanNetworkService['StateEnum'] = {

    /**
     * value: "requested"
     * @const
     */
    "requested": "requested",

    /**
     * value: "allocated"
     * @const
     */
    "allocated": "allocated",

    /**
     * value: "testing"
     * @const
     */
    "testing": "testing",

    /**
     * value: "production"
     * @const
     */
    "production": "production",

    /**
     * value: "production_change_pending"
     * @const
     */
    "production_change_pending": "production_change_pending",

    /**
     * value: "decommission_requested"
     * @const
     */
    "decommission_requested": "decommission_requested",

    /**
     * value: "decommissioned"
     * @const
     */
    "decommissioned": "decommissioned",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "operator"
     * @const
     */
    "operator": "operator",

    /**
     * value: "scheduled"
     * @const
     */
    "scheduled": "scheduled"
};



export default ExchangeLanNetworkService;

