/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProblemResponse from './ProblemResponse';

/**
 * The AuthTokenRefresh401Response model module.
 * @module model/AuthTokenRefresh401Response
 * @version 2.1.0
 */
class AuthTokenRefresh401Response {
    /**
     * Constructs a new <code>AuthTokenRefresh401Response</code>.
     * @alias module:model/AuthTokenRefresh401Response
     * @implements module:model/ProblemResponse
     * @param type {module:model/AuthTokenRefresh401Response.TypeEnum} 
     */
    constructor(type) { 
        ProblemResponse.initialize(this, type);
        AuthTokenRefresh401Response.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AuthTokenRefresh401Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthTokenRefresh401Response} obj Optional instance to populate.
     * @return {module:model/AuthTokenRefresh401Response} The populated <code>AuthTokenRefresh401Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthTokenRefresh401Response();
            ProblemResponse.constructFromObject(data, obj);

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthTokenRefresh401Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthTokenRefresh401Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuthTokenRefresh401Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AuthTokenRefresh401Response.RequiredProperties = ["type"];

/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @member {String} detail
 */
AuthTokenRefresh401Response.prototype['detail'] = undefined;

/**
 * A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
 * @member {String} instance
 */
AuthTokenRefresh401Response.prototype['instance'] = undefined;

/**
 * @member {Object} status
 */
AuthTokenRefresh401Response.prototype['status'] = undefined;

/**
 * @member {Object} title
 */
AuthTokenRefresh401Response.prototype['title'] = undefined;

/**
 * @member {module:model/AuthTokenRefresh401Response.TypeEnum} type
 */
AuthTokenRefresh401Response.prototype['type'] = undefined;


// Implement ProblemResponse interface:
/**
 * A human-readable explanation specific to this occurrence of the problem.
 * @member {String} detail
 */
ProblemResponse.prototype['detail'] = undefined;
/**
 * A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
 * @member {String} instance
 */
ProblemResponse.prototype['instance'] = undefined;
/**
 * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
 * @member {Number} status
 */
ProblemResponse.prototype['status'] = undefined;
/**
 * A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section 3.4). 
 * @member {String} title
 */
ProblemResponse.prototype['title'] = undefined;
/**
 * A URI reference (see RFC3986) that identifies the problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be \"about:blank\". 
 * @member {String} type
 */
ProblemResponse.prototype['type'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AuthTokenRefresh401Response['TypeEnum'] = {

    /**
     * value: "https://errors.ix-api.net/v2/authentication-error.html"
     * @const
     */
    "authentication-error.html": "https://errors.ix-api.net/v2/authentication-error.html",

    /**
     * value: "https://errors.ix-api.net/v2/signature-expired.html"
     * @const
     */
    "signature-expired.html": "https://errors.ix-api.net/v2/signature-expired.html",

    /**
     * value: "https://errors.ix-api.net/v2/not-authenticated.html"
     * @const
     */
    "not-authenticated.html": "https://errors.ix-api.net/v2/not-authenticated.html"
};



export default AuthTokenRefresh401Response;

