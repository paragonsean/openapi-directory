/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudNetworkServiceConfigPartial from './CloudNetworkServiceConfigPartial';
import ExchangeLanNetworkServiceConfigPartial from './ExchangeLanNetworkServiceConfigPartial';
import MP2MPNetworkServiceConfigPartial from './MP2MPNetworkServiceConfigPartial';
import P2MPNetworkServiceConfigPartial from './P2MPNetworkServiceConfigPartial';
import P2PNetworkServiceConfigPartial from './P2PNetworkServiceConfigPartial';
import Status from './Status';
import VlanConfig from './VlanConfig';

/**
 * The NetworkServiceConfigPartial model module.
 * @module model/NetworkServiceConfigPartial
 * @version 2.1.0
 */
class NetworkServiceConfigPartial {
    /**
     * Constructs a new <code>NetworkServiceConfigPartial</code>.
     * Polymorphic Network Service Config
     * @alias module:model/NetworkServiceConfigPartial
     * @param {(module:model/CloudNetworkServiceConfigPartial|module:model/ExchangeLanNetworkServiceConfigPartial|module:model/MP2MPNetworkServiceConfigPartial|module:model/P2MPNetworkServiceConfigPartial|module:model/P2PNetworkServiceConfigPartial)} instance The actual instance to initialize NetworkServiceConfigPartial.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ExchangeLanNetworkServiceConfigPartial") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ExchangeLanNetworkServiceConfigPartial.validateJSON(instance); // throw an exception if no match
                // create ExchangeLanNetworkServiceConfigPartial from JS object
                this.actualInstance = ExchangeLanNetworkServiceConfigPartial.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ExchangeLanNetworkServiceConfigPartial
            errorMessages.push("Failed to construct ExchangeLanNetworkServiceConfigPartial: " + err)
        }

        try {
            if (typeof instance === "P2PNetworkServiceConfigPartial") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                P2PNetworkServiceConfigPartial.validateJSON(instance); // throw an exception if no match
                // create P2PNetworkServiceConfigPartial from JS object
                this.actualInstance = P2PNetworkServiceConfigPartial.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into P2PNetworkServiceConfigPartial
            errorMessages.push("Failed to construct P2PNetworkServiceConfigPartial: " + err)
        }

        try {
            if (typeof instance === "P2MPNetworkServiceConfigPartial") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                P2MPNetworkServiceConfigPartial.validateJSON(instance); // throw an exception if no match
                // create P2MPNetworkServiceConfigPartial from JS object
                this.actualInstance = P2MPNetworkServiceConfigPartial.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into P2MPNetworkServiceConfigPartial
            errorMessages.push("Failed to construct P2MPNetworkServiceConfigPartial: " + err)
        }

        try {
            if (typeof instance === "MP2MPNetworkServiceConfigPartial") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MP2MPNetworkServiceConfigPartial.validateJSON(instance); // throw an exception if no match
                // create MP2MPNetworkServiceConfigPartial from JS object
                this.actualInstance = MP2MPNetworkServiceConfigPartial.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MP2MPNetworkServiceConfigPartial
            errorMessages.push("Failed to construct MP2MPNetworkServiceConfigPartial: " + err)
        }

        try {
            if (typeof instance === "CloudNetworkServiceConfigPartial") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CloudNetworkServiceConfigPartial.validateJSON(instance); // throw an exception if no match
                // create CloudNetworkServiceConfigPartial from JS object
                this.actualInstance = CloudNetworkServiceConfigPartial.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CloudNetworkServiceConfigPartial
            errorMessages.push("Failed to construct CloudNetworkServiceConfigPartial: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `NetworkServiceConfigPartial` with oneOf schemas CloudNetworkServiceConfigPartial, ExchangeLanNetworkServiceConfigPartial, MP2MPNetworkServiceConfigPartial, P2MPNetworkServiceConfigPartial, P2PNetworkServiceConfigPartial. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `NetworkServiceConfigPartial` with oneOf schemas CloudNetworkServiceConfigPartial, ExchangeLanNetworkServiceConfigPartial, MP2MPNetworkServiceConfigPartial, P2MPNetworkServiceConfigPartial, P2PNetworkServiceConfigPartial. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>NetworkServiceConfigPartial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkServiceConfigPartial} obj Optional instance to populate.
     * @return {module:model/NetworkServiceConfigPartial} The populated <code>NetworkServiceConfigPartial</code> instance.
     */
    static constructFromObject(data, obj) {
        return new NetworkServiceConfigPartial(data);
    }

    /**
     * Gets the actual instance, which can be <code>CloudNetworkServiceConfigPartial</code>, <code>ExchangeLanNetworkServiceConfigPartial</code>, <code>MP2MPNetworkServiceConfigPartial</code>, <code>P2MPNetworkServiceConfigPartial</code>, <code>P2PNetworkServiceConfigPartial</code>.
     * @return {(module:model/CloudNetworkServiceConfigPartial|module:model/ExchangeLanNetworkServiceConfigPartial|module:model/MP2MPNetworkServiceConfigPartial|module:model/P2MPNetworkServiceConfigPartial|module:model/P2PNetworkServiceConfigPartial)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CloudNetworkServiceConfigPartial</code>, <code>ExchangeLanNetworkServiceConfigPartial</code>, <code>MP2MPNetworkServiceConfigPartial</code>, <code>P2MPNetworkServiceConfigPartial</code>, <code>P2PNetworkServiceConfigPartial</code>.
     * @param {(module:model/CloudNetworkServiceConfigPartial|module:model/ExchangeLanNetworkServiceConfigPartial|module:model/MP2MPNetworkServiceConfigPartial|module:model/P2MPNetworkServiceConfigPartial|module:model/P2PNetworkServiceConfigPartial)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = NetworkServiceConfigPartial.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of NetworkServiceConfigPartial from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/NetworkServiceConfigPartial} An instance of NetworkServiceConfigPartial.
     */
    static fromJSON = function(json_string){
        return NetworkServiceConfigPartial.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Array.<Number>} asns
 */
NetworkServiceConfigPartial.prototype['asns'] = undefined;

/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
NetworkServiceConfigPartial.prototype['billing_account'] = undefined;

/**
 * The capacity of the service in Mbps. If set to Null, the maximum capacity will be used, i.e. the virtual circuit is not rate-limited.  An exchange may choose to constrain the available capacity range of a `ProductOffering`.  That means, the service can consume up to the total bandwidth of the `Connection`.  Typically the service is charged based on the capacity.
 * @member {Number} capacity
 */
NetworkServiceConfigPartial.prototype['capacity'] = undefined;

/**
 * Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.
 * @member {Date} charged_until
 */
NetworkServiceConfigPartial.prototype['charged_until'] = undefined;

/**
 * The id of the connection to use for this `NetworkServiceConfig`.
 * @member {String} connection
 */
NetworkServiceConfigPartial.prototype['connection'] = undefined;

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
NetworkServiceConfigPartial.prototype['consuming_account'] = undefined;

/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
NetworkServiceConfigPartial.prototype['contract_ref'] = undefined;

/**
 * The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.
 * @member {Date} decommission_at
 */
NetworkServiceConfigPartial.prototype['decommission_at'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
NetworkServiceConfigPartial.prototype['external_ref'] = undefined;

/**
 * @member {String} id
 */
NetworkServiceConfigPartial.prototype['id'] = undefined;

/**
 * A list of ip-address IDs.  Allocation of IP Addresses might be deferred depending on the IXP implementation. No assumption should be made.
 * @member {Array.<String>} ips
 */
NetworkServiceConfigPartial.prototype['ips'] = undefined;

/**
 * The customer wants to be featured on the member list
 * @member {Boolean} listed
 */
NetworkServiceConfigPartial.prototype['listed'] = undefined;

/**
 * @member {Array.<String>} macs
 */
NetworkServiceConfigPartial.prototype['macs'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
NetworkServiceConfigPartial.prototype['managing_account'] = undefined;

/**
 * A list of ids of `NetworkFeatureConfig`s. 
 * @member {Array.<String>} network_feature_configs
 */
NetworkServiceConfigPartial.prototype['network_feature_configs'] = undefined;

/**
 * The id of the configured network service.
 * @member {String} network_service
 */
NetworkServiceConfigPartial.prototype['network_service'] = undefined;

/**
 * The product offering must match the type `exchange_lan` and must refer to the related network service through the `exchange_lan_network_service` property.
 * @member {String} product_offering
 */
NetworkServiceConfigPartial.prototype['product_offering'] = undefined;

/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
NetworkServiceConfigPartial.prototype['purchase_order'] = '';

/**
 * A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 
 * @member {Array.<String>} role_assignments
 */
NetworkServiceConfigPartial.prototype['role_assignments'] = undefined;

/**
 * @member {module:model/NetworkServiceConfigPartial.StateEnum} state
 */
NetworkServiceConfigPartial.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/Status>} status
 */
NetworkServiceConfigPartial.prototype['status'] = undefined;

/**
 * @member {String} type
 */
NetworkServiceConfigPartial.prototype['type'] = undefined;

/**
 * @member {module:model/VlanConfig} vlan_config
 */
NetworkServiceConfigPartial.prototype['vlan_config'] = undefined;

/**
 * A `leaf` can only reach roots and is isolated from other leafs. A `root` can reach any other point in the virtual circuit including other roots.
 * @member {module:model/NetworkServiceConfigPartial.RoleEnum} role
 * @default 'leaf'
 */
NetworkServiceConfigPartial.prototype['role'] = 'leaf';

/**
 * If the `provider_vlans` property of the `ProductOffering` is `multi`, a numeric value refers to a specific vlan on the service provider side.  Otherwise, if set to `null`, it refers to all unmatched vlan ids on the service provider side. (All vlan ids from the service provider side are presented as tags within any vlans specified in `vlan_config`.)  If the `provider_vlans` property of the `ProductOffering` is `single`, the `cloud_vlan` MUST be `null` or MUST NOT be provided.
 * @member {Number} cloud_vlan
 */
NetworkServiceConfigPartial.prototype['cloud_vlan'] = undefined;

/**
 * The handover enumerates the connection and is required for checking diversity constraints.  It must be within `1 <= x <= network_service.diversity`. 
 * @member {Number} handover
 */
NetworkServiceConfigPartial.prototype['handover'] = undefined;


NetworkServiceConfigPartial.OneOf = ["CloudNetworkServiceConfigPartial", "ExchangeLanNetworkServiceConfigPartial", "MP2MPNetworkServiceConfigPartial", "P2MPNetworkServiceConfigPartial", "P2PNetworkServiceConfigPartial"];

export default NetworkServiceConfigPartial;

