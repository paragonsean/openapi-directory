/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetroAreaPartial from './MetroAreaPartial';

/**
 * The MetroArea model module.
 * @module model/MetroArea
 * @version 2.1.0
 */
class MetroArea {
    /**
     * Constructs a new <code>MetroArea</code>.
     * @alias module:model/MetroArea
     * @implements module:model/MetroAreaPartial
     * @param displayName {String} The name of the metro area. Likely the same as the IATA code. 
     * @param facilities {Array.<String>} List of facilities the metro area network.
     * @param iataCode {String} The three letter IATA airport code for identiying the metro area. 
     * @param id {String} 
     * @param metroAreaNetworks {Array.<String>} List of networks in the metro area.
     * @param unLocode {String} The UN/LOCODE for identifying the metro area. 
     */
    constructor(displayName, facilities, iataCode, id, metroAreaNetworks, unLocode) { 
        MetroAreaPartial.initialize(this);
        MetroArea.initialize(this, displayName, facilities, iataCode, id, metroAreaNetworks, unLocode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, facilities, iataCode, id, metroAreaNetworks, unLocode) { 
        obj['display_name'] = displayName;
        obj['facilities'] = facilities;
        obj['iata_code'] = iataCode;
        obj['id'] = id;
        obj['metro_area_networks'] = metroAreaNetworks;
        obj['un_locode'] = unLocode;
    }

    /**
     * Constructs a <code>MetroArea</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetroArea} obj Optional instance to populate.
     * @return {module:model/MetroArea} The populated <code>MetroArea</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetroArea();
            MetroAreaPartial.constructFromObject(data, obj);

            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('facilities')) {
                obj['facilities'] = ApiClient.convertToType(data['facilities'], ['String']);
            }
            if (data.hasOwnProperty('iata_code')) {
                obj['iata_code'] = ApiClient.convertToType(data['iata_code'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metro_area_networks')) {
                obj['metro_area_networks'] = ApiClient.convertToType(data['metro_area_networks'], ['String']);
            }
            if (data.hasOwnProperty('un_locode')) {
                obj['un_locode'] = ApiClient.convertToType(data['un_locode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetroArea</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetroArea</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetroArea.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['facilities'])) {
            throw new Error("Expected the field `facilities` to be an array in the JSON data but got " + data['facilities']);
        }
        // ensure the json data is a string
        if (data['iata_code'] && !(typeof data['iata_code'] === 'string' || data['iata_code'] instanceof String)) {
            throw new Error("Expected the field `iata_code` to be a primitive type in the JSON string but got " + data['iata_code']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metro_area_networks'])) {
            throw new Error("Expected the field `metro_area_networks` to be an array in the JSON data but got " + data['metro_area_networks']);
        }
        // ensure the json data is a string
        if (data['un_locode'] && !(typeof data['un_locode'] === 'string' || data['un_locode'] instanceof String)) {
            throw new Error("Expected the field `un_locode` to be a primitive type in the JSON string but got " + data['un_locode']);
        }

        return true;
    }


}

MetroArea.RequiredProperties = ["display_name", "facilities", "iata_code", "id", "metro_area_networks", "un_locode"];

/**
 * The name of the metro area. Likely the same as the IATA code. 
 * @member {String} display_name
 */
MetroArea.prototype['display_name'] = undefined;

/**
 * List of facilities the metro area network.
 * @member {Array.<String>} facilities
 */
MetroArea.prototype['facilities'] = undefined;

/**
 * The three letter IATA airport code for identiying the metro area. 
 * @member {String} iata_code
 */
MetroArea.prototype['iata_code'] = undefined;

/**
 * @member {String} id
 */
MetroArea.prototype['id'] = undefined;

/**
 * List of networks in the metro area.
 * @member {Array.<String>} metro_area_networks
 */
MetroArea.prototype['metro_area_networks'] = undefined;

/**
 * The UN/LOCODE for identifying the metro area. 
 * @member {String} un_locode
 */
MetroArea.prototype['un_locode'] = undefined;


// Implement MetroAreaPartial interface:
/**
 * The name of the metro area. Likely the same as the IATA code. 
 * @member {String} display_name
 */
MetroAreaPartial.prototype['display_name'] = undefined;
/**
 * List of facilities the metro area network.
 * @member {Array.<String>} facilities
 */
MetroAreaPartial.prototype['facilities'] = undefined;
/**
 * The three letter IATA airport code for identiying the metro area. 
 * @member {String} iata_code
 */
MetroAreaPartial.prototype['iata_code'] = undefined;
/**
 * @member {String} id
 */
MetroAreaPartial.prototype['id'] = undefined;
/**
 * List of networks in the metro area.
 * @member {Array.<String>} metro_area_networks
 */
MetroAreaPartial.prototype['metro_area_networks'] = undefined;
/**
 * The UN/LOCODE for identifying the metro area. 
 * @member {String} un_locode
 */
MetroAreaPartial.prototype['un_locode'] = undefined;




export default MetroArea;

