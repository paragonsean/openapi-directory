/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VLanConfigDot1Q from './VLanConfigDot1Q';
import VLanConfigPort from './VLanConfigPort';
import VLanConfigQinQ from './VLanConfigQinQ';

/**
 * The VlanConfig model module.
 * @module model/VlanConfig
 * @version 2.1.0
 */
class VlanConfig {
    /**
     * Constructs a new <code>VlanConfig</code>.
     * The vlan configuration defines how the service is made available on the connection.
     * @alias module:model/VlanConfig
     * @param {(module:model/VLanConfigDot1Q|module:model/VLanConfigPort|module:model/VLanConfigQinQ)} instance The actual instance to initialize VlanConfig.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "VLanConfigDot1Q") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VLanConfigDot1Q.validateJSON(instance); // throw an exception if no match
                // create VLanConfigDot1Q from JS object
                this.actualInstance = VLanConfigDot1Q.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VLanConfigDot1Q
            errorMessages.push("Failed to construct VLanConfigDot1Q: " + err)
        }

        try {
            if (typeof instance === "VLanConfigQinQ") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VLanConfigQinQ.validateJSON(instance); // throw an exception if no match
                // create VLanConfigQinQ from JS object
                this.actualInstance = VLanConfigQinQ.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VLanConfigQinQ
            errorMessages.push("Failed to construct VLanConfigQinQ: " + err)
        }

        try {
            if (typeof instance === "VLanConfigPort") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VLanConfigPort.validateJSON(instance); // throw an exception if no match
                // create VLanConfigPort from JS object
                this.actualInstance = VLanConfigPort.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VLanConfigPort
            errorMessages.push("Failed to construct VLanConfigPort: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `VlanConfig` with oneOf schemas VLanConfigDot1Q, VLanConfigPort, VLanConfigQinQ. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `VlanConfig` with oneOf schemas VLanConfigDot1Q, VLanConfigPort, VLanConfigQinQ. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>VlanConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VlanConfig} obj Optional instance to populate.
     * @return {module:model/VlanConfig} The populated <code>VlanConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        return new VlanConfig(data);
    }

    /**
     * Gets the actual instance, which can be <code>VLanConfigDot1Q</code>, <code>VLanConfigPort</code>, <code>VLanConfigQinQ</code>.
     * @return {(module:model/VLanConfigDot1Q|module:model/VLanConfigPort|module:model/VLanConfigQinQ)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>VLanConfigDot1Q</code>, <code>VLanConfigPort</code>, <code>VLanConfigQinQ</code>.
     * @param {(module:model/VLanConfigDot1Q|module:model/VLanConfigPort|module:model/VLanConfigQinQ)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = VlanConfig.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of VlanConfig from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/VlanConfig} An instance of VlanConfig.
     */
    static fromJSON = function(json_string){
        return VlanConfig.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * A VLAN tag 
 * @member {Number} vlan
 */
VlanConfig.prototype['vlan'] = undefined;

/**
 * The ethertype of the vlan in hexadecimal notation.
 * @member {module:model/VlanConfig.VlanEthertypeEnum} vlan_ethertype
 * @default '0x8100'
 */
VlanConfig.prototype['vlan_ethertype'] = '0x8100';

/**
 * @member {String} vlan_type
 */
VlanConfig.prototype['vlan_type'] = undefined;

/**
 * The inner VLAN id. 
 * @member {Number} inner_vlan
 */
VlanConfig.prototype['inner_vlan'] = undefined;

/**
 * The outer VLAN id. 
 * @member {Number} outer_vlan
 */
VlanConfig.prototype['outer_vlan'] = undefined;

/**
 * The ethertype of the outer tag in hexadecimal notation.
 * @member {module:model/VlanConfig.OuterVlanEthertypeEnum} outer_vlan_ethertype
 * @default '0x8100'
 */
VlanConfig.prototype['outer_vlan_ethertype'] = '0x8100';


VlanConfig.OneOf = ["VLanConfigDot1Q", "VLanConfigPort", "VLanConfigQinQ"];

export default VlanConfig;

