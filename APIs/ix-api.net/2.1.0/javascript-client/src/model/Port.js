/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PortPartial from './PortPartial';
import Status from './Status';

/**
 * The Port model module.
 * @module model/Port
 * @version 2.1.0
 */
class Port {
    /**
     * Constructs a new <code>Port</code>.
     * @alias module:model/Port
     * @implements module:model/PortPartial
     * @param billingAccount {String} An account requires billing_information to be used as a `billing_account`.
     * @param consumingAccount {String} The `id` of the account consuming a service.  Used to be `owning_customer`. 
     * @param device {String} The device the port. 
     * @param id {String} 
     * @param managingAccount {String} The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
     * @param mediaType {String} The media type of the port. Query the device's capabilities for available types. 
     * @param pop {String} Same as the `pop` of the `device`. 
     * @param roleAssignments {Array.<String>} A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 
     * @param state {module:model/Port.StateEnum} 
     */
    constructor(billingAccount, consumingAccount, device, id, managingAccount, mediaType, pop, roleAssignments, state) { 
        PortPartial.initialize(this);
        Port.initialize(this, billingAccount, consumingAccount, device, id, managingAccount, mediaType, pop, roleAssignments, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, billingAccount, consumingAccount, device, id, managingAccount, mediaType, pop, roleAssignments, state) { 
        obj['billing_account'] = billingAccount;
        obj['consuming_account'] = consumingAccount;
        obj['device'] = device;
        obj['id'] = id;
        obj['managing_account'] = managingAccount;
        obj['media_type'] = mediaType;
        obj['name'] = '';
        obj['pop'] = pop;
        obj['purchase_order'] = '';
        obj['role_assignments'] = roleAssignments;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>Port</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Port} obj Optional instance to populate.
     * @return {module:model/Port} The populated <code>Port</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Port();
            PortPartial.constructFromObject(data, obj);

            if (data.hasOwnProperty('billing_account')) {
                obj['billing_account'] = ApiClient.convertToType(data['billing_account'], 'String');
            }
            if (data.hasOwnProperty('connection')) {
                obj['connection'] = ApiClient.convertToType(data['connection'], 'String');
            }
            if (data.hasOwnProperty('consuming_account')) {
                obj['consuming_account'] = ApiClient.convertToType(data['consuming_account'], 'String');
            }
            if (data.hasOwnProperty('contract_ref')) {
                obj['contract_ref'] = ApiClient.convertToType(data['contract_ref'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('external_ref')) {
                obj['external_ref'] = ApiClient.convertToType(data['external_ref'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('managing_account')) {
                obj['managing_account'] = ApiClient.convertToType(data['managing_account'], 'String');
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pop')) {
                obj['pop'] = ApiClient.convertToType(data['pop'], 'String');
            }
            if (data.hasOwnProperty('purchase_order')) {
                obj['purchase_order'] = ApiClient.convertToType(data['purchase_order'], 'String');
            }
            if (data.hasOwnProperty('role_assignments')) {
                obj['role_assignments'] = ApiClient.convertToType(data['role_assignments'], ['String']);
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], [Status]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Port</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Port</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Port.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['billing_account'] && !(typeof data['billing_account'] === 'string' || data['billing_account'] instanceof String)) {
            throw new Error("Expected the field `billing_account` to be a primitive type in the JSON string but got " + data['billing_account']);
        }
        // ensure the json data is a string
        if (data['connection'] && !(typeof data['connection'] === 'string' || data['connection'] instanceof String)) {
            throw new Error("Expected the field `connection` to be a primitive type in the JSON string but got " + data['connection']);
        }
        // ensure the json data is a string
        if (data['consuming_account'] && !(typeof data['consuming_account'] === 'string' || data['consuming_account'] instanceof String)) {
            throw new Error("Expected the field `consuming_account` to be a primitive type in the JSON string but got " + data['consuming_account']);
        }
        // ensure the json data is a string
        if (data['contract_ref'] && !(typeof data['contract_ref'] === 'string' || data['contract_ref'] instanceof String)) {
            throw new Error("Expected the field `contract_ref` to be a primitive type in the JSON string but got " + data['contract_ref']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // ensure the json data is a string
        if (data['external_ref'] && !(typeof data['external_ref'] === 'string' || data['external_ref'] instanceof String)) {
            throw new Error("Expected the field `external_ref` to be a primitive type in the JSON string but got " + data['external_ref']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['managing_account'] && !(typeof data['managing_account'] === 'string' || data['managing_account'] instanceof String)) {
            throw new Error("Expected the field `managing_account` to be a primitive type in the JSON string but got " + data['managing_account']);
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pop'] && !(typeof data['pop'] === 'string' || data['pop'] instanceof String)) {
            throw new Error("Expected the field `pop` to be a primitive type in the JSON string but got " + data['pop']);
        }
        // ensure the json data is a string
        if (data['purchase_order'] && !(typeof data['purchase_order'] === 'string' || data['purchase_order'] instanceof String)) {
            throw new Error("Expected the field `purchase_order` to be a primitive type in the JSON string but got " + data['purchase_order']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['role_assignments'])) {
            throw new Error("Expected the field `role_assignments` to be an array in the JSON data but got " + data['role_assignments']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['status']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['status'])) {
                throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
            }
            // validate the optional field `status` (array)
            for (const item of data['status']) {
                Status.validateJSON(item);
            };
        }

        return true;
    }


}

Port.RequiredProperties = ["billing_account", "consuming_account", "device", "id", "managing_account", "media_type", "pop", "role_assignments", "state"];

/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
Port.prototype['billing_account'] = undefined;

/**
 * @member {String} connection
 */
Port.prototype['connection'] = undefined;

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
Port.prototype['consuming_account'] = undefined;

/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
Port.prototype['contract_ref'] = undefined;

/**
 * The device the port. 
 * @member {String} device
 */
Port.prototype['device'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
Port.prototype['external_ref'] = undefined;

/**
 * @member {String} id
 */
Port.prototype['id'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
Port.prototype['managing_account'] = undefined;

/**
 * The media type of the port. Query the device's capabilities for available types. 
 * @member {String} media_type
 */
Port.prototype['media_type'] = undefined;

/**
 * Name of the port (set by the exchange)
 * @member {String} name
 * @default ''
 */
Port.prototype['name'] = '';

/**
 * Same as the `pop` of the `device`. 
 * @member {String} pop
 */
Port.prototype['pop'] = undefined;

/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
Port.prototype['purchase_order'] = '';

/**
 * A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 
 * @member {Array.<String>} role_assignments
 */
Port.prototype['role_assignments'] = undefined;

/**
 * @member {Number} speed
 */
Port.prototype['speed'] = undefined;

/**
 * @member {module:model/Port.StateEnum} state
 */
Port.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/Status>} status
 */
Port.prototype['status'] = undefined;


// Implement PortPartial interface:
/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
PortPartial.prototype['billing_account'] = undefined;
/**
 * @member {String} connection
 */
PortPartial.prototype['connection'] = undefined;
/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
PortPartial.prototype['consuming_account'] = undefined;
/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
PortPartial.prototype['contract_ref'] = undefined;
/**
 * The device the port. 
 * @member {String} device
 */
PortPartial.prototype['device'] = undefined;
/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
PortPartial.prototype['external_ref'] = undefined;
/**
 * @member {String} id
 */
PortPartial.prototype['id'] = undefined;
/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
PortPartial.prototype['managing_account'] = undefined;
/**
 * The media type of the port. Query the device's capabilities for available types. 
 * @member {String} media_type
 */
PortPartial.prototype['media_type'] = undefined;
/**
 * Name of the port (set by the exchange)
 * @member {String} name
 * @default ''
 */
PortPartial.prototype['name'] = '';
/**
 * Same as the `pop` of the `device`. 
 * @member {String} pop
 */
PortPartial.prototype['pop'] = undefined;
/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
PortPartial.prototype['purchase_order'] = '';
/**
 * A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 
 * @member {Array.<String>} role_assignments
 */
PortPartial.prototype['role_assignments'] = undefined;
/**
 * @member {Number} speed
 */
PortPartial.prototype['speed'] = undefined;
/**
 * @member {module:model/PortPartial.StateEnum} state
 */
PortPartial.prototype['state'] = undefined;
/**
 * @member {Array.<module:model/Status>} status
 */
PortPartial.prototype['status'] = undefined;



/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Port['StateEnum'] = {

    /**
     * value: "requested"
     * @const
     */
    "requested": "requested",

    /**
     * value: "allocated"
     * @const
     */
    "allocated": "allocated",

    /**
     * value: "testing"
     * @const
     */
    "testing": "testing",

    /**
     * value: "production"
     * @const
     */
    "production": "production",

    /**
     * value: "production_change_pending"
     * @const
     */
    "production_change_pending": "production_change_pending",

    /**
     * value: "decommission_requested"
     * @const
     */
    "decommission_requested": "decommission_requested",

    /**
     * value: "decommissioned"
     * @const
     */
    "decommissioned": "decommissioned",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "operator"
     * @const
     */
    "operator": "operator",

    /**
     * value: "scheduled"
     * @const
     */
    "scheduled": "scheduled"
};



export default Port;

