/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MP2MPNetworkServicePartial from './MP2MPNetworkServicePartial';
import Status from './Status';

/**
 * The MP2MPNetworkService model module.
 * @module model/MP2MPNetworkService
 * @version 2.1.0
 */
class MP2MPNetworkService {
    /**
     * Constructs a new <code>MP2MPNetworkService</code>.
     * @alias module:model/MP2MPNetworkService
     * @implements module:model/MP2MPNetworkServicePartial
     * @param billingAccount {String} An account requires billing_information to be used as a `billing_account`.
     * @param consumingAccount {String} The `id` of the account consuming a service.  Used to be `owning_customer`. 
     * @param id {String} 
     * @param managingAccount {String} The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
     * @param memberJoiningRules {Array.<String>} 
     * @param name {String} Name of the multi-point to multi-point virtual circuit.
     * @param networkFeatures {Array.<String>} 
     * @param productOffering {String} 
     * @param state {module:model/MP2MPNetworkService.StateEnum} 
     * @param type {String} 
     */
    constructor(billingAccount, consumingAccount, id, managingAccount, memberJoiningRules, name, networkFeatures, productOffering, state, type) { 
        MP2MPNetworkServicePartial.initialize(this, type);
        MP2MPNetworkService.initialize(this, billingAccount, consumingAccount, id, managingAccount, memberJoiningRules, name, networkFeatures, productOffering, state, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, billingAccount, consumingAccount, id, managingAccount, memberJoiningRules, name, networkFeatures, productOffering, state, type) { 
        obj['billing_account'] = billingAccount;
        obj['consuming_account'] = consumingAccount;
        obj['id'] = id;
        obj['managing_account'] = managingAccount;
        obj['member_joining_rules'] = memberJoiningRules;
        obj['name'] = name;
        obj['network_features'] = networkFeatures;
        obj['product_offering'] = productOffering;
        obj['public'] = false;
        obj['purchase_order'] = '';
        obj['state'] = state;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>MP2MPNetworkService</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MP2MPNetworkService} obj Optional instance to populate.
     * @return {module:model/MP2MPNetworkService} The populated <code>MP2MPNetworkService</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MP2MPNetworkService();
            MP2MPNetworkServicePartial.constructFromObject(data, obj);

            if (data.hasOwnProperty('billing_account')) {
                obj['billing_account'] = ApiClient.convertToType(data['billing_account'], 'String');
            }
            if (data.hasOwnProperty('charged_until')) {
                obj['charged_until'] = ApiClient.convertToType(data['charged_until'], 'Date');
            }
            if (data.hasOwnProperty('consuming_account')) {
                obj['consuming_account'] = ApiClient.convertToType(data['consuming_account'], 'String');
            }
            if (data.hasOwnProperty('contract_ref')) {
                obj['contract_ref'] = ApiClient.convertToType(data['contract_ref'], 'String');
            }
            if (data.hasOwnProperty('decommission_at')) {
                obj['decommission_at'] = ApiClient.convertToType(data['decommission_at'], 'Date');
            }
            if (data.hasOwnProperty('external_ref')) {
                obj['external_ref'] = ApiClient.convertToType(data['external_ref'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('managing_account')) {
                obj['managing_account'] = ApiClient.convertToType(data['managing_account'], 'String');
            }
            if (data.hasOwnProperty('member_joining_rules')) {
                obj['member_joining_rules'] = ApiClient.convertToType(data['member_joining_rules'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network_features')) {
                obj['network_features'] = ApiClient.convertToType(data['network_features'], ['String']);
            }
            if (data.hasOwnProperty('nsc_required_contact_roles')) {
                obj['nsc_required_contact_roles'] = ApiClient.convertToType(data['nsc_required_contact_roles'], ['String']);
            }
            if (data.hasOwnProperty('product_offering')) {
                obj['product_offering'] = ApiClient.convertToType(data['product_offering'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('purchase_order')) {
                obj['purchase_order'] = ApiClient.convertToType(data['purchase_order'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], [Status]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MP2MPNetworkService</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MP2MPNetworkService</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MP2MPNetworkService.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['billing_account'] && !(typeof data['billing_account'] === 'string' || data['billing_account'] instanceof String)) {
            throw new Error("Expected the field `billing_account` to be a primitive type in the JSON string but got " + data['billing_account']);
        }
        // ensure the json data is a string
        if (data['consuming_account'] && !(typeof data['consuming_account'] === 'string' || data['consuming_account'] instanceof String)) {
            throw new Error("Expected the field `consuming_account` to be a primitive type in the JSON string but got " + data['consuming_account']);
        }
        // ensure the json data is a string
        if (data['contract_ref'] && !(typeof data['contract_ref'] === 'string' || data['contract_ref'] instanceof String)) {
            throw new Error("Expected the field `contract_ref` to be a primitive type in the JSON string but got " + data['contract_ref']);
        }
        // ensure the json data is a string
        if (data['external_ref'] && !(typeof data['external_ref'] === 'string' || data['external_ref'] instanceof String)) {
            throw new Error("Expected the field `external_ref` to be a primitive type in the JSON string but got " + data['external_ref']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['managing_account'] && !(typeof data['managing_account'] === 'string' || data['managing_account'] instanceof String)) {
            throw new Error("Expected the field `managing_account` to be a primitive type in the JSON string but got " + data['managing_account']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['member_joining_rules'])) {
            throw new Error("Expected the field `member_joining_rules` to be an array in the JSON data but got " + data['member_joining_rules']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['network_features'])) {
            throw new Error("Expected the field `network_features` to be an array in the JSON data but got " + data['network_features']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nsc_required_contact_roles'])) {
            throw new Error("Expected the field `nsc_required_contact_roles` to be an array in the JSON data but got " + data['nsc_required_contact_roles']);
        }
        // ensure the json data is a string
        if (data['product_offering'] && !(typeof data['product_offering'] === 'string' || data['product_offering'] instanceof String)) {
            throw new Error("Expected the field `product_offering` to be a primitive type in the JSON string but got " + data['product_offering']);
        }
        // ensure the json data is a string
        if (data['purchase_order'] && !(typeof data['purchase_order'] === 'string' || data['purchase_order'] instanceof String)) {
            throw new Error("Expected the field `purchase_order` to be a primitive type in the JSON string but got " + data['purchase_order']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['status']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['status'])) {
                throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
            }
            // validate the optional field `status` (array)
            for (const item of data['status']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

MP2MPNetworkService.RequiredProperties = ["billing_account", "consuming_account", "id", "managing_account", "member_joining_rules", "name", "network_features", "product_offering", "state", "type"];

/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
MP2MPNetworkService.prototype['billing_account'] = undefined;

/**
 * Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.
 * @member {Date} charged_until
 */
MP2MPNetworkService.prototype['charged_until'] = undefined;

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
MP2MPNetworkService.prototype['consuming_account'] = undefined;

/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
MP2MPNetworkService.prototype['contract_ref'] = undefined;

/**
 * The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.
 * @member {Date} decommission_at
 */
MP2MPNetworkService.prototype['decommission_at'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
MP2MPNetworkService.prototype['external_ref'] = undefined;

/**
 * @member {String} id
 */
MP2MPNetworkService.prototype['id'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
MP2MPNetworkService.prototype['managing_account'] = undefined;

/**
 * @member {Array.<String>} member_joining_rules
 */
MP2MPNetworkService.prototype['member_joining_rules'] = undefined;

/**
 * Name of the multi-point to multi-point virtual circuit.
 * @member {String} name
 */
MP2MPNetworkService.prototype['name'] = undefined;

/**
 * @member {Array.<String>} network_features
 */
MP2MPNetworkService.prototype['network_features'] = undefined;

/**
 * The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.
 * @member {Array.<String>} nsc_required_contact_roles
 */
MP2MPNetworkService.prototype['nsc_required_contact_roles'] = undefined;

/**
 * @member {String} product_offering
 */
MP2MPNetworkService.prototype['product_offering'] = undefined;

/**
 * A public mp2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.
 * @member {Boolean} public
 * @default false
 */
MP2MPNetworkService.prototype['public'] = false;

/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
MP2MPNetworkService.prototype['purchase_order'] = '';

/**
 * @member {module:model/MP2MPNetworkService.StateEnum} state
 */
MP2MPNetworkService.prototype['state'] = undefined;

/**
 * @member {Array.<module:model/Status>} status
 */
MP2MPNetworkService.prototype['status'] = undefined;

/**
 * @member {String} type
 */
MP2MPNetworkService.prototype['type'] = undefined;


// Implement MP2MPNetworkServicePartial interface:
/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
MP2MPNetworkServicePartial.prototype['billing_account'] = undefined;
/**
 * Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.
 * @member {Date} charged_until
 */
MP2MPNetworkServicePartial.prototype['charged_until'] = undefined;
/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
MP2MPNetworkServicePartial.prototype['consuming_account'] = undefined;
/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
MP2MPNetworkServicePartial.prototype['contract_ref'] = undefined;
/**
 * The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.
 * @member {Date} decommission_at
 */
MP2MPNetworkServicePartial.prototype['decommission_at'] = undefined;
/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
MP2MPNetworkServicePartial.prototype['external_ref'] = undefined;
/**
 * @member {String} id
 */
MP2MPNetworkServicePartial.prototype['id'] = undefined;
/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
MP2MPNetworkServicePartial.prototype['managing_account'] = undefined;
/**
 * @member {Array.<String>} member_joining_rules
 */
MP2MPNetworkServicePartial.prototype['member_joining_rules'] = undefined;
/**
 * Name of the multi-point to multi-point virtual circuit.
 * @member {String} name
 */
MP2MPNetworkServicePartial.prototype['name'] = undefined;
/**
 * @member {Array.<String>} network_features
 */
MP2MPNetworkServicePartial.prototype['network_features'] = undefined;
/**
 * The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.
 * @member {Array.<String>} nsc_required_contact_roles
 */
MP2MPNetworkServicePartial.prototype['nsc_required_contact_roles'] = undefined;
/**
 * @member {String} product_offering
 */
MP2MPNetworkServicePartial.prototype['product_offering'] = undefined;
/**
 * A public mp2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.
 * @member {Boolean} public
 * @default false
 */
MP2MPNetworkServicePartial.prototype['public'] = false;
/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
MP2MPNetworkServicePartial.prototype['purchase_order'] = '';
/**
 * @member {module:model/MP2MPNetworkServicePartial.StateEnum} state
 */
MP2MPNetworkServicePartial.prototype['state'] = undefined;
/**
 * @member {Array.<module:model/Status>} status
 */
MP2MPNetworkServicePartial.prototype['status'] = undefined;
/**
 * @member {String} type
 */
MP2MPNetworkServicePartial.prototype['type'] = undefined;



/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
MP2MPNetworkService['StateEnum'] = {

    /**
     * value: "requested"
     * @const
     */
    "requested": "requested",

    /**
     * value: "allocated"
     * @const
     */
    "allocated": "allocated",

    /**
     * value: "testing"
     * @const
     */
    "testing": "testing",

    /**
     * value: "production"
     * @const
     */
    "production": "production",

    /**
     * value: "production_change_pending"
     * @const
     */
    "production_change_pending": "production_change_pending",

    /**
     * value: "decommission_requested"
     * @const
     */
    "decommission_requested": "decommission_requested",

    /**
     * value: "decommissioned"
     * @const
     */
    "decommissioned": "decommissioned",

    /**
     * value: "archived"
     * @const
     */
    "archived": "archived",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "operator"
     * @const
     */
    "operator": "operator",

    /**
     * value: "scheduled"
     * @const
     */
    "scheduled": "scheduled"
};



export default MP2MPNetworkService;

