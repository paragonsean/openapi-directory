/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RouteServerNetworkFeatureConfigRequestPartial from './RouteServerNetworkFeatureConfigRequestPartial';

/**
 * The NetworkFeatureConfigRequestPartial model module.
 * @module model/NetworkFeatureConfigRequestPartial
 * @version 2.1.0
 */
class NetworkFeatureConfigRequestPartial {
    /**
     * Constructs a new <code>NetworkFeatureConfigRequestPartial</code>.
     * Polymorphic Network Feature Config Request
     * @alias module:model/NetworkFeatureConfigRequestPartial
     * @param {(module:model/RouteServerNetworkFeatureConfigRequestPartial)} instance The actual instance to initialize NetworkFeatureConfigRequestPartial.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RouteServerNetworkFeatureConfigRequestPartial") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RouteServerNetworkFeatureConfigRequestPartial.validateJSON(instance); // throw an exception if no match
                // create RouteServerNetworkFeatureConfigRequestPartial from JS object
                this.actualInstance = RouteServerNetworkFeatureConfigRequestPartial.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RouteServerNetworkFeatureConfigRequestPartial
            errorMessages.push("Failed to construct RouteServerNetworkFeatureConfigRequestPartial: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `NetworkFeatureConfigRequestPartial` with oneOf schemas RouteServerNetworkFeatureConfigRequestPartial. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `NetworkFeatureConfigRequestPartial` with oneOf schemas RouteServerNetworkFeatureConfigRequestPartial. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>NetworkFeatureConfigRequestPartial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkFeatureConfigRequestPartial} obj Optional instance to populate.
     * @return {module:model/NetworkFeatureConfigRequestPartial} The populated <code>NetworkFeatureConfigRequestPartial</code> instance.
     */
    static constructFromObject(data, obj) {
        return new NetworkFeatureConfigRequestPartial(data);
    }

    /**
     * Gets the actual instance, which can be <code>RouteServerNetworkFeatureConfigRequestPartial</code>.
     * @return {(module:model/RouteServerNetworkFeatureConfigRequestPartial)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>RouteServerNetworkFeatureConfigRequestPartial</code>.
     * @param {(module:model/RouteServerNetworkFeatureConfigRequestPartial)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = NetworkFeatureConfigRequestPartial.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of NetworkFeatureConfigRequestPartial from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/NetworkFeatureConfigRequestPartial} An instance of NetworkFeatureConfigRequestPartial.
     */
    static fromJSON = function(json_string){
        return NetworkFeatureConfigRequestPartial.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * AS-SET of the customer for IPv4 prefix filtering. This is used to generate filters on the router servers.  Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet` address family. If multiple address families are supported, it is optional if the `as_set_v6` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
 * @member {String} as_set_v4
 */
NetworkFeatureConfigRequestPartial.prototype['as_set_v4'] = undefined;

/**
 * AS-SET of the customer for IPv6. This is used to generate filters on the router servers. Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet6` address family. If multiple address families are supported, it is optional if the `as_set_v4` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
 * @member {String} as_set_v6
 */
NetworkFeatureConfigRequestPartial.prototype['as_set_v6'] = undefined;

/**
 * The ASN of the peer. 
 * @member {Number} asn
 */
NetworkFeatureConfigRequestPartial.prototype['asn'] = undefined;

/**
 * The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 
 * @member {module:model/NetworkFeatureConfigRequestPartial.BgpSessionTypeEnum} bgp_session_type
 */
NetworkFeatureConfigRequestPartial.prototype['bgp_session_type'] = undefined;

/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
NetworkFeatureConfigRequestPartial.prototype['billing_account'] = undefined;

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
NetworkFeatureConfigRequestPartial.prototype['consuming_account'] = undefined;

/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
NetworkFeatureConfigRequestPartial.prototype['contract_ref'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
NetworkFeatureConfigRequestPartial.prototype['external_ref'] = undefined;

/**
 * Insert the ASN of the exchange into the AS path. This function is only used in special cases. In 99% of all cases, it should be false. 
 * @member {Boolean} insert_ixp_asn
 * @default true
 */
NetworkFeatureConfigRequestPartial.prototype['insert_ixp_asn'] = true;

/**
 * The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.
 * @member {String} ip
 */
NetworkFeatureConfigRequestPartial.prototype['ip'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
NetworkFeatureConfigRequestPartial.prototype['managing_account'] = undefined;

/**
 * Announcing more than `max_prefix` IPv4 prefixes the bgp session will be droped. 
 * @member {Number} max_prefix_v4
 */
NetworkFeatureConfigRequestPartial.prototype['max_prefix_v4'] = undefined;

/**
 * Announcing more than `max_prefix` IPv6 prefixes the bgp session will be droped. 
 * @member {Number} max_prefix_v6
 */
NetworkFeatureConfigRequestPartial.prototype['max_prefix_v6'] = undefined;

/**
 * @member {String} network_feature
 */
NetworkFeatureConfigRequestPartial.prototype['network_feature'] = undefined;

/**
 * @member {String} network_service_config
 */
NetworkFeatureConfigRequestPartial.prototype['network_service_config'] = undefined;

/**
 * The cleartext BGP session password
 * @member {String} password
 * @default ''
 */
NetworkFeatureConfigRequestPartial.prototype['password'] = '';

/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
NetworkFeatureConfigRequestPartial.prototype['purchase_order'] = '';

/**
 * A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 
 * @member {Array.<String>} role_assignments
 */
NetworkFeatureConfigRequestPartial.prototype['role_assignments'] = undefined;

/**
 * Set the session mode with the routeserver. 
 * @member {module:model/NetworkFeatureConfigRequestPartial.SessionModeEnum} session_mode
 */
NetworkFeatureConfigRequestPartial.prototype['session_mode'] = undefined;

/**
 * @member {String} type
 */
NetworkFeatureConfigRequestPartial.prototype['type'] = undefined;


NetworkFeatureConfigRequestPartial.OneOf = ["RouteServerNetworkFeatureConfigRequestPartial"];

export default NetworkFeatureConfigRequestPartial;

