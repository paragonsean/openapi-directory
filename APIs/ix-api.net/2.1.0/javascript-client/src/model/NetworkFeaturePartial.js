/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IXPSpecificFeatureFlag from './IXPSpecificFeatureFlag';
import RouteServerNetworkFeaturePartial from './RouteServerNetworkFeaturePartial';

/**
 * The NetworkFeaturePartial model module.
 * @module model/NetworkFeaturePartial
 * @version 2.1.0
 */
class NetworkFeaturePartial {
    /**
     * Constructs a new <code>NetworkFeaturePartial</code>.
     * Polymorphic Network Feature
     * @alias module:model/NetworkFeaturePartial
     * @param {(module:model/RouteServerNetworkFeaturePartial)} instance The actual instance to initialize NetworkFeaturePartial.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RouteServerNetworkFeaturePartial") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RouteServerNetworkFeaturePartial.validateJSON(instance); // throw an exception if no match
                // create RouteServerNetworkFeaturePartial from JS object
                this.actualInstance = RouteServerNetworkFeaturePartial.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RouteServerNetworkFeaturePartial
            errorMessages.push("Failed to construct RouteServerNetworkFeaturePartial: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `NetworkFeaturePartial` with oneOf schemas RouteServerNetworkFeaturePartial. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `NetworkFeaturePartial` with oneOf schemas RouteServerNetworkFeaturePartial. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>NetworkFeaturePartial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkFeaturePartial} obj Optional instance to populate.
     * @return {module:model/NetworkFeaturePartial} The populated <code>NetworkFeaturePartial</code> instance.
     */
    static constructFromObject(data, obj) {
        return new NetworkFeaturePartial(data);
    }

    /**
     * Gets the actual instance, which can be <code>RouteServerNetworkFeaturePartial</code>.
     * @return {(module:model/RouteServerNetworkFeaturePartial)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>RouteServerNetworkFeaturePartial</code>.
     * @param {(module:model/RouteServerNetworkFeaturePartial)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = NetworkFeaturePartial.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of NetworkFeaturePartial from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/NetworkFeaturePartial} An instance of NetworkFeaturePartial.
     */
    static fromJSON = function(json_string){
        return NetworkFeaturePartial.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * When creating a route server feature config, remember to specify which address family or families to use:  If the route server network feature only supports `af_inet`, then the `as_set_v4` in the network feature config is required.  If only `af_inet6` is supported, then the `as_set_v6` is required.  If both `af_inet` and `af_inet6` are supported, either `as_set_v4` or `as_set_v6` is required, but both can be provided in the network service config. 
 * @member {Array.<module:model/NetworkFeaturePartial.AddressFamiliesEnum>} address_families
 */
NetworkFeaturePartial.prototype['address_families'] = undefined;

/**
 * @member {Number} asn
 */
NetworkFeaturePartial.prototype['asn'] = undefined;

/**
 * The route server provides the following session modes. 
 * @member {Array.<module:model/NetworkFeaturePartial.AvailableBgpSessionTypesEnum>} available_bgp_session_types
 */
NetworkFeaturePartial.prototype['available_bgp_session_types'] = undefined;

/**
 * A list of IXP specific feature flags. This can be used to see if e.g. RPKI hard filtering is available.
 * @member {Array.<module:model/IXPSpecificFeatureFlag>} flags
 */
NetworkFeaturePartial.prototype['flags'] = undefined;

/**
 * The FQDN of the route server. 
 * @member {String} fqdn
 */
NetworkFeaturePartial.prototype['fqdn'] = undefined;

/**
 * @member {String} id
 */
NetworkFeaturePartial.prototype['id'] = undefined;

/**
 * IPv4 address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) notation. 
 * @member {String} ip_v4
 */
NetworkFeaturePartial.prototype['ip_v4'] = undefined;

/**
 * IPv6 address in hexadecimal colon separated notation. 
 * @member {String} ip_v6
 */
NetworkFeaturePartial.prototype['ip_v6'] = undefined;

/**
 * The url of the looking glass. 
 * @member {String} looking_glass_url
 */
NetworkFeaturePartial.prototype['looking_glass_url'] = undefined;

/**
 * @member {String} name
 */
NetworkFeaturePartial.prototype['name'] = undefined;

/**
 * @member {String} network_service
 */
NetworkFeaturePartial.prototype['network_service'] = undefined;

/**
 * The configuration will require at least one of each of the specified roles assigned to contacts.  The role assignments is associated with the network feature config through the `role_assignments` list property.
 * @member {Array.<String>} nfc_required_contact_roles
 */
NetworkFeaturePartial.prototype['nfc_required_contact_roles'] = undefined;

/**
 * @member {Boolean} required
 */
NetworkFeaturePartial.prototype['required'] = undefined;

/**
 * When creating a route server feature config, remember to specify the same session_mode as the route server. 
 * @member {module:model/NetworkFeaturePartial.SessionModeEnum} session_mode
 */
NetworkFeaturePartial.prototype['session_mode'] = undefined;

/**
 * @member {String} type
 */
NetworkFeaturePartial.prototype['type'] = undefined;


NetworkFeaturePartial.OneOf = ["RouteServerNetworkFeaturePartial"];

export default NetworkFeaturePartial;

