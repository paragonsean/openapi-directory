/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StatusPartial from './StatusPartial';

/**
 * The Status model module.
 * @module model/Status
 * @version 2.1.0
 */
class Status {
    /**
     * Constructs a new <code>Status</code>.
     * @alias module:model/Status
     * @implements module:model/StatusPartial
     * @param attrs {Object} 
     * @param message {String} 
     * @param severity {Number} We are using syslog severity levels: 0 = Emergency, 1 = Alert, 2 = Critical, 3 = Error, 4 = Warning, 5 = Notice, 6 = Informational, 7 = Debug. 
     * @param tag {String} 
     * @param timestamp {Date} 
     */
    constructor(attrs, message, severity, tag, timestamp) { 
        StatusPartial.initialize(this);
        Status.initialize(this, attrs, message, severity, tag, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attrs, message, severity, tag, timestamp) { 
        obj['attrs'] = attrs;
        obj['message'] = message;
        obj['severity'] = severity;
        obj['tag'] = tag;
        obj['timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>Status</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Status} obj Optional instance to populate.
     * @return {module:model/Status} The populated <code>Status</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Status();
            StatusPartial.constructFromObject(data, obj);

            if (data.hasOwnProperty('attrs')) {
                obj['attrs'] = ApiClient.convertToType(data['attrs'], Object);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'Number');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Status</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Status</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Status.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}

Status.RequiredProperties = ["attrs", "message", "severity", "tag", "timestamp"];

/**
 * @member {Object} attrs
 */
Status.prototype['attrs'] = undefined;

/**
 * @member {String} message
 */
Status.prototype['message'] = undefined;

/**
 * We are using syslog severity levels: 0 = Emergency, 1 = Alert, 2 = Critical, 3 = Error, 4 = Warning, 5 = Notice, 6 = Informational, 7 = Debug. 
 * @member {Number} severity
 */
Status.prototype['severity'] = undefined;

/**
 * @member {String} tag
 */
Status.prototype['tag'] = undefined;

/**
 * @member {Date} timestamp
 */
Status.prototype['timestamp'] = undefined;


// Implement StatusPartial interface:
/**
 * @member {Object} attrs
 */
StatusPartial.prototype['attrs'] = undefined;
/**
 * @member {String} message
 */
StatusPartial.prototype['message'] = undefined;
/**
 * We are using syslog severity levels: 0 = Emergency, 1 = Alert, 2 = Critical, 3 = Error, 4 = Warning, 5 = Notice, 6 = Informational, 7 = Debug. 
 * @member {Number} severity
 */
StatusPartial.prototype['severity'] = undefined;
/**
 * @member {String} tag
 */
StatusPartial.prototype['tag'] = undefined;
/**
 * @member {Date} timestamp
 */
StatusPartial.prototype['timestamp'] = undefined;




export default Status;

