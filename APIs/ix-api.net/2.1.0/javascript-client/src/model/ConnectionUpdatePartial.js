/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectionUpdatePartial model module.
 * @module model/ConnectionUpdatePartial
 * @version 2.1.0
 */
class ConnectionUpdatePartial {
    /**
     * Constructs a new <code>ConnectionUpdatePartial</code>.
     * Connection Update
     * @alias module:model/ConnectionUpdatePartial
     */
    constructor() { 
        
        ConnectionUpdatePartial.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['purchase_order'] = '';
    }

    /**
     * Constructs a <code>ConnectionUpdatePartial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionUpdatePartial} obj Optional instance to populate.
     * @return {module:model/ConnectionUpdatePartial} The populated <code>ConnectionUpdatePartial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionUpdatePartial();

            if (data.hasOwnProperty('billing_account')) {
                obj['billing_account'] = ApiClient.convertToType(data['billing_account'], 'String');
            }
            if (data.hasOwnProperty('consuming_account')) {
                obj['consuming_account'] = ApiClient.convertToType(data['consuming_account'], 'String');
            }
            if (data.hasOwnProperty('contract_ref')) {
                obj['contract_ref'] = ApiClient.convertToType(data['contract_ref'], 'String');
            }
            if (data.hasOwnProperty('external_ref')) {
                obj['external_ref'] = ApiClient.convertToType(data['external_ref'], 'String');
            }
            if (data.hasOwnProperty('lacp_timeout')) {
                obj['lacp_timeout'] = ApiClient.convertToType(data['lacp_timeout'], 'String');
            }
            if (data.hasOwnProperty('managing_account')) {
                obj['managing_account'] = ApiClient.convertToType(data['managing_account'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('purchase_order')) {
                obj['purchase_order'] = ApiClient.convertToType(data['purchase_order'], 'String');
            }
            if (data.hasOwnProperty('role_assignments')) {
                obj['role_assignments'] = ApiClient.convertToType(data['role_assignments'], ['String']);
            }
            if (data.hasOwnProperty('speed')) {
                obj['speed'] = ApiClient.convertToType(data['speed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionUpdatePartial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionUpdatePartial</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billing_account'] && !(typeof data['billing_account'] === 'string' || data['billing_account'] instanceof String)) {
            throw new Error("Expected the field `billing_account` to be a primitive type in the JSON string but got " + data['billing_account']);
        }
        // ensure the json data is a string
        if (data['consuming_account'] && !(typeof data['consuming_account'] === 'string' || data['consuming_account'] instanceof String)) {
            throw new Error("Expected the field `consuming_account` to be a primitive type in the JSON string but got " + data['consuming_account']);
        }
        // ensure the json data is a string
        if (data['contract_ref'] && !(typeof data['contract_ref'] === 'string' || data['contract_ref'] instanceof String)) {
            throw new Error("Expected the field `contract_ref` to be a primitive type in the JSON string but got " + data['contract_ref']);
        }
        // ensure the json data is a string
        if (data['external_ref'] && !(typeof data['external_ref'] === 'string' || data['external_ref'] instanceof String)) {
            throw new Error("Expected the field `external_ref` to be a primitive type in the JSON string but got " + data['external_ref']);
        }
        // ensure the json data is a string
        if (data['lacp_timeout'] && !(typeof data['lacp_timeout'] === 'string' || data['lacp_timeout'] instanceof String)) {
            throw new Error("Expected the field `lacp_timeout` to be a primitive type in the JSON string but got " + data['lacp_timeout']);
        }
        // ensure the json data is a string
        if (data['managing_account'] && !(typeof data['managing_account'] === 'string' || data['managing_account'] instanceof String)) {
            throw new Error("Expected the field `managing_account` to be a primitive type in the JSON string but got " + data['managing_account']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['purchase_order'] && !(typeof data['purchase_order'] === 'string' || data['purchase_order'] instanceof String)) {
            throw new Error("Expected the field `purchase_order` to be a primitive type in the JSON string but got " + data['purchase_order']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['role_assignments'])) {
            throw new Error("Expected the field `role_assignments` to be an array in the JSON data but got " + data['role_assignments']);
        }

        return true;
    }


}



/**
 * An account requires billing_information to be used as a `billing_account`.
 * @member {String} billing_account
 */
ConnectionUpdatePartial.prototype['billing_account'] = undefined;

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
ConnectionUpdatePartial.prototype['consuming_account'] = undefined;

/**
 * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
 * @member {String} contract_ref
 */
ConnectionUpdatePartial.prototype['contract_ref'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
ConnectionUpdatePartial.prototype['external_ref'] = undefined;

/**
 * This sets the LACP Timeout mode. Both ends of the connections need to be configured the same. 
 * @member {module:model/ConnectionUpdatePartial.LacpTimeoutEnum} lacp_timeout
 */
ConnectionUpdatePartial.prototype['lacp_timeout'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
ConnectionUpdatePartial.prototype['managing_account'] = undefined;

/**
 * Sets the mode of the connection. The mode can be:  - `lag_lacp`: connection is build as a LAG with LACP enabled - `lag_static`: connection is build as LAG with static configuration - `flex_ethernet`: connect is build as a FlexEthernet channel - `standalone`: only one port is allowed in this connection without any bundling. 
 * @member {module:model/ConnectionUpdatePartial.ModeEnum} mode
 */
ConnectionUpdatePartial.prototype['mode'] = undefined;

/**
 * Purchase Order ID which will be displayed on the invoice. 
 * @member {String} purchase_order
 * @default ''
 */
ConnectionUpdatePartial.prototype['purchase_order'] = '';

/**
 * A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 
 * @member {Array.<String>} role_assignments
 */
ConnectionUpdatePartial.prototype['role_assignments'] = undefined;

/**
 * Shows the total bandwidth of the connection in Mbit/s. 
 * @member {Number} speed
 */
ConnectionUpdatePartial.prototype['speed'] = undefined;





/**
 * Allowed values for the <code>lacp_timeout</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionUpdatePartial['LacpTimeoutEnum'] = {

    /**
     * value: "slow"
     * @const
     */
    "slow": "slow",

    /**
     * value: "fast"
     * @const
     */
    "fast": "fast"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
ConnectionUpdatePartial['ModeEnum'] = {

    /**
     * value: "lag_lacp"
     * @const
     */
    "lag_lacp": "lag_lacp",

    /**
     * value: "lag_static"
     * @const
     */
    "lag_static": "lag_static",

    /**
     * value: "flex_ethernet"
     * @const
     */
    "flex_ethernet": "flex_ethernet",

    /**
     * value: "standalone"
     * @const
     */
    "standalone": "standalone"
};



export default ConnectionUpdatePartial;

