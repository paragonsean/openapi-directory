/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RouteServerNetworkFeatureConfigUpdatePartial from './RouteServerNetworkFeatureConfigUpdatePartial';

/**
 * The RouteServerNetworkFeatureConfigUpdate model module.
 * @module model/RouteServerNetworkFeatureConfigUpdate
 * @version 2.1.0
 */
class RouteServerNetworkFeatureConfigUpdate {
    /**
     * Constructs a new <code>RouteServerNetworkFeatureConfigUpdate</code>.
     * @alias module:model/RouteServerNetworkFeatureConfigUpdate
     * @implements module:model/RouteServerNetworkFeatureConfigUpdatePartial
     * @param asn {Number} The ASN of the peer. 
     * @param bgpSessionType {module:model/RouteServerNetworkFeatureConfigUpdate.BgpSessionTypeEnum} The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 
     * @param consumingAccount {String} The `id` of the account consuming a service.  Used to be `owning_customer`. 
     * @param ip {String} The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.
     * @param managingAccount {String} The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
     * @param sessionMode {module:model/RouteServerNetworkFeatureConfigUpdate.SessionModeEnum} Set the session mode with the routeserver. 
     * @param type {String} 
     */
    constructor(asn, bgpSessionType, consumingAccount, ip, managingAccount, sessionMode, type) { 
        RouteServerNetworkFeatureConfigUpdatePartial.initialize(this, type);
        RouteServerNetworkFeatureConfigUpdate.initialize(this, asn, bgpSessionType, consumingAccount, ip, managingAccount, sessionMode, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, asn, bgpSessionType, consumingAccount, ip, managingAccount, sessionMode, type) { 
        obj['asn'] = asn;
        obj['bgp_session_type'] = bgpSessionType;
        obj['consuming_account'] = consumingAccount;
        obj['insert_ixp_asn'] = true;
        obj['ip'] = ip;
        obj['managing_account'] = managingAccount;
        obj['password'] = '';
        obj['session_mode'] = sessionMode;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RouteServerNetworkFeatureConfigUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RouteServerNetworkFeatureConfigUpdate} obj Optional instance to populate.
     * @return {module:model/RouteServerNetworkFeatureConfigUpdate} The populated <code>RouteServerNetworkFeatureConfigUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RouteServerNetworkFeatureConfigUpdate();
            RouteServerNetworkFeatureConfigUpdatePartial.constructFromObject(data, obj);

            if (data.hasOwnProperty('as_set_v4')) {
                obj['as_set_v4'] = ApiClient.convertToType(data['as_set_v4'], 'String');
            }
            if (data.hasOwnProperty('as_set_v6')) {
                obj['as_set_v6'] = ApiClient.convertToType(data['as_set_v6'], 'String');
            }
            if (data.hasOwnProperty('asn')) {
                obj['asn'] = ApiClient.convertToType(data['asn'], 'Number');
            }
            if (data.hasOwnProperty('bgp_session_type')) {
                obj['bgp_session_type'] = ApiClient.convertToType(data['bgp_session_type'], 'String');
            }
            if (data.hasOwnProperty('consuming_account')) {
                obj['consuming_account'] = ApiClient.convertToType(data['consuming_account'], 'String');
            }
            if (data.hasOwnProperty('external_ref')) {
                obj['external_ref'] = ApiClient.convertToType(data['external_ref'], 'String');
            }
            if (data.hasOwnProperty('insert_ixp_asn')) {
                obj['insert_ixp_asn'] = ApiClient.convertToType(data['insert_ixp_asn'], 'Boolean');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('managing_account')) {
                obj['managing_account'] = ApiClient.convertToType(data['managing_account'], 'String');
            }
            if (data.hasOwnProperty('max_prefix_v4')) {
                obj['max_prefix_v4'] = ApiClient.convertToType(data['max_prefix_v4'], 'Number');
            }
            if (data.hasOwnProperty('max_prefix_v6')) {
                obj['max_prefix_v6'] = ApiClient.convertToType(data['max_prefix_v6'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('session_mode')) {
                obj['session_mode'] = ApiClient.convertToType(data['session_mode'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RouteServerNetworkFeatureConfigUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RouteServerNetworkFeatureConfigUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RouteServerNetworkFeatureConfigUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['as_set_v4'] && !(typeof data['as_set_v4'] === 'string' || data['as_set_v4'] instanceof String)) {
            throw new Error("Expected the field `as_set_v4` to be a primitive type in the JSON string but got " + data['as_set_v4']);
        }
        // ensure the json data is a string
        if (data['as_set_v6'] && !(typeof data['as_set_v6'] === 'string' || data['as_set_v6'] instanceof String)) {
            throw new Error("Expected the field `as_set_v6` to be a primitive type in the JSON string but got " + data['as_set_v6']);
        }
        // ensure the json data is a string
        if (data['bgp_session_type'] && !(typeof data['bgp_session_type'] === 'string' || data['bgp_session_type'] instanceof String)) {
            throw new Error("Expected the field `bgp_session_type` to be a primitive type in the JSON string but got " + data['bgp_session_type']);
        }
        // ensure the json data is a string
        if (data['consuming_account'] && !(typeof data['consuming_account'] === 'string' || data['consuming_account'] instanceof String)) {
            throw new Error("Expected the field `consuming_account` to be a primitive type in the JSON string but got " + data['consuming_account']);
        }
        // ensure the json data is a string
        if (data['external_ref'] && !(typeof data['external_ref'] === 'string' || data['external_ref'] instanceof String)) {
            throw new Error("Expected the field `external_ref` to be a primitive type in the JSON string but got " + data['external_ref']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['managing_account'] && !(typeof data['managing_account'] === 'string' || data['managing_account'] instanceof String)) {
            throw new Error("Expected the field `managing_account` to be a primitive type in the JSON string but got " + data['managing_account']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['session_mode'] && !(typeof data['session_mode'] === 'string' || data['session_mode'] instanceof String)) {
            throw new Error("Expected the field `session_mode` to be a primitive type in the JSON string but got " + data['session_mode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RouteServerNetworkFeatureConfigUpdate.RequiredProperties = ["asn", "bgp_session_type", "consuming_account", "ip", "managing_account", "session_mode", "type"];

/**
 * AS-SET of the customer for IPv4 prefix filtering. This is used to generate filters on the router servers.  Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet` address family. If multiple address families are supported, it is optional if the `as_set_v6` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
 * @member {String} as_set_v4
 */
RouteServerNetworkFeatureConfigUpdate.prototype['as_set_v4'] = undefined;

/**
 * AS-SET of the customer for IPv6. This is used to generate filters on the router servers. Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet6` address family. If multiple address families are supported, it is optional if the `as_set_v4` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
 * @member {String} as_set_v6
 */
RouteServerNetworkFeatureConfigUpdate.prototype['as_set_v6'] = undefined;

/**
 * The ASN of the peer. 
 * @member {Number} asn
 */
RouteServerNetworkFeatureConfigUpdate.prototype['asn'] = undefined;

/**
 * The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 
 * @member {module:model/RouteServerNetworkFeatureConfigUpdate.BgpSessionTypeEnum} bgp_session_type
 */
RouteServerNetworkFeatureConfigUpdate.prototype['bgp_session_type'] = undefined;

/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
RouteServerNetworkFeatureConfigUpdate.prototype['consuming_account'] = undefined;

/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
RouteServerNetworkFeatureConfigUpdate.prototype['external_ref'] = undefined;

/**
 * Insert the ASN of the exchange into the AS path. This function is only used in special cases. In 99% of all cases, it should be false. 
 * @member {Boolean} insert_ixp_asn
 * @default true
 */
RouteServerNetworkFeatureConfigUpdate.prototype['insert_ixp_asn'] = true;

/**
 * The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.
 * @member {String} ip
 */
RouteServerNetworkFeatureConfigUpdate.prototype['ip'] = undefined;

/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
RouteServerNetworkFeatureConfigUpdate.prototype['managing_account'] = undefined;

/**
 * Announcing more than `max_prefix` IPv4 prefixes the bgp session will be droped. 
 * @member {Number} max_prefix_v4
 */
RouteServerNetworkFeatureConfigUpdate.prototype['max_prefix_v4'] = undefined;

/**
 * Announcing more than `max_prefix` IPv6 prefixes the bgp session will be droped. 
 * @member {Number} max_prefix_v6
 */
RouteServerNetworkFeatureConfigUpdate.prototype['max_prefix_v6'] = undefined;

/**
 * The cleartext BGP session password
 * @member {String} password
 * @default ''
 */
RouteServerNetworkFeatureConfigUpdate.prototype['password'] = '';

/**
 * Set the session mode with the routeserver. 
 * @member {module:model/RouteServerNetworkFeatureConfigUpdate.SessionModeEnum} session_mode
 */
RouteServerNetworkFeatureConfigUpdate.prototype['session_mode'] = undefined;

/**
 * @member {String} type
 */
RouteServerNetworkFeatureConfigUpdate.prototype['type'] = undefined;


// Implement RouteServerNetworkFeatureConfigUpdatePartial interface:
/**
 * AS-SET of the customer for IPv4 prefix filtering. This is used to generate filters on the router servers.  Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet` address family. If multiple address families are supported, it is optional if the `as_set_v6` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
 * @member {String} as_set_v4
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['as_set_v4'] = undefined;
/**
 * AS-SET of the customer for IPv6. This is used to generate filters on the router servers. Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet6` address family. If multiple address families are supported, it is optional if the `as_set_v4` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
 * @member {String} as_set_v6
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['as_set_v6'] = undefined;
/**
 * The ASN of the peer. 
 * @member {Number} asn
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['asn'] = undefined;
/**
 * The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 
 * @member {module:model/RouteServerNetworkFeatureConfigUpdatePartial.BgpSessionTypeEnum} bgp_session_type
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['bgp_session_type'] = undefined;
/**
 * The `id` of the account consuming a service.  Used to be `owning_customer`. 
 * @member {String} consuming_account
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['consuming_account'] = undefined;
/**
 * Reference field, free to use for the API user.
 * @member {String} external_ref
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['external_ref'] = undefined;
/**
 * Insert the ASN of the exchange into the AS path. This function is only used in special cases. In 99% of all cases, it should be false. 
 * @member {Boolean} insert_ixp_asn
 * @default true
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['insert_ixp_asn'] = true;
/**
 * The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.
 * @member {String} ip
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['ip'] = undefined;
/**
 * The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
 * @member {String} managing_account
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['managing_account'] = undefined;
/**
 * Announcing more than `max_prefix` IPv4 prefixes the bgp session will be droped. 
 * @member {Number} max_prefix_v4
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['max_prefix_v4'] = undefined;
/**
 * Announcing more than `max_prefix` IPv6 prefixes the bgp session will be droped. 
 * @member {Number} max_prefix_v6
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['max_prefix_v6'] = undefined;
/**
 * The cleartext BGP session password
 * @member {String} password
 * @default ''
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['password'] = '';
/**
 * Set the session mode with the routeserver. 
 * @member {module:model/RouteServerNetworkFeatureConfigUpdatePartial.SessionModeEnum} session_mode
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['session_mode'] = undefined;
/**
 * @member {String} type
 */
RouteServerNetworkFeatureConfigUpdatePartial.prototype['type'] = undefined;



/**
 * Allowed values for the <code>bgp_session_type</code> property.
 * @enum {String}
 * @readonly
 */
RouteServerNetworkFeatureConfigUpdate['BgpSessionTypeEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "passive"
     * @const
     */
    "passive": "passive"
};


/**
 * Allowed values for the <code>session_mode</code> property.
 * @enum {String}
 * @readonly
 */
RouteServerNetworkFeatureConfigUpdate['SessionModeEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "collector"
     * @const
     */
    "collector": "collector"
};



export default RouteServerNetworkFeatureConfigUpdate;

