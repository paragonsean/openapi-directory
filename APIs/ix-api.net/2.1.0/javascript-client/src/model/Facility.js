/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacilityPartial from './FacilityPartial';

/**
 * The Facility model module.
 * @module model/Facility
 * @version 2.1.0
 */
class Facility {
    /**
     * Constructs a new <code>Facility</code>.
     * @alias module:model/Facility
     * @implements module:model/FacilityPartial
     * @param addressCountry {String} ISO 3166-1 alpha-2 country code, for example DE 
     * @param addressLocality {String} The locality/city. For example, Mountain View.
     * @param addressRegion {String} The region. For example, CA
     * @param id {String} 
     * @param metroArea {String} Id of the `MetroArea` the DC is located in. 
     * @param name {String} Name of the Datacenter as called by the operator 
     * @param organisationName {String} Name of Datacenter operator 
     * @param pops {Array.<String>} List of pops in the `Facility`.
     * @param postalCode {String} A postal code. For example, 9404
     * @param streetAddress {String} The street address. For example, 1600 Amphitheatre Pkwy.
     */
    constructor(addressCountry, addressLocality, addressRegion, id, metroArea, name, organisationName, pops, postalCode, streetAddress) { 
        FacilityPartial.initialize(this);
        Facility.initialize(this, addressCountry, addressLocality, addressRegion, id, metroArea, name, organisationName, pops, postalCode, streetAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressCountry, addressLocality, addressRegion, id, metroArea, name, organisationName, pops, postalCode, streetAddress) { 
        obj['address_country'] = addressCountry;
        obj['address_locality'] = addressLocality;
        obj['address_region'] = addressRegion;
        obj['id'] = id;
        obj['metro_area'] = metroArea;
        obj['name'] = name;
        obj['organisation_name'] = organisationName;
        obj['pops'] = pops;
        obj['postal_code'] = postalCode;
        obj['street_address'] = streetAddress;
    }

    /**
     * Constructs a <code>Facility</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Facility} obj Optional instance to populate.
     * @return {module:model/Facility} The populated <code>Facility</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Facility();
            FacilityPartial.constructFromObject(data, obj);

            if (data.hasOwnProperty('address_country')) {
                obj['address_country'] = ApiClient.convertToType(data['address_country'], 'String');
            }
            if (data.hasOwnProperty('address_locality')) {
                obj['address_locality'] = ApiClient.convertToType(data['address_locality'], 'String');
            }
            if (data.hasOwnProperty('address_region')) {
                obj['address_region'] = ApiClient.convertToType(data['address_region'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metro_area')) {
                obj['metro_area'] = ApiClient.convertToType(data['metro_area'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('organisation_name')) {
                obj['organisation_name'] = ApiClient.convertToType(data['organisation_name'], 'String');
            }
            if (data.hasOwnProperty('peeringdb_facility_id')) {
                obj['peeringdb_facility_id'] = ApiClient.convertToType(data['peeringdb_facility_id'], 'Number');
            }
            if (data.hasOwnProperty('pops')) {
                obj['pops'] = ApiClient.convertToType(data['pops'], ['String']);
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('street_address')) {
                obj['street_address'] = ApiClient.convertToType(data['street_address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Facility</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Facility</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Facility.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['address_country'] && !(typeof data['address_country'] === 'string' || data['address_country'] instanceof String)) {
            throw new Error("Expected the field `address_country` to be a primitive type in the JSON string but got " + data['address_country']);
        }
        // ensure the json data is a string
        if (data['address_locality'] && !(typeof data['address_locality'] === 'string' || data['address_locality'] instanceof String)) {
            throw new Error("Expected the field `address_locality` to be a primitive type in the JSON string but got " + data['address_locality']);
        }
        // ensure the json data is a string
        if (data['address_region'] && !(typeof data['address_region'] === 'string' || data['address_region'] instanceof String)) {
            throw new Error("Expected the field `address_region` to be a primitive type in the JSON string but got " + data['address_region']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['metro_area'] && !(typeof data['metro_area'] === 'string' || data['metro_area'] instanceof String)) {
            throw new Error("Expected the field `metro_area` to be a primitive type in the JSON string but got " + data['metro_area']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['organisation_name'] && !(typeof data['organisation_name'] === 'string' || data['organisation_name'] instanceof String)) {
            throw new Error("Expected the field `organisation_name` to be a primitive type in the JSON string but got " + data['organisation_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pops'])) {
            throw new Error("Expected the field `pops` to be an array in the JSON data but got " + data['pops']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['street_address'] && !(typeof data['street_address'] === 'string' || data['street_address'] instanceof String)) {
            throw new Error("Expected the field `street_address` to be a primitive type in the JSON string but got " + data['street_address']);
        }

        return true;
    }


}

Facility.RequiredProperties = ["address_country", "address_locality", "address_region", "id", "metro_area", "name", "organisation_name", "pops", "postal_code", "street_address"];

/**
 * ISO 3166-1 alpha-2 country code, for example DE 
 * @member {String} address_country
 */
Facility.prototype['address_country'] = undefined;

/**
 * The locality/city. For example, Mountain View.
 * @member {String} address_locality
 */
Facility.prototype['address_locality'] = undefined;

/**
 * The region. For example, CA
 * @member {String} address_region
 */
Facility.prototype['address_region'] = undefined;

/**
 * @member {String} id
 */
Facility.prototype['id'] = undefined;

/**
 * Id of the `MetroArea` the DC is located in. 
 * @member {String} metro_area
 */
Facility.prototype['metro_area'] = undefined;

/**
 * Name of the Datacenter as called by the operator 
 * @member {String} name
 */
Facility.prototype['name'] = undefined;

/**
 * Name of Datacenter operator 
 * @member {String} organisation_name
 */
Facility.prototype['organisation_name'] = undefined;

/**
 * [PeeringDB](https://www.peeringdb.com) facitlity ID, can be extracted from the url https://www.peeringdb.com/fac/$id 
 * @member {Number} peeringdb_facility_id
 */
Facility.prototype['peeringdb_facility_id'] = undefined;

/**
 * List of pops in the `Facility`.
 * @member {Array.<String>} pops
 */
Facility.prototype['pops'] = undefined;

/**
 * A postal code. For example, 9404
 * @member {String} postal_code
 */
Facility.prototype['postal_code'] = undefined;

/**
 * The street address. For example, 1600 Amphitheatre Pkwy.
 * @member {String} street_address
 */
Facility.prototype['street_address'] = undefined;


// Implement FacilityPartial interface:
/**
 * ISO 3166-1 alpha-2 country code, for example DE 
 * @member {String} address_country
 */
FacilityPartial.prototype['address_country'] = undefined;
/**
 * The locality/city. For example, Mountain View.
 * @member {String} address_locality
 */
FacilityPartial.prototype['address_locality'] = undefined;
/**
 * The region. For example, CA
 * @member {String} address_region
 */
FacilityPartial.prototype['address_region'] = undefined;
/**
 * @member {String} id
 */
FacilityPartial.prototype['id'] = undefined;
/**
 * Id of the `MetroArea` the DC is located in. 
 * @member {String} metro_area
 */
FacilityPartial.prototype['metro_area'] = undefined;
/**
 * Name of the Datacenter as called by the operator 
 * @member {String} name
 */
FacilityPartial.prototype['name'] = undefined;
/**
 * Name of Datacenter operator 
 * @member {String} organisation_name
 */
FacilityPartial.prototype['organisation_name'] = undefined;
/**
 * [PeeringDB](https://www.peeringdb.com) facitlity ID, can be extracted from the url https://www.peeringdb.com/fac/$id 
 * @member {Number} peeringdb_facility_id
 */
FacilityPartial.prototype['peeringdb_facility_id'] = undefined;
/**
 * List of pops in the `Facility`.
 * @member {Array.<String>} pops
 */
FacilityPartial.prototype['pops'] = undefined;
/**
 * A postal code. For example, 9404
 * @member {String} postal_code
 */
FacilityPartial.prototype['postal_code'] = undefined;
/**
 * The street address. For example, 1600 Amphitheatre Pkwy.
 * @member {String} street_address
 */
FacilityPartial.prototype['street_address'] = undefined;




export default Facility;

