/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceCapability from './DeviceCapability';

/**
 * The DevicePartial model module.
 * @module model/DevicePartial
 * @version 2.1.0
 */
class DevicePartial {
    /**
     * Constructs a new <code>DevicePartial</code>.
     * Device
     * @alias module:model/DevicePartial
     */
    constructor() { 
        
        DevicePartial.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DevicePartial</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DevicePartial} obj Optional instance to populate.
     * @return {module:model/DevicePartial} The populated <code>DevicePartial</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DevicePartial();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], [DeviceCapability]);
            }
            if (data.hasOwnProperty('facility')) {
                obj['facility'] = ApiClient.convertToType(data['facility'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pop')) {
                obj['pop'] = ApiClient.convertToType(data['pop'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DevicePartial</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DevicePartial</code>.
     */
    static validateJSON(data) {
        if (data['capabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['capabilities'])) {
                throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
            }
            // validate the optional field `capabilities` (array)
            for (const item of data['capabilities']) {
                DeviceCapability.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['facility'] && !(typeof data['facility'] === 'string' || data['facility'] instanceof String)) {
            throw new Error("Expected the field `facility` to be a primitive type in the JSON string but got " + data['facility']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pop'] && !(typeof data['pop'] === 'string' || data['pop'] instanceof String)) {
            throw new Error("Expected the field `pop` to be a primitive type in the JSON string but got " + data['pop']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/DeviceCapability>} capabilities
 */
DevicePartial.prototype['capabilities'] = undefined;

/**
 * Identifier of the facility where the device is physically based.
 * @member {String} facility
 */
DevicePartial.prototype['facility'] = undefined;

/**
 * @member {String} id
 */
DevicePartial.prototype['id'] = undefined;

/**
 * Name of the device 
 * @member {String} name
 */
DevicePartial.prototype['name'] = undefined;

/**
 * The `PointOfPresence` the device is in.
 * @member {String} pop
 */
DevicePartial.prototype['pop'] = undefined;






export default DevicePartial;

