/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.CancellationPolicy;
import org.openapitools.client.model.CancellationRequest;
import org.openapitools.client.model.NetworkServiceConfig;
import org.openapitools.client.model.NetworkServiceConfigRequest;
import org.openapitools.client.model.NetworkServiceConfigUpdate;
import org.openapitools.client.model.NetworkServiceConfigUpdatePartial;
import org.openapitools.client.model.NetworkServiceConfigsDestroy400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkServiceConfigsApi
 */
@Disabled
public class NetworkServiceConfigsApiTest {

    private final NetworkServiceConfigsApi api = new NetworkServiceConfigsApi();

    /**
     * The cancellation-policy can be queried to answer the questions:  If I cancel my subscription, *when will it be technically decommissioned*? If I cancel my subscription, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceConfigCancellationPolicyReadTest() throws ApiException {
        String id = null;
        String decommissionAt = null;
        CancellationPolicy response = api.networkServiceConfigCancellationPolicyRead(id, decommissionAt);
        // TODO: test validations
    }

    /**
     * Create a &#x60;network-service-config&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceConfigsCreateTest() throws ApiException {
        NetworkServiceConfigRequest networkServiceConfigRequest = null;
        NetworkServiceConfig response = api.networkServiceConfigsCreate(networkServiceConfigRequest);
        // TODO: test validations
    }

    /**
     * Request decommissioning the network service configuration.  The network service config will assume the state &#x60;decommission_requested&#x60;. This will cascade to related resources like &#x60;network-feature-configs&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceConfigsDestroyTest() throws ApiException {
        String id = null;
        CancellationRequest cancellationRequest = null;
        NetworkServiceConfig response = api.networkServiceConfigsDestroy(id, cancellationRequest);
        // TODO: test validations
    }

    /**
     * Get all &#x60;network-service-config&#x60;s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceConfigsListTest() throws ApiException {
        List<String> id = null;
        String state = null;
        String stateIsNot = null;
        String managingAccount = null;
        String consumingAccount = null;
        String externalRef = null;
        String type = null;
        Integer innerVlan = null;
        Integer outerVlan = null;
        Integer capacity = null;
        String networkService = null;
        String connection = null;
        String productOffering = null;
        List<NetworkServiceConfig> response = api.networkServiceConfigsList(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, innerVlan, outerVlan, capacity, networkService, connection, productOffering);
        // TODO: test validations
    }

    /**
     * Update parts of an exisiting &#x60;network-service-config&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceConfigsPartialUpdateTest() throws ApiException {
        String id = null;
        NetworkServiceConfigUpdatePartial networkServiceConfigUpdatePartial = null;
        NetworkServiceConfig response = api.networkServiceConfigsPartialUpdate(id, networkServiceConfigUpdatePartial);
        // TODO: test validations
    }

    /**
     * Get a &#x60;network-service-config&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceConfigsReadTest() throws ApiException {
        String id = null;
        NetworkServiceConfig response = api.networkServiceConfigsRead(id);
        // TODO: test validations
    }

    /**
     * Update an exisiting &#x60;network-service-config&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceConfigsUpdateTest() throws ApiException {
        String id = null;
        NetworkServiceConfigUpdate networkServiceConfigUpdate = null;
        NetworkServiceConfig response = api.networkServiceConfigsUpdate(id, networkServiceConfigUpdate);
        // TODO: test validations
    }

}
