/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountRequest;
import org.openapitools.client.model.AccountUpdate;
import org.openapitools.client.model.AccountUpdatePartial;
import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Create a new account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsCreateTest() throws ApiException {
        AccountRequest accountRequest = null;
        Account response = api.accountsCreate(accountRequest);
        // TODO: test validations
    }

    /**
     * Accounts can be deleted, when all services and configs are decommissioned or the account is not longer referenced e.g. as a &#x60;managing_account&#x60; or &#x60;billing_account&#x60;.  Deleting an account will cascade to &#x60;contacts&#x60; and &#x60;role-assignments&#x60;.  The request will immediately fail, if the above preconditions are not met.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsDestroyTest() throws ApiException {
        String id = null;
        Account response = api.accountsDestroy(id);
        // TODO: test validations
    }

    /**
     * Retrieve a list of &#x60;Account&#x60;s.  This includes all accounts the currently authorized account is managing and the current account itself.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsListTest() throws ApiException {
        List<String> id = null;
        String state = null;
        String stateIsNot = null;
        String managingAccount = null;
        Integer billable = null;
        String externalRef = null;
        String name = null;
        List<Account> response = api.accountsList(id, state, stateIsNot, managingAccount, billable, externalRef, name);
        // TODO: test validations
    }

    /**
     * Update parts of an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsPartialUpdateTest() throws ApiException {
        String id = null;
        AccountUpdatePartial accountUpdatePartial = null;
        Account response = api.accountsPartialUpdate(id, accountUpdatePartial);
        // TODO: test validations
    }

    /**
     * Get a single account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsReadTest() throws ApiException {
        String id = null;
        Account response = api.accountsRead(id);
        // TODO: test validations
    }

    /**
     * Update the entire account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountsUpdateTest() throws ApiException {
        String id = null;
        AccountUpdate accountUpdate = null;
        Account response = api.accountsUpdate(id, accountUpdate);
        // TODO: test validations
    }

}
