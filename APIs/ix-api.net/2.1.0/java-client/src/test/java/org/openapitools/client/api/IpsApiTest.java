/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.IpAddress;
import org.openapitools.client.model.IpAddressRequest;
import org.openapitools.client.model.IpAddressUpdate;
import org.openapitools.client.model.IpAddressUpdatePartial;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IpsApi
 */
@Disabled
public class IpsApiTest {

    private final IpsApi api = new IpsApi();

    /**
     * Add an ip host address or network prefix.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipsCreateTest() throws ApiException {
        IpAddressRequest ipAddressRequest = null;
        IpAddress response = api.ipsCreate(ipAddressRequest);
        // TODO: test validations
    }

    /**
     * List all ip addresses (and prefixes).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipsListTest() throws ApiException {
        List<String> id = null;
        String managingAccount = null;
        String consumingAccount = null;
        String externalRef = null;
        String networkService = null;
        String networkServiceConfig = null;
        String networkFeature = null;
        String networkFeatureConfig = null;
        Integer version = null;
        String fqdn = null;
        Integer prefixLength = null;
        String validNotBefore = null;
        String validNotAfter = null;
        List<IpAddress> response = api.ipsList(id, managingAccount, consumingAccount, externalRef, networkService, networkServiceConfig, networkFeature, networkFeatureConfig, version, fqdn, prefixLength, validNotBefore, validNotAfter);
        // TODO: test validations
    }

    /**
     * Update parts of an ip address.   As with the &#x60;PUT&#x60; opertaion, IP addresses, where you don&#39;t have update rights, will yield a &#x60;resource access denied&#x60; error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipsPartialUpdateTest() throws ApiException {
        String id = null;
        IpAddressUpdatePartial ipAddressUpdatePartial = null;
        IpAddress response = api.ipsPartialUpdate(id, ipAddressUpdatePartial);
        // TODO: test validations
    }

    /**
     * Get a single ip addresses by it&#39;s id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipsReadTest() throws ApiException {
        String id = null;
        IpAddress response = api.ipsRead(id);
        // TODO: test validations
    }

    /**
     * Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ipsUpdateTest() throws ApiException {
        String id = null;
        IpAddressUpdate ipAddressUpdate = null;
        IpAddress response = api.ipsUpdate(id, ipAddressUpdate);
        // TODO: test validations
    }

}
