/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.CancellationPolicy;
import org.openapitools.client.model.CancellationRequest;
import org.openapitools.client.model.ContactsDestroy400Response;
import org.openapitools.client.model.NetworkService;
import org.openapitools.client.model.NetworkServiceChangeRequest;
import org.openapitools.client.model.NetworkServiceConfigsDestroy400Response;
import org.openapitools.client.model.NetworkServiceRequest;
import org.openapitools.client.model.NetworkServiceRequestPartial;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkServicesApi
 */
@Disabled
public class NetworkServicesApiTest {

    private final NetworkServicesApi api = new NetworkServicesApi();

    /**
     * The cancellation-policy can be queried to answer the questions:  If I cancel my service, *when will it be technically decommissioned*? If I cancel my service, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceCancellationPolicyReadTest() throws ApiException {
        String id = null;
        String decommissionAt = null;
        CancellationPolicy response = api.networkServiceCancellationPolicyRead(id, decommissionAt);
        // TODO: test validations
    }

    /**
     * Request a change to the network service.  A participant in a network service of type &#x60;p2p_vc&#x60; can issue a change request, expressing a desired change in the capacity. The change is accepted when all sides have configured the network service configs with the new bandwidth. These changes can sometimes require a change of the product offering. The product offering may only differ in regards to bandwidth.  The network service will change it&#39;s state from &#x60;production&#x60; into &#x60;production_change_pending&#x60;.  Only one change request may be issued at a time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceChangeRequestCreateTest() throws ApiException {
        String id = null;
        NetworkServiceChangeRequest networkServiceChangeRequest = null;
        NetworkServiceChangeRequest response = api.networkServiceChangeRequestCreate(id, networkServiceChangeRequest);
        // TODO: test validations
    }

    /**
     * Retract or reject a change to the network service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceChangeRequestDestroyTest() throws ApiException {
        String id = null;
        NetworkServiceChangeRequest response = api.networkServiceChangeRequestDestroy(id);
        // TODO: test validations
    }

    /**
     * Get the change request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServiceChangeRequestReadTest() throws ApiException {
        String id = null;
        NetworkServiceChangeRequest response = api.networkServiceChangeRequestRead(id);
        // TODO: test validations
    }

    /**
     * Create a new network service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServicesCreateTest() throws ApiException {
        NetworkServiceRequest networkServiceRequest = null;
        NetworkService response = api.networkServicesCreate(networkServiceRequest);
        // TODO: test validations
    }

    /**
     * Request decomissioning of the network service.  The network service will enter the state of &#x60;decommission_requested&#x60;. The request will cascade to related network service and feature configs.  An *optional request body* can be provided to request a specific service termination date.  If no date is given in the request body, it is assumed to be the earliest possible date.  Possible values for &#x60;decommission_at&#x60; can be queried through the &#x60;network_service_cancellation_policy_read&#x60; operation.  The response will contain the dates on which the changes will be effected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServicesDestroyTest() throws ApiException {
        String id = null;
        CancellationRequest cancellationRequest = null;
        NetworkService response = api.networkServicesDestroy(id, cancellationRequest);
        // TODO: test validations
    }

    /**
     * List available &#x60;NetworkService&#x60;s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServicesListTest() throws ApiException {
        List<String> id = null;
        String state = null;
        String stateIsNot = null;
        String managingAccount = null;
        String consumingAccount = null;
        String externalRef = null;
        String type = null;
        String pop = null;
        String productOffering = null;
        List<NetworkService> response = api.networkServicesList(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, pop, productOffering);
        // TODO: test validations
    }

    /**
     * Partially update a network service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServicesPartialUpdateTest() throws ApiException {
        String id = null;
        NetworkServiceRequestPartial networkServiceRequestPartial = null;
        NetworkService response = api.networkServicesPartialUpdate(id, networkServiceRequestPartial);
        // TODO: test validations
    }

    /**
     * Get a specific &#x60;network-service&#x60; by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServicesReadTest() throws ApiException {
        String id = null;
        NetworkService response = api.networkServicesRead(id);
        // TODO: test validations
    }

    /**
     * Update a network service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkServicesUpdateTest() throws ApiException {
        String id = null;
        NetworkServiceRequest networkServiceRequest = null;
        NetworkService response = api.networkServicesUpdate(id, networkServiceRequest);
        // TODO: test validations
    }

}
