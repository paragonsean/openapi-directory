/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.ContactRequest;
import org.openapitools.client.model.ContactRequestPartial;
import org.openapitools.client.model.ContactsDestroy400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Disabled
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    /**
     * Create a new contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsCreateTest() throws ApiException {
        ContactRequest contactRequest = null;
        Contact response = api.contactsCreate(contactRequest);
        // TODO: test validations
    }

    /**
     * Remove a contact.  Please note, that a contact can only be removed if it is not longer in use in a network service or config through a role assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsDestroyTest() throws ApiException {
        String id = null;
        Contact response = api.contactsDestroy(id);
        // TODO: test validations
    }

    /**
     * List available contacts managed by the authorized account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsListTest() throws ApiException {
        List<String> id = null;
        String managingAccount = null;
        String consumingAccount = null;
        String externalRef = null;
        List<Contact> response = api.contactsList(id, managingAccount, consumingAccount, externalRef);
        // TODO: test validations
    }

    /**
     * Update parts of a contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsPartialUpdateTest() throws ApiException {
        String id = null;
        ContactRequestPartial contactRequestPartial = null;
        Contact response = api.contactsPartialUpdate(id, contactRequestPartial);
        // TODO: test validations
    }

    /**
     * Get a contact by it&#39;s id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsReadTest() throws ApiException {
        String id = null;
        Contact response = api.contactsRead(id);
        // TODO: test validations
    }

    /**
     * Update a contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void contactsUpdateTest() throws ApiException {
        String id = null;
        ContactRequest contactRequest = null;
        Contact response = api.contactsUpdate(id, contactRequest);
        // TODO: test validations
    }

}
