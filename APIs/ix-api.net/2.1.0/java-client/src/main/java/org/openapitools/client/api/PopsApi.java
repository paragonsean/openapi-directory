/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.PointOfPresence;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PopsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PopsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PopsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for popsList
     * @param id Filter by id (optional)
     * @param facility Filter by facility (optional)
     * @param metroAreaNetwork Filter by metro_area_network (optional)
     * @param capabilityMediaType Filter by capability_media_type (optional)
     * @param capabilitySpeed Filter by capability_speed (optional)
     * @param capabilitySpeedLt Filter by capability_speed__lt (optional)
     * @param capabilitySpeedLte Filter by capability_speed__lte (optional)
     * @param capabilitySpeedGt Filter by capability_speed__gt (optional)
     * @param capabilitySpeedGte Filter by capability_speed__gte (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popsListCall(List<String> id, String facility, String metroAreaNetwork, String capabilityMediaType, Integer capabilitySpeed, Integer capabilitySpeedLt, Integer capabilitySpeedLte, Integer capabilitySpeedGt, Integer capabilitySpeedGte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (facility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facility", facility));
        }

        if (metroAreaNetwork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metro_area_network", metroAreaNetwork));
        }

        if (capabilityMediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capability_media_type", capabilityMediaType));
        }

        if (capabilitySpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capability_speed", capabilitySpeed));
        }

        if (capabilitySpeedLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capability_speed__lt", capabilitySpeedLt));
        }

        if (capabilitySpeedLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capability_speed__lte", capabilitySpeedLte));
        }

        if (capabilitySpeedGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capability_speed__gt", capabilitySpeedGt));
        }

        if (capabilitySpeedGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capability_speed__gte", capabilitySpeedGte));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call popsListValidateBeforeCall(List<String> id, String facility, String metroAreaNetwork, String capabilityMediaType, Integer capabilitySpeed, Integer capabilitySpeedLt, Integer capabilitySpeedLte, Integer capabilitySpeedGt, Integer capabilitySpeedGte, final ApiCallback _callback) throws ApiException {
        return popsListCall(id, facility, metroAreaNetwork, capabilityMediaType, capabilitySpeed, capabilitySpeedLt, capabilitySpeedLte, capabilitySpeedGt, capabilitySpeedGte, _callback);

    }

    /**
     * 
     * List all PoPs
     * @param id Filter by id (optional)
     * @param facility Filter by facility (optional)
     * @param metroAreaNetwork Filter by metro_area_network (optional)
     * @param capabilityMediaType Filter by capability_media_type (optional)
     * @param capabilitySpeed Filter by capability_speed (optional)
     * @param capabilitySpeedLt Filter by capability_speed__lt (optional)
     * @param capabilitySpeedLte Filter by capability_speed__lte (optional)
     * @param capabilitySpeedGt Filter by capability_speed__gt (optional)
     * @param capabilitySpeedGte Filter by capability_speed__gte (optional)
     * @return List&lt;PointOfPresence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<PointOfPresence> popsList(List<String> id, String facility, String metroAreaNetwork, String capabilityMediaType, Integer capabilitySpeed, Integer capabilitySpeedLt, Integer capabilitySpeedLte, Integer capabilitySpeedGt, Integer capabilitySpeedGte) throws ApiException {
        ApiResponse<List<PointOfPresence>> localVarResp = popsListWithHttpInfo(id, facility, metroAreaNetwork, capabilityMediaType, capabilitySpeed, capabilitySpeedLt, capabilitySpeedLte, capabilitySpeedGt, capabilitySpeedGte);
        return localVarResp.getData();
    }

    /**
     * 
     * List all PoPs
     * @param id Filter by id (optional)
     * @param facility Filter by facility (optional)
     * @param metroAreaNetwork Filter by metro_area_network (optional)
     * @param capabilityMediaType Filter by capability_media_type (optional)
     * @param capabilitySpeed Filter by capability_speed (optional)
     * @param capabilitySpeedLt Filter by capability_speed__lt (optional)
     * @param capabilitySpeedLte Filter by capability_speed__lte (optional)
     * @param capabilitySpeedGt Filter by capability_speed__gt (optional)
     * @param capabilitySpeedGte Filter by capability_speed__gte (optional)
     * @return ApiResponse&lt;List&lt;PointOfPresence&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PointOfPresence>> popsListWithHttpInfo(List<String> id, String facility, String metroAreaNetwork, String capabilityMediaType, Integer capabilitySpeed, Integer capabilitySpeedLt, Integer capabilitySpeedLte, Integer capabilitySpeedGt, Integer capabilitySpeedGte) throws ApiException {
        okhttp3.Call localVarCall = popsListValidateBeforeCall(id, facility, metroAreaNetwork, capabilityMediaType, capabilitySpeed, capabilitySpeedLt, capabilitySpeedLte, capabilitySpeedGt, capabilitySpeedGte, null);
        Type localVarReturnType = new TypeToken<List<PointOfPresence>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all PoPs
     * @param id Filter by id (optional)
     * @param facility Filter by facility (optional)
     * @param metroAreaNetwork Filter by metro_area_network (optional)
     * @param capabilityMediaType Filter by capability_media_type (optional)
     * @param capabilitySpeed Filter by capability_speed (optional)
     * @param capabilitySpeedLt Filter by capability_speed__lt (optional)
     * @param capabilitySpeedLte Filter by capability_speed__lte (optional)
     * @param capabilitySpeedGt Filter by capability_speed__gt (optional)
     * @param capabilitySpeedGte Filter by capability_speed__gte (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popsListAsync(List<String> id, String facility, String metroAreaNetwork, String capabilityMediaType, Integer capabilitySpeed, Integer capabilitySpeedLt, Integer capabilitySpeedLte, Integer capabilitySpeedGt, Integer capabilitySpeedGte, final ApiCallback<List<PointOfPresence>> _callback) throws ApiException {

        okhttp3.Call localVarCall = popsListValidateBeforeCall(id, facility, metroAreaNetwork, capabilityMediaType, capabilitySpeed, capabilitySpeedLt, capabilitySpeedLte, capabilitySpeedGt, capabilitySpeedGte, _callback);
        Type localVarReturnType = new TypeToken<List<PointOfPresence>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for popsRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pops/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call popsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling popsRead(Async)");
        }

        return popsReadCall(id, _callback);

    }

    /**
     * 
     * Get a single point of presence
     * @param id Get by id (required)
     * @return PointOfPresence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public PointOfPresence popsRead(String id) throws ApiException {
        ApiResponse<PointOfPresence> localVarResp = popsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single point of presence
     * @param id Get by id (required)
     * @return ApiResponse&lt;PointOfPresence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PointOfPresence> popsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = popsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PointOfPresence>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single point of presence
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Point Of Presence </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call popsReadAsync(String id, final ApiCallback<PointOfPresence> _callback) throws ApiException {

        okhttp3.Call localVarCall = popsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PointOfPresence>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
