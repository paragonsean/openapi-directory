/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.ContactsDestroy400Response;
import org.openapitools.client.model.RoleAssignment;
import org.openapitools.client.model.RoleAssignmentRequest;
import org.openapitools.client.model.RoleAssignmentsCreate400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoleAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for roleAssignmentsCreate
     * @param roleAssignmentRequest A role assignment request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateCall(RoleAssignmentRequest roleAssignmentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleAssignmentRequest;

        // create path and map variables
        String localVarPath = "/role-assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsCreateValidateBeforeCall(RoleAssignmentRequest roleAssignmentRequest, final ApiCallback _callback) throws ApiException {
        return roleAssignmentsCreateCall(roleAssignmentRequest, _callback);

    }

    /**
     * 
     * Assign a &#x60;Role&#x60; to a &#x60;Contact&#x60;.  The contact needs to have all fields filled, which the role requires. If this is not the case a &#x60;400&#x60; &#x60;UnableToFulfill&#x60; will be returned.
     * @param roleAssignmentRequest A role assignment request (optional)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsCreate(RoleAssignmentRequest roleAssignmentRequest) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsCreateWithHttpInfo(roleAssignmentRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Assign a &#x60;Role&#x60; to a &#x60;Contact&#x60;.  The contact needs to have all fields filled, which the role requires. If this is not the case a &#x60;400&#x60; &#x60;UnableToFulfill&#x60; will be returned.
     * @param roleAssignmentRequest A role assignment request (optional)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsCreateWithHttpInfo(RoleAssignmentRequest roleAssignmentRequest) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsCreateValidateBeforeCall(roleAssignmentRequest, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign a &#x60;Role&#x60; to a &#x60;Contact&#x60;.  The contact needs to have all fields filled, which the role requires. If this is not the case a &#x60;400&#x60; &#x60;UnableToFulfill&#x60; will be returned.
     * @param roleAssignmentRequest A role assignment request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsCreateAsync(RoleAssignmentRequest roleAssignmentRequest, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsCreateValidateBeforeCall(roleAssignmentRequest, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsDestroy
     * @param assignmentId Get by assignment_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDestroyCall(String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/role-assignments/{assignment_id}"
            .replace("{" + "assignment_id" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsDestroyValidateBeforeCall(String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling roleAssignmentsDestroy(Async)");
        }

        return roleAssignmentsDestroyCall(assignmentId, _callback);

    }

    /**
     * 
     * Remove a role assignment from a contact.  If the contact is still in use with a given role required, this will yield an &#x60;UnableToFulfill&#x60; error.
     * @param assignmentId Get by assignment_id (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsDestroy(String assignmentId) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsDestroyWithHttpInfo(assignmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a role assignment from a contact.  If the contact is still in use with a given role required, this will yield an &#x60;UnableToFulfill&#x60; error.
     * @param assignmentId Get by assignment_id (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsDestroyWithHttpInfo(String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsDestroyValidateBeforeCall(assignmentId, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a role assignment from a contact.  If the contact is still in use with a given role required, this will yield an &#x60;UnableToFulfill&#x60; error.
     * @param assignmentId Get by assignment_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsDestroyAsync(String assignmentId, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsDestroyValidateBeforeCall(assignmentId, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsList
     * @param id Filter by id (optional)
     * @param contact Filter by contact (optional)
     * @param role Filter by role (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListCall(List<String> id, String contact, String role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/role-assignments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (contact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contact", contact));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsListValidateBeforeCall(List<String> id, String contact, String role, final ApiCallback _callback) throws ApiException {
        return roleAssignmentsListCall(id, contact, role, _callback);

    }

    /**
     * 
     * List all role assignments for a contact.
     * @param id Filter by id (optional)
     * @param contact Filter by contact (optional)
     * @param role Filter by role (optional)
     * @return List&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<RoleAssignment> roleAssignmentsList(List<String> id, String contact, String role) throws ApiException {
        ApiResponse<List<RoleAssignment>> localVarResp = roleAssignmentsListWithHttpInfo(id, contact, role);
        return localVarResp.getData();
    }

    /**
     * 
     * List all role assignments for a contact.
     * @param id Filter by id (optional)
     * @param contact Filter by contact (optional)
     * @param role Filter by role (optional)
     * @return ApiResponse&lt;List&lt;RoleAssignment&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoleAssignment>> roleAssignmentsListWithHttpInfo(List<String> id, String contact, String role) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsListValidateBeforeCall(id, contact, role, null);
        Type localVarReturnType = new TypeToken<List<RoleAssignment>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all role assignments for a contact.
     * @param id Filter by id (optional)
     * @param contact Filter by contact (optional)
     * @param role Filter by role (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsListAsync(List<String> id, String contact, String role, final ApiCallback<List<RoleAssignment>> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsListValidateBeforeCall(id, contact, role, _callback);
        Type localVarReturnType = new TypeToken<List<RoleAssignment>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleAssignmentsRead
     * @param assignmentId Get by assignment_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsReadCall(String assignmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/role-assignments/{assignment_id}"
            .replace("{" + "assignment_id" + "}", localVarApiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleAssignmentsReadValidateBeforeCall(String assignmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling roleAssignmentsRead(Async)");
        }

        return roleAssignmentsReadCall(assignmentId, _callback);

    }

    /**
     * 
     * Get a role assignment for a contact.
     * @param assignmentId Get by assignment_id (required)
     * @return RoleAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public RoleAssignment roleAssignmentsRead(String assignmentId) throws ApiException {
        ApiResponse<RoleAssignment> localVarResp = roleAssignmentsReadWithHttpInfo(assignmentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a role assignment for a contact.
     * @param assignmentId Get by assignment_id (required)
     * @return ApiResponse&lt;RoleAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleAssignment> roleAssignmentsReadWithHttpInfo(String assignmentId) throws ApiException {
        okhttp3.Call localVarCall = roleAssignmentsReadValidateBeforeCall(assignmentId, null);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a role assignment for a contact.
     * @param assignmentId Get by assignment_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A role assignment for a contact </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleAssignmentsReadAsync(String assignmentId, final ApiCallback<RoleAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleAssignmentsReadValidateBeforeCall(assignmentId, _callback);
        Type localVarReturnType = new TypeToken<RoleAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
