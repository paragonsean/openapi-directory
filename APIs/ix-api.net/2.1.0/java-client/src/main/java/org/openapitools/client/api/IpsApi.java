/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.IpAddress;
import org.openapitools.client.model.IpAddressRequest;
import org.openapitools.client.model.IpAddressUpdate;
import org.openapitools.client.model.IpAddressUpdatePartial;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IpsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IpsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IpsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ipsCreate
     * @param ipAddressRequest IP-Address / Prefix allocation Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IP-Address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsCreateCall(IpAddressRequest ipAddressRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAddressRequest;

        // create path and map variables
        String localVarPath = "/ips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipsCreateValidateBeforeCall(IpAddressRequest ipAddressRequest, final ApiCallback _callback) throws ApiException {
        return ipsCreateCall(ipAddressRequest, _callback);

    }

    /**
     * 
     * Add an ip host address or network prefix.
     * @param ipAddressRequest IP-Address / Prefix allocation Request (optional)
     * @return IpAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IP-Address </td><td>  -  </td></tr>
     </table>
     */
    public IpAddress ipsCreate(IpAddressRequest ipAddressRequest) throws ApiException {
        ApiResponse<IpAddress> localVarResp = ipsCreateWithHttpInfo(ipAddressRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Add an ip host address or network prefix.
     * @param ipAddressRequest IP-Address / Prefix allocation Request (optional)
     * @return ApiResponse&lt;IpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IP-Address </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddress> ipsCreateWithHttpInfo(IpAddressRequest ipAddressRequest) throws ApiException {
        okhttp3.Call localVarCall = ipsCreateValidateBeforeCall(ipAddressRequest, null);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add an ip host address or network prefix.
     * @param ipAddressRequest IP-Address / Prefix allocation Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> IP-Address </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsCreateAsync(IpAddressRequest ipAddressRequest, final ApiCallback<IpAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipsCreateValidateBeforeCall(ipAddressRequest, _callback);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipsList
     * @param id Filter by id (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param networkService Filter by network_service (optional)
     * @param networkServiceConfig Filter by network_service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @param networkFeatureConfig Filter by network_feature_config (optional)
     * @param version Filter by version (optional)
     * @param fqdn Filter by fqdn (optional)
     * @param prefixLength Filter by prefix_length (optional)
     * @param validNotBefore Filter by valid_not_before (optional)
     * @param validNotAfter Filter by valid_not_after (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsListCall(List<String> id, String managingAccount, String consumingAccount, String externalRef, String networkService, String networkServiceConfig, String networkFeature, String networkFeatureConfig, Integer version, String fqdn, Integer prefixLength, String validNotBefore, String validNotAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ips";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (managingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managing_account", managingAccount));
        }

        if (consumingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consuming_account", consumingAccount));
        }

        if (externalRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_ref", externalRef));
        }

        if (networkService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_service", networkService));
        }

        if (networkServiceConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_service_config", networkServiceConfig));
        }

        if (networkFeature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_feature", networkFeature));
        }

        if (networkFeatureConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_feature_config", networkFeatureConfig));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (fqdn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fqdn", fqdn));
        }

        if (prefixLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix_length", prefixLength));
        }

        if (validNotBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valid_not_before", validNotBefore));
        }

        if (validNotAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valid_not_after", validNotAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipsListValidateBeforeCall(List<String> id, String managingAccount, String consumingAccount, String externalRef, String networkService, String networkServiceConfig, String networkFeature, String networkFeatureConfig, Integer version, String fqdn, Integer prefixLength, String validNotBefore, String validNotAfter, final ApiCallback _callback) throws ApiException {
        return ipsListCall(id, managingAccount, consumingAccount, externalRef, networkService, networkServiceConfig, networkFeature, networkFeatureConfig, version, fqdn, prefixLength, validNotBefore, validNotAfter, _callback);

    }

    /**
     * 
     * List all ip addresses (and prefixes).
     * @param id Filter by id (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param networkService Filter by network_service (optional)
     * @param networkServiceConfig Filter by network_service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @param networkFeatureConfig Filter by network_feature_config (optional)
     * @param version Filter by version (optional)
     * @param fqdn Filter by fqdn (optional)
     * @param prefixLength Filter by prefix_length (optional)
     * @param validNotBefore Filter by valid_not_before (optional)
     * @param validNotAfter Filter by valid_not_after (optional)
     * @return List&lt;IpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<IpAddress> ipsList(List<String> id, String managingAccount, String consumingAccount, String externalRef, String networkService, String networkServiceConfig, String networkFeature, String networkFeatureConfig, Integer version, String fqdn, Integer prefixLength, String validNotBefore, String validNotAfter) throws ApiException {
        ApiResponse<List<IpAddress>> localVarResp = ipsListWithHttpInfo(id, managingAccount, consumingAccount, externalRef, networkService, networkServiceConfig, networkFeature, networkFeatureConfig, version, fqdn, prefixLength, validNotBefore, validNotAfter);
        return localVarResp.getData();
    }

    /**
     * 
     * List all ip addresses (and prefixes).
     * @param id Filter by id (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param networkService Filter by network_service (optional)
     * @param networkServiceConfig Filter by network_service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @param networkFeatureConfig Filter by network_feature_config (optional)
     * @param version Filter by version (optional)
     * @param fqdn Filter by fqdn (optional)
     * @param prefixLength Filter by prefix_length (optional)
     * @param validNotBefore Filter by valid_not_before (optional)
     * @param validNotAfter Filter by valid_not_after (optional)
     * @return ApiResponse&lt;List&lt;IpAddress&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IpAddress>> ipsListWithHttpInfo(List<String> id, String managingAccount, String consumingAccount, String externalRef, String networkService, String networkServiceConfig, String networkFeature, String networkFeatureConfig, Integer version, String fqdn, Integer prefixLength, String validNotBefore, String validNotAfter) throws ApiException {
        okhttp3.Call localVarCall = ipsListValidateBeforeCall(id, managingAccount, consumingAccount, externalRef, networkService, networkServiceConfig, networkFeature, networkFeatureConfig, version, fqdn, prefixLength, validNotBefore, validNotAfter, null);
        Type localVarReturnType = new TypeToken<List<IpAddress>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ip addresses (and prefixes).
     * @param id Filter by id (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param networkService Filter by network_service (optional)
     * @param networkServiceConfig Filter by network_service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @param networkFeatureConfig Filter by network_feature_config (optional)
     * @param version Filter by version (optional)
     * @param fqdn Filter by fqdn (optional)
     * @param prefixLength Filter by prefix_length (optional)
     * @param validNotBefore Filter by valid_not_before (optional)
     * @param validNotAfter Filter by valid_not_after (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsListAsync(List<String> id, String managingAccount, String consumingAccount, String externalRef, String networkService, String networkServiceConfig, String networkFeature, String networkFeatureConfig, Integer version, String fqdn, Integer prefixLength, String validNotBefore, String validNotAfter, final ApiCallback<List<IpAddress>> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipsListValidateBeforeCall(id, managingAccount, consumingAccount, externalRef, networkService, networkServiceConfig, networkFeature, networkFeatureConfig, version, fqdn, prefixLength, validNotBefore, validNotAfter, _callback);
        Type localVarReturnType = new TypeToken<List<IpAddress>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipsPartialUpdate
     * @param id Get by id (required)
     * @param ipAddressUpdatePartial IP-Address Update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsPartialUpdateCall(String id, IpAddressUpdatePartial ipAddressUpdatePartial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAddressUpdatePartial;

        // create path and map variables
        String localVarPath = "/ips/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipsPartialUpdateValidateBeforeCall(String id, IpAddressUpdatePartial ipAddressUpdatePartial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipsPartialUpdate(Async)");
        }

        return ipsPartialUpdateCall(id, ipAddressUpdatePartial, _callback);

    }

    /**
     * 
     * Update parts of an ip address.   As with the &#x60;PUT&#x60; opertaion, IP addresses, where you don&#39;t have update rights, will yield a &#x60;resource access denied&#x60; error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     * @param id Get by id (required)
     * @param ipAddressUpdatePartial IP-Address Update (optional)
     * @return IpAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public IpAddress ipsPartialUpdate(String id, IpAddressUpdatePartial ipAddressUpdatePartial) throws ApiException {
        ApiResponse<IpAddress> localVarResp = ipsPartialUpdateWithHttpInfo(id, ipAddressUpdatePartial);
        return localVarResp.getData();
    }

    /**
     * 
     * Update parts of an ip address.   As with the &#x60;PUT&#x60; opertaion, IP addresses, where you don&#39;t have update rights, will yield a &#x60;resource access denied&#x60; error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     * @param id Get by id (required)
     * @param ipAddressUpdatePartial IP-Address Update (optional)
     * @return ApiResponse&lt;IpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddress> ipsPartialUpdateWithHttpInfo(String id, IpAddressUpdatePartial ipAddressUpdatePartial) throws ApiException {
        okhttp3.Call localVarCall = ipsPartialUpdateValidateBeforeCall(id, ipAddressUpdatePartial, null);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update parts of an ip address.   As with the &#x60;PUT&#x60; opertaion, IP addresses, where you don&#39;t have update rights, will yield a &#x60;resource access denied&#x60; error when attempting an update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     * @param id Get by id (required)
     * @param ipAddressUpdatePartial IP-Address Update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsPartialUpdateAsync(String id, IpAddressUpdatePartial ipAddressUpdatePartial, final ApiCallback<IpAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipsPartialUpdateValidateBeforeCall(id, ipAddressUpdatePartial, _callback);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipsRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ips/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipsRead(Async)");
        }

        return ipsReadCall(id, _callback);

    }

    /**
     * 
     * Get a single ip addresses by it&#39;s id.
     * @param id Get by id (required)
     * @return IpAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public IpAddress ipsRead(String id) throws ApiException {
        ApiResponse<IpAddress> localVarResp = ipsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single ip addresses by it&#39;s id.
     * @param id Get by id (required)
     * @return ApiResponse&lt;IpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddress> ipsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = ipsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single ip addresses by it&#39;s id.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsReadAsync(String id, final ApiCallback<IpAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ipsUpdate
     * @param id Get by id (required)
     * @param ipAddressUpdate IP-Address Update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsUpdateCall(String id, IpAddressUpdate ipAddressUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipAddressUpdate;

        // create path and map variables
        String localVarPath = "/ips/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ipsUpdateValidateBeforeCall(String id, IpAddressUpdate ipAddressUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ipsUpdate(Async)");
        }

        return ipsUpdateCall(id, ipAddressUpdate, _callback);

    }

    /**
     * 
     * Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     * @param id Get by id (required)
     * @param ipAddressUpdate IP-Address Update (optional)
     * @return IpAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public IpAddress ipsUpdate(String id, IpAddressUpdate ipAddressUpdate) throws ApiException {
        ApiResponse<IpAddress> localVarResp = ipsUpdateWithHttpInfo(id, ipAddressUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     * @param id Get by id (required)
     * @param ipAddressUpdate IP-Address Update (optional)
     * @return ApiResponse&lt;IpAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpAddress> ipsUpdateWithHttpInfo(String id, IpAddressUpdate ipAddressUpdate) throws ApiException {
        okhttp3.Call localVarCall = ipsUpdateValidateBeforeCall(id, ipAddressUpdate, null);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an ip address object.  You can only update IP addresses within your current scope. Not all addresses you can read you can update.  If the ip address was allocated for you, you might not be able to change anything but the &#x60;fqdn&#x60;.
     * @param id Get by id (required)
     * @param ipAddressUpdate IP-Address Update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> IP-Address </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ipsUpdateAsync(String id, IpAddressUpdate ipAddressUpdate, final ApiCallback<IpAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = ipsUpdateValidateBeforeCall(id, ipAddressUpdate, _callback);
        Type localVarReturnType = new TypeToken<IpAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
