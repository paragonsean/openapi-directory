/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudNetworkServiceConfig;
import org.openapitools.client.model.ExchangeLanNetworkServiceConfig;
import org.openapitools.client.model.MP2MPNetworkServiceConfig;
import org.openapitools.client.model.P2MPNetworkServiceConfig;
import org.openapitools.client.model.P2PNetworkServiceConfig;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.VlanConfig;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkServiceConfig extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NetworkServiceConfig.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NetworkServiceConfig.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NetworkServiceConfig' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeLanNetworkServiceConfig> adapterExchangeLanNetworkServiceConfig = gson.getDelegateAdapter(this, TypeToken.get(ExchangeLanNetworkServiceConfig.class));
            final TypeAdapter<P2PNetworkServiceConfig> adapterP2PNetworkServiceConfig = gson.getDelegateAdapter(this, TypeToken.get(P2PNetworkServiceConfig.class));
            final TypeAdapter<P2MPNetworkServiceConfig> adapterP2MPNetworkServiceConfig = gson.getDelegateAdapter(this, TypeToken.get(P2MPNetworkServiceConfig.class));
            final TypeAdapter<MP2MPNetworkServiceConfig> adapterMP2MPNetworkServiceConfig = gson.getDelegateAdapter(this, TypeToken.get(MP2MPNetworkServiceConfig.class));
            final TypeAdapter<CloudNetworkServiceConfig> adapterCloudNetworkServiceConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudNetworkServiceConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<NetworkServiceConfig>() {
                @Override
                public void write(JsonWriter out, NetworkServiceConfig value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ExchangeLanNetworkServiceConfig`
                    if (value.getActualInstance() instanceof ExchangeLanNetworkServiceConfig) {
                        JsonElement element = adapterExchangeLanNetworkServiceConfig.toJsonTree((ExchangeLanNetworkServiceConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2PNetworkServiceConfig`
                    if (value.getActualInstance() instanceof P2PNetworkServiceConfig) {
                        JsonElement element = adapterP2PNetworkServiceConfig.toJsonTree((P2PNetworkServiceConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2MPNetworkServiceConfig`
                    if (value.getActualInstance() instanceof P2MPNetworkServiceConfig) {
                        JsonElement element = adapterP2MPNetworkServiceConfig.toJsonTree((P2MPNetworkServiceConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MP2MPNetworkServiceConfig`
                    if (value.getActualInstance() instanceof MP2MPNetworkServiceConfig) {
                        JsonElement element = adapterMP2MPNetworkServiceConfig.toJsonTree((MP2MPNetworkServiceConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudNetworkServiceConfig`
                    if (value.getActualInstance() instanceof CloudNetworkServiceConfig) {
                        JsonElement element = adapterCloudNetworkServiceConfig.toJsonTree((CloudNetworkServiceConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CloudNetworkServiceConfig, ExchangeLanNetworkServiceConfig, MP2MPNetworkServiceConfig, P2MPNetworkServiceConfig, P2PNetworkServiceConfig");
                }

                @Override
                public NetworkServiceConfig read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ExchangeLanNetworkServiceConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExchangeLanNetworkServiceConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterExchangeLanNetworkServiceConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExchangeLanNetworkServiceConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExchangeLanNetworkServiceConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExchangeLanNetworkServiceConfig'", e);
                    }
                    // deserialize P2PNetworkServiceConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2PNetworkServiceConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2PNetworkServiceConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2PNetworkServiceConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2PNetworkServiceConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2PNetworkServiceConfig'", e);
                    }
                    // deserialize P2MPNetworkServiceConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2MPNetworkServiceConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2MPNetworkServiceConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2MPNetworkServiceConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2MPNetworkServiceConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2MPNetworkServiceConfig'", e);
                    }
                    // deserialize MP2MPNetworkServiceConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MP2MPNetworkServiceConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMP2MPNetworkServiceConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MP2MPNetworkServiceConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MP2MPNetworkServiceConfig'", e);
                    }
                    // deserialize CloudNetworkServiceConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudNetworkServiceConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudNetworkServiceConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudNetworkServiceConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudNetworkServiceConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudNetworkServiceConfig'", e);
                    }

                    if (match == 1) {
                        NetworkServiceConfig ret = new NetworkServiceConfig();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for NetworkServiceConfig: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NetworkServiceConfig() {
        super("oneOf", Boolean.FALSE);
    }

    public NetworkServiceConfig(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ExchangeLanNetworkServiceConfig", ExchangeLanNetworkServiceConfig.class);
        schemas.put("P2PNetworkServiceConfig", P2PNetworkServiceConfig.class);
        schemas.put("P2MPNetworkServiceConfig", P2MPNetworkServiceConfig.class);
        schemas.put("MP2MPNetworkServiceConfig", MP2MPNetworkServiceConfig.class);
        schemas.put("CloudNetworkServiceConfig", CloudNetworkServiceConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NetworkServiceConfig.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CloudNetworkServiceConfig, ExchangeLanNetworkServiceConfig, MP2MPNetworkServiceConfig, P2MPNetworkServiceConfig, P2PNetworkServiceConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ExchangeLanNetworkServiceConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2PNetworkServiceConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2MPNetworkServiceConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MP2MPNetworkServiceConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudNetworkServiceConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CloudNetworkServiceConfig, ExchangeLanNetworkServiceConfig, MP2MPNetworkServiceConfig, P2MPNetworkServiceConfig, P2PNetworkServiceConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * CloudNetworkServiceConfig, ExchangeLanNetworkServiceConfig, MP2MPNetworkServiceConfig, P2MPNetworkServiceConfig, P2PNetworkServiceConfig
     *
     * @return The actual instance (CloudNetworkServiceConfig, ExchangeLanNetworkServiceConfig, MP2MPNetworkServiceConfig, P2MPNetworkServiceConfig, P2PNetworkServiceConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExchangeLanNetworkServiceConfig`. If the actual instance is not `ExchangeLanNetworkServiceConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExchangeLanNetworkServiceConfig`
     * @throws ClassCastException if the instance is not `ExchangeLanNetworkServiceConfig`
     */
    public ExchangeLanNetworkServiceConfig getExchangeLanNetworkServiceConfig() throws ClassCastException {
        return (ExchangeLanNetworkServiceConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2PNetworkServiceConfig`. If the actual instance is not `P2PNetworkServiceConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2PNetworkServiceConfig`
     * @throws ClassCastException if the instance is not `P2PNetworkServiceConfig`
     */
    public P2PNetworkServiceConfig getP2PNetworkServiceConfig() throws ClassCastException {
        return (P2PNetworkServiceConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2MPNetworkServiceConfig`. If the actual instance is not `P2MPNetworkServiceConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2MPNetworkServiceConfig`
     * @throws ClassCastException if the instance is not `P2MPNetworkServiceConfig`
     */
    public P2MPNetworkServiceConfig getP2MPNetworkServiceConfig() throws ClassCastException {
        return (P2MPNetworkServiceConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MP2MPNetworkServiceConfig`. If the actual instance is not `MP2MPNetworkServiceConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MP2MPNetworkServiceConfig`
     * @throws ClassCastException if the instance is not `MP2MPNetworkServiceConfig`
     */
    public MP2MPNetworkServiceConfig getMP2MPNetworkServiceConfig() throws ClassCastException {
        return (MP2MPNetworkServiceConfig)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudNetworkServiceConfig`. If the actual instance is not `CloudNetworkServiceConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudNetworkServiceConfig`
     * @throws ClassCastException if the instance is not `CloudNetworkServiceConfig`
     */
    public CloudNetworkServiceConfig getCloudNetworkServiceConfig() throws ClassCastException {
        return (CloudNetworkServiceConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NetworkServiceConfig
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ExchangeLanNetworkServiceConfig
        try {
            ExchangeLanNetworkServiceConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ExchangeLanNetworkServiceConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2PNetworkServiceConfig
        try {
            P2PNetworkServiceConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2PNetworkServiceConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2MPNetworkServiceConfig
        try {
            P2MPNetworkServiceConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2MPNetworkServiceConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MP2MPNetworkServiceConfig
        try {
            MP2MPNetworkServiceConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudNetworkServiceConfig
        try {
            CloudNetworkServiceConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudNetworkServiceConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for NetworkServiceConfig with oneOf schemas: CloudNetworkServiceConfig, ExchangeLanNetworkServiceConfig, MP2MPNetworkServiceConfig, P2MPNetworkServiceConfig, P2PNetworkServiceConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of NetworkServiceConfig given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NetworkServiceConfig
     * @throws IOException if the JSON string is invalid with respect to NetworkServiceConfig
     */
    public static NetworkServiceConfig fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NetworkServiceConfig.class);
    }

    /**
     * Convert an instance of NetworkServiceConfig to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

