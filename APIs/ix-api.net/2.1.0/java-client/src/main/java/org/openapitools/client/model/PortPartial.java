/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Port
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PortPartial {
  public static final String SERIALIZED_NAME_BILLING_ACCOUNT = "billing_account";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT)
  private String billingAccount;

  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private String connection;

  public static final String SERIALIZED_NAME_CONSUMING_ACCOUNT = "consuming_account";
  @SerializedName(SERIALIZED_NAME_CONSUMING_ACCOUNT)
  private String consumingAccount;

  public static final String SERIALIZED_NAME_CONTRACT_REF = "contract_ref";
  @SerializedName(SERIALIZED_NAME_CONTRACT_REF)
  private String contractRef;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private String device;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external_ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  private String externalRef;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MANAGING_ACCOUNT = "managing_account";
  @SerializedName(SERIALIZED_NAME_MANAGING_ACCOUNT)
  private String managingAccount;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "";

  public static final String SERIALIZED_NAME_POP = "pop";
  @SerializedName(SERIALIZED_NAME_POP)
  private String pop;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchase_order";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private String purchaseOrder = "";

  public static final String SERIALIZED_NAME_ROLE_ASSIGNMENTS = "role_assignments";
  @SerializedName(SERIALIZED_NAME_ROLE_ASSIGNMENTS)
  private List<String> roleAssignments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Integer speed;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    REQUESTED("requested"),
    
    ALLOCATED("allocated"),
    
    TESTING("testing"),
    
    PRODUCTION("production"),
    
    PRODUCTION_CHANGE_PENDING("production_change_pending"),
    
    DECOMMISSION_REQUESTED("decommission_requested"),
    
    DECOMMISSIONED("decommissioned"),
    
    ARCHIVED("archived"),
    
    ERROR("error"),
    
    OPERATOR("operator"),
    
    SCHEDULED("scheduled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<Status> status = new ArrayList<>();

  public PortPartial() {
  }

  public PortPartial(
     String name, 
     Integer speed
  ) {
    this();
    this.name = name;
    this.speed = speed;
  }

  public PortPartial billingAccount(String billingAccount) {
    this.billingAccount = billingAccount;
    return this;
  }

  /**
   * An account requires billing_information to be used as a &#x60;billing_account&#x60;.
   * @return billingAccount
   */
  @javax.annotation.Nullable
  public String getBillingAccount() {
    return billingAccount;
  }

  public void setBillingAccount(String billingAccount) {
    this.billingAccount = billingAccount;
  }


  public PortPartial connection(String connection) {
    this.connection = connection;
    return this;
  }

  /**
   * Get connection
   * @return connection
   */
  @javax.annotation.Nullable
  public String getConnection() {
    return connection;
  }

  public void setConnection(String connection) {
    this.connection = connection;
  }


  public PortPartial consumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account consuming a service.  Used to be &#x60;owning_customer&#x60;. 
   * @return consumingAccount
   */
  @javax.annotation.Nullable
  public String getConsumingAccount() {
    return consumingAccount;
  }

  public void setConsumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
  }


  public PortPartial contractRef(String contractRef) {
    this.contractRef = contractRef;
    return this;
  }

  /**
   * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
   * @return contractRef
   */
  @javax.annotation.Nullable
  public String getContractRef() {
    return contractRef;
  }

  public void setContractRef(String contractRef) {
    this.contractRef = contractRef;
  }


  public PortPartial device(String device) {
    this.device = device;
    return this;
  }

  /**
   * The device the port. 
   * @return device
   */
  @javax.annotation.Nullable
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }


  public PortPartial externalRef(String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * Reference field, free to use for the API user.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(String externalRef) {
    this.externalRef = externalRef;
  }


  public PortPartial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PortPartial managingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
   * @return managingAccount
   */
  @javax.annotation.Nullable
  public String getManagingAccount() {
    return managingAccount;
  }

  public void setManagingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
  }


  public PortPartial mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * The media type of the port. Query the device&#39;s capabilities for available types. 
   * @return mediaType
   */
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  /**
   * Name of the port (set by the exchange)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public PortPartial pop(String pop) {
    this.pop = pop;
    return this;
  }

  /**
   * Same as the &#x60;pop&#x60; of the &#x60;device&#x60;. 
   * @return pop
   */
  @javax.annotation.Nullable
  public String getPop() {
    return pop;
  }

  public void setPop(String pop) {
    this.pop = pop;
  }


  public PortPartial purchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
    return this;
  }

  /**
   * Purchase Order ID which will be displayed on the invoice. 
   * @return purchaseOrder
   */
  @javax.annotation.Nullable
  public String getPurchaseOrder() {
    return purchaseOrder;
  }

  public void setPurchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public PortPartial roleAssignments(List<String> roleAssignments) {
    this.roleAssignments = roleAssignments;
    return this;
  }

  public PortPartial addRoleAssignmentsItem(String roleAssignmentsItem) {
    if (this.roleAssignments == null) {
      this.roleAssignments = new ArrayList<>();
    }
    this.roleAssignments.add(roleAssignmentsItem);
    return this;
  }

  /**
   * A set of &#x60;RoleAssignment&#x60;s. See the documentation on the specific &#x60;required_contact_roles&#x60;, &#x60;nfc_required_contact_roles&#x60; or &#x60;nsc_required_contact_roles&#x60; on what &#x60;RoleAssignment&#x60;s to provide. 
   * @return roleAssignments
   */
  @javax.annotation.Nullable
  public List<String> getRoleAssignments() {
    return roleAssignments;
  }

  public void setRoleAssignments(List<String> roleAssignments) {
    this.roleAssignments = roleAssignments;
  }


  /**
   * Get speed
   * minimum: 0
   * @return speed
   */
  @javax.annotation.Nullable
  public Integer getSpeed() {
    return speed;
  }



  public PortPartial state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public PortPartial status(List<Status> status) {
    this.status = status;
    return this;
  }

  public PortPartial addStatusItem(Status statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public List<Status> getStatus() {
    return status;
  }

  public void setStatus(List<Status> status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortPartial portPartial = (PortPartial) o;
    return Objects.equals(this.billingAccount, portPartial.billingAccount) &&
        Objects.equals(this.connection, portPartial.connection) &&
        Objects.equals(this.consumingAccount, portPartial.consumingAccount) &&
        Objects.equals(this.contractRef, portPartial.contractRef) &&
        Objects.equals(this.device, portPartial.device) &&
        Objects.equals(this.externalRef, portPartial.externalRef) &&
        Objects.equals(this.id, portPartial.id) &&
        Objects.equals(this.managingAccount, portPartial.managingAccount) &&
        Objects.equals(this.mediaType, portPartial.mediaType) &&
        Objects.equals(this.name, portPartial.name) &&
        Objects.equals(this.pop, portPartial.pop) &&
        Objects.equals(this.purchaseOrder, portPartial.purchaseOrder) &&
        Objects.equals(this.roleAssignments, portPartial.roleAssignments) &&
        Objects.equals(this.speed, portPartial.speed) &&
        Objects.equals(this.state, portPartial.state) &&
        Objects.equals(this.status, portPartial.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAccount, connection, consumingAccount, contractRef, device, externalRef, id, managingAccount, mediaType, name, pop, purchaseOrder, roleAssignments, speed, state, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortPartial {\n");
    sb.append("    billingAccount: ").append(toIndentedString(billingAccount)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    consumingAccount: ").append(toIndentedString(consumingAccount)).append("\n");
    sb.append("    contractRef: ").append(toIndentedString(contractRef)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    managingAccount: ").append(toIndentedString(managingAccount)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pop: ").append(toIndentedString(pop)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    roleAssignments: ").append(toIndentedString(roleAssignments)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_account");
    openapiFields.add("connection");
    openapiFields.add("consuming_account");
    openapiFields.add("contract_ref");
    openapiFields.add("device");
    openapiFields.add("external_ref");
    openapiFields.add("id");
    openapiFields.add("managing_account");
    openapiFields.add("media_type");
    openapiFields.add("name");
    openapiFields.add("pop");
    openapiFields.add("purchase_order");
    openapiFields.add("role_assignments");
    openapiFields.add("speed");
    openapiFields.add("state");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PortPartial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PortPartial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PortPartial is not found in the empty JSON string", PortPartial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PortPartial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PortPartial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_account") != null && !jsonObj.get("billing_account").isJsonNull()) && !jsonObj.get("billing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_account").toString()));
      }
      if ((jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) && !jsonObj.get("connection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection").toString()));
      }
      if ((jsonObj.get("consuming_account") != null && !jsonObj.get("consuming_account").isJsonNull()) && !jsonObj.get("consuming_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consuming_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consuming_account").toString()));
      }
      if ((jsonObj.get("contract_ref") != null && !jsonObj.get("contract_ref").isJsonNull()) && !jsonObj.get("contract_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_ref").toString()));
      }
      if ((jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) && !jsonObj.get("device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device").toString()));
      }
      if ((jsonObj.get("external_ref") != null && !jsonObj.get("external_ref").isJsonNull()) && !jsonObj.get("external_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_ref").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("managing_account") != null && !jsonObj.get("managing_account").isJsonNull()) && !jsonObj.get("managing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managing_account").toString()));
      }
      if ((jsonObj.get("media_type") != null && !jsonObj.get("media_type").isJsonNull()) && !jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pop") != null && !jsonObj.get("pop").isJsonNull()) && !jsonObj.get("pop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pop").toString()));
      }
      if ((jsonObj.get("purchase_order") != null && !jsonObj.get("purchase_order").isJsonNull()) && !jsonObj.get("purchase_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_order").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("role_assignments") != null && !jsonObj.get("role_assignments").isJsonNull() && !jsonObj.get("role_assignments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_assignments` to be an array in the JSON string but got `%s`", jsonObj.get("role_assignments").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JsonArray jsonArraystatus = jsonObj.getAsJsonArray("status");
        if (jsonArraystatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
          }

          // validate the optional field `status` (array)
          for (int i = 0; i < jsonArraystatus.size(); i++) {
            Status.validateJsonElement(jsonArraystatus.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PortPartial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PortPartial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PortPartial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PortPartial.class));

       return (TypeAdapter<T>) new TypeAdapter<PortPartial>() {
           @Override
           public void write(JsonWriter out, PortPartial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PortPartial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PortPartial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PortPartial
   * @throws IOException if the JSON string is invalid with respect to PortPartial
   */
  public static PortPartial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PortPartial.class);
  }

  /**
   * Convert an instance of PortPartial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

