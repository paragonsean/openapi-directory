/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.Port;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PortsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for portsList
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param mediaType Filter by media_type (optional)
     * @param pop Filter by pop (optional)
     * @param name Filter by name (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param device Filter by device (optional)
     * @param speed Filter by speed (optional)
     * @param connection Filter by connection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Port </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portsListCall(List<String> id, String state, String stateIsNot, String mediaType, String pop, String name, String externalRef, String device, String speed, String connection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (stateIsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state__is_not", stateIsNot));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media_type", mediaType));
        }

        if (pop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pop", pop));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (externalRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_ref", externalRef));
        }

        if (device != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device", device));
        }

        if (speed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("speed", speed));
        }

        if (connection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection", connection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portsListValidateBeforeCall(List<String> id, String state, String stateIsNot, String mediaType, String pop, String name, String externalRef, String device, String speed, String connection, final ApiCallback _callback) throws ApiException {
        return portsListCall(id, state, stateIsNot, mediaType, pop, name, externalRef, device, speed, connection, _callback);

    }

    /**
     * 
     * List all ports.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param mediaType Filter by media_type (optional)
     * @param pop Filter by pop (optional)
     * @param name Filter by name (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param device Filter by device (optional)
     * @param speed Filter by speed (optional)
     * @param connection Filter by connection (optional)
     * @return List&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Port </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<Port> portsList(List<String> id, String state, String stateIsNot, String mediaType, String pop, String name, String externalRef, String device, String speed, String connection) throws ApiException {
        ApiResponse<List<Port>> localVarResp = portsListWithHttpInfo(id, state, stateIsNot, mediaType, pop, name, externalRef, device, speed, connection);
        return localVarResp.getData();
    }

    /**
     * 
     * List all ports.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param mediaType Filter by media_type (optional)
     * @param pop Filter by pop (optional)
     * @param name Filter by name (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param device Filter by device (optional)
     * @param speed Filter by speed (optional)
     * @param connection Filter by connection (optional)
     * @return ApiResponse&lt;List&lt;Port&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Port </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Port>> portsListWithHttpInfo(List<String> id, String state, String stateIsNot, String mediaType, String pop, String name, String externalRef, String device, String speed, String connection) throws ApiException {
        okhttp3.Call localVarCall = portsListValidateBeforeCall(id, state, stateIsNot, mediaType, pop, name, externalRef, device, speed, connection, null);
        Type localVarReturnType = new TypeToken<List<Port>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ports.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param mediaType Filter by media_type (optional)
     * @param pop Filter by pop (optional)
     * @param name Filter by name (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param device Filter by device (optional)
     * @param speed Filter by speed (optional)
     * @param connection Filter by connection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Port </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portsListAsync(List<String> id, String state, String stateIsNot, String mediaType, String pop, String name, String externalRef, String device, String speed, String connection, final ApiCallback<List<Port>> _callback) throws ApiException {

        okhttp3.Call localVarCall = portsListValidateBeforeCall(id, state, stateIsNot, mediaType, pop, name, externalRef, device, speed, connection, _callback);
        Type localVarReturnType = new TypeToken<List<Port>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for portsRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Port </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call portsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling portsRead(Async)");
        }

        return portsReadCall(id, _callback);

    }

    /**
     * 
     * Retrieve a port.
     * @param id Get by id (required)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Port </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public Port portsRead(String id) throws ApiException {
        ApiResponse<Port> localVarResp = portsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a port.
     * @param id Get by id (required)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Port </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Port> portsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = portsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a port.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Port </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call portsReadAsync(String id, final ApiCallback<Port> _callback) throws ApiException {

        okhttp3.Call localVarCall = portsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
