/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Exchange Lan Network Service
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExchangeLanNetworkServicePartial {
  public static final String SERIALIZED_NAME_CONSUMING_ACCOUNT = "consuming_account";
  @SerializedName(SERIALIZED_NAME_CONSUMING_ACCOUNT)
  private String consumingAccount;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external_ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  private String externalRef;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IXFDB_IXID = "ixfdb_ixid";
  @SerializedName(SERIALIZED_NAME_IXFDB_IXID)
  private Integer ixfdbIxid;

  public static final String SERIALIZED_NAME_MANAGING_ACCOUNT = "managing_account";
  @SerializedName(SERIALIZED_NAME_MANAGING_ACCOUNT)
  private String managingAccount;

  public static final String SERIALIZED_NAME_METRO_AREA_NETWORK = "metro_area_network";
  @SerializedName(SERIALIZED_NAME_METRO_AREA_NETWORK)
  private String metroAreaNetwork;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_FEATURES = "network_features";
  @SerializedName(SERIALIZED_NAME_NETWORK_FEATURES)
  private List<String> networkFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_NSC_REQUIRED_CONTACT_ROLES = "nsc_required_contact_roles";
  @SerializedName(SERIALIZED_NAME_NSC_REQUIRED_CONTACT_ROLES)
  private List<String> nscRequiredContactRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PEERINGDB_IXID = "peeringdb_ixid";
  @SerializedName(SERIALIZED_NAME_PEERINGDB_IXID)
  private Integer peeringdbIxid;

  public static final String SERIALIZED_NAME_PRODUCT_OFFERING = "product_offering";
  @SerializedName(SERIALIZED_NAME_PRODUCT_OFFERING)
  private String productOffering;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    REQUESTED("requested"),
    
    ALLOCATED("allocated"),
    
    TESTING("testing"),
    
    PRODUCTION("production"),
    
    PRODUCTION_CHANGE_PENDING("production_change_pending"),
    
    DECOMMISSION_REQUESTED("decommission_requested"),
    
    DECOMMISSIONED("decommissioned"),
    
    ARCHIVED("archived"),
    
    ERROR("error"),
    
    OPERATOR("operator"),
    
    SCHEDULED("scheduled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<Status> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNET_V4 = "subnet_v4";
  @SerializedName(SERIALIZED_NAME_SUBNET_V4)
  private String subnetV4;

  public static final String SERIALIZED_NAME_SUBNET_V6 = "subnet_v6";
  @SerializedName(SERIALIZED_NAME_SUBNET_V6)
  private String subnetV6;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ExchangeLanNetworkServicePartial() {
  }

  public ExchangeLanNetworkServicePartial(
     List<String> nscRequiredContactRoles
  ) {
    this();
    this.nscRequiredContactRoles = nscRequiredContactRoles;
  }

  public ExchangeLanNetworkServicePartial consumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account consuming a service.  Used to be &#x60;owning_customer&#x60;. 
   * @return consumingAccount
   */
  @javax.annotation.Nullable
  public String getConsumingAccount() {
    return consumingAccount;
  }

  public void setConsumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
  }


  public ExchangeLanNetworkServicePartial externalRef(String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * Reference field, free to use for the API user.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(String externalRef) {
    this.externalRef = externalRef;
  }


  public ExchangeLanNetworkServicePartial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExchangeLanNetworkServicePartial ixfdbIxid(Integer ixfdbIxid) {
    this.ixfdbIxid = ixfdbIxid;
    return this;
  }

  /**
   * id of ixfdb
   * @return ixfdbIxid
   */
  @javax.annotation.Nullable
  public Integer getIxfdbIxid() {
    return ixfdbIxid;
  }

  public void setIxfdbIxid(Integer ixfdbIxid) {
    this.ixfdbIxid = ixfdbIxid;
  }


  public ExchangeLanNetworkServicePartial managingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
   * @return managingAccount
   */
  @javax.annotation.Nullable
  public String getManagingAccount() {
    return managingAccount;
  }

  public void setManagingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
  }


  public ExchangeLanNetworkServicePartial metroAreaNetwork(String metroAreaNetwork) {
    this.metroAreaNetwork = metroAreaNetwork;
    return this;
  }

  /**
   * Id of the &#x60;MetroAreaNetwork&#x60; where the exchange lan network service is directly provided.  Same as &#x60;service_metro_area_network&#x60; on the related &#x60;ProductOffering&#x60;. 
   * @return metroAreaNetwork
   */
  @javax.annotation.Nullable
  public String getMetroAreaNetwork() {
    return metroAreaNetwork;
  }

  public void setMetroAreaNetwork(String metroAreaNetwork) {
    this.metroAreaNetwork = metroAreaNetwork;
  }


  public ExchangeLanNetworkServicePartial name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Exchange-dependent service name, will be shown on the invoice.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExchangeLanNetworkServicePartial networkFeatures(List<String> networkFeatures) {
    this.networkFeatures = networkFeatures;
    return this;
  }

  public ExchangeLanNetworkServicePartial addNetworkFeaturesItem(String networkFeaturesItem) {
    if (this.networkFeatures == null) {
      this.networkFeatures = new ArrayList<>();
    }
    this.networkFeatures.add(networkFeaturesItem);
    return this;
  }

  /**
   * Get networkFeatures
   * @return networkFeatures
   */
  @javax.annotation.Nullable
  public List<String> getNetworkFeatures() {
    return networkFeatures;
  }

  public void setNetworkFeatures(List<String> networkFeatures) {
    this.networkFeatures = networkFeatures;
  }


  /**
   * The configuration will require at least one of each of the specified roles assigned to contacts.  The &#x60;RoleAssignment&#x60; is associated through the &#x60;role_assignments&#x60; list property of the network service configuration.
   * @return nscRequiredContactRoles
   */
  @javax.annotation.Nullable
  public List<String> getNscRequiredContactRoles() {
    return nscRequiredContactRoles;
  }



  public ExchangeLanNetworkServicePartial peeringdbIxid(Integer peeringdbIxid) {
    this.peeringdbIxid = peeringdbIxid;
    return this;
  }

  /**
   * PeeringDB ixid
   * @return peeringdbIxid
   */
  @javax.annotation.Nullable
  public Integer getPeeringdbIxid() {
    return peeringdbIxid;
  }

  public void setPeeringdbIxid(Integer peeringdbIxid) {
    this.peeringdbIxid = peeringdbIxid;
  }


  public ExchangeLanNetworkServicePartial productOffering(String productOffering) {
    this.productOffering = productOffering;
    return this;
  }

  /**
   * *deprecation notice*
   * @return productOffering
   */
  @javax.annotation.Nullable
  public String getProductOffering() {
    return productOffering;
  }

  public void setProductOffering(String productOffering) {
    this.productOffering = productOffering;
  }


  public ExchangeLanNetworkServicePartial state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ExchangeLanNetworkServicePartial status(List<Status> status) {
    this.status = status;
    return this;
  }

  public ExchangeLanNetworkServicePartial addStatusItem(Status statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public List<Status> getStatus() {
    return status;
  }

  public void setStatus(List<Status> status) {
    this.status = status;
  }


  public ExchangeLanNetworkServicePartial subnetV4(String subnetV4) {
    this.subnetV4 = subnetV4;
    return this;
  }

  /**
   * IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation. 
   * @return subnetV4
   */
  @javax.annotation.Nullable
  public String getSubnetV4() {
    return subnetV4;
  }

  public void setSubnetV4(String subnetV4) {
    this.subnetV4 = subnetV4;
  }


  public ExchangeLanNetworkServicePartial subnetV6(String subnetV6) {
    this.subnetV6 = subnetV6;
    return this;
  }

  /**
   * IPv6 subnet in hexadecimal colon separated CIDR notation. 
   * @return subnetV6
   */
  @javax.annotation.Nullable
  public String getSubnetV6() {
    return subnetV6;
  }

  public void setSubnetV6(String subnetV6) {
    this.subnetV6 = subnetV6;
  }


  public ExchangeLanNetworkServicePartial type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeLanNetworkServicePartial exchangeLanNetworkServicePartial = (ExchangeLanNetworkServicePartial) o;
    return Objects.equals(this.consumingAccount, exchangeLanNetworkServicePartial.consumingAccount) &&
        Objects.equals(this.externalRef, exchangeLanNetworkServicePartial.externalRef) &&
        Objects.equals(this.id, exchangeLanNetworkServicePartial.id) &&
        Objects.equals(this.ixfdbIxid, exchangeLanNetworkServicePartial.ixfdbIxid) &&
        Objects.equals(this.managingAccount, exchangeLanNetworkServicePartial.managingAccount) &&
        Objects.equals(this.metroAreaNetwork, exchangeLanNetworkServicePartial.metroAreaNetwork) &&
        Objects.equals(this.name, exchangeLanNetworkServicePartial.name) &&
        Objects.equals(this.networkFeatures, exchangeLanNetworkServicePartial.networkFeatures) &&
        Objects.equals(this.nscRequiredContactRoles, exchangeLanNetworkServicePartial.nscRequiredContactRoles) &&
        Objects.equals(this.peeringdbIxid, exchangeLanNetworkServicePartial.peeringdbIxid) &&
        Objects.equals(this.productOffering, exchangeLanNetworkServicePartial.productOffering) &&
        Objects.equals(this.state, exchangeLanNetworkServicePartial.state) &&
        Objects.equals(this.status, exchangeLanNetworkServicePartial.status) &&
        Objects.equals(this.subnetV4, exchangeLanNetworkServicePartial.subnetV4) &&
        Objects.equals(this.subnetV6, exchangeLanNetworkServicePartial.subnetV6) &&
        Objects.equals(this.type, exchangeLanNetworkServicePartial.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumingAccount, externalRef, id, ixfdbIxid, managingAccount, metroAreaNetwork, name, networkFeatures, nscRequiredContactRoles, peeringdbIxid, productOffering, state, status, subnetV4, subnetV6, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeLanNetworkServicePartial {\n");
    sb.append("    consumingAccount: ").append(toIndentedString(consumingAccount)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ixfdbIxid: ").append(toIndentedString(ixfdbIxid)).append("\n");
    sb.append("    managingAccount: ").append(toIndentedString(managingAccount)).append("\n");
    sb.append("    metroAreaNetwork: ").append(toIndentedString(metroAreaNetwork)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkFeatures: ").append(toIndentedString(networkFeatures)).append("\n");
    sb.append("    nscRequiredContactRoles: ").append(toIndentedString(nscRequiredContactRoles)).append("\n");
    sb.append("    peeringdbIxid: ").append(toIndentedString(peeringdbIxid)).append("\n");
    sb.append("    productOffering: ").append(toIndentedString(productOffering)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subnetV4: ").append(toIndentedString(subnetV4)).append("\n");
    sb.append("    subnetV6: ").append(toIndentedString(subnetV6)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consuming_account");
    openapiFields.add("external_ref");
    openapiFields.add("id");
    openapiFields.add("ixfdb_ixid");
    openapiFields.add("managing_account");
    openapiFields.add("metro_area_network");
    openapiFields.add("name");
    openapiFields.add("network_features");
    openapiFields.add("nsc_required_contact_roles");
    openapiFields.add("peeringdb_ixid");
    openapiFields.add("product_offering");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("subnet_v4");
    openapiFields.add("subnet_v6");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExchangeLanNetworkServicePartial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExchangeLanNetworkServicePartial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExchangeLanNetworkServicePartial is not found in the empty JSON string", ExchangeLanNetworkServicePartial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExchangeLanNetworkServicePartial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExchangeLanNetworkServicePartial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExchangeLanNetworkServicePartial.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consuming_account") != null && !jsonObj.get("consuming_account").isJsonNull()) && !jsonObj.get("consuming_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consuming_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consuming_account").toString()));
      }
      if ((jsonObj.get("external_ref") != null && !jsonObj.get("external_ref").isJsonNull()) && !jsonObj.get("external_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_ref").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("managing_account") != null && !jsonObj.get("managing_account").isJsonNull()) && !jsonObj.get("managing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managing_account").toString()));
      }
      if ((jsonObj.get("metro_area_network") != null && !jsonObj.get("metro_area_network").isJsonNull()) && !jsonObj.get("metro_area_network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro_area_network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metro_area_network").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("network_features") != null && !jsonObj.get("network_features").isJsonNull() && !jsonObj.get("network_features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_features` to be an array in the JSON string but got `%s`", jsonObj.get("network_features").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nsc_required_contact_roles") != null && !jsonObj.get("nsc_required_contact_roles").isJsonNull() && !jsonObj.get("nsc_required_contact_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nsc_required_contact_roles` to be an array in the JSON string but got `%s`", jsonObj.get("nsc_required_contact_roles").toString()));
      }
      if ((jsonObj.get("product_offering") != null && !jsonObj.get("product_offering").isJsonNull()) && !jsonObj.get("product_offering").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_offering` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_offering").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JsonArray jsonArraystatus = jsonObj.getAsJsonArray("status");
        if (jsonArraystatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
          }

          // validate the optional field `status` (array)
          for (int i = 0; i < jsonArraystatus.size(); i++) {
            Status.validateJsonElement(jsonArraystatus.get(i));
          };
        }
      }
      if ((jsonObj.get("subnet_v4") != null && !jsonObj.get("subnet_v4").isJsonNull()) && !jsonObj.get("subnet_v4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet_v4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet_v4").toString()));
      }
      if ((jsonObj.get("subnet_v6") != null && !jsonObj.get("subnet_v6").isJsonNull()) && !jsonObj.get("subnet_v6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet_v6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet_v6").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExchangeLanNetworkServicePartial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExchangeLanNetworkServicePartial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExchangeLanNetworkServicePartial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExchangeLanNetworkServicePartial.class));

       return (TypeAdapter<T>) new TypeAdapter<ExchangeLanNetworkServicePartial>() {
           @Override
           public void write(JsonWriter out, ExchangeLanNetworkServicePartial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExchangeLanNetworkServicePartial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExchangeLanNetworkServicePartial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExchangeLanNetworkServicePartial
   * @throws IOException if the JSON string is invalid with respect to ExchangeLanNetworkServicePartial
   */
  public static ExchangeLanNetworkServicePartial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExchangeLanNetworkServicePartial.class);
  }

  /**
   * Convert an instance of ExchangeLanNetworkServicePartial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

