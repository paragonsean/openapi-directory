/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudNetworkServiceConfigRequestPartial;
import org.openapitools.client.model.ExchangeLanNetworkServiceConfigRequestPartial;
import org.openapitools.client.model.MP2MPNetworkServiceConfigRequestPartial;
import org.openapitools.client.model.P2MPNetworkServiceConfigRequestPartial;
import org.openapitools.client.model.P2PNetworkServiceConfigRequestPartial;
import org.openapitools.client.model.VlanConfig;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkServiceConfigRequestPartial extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NetworkServiceConfigRequestPartial.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NetworkServiceConfigRequestPartial.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NetworkServiceConfigRequestPartial' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeLanNetworkServiceConfigRequestPartial> adapterExchangeLanNetworkServiceConfigRequestPartial = gson.getDelegateAdapter(this, TypeToken.get(ExchangeLanNetworkServiceConfigRequestPartial.class));
            final TypeAdapter<P2PNetworkServiceConfigRequestPartial> adapterP2PNetworkServiceConfigRequestPartial = gson.getDelegateAdapter(this, TypeToken.get(P2PNetworkServiceConfigRequestPartial.class));
            final TypeAdapter<P2MPNetworkServiceConfigRequestPartial> adapterP2MPNetworkServiceConfigRequestPartial = gson.getDelegateAdapter(this, TypeToken.get(P2MPNetworkServiceConfigRequestPartial.class));
            final TypeAdapter<MP2MPNetworkServiceConfigRequestPartial> adapterMP2MPNetworkServiceConfigRequestPartial = gson.getDelegateAdapter(this, TypeToken.get(MP2MPNetworkServiceConfigRequestPartial.class));
            final TypeAdapter<CloudNetworkServiceConfigRequestPartial> adapterCloudNetworkServiceConfigRequestPartial = gson.getDelegateAdapter(this, TypeToken.get(CloudNetworkServiceConfigRequestPartial.class));

            return (TypeAdapter<T>) new TypeAdapter<NetworkServiceConfigRequestPartial>() {
                @Override
                public void write(JsonWriter out, NetworkServiceConfigRequestPartial value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ExchangeLanNetworkServiceConfigRequestPartial`
                    if (value.getActualInstance() instanceof ExchangeLanNetworkServiceConfigRequestPartial) {
                        JsonElement element = adapterExchangeLanNetworkServiceConfigRequestPartial.toJsonTree((ExchangeLanNetworkServiceConfigRequestPartial)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2PNetworkServiceConfigRequestPartial`
                    if (value.getActualInstance() instanceof P2PNetworkServiceConfigRequestPartial) {
                        JsonElement element = adapterP2PNetworkServiceConfigRequestPartial.toJsonTree((P2PNetworkServiceConfigRequestPartial)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2MPNetworkServiceConfigRequestPartial`
                    if (value.getActualInstance() instanceof P2MPNetworkServiceConfigRequestPartial) {
                        JsonElement element = adapterP2MPNetworkServiceConfigRequestPartial.toJsonTree((P2MPNetworkServiceConfigRequestPartial)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MP2MPNetworkServiceConfigRequestPartial`
                    if (value.getActualInstance() instanceof MP2MPNetworkServiceConfigRequestPartial) {
                        JsonElement element = adapterMP2MPNetworkServiceConfigRequestPartial.toJsonTree((MP2MPNetworkServiceConfigRequestPartial)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudNetworkServiceConfigRequestPartial`
                    if (value.getActualInstance() instanceof CloudNetworkServiceConfigRequestPartial) {
                        JsonElement element = adapterCloudNetworkServiceConfigRequestPartial.toJsonTree((CloudNetworkServiceConfigRequestPartial)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CloudNetworkServiceConfigRequestPartial, ExchangeLanNetworkServiceConfigRequestPartial, MP2MPNetworkServiceConfigRequestPartial, P2MPNetworkServiceConfigRequestPartial, P2PNetworkServiceConfigRequestPartial");
                }

                @Override
                public NetworkServiceConfigRequestPartial read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ExchangeLanNetworkServiceConfigRequestPartial
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExchangeLanNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
                        actualAdapter = adapterExchangeLanNetworkServiceConfigRequestPartial;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExchangeLanNetworkServiceConfigRequestPartial'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExchangeLanNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExchangeLanNetworkServiceConfigRequestPartial'", e);
                    }
                    // deserialize P2PNetworkServiceConfigRequestPartial
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2PNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2PNetworkServiceConfigRequestPartial;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2PNetworkServiceConfigRequestPartial'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2PNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2PNetworkServiceConfigRequestPartial'", e);
                    }
                    // deserialize P2MPNetworkServiceConfigRequestPartial
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2MPNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2MPNetworkServiceConfigRequestPartial;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2MPNetworkServiceConfigRequestPartial'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2MPNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2MPNetworkServiceConfigRequestPartial'", e);
                    }
                    // deserialize MP2MPNetworkServiceConfigRequestPartial
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MP2MPNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
                        actualAdapter = adapterMP2MPNetworkServiceConfigRequestPartial;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MP2MPNetworkServiceConfigRequestPartial'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MP2MPNetworkServiceConfigRequestPartial'", e);
                    }
                    // deserialize CloudNetworkServiceConfigRequestPartial
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudNetworkServiceConfigRequestPartial;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudNetworkServiceConfigRequestPartial'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudNetworkServiceConfigRequestPartial'", e);
                    }

                    if (match == 1) {
                        NetworkServiceConfigRequestPartial ret = new NetworkServiceConfigRequestPartial();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for NetworkServiceConfigRequestPartial: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NetworkServiceConfigRequestPartial() {
        super("oneOf", Boolean.FALSE);
    }

    public NetworkServiceConfigRequestPartial(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ExchangeLanNetworkServiceConfigRequestPartial", ExchangeLanNetworkServiceConfigRequestPartial.class);
        schemas.put("P2PNetworkServiceConfigRequestPartial", P2PNetworkServiceConfigRequestPartial.class);
        schemas.put("P2MPNetworkServiceConfigRequestPartial", P2MPNetworkServiceConfigRequestPartial.class);
        schemas.put("MP2MPNetworkServiceConfigRequestPartial", MP2MPNetworkServiceConfigRequestPartial.class);
        schemas.put("CloudNetworkServiceConfigRequestPartial", CloudNetworkServiceConfigRequestPartial.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NetworkServiceConfigRequestPartial.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CloudNetworkServiceConfigRequestPartial, ExchangeLanNetworkServiceConfigRequestPartial, MP2MPNetworkServiceConfigRequestPartial, P2MPNetworkServiceConfigRequestPartial, P2PNetworkServiceConfigRequestPartial
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ExchangeLanNetworkServiceConfigRequestPartial) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2PNetworkServiceConfigRequestPartial) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2MPNetworkServiceConfigRequestPartial) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MP2MPNetworkServiceConfigRequestPartial) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudNetworkServiceConfigRequestPartial) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CloudNetworkServiceConfigRequestPartial, ExchangeLanNetworkServiceConfigRequestPartial, MP2MPNetworkServiceConfigRequestPartial, P2MPNetworkServiceConfigRequestPartial, P2PNetworkServiceConfigRequestPartial");
    }

    /**
     * Get the actual instance, which can be the following:
     * CloudNetworkServiceConfigRequestPartial, ExchangeLanNetworkServiceConfigRequestPartial, MP2MPNetworkServiceConfigRequestPartial, P2MPNetworkServiceConfigRequestPartial, P2PNetworkServiceConfigRequestPartial
     *
     * @return The actual instance (CloudNetworkServiceConfigRequestPartial, ExchangeLanNetworkServiceConfigRequestPartial, MP2MPNetworkServiceConfigRequestPartial, P2MPNetworkServiceConfigRequestPartial, P2PNetworkServiceConfigRequestPartial)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExchangeLanNetworkServiceConfigRequestPartial`. If the actual instance is not `ExchangeLanNetworkServiceConfigRequestPartial`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExchangeLanNetworkServiceConfigRequestPartial`
     * @throws ClassCastException if the instance is not `ExchangeLanNetworkServiceConfigRequestPartial`
     */
    public ExchangeLanNetworkServiceConfigRequestPartial getExchangeLanNetworkServiceConfigRequestPartial() throws ClassCastException {
        return (ExchangeLanNetworkServiceConfigRequestPartial)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2PNetworkServiceConfigRequestPartial`. If the actual instance is not `P2PNetworkServiceConfigRequestPartial`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2PNetworkServiceConfigRequestPartial`
     * @throws ClassCastException if the instance is not `P2PNetworkServiceConfigRequestPartial`
     */
    public P2PNetworkServiceConfigRequestPartial getP2PNetworkServiceConfigRequestPartial() throws ClassCastException {
        return (P2PNetworkServiceConfigRequestPartial)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2MPNetworkServiceConfigRequestPartial`. If the actual instance is not `P2MPNetworkServiceConfigRequestPartial`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2MPNetworkServiceConfigRequestPartial`
     * @throws ClassCastException if the instance is not `P2MPNetworkServiceConfigRequestPartial`
     */
    public P2MPNetworkServiceConfigRequestPartial getP2MPNetworkServiceConfigRequestPartial() throws ClassCastException {
        return (P2MPNetworkServiceConfigRequestPartial)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MP2MPNetworkServiceConfigRequestPartial`. If the actual instance is not `MP2MPNetworkServiceConfigRequestPartial`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MP2MPNetworkServiceConfigRequestPartial`
     * @throws ClassCastException if the instance is not `MP2MPNetworkServiceConfigRequestPartial`
     */
    public MP2MPNetworkServiceConfigRequestPartial getMP2MPNetworkServiceConfigRequestPartial() throws ClassCastException {
        return (MP2MPNetworkServiceConfigRequestPartial)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudNetworkServiceConfigRequestPartial`. If the actual instance is not `CloudNetworkServiceConfigRequestPartial`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudNetworkServiceConfigRequestPartial`
     * @throws ClassCastException if the instance is not `CloudNetworkServiceConfigRequestPartial`
     */
    public CloudNetworkServiceConfigRequestPartial getCloudNetworkServiceConfigRequestPartial() throws ClassCastException {
        return (CloudNetworkServiceConfigRequestPartial)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NetworkServiceConfigRequestPartial
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ExchangeLanNetworkServiceConfigRequestPartial
        try {
            ExchangeLanNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ExchangeLanNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2PNetworkServiceConfigRequestPartial
        try {
            P2PNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2PNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2MPNetworkServiceConfigRequestPartial
        try {
            P2MPNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2MPNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MP2MPNetworkServiceConfigRequestPartial
        try {
            MP2MPNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudNetworkServiceConfigRequestPartial
        try {
            CloudNetworkServiceConfigRequestPartial.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudNetworkServiceConfigRequestPartial failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for NetworkServiceConfigRequestPartial with oneOf schemas: CloudNetworkServiceConfigRequestPartial, ExchangeLanNetworkServiceConfigRequestPartial, MP2MPNetworkServiceConfigRequestPartial, P2MPNetworkServiceConfigRequestPartial, P2PNetworkServiceConfigRequestPartial. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of NetworkServiceConfigRequestPartial given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NetworkServiceConfigRequestPartial
     * @throws IOException if the JSON string is invalid with respect to NetworkServiceConfigRequestPartial
     */
    public static NetworkServiceConfigRequestPartial fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NetworkServiceConfigRequestPartial.class);
    }

    /**
     * Convert an instance of NetworkServiceConfigRequestPartial to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

