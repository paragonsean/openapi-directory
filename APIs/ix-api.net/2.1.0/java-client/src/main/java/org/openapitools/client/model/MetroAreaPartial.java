/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MetroArea
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetroAreaPartial {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FACILITIES = "facilities";
  @SerializedName(SERIALIZED_NAME_FACILITIES)
  private List<String> facilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_IATA_CODE = "iata_code";
  @SerializedName(SERIALIZED_NAME_IATA_CODE)
  private String iataCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METRO_AREA_NETWORKS = "metro_area_networks";
  @SerializedName(SERIALIZED_NAME_METRO_AREA_NETWORKS)
  private List<String> metroAreaNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_UN_LOCODE = "un_locode";
  @SerializedName(SERIALIZED_NAME_UN_LOCODE)
  private String unLocode;

  public MetroAreaPartial() {
  }

  public MetroAreaPartial displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the metro area. Likely the same as the IATA code. 
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MetroAreaPartial facilities(List<String> facilities) {
    this.facilities = facilities;
    return this;
  }

  public MetroAreaPartial addFacilitiesItem(String facilitiesItem) {
    if (this.facilities == null) {
      this.facilities = new ArrayList<>();
    }
    this.facilities.add(facilitiesItem);
    return this;
  }

  /**
   * List of facilities the metro area network.
   * @return facilities
   */
  @javax.annotation.Nullable
  public List<String> getFacilities() {
    return facilities;
  }

  public void setFacilities(List<String> facilities) {
    this.facilities = facilities;
  }


  public MetroAreaPartial iataCode(String iataCode) {
    this.iataCode = iataCode;
    return this;
  }

  /**
   * The three letter IATA airport code for identiying the metro area. 
   * @return iataCode
   */
  @javax.annotation.Nullable
  public String getIataCode() {
    return iataCode;
  }

  public void setIataCode(String iataCode) {
    this.iataCode = iataCode;
  }


  public MetroAreaPartial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MetroAreaPartial metroAreaNetworks(List<String> metroAreaNetworks) {
    this.metroAreaNetworks = metroAreaNetworks;
    return this;
  }

  public MetroAreaPartial addMetroAreaNetworksItem(String metroAreaNetworksItem) {
    if (this.metroAreaNetworks == null) {
      this.metroAreaNetworks = new ArrayList<>();
    }
    this.metroAreaNetworks.add(metroAreaNetworksItem);
    return this;
  }

  /**
   * List of networks in the metro area.
   * @return metroAreaNetworks
   */
  @javax.annotation.Nullable
  public List<String> getMetroAreaNetworks() {
    return metroAreaNetworks;
  }

  public void setMetroAreaNetworks(List<String> metroAreaNetworks) {
    this.metroAreaNetworks = metroAreaNetworks;
  }


  public MetroAreaPartial unLocode(String unLocode) {
    this.unLocode = unLocode;
    return this;
  }

  /**
   * The UN/LOCODE for identifying the metro area. 
   * @return unLocode
   */
  @javax.annotation.Nullable
  public String getUnLocode() {
    return unLocode;
  }

  public void setUnLocode(String unLocode) {
    this.unLocode = unLocode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetroAreaPartial metroAreaPartial = (MetroAreaPartial) o;
    return Objects.equals(this.displayName, metroAreaPartial.displayName) &&
        Objects.equals(this.facilities, metroAreaPartial.facilities) &&
        Objects.equals(this.iataCode, metroAreaPartial.iataCode) &&
        Objects.equals(this.id, metroAreaPartial.id) &&
        Objects.equals(this.metroAreaNetworks, metroAreaPartial.metroAreaNetworks) &&
        Objects.equals(this.unLocode, metroAreaPartial.unLocode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, facilities, iataCode, id, metroAreaNetworks, unLocode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetroAreaPartial {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    facilities: ").append(toIndentedString(facilities)).append("\n");
    sb.append("    iataCode: ").append(toIndentedString(iataCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metroAreaNetworks: ").append(toIndentedString(metroAreaNetworks)).append("\n");
    sb.append("    unLocode: ").append(toIndentedString(unLocode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display_name");
    openapiFields.add("facilities");
    openapiFields.add("iata_code");
    openapiFields.add("id");
    openapiFields.add("metro_area_networks");
    openapiFields.add("un_locode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetroAreaPartial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetroAreaPartial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetroAreaPartial is not found in the empty JSON string", MetroAreaPartial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetroAreaPartial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetroAreaPartial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("facilities") != null && !jsonObj.get("facilities").isJsonNull() && !jsonObj.get("facilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilities` to be an array in the JSON string but got `%s`", jsonObj.get("facilities").toString()));
      }
      if ((jsonObj.get("iata_code") != null && !jsonObj.get("iata_code").isJsonNull()) && !jsonObj.get("iata_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iata_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iata_code").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metro_area_networks") != null && !jsonObj.get("metro_area_networks").isJsonNull() && !jsonObj.get("metro_area_networks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro_area_networks` to be an array in the JSON string but got `%s`", jsonObj.get("metro_area_networks").toString()));
      }
      if ((jsonObj.get("un_locode") != null && !jsonObj.get("un_locode").isJsonNull()) && !jsonObj.get("un_locode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `un_locode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("un_locode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetroAreaPartial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetroAreaPartial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetroAreaPartial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetroAreaPartial.class));

       return (TypeAdapter<T>) new TypeAdapter<MetroAreaPartial>() {
           @Override
           public void write(JsonWriter out, MetroAreaPartial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetroAreaPartial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetroAreaPartial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetroAreaPartial
   * @throws IOException if the JSON string is invalid with respect to MetroAreaPartial
   */
  public static MetroAreaPartial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetroAreaPartial.class);
  }

  /**
   * Convert an instance of MetroAreaPartial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

