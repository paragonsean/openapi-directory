/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.ContactsDestroy400Response;
import org.openapitools.client.model.NetworkFeatureConfig;
import org.openapitools.client.model.NetworkFeatureConfigRequest;
import org.openapitools.client.model.NetworkFeatureConfigUpdate;
import org.openapitools.client.model.NetworkFeatureConfigUpdatePartial;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkFeatureConfigsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworkFeatureConfigsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkFeatureConfigsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for networkFeatureConfigsCreate
     * @param networkFeatureConfigRequest Polymorphic Network Feature Config Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsCreateCall(NetworkFeatureConfigRequest networkFeatureConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkFeatureConfigRequest;

        // create path and map variables
        String localVarPath = "/network-feature-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkFeatureConfigsCreateValidateBeforeCall(NetworkFeatureConfigRequest networkFeatureConfigRequest, final ApiCallback _callback) throws ApiException {
        return networkFeatureConfigsCreateCall(networkFeatureConfigRequest, _callback);

    }

    /**
     * 
     * Create a configuration for a &#x60;NetworkFeature&#x60; defined in the &#x60;NetworkFeature&#x60;s collection.
     * @param networkFeatureConfigRequest Polymorphic Network Feature Config Request (optional)
     * @return NetworkFeatureConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatureConfig networkFeatureConfigsCreate(NetworkFeatureConfigRequest networkFeatureConfigRequest) throws ApiException {
        ApiResponse<NetworkFeatureConfig> localVarResp = networkFeatureConfigsCreateWithHttpInfo(networkFeatureConfigRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a configuration for a &#x60;NetworkFeature&#x60; defined in the &#x60;NetworkFeature&#x60;s collection.
     * @param networkFeatureConfigRequest Polymorphic Network Feature Config Request (optional)
     * @return ApiResponse&lt;NetworkFeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatureConfig> networkFeatureConfigsCreateWithHttpInfo(NetworkFeatureConfigRequest networkFeatureConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = networkFeatureConfigsCreateValidateBeforeCall(networkFeatureConfigRequest, null);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a configuration for a &#x60;NetworkFeature&#x60; defined in the &#x60;NetworkFeature&#x60;s collection.
     * @param networkFeatureConfigRequest Polymorphic Network Feature Config Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsCreateAsync(NetworkFeatureConfigRequest networkFeatureConfigRequest, final ApiCallback<NetworkFeatureConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkFeatureConfigsCreateValidateBeforeCall(networkFeatureConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkFeatureConfigsDestroy
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsDestroyCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-feature-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkFeatureConfigsDestroyValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkFeatureConfigsDestroy(Async)");
        }

        return networkFeatureConfigsDestroyCall(id, _callback);

    }

    /**
     * 
     * Remove a network feature config.  The network feature config will be marked as &#x60;decommission_requested&#x60;. Decommissioning a network feature config will not cascade to related services or service configs.
     * @param id Get by id (required)
     * @return NetworkFeatureConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatureConfig networkFeatureConfigsDestroy(String id) throws ApiException {
        ApiResponse<NetworkFeatureConfig> localVarResp = networkFeatureConfigsDestroyWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a network feature config.  The network feature config will be marked as &#x60;decommission_requested&#x60;. Decommissioning a network feature config will not cascade to related services or service configs.
     * @param id Get by id (required)
     * @return ApiResponse&lt;NetworkFeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatureConfig> networkFeatureConfigsDestroyWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = networkFeatureConfigsDestroyValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a network feature config.  The network feature config will be marked as &#x60;decommission_requested&#x60;. Decommissioning a network feature config will not cascade to related services or service configs.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsDestroyAsync(String id, final ApiCallback<NetworkFeatureConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkFeatureConfigsDestroyValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkFeatureConfigsList
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param serviceConfig Filter by service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsListCall(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String serviceConfig, String networkFeature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-feature-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (stateIsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state__is_not", stateIsNot));
        }

        if (managingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managing_account", managingAccount));
        }

        if (consumingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consuming_account", consumingAccount));
        }

        if (externalRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_ref", externalRef));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (serviceConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_config", serviceConfig));
        }

        if (networkFeature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_feature", networkFeature));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkFeatureConfigsListValidateBeforeCall(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String serviceConfig, String networkFeature, final ApiCallback _callback) throws ApiException {
        return networkFeatureConfigsListCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, serviceConfig, networkFeature, _callback);

    }

    /**
     * 
     * Get all network feature configs.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param serviceConfig Filter by service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @return List&lt;NetworkFeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkFeatureConfig> networkFeatureConfigsList(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String serviceConfig, String networkFeature) throws ApiException {
        ApiResponse<List<NetworkFeatureConfig>> localVarResp = networkFeatureConfigsListWithHttpInfo(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, serviceConfig, networkFeature);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all network feature configs.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param serviceConfig Filter by service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @return ApiResponse&lt;List&lt;NetworkFeatureConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkFeatureConfig>> networkFeatureConfigsListWithHttpInfo(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String serviceConfig, String networkFeature) throws ApiException {
        okhttp3.Call localVarCall = networkFeatureConfigsListValidateBeforeCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, serviceConfig, networkFeature, null);
        Type localVarReturnType = new TypeToken<List<NetworkFeatureConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all network feature configs.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param serviceConfig Filter by service_config (optional)
     * @param networkFeature Filter by network_feature (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsListAsync(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String serviceConfig, String networkFeature, final ApiCallback<List<NetworkFeatureConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkFeatureConfigsListValidateBeforeCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, serviceConfig, networkFeature, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkFeatureConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkFeatureConfigsPartialUpdate
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdatePartial Polymorphic Network Feauture Config Update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsPartialUpdateCall(String id, NetworkFeatureConfigUpdatePartial networkFeatureConfigUpdatePartial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkFeatureConfigUpdatePartial;

        // create path and map variables
        String localVarPath = "/network-feature-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkFeatureConfigsPartialUpdateValidateBeforeCall(String id, NetworkFeatureConfigUpdatePartial networkFeatureConfigUpdatePartial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkFeatureConfigsPartialUpdate(Async)");
        }

        return networkFeatureConfigsPartialUpdateCall(id, networkFeatureConfigUpdatePartial, _callback);

    }

    /**
     * 
     * Update parts of a network feature configuration
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdatePartial Polymorphic Network Feauture Config Update (optional)
     * @return NetworkFeatureConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatureConfig networkFeatureConfigsPartialUpdate(String id, NetworkFeatureConfigUpdatePartial networkFeatureConfigUpdatePartial) throws ApiException {
        ApiResponse<NetworkFeatureConfig> localVarResp = networkFeatureConfigsPartialUpdateWithHttpInfo(id, networkFeatureConfigUpdatePartial);
        return localVarResp.getData();
    }

    /**
     * 
     * Update parts of a network feature configuration
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdatePartial Polymorphic Network Feauture Config Update (optional)
     * @return ApiResponse&lt;NetworkFeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatureConfig> networkFeatureConfigsPartialUpdateWithHttpInfo(String id, NetworkFeatureConfigUpdatePartial networkFeatureConfigUpdatePartial) throws ApiException {
        okhttp3.Call localVarCall = networkFeatureConfigsPartialUpdateValidateBeforeCall(id, networkFeatureConfigUpdatePartial, null);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update parts of a network feature configuration
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdatePartial Polymorphic Network Feauture Config Update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsPartialUpdateAsync(String id, NetworkFeatureConfigUpdatePartial networkFeatureConfigUpdatePartial, final ApiCallback<NetworkFeatureConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkFeatureConfigsPartialUpdateValidateBeforeCall(id, networkFeatureConfigUpdatePartial, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkFeatureConfigsRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-feature-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkFeatureConfigsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkFeatureConfigsRead(Async)");
        }

        return networkFeatureConfigsReadCall(id, _callback);

    }

    /**
     * 
     * Get a single network feature config.
     * @param id Get by id (required)
     * @return NetworkFeatureConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatureConfig networkFeatureConfigsRead(String id) throws ApiException {
        ApiResponse<NetworkFeatureConfig> localVarResp = networkFeatureConfigsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single network feature config.
     * @param id Get by id (required)
     * @return ApiResponse&lt;NetworkFeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatureConfig> networkFeatureConfigsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = networkFeatureConfigsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single network feature config.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsReadAsync(String id, final ApiCallback<NetworkFeatureConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkFeatureConfigsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkFeatureConfigsUpdate
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdate Polymorphic Network Feauture Config Update (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsUpdateCall(String id, NetworkFeatureConfigUpdate networkFeatureConfigUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkFeatureConfigUpdate;

        // create path and map variables
        String localVarPath = "/network-feature-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkFeatureConfigsUpdateValidateBeforeCall(String id, NetworkFeatureConfigUpdate networkFeatureConfigUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkFeatureConfigsUpdate(Async)");
        }

        return networkFeatureConfigsUpdateCall(id, networkFeatureConfigUpdate, _callback);

    }

    /**
     * 
     * Update a network feature configuration
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdate Polymorphic Network Feauture Config Update (optional)
     * @return NetworkFeatureConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatureConfig networkFeatureConfigsUpdate(String id, NetworkFeatureConfigUpdate networkFeatureConfigUpdate) throws ApiException {
        ApiResponse<NetworkFeatureConfig> localVarResp = networkFeatureConfigsUpdateWithHttpInfo(id, networkFeatureConfigUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a network feature configuration
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdate Polymorphic Network Feauture Config Update (optional)
     * @return ApiResponse&lt;NetworkFeatureConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatureConfig> networkFeatureConfigsUpdateWithHttpInfo(String id, NetworkFeatureConfigUpdate networkFeatureConfigUpdate) throws ApiException {
        okhttp3.Call localVarCall = networkFeatureConfigsUpdateValidateBeforeCall(id, networkFeatureConfigUpdate, null);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a network feature configuration
     * @param id Get by id (required)
     * @param networkFeatureConfigUpdate Polymorphic Network Feauture Config Update (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Feature Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkFeatureConfigsUpdateAsync(String id, NetworkFeatureConfigUpdate networkFeatureConfigUpdate, final ApiCallback<NetworkFeatureConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkFeatureConfigsUpdateValidateBeforeCall(id, networkFeatureConfigUpdate, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatureConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
