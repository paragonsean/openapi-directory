/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.CancellationPolicy;
import org.openapitools.client.model.CancellationRequest;
import org.openapitools.client.model.NetworkServiceConfig;
import org.openapitools.client.model.NetworkServiceConfigRequest;
import org.openapitools.client.model.NetworkServiceConfigUpdate;
import org.openapitools.client.model.NetworkServiceConfigUpdatePartial;
import org.openapitools.client.model.NetworkServiceConfigsDestroy400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkServiceConfigsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworkServiceConfigsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkServiceConfigsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for networkServiceConfigCancellationPolicyRead
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigCancellationPolicyReadCall(String id, String decommissionAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-service-configs/{id}/cancellation-policy"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (decommissionAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decommission_at", decommissionAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceConfigCancellationPolicyReadValidateBeforeCall(String id, String decommissionAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceConfigCancellationPolicyRead(Async)");
        }

        return networkServiceConfigCancellationPolicyReadCall(id, decommissionAt, _callback);

    }

    /**
     * 
     * The cancellation-policy can be queried to answer the questions:  If I cancel my subscription, *when will it be technically decommissioned*? If I cancel my subscription, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @return CancellationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public CancellationPolicy networkServiceConfigCancellationPolicyRead(String id, String decommissionAt) throws ApiException {
        ApiResponse<CancellationPolicy> localVarResp = networkServiceConfigCancellationPolicyReadWithHttpInfo(id, decommissionAt);
        return localVarResp.getData();
    }

    /**
     * 
     * The cancellation-policy can be queried to answer the questions:  If I cancel my subscription, *when will it be technically decommissioned*? If I cancel my subscription, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @return ApiResponse&lt;CancellationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancellationPolicy> networkServiceConfigCancellationPolicyReadWithHttpInfo(String id, String decommissionAt) throws ApiException {
        okhttp3.Call localVarCall = networkServiceConfigCancellationPolicyReadValidateBeforeCall(id, decommissionAt, null);
        Type localVarReturnType = new TypeToken<CancellationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The cancellation-policy can be queried to answer the questions:  If I cancel my subscription, *when will it be technically decommissioned*? If I cancel my subscription, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigCancellationPolicyReadAsync(String id, String decommissionAt, final ApiCallback<CancellationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceConfigCancellationPolicyReadValidateBeforeCall(id, decommissionAt, _callback);
        Type localVarReturnType = new TypeToken<CancellationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceConfigsCreate
     * @param networkServiceConfigRequest Polymorhic Network Service Config Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsCreateCall(NetworkServiceConfigRequest networkServiceConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkServiceConfigRequest;

        // create path and map variables
        String localVarPath = "/network-service-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceConfigsCreateValidateBeforeCall(NetworkServiceConfigRequest networkServiceConfigRequest, final ApiCallback _callback) throws ApiException {
        return networkServiceConfigsCreateCall(networkServiceConfigRequest, _callback);

    }

    /**
     * 
     * Create a &#x60;network-service-config&#x60;.
     * @param networkServiceConfigRequest Polymorhic Network Service Config Request (optional)
     * @return NetworkServiceConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceConfig networkServiceConfigsCreate(NetworkServiceConfigRequest networkServiceConfigRequest) throws ApiException {
        ApiResponse<NetworkServiceConfig> localVarResp = networkServiceConfigsCreateWithHttpInfo(networkServiceConfigRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a &#x60;network-service-config&#x60;.
     * @param networkServiceConfigRequest Polymorhic Network Service Config Request (optional)
     * @return ApiResponse&lt;NetworkServiceConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceConfig> networkServiceConfigsCreateWithHttpInfo(NetworkServiceConfigRequest networkServiceConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = networkServiceConfigsCreateValidateBeforeCall(networkServiceConfigRequest, null);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a &#x60;network-service-config&#x60;.
     * @param networkServiceConfigRequest Polymorhic Network Service Config Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsCreateAsync(NetworkServiceConfigRequest networkServiceConfigRequest, final ApiCallback<NetworkServiceConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceConfigsCreateValidateBeforeCall(networkServiceConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceConfigsDestroy
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsDestroyCall(String id, CancellationRequest cancellationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancellationRequest;

        // create path and map variables
        String localVarPath = "/network-service-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceConfigsDestroyValidateBeforeCall(String id, CancellationRequest cancellationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceConfigsDestroy(Async)");
        }

        return networkServiceConfigsDestroyCall(id, cancellationRequest, _callback);

    }

    /**
     * 
     * Request decommissioning the network service configuration.  The network service config will assume the state &#x60;decommission_requested&#x60;. This will cascade to related resources like &#x60;network-feature-configs&#x60;.
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @return NetworkServiceConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceConfig networkServiceConfigsDestroy(String id, CancellationRequest cancellationRequest) throws ApiException {
        ApiResponse<NetworkServiceConfig> localVarResp = networkServiceConfigsDestroyWithHttpInfo(id, cancellationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Request decommissioning the network service configuration.  The network service config will assume the state &#x60;decommission_requested&#x60;. This will cascade to related resources like &#x60;network-feature-configs&#x60;.
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @return ApiResponse&lt;NetworkServiceConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceConfig> networkServiceConfigsDestroyWithHttpInfo(String id, CancellationRequest cancellationRequest) throws ApiException {
        okhttp3.Call localVarCall = networkServiceConfigsDestroyValidateBeforeCall(id, cancellationRequest, null);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request decommissioning the network service configuration.  The network service config will assume the state &#x60;decommission_requested&#x60;. This will cascade to related resources like &#x60;network-feature-configs&#x60;.
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsDestroyAsync(String id, CancellationRequest cancellationRequest, final ApiCallback<NetworkServiceConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceConfigsDestroyValidateBeforeCall(id, cancellationRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceConfigsList
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param innerVlan Filter by inner_vlan (optional)
     * @param outerVlan Filter by outer_vlan (optional)
     * @param capacity Filter by capacity (optional)
     * @param networkService Filter by network_service (optional)
     * @param connection Filter by connection (optional)
     * @param productOffering Filter by product_offering (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsListCall(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, Integer innerVlan, Integer outerVlan, Integer capacity, String networkService, String connection, String productOffering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-service-configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (stateIsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state__is_not", stateIsNot));
        }

        if (managingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managing_account", managingAccount));
        }

        if (consumingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consuming_account", consumingAccount));
        }

        if (externalRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_ref", externalRef));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (innerVlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inner_vlan", innerVlan));
        }

        if (outerVlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outer_vlan", outerVlan));
        }

        if (capacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("capacity", capacity));
        }

        if (networkService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_service", networkService));
        }

        if (connection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection", connection));
        }

        if (productOffering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_offering", productOffering));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceConfigsListValidateBeforeCall(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, Integer innerVlan, Integer outerVlan, Integer capacity, String networkService, String connection, String productOffering, final ApiCallback _callback) throws ApiException {
        return networkServiceConfigsListCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, innerVlan, outerVlan, capacity, networkService, connection, productOffering, _callback);

    }

    /**
     * 
     * Get all &#x60;network-service-config&#x60;s.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param innerVlan Filter by inner_vlan (optional)
     * @param outerVlan Filter by outer_vlan (optional)
     * @param capacity Filter by capacity (optional)
     * @param networkService Filter by network_service (optional)
     * @param connection Filter by connection (optional)
     * @param productOffering Filter by product_offering (optional)
     * @return List&lt;NetworkServiceConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkServiceConfig> networkServiceConfigsList(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, Integer innerVlan, Integer outerVlan, Integer capacity, String networkService, String connection, String productOffering) throws ApiException {
        ApiResponse<List<NetworkServiceConfig>> localVarResp = networkServiceConfigsListWithHttpInfo(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, innerVlan, outerVlan, capacity, networkService, connection, productOffering);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all &#x60;network-service-config&#x60;s.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param innerVlan Filter by inner_vlan (optional)
     * @param outerVlan Filter by outer_vlan (optional)
     * @param capacity Filter by capacity (optional)
     * @param networkService Filter by network_service (optional)
     * @param connection Filter by connection (optional)
     * @param productOffering Filter by product_offering (optional)
     * @return ApiResponse&lt;List&lt;NetworkServiceConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkServiceConfig>> networkServiceConfigsListWithHttpInfo(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, Integer innerVlan, Integer outerVlan, Integer capacity, String networkService, String connection, String productOffering) throws ApiException {
        okhttp3.Call localVarCall = networkServiceConfigsListValidateBeforeCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, innerVlan, outerVlan, capacity, networkService, connection, productOffering, null);
        Type localVarReturnType = new TypeToken<List<NetworkServiceConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all &#x60;network-service-config&#x60;s.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param innerVlan Filter by inner_vlan (optional)
     * @param outerVlan Filter by outer_vlan (optional)
     * @param capacity Filter by capacity (optional)
     * @param networkService Filter by network_service (optional)
     * @param connection Filter by connection (optional)
     * @param productOffering Filter by product_offering (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsListAsync(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, Integer innerVlan, Integer outerVlan, Integer capacity, String networkService, String connection, String productOffering, final ApiCallback<List<NetworkServiceConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceConfigsListValidateBeforeCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, innerVlan, outerVlan, capacity, networkService, connection, productOffering, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkServiceConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceConfigsPartialUpdate
     * @param id Get by id (required)
     * @param networkServiceConfigUpdatePartial Polymorphic Network Service Config (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsPartialUpdateCall(String id, NetworkServiceConfigUpdatePartial networkServiceConfigUpdatePartial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkServiceConfigUpdatePartial;

        // create path and map variables
        String localVarPath = "/network-service-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceConfigsPartialUpdateValidateBeforeCall(String id, NetworkServiceConfigUpdatePartial networkServiceConfigUpdatePartial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceConfigsPartialUpdate(Async)");
        }

        return networkServiceConfigsPartialUpdateCall(id, networkServiceConfigUpdatePartial, _callback);

    }

    /**
     * 
     * Update parts of an exisiting &#x60;network-service-config&#x60;.
     * @param id Get by id (required)
     * @param networkServiceConfigUpdatePartial Polymorphic Network Service Config (optional)
     * @return NetworkServiceConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceConfig networkServiceConfigsPartialUpdate(String id, NetworkServiceConfigUpdatePartial networkServiceConfigUpdatePartial) throws ApiException {
        ApiResponse<NetworkServiceConfig> localVarResp = networkServiceConfigsPartialUpdateWithHttpInfo(id, networkServiceConfigUpdatePartial);
        return localVarResp.getData();
    }

    /**
     * 
     * Update parts of an exisiting &#x60;network-service-config&#x60;.
     * @param id Get by id (required)
     * @param networkServiceConfigUpdatePartial Polymorphic Network Service Config (optional)
     * @return ApiResponse&lt;NetworkServiceConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceConfig> networkServiceConfigsPartialUpdateWithHttpInfo(String id, NetworkServiceConfigUpdatePartial networkServiceConfigUpdatePartial) throws ApiException {
        okhttp3.Call localVarCall = networkServiceConfigsPartialUpdateValidateBeforeCall(id, networkServiceConfigUpdatePartial, null);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update parts of an exisiting &#x60;network-service-config&#x60;.
     * @param id Get by id (required)
     * @param networkServiceConfigUpdatePartial Polymorphic Network Service Config (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsPartialUpdateAsync(String id, NetworkServiceConfigUpdatePartial networkServiceConfigUpdatePartial, final ApiCallback<NetworkServiceConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceConfigsPartialUpdateValidateBeforeCall(id, networkServiceConfigUpdatePartial, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceConfigsRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-service-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceConfigsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceConfigsRead(Async)");
        }

        return networkServiceConfigsReadCall(id, _callback);

    }

    /**
     * 
     * Get a &#x60;network-service-config&#x60;
     * @param id Get by id (required)
     * @return NetworkServiceConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceConfig networkServiceConfigsRead(String id) throws ApiException {
        ApiResponse<NetworkServiceConfig> localVarResp = networkServiceConfigsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a &#x60;network-service-config&#x60;
     * @param id Get by id (required)
     * @return ApiResponse&lt;NetworkServiceConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceConfig> networkServiceConfigsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = networkServiceConfigsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a &#x60;network-service-config&#x60;
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsReadAsync(String id, final ApiCallback<NetworkServiceConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceConfigsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceConfigsUpdate
     * @param id Get by id (required)
     * @param networkServiceConfigUpdate Polymorphic Network Service Config (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsUpdateCall(String id, NetworkServiceConfigUpdate networkServiceConfigUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkServiceConfigUpdate;

        // create path and map variables
        String localVarPath = "/network-service-configs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceConfigsUpdateValidateBeforeCall(String id, NetworkServiceConfigUpdate networkServiceConfigUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceConfigsUpdate(Async)");
        }

        return networkServiceConfigsUpdateCall(id, networkServiceConfigUpdate, _callback);

    }

    /**
     * 
     * Update an exisiting &#x60;network-service-config&#x60;
     * @param id Get by id (required)
     * @param networkServiceConfigUpdate Polymorphic Network Service Config (optional)
     * @return NetworkServiceConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceConfig networkServiceConfigsUpdate(String id, NetworkServiceConfigUpdate networkServiceConfigUpdate) throws ApiException {
        ApiResponse<NetworkServiceConfig> localVarResp = networkServiceConfigsUpdateWithHttpInfo(id, networkServiceConfigUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an exisiting &#x60;network-service-config&#x60;
     * @param id Get by id (required)
     * @param networkServiceConfigUpdate Polymorphic Network Service Config (optional)
     * @return ApiResponse&lt;NetworkServiceConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceConfig> networkServiceConfigsUpdateWithHttpInfo(String id, NetworkServiceConfigUpdate networkServiceConfigUpdate) throws ApiException {
        okhttp3.Call localVarCall = networkServiceConfigsUpdateValidateBeforeCall(id, networkServiceConfigUpdate, null);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an exisiting &#x60;network-service-config&#x60;
     * @param id Get by id (required)
     * @param networkServiceConfigUpdate Polymorphic Network Service Config (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Service Config </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceConfigsUpdateAsync(String id, NetworkServiceConfigUpdate networkServiceConfigUpdate, final ApiCallback<NetworkServiceConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceConfigsUpdateValidateBeforeCall(id, networkServiceConfigUpdate, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
