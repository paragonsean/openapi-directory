/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CloudNetworkProductOffering;
import org.openapitools.client.model.ExchangeLanNetworkProductOffering;
import org.openapitools.client.model.MP2MPNetworkProductOffering;
import org.openapitools.client.model.P2MPNetworkProductOffering;
import org.openapitools.client.model.P2PNetworkProductOffering;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductOffering extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ProductOffering.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ProductOffering.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ProductOffering' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeLanNetworkProductOffering> adapterExchangeLanNetworkProductOffering = gson.getDelegateAdapter(this, TypeToken.get(ExchangeLanNetworkProductOffering.class));
            final TypeAdapter<P2PNetworkProductOffering> adapterP2PNetworkProductOffering = gson.getDelegateAdapter(this, TypeToken.get(P2PNetworkProductOffering.class));
            final TypeAdapter<MP2MPNetworkProductOffering> adapterMP2MPNetworkProductOffering = gson.getDelegateAdapter(this, TypeToken.get(MP2MPNetworkProductOffering.class));
            final TypeAdapter<P2MPNetworkProductOffering> adapterP2MPNetworkProductOffering = gson.getDelegateAdapter(this, TypeToken.get(P2MPNetworkProductOffering.class));
            final TypeAdapter<CloudNetworkProductOffering> adapterCloudNetworkProductOffering = gson.getDelegateAdapter(this, TypeToken.get(CloudNetworkProductOffering.class));

            return (TypeAdapter<T>) new TypeAdapter<ProductOffering>() {
                @Override
                public void write(JsonWriter out, ProductOffering value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ExchangeLanNetworkProductOffering`
                    if (value.getActualInstance() instanceof ExchangeLanNetworkProductOffering) {
                        JsonElement element = adapterExchangeLanNetworkProductOffering.toJsonTree((ExchangeLanNetworkProductOffering)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2PNetworkProductOffering`
                    if (value.getActualInstance() instanceof P2PNetworkProductOffering) {
                        JsonElement element = adapterP2PNetworkProductOffering.toJsonTree((P2PNetworkProductOffering)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MP2MPNetworkProductOffering`
                    if (value.getActualInstance() instanceof MP2MPNetworkProductOffering) {
                        JsonElement element = adapterMP2MPNetworkProductOffering.toJsonTree((MP2MPNetworkProductOffering)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2MPNetworkProductOffering`
                    if (value.getActualInstance() instanceof P2MPNetworkProductOffering) {
                        JsonElement element = adapterP2MPNetworkProductOffering.toJsonTree((P2MPNetworkProductOffering)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudNetworkProductOffering`
                    if (value.getActualInstance() instanceof CloudNetworkProductOffering) {
                        JsonElement element = adapterCloudNetworkProductOffering.toJsonTree((CloudNetworkProductOffering)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CloudNetworkProductOffering, ExchangeLanNetworkProductOffering, MP2MPNetworkProductOffering, P2MPNetworkProductOffering, P2PNetworkProductOffering");
                }

                @Override
                public ProductOffering read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ExchangeLanNetworkProductOffering
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExchangeLanNetworkProductOffering.validateJsonElement(jsonElement);
                        actualAdapter = adapterExchangeLanNetworkProductOffering;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExchangeLanNetworkProductOffering'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExchangeLanNetworkProductOffering failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExchangeLanNetworkProductOffering'", e);
                    }
                    // deserialize P2PNetworkProductOffering
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2PNetworkProductOffering.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2PNetworkProductOffering;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2PNetworkProductOffering'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2PNetworkProductOffering failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2PNetworkProductOffering'", e);
                    }
                    // deserialize MP2MPNetworkProductOffering
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MP2MPNetworkProductOffering.validateJsonElement(jsonElement);
                        actualAdapter = adapterMP2MPNetworkProductOffering;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MP2MPNetworkProductOffering'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MP2MPNetworkProductOffering failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MP2MPNetworkProductOffering'", e);
                    }
                    // deserialize P2MPNetworkProductOffering
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2MPNetworkProductOffering.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2MPNetworkProductOffering;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2MPNetworkProductOffering'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2MPNetworkProductOffering failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2MPNetworkProductOffering'", e);
                    }
                    // deserialize CloudNetworkProductOffering
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudNetworkProductOffering.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudNetworkProductOffering;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudNetworkProductOffering'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudNetworkProductOffering failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudNetworkProductOffering'", e);
                    }

                    if (match == 1) {
                        ProductOffering ret = new ProductOffering();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ProductOffering: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ProductOffering() {
        super("oneOf", Boolean.FALSE);
    }

    public ProductOffering(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ExchangeLanNetworkProductOffering", ExchangeLanNetworkProductOffering.class);
        schemas.put("P2PNetworkProductOffering", P2PNetworkProductOffering.class);
        schemas.put("MP2MPNetworkProductOffering", MP2MPNetworkProductOffering.class);
        schemas.put("P2MPNetworkProductOffering", P2MPNetworkProductOffering.class);
        schemas.put("CloudNetworkProductOffering", CloudNetworkProductOffering.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ProductOffering.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CloudNetworkProductOffering, ExchangeLanNetworkProductOffering, MP2MPNetworkProductOffering, P2MPNetworkProductOffering, P2PNetworkProductOffering
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ExchangeLanNetworkProductOffering) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2PNetworkProductOffering) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MP2MPNetworkProductOffering) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2MPNetworkProductOffering) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudNetworkProductOffering) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CloudNetworkProductOffering, ExchangeLanNetworkProductOffering, MP2MPNetworkProductOffering, P2MPNetworkProductOffering, P2PNetworkProductOffering");
    }

    /**
     * Get the actual instance, which can be the following:
     * CloudNetworkProductOffering, ExchangeLanNetworkProductOffering, MP2MPNetworkProductOffering, P2MPNetworkProductOffering, P2PNetworkProductOffering
     *
     * @return The actual instance (CloudNetworkProductOffering, ExchangeLanNetworkProductOffering, MP2MPNetworkProductOffering, P2MPNetworkProductOffering, P2PNetworkProductOffering)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExchangeLanNetworkProductOffering`. If the actual instance is not `ExchangeLanNetworkProductOffering`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExchangeLanNetworkProductOffering`
     * @throws ClassCastException if the instance is not `ExchangeLanNetworkProductOffering`
     */
    public ExchangeLanNetworkProductOffering getExchangeLanNetworkProductOffering() throws ClassCastException {
        return (ExchangeLanNetworkProductOffering)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2PNetworkProductOffering`. If the actual instance is not `P2PNetworkProductOffering`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2PNetworkProductOffering`
     * @throws ClassCastException if the instance is not `P2PNetworkProductOffering`
     */
    public P2PNetworkProductOffering getP2PNetworkProductOffering() throws ClassCastException {
        return (P2PNetworkProductOffering)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MP2MPNetworkProductOffering`. If the actual instance is not `MP2MPNetworkProductOffering`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MP2MPNetworkProductOffering`
     * @throws ClassCastException if the instance is not `MP2MPNetworkProductOffering`
     */
    public MP2MPNetworkProductOffering getMP2MPNetworkProductOffering() throws ClassCastException {
        return (MP2MPNetworkProductOffering)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2MPNetworkProductOffering`. If the actual instance is not `P2MPNetworkProductOffering`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2MPNetworkProductOffering`
     * @throws ClassCastException if the instance is not `P2MPNetworkProductOffering`
     */
    public P2MPNetworkProductOffering getP2MPNetworkProductOffering() throws ClassCastException {
        return (P2MPNetworkProductOffering)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudNetworkProductOffering`. If the actual instance is not `CloudNetworkProductOffering`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudNetworkProductOffering`
     * @throws ClassCastException if the instance is not `CloudNetworkProductOffering`
     */
    public CloudNetworkProductOffering getCloudNetworkProductOffering() throws ClassCastException {
        return (CloudNetworkProductOffering)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ProductOffering
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ExchangeLanNetworkProductOffering
        try {
            ExchangeLanNetworkProductOffering.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ExchangeLanNetworkProductOffering failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2PNetworkProductOffering
        try {
            P2PNetworkProductOffering.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2PNetworkProductOffering failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MP2MPNetworkProductOffering
        try {
            MP2MPNetworkProductOffering.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MP2MPNetworkProductOffering failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2MPNetworkProductOffering
        try {
            P2MPNetworkProductOffering.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2MPNetworkProductOffering failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudNetworkProductOffering
        try {
            CloudNetworkProductOffering.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudNetworkProductOffering failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ProductOffering with oneOf schemas: CloudNetworkProductOffering, ExchangeLanNetworkProductOffering, MP2MPNetworkProductOffering, P2MPNetworkProductOffering, P2PNetworkProductOffering. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ProductOffering given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ProductOffering
     * @throws IOException if the JSON string is invalid with respect to ProductOffering
     */
    public static ProductOffering fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ProductOffering.class);
    }

    /**
     * Convert an instance of ProductOffering to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

