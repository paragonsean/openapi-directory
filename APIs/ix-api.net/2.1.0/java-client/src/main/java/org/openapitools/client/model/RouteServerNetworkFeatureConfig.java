/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Status;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RouteServerNetworkFeatureConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteServerNetworkFeatureConfig {
  public static final String SERIALIZED_NAME_AS_SET_V4 = "as_set_v4";
  @SerializedName(SERIALIZED_NAME_AS_SET_V4)
  private String asSetV4;

  public static final String SERIALIZED_NAME_AS_SET_V6 = "as_set_v6";
  @SerializedName(SERIALIZED_NAME_AS_SET_V6)
  private String asSetV6;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Long asn;

  /**
   * The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 
   */
  @JsonAdapter(BgpSessionTypeEnum.Adapter.class)
  public enum BgpSessionTypeEnum {
    ACTIVE("active"),
    
    PASSIVE("passive");

    private String value;

    BgpSessionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BgpSessionTypeEnum fromValue(String value) {
      for (BgpSessionTypeEnum b : BgpSessionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BgpSessionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BgpSessionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BgpSessionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BgpSessionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BgpSessionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BGP_SESSION_TYPE = "bgp_session_type";
  @SerializedName(SERIALIZED_NAME_BGP_SESSION_TYPE)
  private BgpSessionTypeEnum bgpSessionType;

  public static final String SERIALIZED_NAME_BILLING_ACCOUNT = "billing_account";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT)
  private String billingAccount;

  public static final String SERIALIZED_NAME_CONSUMING_ACCOUNT = "consuming_account";
  @SerializedName(SERIALIZED_NAME_CONSUMING_ACCOUNT)
  private String consumingAccount;

  public static final String SERIALIZED_NAME_CONTRACT_REF = "contract_ref";
  @SerializedName(SERIALIZED_NAME_CONTRACT_REF)
  private String contractRef;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external_ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  private String externalRef;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSERT_IXP_ASN = "insert_ixp_asn";
  @SerializedName(SERIALIZED_NAME_INSERT_IXP_ASN)
  private Boolean insertIxpAsn = true;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_MANAGING_ACCOUNT = "managing_account";
  @SerializedName(SERIALIZED_NAME_MANAGING_ACCOUNT)
  private String managingAccount;

  public static final String SERIALIZED_NAME_MAX_PREFIX_V4 = "max_prefix_v4";
  @SerializedName(SERIALIZED_NAME_MAX_PREFIX_V4)
  private Integer maxPrefixV4;

  public static final String SERIALIZED_NAME_MAX_PREFIX_V6 = "max_prefix_v6";
  @SerializedName(SERIALIZED_NAME_MAX_PREFIX_V6)
  private Integer maxPrefixV6;

  public static final String SERIALIZED_NAME_NETWORK_FEATURE = "network_feature";
  @SerializedName(SERIALIZED_NAME_NETWORK_FEATURE)
  private String networkFeature;

  public static final String SERIALIZED_NAME_NETWORK_SERVICE_CONFIG = "network_service_config";
  @SerializedName(SERIALIZED_NAME_NETWORK_SERVICE_CONFIG)
  private String networkServiceConfig;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password = "";

  public static final String SERIALIZED_NAME_PURCHASE_ORDER = "purchase_order";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER)
  private String purchaseOrder = "";

  public static final String SERIALIZED_NAME_ROLE_ASSIGNMENTS = "role_assignments";
  @SerializedName(SERIALIZED_NAME_ROLE_ASSIGNMENTS)
  private List<String> roleAssignments = new ArrayList<>();

  /**
   * Set the session mode with the routeserver. 
   */
  @JsonAdapter(SessionModeEnum.Adapter.class)
  public enum SessionModeEnum {
    PUBLIC("public"),
    
    COLLECTOR("collector");

    private String value;

    SessionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionModeEnum fromValue(String value) {
      for (SessionModeEnum b : SessionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_MODE = "session_mode";
  @SerializedName(SERIALIZED_NAME_SESSION_MODE)
  private SessionModeEnum sessionMode;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    REQUESTED("requested"),
    
    ALLOCATED("allocated"),
    
    TESTING("testing"),
    
    PRODUCTION("production"),
    
    PRODUCTION_CHANGE_PENDING("production_change_pending"),
    
    DECOMMISSION_REQUESTED("decommission_requested"),
    
    DECOMMISSIONED("decommissioned"),
    
    ARCHIVED("archived"),
    
    ERROR("error"),
    
    OPERATOR("operator"),
    
    SCHEDULED("scheduled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<Status> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RouteServerNetworkFeatureConfig() {
  }

  public RouteServerNetworkFeatureConfig asSetV4(String asSetV4) {
    this.asSetV4 = asSetV4;
    return this;
  }

  /**
   * AS-SET of the customer for IPv4 prefix filtering. This is used to generate filters on the router servers.  Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the &#x60;af_inet&#x60; address family. If multiple address families are supported, it is optional if the &#x60;as_set_v6&#x60; is provided.  Important: The format has to be: \&quot;AS-SET@IRR\&quot;. IRR is the database where the AS-SET is registred. Typically used IRR&#39;s are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
   * @return asSetV4
   */
  @javax.annotation.Nullable
  public String getAsSetV4() {
    return asSetV4;
  }

  public void setAsSetV4(String asSetV4) {
    this.asSetV4 = asSetV4;
  }


  public RouteServerNetworkFeatureConfig asSetV6(String asSetV6) {
    this.asSetV6 = asSetV6;
    return this;
  }

  /**
   * AS-SET of the customer for IPv6. This is used to generate filters on the router servers. Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the &#x60;af_inet6&#x60; address family. If multiple address families are supported, it is optional if the &#x60;as_set_v4&#x60; is provided.  Important: The format has to be: \&quot;AS-SET@IRR\&quot;. IRR is the database where the AS-SET is registred. Typically used IRR&#39;s are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 
   * @return asSetV6
   */
  @javax.annotation.Nullable
  public String getAsSetV6() {
    return asSetV6;
  }

  public void setAsSetV6(String asSetV6) {
    this.asSetV6 = asSetV6;
  }


  public RouteServerNetworkFeatureConfig asn(Long asn) {
    this.asn = asn;
    return this;
  }

  /**
   * The ASN of the peer. 
   * minimum: 0
   * maximum: 4294967295
   * @return asn
   */
  @javax.annotation.Nonnull
  public Long getAsn() {
    return asn;
  }

  public void setAsn(Long asn) {
    this.asn = asn;
  }


  public RouteServerNetworkFeatureConfig bgpSessionType(BgpSessionTypeEnum bgpSessionType) {
    this.bgpSessionType = bgpSessionType;
    return this;
  }

  /**
   * The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 
   * @return bgpSessionType
   */
  @javax.annotation.Nonnull
  public BgpSessionTypeEnum getBgpSessionType() {
    return bgpSessionType;
  }

  public void setBgpSessionType(BgpSessionTypeEnum bgpSessionType) {
    this.bgpSessionType = bgpSessionType;
  }


  public RouteServerNetworkFeatureConfig billingAccount(String billingAccount) {
    this.billingAccount = billingAccount;
    return this;
  }

  /**
   * An account requires billing_information to be used as a &#x60;billing_account&#x60;.
   * @return billingAccount
   */
  @javax.annotation.Nonnull
  public String getBillingAccount() {
    return billingAccount;
  }

  public void setBillingAccount(String billingAccount) {
    this.billingAccount = billingAccount;
  }


  public RouteServerNetworkFeatureConfig consumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account consuming a service.  Used to be &#x60;owning_customer&#x60;. 
   * @return consumingAccount
   */
  @javax.annotation.Nonnull
  public String getConsumingAccount() {
    return consumingAccount;
  }

  public void setConsumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
  }


  public RouteServerNetworkFeatureConfig contractRef(String contractRef) {
    this.contractRef = contractRef;
    return this;
  }

  /**
   * A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 
   * @return contractRef
   */
  @javax.annotation.Nullable
  public String getContractRef() {
    return contractRef;
  }

  public void setContractRef(String contractRef) {
    this.contractRef = contractRef;
  }


  public RouteServerNetworkFeatureConfig externalRef(String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * Reference field, free to use for the API user.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(String externalRef) {
    this.externalRef = externalRef;
  }


  public RouteServerNetworkFeatureConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RouteServerNetworkFeatureConfig insertIxpAsn(Boolean insertIxpAsn) {
    this.insertIxpAsn = insertIxpAsn;
    return this;
  }

  /**
   * Insert the ASN of the exchange into the AS path. This function is only used in special cases. In 99% of all cases, it should be false. 
   * @return insertIxpAsn
   */
  @javax.annotation.Nullable
  public Boolean getInsertIxpAsn() {
    return insertIxpAsn;
  }

  public void setInsertIxpAsn(Boolean insertIxpAsn) {
    this.insertIxpAsn = insertIxpAsn;
  }


  public RouteServerNetworkFeatureConfig ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public RouteServerNetworkFeatureConfig managingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
   * @return managingAccount
   */
  @javax.annotation.Nonnull
  public String getManagingAccount() {
    return managingAccount;
  }

  public void setManagingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
  }


  public RouteServerNetworkFeatureConfig maxPrefixV4(Integer maxPrefixV4) {
    this.maxPrefixV4 = maxPrefixV4;
    return this;
  }

  /**
   * Announcing more than &#x60;max_prefix&#x60; IPv4 prefixes the bgp session will be droped. 
   * minimum: 0
   * @return maxPrefixV4
   */
  @javax.annotation.Nullable
  public Integer getMaxPrefixV4() {
    return maxPrefixV4;
  }

  public void setMaxPrefixV4(Integer maxPrefixV4) {
    this.maxPrefixV4 = maxPrefixV4;
  }


  public RouteServerNetworkFeatureConfig maxPrefixV6(Integer maxPrefixV6) {
    this.maxPrefixV6 = maxPrefixV6;
    return this;
  }

  /**
   * Announcing more than &#x60;max_prefix&#x60; IPv6 prefixes the bgp session will be droped. 
   * minimum: 0
   * @return maxPrefixV6
   */
  @javax.annotation.Nullable
  public Integer getMaxPrefixV6() {
    return maxPrefixV6;
  }

  public void setMaxPrefixV6(Integer maxPrefixV6) {
    this.maxPrefixV6 = maxPrefixV6;
  }


  public RouteServerNetworkFeatureConfig networkFeature(String networkFeature) {
    this.networkFeature = networkFeature;
    return this;
  }

  /**
   * Get networkFeature
   * @return networkFeature
   */
  @javax.annotation.Nonnull
  public String getNetworkFeature() {
    return networkFeature;
  }

  public void setNetworkFeature(String networkFeature) {
    this.networkFeature = networkFeature;
  }


  public RouteServerNetworkFeatureConfig networkServiceConfig(String networkServiceConfig) {
    this.networkServiceConfig = networkServiceConfig;
    return this;
  }

  /**
   * Get networkServiceConfig
   * @return networkServiceConfig
   */
  @javax.annotation.Nonnull
  public String getNetworkServiceConfig() {
    return networkServiceConfig;
  }

  public void setNetworkServiceConfig(String networkServiceConfig) {
    this.networkServiceConfig = networkServiceConfig;
  }


  public RouteServerNetworkFeatureConfig password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The cleartext BGP session password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public RouteServerNetworkFeatureConfig purchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
    return this;
  }

  /**
   * Purchase Order ID which will be displayed on the invoice. 
   * @return purchaseOrder
   */
  @javax.annotation.Nullable
  public String getPurchaseOrder() {
    return purchaseOrder;
  }

  public void setPurchaseOrder(String purchaseOrder) {
    this.purchaseOrder = purchaseOrder;
  }


  public RouteServerNetworkFeatureConfig roleAssignments(List<String> roleAssignments) {
    this.roleAssignments = roleAssignments;
    return this;
  }

  public RouteServerNetworkFeatureConfig addRoleAssignmentsItem(String roleAssignmentsItem) {
    if (this.roleAssignments == null) {
      this.roleAssignments = new ArrayList<>();
    }
    this.roleAssignments.add(roleAssignmentsItem);
    return this;
  }

  /**
   * A set of &#x60;RoleAssignment&#x60;s. See the documentation on the specific &#x60;required_contact_roles&#x60;, &#x60;nfc_required_contact_roles&#x60; or &#x60;nsc_required_contact_roles&#x60; on what &#x60;RoleAssignment&#x60;s to provide. 
   * @return roleAssignments
   */
  @javax.annotation.Nonnull
  public List<String> getRoleAssignments() {
    return roleAssignments;
  }

  public void setRoleAssignments(List<String> roleAssignments) {
    this.roleAssignments = roleAssignments;
  }


  public RouteServerNetworkFeatureConfig sessionMode(SessionModeEnum sessionMode) {
    this.sessionMode = sessionMode;
    return this;
  }

  /**
   * Set the session mode with the routeserver. 
   * @return sessionMode
   */
  @javax.annotation.Nonnull
  public SessionModeEnum getSessionMode() {
    return sessionMode;
  }

  public void setSessionMode(SessionModeEnum sessionMode) {
    this.sessionMode = sessionMode;
  }


  public RouteServerNetworkFeatureConfig state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public RouteServerNetworkFeatureConfig status(List<Status> status) {
    this.status = status;
    return this;
  }

  public RouteServerNetworkFeatureConfig addStatusItem(Status statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public List<Status> getStatus() {
    return status;
  }

  public void setStatus(List<Status> status) {
    this.status = status;
  }


  public RouteServerNetworkFeatureConfig type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteServerNetworkFeatureConfig routeServerNetworkFeatureConfig = (RouteServerNetworkFeatureConfig) o;
    return Objects.equals(this.asSetV4, routeServerNetworkFeatureConfig.asSetV4) &&
        Objects.equals(this.asSetV6, routeServerNetworkFeatureConfig.asSetV6) &&
        Objects.equals(this.asn, routeServerNetworkFeatureConfig.asn) &&
        Objects.equals(this.bgpSessionType, routeServerNetworkFeatureConfig.bgpSessionType) &&
        Objects.equals(this.billingAccount, routeServerNetworkFeatureConfig.billingAccount) &&
        Objects.equals(this.consumingAccount, routeServerNetworkFeatureConfig.consumingAccount) &&
        Objects.equals(this.contractRef, routeServerNetworkFeatureConfig.contractRef) &&
        Objects.equals(this.externalRef, routeServerNetworkFeatureConfig.externalRef) &&
        Objects.equals(this.id, routeServerNetworkFeatureConfig.id) &&
        Objects.equals(this.insertIxpAsn, routeServerNetworkFeatureConfig.insertIxpAsn) &&
        Objects.equals(this.ip, routeServerNetworkFeatureConfig.ip) &&
        Objects.equals(this.managingAccount, routeServerNetworkFeatureConfig.managingAccount) &&
        Objects.equals(this.maxPrefixV4, routeServerNetworkFeatureConfig.maxPrefixV4) &&
        Objects.equals(this.maxPrefixV6, routeServerNetworkFeatureConfig.maxPrefixV6) &&
        Objects.equals(this.networkFeature, routeServerNetworkFeatureConfig.networkFeature) &&
        Objects.equals(this.networkServiceConfig, routeServerNetworkFeatureConfig.networkServiceConfig) &&
        Objects.equals(this.password, routeServerNetworkFeatureConfig.password) &&
        Objects.equals(this.purchaseOrder, routeServerNetworkFeatureConfig.purchaseOrder) &&
        Objects.equals(this.roleAssignments, routeServerNetworkFeatureConfig.roleAssignments) &&
        Objects.equals(this.sessionMode, routeServerNetworkFeatureConfig.sessionMode) &&
        Objects.equals(this.state, routeServerNetworkFeatureConfig.state) &&
        Objects.equals(this.status, routeServerNetworkFeatureConfig.status) &&
        Objects.equals(this.type, routeServerNetworkFeatureConfig.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asSetV4, asSetV6, asn, bgpSessionType, billingAccount, consumingAccount, contractRef, externalRef, id, insertIxpAsn, ip, managingAccount, maxPrefixV4, maxPrefixV6, networkFeature, networkServiceConfig, password, purchaseOrder, roleAssignments, sessionMode, state, status, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteServerNetworkFeatureConfig {\n");
    sb.append("    asSetV4: ").append(toIndentedString(asSetV4)).append("\n");
    sb.append("    asSetV6: ").append(toIndentedString(asSetV6)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    bgpSessionType: ").append(toIndentedString(bgpSessionType)).append("\n");
    sb.append("    billingAccount: ").append(toIndentedString(billingAccount)).append("\n");
    sb.append("    consumingAccount: ").append(toIndentedString(consumingAccount)).append("\n");
    sb.append("    contractRef: ").append(toIndentedString(contractRef)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    insertIxpAsn: ").append(toIndentedString(insertIxpAsn)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    managingAccount: ").append(toIndentedString(managingAccount)).append("\n");
    sb.append("    maxPrefixV4: ").append(toIndentedString(maxPrefixV4)).append("\n");
    sb.append("    maxPrefixV6: ").append(toIndentedString(maxPrefixV6)).append("\n");
    sb.append("    networkFeature: ").append(toIndentedString(networkFeature)).append("\n");
    sb.append("    networkServiceConfig: ").append(toIndentedString(networkServiceConfig)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    purchaseOrder: ").append(toIndentedString(purchaseOrder)).append("\n");
    sb.append("    roleAssignments: ").append(toIndentedString(roleAssignments)).append("\n");
    sb.append("    sessionMode: ").append(toIndentedString(sessionMode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("as_set_v4");
    openapiFields.add("as_set_v6");
    openapiFields.add("asn");
    openapiFields.add("bgp_session_type");
    openapiFields.add("billing_account");
    openapiFields.add("consuming_account");
    openapiFields.add("contract_ref");
    openapiFields.add("external_ref");
    openapiFields.add("id");
    openapiFields.add("insert_ixp_asn");
    openapiFields.add("ip");
    openapiFields.add("managing_account");
    openapiFields.add("max_prefix_v4");
    openapiFields.add("max_prefix_v6");
    openapiFields.add("network_feature");
    openapiFields.add("network_service_config");
    openapiFields.add("password");
    openapiFields.add("purchase_order");
    openapiFields.add("role_assignments");
    openapiFields.add("session_mode");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asn");
    openapiRequiredFields.add("bgp_session_type");
    openapiRequiredFields.add("billing_account");
    openapiRequiredFields.add("consuming_account");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("managing_account");
    openapiRequiredFields.add("network_feature");
    openapiRequiredFields.add("network_service_config");
    openapiRequiredFields.add("role_assignments");
    openapiRequiredFields.add("session_mode");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteServerNetworkFeatureConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteServerNetworkFeatureConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteServerNetworkFeatureConfig is not found in the empty JSON string", RouteServerNetworkFeatureConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteServerNetworkFeatureConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteServerNetworkFeatureConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RouteServerNetworkFeatureConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("as_set_v4") != null && !jsonObj.get("as_set_v4").isJsonNull()) && !jsonObj.get("as_set_v4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as_set_v4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as_set_v4").toString()));
      }
      if ((jsonObj.get("as_set_v6") != null && !jsonObj.get("as_set_v6").isJsonNull()) && !jsonObj.get("as_set_v6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as_set_v6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as_set_v6").toString()));
      }
      if (!jsonObj.get("bgp_session_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bgp_session_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bgp_session_type").toString()));
      }
      // validate the required field `bgp_session_type`
      BgpSessionTypeEnum.validateJsonElement(jsonObj.get("bgp_session_type"));
      if (!jsonObj.get("billing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_account").toString()));
      }
      if (!jsonObj.get("consuming_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consuming_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consuming_account").toString()));
      }
      if ((jsonObj.get("contract_ref") != null && !jsonObj.get("contract_ref").isJsonNull()) && !jsonObj.get("contract_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_ref").toString()));
      }
      if ((jsonObj.get("external_ref") != null && !jsonObj.get("external_ref").isJsonNull()) && !jsonObj.get("external_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_ref").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("managing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managing_account").toString()));
      }
      if (!jsonObj.get("network_feature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_feature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_feature").toString()));
      }
      if (!jsonObj.get("network_service_config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_service_config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_service_config").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("purchase_order") != null && !jsonObj.get("purchase_order").isJsonNull()) && !jsonObj.get("purchase_order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_order").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("role_assignments") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("role_assignments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_assignments` to be an array in the JSON string but got `%s`", jsonObj.get("role_assignments").toString()));
      }
      if (!jsonObj.get("session_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_mode").toString()));
      }
      // validate the required field `session_mode`
      SessionModeEnum.validateJsonElement(jsonObj.get("session_mode"));
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JsonArray jsonArraystatus = jsonObj.getAsJsonArray("status");
        if (jsonArraystatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
          }

          // validate the optional field `status` (array)
          for (int i = 0; i < jsonArraystatus.size(); i++) {
            Status.validateJsonElement(jsonArraystatus.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteServerNetworkFeatureConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteServerNetworkFeatureConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteServerNetworkFeatureConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteServerNetworkFeatureConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteServerNetworkFeatureConfig>() {
           @Override
           public void write(JsonWriter out, RouteServerNetworkFeatureConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteServerNetworkFeatureConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteServerNetworkFeatureConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteServerNetworkFeatureConfig
   * @throws IOException if the JSON string is invalid with respect to RouteServerNetworkFeatureConfig
   */
  public static RouteServerNetworkFeatureConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteServerNetworkFeatureConfig.class);
  }

  /**
   * Convert an instance of RouteServerNetworkFeatureConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

