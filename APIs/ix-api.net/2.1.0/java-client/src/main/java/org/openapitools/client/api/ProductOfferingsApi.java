/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.ProductOffering;
import org.openapitools.client.model.ProductOfferingPartial;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductOfferingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductOfferingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductOfferingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productOfferingsList
     * @param id Filter by id (optional)
     * @param type Filter by type (optional)
     * @param name Filter by name (optional)
     * @param handoverMetroArea Filter by handover_metro_area (optional)
     * @param handoverMetroAreaNetwork Filter by handover_metro_area_network (optional)
     * @param serviceMetroArea Filter by service_metro_area (optional)
     * @param serviceMetroAreaNetwork Filter by service_metro_area_network (optional)
     * @param serviceProvider Filter by service_provider (optional)
     * @param downgradeAllowed Filter by downgrade_allowed (optional)
     * @param upgradeAllowed Filter by upgrade_allowed (optional)
     * @param bandwidth Find product offerings where bandwidth is within the range of &#x60;bandwidth_min&#x60; and &#x60;bandwidth_max&#x60;. (optional)
     * @param physicalPortSpeed Filter by physical_port_speed (optional)
     * @param serviceProviderRegion Filter by service_provider_region (optional)
     * @param serviceProviderPop Filter by service_provider_pop (optional)
     * @param deliveryMethod Filter by delivery_method (optional)
     * @param cloudKey For product offerings of type &#x60;cloud_vc&#x60;, if the &#x60;service_provider_workflow&#x60; is &#x60;provider_first&#x60; the &#x60;cloud_key&#x60; will be used for filtering the relevant offerings. (optional)
     * @param fields Returned objects only have properties which are present in the list of fields. The required &#x60;type&#x60; property is *implicitly* included. The results are *deduplicated*.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOfferingsListCall(List<String> id, String type, String name, String handoverMetroArea, String handoverMetroAreaNetwork, String serviceMetroArea, String serviceMetroAreaNetwork, String serviceProvider, String downgradeAllowed, String upgradeAllowed, Integer bandwidth, Integer physicalPortSpeed, String serviceProviderRegion, String serviceProviderPop, String deliveryMethod, String cloudKey, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product-offerings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (handoverMetroArea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handover_metro_area", handoverMetroArea));
        }

        if (handoverMetroAreaNetwork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("handover_metro_area_network", handoverMetroAreaNetwork));
        }

        if (serviceMetroArea != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_metro_area", serviceMetroArea));
        }

        if (serviceMetroAreaNetwork != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_metro_area_network", serviceMetroAreaNetwork));
        }

        if (serviceProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_provider", serviceProvider));
        }

        if (downgradeAllowed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downgrade_allowed", downgradeAllowed));
        }

        if (upgradeAllowed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upgrade_allowed", upgradeAllowed));
        }

        if (bandwidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bandwidth", bandwidth));
        }

        if (physicalPortSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("physical_port_speed", physicalPortSpeed));
        }

        if (serviceProviderRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_provider_region", serviceProviderRegion));
        }

        if (serviceProviderPop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_provider_pop", serviceProviderPop));
        }

        if (deliveryMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery_method", deliveryMethod));
        }

        if (cloudKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cloud_key", cloudKey));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOfferingsListValidateBeforeCall(List<String> id, String type, String name, String handoverMetroArea, String handoverMetroAreaNetwork, String serviceMetroArea, String serviceMetroAreaNetwork, String serviceProvider, String downgradeAllowed, String upgradeAllowed, Integer bandwidth, Integer physicalPortSpeed, String serviceProviderRegion, String serviceProviderPop, String deliveryMethod, String cloudKey, String fields, final ApiCallback _callback) throws ApiException {
        return productOfferingsListCall(id, type, name, handoverMetroArea, handoverMetroAreaNetwork, serviceMetroArea, serviceMetroAreaNetwork, serviceProvider, downgradeAllowed, upgradeAllowed, bandwidth, physicalPortSpeed, serviceProviderRegion, serviceProviderPop, deliveryMethod, cloudKey, fields, _callback);

    }

    /**
     * 
     * List all (filtered) products-offerings available on the platform
     * @param id Filter by id (optional)
     * @param type Filter by type (optional)
     * @param name Filter by name (optional)
     * @param handoverMetroArea Filter by handover_metro_area (optional)
     * @param handoverMetroAreaNetwork Filter by handover_metro_area_network (optional)
     * @param serviceMetroArea Filter by service_metro_area (optional)
     * @param serviceMetroAreaNetwork Filter by service_metro_area_network (optional)
     * @param serviceProvider Filter by service_provider (optional)
     * @param downgradeAllowed Filter by downgrade_allowed (optional)
     * @param upgradeAllowed Filter by upgrade_allowed (optional)
     * @param bandwidth Find product offerings where bandwidth is within the range of &#x60;bandwidth_min&#x60; and &#x60;bandwidth_max&#x60;. (optional)
     * @param physicalPortSpeed Filter by physical_port_speed (optional)
     * @param serviceProviderRegion Filter by service_provider_region (optional)
     * @param serviceProviderPop Filter by service_provider_pop (optional)
     * @param deliveryMethod Filter by delivery_method (optional)
     * @param cloudKey For product offerings of type &#x60;cloud_vc&#x60;, if the &#x60;service_provider_workflow&#x60; is &#x60;provider_first&#x60; the &#x60;cloud_key&#x60; will be used for filtering the relevant offerings. (optional)
     * @param fields Returned objects only have properties which are present in the list of fields. The required &#x60;type&#x60; property is *implicitly* included. The results are *deduplicated*.  (optional)
     * @return List&lt;ProductOfferingPartial&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductOfferingPartial> productOfferingsList(List<String> id, String type, String name, String handoverMetroArea, String handoverMetroAreaNetwork, String serviceMetroArea, String serviceMetroAreaNetwork, String serviceProvider, String downgradeAllowed, String upgradeAllowed, Integer bandwidth, Integer physicalPortSpeed, String serviceProviderRegion, String serviceProviderPop, String deliveryMethod, String cloudKey, String fields) throws ApiException {
        ApiResponse<List<ProductOfferingPartial>> localVarResp = productOfferingsListWithHttpInfo(id, type, name, handoverMetroArea, handoverMetroAreaNetwork, serviceMetroArea, serviceMetroAreaNetwork, serviceProvider, downgradeAllowed, upgradeAllowed, bandwidth, physicalPortSpeed, serviceProviderRegion, serviceProviderPop, deliveryMethod, cloudKey, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * List all (filtered) products-offerings available on the platform
     * @param id Filter by id (optional)
     * @param type Filter by type (optional)
     * @param name Filter by name (optional)
     * @param handoverMetroArea Filter by handover_metro_area (optional)
     * @param handoverMetroAreaNetwork Filter by handover_metro_area_network (optional)
     * @param serviceMetroArea Filter by service_metro_area (optional)
     * @param serviceMetroAreaNetwork Filter by service_metro_area_network (optional)
     * @param serviceProvider Filter by service_provider (optional)
     * @param downgradeAllowed Filter by downgrade_allowed (optional)
     * @param upgradeAllowed Filter by upgrade_allowed (optional)
     * @param bandwidth Find product offerings where bandwidth is within the range of &#x60;bandwidth_min&#x60; and &#x60;bandwidth_max&#x60;. (optional)
     * @param physicalPortSpeed Filter by physical_port_speed (optional)
     * @param serviceProviderRegion Filter by service_provider_region (optional)
     * @param serviceProviderPop Filter by service_provider_pop (optional)
     * @param deliveryMethod Filter by delivery_method (optional)
     * @param cloudKey For product offerings of type &#x60;cloud_vc&#x60;, if the &#x60;service_provider_workflow&#x60; is &#x60;provider_first&#x60; the &#x60;cloud_key&#x60; will be used for filtering the relevant offerings. (optional)
     * @param fields Returned objects only have properties which are present in the list of fields. The required &#x60;type&#x60; property is *implicitly* included. The results are *deduplicated*.  (optional)
     * @return ApiResponse&lt;List&lt;ProductOfferingPartial&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductOfferingPartial>> productOfferingsListWithHttpInfo(List<String> id, String type, String name, String handoverMetroArea, String handoverMetroAreaNetwork, String serviceMetroArea, String serviceMetroAreaNetwork, String serviceProvider, String downgradeAllowed, String upgradeAllowed, Integer bandwidth, Integer physicalPortSpeed, String serviceProviderRegion, String serviceProviderPop, String deliveryMethod, String cloudKey, String fields) throws ApiException {
        okhttp3.Call localVarCall = productOfferingsListValidateBeforeCall(id, type, name, handoverMetroArea, handoverMetroAreaNetwork, serviceMetroArea, serviceMetroAreaNetwork, serviceProvider, downgradeAllowed, upgradeAllowed, bandwidth, physicalPortSpeed, serviceProviderRegion, serviceProviderPop, deliveryMethod, cloudKey, fields, null);
        Type localVarReturnType = new TypeToken<List<ProductOfferingPartial>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all (filtered) products-offerings available on the platform
     * @param id Filter by id (optional)
     * @param type Filter by type (optional)
     * @param name Filter by name (optional)
     * @param handoverMetroArea Filter by handover_metro_area (optional)
     * @param handoverMetroAreaNetwork Filter by handover_metro_area_network (optional)
     * @param serviceMetroArea Filter by service_metro_area (optional)
     * @param serviceMetroAreaNetwork Filter by service_metro_area_network (optional)
     * @param serviceProvider Filter by service_provider (optional)
     * @param downgradeAllowed Filter by downgrade_allowed (optional)
     * @param upgradeAllowed Filter by upgrade_allowed (optional)
     * @param bandwidth Find product offerings where bandwidth is within the range of &#x60;bandwidth_min&#x60; and &#x60;bandwidth_max&#x60;. (optional)
     * @param physicalPortSpeed Filter by physical_port_speed (optional)
     * @param serviceProviderRegion Filter by service_provider_region (optional)
     * @param serviceProviderPop Filter by service_provider_pop (optional)
     * @param deliveryMethod Filter by delivery_method (optional)
     * @param cloudKey For product offerings of type &#x60;cloud_vc&#x60;, if the &#x60;service_provider_workflow&#x60; is &#x60;provider_first&#x60; the &#x60;cloud_key&#x60; will be used for filtering the relevant offerings. (optional)
     * @param fields Returned objects only have properties which are present in the list of fields. The required &#x60;type&#x60; property is *implicitly* included. The results are *deduplicated*.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOfferingsListAsync(List<String> id, String type, String name, String handoverMetroArea, String handoverMetroAreaNetwork, String serviceMetroArea, String serviceMetroAreaNetwork, String serviceProvider, String downgradeAllowed, String upgradeAllowed, Integer bandwidth, Integer physicalPortSpeed, String serviceProviderRegion, String serviceProviderPop, String deliveryMethod, String cloudKey, String fields, final ApiCallback<List<ProductOfferingPartial>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOfferingsListValidateBeforeCall(id, type, name, handoverMetroArea, handoverMetroAreaNetwork, serviceMetroArea, serviceMetroAreaNetwork, serviceProvider, downgradeAllowed, upgradeAllowed, bandwidth, physicalPortSpeed, serviceProviderRegion, serviceProviderPop, deliveryMethod, cloudKey, fields, _callback);
        Type localVarReturnType = new TypeToken<List<ProductOfferingPartial>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOfferingsRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOfferingsReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product-offerings/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOfferingsReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productOfferingsRead(Async)");
        }

        return productOfferingsReadCall(id, _callback);

    }

    /**
     * 
     * Get a single products-offering by id.
     * @param id Get by id (required)
     * @return ProductOffering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ProductOffering productOfferingsRead(String id) throws ApiException {
        ApiResponse<ProductOffering> localVarResp = productOfferingsReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single products-offering by id.
     * @param id Get by id (required)
     * @return ApiResponse&lt;ProductOffering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOffering> productOfferingsReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = productOfferingsReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProductOffering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single products-offering by id.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Product Offering </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOfferingsReadAsync(String id, final ApiCallback<ProductOffering> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOfferingsReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProductOffering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
