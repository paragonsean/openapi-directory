/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountsList400Response;
import org.openapitools.client.model.AccountsList401Response;
import org.openapitools.client.model.AccountsList403Response;
import org.openapitools.client.model.AccountsRead404Response;
import org.openapitools.client.model.CancellationPolicy;
import org.openapitools.client.model.CancellationRequest;
import org.openapitools.client.model.ContactsDestroy400Response;
import org.openapitools.client.model.NetworkService;
import org.openapitools.client.model.NetworkServiceChangeRequest;
import org.openapitools.client.model.NetworkServiceConfigsDestroy400Response;
import org.openapitools.client.model.NetworkServiceRequest;
import org.openapitools.client.model.NetworkServiceRequestPartial;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworkServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NetworkServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworkServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for networkServiceCancellationPolicyRead
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceCancellationPolicyReadCall(String id, String decommissionAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-services/{id}/cancellation-policy"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (decommissionAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decommission_at", decommissionAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceCancellationPolicyReadValidateBeforeCall(String id, String decommissionAt, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceCancellationPolicyRead(Async)");
        }

        return networkServiceCancellationPolicyReadCall(id, decommissionAt, _callback);

    }

    /**
     * 
     * The cancellation-policy can be queried to answer the questions:  If I cancel my service, *when will it be technically decommissioned*? If I cancel my service, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @return CancellationPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public CancellationPolicy networkServiceCancellationPolicyRead(String id, String decommissionAt) throws ApiException {
        ApiResponse<CancellationPolicy> localVarResp = networkServiceCancellationPolicyReadWithHttpInfo(id, decommissionAt);
        return localVarResp.getData();
    }

    /**
     * 
     * The cancellation-policy can be queried to answer the questions:  If I cancel my service, *when will it be technically decommissioned*? If I cancel my service, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @return ApiResponse&lt;CancellationPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancellationPolicy> networkServiceCancellationPolicyReadWithHttpInfo(String id, String decommissionAt) throws ApiException {
        okhttp3.Call localVarCall = networkServiceCancellationPolicyReadValidateBeforeCall(id, decommissionAt, null);
        Type localVarReturnType = new TypeToken<CancellationPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The cancellation-policy can be queried to answer the questions:  If I cancel my service, *when will it be technically decommissioned*? If I cancel my service, *until what date will I be charged*?  When the query parameter &#x60;decommision_at&#x60; is not provided it will provide the first possible cancellation date and charge period if cancelled at above date.  The granularity of the date field is a day, the start and end of which are to be interpreted by the IXP (some may use UTC, some may use their local time zone).
     * @param id Get by id (required)
     * @param decommissionAt By providing a date in the format &#x60;YYYY-MM-DD&#x60; you can query the policy what would happen if you request a decommissioning on this date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Cancellation Policy </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceCancellationPolicyReadAsync(String id, String decommissionAt, final ApiCallback<CancellationPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceCancellationPolicyReadValidateBeforeCall(id, decommissionAt, _callback);
        Type localVarReturnType = new TypeToken<CancellationPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceChangeRequestCreate
     * @param id Get by id (required)
     * @param networkServiceChangeRequest NetworkServiceChangeRequest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceChangeRequestCreateCall(String id, NetworkServiceChangeRequest networkServiceChangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkServiceChangeRequest;

        // create path and map variables
        String localVarPath = "/network-services/{id}/change-request"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceChangeRequestCreateValidateBeforeCall(String id, NetworkServiceChangeRequest networkServiceChangeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceChangeRequestCreate(Async)");
        }

        return networkServiceChangeRequestCreateCall(id, networkServiceChangeRequest, _callback);

    }

    /**
     * 
     * Request a change to the network service.  A participant in a network service of type &#x60;p2p_vc&#x60; can issue a change request, expressing a desired change in the capacity. The change is accepted when all sides have configured the network service configs with the new bandwidth. These changes can sometimes require a change of the product offering. The product offering may only differ in regards to bandwidth.  The network service will change it&#39;s state from &#x60;production&#x60; into &#x60;production_change_pending&#x60;.  Only one change request may be issued at a time.
     * @param id Get by id (required)
     * @param networkServiceChangeRequest NetworkServiceChangeRequest (optional)
     * @return NetworkServiceChangeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceChangeRequest networkServiceChangeRequestCreate(String id, NetworkServiceChangeRequest networkServiceChangeRequest) throws ApiException {
        ApiResponse<NetworkServiceChangeRequest> localVarResp = networkServiceChangeRequestCreateWithHttpInfo(id, networkServiceChangeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Request a change to the network service.  A participant in a network service of type &#x60;p2p_vc&#x60; can issue a change request, expressing a desired change in the capacity. The change is accepted when all sides have configured the network service configs with the new bandwidth. These changes can sometimes require a change of the product offering. The product offering may only differ in regards to bandwidth.  The network service will change it&#39;s state from &#x60;production&#x60; into &#x60;production_change_pending&#x60;.  Only one change request may be issued at a time.
     * @param id Get by id (required)
     * @param networkServiceChangeRequest NetworkServiceChangeRequest (optional)
     * @return ApiResponse&lt;NetworkServiceChangeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceChangeRequest> networkServiceChangeRequestCreateWithHttpInfo(String id, NetworkServiceChangeRequest networkServiceChangeRequest) throws ApiException {
        okhttp3.Call localVarCall = networkServiceChangeRequestCreateValidateBeforeCall(id, networkServiceChangeRequest, null);
        Type localVarReturnType = new TypeToken<NetworkServiceChangeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request a change to the network service.  A participant in a network service of type &#x60;p2p_vc&#x60; can issue a change request, expressing a desired change in the capacity. The change is accepted when all sides have configured the network service configs with the new bandwidth. These changes can sometimes require a change of the product offering. The product offering may only differ in regards to bandwidth.  The network service will change it&#39;s state from &#x60;production&#x60; into &#x60;production_change_pending&#x60;.  Only one change request may be issued at a time.
     * @param id Get by id (required)
     * @param networkServiceChangeRequest NetworkServiceChangeRequest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceChangeRequestCreateAsync(String id, NetworkServiceChangeRequest networkServiceChangeRequest, final ApiCallback<NetworkServiceChangeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceChangeRequestCreateValidateBeforeCall(id, networkServiceChangeRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceChangeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceChangeRequestDestroy
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceChangeRequestDestroyCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-services/{id}/change-request"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceChangeRequestDestroyValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceChangeRequestDestroy(Async)");
        }

        return networkServiceChangeRequestDestroyCall(id, _callback);

    }

    /**
     * 
     * Retract or reject a change to the network service.
     * @param id Get by id (required)
     * @return NetworkServiceChangeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceChangeRequest networkServiceChangeRequestDestroy(String id) throws ApiException {
        ApiResponse<NetworkServiceChangeRequest> localVarResp = networkServiceChangeRequestDestroyWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retract or reject a change to the network service.
     * @param id Get by id (required)
     * @return ApiResponse&lt;NetworkServiceChangeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceChangeRequest> networkServiceChangeRequestDestroyWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = networkServiceChangeRequestDestroyValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NetworkServiceChangeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retract or reject a change to the network service.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> UnableToFulfill </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceChangeRequestDestroyAsync(String id, final ApiCallback<NetworkServiceChangeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceChangeRequestDestroyValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceChangeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServiceChangeRequestRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceChangeRequestReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-services/{id}/change-request"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServiceChangeRequestReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServiceChangeRequestRead(Async)");
        }

        return networkServiceChangeRequestReadCall(id, _callback);

    }

    /**
     * 
     * Get the change request.
     * @param id Get by id (required)
     * @return NetworkServiceChangeRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkServiceChangeRequest networkServiceChangeRequestRead(String id) throws ApiException {
        ApiResponse<NetworkServiceChangeRequest> localVarResp = networkServiceChangeRequestReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the change request.
     * @param id Get by id (required)
     * @return ApiResponse&lt;NetworkServiceChangeRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkServiceChangeRequest> networkServiceChangeRequestReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = networkServiceChangeRequestReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NetworkServiceChangeRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the change request.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> NetworkServiceChangeRequest </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServiceChangeRequestReadAsync(String id, final ApiCallback<NetworkServiceChangeRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServiceChangeRequestReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NetworkServiceChangeRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServicesCreate
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesCreateCall(NetworkServiceRequest networkServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkServiceRequest;

        // create path and map variables
        String localVarPath = "/network-services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServicesCreateValidateBeforeCall(NetworkServiceRequest networkServiceRequest, final ApiCallback _callback) throws ApiException {
        return networkServicesCreateCall(networkServiceRequest, _callback);

    }

    /**
     * 
     * Create a new network service
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @return NetworkService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public NetworkService networkServicesCreate(NetworkServiceRequest networkServiceRequest) throws ApiException {
        ApiResponse<NetworkService> localVarResp = networkServicesCreateWithHttpInfo(networkServiceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new network service
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @return ApiResponse&lt;NetworkService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkService> networkServicesCreateWithHttpInfo(NetworkServiceRequest networkServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = networkServicesCreateValidateBeforeCall(networkServiceRequest, null);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new network service
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesCreateAsync(NetworkServiceRequest networkServiceRequest, final ApiCallback<NetworkService> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServicesCreateValidateBeforeCall(networkServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServicesDestroy
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesDestroyCall(String id, CancellationRequest cancellationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancellationRequest;

        // create path and map variables
        String localVarPath = "/network-services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServicesDestroyValidateBeforeCall(String id, CancellationRequest cancellationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServicesDestroy(Async)");
        }

        return networkServicesDestroyCall(id, cancellationRequest, _callback);

    }

    /**
     * 
     * Request decomissioning of the network service.  The network service will enter the state of &#x60;decommission_requested&#x60;. The request will cascade to related network service and feature configs.  An *optional request body* can be provided to request a specific service termination date.  If no date is given in the request body, it is assumed to be the earliest possible date.  Possible values for &#x60;decommission_at&#x60; can be queried through the &#x60;network_service_cancellation_policy_read&#x60; operation.  The response will contain the dates on which the changes will be effected.
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @return NetworkService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkService networkServicesDestroy(String id, CancellationRequest cancellationRequest) throws ApiException {
        ApiResponse<NetworkService> localVarResp = networkServicesDestroyWithHttpInfo(id, cancellationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Request decomissioning of the network service.  The network service will enter the state of &#x60;decommission_requested&#x60;. The request will cascade to related network service and feature configs.  An *optional request body* can be provided to request a specific service termination date.  If no date is given in the request body, it is assumed to be the earliest possible date.  Possible values for &#x60;decommission_at&#x60; can be queried through the &#x60;network_service_cancellation_policy_read&#x60; operation.  The response will contain the dates on which the changes will be effected.
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @return ApiResponse&lt;NetworkService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkService> networkServicesDestroyWithHttpInfo(String id, CancellationRequest cancellationRequest) throws ApiException {
        okhttp3.Call localVarCall = networkServicesDestroyValidateBeforeCall(id, cancellationRequest, null);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request decomissioning of the network service.  The network service will enter the state of &#x60;decommission_requested&#x60;. The request will cascade to related network service and feature configs.  An *optional request body* can be provided to request a specific service termination date.  If no date is given in the request body, it is assumed to be the earliest possible date.  Possible values for &#x60;decommission_at&#x60; can be queried through the &#x60;network_service_cancellation_policy_read&#x60; operation.  The response will contain the dates on which the changes will be effected.
     * @param id Get by id (required)
     * @param cancellationRequest Service Cancellation Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> CancellationPolicyError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesDestroyAsync(String id, CancellationRequest cancellationRequest, final ApiCallback<NetworkService> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServicesDestroyValidateBeforeCall(id, cancellationRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServicesList
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param pop Filter by pop (optional)
     * @param productOffering Filter by product_offering (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesListCall(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String pop, String productOffering, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "id", id));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (stateIsNot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state__is_not", stateIsNot));
        }

        if (managingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managing_account", managingAccount));
        }

        if (consumingAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("consuming_account", consumingAccount));
        }

        if (externalRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_ref", externalRef));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (pop != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pop", pop));
        }

        if (productOffering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_offering", productOffering));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServicesListValidateBeforeCall(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String pop, String productOffering, final ApiCallback _callback) throws ApiException {
        return networkServicesListCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, pop, productOffering, _callback);

    }

    /**
     * 
     * List available &#x60;NetworkService&#x60;s.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param pop Filter by pop (optional)
     * @param productOffering Filter by product_offering (optional)
     * @return List&lt;NetworkService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public List<NetworkService> networkServicesList(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String pop, String productOffering) throws ApiException {
        ApiResponse<List<NetworkService>> localVarResp = networkServicesListWithHttpInfo(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, pop, productOffering);
        return localVarResp.getData();
    }

    /**
     * 
     * List available &#x60;NetworkService&#x60;s.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param pop Filter by pop (optional)
     * @param productOffering Filter by product_offering (optional)
     * @return ApiResponse&lt;List&lt;NetworkService&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NetworkService>> networkServicesListWithHttpInfo(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String pop, String productOffering) throws ApiException {
        okhttp3.Call localVarCall = networkServicesListValidateBeforeCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, pop, productOffering, null);
        Type localVarReturnType = new TypeToken<List<NetworkService>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List available &#x60;NetworkService&#x60;s.
     * @param id Filter by id (optional)
     * @param state Filter by state (optional)
     * @param stateIsNot Filter by state__is_not (optional)
     * @param managingAccount Filter by managing_account (optional)
     * @param consumingAccount Filter by consuming_account (optional)
     * @param externalRef Filter by external_ref (optional)
     * @param type Filter by type (optional)
     * @param pop Filter by pop (optional)
     * @param productOffering Filter by product_offering (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of: Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesListAsync(List<String> id, String state, String stateIsNot, String managingAccount, String consumingAccount, String externalRef, String type, String pop, String productOffering, final ApiCallback<List<NetworkService>> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServicesListValidateBeforeCall(id, state, stateIsNot, managingAccount, consumingAccount, externalRef, type, pop, productOffering, _callback);
        Type localVarReturnType = new TypeToken<List<NetworkService>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServicesPartialUpdate
     * @param id Get by id (required)
     * @param networkServiceRequestPartial Polymorphic Network Service Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesPartialUpdateCall(String id, NetworkServiceRequestPartial networkServiceRequestPartial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkServiceRequestPartial;

        // create path and map variables
        String localVarPath = "/network-services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServicesPartialUpdateValidateBeforeCall(String id, NetworkServiceRequestPartial networkServiceRequestPartial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServicesPartialUpdate(Async)");
        }

        return networkServicesPartialUpdateCall(id, networkServiceRequestPartial, _callback);

    }

    /**
     * 
     * Partially update a network service
     * @param id Get by id (required)
     * @param networkServiceRequestPartial Polymorphic Network Service Request (optional)
     * @return NetworkService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkService networkServicesPartialUpdate(String id, NetworkServiceRequestPartial networkServiceRequestPartial) throws ApiException {
        ApiResponse<NetworkService> localVarResp = networkServicesPartialUpdateWithHttpInfo(id, networkServiceRequestPartial);
        return localVarResp.getData();
    }

    /**
     * 
     * Partially update a network service
     * @param id Get by id (required)
     * @param networkServiceRequestPartial Polymorphic Network Service Request (optional)
     * @return ApiResponse&lt;NetworkService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkService> networkServicesPartialUpdateWithHttpInfo(String id, NetworkServiceRequestPartial networkServiceRequestPartial) throws ApiException {
        okhttp3.Call localVarCall = networkServicesPartialUpdateValidateBeforeCall(id, networkServiceRequestPartial, null);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partially update a network service
     * @param id Get by id (required)
     * @param networkServiceRequestPartial Polymorphic Network Service Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesPartialUpdateAsync(String id, NetworkServiceRequestPartial networkServiceRequestPartial, final ApiCallback<NetworkService> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServicesPartialUpdateValidateBeforeCall(id, networkServiceRequestPartial, _callback);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServicesRead
     * @param id Get by id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesReadCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/network-services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServicesReadValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServicesRead(Async)");
        }

        return networkServicesReadCall(id, _callback);

    }

    /**
     * 
     * Get a specific &#x60;network-service&#x60; by id.
     * @param id Get by id (required)
     * @return NetworkService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkService networkServicesRead(String id) throws ApiException {
        ApiResponse<NetworkService> localVarResp = networkServicesReadWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a specific &#x60;network-service&#x60; by id.
     * @param id Get by id (required)
     * @return ApiResponse&lt;NetworkService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkService> networkServicesReadWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = networkServicesReadValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a specific &#x60;network-service&#x60; by id.
     * @param id Get by id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesReadAsync(String id, final ApiCallback<NetworkService> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServicesReadValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkServicesUpdate
     * @param id Get by id (required)
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesUpdateCall(String id, NetworkServiceRequest networkServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = networkServiceRequest;

        // create path and map variables
        String localVarPath = "/network-services/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkServicesUpdateValidateBeforeCall(String id, NetworkServiceRequest networkServiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling networkServicesUpdate(Async)");
        }

        return networkServicesUpdateCall(id, networkServiceRequest, _callback);

    }

    /**
     * 
     * Update a network service
     * @param id Get by id (required)
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @return NetworkService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public NetworkService networkServicesUpdate(String id, NetworkServiceRequest networkServiceRequest) throws ApiException {
        ApiResponse<NetworkService> localVarResp = networkServicesUpdateWithHttpInfo(id, networkServiceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a network service
     * @param id Get by id (required)
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @return ApiResponse&lt;NetworkService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkService> networkServicesUpdateWithHttpInfo(String id, NetworkServiceRequest networkServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = networkServicesUpdateValidateBeforeCall(id, networkServiceRequest, null);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a network service
     * @param id Get by id (required)
     * @param networkServiceRequest Polymorphic Network Service Request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Polymorphic Network Services </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> PermissionDenied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkServicesUpdateAsync(String id, NetworkServiceRequest networkServiceRequest, final ApiCallback<NetworkService> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkServicesUpdateValidateBeforeCall(id, networkServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<NetworkService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
