/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MAC-Address
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MacAddressPartial {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CONSUMING_ACCOUNT = "consuming_account";
  @SerializedName(SERIALIZED_NAME_CONSUMING_ACCOUNT)
  private String consumingAccount;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external_ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  private String externalRef;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MANAGING_ACCOUNT = "managing_account";
  @SerializedName(SERIALIZED_NAME_MANAGING_ACCOUNT)
  private String managingAccount;

  public static final String SERIALIZED_NAME_VALID_NOT_AFTER = "valid_not_after";
  @SerializedName(SERIALIZED_NAME_VALID_NOT_AFTER)
  private OffsetDateTime validNotAfter;

  public static final String SERIALIZED_NAME_VALID_NOT_BEFORE = "valid_not_before";
  @SerializedName(SERIALIZED_NAME_VALID_NOT_BEFORE)
  private OffsetDateTime validNotBefore;

  public MacAddressPartial() {
  }

  public MacAddressPartial address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Unicast MAC address, formatted hexadecimal values with colons. 
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public MacAddressPartial consumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account consuming a service.  Used to be &#x60;owning_customer&#x60;. 
   * @return consumingAccount
   */
  @javax.annotation.Nullable
  public String getConsumingAccount() {
    return consumingAccount;
  }

  public void setConsumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
  }


  public MacAddressPartial externalRef(String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * Reference field, free to use for the API user.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(String externalRef) {
    this.externalRef = externalRef;
  }


  public MacAddressPartial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MacAddressPartial managingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
   * @return managingAccount
   */
  @javax.annotation.Nullable
  public String getManagingAccount() {
    return managingAccount;
  }

  public void setManagingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
  }


  public MacAddressPartial validNotAfter(OffsetDateTime validNotAfter) {
    this.validNotAfter = validNotAfter;
    return this;
  }

  /**
   * Get validNotAfter
   * @return validNotAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidNotAfter() {
    return validNotAfter;
  }

  public void setValidNotAfter(OffsetDateTime validNotAfter) {
    this.validNotAfter = validNotAfter;
  }


  public MacAddressPartial validNotBefore(OffsetDateTime validNotBefore) {
    this.validNotBefore = validNotBefore;
    return this;
  }

  /**
   * Get validNotBefore
   * @return validNotBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidNotBefore() {
    return validNotBefore;
  }

  public void setValidNotBefore(OffsetDateTime validNotBefore) {
    this.validNotBefore = validNotBefore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MacAddressPartial macAddressPartial = (MacAddressPartial) o;
    return Objects.equals(this.address, macAddressPartial.address) &&
        Objects.equals(this.consumingAccount, macAddressPartial.consumingAccount) &&
        Objects.equals(this.externalRef, macAddressPartial.externalRef) &&
        Objects.equals(this.id, macAddressPartial.id) &&
        Objects.equals(this.managingAccount, macAddressPartial.managingAccount) &&
        Objects.equals(this.validNotAfter, macAddressPartial.validNotAfter) &&
        Objects.equals(this.validNotBefore, macAddressPartial.validNotBefore);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, consumingAccount, externalRef, id, managingAccount, validNotAfter, validNotBefore);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MacAddressPartial {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    consumingAccount: ").append(toIndentedString(consumingAccount)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    managingAccount: ").append(toIndentedString(managingAccount)).append("\n");
    sb.append("    validNotAfter: ").append(toIndentedString(validNotAfter)).append("\n");
    sb.append("    validNotBefore: ").append(toIndentedString(validNotBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("consuming_account");
    openapiFields.add("external_ref");
    openapiFields.add("id");
    openapiFields.add("managing_account");
    openapiFields.add("valid_not_after");
    openapiFields.add("valid_not_before");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MacAddressPartial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MacAddressPartial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MacAddressPartial is not found in the empty JSON string", MacAddressPartial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MacAddressPartial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MacAddressPartial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("consuming_account") != null && !jsonObj.get("consuming_account").isJsonNull()) && !jsonObj.get("consuming_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consuming_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consuming_account").toString()));
      }
      if ((jsonObj.get("external_ref") != null && !jsonObj.get("external_ref").isJsonNull()) && !jsonObj.get("external_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_ref").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("managing_account") != null && !jsonObj.get("managing_account").isJsonNull()) && !jsonObj.get("managing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managing_account").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MacAddressPartial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MacAddressPartial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MacAddressPartial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MacAddressPartial.class));

       return (TypeAdapter<T>) new TypeAdapter<MacAddressPartial>() {
           @Override
           public void write(JsonWriter out, MacAddressPartial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MacAddressPartial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MacAddressPartial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MacAddressPartial
   * @throws IOException if the JSON string is invalid with respect to MacAddressPartial
   */
  public static MacAddressPartial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MacAddressPartial.class);
  }

  /**
   * Convert an instance of MacAddressPartial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

