/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Facility
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FacilityPartial {
  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "address_country";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private String addressCountry;

  public static final String SERIALIZED_NAME_ADDRESS_LOCALITY = "address_locality";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LOCALITY)
  private String addressLocality;

  public static final String SERIALIZED_NAME_ADDRESS_REGION = "address_region";
  @SerializedName(SERIALIZED_NAME_ADDRESS_REGION)
  private String addressRegion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METRO_AREA = "metro_area";
  @SerializedName(SERIALIZED_NAME_METRO_AREA)
  private String metroArea;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANISATION_NAME = "organisation_name";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_NAME)
  private String organisationName;

  public static final String SERIALIZED_NAME_PEERINGDB_FACILITY_ID = "peeringdb_facility_id";
  @SerializedName(SERIALIZED_NAME_PEERINGDB_FACILITY_ID)
  private Integer peeringdbFacilityId;

  public static final String SERIALIZED_NAME_POPS = "pops";
  @SerializedName(SERIALIZED_NAME_POPS)
  private List<String> pops = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "street_address";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public FacilityPartial() {
  }

  public FacilityPartial addressCountry(String addressCountry) {
    this.addressCountry = addressCountry;
    return this;
  }

  /**
   * ISO 3166-1 alpha-2 country code, for example DE 
   * @return addressCountry
   */
  @javax.annotation.Nullable
  public String getAddressCountry() {
    return addressCountry;
  }

  public void setAddressCountry(String addressCountry) {
    this.addressCountry = addressCountry;
  }


  public FacilityPartial addressLocality(String addressLocality) {
    this.addressLocality = addressLocality;
    return this;
  }

  /**
   * The locality/city. For example, Mountain View.
   * @return addressLocality
   */
  @javax.annotation.Nullable
  public String getAddressLocality() {
    return addressLocality;
  }

  public void setAddressLocality(String addressLocality) {
    this.addressLocality = addressLocality;
  }


  public FacilityPartial addressRegion(String addressRegion) {
    this.addressRegion = addressRegion;
    return this;
  }

  /**
   * The region. For example, CA
   * @return addressRegion
   */
  @javax.annotation.Nullable
  public String getAddressRegion() {
    return addressRegion;
  }

  public void setAddressRegion(String addressRegion) {
    this.addressRegion = addressRegion;
  }


  public FacilityPartial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FacilityPartial metroArea(String metroArea) {
    this.metroArea = metroArea;
    return this;
  }

  /**
   * Id of the &#x60;MetroArea&#x60; the DC is located in. 
   * @return metroArea
   */
  @javax.annotation.Nullable
  public String getMetroArea() {
    return metroArea;
  }

  public void setMetroArea(String metroArea) {
    this.metroArea = metroArea;
  }


  public FacilityPartial name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the Datacenter as called by the operator 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FacilityPartial organisationName(String organisationName) {
    this.organisationName = organisationName;
    return this;
  }

  /**
   * Name of Datacenter operator 
   * @return organisationName
   */
  @javax.annotation.Nullable
  public String getOrganisationName() {
    return organisationName;
  }

  public void setOrganisationName(String organisationName) {
    this.organisationName = organisationName;
  }


  public FacilityPartial peeringdbFacilityId(Integer peeringdbFacilityId) {
    this.peeringdbFacilityId = peeringdbFacilityId;
    return this;
  }

  /**
   * [PeeringDB](https://www.peeringdb.com) facitlity ID, can be extracted from the url https://www.peeringdb.com/fac/$id 
   * minimum: 0
   * maximum: 2147483647
   * @return peeringdbFacilityId
   */
  @javax.annotation.Nullable
  public Integer getPeeringdbFacilityId() {
    return peeringdbFacilityId;
  }

  public void setPeeringdbFacilityId(Integer peeringdbFacilityId) {
    this.peeringdbFacilityId = peeringdbFacilityId;
  }


  public FacilityPartial pops(List<String> pops) {
    this.pops = pops;
    return this;
  }

  public FacilityPartial addPopsItem(String popsItem) {
    if (this.pops == null) {
      this.pops = new ArrayList<>();
    }
    this.pops.add(popsItem);
    return this;
  }

  /**
   * List of pops in the &#x60;Facility&#x60;.
   * @return pops
   */
  @javax.annotation.Nullable
  public List<String> getPops() {
    return pops;
  }

  public void setPops(List<String> pops) {
    this.pops = pops;
  }


  public FacilityPartial postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * A postal code. For example, 9404
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public FacilityPartial streetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  /**
   * The street address. For example, 1600 Amphitheatre Pkwy.
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacilityPartial facilityPartial = (FacilityPartial) o;
    return Objects.equals(this.addressCountry, facilityPartial.addressCountry) &&
        Objects.equals(this.addressLocality, facilityPartial.addressLocality) &&
        Objects.equals(this.addressRegion, facilityPartial.addressRegion) &&
        Objects.equals(this.id, facilityPartial.id) &&
        Objects.equals(this.metroArea, facilityPartial.metroArea) &&
        Objects.equals(this.name, facilityPartial.name) &&
        Objects.equals(this.organisationName, facilityPartial.organisationName) &&
        Objects.equals(this.peeringdbFacilityId, facilityPartial.peeringdbFacilityId) &&
        Objects.equals(this.pops, facilityPartial.pops) &&
        Objects.equals(this.postalCode, facilityPartial.postalCode) &&
        Objects.equals(this.streetAddress, facilityPartial.streetAddress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressCountry, addressLocality, addressRegion, id, metroArea, name, organisationName, peeringdbFacilityId, pops, postalCode, streetAddress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacilityPartial {\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressLocality: ").append(toIndentedString(addressLocality)).append("\n");
    sb.append("    addressRegion: ").append(toIndentedString(addressRegion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metroArea: ").append(toIndentedString(metroArea)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organisationName: ").append(toIndentedString(organisationName)).append("\n");
    sb.append("    peeringdbFacilityId: ").append(toIndentedString(peeringdbFacilityId)).append("\n");
    sb.append("    pops: ").append(toIndentedString(pops)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_country");
    openapiFields.add("address_locality");
    openapiFields.add("address_region");
    openapiFields.add("id");
    openapiFields.add("metro_area");
    openapiFields.add("name");
    openapiFields.add("organisation_name");
    openapiFields.add("peeringdb_facility_id");
    openapiFields.add("pops");
    openapiFields.add("postal_code");
    openapiFields.add("street_address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacilityPartial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacilityPartial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacilityPartial is not found in the empty JSON string", FacilityPartial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacilityPartial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacilityPartial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address_country") != null && !jsonObj.get("address_country").isJsonNull()) && !jsonObj.get("address_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_country").toString()));
      }
      if ((jsonObj.get("address_locality") != null && !jsonObj.get("address_locality").isJsonNull()) && !jsonObj.get("address_locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_locality").toString()));
      }
      if ((jsonObj.get("address_region") != null && !jsonObj.get("address_region").isJsonNull()) && !jsonObj.get("address_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_region").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("metro_area") != null && !jsonObj.get("metro_area").isJsonNull()) && !jsonObj.get("metro_area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro_area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metro_area").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organisation_name") != null && !jsonObj.get("organisation_name").isJsonNull()) && !jsonObj.get("organisation_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisation_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisation_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pops") != null && !jsonObj.get("pops").isJsonNull() && !jsonObj.get("pops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pops` to be an array in the JSON string but got `%s`", jsonObj.get("pops").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("street_address") != null && !jsonObj.get("street_address").isJsonNull()) && !jsonObj.get("street_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacilityPartial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacilityPartial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacilityPartial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacilityPartial.class));

       return (TypeAdapter<T>) new TypeAdapter<FacilityPartial>() {
           @Override
           public void write(JsonWriter out, FacilityPartial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacilityPartial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacilityPartial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacilityPartial
   * @throws IOException if the JSON string is invalid with respect to FacilityPartial
   */
  public static FacilityPartial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacilityPartial.class);
  }

  /**
   * Convert an instance of FacilityPartial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

