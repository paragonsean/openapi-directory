/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IXPSpecificFeatureFlag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RouteServerNetworkFeature
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteServerNetworkFeature {
  /**
   * Gets or Sets addressFamilies
   */
  @JsonAdapter(AddressFamiliesEnum.Adapter.class)
  public enum AddressFamiliesEnum {
    INET("af_inet"),
    
    INET6("af_inet6");

    private String value;

    AddressFamiliesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressFamiliesEnum fromValue(String value) {
      for (AddressFamiliesEnum b : AddressFamiliesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressFamiliesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressFamiliesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressFamiliesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddressFamiliesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AddressFamiliesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_FAMILIES = "address_families";
  @SerializedName(SERIALIZED_NAME_ADDRESS_FAMILIES)
  private List<AddressFamiliesEnum> addressFamilies = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Integer asn;

  /**
   * Gets or Sets availableBgpSessionTypes
   */
  @JsonAdapter(AvailableBgpSessionTypesEnum.Adapter.class)
  public enum AvailableBgpSessionTypesEnum {
    ACTIVE("active"),
    
    PASSIVE("passive");

    private String value;

    AvailableBgpSessionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailableBgpSessionTypesEnum fromValue(String value) {
      for (AvailableBgpSessionTypesEnum b : AvailableBgpSessionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailableBgpSessionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailableBgpSessionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailableBgpSessionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailableBgpSessionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AvailableBgpSessionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABLE_BGP_SESSION_TYPES = "available_bgp_session_types";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BGP_SESSION_TYPES)
  private List<AvailableBgpSessionTypesEnum> availableBgpSessionTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<IXPSpecificFeatureFlag> flags = new ArrayList<>();

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_V4 = "ip_v4";
  @SerializedName(SERIALIZED_NAME_IP_V4)
  private String ipV4;

  public static final String SERIALIZED_NAME_IP_V6 = "ip_v6";
  @SerializedName(SERIALIZED_NAME_IP_V6)
  private String ipV6;

  public static final String SERIALIZED_NAME_LOOKING_GLASS_URL = "looking_glass_url";
  @SerializedName(SERIALIZED_NAME_LOOKING_GLASS_URL)
  private String lookingGlassUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_SERVICE = "network_service";
  @SerializedName(SERIALIZED_NAME_NETWORK_SERVICE)
  private String networkService;

  public static final String SERIALIZED_NAME_NFC_REQUIRED_CONTACT_ROLES = "nfc_required_contact_roles";
  @SerializedName(SERIALIZED_NAME_NFC_REQUIRED_CONTACT_ROLES)
  private List<String> nfcRequiredContactRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  /**
   * When creating a route server feature config, remember to specify the same session_mode as the route server. 
   */
  @JsonAdapter(SessionModeEnum.Adapter.class)
  public enum SessionModeEnum {
    PUBLIC("public"),
    
    COLLECTOR("collector");

    private String value;

    SessionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionModeEnum fromValue(String value) {
      for (SessionModeEnum b : SessionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_MODE = "session_mode";
  @SerializedName(SERIALIZED_NAME_SESSION_MODE)
  private SessionModeEnum sessionMode;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RouteServerNetworkFeature() {
  }

  public RouteServerNetworkFeature(
     List<String> nfcRequiredContactRoles
  ) {
    this();
    this.nfcRequiredContactRoles = nfcRequiredContactRoles;
  }

  public RouteServerNetworkFeature addressFamilies(List<AddressFamiliesEnum> addressFamilies) {
    this.addressFamilies = addressFamilies;
    return this;
  }

  public RouteServerNetworkFeature addAddressFamiliesItem(AddressFamiliesEnum addressFamiliesItem) {
    if (this.addressFamilies == null) {
      this.addressFamilies = new ArrayList<>();
    }
    this.addressFamilies.add(addressFamiliesItem);
    return this;
  }

  /**
   * When creating a route server feature config, remember to specify which address family or families to use:  If the route server network feature only supports &#x60;af_inet&#x60;, then the &#x60;as_set_v4&#x60; in the network feature config is required.  If only &#x60;af_inet6&#x60; is supported, then the &#x60;as_set_v6&#x60; is required.  If both &#x60;af_inet&#x60; and &#x60;af_inet6&#x60; are supported, either &#x60;as_set_v4&#x60; or &#x60;as_set_v6&#x60; is required, but both can be provided in the network service config. 
   * @return addressFamilies
   */
  @javax.annotation.Nonnull
  public List<AddressFamiliesEnum> getAddressFamilies() {
    return addressFamilies;
  }

  public void setAddressFamilies(List<AddressFamiliesEnum> addressFamilies) {
    this.addressFamilies = addressFamilies;
  }


  public RouteServerNetworkFeature asn(Integer asn) {
    this.asn = asn;
    return this;
  }

  /**
   * Get asn
   * minimum: 0
   * @return asn
   */
  @javax.annotation.Nonnull
  public Integer getAsn() {
    return asn;
  }

  public void setAsn(Integer asn) {
    this.asn = asn;
  }


  public RouteServerNetworkFeature availableBgpSessionTypes(List<AvailableBgpSessionTypesEnum> availableBgpSessionTypes) {
    this.availableBgpSessionTypes = availableBgpSessionTypes;
    return this;
  }

  public RouteServerNetworkFeature addAvailableBgpSessionTypesItem(AvailableBgpSessionTypesEnum availableBgpSessionTypesItem) {
    if (this.availableBgpSessionTypes == null) {
      this.availableBgpSessionTypes = new ArrayList<>();
    }
    this.availableBgpSessionTypes.add(availableBgpSessionTypesItem);
    return this;
  }

  /**
   * The route server provides the following session modes. 
   * @return availableBgpSessionTypes
   */
  @javax.annotation.Nonnull
  public List<AvailableBgpSessionTypesEnum> getAvailableBgpSessionTypes() {
    return availableBgpSessionTypes;
  }

  public void setAvailableBgpSessionTypes(List<AvailableBgpSessionTypesEnum> availableBgpSessionTypes) {
    this.availableBgpSessionTypes = availableBgpSessionTypes;
  }


  public RouteServerNetworkFeature flags(List<IXPSpecificFeatureFlag> flags) {
    this.flags = flags;
    return this;
  }

  public RouteServerNetworkFeature addFlagsItem(IXPSpecificFeatureFlag flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * A list of IXP specific feature flags. This can be used to see if e.g. RPKI hard filtering is available.
   * @return flags
   */
  @javax.annotation.Nonnull
  public List<IXPSpecificFeatureFlag> getFlags() {
    return flags;
  }

  public void setFlags(List<IXPSpecificFeatureFlag> flags) {
    this.flags = flags;
  }


  public RouteServerNetworkFeature fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * The FQDN of the route server. 
   * @return fqdn
   */
  @javax.annotation.Nonnull
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public RouteServerNetworkFeature id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RouteServerNetworkFeature ipV4(String ipV4) {
    this.ipV4 = ipV4;
    return this;
  }

  /**
   * IPv4 address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) notation. 
   * @return ipV4
   */
  @javax.annotation.Nonnull
  public String getIpV4() {
    return ipV4;
  }

  public void setIpV4(String ipV4) {
    this.ipV4 = ipV4;
  }


  public RouteServerNetworkFeature ipV6(String ipV6) {
    this.ipV6 = ipV6;
    return this;
  }

  /**
   * IPv6 address in hexadecimal colon separated notation. 
   * @return ipV6
   */
  @javax.annotation.Nonnull
  public String getIpV6() {
    return ipV6;
  }

  public void setIpV6(String ipV6) {
    this.ipV6 = ipV6;
  }


  public RouteServerNetworkFeature lookingGlassUrl(String lookingGlassUrl) {
    this.lookingGlassUrl = lookingGlassUrl;
    return this;
  }

  /**
   * The url of the looking glass. 
   * @return lookingGlassUrl
   */
  @javax.annotation.Nullable
  public String getLookingGlassUrl() {
    return lookingGlassUrl;
  }

  public void setLookingGlassUrl(String lookingGlassUrl) {
    this.lookingGlassUrl = lookingGlassUrl;
  }


  public RouteServerNetworkFeature name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RouteServerNetworkFeature networkService(String networkService) {
    this.networkService = networkService;
    return this;
  }

  /**
   * Get networkService
   * @return networkService
   */
  @javax.annotation.Nonnull
  public String getNetworkService() {
    return networkService;
  }

  public void setNetworkService(String networkService) {
    this.networkService = networkService;
  }


  /**
   * The configuration will require at least one of each of the specified roles assigned to contacts.  The role assignments is associated with the network feature config through the &#x60;role_assignments&#x60; list property.
   * @return nfcRequiredContactRoles
   */
  @javax.annotation.Nullable
  public List<String> getNfcRequiredContactRoles() {
    return nfcRequiredContactRoles;
  }



  public RouteServerNetworkFeature required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public RouteServerNetworkFeature sessionMode(SessionModeEnum sessionMode) {
    this.sessionMode = sessionMode;
    return this;
  }

  /**
   * When creating a route server feature config, remember to specify the same session_mode as the route server. 
   * @return sessionMode
   */
  @javax.annotation.Nonnull
  public SessionModeEnum getSessionMode() {
    return sessionMode;
  }

  public void setSessionMode(SessionModeEnum sessionMode) {
    this.sessionMode = sessionMode;
  }


  public RouteServerNetworkFeature type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteServerNetworkFeature routeServerNetworkFeature = (RouteServerNetworkFeature) o;
    return Objects.equals(this.addressFamilies, routeServerNetworkFeature.addressFamilies) &&
        Objects.equals(this.asn, routeServerNetworkFeature.asn) &&
        Objects.equals(this.availableBgpSessionTypes, routeServerNetworkFeature.availableBgpSessionTypes) &&
        Objects.equals(this.flags, routeServerNetworkFeature.flags) &&
        Objects.equals(this.fqdn, routeServerNetworkFeature.fqdn) &&
        Objects.equals(this.id, routeServerNetworkFeature.id) &&
        Objects.equals(this.ipV4, routeServerNetworkFeature.ipV4) &&
        Objects.equals(this.ipV6, routeServerNetworkFeature.ipV6) &&
        Objects.equals(this.lookingGlassUrl, routeServerNetworkFeature.lookingGlassUrl) &&
        Objects.equals(this.name, routeServerNetworkFeature.name) &&
        Objects.equals(this.networkService, routeServerNetworkFeature.networkService) &&
        Objects.equals(this.nfcRequiredContactRoles, routeServerNetworkFeature.nfcRequiredContactRoles) &&
        Objects.equals(this.required, routeServerNetworkFeature.required) &&
        Objects.equals(this.sessionMode, routeServerNetworkFeature.sessionMode) &&
        Objects.equals(this.type, routeServerNetworkFeature.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressFamilies, asn, availableBgpSessionTypes, flags, fqdn, id, ipV4, ipV6, lookingGlassUrl, name, networkService, nfcRequiredContactRoles, required, sessionMode, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteServerNetworkFeature {\n");
    sb.append("    addressFamilies: ").append(toIndentedString(addressFamilies)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    availableBgpSessionTypes: ").append(toIndentedString(availableBgpSessionTypes)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipV4: ").append(toIndentedString(ipV4)).append("\n");
    sb.append("    ipV6: ").append(toIndentedString(ipV6)).append("\n");
    sb.append("    lookingGlassUrl: ").append(toIndentedString(lookingGlassUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkService: ").append(toIndentedString(networkService)).append("\n");
    sb.append("    nfcRequiredContactRoles: ").append(toIndentedString(nfcRequiredContactRoles)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    sessionMode: ").append(toIndentedString(sessionMode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_families");
    openapiFields.add("asn");
    openapiFields.add("available_bgp_session_types");
    openapiFields.add("flags");
    openapiFields.add("fqdn");
    openapiFields.add("id");
    openapiFields.add("ip_v4");
    openapiFields.add("ip_v6");
    openapiFields.add("looking_glass_url");
    openapiFields.add("name");
    openapiFields.add("network_service");
    openapiFields.add("nfc_required_contact_roles");
    openapiFields.add("required");
    openapiFields.add("session_mode");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address_families");
    openapiRequiredFields.add("asn");
    openapiRequiredFields.add("available_bgp_session_types");
    openapiRequiredFields.add("flags");
    openapiRequiredFields.add("fqdn");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ip_v4");
    openapiRequiredFields.add("ip_v6");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("network_service");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("session_mode");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteServerNetworkFeature
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteServerNetworkFeature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteServerNetworkFeature is not found in the empty JSON string", RouteServerNetworkFeature.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteServerNetworkFeature.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteServerNetworkFeature` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RouteServerNetworkFeature.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("address_families") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("address_families").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_families` to be an array in the JSON string but got `%s`", jsonObj.get("address_families").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("available_bgp_session_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("available_bgp_session_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_bgp_session_types` to be an array in the JSON string but got `%s`", jsonObj.get("available_bgp_session_types").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }

      JsonArray jsonArrayflags = jsonObj.getAsJsonArray("flags");
      // validate the required field `flags` (array)
      for (int i = 0; i < jsonArrayflags.size(); i++) {
        IXPSpecificFeatureFlag.validateJsonElement(jsonArrayflags.get(i));
      };
      if (!jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("ip_v4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_v4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_v4").toString()));
      }
      if (!jsonObj.get("ip_v6").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_v6` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_v6").toString()));
      }
      if ((jsonObj.get("looking_glass_url") != null && !jsonObj.get("looking_glass_url").isJsonNull()) && !jsonObj.get("looking_glass_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `looking_glass_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("looking_glass_url").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("network_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_service").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nfc_required_contact_roles") != null && !jsonObj.get("nfc_required_contact_roles").isJsonNull() && !jsonObj.get("nfc_required_contact_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfc_required_contact_roles` to be an array in the JSON string but got `%s`", jsonObj.get("nfc_required_contact_roles").toString()));
      }
      if (!jsonObj.get("session_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_mode").toString()));
      }
      // validate the required field `session_mode`
      SessionModeEnum.validateJsonElement(jsonObj.get("session_mode"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteServerNetworkFeature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteServerNetworkFeature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteServerNetworkFeature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteServerNetworkFeature.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteServerNetworkFeature>() {
           @Override
           public void write(JsonWriter out, RouteServerNetworkFeature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteServerNetworkFeature read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteServerNetworkFeature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteServerNetworkFeature
   * @throws IOException if the JSON string is invalid with respect to RouteServerNetworkFeature
   */
  public static RouteServerNetworkFeature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteServerNetworkFeature.class);
  }

  /**
   * Convert an instance of RouteServerNetworkFeature to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

