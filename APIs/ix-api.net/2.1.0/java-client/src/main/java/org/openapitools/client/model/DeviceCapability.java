/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceCapability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceCapability {
  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private Integer availability;

  public static final String SERIALIZED_NAME_MAX_LAG = "max_lag";
  @SerializedName(SERIALIZED_NAME_MAX_LAG)
  private Integer maxLag;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_SPEED = "speed";
  @SerializedName(SERIALIZED_NAME_SPEED)
  private Integer speed;

  public DeviceCapability() {
  }

  public DeviceCapability(
     Integer availability, 
     Integer maxLag, 
     String mediaType, 
     Integer speed
  ) {
    this();
    this.availability = availability;
    this.maxLag = maxLag;
    this.mediaType = mediaType;
    this.speed = speed;
  }

  /**
   * Count of available ports on device 
   * minimum: 0
   * maximum: 2147483647
   * @return availability
   */
  @javax.annotation.Nullable
  public Integer getAvailability() {
    return availability;
  }



  /**
   * Maximum count of ports which can be bundled to a max_lag
   * minimum: 0
   * maximum: 32767
   * @return maxLag
   */
  @javax.annotation.Nullable
  public Integer getMaxLag() {
    return maxLag;
  }



  /**
   * The media type of the port (e.g. 1000BASE-LX, 10GBASE-LR, ...) 
   * @return mediaType
   */
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }



  /**
   * Speed of port in Mbit/s 
   * @return speed
   */
  @javax.annotation.Nullable
  public Integer getSpeed() {
    return speed;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceCapability deviceCapability = (DeviceCapability) o;
    return Objects.equals(this.availability, deviceCapability.availability) &&
        Objects.equals(this.maxLag, deviceCapability.maxLag) &&
        Objects.equals(this.mediaType, deviceCapability.mediaType) &&
        Objects.equals(this.speed, deviceCapability.speed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, maxLag, mediaType, speed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceCapability {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    maxLag: ").append(toIndentedString(maxLag)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availability");
    openapiFields.add("max_lag");
    openapiFields.add("media_type");
    openapiFields.add("speed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceCapability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceCapability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceCapability is not found in the empty JSON string", DeviceCapability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceCapability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceCapability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("media_type") != null && !jsonObj.get("media_type").isJsonNull()) && !jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceCapability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceCapability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceCapability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceCapability.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceCapability>() {
           @Override
           public void write(JsonWriter out, DeviceCapability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceCapability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceCapability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceCapability
   * @throws IOException if the JSON string is invalid with respect to DeviceCapability
   */
  public static DeviceCapability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceCapability.class);
  }

  /**
   * Convert an instance of DeviceCapability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

