/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rule for members joining a private vlan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllowMemberJoiningRulePartial {
  public static final String SERIALIZED_NAME_CAPACITY_MAX = "capacity_max";
  @SerializedName(SERIALIZED_NAME_CAPACITY_MAX)
  private Integer capacityMax;

  public static final String SERIALIZED_NAME_CAPACITY_MIN = "capacity_min";
  @SerializedName(SERIALIZED_NAME_CAPACITY_MIN)
  private Integer capacityMin;

  public static final String SERIALIZED_NAME_CONSUMING_ACCOUNT = "consuming_account";
  @SerializedName(SERIALIZED_NAME_CONSUMING_ACCOUNT)
  private String consumingAccount;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external_ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  private String externalRef;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MANAGING_ACCOUNT = "managing_account";
  @SerializedName(SERIALIZED_NAME_MANAGING_ACCOUNT)
  private String managingAccount;

  public static final String SERIALIZED_NAME_NETWORK_SERVICE = "network_service";
  @SerializedName(SERIALIZED_NAME_NETWORK_SERVICE)
  private String networkService;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AllowMemberJoiningRulePartial() {
  }

  public AllowMemberJoiningRulePartial capacityMax(Integer capacityMax) {
    this.capacityMax = capacityMax;
    return this;
  }

  /**
   * An optional rate limit which has precedence over the capacity set in the network service config.
   * minimum: 1
   * @return capacityMax
   */
  @javax.annotation.Nullable
  public Integer getCapacityMax() {
    return capacityMax;
  }

  public void setCapacityMax(Integer capacityMax) {
    this.capacityMax = capacityMax;
  }


  public AllowMemberJoiningRulePartial capacityMin(Integer capacityMin) {
    this.capacityMin = capacityMin;
    return this;
  }

  /**
   * Require an optional minimum capacity to join the network service.
   * minimum: 1
   * @return capacityMin
   */
  @javax.annotation.Nullable
  public Integer getCapacityMin() {
    return capacityMin;
  }

  public void setCapacityMin(Integer capacityMin) {
    this.capacityMin = capacityMin;
  }


  public AllowMemberJoiningRulePartial consumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account to which access to the network service should be granted or denied. 
   * @return consumingAccount
   */
  @javax.annotation.Nullable
  public String getConsumingAccount() {
    return consumingAccount;
  }

  public void setConsumingAccount(String consumingAccount) {
    this.consumingAccount = consumingAccount;
  }


  public AllowMemberJoiningRulePartial externalRef(String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * Reference field, free to use for the API user.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(String externalRef) {
    this.externalRef = externalRef;
  }


  public AllowMemberJoiningRulePartial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AllowMemberJoiningRulePartial managingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of the account responsible for managing the service via the API. A manager can read and update the state of entities. 
   * @return managingAccount
   */
  @javax.annotation.Nullable
  public String getManagingAccount() {
    return managingAccount;
  }

  public void setManagingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
  }


  public AllowMemberJoiningRulePartial networkService(String networkService) {
    this.networkService = networkService;
    return this;
  }

  /**
   * Get networkService
   * @return networkService
   */
  @javax.annotation.Nullable
  public String getNetworkService() {
    return networkService;
  }

  public void setNetworkService(String networkService) {
    this.networkService = networkService;
  }


  public AllowMemberJoiningRulePartial type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllowMemberJoiningRulePartial allowMemberJoiningRulePartial = (AllowMemberJoiningRulePartial) o;
    return Objects.equals(this.capacityMax, allowMemberJoiningRulePartial.capacityMax) &&
        Objects.equals(this.capacityMin, allowMemberJoiningRulePartial.capacityMin) &&
        Objects.equals(this.consumingAccount, allowMemberJoiningRulePartial.consumingAccount) &&
        Objects.equals(this.externalRef, allowMemberJoiningRulePartial.externalRef) &&
        Objects.equals(this.id, allowMemberJoiningRulePartial.id) &&
        Objects.equals(this.managingAccount, allowMemberJoiningRulePartial.managingAccount) &&
        Objects.equals(this.networkService, allowMemberJoiningRulePartial.networkService) &&
        Objects.equals(this.type, allowMemberJoiningRulePartial.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityMax, capacityMin, consumingAccount, externalRef, id, managingAccount, networkService, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllowMemberJoiningRulePartial {\n");
    sb.append("    capacityMax: ").append(toIndentedString(capacityMax)).append("\n");
    sb.append("    capacityMin: ").append(toIndentedString(capacityMin)).append("\n");
    sb.append("    consumingAccount: ").append(toIndentedString(consumingAccount)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    managingAccount: ").append(toIndentedString(managingAccount)).append("\n");
    sb.append("    networkService: ").append(toIndentedString(networkService)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacity_max");
    openapiFields.add("capacity_min");
    openapiFields.add("consuming_account");
    openapiFields.add("external_ref");
    openapiFields.add("id");
    openapiFields.add("managing_account");
    openapiFields.add("network_service");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllowMemberJoiningRulePartial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllowMemberJoiningRulePartial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllowMemberJoiningRulePartial is not found in the empty JSON string", AllowMemberJoiningRulePartial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllowMemberJoiningRulePartial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllowMemberJoiningRulePartial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AllowMemberJoiningRulePartial.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consuming_account") != null && !jsonObj.get("consuming_account").isJsonNull()) && !jsonObj.get("consuming_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consuming_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consuming_account").toString()));
      }
      if ((jsonObj.get("external_ref") != null && !jsonObj.get("external_ref").isJsonNull()) && !jsonObj.get("external_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_ref").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("managing_account") != null && !jsonObj.get("managing_account").isJsonNull()) && !jsonObj.get("managing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managing_account").toString()));
      }
      if ((jsonObj.get("network_service") != null && !jsonObj.get("network_service").isJsonNull()) && !jsonObj.get("network_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network_service").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllowMemberJoiningRulePartial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllowMemberJoiningRulePartial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllowMemberJoiningRulePartial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllowMemberJoiningRulePartial.class));

       return (TypeAdapter<T>) new TypeAdapter<AllowMemberJoiningRulePartial>() {
           @Override
           public void write(JsonWriter out, AllowMemberJoiningRulePartial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllowMemberJoiningRulePartial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllowMemberJoiningRulePartial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllowMemberJoiningRulePartial
   * @throws IOException if the JSON string is invalid with respect to AllowMemberJoiningRulePartial
   */
  public static AllowMemberJoiningRulePartial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllowMemberJoiningRulePartial.class);
  }

  /**
   * Convert an instance of AllowMemberJoiningRulePartial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

