/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BillingInformation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountRequestPartial {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_BILLING_INFORMATION = "billing_information";
  @SerializedName(SERIALIZED_NAME_BILLING_INFORMATION)
  private BillingInformation billingInformation;

  public static final String SERIALIZED_NAME_DISCOVERABLE = "discoverable";
  @SerializedName(SERIALIZED_NAME_DISCOVERABLE)
  private Boolean discoverable = false;

  public static final String SERIALIZED_NAME_EXTERNAL_REF = "external_ref";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_REF)
  private String externalRef;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legal_name";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_MANAGING_ACCOUNT = "managing_account";
  @SerializedName(SERIALIZED_NAME_MANAGING_ACCOUNT)
  private String managingAccount;

  public static final String SERIALIZED_NAME_METRO_AREA_NETWORK_PRESENCE = "metro_area_network_presence";
  @SerializedName(SERIALIZED_NAME_METRO_AREA_NETWORK_PRESENCE)
  private List<String> metroAreaNetworkPresence = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public AccountRequestPartial() {
  }

  public AccountRequestPartial address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public AccountRequestPartial billingInformation(BillingInformation billingInformation) {
    this.billingInformation = billingInformation;
    return this;
  }

  /**
   * Get billingInformation
   * @return billingInformation
   */
  @javax.annotation.Nullable
  public BillingInformation getBillingInformation() {
    return billingInformation;
  }

  public void setBillingInformation(BillingInformation billingInformation) {
    this.billingInformation = billingInformation;
  }


  public AccountRequestPartial discoverable(Boolean discoverable) {
    this.discoverable = discoverable;
    return this;
  }

  /**
   * The account will be included for all members of the ix in the list of accounts.  Only &#x60;id&#x60;, &#x60;name&#x60; and &#x60;present_in_metro_area_networks&#x60; are provided to other members.
   * @return discoverable
   */
  @javax.annotation.Nullable
  public Boolean getDiscoverable() {
    return discoverable;
  }

  public void setDiscoverable(Boolean discoverable) {
    this.discoverable = discoverable;
  }


  public AccountRequestPartial externalRef(String externalRef) {
    this.externalRef = externalRef;
    return this;
  }

  /**
   * Reference field, free to use for the API user.
   * @return externalRef
   */
  @javax.annotation.Nullable
  public String getExternalRef() {
    return externalRef;
  }

  public void setExternalRef(String externalRef) {
    this.externalRef = externalRef;
  }


  public AccountRequestPartial legalName(String legalName) {
    this.legalName = legalName;
    return this;
  }

  /**
   * Legal name of the organisation. Only required when it&#39;s different from the account name. 
   * @return legalName
   */
  @javax.annotation.Nullable
  public String getLegalName() {
    return legalName;
  }

  public void setLegalName(String legalName) {
    this.legalName = legalName;
  }


  public AccountRequestPartial managingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
    return this;
  }

  /**
   * The &#x60;id&#x60; of a managing account. Can be used for creating a customer hierachy. 
   * @return managingAccount
   */
  @javax.annotation.Nullable
  public String getManagingAccount() {
    return managingAccount;
  }

  public void setManagingAccount(String managingAccount) {
    this.managingAccount = managingAccount;
  }


  public AccountRequestPartial metroAreaNetworkPresence(List<String> metroAreaNetworkPresence) {
    this.metroAreaNetworkPresence = metroAreaNetworkPresence;
    return this;
  }

  public AccountRequestPartial addMetroAreaNetworkPresenceItem(String metroAreaNetworkPresenceItem) {
    if (this.metroAreaNetworkPresence == null) {
      this.metroAreaNetworkPresence = new ArrayList<>();
    }
    this.metroAreaNetworkPresence.add(metroAreaNetworkPresenceItem);
    return this;
  }

  /**
   * Informal list of &#x60;MetroAreaNetwork&#x60; ids, indicating the presence to other accounts. The list is maintained by the account and can be empty. 
   * @return metroAreaNetworkPresence
   */
  @javax.annotation.Nullable
  public List<String> getMetroAreaNetworkPresence() {
    return metroAreaNetworkPresence;
  }

  public void setMetroAreaNetworkPresence(List<String> metroAreaNetworkPresence) {
    this.metroAreaNetworkPresence = metroAreaNetworkPresence;
  }


  public AccountRequestPartial name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the account, how it gets represented in e.g. a \&quot;customers list\&quot;. 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountRequestPartial accountRequestPartial = (AccountRequestPartial) o;
    return Objects.equals(this.address, accountRequestPartial.address) &&
        Objects.equals(this.billingInformation, accountRequestPartial.billingInformation) &&
        Objects.equals(this.discoverable, accountRequestPartial.discoverable) &&
        Objects.equals(this.externalRef, accountRequestPartial.externalRef) &&
        Objects.equals(this.legalName, accountRequestPartial.legalName) &&
        Objects.equals(this.managingAccount, accountRequestPartial.managingAccount) &&
        Objects.equals(this.metroAreaNetworkPresence, accountRequestPartial.metroAreaNetworkPresence) &&
        Objects.equals(this.name, accountRequestPartial.name);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, billingInformation, discoverable, externalRef, legalName, managingAccount, metroAreaNetworkPresence, name);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountRequestPartial {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    billingInformation: ").append(toIndentedString(billingInformation)).append("\n");
    sb.append("    discoverable: ").append(toIndentedString(discoverable)).append("\n");
    sb.append("    externalRef: ").append(toIndentedString(externalRef)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    managingAccount: ").append(toIndentedString(managingAccount)).append("\n");
    sb.append("    metroAreaNetworkPresence: ").append(toIndentedString(metroAreaNetworkPresence)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("billing_information");
    openapiFields.add("discoverable");
    openapiFields.add("external_ref");
    openapiFields.add("legal_name");
    openapiFields.add("managing_account");
    openapiFields.add("metro_area_network_presence");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountRequestPartial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountRequestPartial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountRequestPartial is not found in the empty JSON string", AccountRequestPartial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountRequestPartial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountRequestPartial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `billing_information`
      if (jsonObj.get("billing_information") != null && !jsonObj.get("billing_information").isJsonNull()) {
        BillingInformation.validateJsonElement(jsonObj.get("billing_information"));
      }
      if ((jsonObj.get("external_ref") != null && !jsonObj.get("external_ref").isJsonNull()) && !jsonObj.get("external_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_ref").toString()));
      }
      if ((jsonObj.get("legal_name") != null && !jsonObj.get("legal_name").isJsonNull()) && !jsonObj.get("legal_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legal_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legal_name").toString()));
      }
      if ((jsonObj.get("managing_account") != null && !jsonObj.get("managing_account").isJsonNull()) && !jsonObj.get("managing_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managing_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managing_account").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metro_area_network_presence") != null && !jsonObj.get("metro_area_network_presence").isJsonNull() && !jsonObj.get("metro_area_network_presence").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro_area_network_presence` to be an array in the JSON string but got `%s`", jsonObj.get("metro_area_network_presence").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountRequestPartial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountRequestPartial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountRequestPartial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountRequestPartial.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountRequestPartial>() {
           @Override
           public void write(JsonWriter out, AccountRequestPartial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountRequestPartial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountRequestPartial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountRequestPartial
   * @throws IOException if the JSON string is invalid with respect to AccountRequestPartial
   */
  public static AccountRequestPartial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountRequestPartial.class);
  }

  /**
   * Convert an instance of AccountRequestPartial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

