/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CloudNetworkServiceRequest;
import org.openapitools.client.model.MP2MPNetworkServiceRequest;
import org.openapitools.client.model.P2MPNetworkServiceRequest;
import org.openapitools.client.model.P2PNetworkServiceRequest;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkServiceRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NetworkServiceRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NetworkServiceRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NetworkServiceRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<P2PNetworkServiceRequest> adapterP2PNetworkServiceRequest = gson.getDelegateAdapter(this, TypeToken.get(P2PNetworkServiceRequest.class));
            final TypeAdapter<P2MPNetworkServiceRequest> adapterP2MPNetworkServiceRequest = gson.getDelegateAdapter(this, TypeToken.get(P2MPNetworkServiceRequest.class));
            final TypeAdapter<MP2MPNetworkServiceRequest> adapterMP2MPNetworkServiceRequest = gson.getDelegateAdapter(this, TypeToken.get(MP2MPNetworkServiceRequest.class));
            final TypeAdapter<CloudNetworkServiceRequest> adapterCloudNetworkServiceRequest = gson.getDelegateAdapter(this, TypeToken.get(CloudNetworkServiceRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<NetworkServiceRequest>() {
                @Override
                public void write(JsonWriter out, NetworkServiceRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `P2PNetworkServiceRequest`
                    if (value.getActualInstance() instanceof P2PNetworkServiceRequest) {
                        JsonElement element = adapterP2PNetworkServiceRequest.toJsonTree((P2PNetworkServiceRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2MPNetworkServiceRequest`
                    if (value.getActualInstance() instanceof P2MPNetworkServiceRequest) {
                        JsonElement element = adapterP2MPNetworkServiceRequest.toJsonTree((P2MPNetworkServiceRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MP2MPNetworkServiceRequest`
                    if (value.getActualInstance() instanceof MP2MPNetworkServiceRequest) {
                        JsonElement element = adapterMP2MPNetworkServiceRequest.toJsonTree((MP2MPNetworkServiceRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudNetworkServiceRequest`
                    if (value.getActualInstance() instanceof CloudNetworkServiceRequest) {
                        JsonElement element = adapterCloudNetworkServiceRequest.toJsonTree((CloudNetworkServiceRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest");
                }

                @Override
                public NetworkServiceRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize P2PNetworkServiceRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2PNetworkServiceRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2PNetworkServiceRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2PNetworkServiceRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2PNetworkServiceRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2PNetworkServiceRequest'", e);
                    }
                    // deserialize P2MPNetworkServiceRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2MPNetworkServiceRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2MPNetworkServiceRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2MPNetworkServiceRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2MPNetworkServiceRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2MPNetworkServiceRequest'", e);
                    }
                    // deserialize MP2MPNetworkServiceRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MP2MPNetworkServiceRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterMP2MPNetworkServiceRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MP2MPNetworkServiceRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MP2MPNetworkServiceRequest'", e);
                    }
                    // deserialize CloudNetworkServiceRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudNetworkServiceRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudNetworkServiceRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudNetworkServiceRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudNetworkServiceRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudNetworkServiceRequest'", e);
                    }

                    if (match == 1) {
                        NetworkServiceRequest ret = new NetworkServiceRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for NetworkServiceRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NetworkServiceRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public NetworkServiceRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("P2PNetworkServiceRequest", P2PNetworkServiceRequest.class);
        schemas.put("P2MPNetworkServiceRequest", P2MPNetworkServiceRequest.class);
        schemas.put("MP2MPNetworkServiceRequest", MP2MPNetworkServiceRequest.class);
        schemas.put("CloudNetworkServiceRequest", CloudNetworkServiceRequest.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NetworkServiceRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof P2PNetworkServiceRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2MPNetworkServiceRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MP2MPNetworkServiceRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudNetworkServiceRequest) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest
     *
     * @return The actual instance (CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `P2PNetworkServiceRequest`. If the actual instance is not `P2PNetworkServiceRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2PNetworkServiceRequest`
     * @throws ClassCastException if the instance is not `P2PNetworkServiceRequest`
     */
    public P2PNetworkServiceRequest getP2PNetworkServiceRequest() throws ClassCastException {
        return (P2PNetworkServiceRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2MPNetworkServiceRequest`. If the actual instance is not `P2MPNetworkServiceRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2MPNetworkServiceRequest`
     * @throws ClassCastException if the instance is not `P2MPNetworkServiceRequest`
     */
    public P2MPNetworkServiceRequest getP2MPNetworkServiceRequest() throws ClassCastException {
        return (P2MPNetworkServiceRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MP2MPNetworkServiceRequest`. If the actual instance is not `MP2MPNetworkServiceRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MP2MPNetworkServiceRequest`
     * @throws ClassCastException if the instance is not `MP2MPNetworkServiceRequest`
     */
    public MP2MPNetworkServiceRequest getMP2MPNetworkServiceRequest() throws ClassCastException {
        return (MP2MPNetworkServiceRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudNetworkServiceRequest`. If the actual instance is not `CloudNetworkServiceRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudNetworkServiceRequest`
     * @throws ClassCastException if the instance is not `CloudNetworkServiceRequest`
     */
    public CloudNetworkServiceRequest getCloudNetworkServiceRequest() throws ClassCastException {
        return (CloudNetworkServiceRequest)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NetworkServiceRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with P2PNetworkServiceRequest
        try {
            P2PNetworkServiceRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2PNetworkServiceRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2MPNetworkServiceRequest
        try {
            P2MPNetworkServiceRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2MPNetworkServiceRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MP2MPNetworkServiceRequest
        try {
            MP2MPNetworkServiceRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudNetworkServiceRequest
        try {
            CloudNetworkServiceRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudNetworkServiceRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for NetworkServiceRequest with oneOf schemas: CloudNetworkServiceRequest, MP2MPNetworkServiceRequest, P2MPNetworkServiceRequest, P2PNetworkServiceRequest. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of NetworkServiceRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NetworkServiceRequest
     * @throws IOException if the JSON string is invalid with respect to NetworkServiceRequest
     */
    public static NetworkServiceRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NetworkServiceRequest.class);
    }

    /**
     * Convert an instance of NetworkServiceRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

