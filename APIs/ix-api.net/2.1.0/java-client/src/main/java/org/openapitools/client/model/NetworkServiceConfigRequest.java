/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudNetworkServiceConfigRequest;
import org.openapitools.client.model.ExchangeLanNetworkServiceConfigRequest;
import org.openapitools.client.model.MP2MPNetworkServiceConfigRequest;
import org.openapitools.client.model.P2MPNetworkServiceConfigRequest;
import org.openapitools.client.model.P2PNetworkServiceConfigRequest;
import org.openapitools.client.model.VlanConfig;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkServiceConfigRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NetworkServiceConfigRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NetworkServiceConfigRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NetworkServiceConfigRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeLanNetworkServiceConfigRequest> adapterExchangeLanNetworkServiceConfigRequest = gson.getDelegateAdapter(this, TypeToken.get(ExchangeLanNetworkServiceConfigRequest.class));
            final TypeAdapter<P2PNetworkServiceConfigRequest> adapterP2PNetworkServiceConfigRequest = gson.getDelegateAdapter(this, TypeToken.get(P2PNetworkServiceConfigRequest.class));
            final TypeAdapter<P2MPNetworkServiceConfigRequest> adapterP2MPNetworkServiceConfigRequest = gson.getDelegateAdapter(this, TypeToken.get(P2MPNetworkServiceConfigRequest.class));
            final TypeAdapter<MP2MPNetworkServiceConfigRequest> adapterMP2MPNetworkServiceConfigRequest = gson.getDelegateAdapter(this, TypeToken.get(MP2MPNetworkServiceConfigRequest.class));
            final TypeAdapter<CloudNetworkServiceConfigRequest> adapterCloudNetworkServiceConfigRequest = gson.getDelegateAdapter(this, TypeToken.get(CloudNetworkServiceConfigRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<NetworkServiceConfigRequest>() {
                @Override
                public void write(JsonWriter out, NetworkServiceConfigRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ExchangeLanNetworkServiceConfigRequest`
                    if (value.getActualInstance() instanceof ExchangeLanNetworkServiceConfigRequest) {
                        JsonElement element = adapterExchangeLanNetworkServiceConfigRequest.toJsonTree((ExchangeLanNetworkServiceConfigRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2PNetworkServiceConfigRequest`
                    if (value.getActualInstance() instanceof P2PNetworkServiceConfigRequest) {
                        JsonElement element = adapterP2PNetworkServiceConfigRequest.toJsonTree((P2PNetworkServiceConfigRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `P2MPNetworkServiceConfigRequest`
                    if (value.getActualInstance() instanceof P2MPNetworkServiceConfigRequest) {
                        JsonElement element = adapterP2MPNetworkServiceConfigRequest.toJsonTree((P2MPNetworkServiceConfigRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MP2MPNetworkServiceConfigRequest`
                    if (value.getActualInstance() instanceof MP2MPNetworkServiceConfigRequest) {
                        JsonElement element = adapterMP2MPNetworkServiceConfigRequest.toJsonTree((MP2MPNetworkServiceConfigRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudNetworkServiceConfigRequest`
                    if (value.getActualInstance() instanceof CloudNetworkServiceConfigRequest) {
                        JsonElement element = adapterCloudNetworkServiceConfigRequest.toJsonTree((CloudNetworkServiceConfigRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CloudNetworkServiceConfigRequest, ExchangeLanNetworkServiceConfigRequest, MP2MPNetworkServiceConfigRequest, P2MPNetworkServiceConfigRequest, P2PNetworkServiceConfigRequest");
                }

                @Override
                public NetworkServiceConfigRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ExchangeLanNetworkServiceConfigRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ExchangeLanNetworkServiceConfigRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterExchangeLanNetworkServiceConfigRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ExchangeLanNetworkServiceConfigRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ExchangeLanNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ExchangeLanNetworkServiceConfigRequest'", e);
                    }
                    // deserialize P2PNetworkServiceConfigRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2PNetworkServiceConfigRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2PNetworkServiceConfigRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2PNetworkServiceConfigRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2PNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2PNetworkServiceConfigRequest'", e);
                    }
                    // deserialize P2MPNetworkServiceConfigRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        P2MPNetworkServiceConfigRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterP2MPNetworkServiceConfigRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'P2MPNetworkServiceConfigRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for P2MPNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'P2MPNetworkServiceConfigRequest'", e);
                    }
                    // deserialize MP2MPNetworkServiceConfigRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MP2MPNetworkServiceConfigRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterMP2MPNetworkServiceConfigRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MP2MPNetworkServiceConfigRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MP2MPNetworkServiceConfigRequest'", e);
                    }
                    // deserialize CloudNetworkServiceConfigRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudNetworkServiceConfigRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudNetworkServiceConfigRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudNetworkServiceConfigRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudNetworkServiceConfigRequest'", e);
                    }

                    if (match == 1) {
                        NetworkServiceConfigRequest ret = new NetworkServiceConfigRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for NetworkServiceConfigRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NetworkServiceConfigRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public NetworkServiceConfigRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ExchangeLanNetworkServiceConfigRequest", ExchangeLanNetworkServiceConfigRequest.class);
        schemas.put("P2PNetworkServiceConfigRequest", P2PNetworkServiceConfigRequest.class);
        schemas.put("P2MPNetworkServiceConfigRequest", P2MPNetworkServiceConfigRequest.class);
        schemas.put("MP2MPNetworkServiceConfigRequest", MP2MPNetworkServiceConfigRequest.class);
        schemas.put("CloudNetworkServiceConfigRequest", CloudNetworkServiceConfigRequest.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NetworkServiceConfigRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CloudNetworkServiceConfigRequest, ExchangeLanNetworkServiceConfigRequest, MP2MPNetworkServiceConfigRequest, P2MPNetworkServiceConfigRequest, P2PNetworkServiceConfigRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ExchangeLanNetworkServiceConfigRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2PNetworkServiceConfigRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof P2MPNetworkServiceConfigRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MP2MPNetworkServiceConfigRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudNetworkServiceConfigRequest) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CloudNetworkServiceConfigRequest, ExchangeLanNetworkServiceConfigRequest, MP2MPNetworkServiceConfigRequest, P2MPNetworkServiceConfigRequest, P2PNetworkServiceConfigRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * CloudNetworkServiceConfigRequest, ExchangeLanNetworkServiceConfigRequest, MP2MPNetworkServiceConfigRequest, P2MPNetworkServiceConfigRequest, P2PNetworkServiceConfigRequest
     *
     * @return The actual instance (CloudNetworkServiceConfigRequest, ExchangeLanNetworkServiceConfigRequest, MP2MPNetworkServiceConfigRequest, P2MPNetworkServiceConfigRequest, P2PNetworkServiceConfigRequest)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ExchangeLanNetworkServiceConfigRequest`. If the actual instance is not `ExchangeLanNetworkServiceConfigRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ExchangeLanNetworkServiceConfigRequest`
     * @throws ClassCastException if the instance is not `ExchangeLanNetworkServiceConfigRequest`
     */
    public ExchangeLanNetworkServiceConfigRequest getExchangeLanNetworkServiceConfigRequest() throws ClassCastException {
        return (ExchangeLanNetworkServiceConfigRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2PNetworkServiceConfigRequest`. If the actual instance is not `P2PNetworkServiceConfigRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2PNetworkServiceConfigRequest`
     * @throws ClassCastException if the instance is not `P2PNetworkServiceConfigRequest`
     */
    public P2PNetworkServiceConfigRequest getP2PNetworkServiceConfigRequest() throws ClassCastException {
        return (P2PNetworkServiceConfigRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `P2MPNetworkServiceConfigRequest`. If the actual instance is not `P2MPNetworkServiceConfigRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `P2MPNetworkServiceConfigRequest`
     * @throws ClassCastException if the instance is not `P2MPNetworkServiceConfigRequest`
     */
    public P2MPNetworkServiceConfigRequest getP2MPNetworkServiceConfigRequest() throws ClassCastException {
        return (P2MPNetworkServiceConfigRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MP2MPNetworkServiceConfigRequest`. If the actual instance is not `MP2MPNetworkServiceConfigRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MP2MPNetworkServiceConfigRequest`
     * @throws ClassCastException if the instance is not `MP2MPNetworkServiceConfigRequest`
     */
    public MP2MPNetworkServiceConfigRequest getMP2MPNetworkServiceConfigRequest() throws ClassCastException {
        return (MP2MPNetworkServiceConfigRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CloudNetworkServiceConfigRequest`. If the actual instance is not `CloudNetworkServiceConfigRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudNetworkServiceConfigRequest`
     * @throws ClassCastException if the instance is not `CloudNetworkServiceConfigRequest`
     */
    public CloudNetworkServiceConfigRequest getCloudNetworkServiceConfigRequest() throws ClassCastException {
        return (CloudNetworkServiceConfigRequest)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NetworkServiceConfigRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ExchangeLanNetworkServiceConfigRequest
        try {
            ExchangeLanNetworkServiceConfigRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ExchangeLanNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2PNetworkServiceConfigRequest
        try {
            P2PNetworkServiceConfigRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2PNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with P2MPNetworkServiceConfigRequest
        try {
            P2MPNetworkServiceConfigRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for P2MPNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MP2MPNetworkServiceConfigRequest
        try {
            MP2MPNetworkServiceConfigRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MP2MPNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudNetworkServiceConfigRequest
        try {
            CloudNetworkServiceConfigRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudNetworkServiceConfigRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for NetworkServiceConfigRequest with oneOf schemas: CloudNetworkServiceConfigRequest, ExchangeLanNetworkServiceConfigRequest, MP2MPNetworkServiceConfigRequest, P2MPNetworkServiceConfigRequest, P2PNetworkServiceConfigRequest. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of NetworkServiceConfigRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NetworkServiceConfigRequest
     * @throws IOException if the JSON string is invalid with respect to NetworkServiceConfigRequest
     */
    public static NetworkServiceConfigRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NetworkServiceConfigRequest.class);
    }

    /**
     * Convert an instance of NetworkServiceConfigRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

