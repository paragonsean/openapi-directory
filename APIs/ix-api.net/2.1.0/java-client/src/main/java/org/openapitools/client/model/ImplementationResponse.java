/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImplementationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImplementationResponse {
  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schema_version";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_SERVICE_VERSION = "service_version";
  @SerializedName(SERIALIZED_NAME_SERVICE_VERSION)
  private String serviceVersion;

  public static final String SERIALIZED_NAME_SUPPORTED_NETWORK_FEATURE_CONFIG_TYPES = "supported_network_feature_config_types";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_NETWORK_FEATURE_CONFIG_TYPES)
  private List<String> supportedNetworkFeatureConfigTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_NETWORK_FEATURE_TYPES = "supported_network_feature_types";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_NETWORK_FEATURE_TYPES)
  private List<String> supportedNetworkFeatureTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_NETWORK_SERVICE_CONFIG_TYPES = "supported_network_service_config_types";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_NETWORK_SERVICE_CONFIG_TYPES)
  private List<String> supportedNetworkServiceConfigTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_NETWORK_SERVICE_TYPES = "supported_network_service_types";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_NETWORK_SERVICE_TYPES)
  private List<String> supportedNetworkServiceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_OPERATIONS = "supported_operations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_OPERATIONS)
  private List<String> supportedOperations = new ArrayList<>();

  public ImplementationResponse() {
  }

  public ImplementationResponse schemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Version of the implemented IX-API schema. 
   * @return schemaVersion
   */
  @javax.annotation.Nonnull
  public String getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public ImplementationResponse serviceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
    return this;
  }

  /**
   * Version of the API service. 
   * @return serviceVersion
   */
  @javax.annotation.Nullable
  public String getServiceVersion() {
    return serviceVersion;
  }

  public void setServiceVersion(String serviceVersion) {
    this.serviceVersion = serviceVersion;
  }


  public ImplementationResponse supportedNetworkFeatureConfigTypes(List<String> supportedNetworkFeatureConfigTypes) {
    this.supportedNetworkFeatureConfigTypes = supportedNetworkFeatureConfigTypes;
    return this;
  }

  public ImplementationResponse addSupportedNetworkFeatureConfigTypesItem(String supportedNetworkFeatureConfigTypesItem) {
    if (this.supportedNetworkFeatureConfigTypes == null) {
      this.supportedNetworkFeatureConfigTypes = new ArrayList<>();
    }
    this.supportedNetworkFeatureConfigTypes.add(supportedNetworkFeatureConfigTypesItem);
    return this;
  }

  /**
   * Array of supported network feature config types. 
   * @return supportedNetworkFeatureConfigTypes
   */
  @javax.annotation.Nonnull
  public List<String> getSupportedNetworkFeatureConfigTypes() {
    return supportedNetworkFeatureConfigTypes;
  }

  public void setSupportedNetworkFeatureConfigTypes(List<String> supportedNetworkFeatureConfigTypes) {
    this.supportedNetworkFeatureConfigTypes = supportedNetworkFeatureConfigTypes;
  }


  public ImplementationResponse supportedNetworkFeatureTypes(List<String> supportedNetworkFeatureTypes) {
    this.supportedNetworkFeatureTypes = supportedNetworkFeatureTypes;
    return this;
  }

  public ImplementationResponse addSupportedNetworkFeatureTypesItem(String supportedNetworkFeatureTypesItem) {
    if (this.supportedNetworkFeatureTypes == null) {
      this.supportedNetworkFeatureTypes = new ArrayList<>();
    }
    this.supportedNetworkFeatureTypes.add(supportedNetworkFeatureTypesItem);
    return this;
  }

  /**
   * Array of supported network feature types. 
   * @return supportedNetworkFeatureTypes
   */
  @javax.annotation.Nonnull
  public List<String> getSupportedNetworkFeatureTypes() {
    return supportedNetworkFeatureTypes;
  }

  public void setSupportedNetworkFeatureTypes(List<String> supportedNetworkFeatureTypes) {
    this.supportedNetworkFeatureTypes = supportedNetworkFeatureTypes;
  }


  public ImplementationResponse supportedNetworkServiceConfigTypes(List<String> supportedNetworkServiceConfigTypes) {
    this.supportedNetworkServiceConfigTypes = supportedNetworkServiceConfigTypes;
    return this;
  }

  public ImplementationResponse addSupportedNetworkServiceConfigTypesItem(String supportedNetworkServiceConfigTypesItem) {
    if (this.supportedNetworkServiceConfigTypes == null) {
      this.supportedNetworkServiceConfigTypes = new ArrayList<>();
    }
    this.supportedNetworkServiceConfigTypes.add(supportedNetworkServiceConfigTypesItem);
    return this;
  }

  /**
   * Array of supported network service config types. 
   * @return supportedNetworkServiceConfigTypes
   */
  @javax.annotation.Nonnull
  public List<String> getSupportedNetworkServiceConfigTypes() {
    return supportedNetworkServiceConfigTypes;
  }

  public void setSupportedNetworkServiceConfigTypes(List<String> supportedNetworkServiceConfigTypes) {
    this.supportedNetworkServiceConfigTypes = supportedNetworkServiceConfigTypes;
  }


  public ImplementationResponse supportedNetworkServiceTypes(List<String> supportedNetworkServiceTypes) {
    this.supportedNetworkServiceTypes = supportedNetworkServiceTypes;
    return this;
  }

  public ImplementationResponse addSupportedNetworkServiceTypesItem(String supportedNetworkServiceTypesItem) {
    if (this.supportedNetworkServiceTypes == null) {
      this.supportedNetworkServiceTypes = new ArrayList<>();
    }
    this.supportedNetworkServiceTypes.add(supportedNetworkServiceTypesItem);
    return this;
  }

  /**
   * Array of network service types, supported by the IX. 
   * @return supportedNetworkServiceTypes
   */
  @javax.annotation.Nonnull
  public List<String> getSupportedNetworkServiceTypes() {
    return supportedNetworkServiceTypes;
  }

  public void setSupportedNetworkServiceTypes(List<String> supportedNetworkServiceTypes) {
    this.supportedNetworkServiceTypes = supportedNetworkServiceTypes;
  }


  public ImplementationResponse supportedOperations(List<String> supportedOperations) {
    this.supportedOperations = supportedOperations;
    return this;
  }

  public ImplementationResponse addSupportedOperationsItem(String supportedOperationsItem) {
    if (this.supportedOperations == null) {
      this.supportedOperations = new ArrayList<>();
    }
    this.supportedOperations.add(supportedOperationsItem);
    return this;
  }

  /**
   * Array of implemented operations of the ix-api schema. 
   * @return supportedOperations
   */
  @javax.annotation.Nonnull
  public List<String> getSupportedOperations() {
    return supportedOperations;
  }

  public void setSupportedOperations(List<String> supportedOperations) {
    this.supportedOperations = supportedOperations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImplementationResponse implementationResponse = (ImplementationResponse) o;
    return Objects.equals(this.schemaVersion, implementationResponse.schemaVersion) &&
        Objects.equals(this.serviceVersion, implementationResponse.serviceVersion) &&
        Objects.equals(this.supportedNetworkFeatureConfigTypes, implementationResponse.supportedNetworkFeatureConfigTypes) &&
        Objects.equals(this.supportedNetworkFeatureTypes, implementationResponse.supportedNetworkFeatureTypes) &&
        Objects.equals(this.supportedNetworkServiceConfigTypes, implementationResponse.supportedNetworkServiceConfigTypes) &&
        Objects.equals(this.supportedNetworkServiceTypes, implementationResponse.supportedNetworkServiceTypes) &&
        Objects.equals(this.supportedOperations, implementationResponse.supportedOperations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaVersion, serviceVersion, supportedNetworkFeatureConfigTypes, supportedNetworkFeatureTypes, supportedNetworkServiceConfigTypes, supportedNetworkServiceTypes, supportedOperations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImplementationResponse {\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    serviceVersion: ").append(toIndentedString(serviceVersion)).append("\n");
    sb.append("    supportedNetworkFeatureConfigTypes: ").append(toIndentedString(supportedNetworkFeatureConfigTypes)).append("\n");
    sb.append("    supportedNetworkFeatureTypes: ").append(toIndentedString(supportedNetworkFeatureTypes)).append("\n");
    sb.append("    supportedNetworkServiceConfigTypes: ").append(toIndentedString(supportedNetworkServiceConfigTypes)).append("\n");
    sb.append("    supportedNetworkServiceTypes: ").append(toIndentedString(supportedNetworkServiceTypes)).append("\n");
    sb.append("    supportedOperations: ").append(toIndentedString(supportedOperations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schema_version");
    openapiFields.add("service_version");
    openapiFields.add("supported_network_feature_config_types");
    openapiFields.add("supported_network_feature_types");
    openapiFields.add("supported_network_service_config_types");
    openapiFields.add("supported_network_service_types");
    openapiFields.add("supported_operations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schema_version");
    openapiRequiredFields.add("supported_network_feature_config_types");
    openapiRequiredFields.add("supported_network_feature_types");
    openapiRequiredFields.add("supported_network_service_config_types");
    openapiRequiredFields.add("supported_network_service_types");
    openapiRequiredFields.add("supported_operations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImplementationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImplementationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImplementationResponse is not found in the empty JSON string", ImplementationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImplementationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImplementationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImplementationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("schema_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema_version").toString()));
      }
      if ((jsonObj.get("service_version") != null && !jsonObj.get("service_version").isJsonNull()) && !jsonObj.get("service_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_version").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_network_feature_config_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_network_feature_config_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_network_feature_config_types` to be an array in the JSON string but got `%s`", jsonObj.get("supported_network_feature_config_types").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_network_feature_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_network_feature_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_network_feature_types` to be an array in the JSON string but got `%s`", jsonObj.get("supported_network_feature_types").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_network_service_config_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_network_service_config_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_network_service_config_types` to be an array in the JSON string but got `%s`", jsonObj.get("supported_network_service_config_types").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_network_service_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_network_service_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_network_service_types` to be an array in the JSON string but got `%s`", jsonObj.get("supported_network_service_types").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_operations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_operations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_operations` to be an array in the JSON string but got `%s`", jsonObj.get("supported_operations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImplementationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImplementationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImplementationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImplementationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ImplementationResponse>() {
           @Override
           public void write(JsonWriter out, ImplementationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImplementationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImplementationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImplementationResponse
   * @throws IOException if the JSON string is invalid with respect to ImplementationResponse
   */
  public static ImplementationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImplementationResponse.class);
  }

  /**
   * Convert an instance of ImplementationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

