/*
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MetroAreaNetwork
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:06.601153-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetroAreaNetwork {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METRO_AREA = "metro_area";
  @SerializedName(SERIALIZED_NAME_METRO_AREA)
  private String metroArea;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POPS = "pops";
  @SerializedName(SERIALIZED_NAME_POPS)
  private List<String> pops = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER = "service_provider";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER)
  private String serviceProvider;

  public MetroAreaNetwork() {
  }

  public MetroAreaNetwork id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MetroAreaNetwork metroArea(String metroArea) {
    this.metroArea = metroArea;
    return this;
  }

  /**
   * The id of the metro area. 
   * @return metroArea
   */
  @javax.annotation.Nonnull
  public String getMetroArea() {
    return metroArea;
  }

  public void setMetroArea(String metroArea) {
    this.metroArea = metroArea;
  }


  public MetroAreaNetwork name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the metro area network. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MetroAreaNetwork pops(List<String> pops) {
    this.pops = pops;
    return this;
  }

  public MetroAreaNetwork addPopsItem(String popsItem) {
    if (this.pops == null) {
      this.pops = new ArrayList<>();
    }
    this.pops.add(popsItem);
    return this;
  }

  /**
   * List of pops in the metro area network.
   * @return pops
   */
  @javax.annotation.Nonnull
  public List<String> getPops() {
    return pops;
  }

  public void setPops(List<String> pops) {
    this.pops = pops;
  }


  public MetroAreaNetwork serviceProvider(String serviceProvider) {
    this.serviceProvider = serviceProvider;
    return this;
  }

  /**
   * The service provider is operating the network. Usually the exchange. 
   * @return serviceProvider
   */
  @javax.annotation.Nonnull
  public String getServiceProvider() {
    return serviceProvider;
  }

  public void setServiceProvider(String serviceProvider) {
    this.serviceProvider = serviceProvider;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetroAreaNetwork metroAreaNetwork = (MetroAreaNetwork) o;
    return Objects.equals(this.id, metroAreaNetwork.id) &&
        Objects.equals(this.metroArea, metroAreaNetwork.metroArea) &&
        Objects.equals(this.name, metroAreaNetwork.name) &&
        Objects.equals(this.pops, metroAreaNetwork.pops) &&
        Objects.equals(this.serviceProvider, metroAreaNetwork.serviceProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, metroArea, name, pops, serviceProvider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetroAreaNetwork {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metroArea: ").append(toIndentedString(metroArea)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pops: ").append(toIndentedString(pops)).append("\n");
    sb.append("    serviceProvider: ").append(toIndentedString(serviceProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("metro_area");
    openapiFields.add("name");
    openapiFields.add("pops");
    openapiFields.add("service_provider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("metro_area");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pops");
    openapiRequiredFields.add("service_provider");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetroAreaNetwork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetroAreaNetwork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetroAreaNetwork is not found in the empty JSON string", MetroAreaNetwork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetroAreaNetwork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetroAreaNetwork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetroAreaNetwork.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("metro_area").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metro_area` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metro_area").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pops") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pops").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pops` to be an array in the JSON string but got `%s`", jsonObj.get("pops").toString()));
      }
      if (!jsonObj.get("service_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_provider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetroAreaNetwork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetroAreaNetwork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetroAreaNetwork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetroAreaNetwork.class));

       return (TypeAdapter<T>) new TypeAdapter<MetroAreaNetwork>() {
           @Override
           public void write(JsonWriter out, MetroAreaNetwork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetroAreaNetwork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetroAreaNetwork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetroAreaNetwork
   * @throws IOException if the JSON string is invalid with respect to MetroAreaNetwork
   */
  public static MetroAreaNetwork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetroAreaNetwork.class);
  }

  /**
   * Convert an instance of MetroAreaNetwork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

