# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_network_service_request import CloudNetworkServiceRequest
from openapi_server.models.mp2_mp_network_service_request import MP2MPNetworkServiceRequest
from openapi_server.models.p2_mp_network_service_request import P2MPNetworkServiceRequest
from openapi_server.models.p2_p_network_service_request import P2PNetworkServiceRequest
from openapi_server import util


class NetworkServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, consuming_account: str=None, contract_ref: str=None, external_ref: str=None, joining_member_account: str=None, managing_account: str=None, product_offering: str=None, purchase_order: str='', type: str=None, name: str=None, public: bool=False, capacity: int=None, cloud_key: str=None):
        """NetworkServiceRequest - a model defined in OpenAPI

        :param billing_account: The billing_account of this NetworkServiceRequest.
        :param consuming_account: The consuming_account of this NetworkServiceRequest.
        :param contract_ref: The contract_ref of this NetworkServiceRequest.
        :param external_ref: The external_ref of this NetworkServiceRequest.
        :param joining_member_account: The joining_member_account of this NetworkServiceRequest.
        :param managing_account: The managing_account of this NetworkServiceRequest.
        :param product_offering: The product_offering of this NetworkServiceRequest.
        :param purchase_order: The purchase_order of this NetworkServiceRequest.
        :param type: The type of this NetworkServiceRequest.
        :param name: The name of this NetworkServiceRequest.
        :param public: The public of this NetworkServiceRequest.
        :param capacity: The capacity of this NetworkServiceRequest.
        :param cloud_key: The cloud_key of this NetworkServiceRequest.
        """
        self.openapi_types = {
            'billing_account': str,
            'consuming_account': str,
            'contract_ref': str,
            'external_ref': str,
            'joining_member_account': str,
            'managing_account': str,
            'product_offering': str,
            'purchase_order': str,
            'type': str,
            'name': str,
            'public': bool,
            'capacity': int,
            'cloud_key': str
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'external_ref': 'external_ref',
            'joining_member_account': 'joining_member_account',
            'managing_account': 'managing_account',
            'product_offering': 'product_offering',
            'purchase_order': 'purchase_order',
            'type': 'type',
            'name': 'name',
            'public': 'public',
            'capacity': 'capacity',
            'cloud_key': 'cloud_key'
        }

        self._billing_account = billing_account
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._external_ref = external_ref
        self._joining_member_account = joining_member_account
        self._managing_account = managing_account
        self._product_offering = product_offering
        self._purchase_order = purchase_order
        self._type = type
        self._name = name
        self._public = public
        self._capacity = capacity
        self._cloud_key = cloud_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkServiceRequest of this NetworkServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this NetworkServiceRequest.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this NetworkServiceRequest.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this NetworkServiceRequest.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this NetworkServiceRequest.
        :type billing_account: str
        """
        if billing_account is None:
            raise ValueError("Invalid value for `billing_account`, must not be `None`")

        self._billing_account = billing_account

    @property
    def consuming_account(self):
        """Gets the consuming_account of this NetworkServiceRequest.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this NetworkServiceRequest.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this NetworkServiceRequest.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this NetworkServiceRequest.
        :type consuming_account: str
        """
        if consuming_account is None:
            raise ValueError("Invalid value for `consuming_account`, must not be `None`")

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this NetworkServiceRequest.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this NetworkServiceRequest.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this NetworkServiceRequest.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this NetworkServiceRequest.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def external_ref(self):
        """Gets the external_ref of this NetworkServiceRequest.

        Reference field, free to use for the API user.

        :return: The external_ref of this NetworkServiceRequest.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this NetworkServiceRequest.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this NetworkServiceRequest.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def joining_member_account(self):
        """Gets the joining_member_account of this NetworkServiceRequest.

        The account of the B-side member joining the virtual circuit. 

        :return: The joining_member_account of this NetworkServiceRequest.
        :rtype: str
        """
        return self._joining_member_account

    @joining_member_account.setter
    def joining_member_account(self, joining_member_account):
        """Sets the joining_member_account of this NetworkServiceRequest.

        The account of the B-side member joining the virtual circuit. 

        :param joining_member_account: The joining_member_account of this NetworkServiceRequest.
        :type joining_member_account: str
        """
        if joining_member_account is None:
            raise ValueError("Invalid value for `joining_member_account`, must not be `None`")

        self._joining_member_account = joining_member_account

    @property
    def managing_account(self):
        """Gets the managing_account of this NetworkServiceRequest.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this NetworkServiceRequest.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this NetworkServiceRequest.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this NetworkServiceRequest.
        :type managing_account: str
        """
        if managing_account is None:
            raise ValueError("Invalid value for `managing_account`, must not be `None`")

        self._managing_account = managing_account

    @property
    def product_offering(self):
        """Gets the product_offering of this NetworkServiceRequest.


        :return: The product_offering of this NetworkServiceRequest.
        :rtype: str
        """
        return self._product_offering

    @product_offering.setter
    def product_offering(self, product_offering):
        """Sets the product_offering of this NetworkServiceRequest.


        :param product_offering: The product_offering of this NetworkServiceRequest.
        :type product_offering: str
        """
        if product_offering is None:
            raise ValueError("Invalid value for `product_offering`, must not be `None`")

        self._product_offering = product_offering

    @property
    def purchase_order(self):
        """Gets the purchase_order of this NetworkServiceRequest.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this NetworkServiceRequest.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this NetworkServiceRequest.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this NetworkServiceRequest.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def type(self):
        """Gets the type of this NetworkServiceRequest.


        :return: The type of this NetworkServiceRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkServiceRequest.


        :param type: The type of this NetworkServiceRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def name(self):
        """Gets the name of this NetworkServiceRequest.

        Name of the multi-point to multi-point virtual circuit.

        :return: The name of this NetworkServiceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkServiceRequest.

        Name of the multi-point to multi-point virtual circuit.

        :param name: The name of this NetworkServiceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")

        self._name = name

    @property
    def public(self):
        """Gets the public of this NetworkServiceRequest.

        A public mp2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.

        :return: The public of this NetworkServiceRequest.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this NetworkServiceRequest.

        A public mp2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.

        :param public: The public of this NetworkServiceRequest.
        :type public: bool
        """

        self._public = public

    @property
    def capacity(self):
        """Gets the capacity of this NetworkServiceRequest.

        The capacity of the service in Mbps. When null, the maximum capacity will be used.

        :return: The capacity of this NetworkServiceRequest.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NetworkServiceRequest.

        The capacity of the service in Mbps. When null, the maximum capacity will be used.

        :param capacity: The capacity of this NetworkServiceRequest.
        :type capacity: int
        """
        if capacity is not None and capacity < 1:
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `1`")

        self._capacity = capacity

    @property
    def cloud_key(self):
        """Gets the cloud_key of this NetworkServiceRequest.


        :return: The cloud_key of this NetworkServiceRequest.
        :rtype: str
        """
        return self._cloud_key

    @cloud_key.setter
    def cloud_key(self, cloud_key):
        """Sets the cloud_key of this NetworkServiceRequest.


        :param cloud_key: The cloud_key of this NetworkServiceRequest.
        :type cloud_key: str
        """
        if cloud_key is None:
            raise ValueError("Invalid value for `cloud_key`, must not be `None`")

        self._cloud_key = cloud_key
