# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExchangeLanNetworkProductOfferingPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_max: int=None, bandwidth_min: int=None, display_name: str=None, downgrade_allowed: bool=None, exchange_lan_network_service: str=None, handover_metro_area: str=None, handover_metro_area_network: str=None, id: str=None, name: str=None, physical_port_speed: int=None, provider_vlans: str=None, resource_type: str=None, service_metro_area: str=None, service_metro_area_network: str=None, service_provider: str=None, type: str=None, upgrade_allowed: bool=None):
        """ExchangeLanNetworkProductOfferingPartial - a model defined in OpenAPI

        :param bandwidth_max: The bandwidth_max of this ExchangeLanNetworkProductOfferingPartial.
        :param bandwidth_min: The bandwidth_min of this ExchangeLanNetworkProductOfferingPartial.
        :param display_name: The display_name of this ExchangeLanNetworkProductOfferingPartial.
        :param downgrade_allowed: The downgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.
        :param exchange_lan_network_service: The exchange_lan_network_service of this ExchangeLanNetworkProductOfferingPartial.
        :param handover_metro_area: The handover_metro_area of this ExchangeLanNetworkProductOfferingPartial.
        :param handover_metro_area_network: The handover_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.
        :param id: The id of this ExchangeLanNetworkProductOfferingPartial.
        :param name: The name of this ExchangeLanNetworkProductOfferingPartial.
        :param physical_port_speed: The physical_port_speed of this ExchangeLanNetworkProductOfferingPartial.
        :param provider_vlans: The provider_vlans of this ExchangeLanNetworkProductOfferingPartial.
        :param resource_type: The resource_type of this ExchangeLanNetworkProductOfferingPartial.
        :param service_metro_area: The service_metro_area of this ExchangeLanNetworkProductOfferingPartial.
        :param service_metro_area_network: The service_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.
        :param service_provider: The service_provider of this ExchangeLanNetworkProductOfferingPartial.
        :param type: The type of this ExchangeLanNetworkProductOfferingPartial.
        :param upgrade_allowed: The upgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.
        """
        self.openapi_types = {
            'bandwidth_max': int,
            'bandwidth_min': int,
            'display_name': str,
            'downgrade_allowed': bool,
            'exchange_lan_network_service': str,
            'handover_metro_area': str,
            'handover_metro_area_network': str,
            'id': str,
            'name': str,
            'physical_port_speed': int,
            'provider_vlans': str,
            'resource_type': str,
            'service_metro_area': str,
            'service_metro_area_network': str,
            'service_provider': str,
            'type': str,
            'upgrade_allowed': bool
        }

        self.attribute_map = {
            'bandwidth_max': 'bandwidth_max',
            'bandwidth_min': 'bandwidth_min',
            'display_name': 'display_name',
            'downgrade_allowed': 'downgrade_allowed',
            'exchange_lan_network_service': 'exchange_lan_network_service',
            'handover_metro_area': 'handover_metro_area',
            'handover_metro_area_network': 'handover_metro_area_network',
            'id': 'id',
            'name': 'name',
            'physical_port_speed': 'physical_port_speed',
            'provider_vlans': 'provider_vlans',
            'resource_type': 'resource_type',
            'service_metro_area': 'service_metro_area',
            'service_metro_area_network': 'service_metro_area_network',
            'service_provider': 'service_provider',
            'type': 'type',
            'upgrade_allowed': 'upgrade_allowed'
        }

        self._bandwidth_max = bandwidth_max
        self._bandwidth_min = bandwidth_min
        self._display_name = display_name
        self._downgrade_allowed = downgrade_allowed
        self._exchange_lan_network_service = exchange_lan_network_service
        self._handover_metro_area = handover_metro_area
        self._handover_metro_area_network = handover_metro_area_network
        self._id = id
        self._name = name
        self._physical_port_speed = physical_port_speed
        self._provider_vlans = provider_vlans
        self._resource_type = resource_type
        self._service_metro_area = service_metro_area
        self._service_metro_area_network = service_metro_area_network
        self._service_provider = service_provider
        self._type = type
        self._upgrade_allowed = upgrade_allowed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeLanNetworkProductOfferingPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExchangeLanNetworkProductOfferingPartial of this ExchangeLanNetworkProductOfferingPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_max(self):
        """Gets the bandwidth_max of this ExchangeLanNetworkProductOfferingPartial.

        When not `null`, this value enforces a mandatory rate limit for all network service configs.

        :return: The bandwidth_max of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: int
        """
        return self._bandwidth_max

    @bandwidth_max.setter
    def bandwidth_max(self, bandwidth_max):
        """Sets the bandwidth_max of this ExchangeLanNetworkProductOfferingPartial.

        When not `null`, this value enforces a mandatory rate limit for all network service configs.

        :param bandwidth_max: The bandwidth_max of this ExchangeLanNetworkProductOfferingPartial.
        :type bandwidth_max: int
        """
        if bandwidth_max is not None and bandwidth_max < 0:
            raise ValueError("Invalid value for `bandwidth_max`, must be a value greater than or equal to `0`")

        self._bandwidth_max = bandwidth_max

    @property
    def bandwidth_min(self):
        """Gets the bandwidth_min of this ExchangeLanNetworkProductOfferingPartial.

        When configuring access to the network service, at least this `capacity` must be provided.

        :return: The bandwidth_min of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: int
        """
        return self._bandwidth_min

    @bandwidth_min.setter
    def bandwidth_min(self, bandwidth_min):
        """Sets the bandwidth_min of this ExchangeLanNetworkProductOfferingPartial.

        When configuring access to the network service, at least this `capacity` must be provided.

        :param bandwidth_min: The bandwidth_min of this ExchangeLanNetworkProductOfferingPartial.
        :type bandwidth_min: int
        """
        if bandwidth_min is not None and bandwidth_min < 0:
            raise ValueError("Invalid value for `bandwidth_min`, must be a value greater than or equal to `0`")

        self._bandwidth_min = bandwidth_min

    @property
    def display_name(self):
        """Gets the display_name of this ExchangeLanNetworkProductOfferingPartial.


        :return: The display_name of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ExchangeLanNetworkProductOfferingPartial.


        :param display_name: The display_name of this ExchangeLanNetworkProductOfferingPartial.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 256:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")

        self._display_name = display_name

    @property
    def downgrade_allowed(self):
        """Gets the downgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.

        Indicates if the service can be migrated to a lower bandwidth.

        :return: The downgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: bool
        """
        return self._downgrade_allowed

    @downgrade_allowed.setter
    def downgrade_allowed(self, downgrade_allowed):
        """Sets the downgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.

        Indicates if the service can be migrated to a lower bandwidth.

        :param downgrade_allowed: The downgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.
        :type downgrade_allowed: bool
        """

        self._downgrade_allowed = downgrade_allowed

    @property
    def exchange_lan_network_service(self):
        """Gets the exchange_lan_network_service of this ExchangeLanNetworkProductOfferingPartial.

        The id of the exchange lan network service.

        :return: The exchange_lan_network_service of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._exchange_lan_network_service

    @exchange_lan_network_service.setter
    def exchange_lan_network_service(self, exchange_lan_network_service):
        """Sets the exchange_lan_network_service of this ExchangeLanNetworkProductOfferingPartial.

        The id of the exchange lan network service.

        :param exchange_lan_network_service: The exchange_lan_network_service of this ExchangeLanNetworkProductOfferingPartial.
        :type exchange_lan_network_service: str
        """

        self._exchange_lan_network_service = exchange_lan_network_service

    @property
    def handover_metro_area(self):
        """Gets the handover_metro_area of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroArea`. The network service will be accessed from this metro area. 

        :return: The handover_metro_area of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._handover_metro_area

    @handover_metro_area.setter
    def handover_metro_area(self, handover_metro_area):
        """Sets the handover_metro_area of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroArea`. The network service will be accessed from this metro area. 

        :param handover_metro_area: The handover_metro_area of this ExchangeLanNetworkProductOfferingPartial.
        :type handover_metro_area: str
        """

        self._handover_metro_area = handover_metro_area

    @property
    def handover_metro_area_network(self):
        """Gets the handover_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroAreaNetwork`. The service will be accessed through the handover metro area network. 

        :return: The handover_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._handover_metro_area_network

    @handover_metro_area_network.setter
    def handover_metro_area_network(self, handover_metro_area_network):
        """Sets the handover_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroAreaNetwork`. The service will be accessed through the handover metro area network. 

        :param handover_metro_area_network: The handover_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.
        :type handover_metro_area_network: str
        """

        self._handover_metro_area_network = handover_metro_area_network

    @property
    def id(self):
        """Gets the id of this ExchangeLanNetworkProductOfferingPartial.


        :return: The id of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExchangeLanNetworkProductOfferingPartial.


        :param id: The id of this ExchangeLanNetworkProductOfferingPartial.
        :type id: str
        """
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExchangeLanNetworkProductOfferingPartial.

        Name of the product

        :return: The name of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExchangeLanNetworkProductOfferingPartial.

        Name of the product

        :param name: The name of this ExchangeLanNetworkProductOfferingPartial.
        :type name: str
        """
        if name is not None and len(name) > 160:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `160`")

        self._name = name

    @property
    def physical_port_speed(self):
        """Gets the physical_port_speed of this ExchangeLanNetworkProductOfferingPartial.

        If the service is dependent on the speed of the physical port this field denotes the speed.

        :return: The physical_port_speed of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: int
        """
        return self._physical_port_speed

    @physical_port_speed.setter
    def physical_port_speed(self, physical_port_speed):
        """Sets the physical_port_speed of this ExchangeLanNetworkProductOfferingPartial.

        If the service is dependent on the speed of the physical port this field denotes the speed.

        :param physical_port_speed: The physical_port_speed of this ExchangeLanNetworkProductOfferingPartial.
        :type physical_port_speed: int
        """
        if physical_port_speed is not None and physical_port_speed < 0:
            raise ValueError("Invalid value for `physical_port_speed`, must be a value greater than or equal to `0`")

        self._physical_port_speed = physical_port_speed

    @property
    def provider_vlans(self):
        """Gets the provider_vlans of this ExchangeLanNetworkProductOfferingPartial.

        The `NetworkService` provides `single` or `multi`ple vlans.

        :return: The provider_vlans of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._provider_vlans

    @provider_vlans.setter
    def provider_vlans(self, provider_vlans):
        """Sets the provider_vlans of this ExchangeLanNetworkProductOfferingPartial.

        The `NetworkService` provides `single` or `multi`ple vlans.

        :param provider_vlans: The provider_vlans of this ExchangeLanNetworkProductOfferingPartial.
        :type provider_vlans: str
        """
        allowed_values = ["single", "multi"]  # noqa: E501
        if provider_vlans not in allowed_values:
            raise ValueError(
                "Invalid value for `provider_vlans` ({0}), must be one of {1}"
                .format(provider_vlans, allowed_values)
            )

        self._provider_vlans = provider_vlans

    @property
    def resource_type(self):
        """Gets the resource_type of this ExchangeLanNetworkProductOfferingPartial.

        The resource type refers to an ix-api resource. 

        :return: The resource_type of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ExchangeLanNetworkProductOfferingPartial.

        The resource type refers to an ix-api resource. 

        :param resource_type: The resource_type of this ExchangeLanNetworkProductOfferingPartial.
        :type resource_type: str
        """
        allowed_values = ["connection", "demarc", "network_service", "network_service_config"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def service_metro_area(self):
        """Gets the service_metro_area of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroArea`. The service is delivered in this metro area. 

        :return: The service_metro_area of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._service_metro_area

    @service_metro_area.setter
    def service_metro_area(self, service_metro_area):
        """Sets the service_metro_area of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroArea`. The service is delivered in this metro area. 

        :param service_metro_area: The service_metro_area of this ExchangeLanNetworkProductOfferingPartial.
        :type service_metro_area: str
        """

        self._service_metro_area = service_metro_area

    @property
    def service_metro_area_network(self):
        """Gets the service_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroAreaNetwork`. The service is directly provided on the metro area network. 

        :return: The service_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._service_metro_area_network

    @service_metro_area_network.setter
    def service_metro_area_network(self, service_metro_area_network):
        """Sets the service_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.

        Id of the `MetroAreaNetwork`. The service is directly provided on the metro area network. 

        :param service_metro_area_network: The service_metro_area_network of this ExchangeLanNetworkProductOfferingPartial.
        :type service_metro_area_network: str
        """

        self._service_metro_area_network = service_metro_area_network

    @property
    def service_provider(self):
        """Gets the service_provider of this ExchangeLanNetworkProductOfferingPartial.

        The name of the provider providing the service. 

        :return: The service_provider of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this ExchangeLanNetworkProductOfferingPartial.

        The name of the provider providing the service. 

        :param service_provider: The service_provider of this ExchangeLanNetworkProductOfferingPartial.
        :type service_provider: str
        """

        self._service_provider = service_provider

    @property
    def type(self):
        """Gets the type of this ExchangeLanNetworkProductOfferingPartial.


        :return: The type of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExchangeLanNetworkProductOfferingPartial.


        :param type: The type of this ExchangeLanNetworkProductOfferingPartial.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def upgrade_allowed(self):
        """Gets the upgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.

        Indicates if the service can be migrated to a higher bandwidth.

        :return: The upgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.
        :rtype: bool
        """
        return self._upgrade_allowed

    @upgrade_allowed.setter
    def upgrade_allowed(self, upgrade_allowed):
        """Sets the upgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.

        Indicates if the service can be migrated to a higher bandwidth.

        :param upgrade_allowed: The upgrade_allowed of this ExchangeLanNetworkProductOfferingPartial.
        :type upgrade_allowed: bool
        """

        self._upgrade_allowed = upgrade_allowed
