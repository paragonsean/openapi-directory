# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceCapabilityPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: int=None, max_lag: int=None, media_type: str=None, speed: int=None):
        """DeviceCapabilityPartial - a model defined in OpenAPI

        :param availability: The availability of this DeviceCapabilityPartial.
        :param max_lag: The max_lag of this DeviceCapabilityPartial.
        :param media_type: The media_type of this DeviceCapabilityPartial.
        :param speed: The speed of this DeviceCapabilityPartial.
        """
        self.openapi_types = {
            'availability': int,
            'max_lag': int,
            'media_type': str,
            'speed': int
        }

        self.attribute_map = {
            'availability': 'availability',
            'max_lag': 'max_lag',
            'media_type': 'media_type',
            'speed': 'speed'
        }

        self._availability = availability
        self._max_lag = max_lag
        self._media_type = media_type
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceCapabilityPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceCapabilityPartial of this DeviceCapabilityPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this DeviceCapabilityPartial.

        Count of available ports on device 

        :return: The availability of this DeviceCapabilityPartial.
        :rtype: int
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this DeviceCapabilityPartial.

        Count of available ports on device 

        :param availability: The availability of this DeviceCapabilityPartial.
        :type availability: int
        """
        if availability is not None and availability > 2147483647:
            raise ValueError("Invalid value for `availability`, must be a value less than or equal to `2147483647`")
        if availability is not None and availability < 0:
            raise ValueError("Invalid value for `availability`, must be a value greater than or equal to `0`")

        self._availability = availability

    @property
    def max_lag(self):
        """Gets the max_lag of this DeviceCapabilityPartial.

        Maximum count of ports which can be bundled to a max_lag

        :return: The max_lag of this DeviceCapabilityPartial.
        :rtype: int
        """
        return self._max_lag

    @max_lag.setter
    def max_lag(self, max_lag):
        """Sets the max_lag of this DeviceCapabilityPartial.

        Maximum count of ports which can be bundled to a max_lag

        :param max_lag: The max_lag of this DeviceCapabilityPartial.
        :type max_lag: int
        """
        if max_lag is not None and max_lag > 32767:
            raise ValueError("Invalid value for `max_lag`, must be a value less than or equal to `32767`")
        if max_lag is not None and max_lag < 0:
            raise ValueError("Invalid value for `max_lag`, must be a value greater than or equal to `0`")

        self._max_lag = max_lag

    @property
    def media_type(self):
        """Gets the media_type of this DeviceCapabilityPartial.

        The media type of the port (e.g. 1000BASE-LX, 10GBASE-LR, ...) 

        :return: The media_type of this DeviceCapabilityPartial.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this DeviceCapabilityPartial.

        The media type of the port (e.g. 1000BASE-LX, 10GBASE-LR, ...) 

        :param media_type: The media_type of this DeviceCapabilityPartial.
        :type media_type: str
        """
        if media_type is not None and len(media_type) > 20:
            raise ValueError("Invalid value for `media_type`, length must be less than or equal to `20`")

        self._media_type = media_type

    @property
    def speed(self):
        """Gets the speed of this DeviceCapabilityPartial.

        Speed of port in Mbit/s 

        :return: The speed of this DeviceCapabilityPartial.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this DeviceCapabilityPartial.

        Speed of port in Mbit/s 

        :param speed: The speed of this DeviceCapabilityPartial.
        :type speed: int
        """

        self._speed = speed
