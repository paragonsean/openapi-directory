# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_ref: str=None):
        """ExternalReference - a model defined in OpenAPI

        :param external_ref: The external_ref of this ExternalReference.
        """
        self.openapi_types = {
            'external_ref': str
        }

        self.attribute_map = {
            'external_ref': 'external_ref'
        }

        self._external_ref = external_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalReference of this ExternalReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_ref(self):
        """Gets the external_ref of this ExternalReference.

        Reference field, free to use for the API user.

        :return: The external_ref of this ExternalReference.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this ExternalReference.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this ExternalReference.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref
