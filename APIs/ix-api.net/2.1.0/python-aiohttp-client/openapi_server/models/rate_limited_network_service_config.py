# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RateLimitedNetworkServiceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None):
        """RateLimitedNetworkServiceConfig - a model defined in OpenAPI

        :param capacity: The capacity of this RateLimitedNetworkServiceConfig.
        """
        self.openapi_types = {
            'capacity': int
        }

        self.attribute_map = {
            'capacity': 'capacity'
        }

        self._capacity = capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RateLimitedNetworkServiceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RateLimitedNetworkServiceConfig of this RateLimitedNetworkServiceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this RateLimitedNetworkServiceConfig.

        The capacity of the service in Mbps. If set to Null, the maximum capacity will be used, i.e. the virtual circuit is not rate-limited.  An exchange may choose to constrain the available capacity range of a `ProductOffering`.  That means, the service can consume up to the total bandwidth of the `Connection`.  Typically the service is charged based on the capacity.

        :return: The capacity of this RateLimitedNetworkServiceConfig.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this RateLimitedNetworkServiceConfig.

        The capacity of the service in Mbps. If set to Null, the maximum capacity will be used, i.e. the virtual circuit is not rate-limited.  An exchange may choose to constrain the available capacity range of a `ProductOffering`.  That means, the service can consume up to the total bandwidth of the `Connection`.  Typically the service is charged based on the capacity.

        :param capacity: The capacity of this RateLimitedNetworkServiceConfig.
        :type capacity: int
        """
        if capacity is not None and capacity < 1:
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `1`")

        self._capacity = capacity
