# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ConnectionPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, consuming_account: str=None, contract_ref: str=None, external_ref: str=None, id: str=None, lacp_timeout: str=None, managing_account: str=None, mode: str=None, name: str=None, outer_vlan_ethertypes: List[str]=None, ports: List[str]=None, purchase_order: str='', role_assignments: List[str]=None, speed: int=None, state: str=None, status: List[Status]=None, vlan_types: List[str]=None):
        """ConnectionPartial - a model defined in OpenAPI

        :param billing_account: The billing_account of this ConnectionPartial.
        :param consuming_account: The consuming_account of this ConnectionPartial.
        :param contract_ref: The contract_ref of this ConnectionPartial.
        :param external_ref: The external_ref of this ConnectionPartial.
        :param id: The id of this ConnectionPartial.
        :param lacp_timeout: The lacp_timeout of this ConnectionPartial.
        :param managing_account: The managing_account of this ConnectionPartial.
        :param mode: The mode of this ConnectionPartial.
        :param name: The name of this ConnectionPartial.
        :param outer_vlan_ethertypes: The outer_vlan_ethertypes of this ConnectionPartial.
        :param ports: The ports of this ConnectionPartial.
        :param purchase_order: The purchase_order of this ConnectionPartial.
        :param role_assignments: The role_assignments of this ConnectionPartial.
        :param speed: The speed of this ConnectionPartial.
        :param state: The state of this ConnectionPartial.
        :param status: The status of this ConnectionPartial.
        :param vlan_types: The vlan_types of this ConnectionPartial.
        """
        self.openapi_types = {
            'billing_account': str,
            'consuming_account': str,
            'contract_ref': str,
            'external_ref': str,
            'id': str,
            'lacp_timeout': str,
            'managing_account': str,
            'mode': str,
            'name': str,
            'outer_vlan_ethertypes': List[str],
            'ports': List[str],
            'purchase_order': str,
            'role_assignments': List[str],
            'speed': int,
            'state': str,
            'status': List[Status],
            'vlan_types': List[str]
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'external_ref': 'external_ref',
            'id': 'id',
            'lacp_timeout': 'lacp_timeout',
            'managing_account': 'managing_account',
            'mode': 'mode',
            'name': 'name',
            'outer_vlan_ethertypes': 'outer_vlan_ethertypes',
            'ports': 'ports',
            'purchase_order': 'purchase_order',
            'role_assignments': 'role_assignments',
            'speed': 'speed',
            'state': 'state',
            'status': 'status',
            'vlan_types': 'vlan_types'
        }

        self._billing_account = billing_account
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._external_ref = external_ref
        self._id = id
        self._lacp_timeout = lacp_timeout
        self._managing_account = managing_account
        self._mode = mode
        self._name = name
        self._outer_vlan_ethertypes = outer_vlan_ethertypes
        self._ports = ports
        self._purchase_order = purchase_order
        self._role_assignments = role_assignments
        self._speed = speed
        self._state = state
        self._status = status
        self._vlan_types = vlan_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionPartial of this ConnectionPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this ConnectionPartial.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this ConnectionPartial.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this ConnectionPartial.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this ConnectionPartial.
        :type billing_account: str
        """

        self._billing_account = billing_account

    @property
    def consuming_account(self):
        """Gets the consuming_account of this ConnectionPartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this ConnectionPartial.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this ConnectionPartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this ConnectionPartial.
        :type consuming_account: str
        """

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this ConnectionPartial.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this ConnectionPartial.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this ConnectionPartial.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this ConnectionPartial.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def external_ref(self):
        """Gets the external_ref of this ConnectionPartial.

        Reference field, free to use for the API user.

        :return: The external_ref of this ConnectionPartial.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this ConnectionPartial.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this ConnectionPartial.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def id(self):
        """Gets the id of this ConnectionPartial.


        :return: The id of this ConnectionPartial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectionPartial.


        :param id: The id of this ConnectionPartial.
        :type id: str
        """
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def lacp_timeout(self):
        """Gets the lacp_timeout of this ConnectionPartial.

        This sets the LACP Timeout mode. Both ends of the connections need to be configured the same. 

        :return: The lacp_timeout of this ConnectionPartial.
        :rtype: str
        """
        return self._lacp_timeout

    @lacp_timeout.setter
    def lacp_timeout(self, lacp_timeout):
        """Sets the lacp_timeout of this ConnectionPartial.

        This sets the LACP Timeout mode. Both ends of the connections need to be configured the same. 

        :param lacp_timeout: The lacp_timeout of this ConnectionPartial.
        :type lacp_timeout: str
        """
        allowed_values = [None,"slow", "fast"]  # noqa: E501
        if lacp_timeout not in allowed_values:
            raise ValueError(
                "Invalid value for `lacp_timeout` ({0}), must be one of {1}"
                .format(lacp_timeout, allowed_values)
            )

        self._lacp_timeout = lacp_timeout

    @property
    def managing_account(self):
        """Gets the managing_account of this ConnectionPartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this ConnectionPartial.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this ConnectionPartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this ConnectionPartial.
        :type managing_account: str
        """

        self._managing_account = managing_account

    @property
    def mode(self):
        """Gets the mode of this ConnectionPartial.

        Sets the mode of the connection. The mode can be:  - `lag_lacp`: connection is build as a LAG with LACP enabled - `lag_static`: connection is build as LAG with static configuration - `flex_ethernet`: connect is build as a FlexEthernet channel - `standalone`: only one port is allowed in this connection without any bundling. 

        :return: The mode of this ConnectionPartial.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConnectionPartial.

        Sets the mode of the connection. The mode can be:  - `lag_lacp`: connection is build as a LAG with LACP enabled - `lag_static`: connection is build as LAG with static configuration - `flex_ethernet`: connect is build as a FlexEthernet channel - `standalone`: only one port is allowed in this connection without any bundling. 

        :param mode: The mode of this ConnectionPartial.
        :type mode: str
        """
        allowed_values = ["lag_lacp", "lag_static", "flex_ethernet", "standalone"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this ConnectionPartial.


        :return: The name of this ConnectionPartial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConnectionPartial.


        :param name: The name of this ConnectionPartial.
        :type name: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")

        self._name = name

    @property
    def outer_vlan_ethertypes(self):
        """Gets the outer_vlan_ethertypes of this ConnectionPartial.

        The ethertype of the outer tag in hexadecimal notation. 

        :return: The outer_vlan_ethertypes of this ConnectionPartial.
        :rtype: List[str]
        """
        return self._outer_vlan_ethertypes

    @outer_vlan_ethertypes.setter
    def outer_vlan_ethertypes(self, outer_vlan_ethertypes):
        """Sets the outer_vlan_ethertypes of this ConnectionPartial.

        The ethertype of the outer tag in hexadecimal notation. 

        :param outer_vlan_ethertypes: The outer_vlan_ethertypes of this ConnectionPartial.
        :type outer_vlan_ethertypes: List[str]
        """
        allowed_values = ["0x8100", "0x88a8", "0x9100"]  # noqa: E501
        if not set(outer_vlan_ethertypes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `outer_vlan_ethertypes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(outer_vlan_ethertypes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._outer_vlan_ethertypes = outer_vlan_ethertypes

    @property
    def ports(self):
        """Gets the ports of this ConnectionPartial.

        References to the port belonging to this connection. Typically all ports within one connection are distributed over the same device. 

        :return: The ports of this ConnectionPartial.
        :rtype: List[str]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ConnectionPartial.

        References to the port belonging to this connection. Typically all ports within one connection are distributed over the same device. 

        :param ports: The ports of this ConnectionPartial.
        :type ports: List[str]
        """

        self._ports = ports

    @property
    def purchase_order(self):
        """Gets the purchase_order of this ConnectionPartial.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this ConnectionPartial.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this ConnectionPartial.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this ConnectionPartial.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def role_assignments(self):
        """Gets the role_assignments of this ConnectionPartial.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :return: The role_assignments of this ConnectionPartial.
        :rtype: List[str]
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this ConnectionPartial.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :param role_assignments: The role_assignments of this ConnectionPartial.
        :type role_assignments: List[str]
        """

        self._role_assignments = role_assignments

    @property
    def speed(self):
        """Gets the speed of this ConnectionPartial.

        Shows the total bandwidth of the connection in Mbit/s. 

        :return: The speed of this ConnectionPartial.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this ConnectionPartial.

        Shows the total bandwidth of the connection in Mbit/s. 

        :param speed: The speed of this ConnectionPartial.
        :type speed: int
        """
        if speed is not None and speed < 0:
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0`")

        self._speed = speed

    @property
    def state(self):
        """Gets the state of this ConnectionPartial.


        :return: The state of this ConnectionPartial.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConnectionPartial.


        :param state: The state of this ConnectionPartial.
        :type state: str
        """
        allowed_values = ["requested", "allocated", "testing", "production", "production_change_pending", "decommission_requested", "decommissioned", "archived", "error", "operator", "scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this ConnectionPartial.


        :return: The status of this ConnectionPartial.
        :rtype: List[Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConnectionPartial.


        :param status: The status of this ConnectionPartial.
        :type status: List[Status]
        """

        self._status = status

    @property
    def vlan_types(self):
        """Gets the vlan_types of this ConnectionPartial.

        A list of vlan config types you can configure using this connection.

        :return: The vlan_types of this ConnectionPartial.
        :rtype: List[str]
        """
        return self._vlan_types

    @vlan_types.setter
    def vlan_types(self, vlan_types):
        """Sets the vlan_types of this ConnectionPartial.

        A list of vlan config types you can configure using this connection.

        :param vlan_types: The vlan_types of this ConnectionPartial.
        :type vlan_types: List[str]
        """
        allowed_values = ["port", "dot1q", "qinq"]  # noqa: E501
        if not set(vlan_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `vlan_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(vlan_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._vlan_types = vlan_types
