# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class Port(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, connection: str=None, consuming_account: str=None, contract_ref: str=None, device: str=None, external_ref: str=None, id: str=None, managing_account: str=None, media_type: str=None, name: str='', pop: str=None, purchase_order: str='', role_assignments: List[str]=None, speed: int=None, state: str=None, status: List[Status]=None):
        """Port - a model defined in OpenAPI

        :param billing_account: The billing_account of this Port.
        :param connection: The connection of this Port.
        :param consuming_account: The consuming_account of this Port.
        :param contract_ref: The contract_ref of this Port.
        :param device: The device of this Port.
        :param external_ref: The external_ref of this Port.
        :param id: The id of this Port.
        :param managing_account: The managing_account of this Port.
        :param media_type: The media_type of this Port.
        :param name: The name of this Port.
        :param pop: The pop of this Port.
        :param purchase_order: The purchase_order of this Port.
        :param role_assignments: The role_assignments of this Port.
        :param speed: The speed of this Port.
        :param state: The state of this Port.
        :param status: The status of this Port.
        """
        self.openapi_types = {
            'billing_account': str,
            'connection': str,
            'consuming_account': str,
            'contract_ref': str,
            'device': str,
            'external_ref': str,
            'id': str,
            'managing_account': str,
            'media_type': str,
            'name': str,
            'pop': str,
            'purchase_order': str,
            'role_assignments': List[str],
            'speed': int,
            'state': str,
            'status': List[Status]
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'connection': 'connection',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'device': 'device',
            'external_ref': 'external_ref',
            'id': 'id',
            'managing_account': 'managing_account',
            'media_type': 'media_type',
            'name': 'name',
            'pop': 'pop',
            'purchase_order': 'purchase_order',
            'role_assignments': 'role_assignments',
            'speed': 'speed',
            'state': 'state',
            'status': 'status'
        }

        self._billing_account = billing_account
        self._connection = connection
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._device = device
        self._external_ref = external_ref
        self._id = id
        self._managing_account = managing_account
        self._media_type = media_type
        self._name = name
        self._pop = pop
        self._purchase_order = purchase_order
        self._role_assignments = role_assignments
        self._speed = speed
        self._state = state
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Port of this Port.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this Port.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this Port.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this Port.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this Port.
        :type billing_account: str
        """
        if billing_account is None:
            raise ValueError("Invalid value for `billing_account`, must not be `None`")

        self._billing_account = billing_account

    @property
    def connection(self):
        """Gets the connection of this Port.


        :return: The connection of this Port.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this Port.


        :param connection: The connection of this Port.
        :type connection: str
        """

        self._connection = connection

    @property
    def consuming_account(self):
        """Gets the consuming_account of this Port.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this Port.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this Port.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this Port.
        :type consuming_account: str
        """
        if consuming_account is None:
            raise ValueError("Invalid value for `consuming_account`, must not be `None`")

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this Port.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this Port.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this Port.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this Port.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def device(self):
        """Gets the device of this Port.

        The device the port. 

        :return: The device of this Port.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this Port.

        The device the port. 

        :param device: The device of this Port.
        :type device: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def external_ref(self):
        """Gets the external_ref of this Port.

        Reference field, free to use for the API user.

        :return: The external_ref of this Port.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this Port.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this Port.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def id(self):
        """Gets the id of this Port.


        :return: The id of this Port.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Port.


        :param id: The id of this Port.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def managing_account(self):
        """Gets the managing_account of this Port.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this Port.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this Port.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this Port.
        :type managing_account: str
        """
        if managing_account is None:
            raise ValueError("Invalid value for `managing_account`, must not be `None`")

        self._managing_account = managing_account

    @property
    def media_type(self):
        """Gets the media_type of this Port.

        The media type of the port. Query the device's capabilities for available types. 

        :return: The media_type of this Port.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Port.

        The media type of the port. Query the device's capabilities for available types. 

        :param media_type: The media_type of this Port.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")
        if media_type is not None and len(media_type) > 20:
            raise ValueError("Invalid value for `media_type`, length must be less than or equal to `20`")

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this Port.

        Name of the port (set by the exchange)

        :return: The name of this Port.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Port.

        Name of the port (set by the exchange)

        :param name: The name of this Port.
        :type name: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")

        self._name = name

    @property
    def pop(self):
        """Gets the pop of this Port.

        Same as the `pop` of the `device`. 

        :return: The pop of this Port.
        :rtype: str
        """
        return self._pop

    @pop.setter
    def pop(self, pop):
        """Sets the pop of this Port.

        Same as the `pop` of the `device`. 

        :param pop: The pop of this Port.
        :type pop: str
        """
        if pop is None:
            raise ValueError("Invalid value for `pop`, must not be `None`")

        self._pop = pop

    @property
    def purchase_order(self):
        """Gets the purchase_order of this Port.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this Port.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this Port.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this Port.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def role_assignments(self):
        """Gets the role_assignments of this Port.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :return: The role_assignments of this Port.
        :rtype: List[str]
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this Port.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :param role_assignments: The role_assignments of this Port.
        :type role_assignments: List[str]
        """
        if role_assignments is None:
            raise ValueError("Invalid value for `role_assignments`, must not be `None`")

        self._role_assignments = role_assignments

    @property
    def speed(self):
        """Gets the speed of this Port.


        :return: The speed of this Port.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Port.


        :param speed: The speed of this Port.
        :type speed: int
        """
        if speed is not None and speed < 0:
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0`")

        self._speed = speed

    @property
    def state(self):
        """Gets the state of this Port.


        :return: The state of this Port.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Port.


        :param state: The state of this Port.
        :type state: str
        """
        allowed_values = ["requested", "allocated", "testing", "production", "production_change_pending", "decommission_requested", "decommissioned", "archived", "error", "operator", "scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this Port.


        :return: The status of this Port.
        :rtype: List[Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Port.


        :param status: The status of this Port.
        :type status: List[Status]
        """

        self._status = status
