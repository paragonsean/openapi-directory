# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RouteServerNetworkFeatureConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, as_set_v4: str=None, as_set_v6: str=None, asn: int=None, bgp_session_type: str=None, billing_account: str=None, consuming_account: str=None, contract_ref: str=None, external_ref: str=None, insert_ixp_asn: bool=True, ip: str=None, managing_account: str=None, max_prefix_v4: int=None, max_prefix_v6: int=None, network_feature: str=None, network_service_config: str=None, password: str='', purchase_order: str='', role_assignments: List[str]=None, session_mode: str=None, type: str=None):
        """RouteServerNetworkFeatureConfigRequest - a model defined in OpenAPI

        :param as_set_v4: The as_set_v4 of this RouteServerNetworkFeatureConfigRequest.
        :param as_set_v6: The as_set_v6 of this RouteServerNetworkFeatureConfigRequest.
        :param asn: The asn of this RouteServerNetworkFeatureConfigRequest.
        :param bgp_session_type: The bgp_session_type of this RouteServerNetworkFeatureConfigRequest.
        :param billing_account: The billing_account of this RouteServerNetworkFeatureConfigRequest.
        :param consuming_account: The consuming_account of this RouteServerNetworkFeatureConfigRequest.
        :param contract_ref: The contract_ref of this RouteServerNetworkFeatureConfigRequest.
        :param external_ref: The external_ref of this RouteServerNetworkFeatureConfigRequest.
        :param insert_ixp_asn: The insert_ixp_asn of this RouteServerNetworkFeatureConfigRequest.
        :param ip: The ip of this RouteServerNetworkFeatureConfigRequest.
        :param managing_account: The managing_account of this RouteServerNetworkFeatureConfigRequest.
        :param max_prefix_v4: The max_prefix_v4 of this RouteServerNetworkFeatureConfigRequest.
        :param max_prefix_v6: The max_prefix_v6 of this RouteServerNetworkFeatureConfigRequest.
        :param network_feature: The network_feature of this RouteServerNetworkFeatureConfigRequest.
        :param network_service_config: The network_service_config of this RouteServerNetworkFeatureConfigRequest.
        :param password: The password of this RouteServerNetworkFeatureConfigRequest.
        :param purchase_order: The purchase_order of this RouteServerNetworkFeatureConfigRequest.
        :param role_assignments: The role_assignments of this RouteServerNetworkFeatureConfigRequest.
        :param session_mode: The session_mode of this RouteServerNetworkFeatureConfigRequest.
        :param type: The type of this RouteServerNetworkFeatureConfigRequest.
        """
        self.openapi_types = {
            'as_set_v4': str,
            'as_set_v6': str,
            'asn': int,
            'bgp_session_type': str,
            'billing_account': str,
            'consuming_account': str,
            'contract_ref': str,
            'external_ref': str,
            'insert_ixp_asn': bool,
            'ip': str,
            'managing_account': str,
            'max_prefix_v4': int,
            'max_prefix_v6': int,
            'network_feature': str,
            'network_service_config': str,
            'password': str,
            'purchase_order': str,
            'role_assignments': List[str],
            'session_mode': str,
            'type': str
        }

        self.attribute_map = {
            'as_set_v4': 'as_set_v4',
            'as_set_v6': 'as_set_v6',
            'asn': 'asn',
            'bgp_session_type': 'bgp_session_type',
            'billing_account': 'billing_account',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'external_ref': 'external_ref',
            'insert_ixp_asn': 'insert_ixp_asn',
            'ip': 'ip',
            'managing_account': 'managing_account',
            'max_prefix_v4': 'max_prefix_v4',
            'max_prefix_v6': 'max_prefix_v6',
            'network_feature': 'network_feature',
            'network_service_config': 'network_service_config',
            'password': 'password',
            'purchase_order': 'purchase_order',
            'role_assignments': 'role_assignments',
            'session_mode': 'session_mode',
            'type': 'type'
        }

        self._as_set_v4 = as_set_v4
        self._as_set_v6 = as_set_v6
        self._asn = asn
        self._bgp_session_type = bgp_session_type
        self._billing_account = billing_account
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._external_ref = external_ref
        self._insert_ixp_asn = insert_ixp_asn
        self._ip = ip
        self._managing_account = managing_account
        self._max_prefix_v4 = max_prefix_v4
        self._max_prefix_v6 = max_prefix_v6
        self._network_feature = network_feature
        self._network_service_config = network_service_config
        self._password = password
        self._purchase_order = purchase_order
        self._role_assignments = role_assignments
        self._session_mode = session_mode
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteServerNetworkFeatureConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteServerNetworkFeatureConfigRequest of this RouteServerNetworkFeatureConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def as_set_v4(self):
        """Gets the as_set_v4 of this RouteServerNetworkFeatureConfigRequest.

        AS-SET of the customer for IPv4 prefix filtering. This is used to generate filters on the router servers.  Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet` address family. If multiple address families are supported, it is optional if the `as_set_v6` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 

        :return: The as_set_v4 of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._as_set_v4

    @as_set_v4.setter
    def as_set_v4(self, as_set_v4):
        """Sets the as_set_v4 of this RouteServerNetworkFeatureConfigRequest.

        AS-SET of the customer for IPv4 prefix filtering. This is used to generate filters on the router servers.  Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet` address family. If multiple address families are supported, it is optional if the `as_set_v6` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 

        :param as_set_v4: The as_set_v4 of this RouteServerNetworkFeatureConfigRequest.
        :type as_set_v4: str
        """
        if as_set_v4 is not None and len(as_set_v4) > 100:
            raise ValueError("Invalid value for `as_set_v4`, length must be less than or equal to `100`")

        self._as_set_v4 = as_set_v4

    @property
    def as_set_v6(self):
        """Gets the as_set_v6 of this RouteServerNetworkFeatureConfigRequest.

        AS-SET of the customer for IPv6. This is used to generate filters on the router servers. Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet6` address family. If multiple address families are supported, it is optional if the `as_set_v4` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 

        :return: The as_set_v6 of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._as_set_v6

    @as_set_v6.setter
    def as_set_v6(self, as_set_v6):
        """Sets the as_set_v6 of this RouteServerNetworkFeatureConfigRequest.

        AS-SET of the customer for IPv6. This is used to generate filters on the router servers. Only valid referenced prefixes within the AS-SET are allowed inbound to the route server. All other routes are filtered.  This field is *required* if the route server network feature only supports the `af_inet6` address family. If multiple address families are supported, it is optional if the `as_set_v4` is provided.  Important: The format has to be: \"AS-SET@IRR\". IRR is the database where the AS-SET is registred. Typically used IRR's are RADB, RIPE, NTTCOM, APNIC, ALTDB, LEVEL3, ARIN, AFRINIC, LACNIC 

        :param as_set_v6: The as_set_v6 of this RouteServerNetworkFeatureConfigRequest.
        :type as_set_v6: str
        """
        if as_set_v6 is not None and len(as_set_v6) > 100:
            raise ValueError("Invalid value for `as_set_v6`, length must be less than or equal to `100`")

        self._as_set_v6 = as_set_v6

    @property
    def asn(self):
        """Gets the asn of this RouteServerNetworkFeatureConfigRequest.

        The ASN of the peer. 

        :return: The asn of this RouteServerNetworkFeatureConfigRequest.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this RouteServerNetworkFeatureConfigRequest.

        The ASN of the peer. 

        :param asn: The asn of this RouteServerNetworkFeatureConfigRequest.
        :type asn: int
        """
        if asn is None:
            raise ValueError("Invalid value for `asn`, must not be `None`")
        if asn is not None and asn > 4294967295:
            raise ValueError("Invalid value for `asn`, must be a value less than or equal to `4294967295`")
        if asn is not None and asn < 0:
            raise ValueError("Invalid value for `asn`, must be a value greater than or equal to `0`")

        self._asn = asn

    @property
    def bgp_session_type(self):
        """Gets the bgp_session_type of this RouteServerNetworkFeatureConfigRequest.

        The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 

        :return: The bgp_session_type of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._bgp_session_type

    @bgp_session_type.setter
    def bgp_session_type(self, bgp_session_type):
        """Sets the bgp_session_type of this RouteServerNetworkFeatureConfigRequest.

        The session type describes which of the both parties will open the connection. If set to passive, the customer router needs to open the connection. If its set to active, the route server will open the connection. The standard behavior on most exchanges is passive. 

        :param bgp_session_type: The bgp_session_type of this RouteServerNetworkFeatureConfigRequest.
        :type bgp_session_type: str
        """
        allowed_values = ["active", "passive"]  # noqa: E501
        if bgp_session_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bgp_session_type` ({0}), must be one of {1}"
                .format(bgp_session_type, allowed_values)
            )

        self._bgp_session_type = bgp_session_type

    @property
    def billing_account(self):
        """Gets the billing_account of this RouteServerNetworkFeatureConfigRequest.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this RouteServerNetworkFeatureConfigRequest.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this RouteServerNetworkFeatureConfigRequest.
        :type billing_account: str
        """
        if billing_account is None:
            raise ValueError("Invalid value for `billing_account`, must not be `None`")

        self._billing_account = billing_account

    @property
    def consuming_account(self):
        """Gets the consuming_account of this RouteServerNetworkFeatureConfigRequest.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this RouteServerNetworkFeatureConfigRequest.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this RouteServerNetworkFeatureConfigRequest.
        :type consuming_account: str
        """
        if consuming_account is None:
            raise ValueError("Invalid value for `consuming_account`, must not be `None`")

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this RouteServerNetworkFeatureConfigRequest.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this RouteServerNetworkFeatureConfigRequest.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this RouteServerNetworkFeatureConfigRequest.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def external_ref(self):
        """Gets the external_ref of this RouteServerNetworkFeatureConfigRequest.

        Reference field, free to use for the API user.

        :return: The external_ref of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this RouteServerNetworkFeatureConfigRequest.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this RouteServerNetworkFeatureConfigRequest.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def insert_ixp_asn(self):
        """Gets the insert_ixp_asn of this RouteServerNetworkFeatureConfigRequest.

        Insert the ASN of the exchange into the AS path. This function is only used in special cases. In 99% of all cases, it should be false. 

        :return: The insert_ixp_asn of this RouteServerNetworkFeatureConfigRequest.
        :rtype: bool
        """
        return self._insert_ixp_asn

    @insert_ixp_asn.setter
    def insert_ixp_asn(self, insert_ixp_asn):
        """Sets the insert_ixp_asn of this RouteServerNetworkFeatureConfigRequest.

        Insert the ASN of the exchange into the AS path. This function is only used in special cases. In 99% of all cases, it should be false. 

        :param insert_ixp_asn: The insert_ixp_asn of this RouteServerNetworkFeatureConfigRequest.
        :type insert_ixp_asn: bool
        """

        self._insert_ixp_asn = insert_ixp_asn

    @property
    def ip(self):
        """Gets the ip of this RouteServerNetworkFeatureConfigRequest.

        The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.

        :return: The ip of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RouteServerNetworkFeatureConfigRequest.

        The BGP session will be established from this IP address. Only IPs assigned to the corresponding network service config can be used.

        :param ip: The ip of this RouteServerNetworkFeatureConfigRequest.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def managing_account(self):
        """Gets the managing_account of this RouteServerNetworkFeatureConfigRequest.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this RouteServerNetworkFeatureConfigRequest.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this RouteServerNetworkFeatureConfigRequest.
        :type managing_account: str
        """
        if managing_account is None:
            raise ValueError("Invalid value for `managing_account`, must not be `None`")

        self._managing_account = managing_account

    @property
    def max_prefix_v4(self):
        """Gets the max_prefix_v4 of this RouteServerNetworkFeatureConfigRequest.

        Announcing more than `max_prefix` IPv4 prefixes the bgp session will be droped. 

        :return: The max_prefix_v4 of this RouteServerNetworkFeatureConfigRequest.
        :rtype: int
        """
        return self._max_prefix_v4

    @max_prefix_v4.setter
    def max_prefix_v4(self, max_prefix_v4):
        """Sets the max_prefix_v4 of this RouteServerNetworkFeatureConfigRequest.

        Announcing more than `max_prefix` IPv4 prefixes the bgp session will be droped. 

        :param max_prefix_v4: The max_prefix_v4 of this RouteServerNetworkFeatureConfigRequest.
        :type max_prefix_v4: int
        """
        if max_prefix_v4 is not None and max_prefix_v4 < 0:
            raise ValueError("Invalid value for `max_prefix_v4`, must be a value greater than or equal to `0`")

        self._max_prefix_v4 = max_prefix_v4

    @property
    def max_prefix_v6(self):
        """Gets the max_prefix_v6 of this RouteServerNetworkFeatureConfigRequest.

        Announcing more than `max_prefix` IPv6 prefixes the bgp session will be droped. 

        :return: The max_prefix_v6 of this RouteServerNetworkFeatureConfigRequest.
        :rtype: int
        """
        return self._max_prefix_v6

    @max_prefix_v6.setter
    def max_prefix_v6(self, max_prefix_v6):
        """Sets the max_prefix_v6 of this RouteServerNetworkFeatureConfigRequest.

        Announcing more than `max_prefix` IPv6 prefixes the bgp session will be droped. 

        :param max_prefix_v6: The max_prefix_v6 of this RouteServerNetworkFeatureConfigRequest.
        :type max_prefix_v6: int
        """
        if max_prefix_v6 is not None and max_prefix_v6 < 0:
            raise ValueError("Invalid value for `max_prefix_v6`, must be a value greater than or equal to `0`")

        self._max_prefix_v6 = max_prefix_v6

    @property
    def network_feature(self):
        """Gets the network_feature of this RouteServerNetworkFeatureConfigRequest.


        :return: The network_feature of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._network_feature

    @network_feature.setter
    def network_feature(self, network_feature):
        """Sets the network_feature of this RouteServerNetworkFeatureConfigRequest.


        :param network_feature: The network_feature of this RouteServerNetworkFeatureConfigRequest.
        :type network_feature: str
        """
        if network_feature is None:
            raise ValueError("Invalid value for `network_feature`, must not be `None`")

        self._network_feature = network_feature

    @property
    def network_service_config(self):
        """Gets the network_service_config of this RouteServerNetworkFeatureConfigRequest.


        :return: The network_service_config of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._network_service_config

    @network_service_config.setter
    def network_service_config(self, network_service_config):
        """Sets the network_service_config of this RouteServerNetworkFeatureConfigRequest.


        :param network_service_config: The network_service_config of this RouteServerNetworkFeatureConfigRequest.
        :type network_service_config: str
        """
        if network_service_config is None:
            raise ValueError("Invalid value for `network_service_config`, must not be `None`")

        self._network_service_config = network_service_config

    @property
    def password(self):
        """Gets the password of this RouteServerNetworkFeatureConfigRequest.

        The cleartext BGP session password

        :return: The password of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RouteServerNetworkFeatureConfigRequest.

        The cleartext BGP session password

        :param password: The password of this RouteServerNetworkFeatureConfigRequest.
        :type password: str
        """
        if password is not None and len(password) > 128:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")

        self._password = password

    @property
    def purchase_order(self):
        """Gets the purchase_order of this RouteServerNetworkFeatureConfigRequest.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this RouteServerNetworkFeatureConfigRequest.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this RouteServerNetworkFeatureConfigRequest.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def role_assignments(self):
        """Gets the role_assignments of this RouteServerNetworkFeatureConfigRequest.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :return: The role_assignments of this RouteServerNetworkFeatureConfigRequest.
        :rtype: List[str]
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this RouteServerNetworkFeatureConfigRequest.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :param role_assignments: The role_assignments of this RouteServerNetworkFeatureConfigRequest.
        :type role_assignments: List[str]
        """
        if role_assignments is None:
            raise ValueError("Invalid value for `role_assignments`, must not be `None`")

        self._role_assignments = role_assignments

    @property
    def session_mode(self):
        """Gets the session_mode of this RouteServerNetworkFeatureConfigRequest.

        Set the session mode with the routeserver. 

        :return: The session_mode of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._session_mode

    @session_mode.setter
    def session_mode(self, session_mode):
        """Sets the session_mode of this RouteServerNetworkFeatureConfigRequest.

        Set the session mode with the routeserver. 

        :param session_mode: The session_mode of this RouteServerNetworkFeatureConfigRequest.
        :type session_mode: str
        """
        allowed_values = ["public", "collector"]  # noqa: E501
        if session_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `session_mode` ({0}), must be one of {1}"
                .format(session_mode, allowed_values)
            )

        self._session_mode = session_mode

    @property
    def type(self):
        """Gets the type of this RouteServerNetworkFeatureConfigRequest.


        :return: The type of this RouteServerNetworkFeatureConfigRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RouteServerNetworkFeatureConfigRequest.


        :param type: The type of this RouteServerNetworkFeatureConfigRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
