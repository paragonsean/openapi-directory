# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.billing_information import BillingInformation
from openapi_server import util


class AccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, billing_information: BillingInformation=None, discoverable: bool=False, external_ref: str=None, legal_name: str=None, managing_account: str=None, metro_area_network_presence: List[str]=[], name: str=None):
        """AccountRequest - a model defined in OpenAPI

        :param address: The address of this AccountRequest.
        :param billing_information: The billing_information of this AccountRequest.
        :param discoverable: The discoverable of this AccountRequest.
        :param external_ref: The external_ref of this AccountRequest.
        :param legal_name: The legal_name of this AccountRequest.
        :param managing_account: The managing_account of this AccountRequest.
        :param metro_area_network_presence: The metro_area_network_presence of this AccountRequest.
        :param name: The name of this AccountRequest.
        """
        self.openapi_types = {
            'address': Address,
            'billing_information': BillingInformation,
            'discoverable': bool,
            'external_ref': str,
            'legal_name': str,
            'managing_account': str,
            'metro_area_network_presence': List[str],
            'name': str
        }

        self.attribute_map = {
            'address': 'address',
            'billing_information': 'billing_information',
            'discoverable': 'discoverable',
            'external_ref': 'external_ref',
            'legal_name': 'legal_name',
            'managing_account': 'managing_account',
            'metro_area_network_presence': 'metro_area_network_presence',
            'name': 'name'
        }

        self._address = address
        self._billing_information = billing_information
        self._discoverable = discoverable
        self._external_ref = external_ref
        self._legal_name = legal_name
        self._managing_account = managing_account
        self._metro_area_network_presence = metro_area_network_presence
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountRequest of this AccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this AccountRequest.


        :return: The address of this AccountRequest.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccountRequest.


        :param address: The address of this AccountRequest.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def billing_information(self):
        """Gets the billing_information of this AccountRequest.


        :return: The billing_information of this AccountRequest.
        :rtype: BillingInformation
        """
        return self._billing_information

    @billing_information.setter
    def billing_information(self, billing_information):
        """Sets the billing_information of this AccountRequest.


        :param billing_information: The billing_information of this AccountRequest.
        :type billing_information: BillingInformation
        """

        self._billing_information = billing_information

    @property
    def discoverable(self):
        """Gets the discoverable of this AccountRequest.

        The account will be included for all members of the ix in the list of accounts.  Only `id`, `name` and `present_in_metro_area_networks` are provided to other members.

        :return: The discoverable of this AccountRequest.
        :rtype: bool
        """
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        """Sets the discoverable of this AccountRequest.

        The account will be included for all members of the ix in the list of accounts.  Only `id`, `name` and `present_in_metro_area_networks` are provided to other members.

        :param discoverable: The discoverable of this AccountRequest.
        :type discoverable: bool
        """

        self._discoverable = discoverable

    @property
    def external_ref(self):
        """Gets the external_ref of this AccountRequest.

        Reference field, free to use for the API user.

        :return: The external_ref of this AccountRequest.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this AccountRequest.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this AccountRequest.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 80:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `80`")

        self._external_ref = external_ref

    @property
    def legal_name(self):
        """Gets the legal_name of this AccountRequest.

        Legal name of the organisation. Only required when it's different from the account name. 

        :return: The legal_name of this AccountRequest.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this AccountRequest.

        Legal name of the organisation. Only required when it's different from the account name. 

        :param legal_name: The legal_name of this AccountRequest.
        :type legal_name: str
        """
        if legal_name is not None and len(legal_name) > 80:
            raise ValueError("Invalid value for `legal_name`, length must be less than or equal to `80`")

        self._legal_name = legal_name

    @property
    def managing_account(self):
        """Gets the managing_account of this AccountRequest.

        The `id` of a managing account. Can be used for creating a customer hierachy. 

        :return: The managing_account of this AccountRequest.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this AccountRequest.

        The `id` of a managing account. Can be used for creating a customer hierachy. 

        :param managing_account: The managing_account of this AccountRequest.
        :type managing_account: str
        """

        self._managing_account = managing_account

    @property
    def metro_area_network_presence(self):
        """Gets the metro_area_network_presence of this AccountRequest.

        Informal list of `MetroAreaNetwork` ids, indicating the presence to other accounts. The list is maintained by the account and can be empty. 

        :return: The metro_area_network_presence of this AccountRequest.
        :rtype: List[str]
        """
        return self._metro_area_network_presence

    @metro_area_network_presence.setter
    def metro_area_network_presence(self, metro_area_network_presence):
        """Sets the metro_area_network_presence of this AccountRequest.

        Informal list of `MetroAreaNetwork` ids, indicating the presence to other accounts. The list is maintained by the account and can be empty. 

        :param metro_area_network_presence: The metro_area_network_presence of this AccountRequest.
        :type metro_area_network_presence: List[str]
        """

        self._metro_area_network_presence = metro_area_network_presence

    @property
    def name(self):
        """Gets the name of this AccountRequest.

        Name of the account, how it gets represented in e.g. a \"customers list\". 

        :return: The name of this AccountRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountRequest.

        Name of the account, how it gets represented in e.g. a \"customers list\". 

        :param name: The name of this AccountRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")

        self._name = name
