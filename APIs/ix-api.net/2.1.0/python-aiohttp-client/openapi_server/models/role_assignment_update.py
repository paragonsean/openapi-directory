# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoleAssignmentUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact: str=None, role: str=None):
        """RoleAssignmentUpdate - a model defined in OpenAPI

        :param contact: The contact of this RoleAssignmentUpdate.
        :param role: The role of this RoleAssignmentUpdate.
        """
        self.openapi_types = {
            'contact': str,
            'role': str
        }

        self.attribute_map = {
            'contact': 'contact',
            'role': 'role'
        }

        self._contact = contact
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleAssignmentUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleAssignmentUpdate of this RoleAssignmentUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact(self):
        """Gets the contact of this RoleAssignmentUpdate.

        The `id` of a contact the role is assigned to. 

        :return: The contact of this RoleAssignmentUpdate.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this RoleAssignmentUpdate.

        The `id` of a contact the role is assigned to. 

        :param contact: The contact of this RoleAssignmentUpdate.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def role(self):
        """Gets the role of this RoleAssignmentUpdate.

        The `id` of a role the contact is assigned to. 

        :return: The role of this RoleAssignmentUpdate.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleAssignmentUpdate.

        The `id` of a role the contact is assigned to. 

        :param role: The role of this RoleAssignmentUpdate.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
