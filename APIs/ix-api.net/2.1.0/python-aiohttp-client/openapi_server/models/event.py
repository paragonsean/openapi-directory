# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, payload: object=None, serial: int=None, timestamp: datetime=None, type: str=None):
        """Event - a model defined in OpenAPI

        :param account: The account of this Event.
        :param payload: The payload of this Event.
        :param serial: The serial of this Event.
        :param timestamp: The timestamp of this Event.
        :param type: The type of this Event.
        """
        self.openapi_types = {
            'account': str,
            'payload': object,
            'serial': int,
            'timestamp': datetime,
            'type': str
        }

        self.attribute_map = {
            'account': 'account',
            'payload': 'payload',
            'serial': 'serial',
            'timestamp': 'timestamp',
            'type': 'type'
        }

        self._account = account
        self._payload = payload
        self._serial = serial
        self._timestamp = timestamp
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Event.


        :return: The account of this Event.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Event.


        :param account: The account of this Event.
        :type account: str
        """

        self._account = account

    @property
    def payload(self):
        """Gets the payload of this Event.


        :return: The payload of this Event.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Event.


        :param payload: The payload of this Event.
        :type payload: object
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def serial(self):
        """Gets the serial of this Event.


        :return: The serial of this Event.
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Event.


        :param serial: The serial of this Event.
        :type serial: int
        """
        if serial is None:
            raise ValueError("Invalid value for `serial`, must not be `None`")

        self._serial = serial

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.


        :return: The timestamp of this Event.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.


        :param timestamp: The timestamp of this Event.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this Event.


        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.


        :param type: The type of this Event.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
