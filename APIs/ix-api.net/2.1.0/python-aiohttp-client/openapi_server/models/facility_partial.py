# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FacilityPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_country: str=None, address_locality: str=None, address_region: str=None, id: str=None, metro_area: str=None, name: str=None, organisation_name: str=None, peeringdb_facility_id: int=None, pops: List[str]=None, postal_code: str=None, street_address: str=None):
        """FacilityPartial - a model defined in OpenAPI

        :param address_country: The address_country of this FacilityPartial.
        :param address_locality: The address_locality of this FacilityPartial.
        :param address_region: The address_region of this FacilityPartial.
        :param id: The id of this FacilityPartial.
        :param metro_area: The metro_area of this FacilityPartial.
        :param name: The name of this FacilityPartial.
        :param organisation_name: The organisation_name of this FacilityPartial.
        :param peeringdb_facility_id: The peeringdb_facility_id of this FacilityPartial.
        :param pops: The pops of this FacilityPartial.
        :param postal_code: The postal_code of this FacilityPartial.
        :param street_address: The street_address of this FacilityPartial.
        """
        self.openapi_types = {
            'address_country': str,
            'address_locality': str,
            'address_region': str,
            'id': str,
            'metro_area': str,
            'name': str,
            'organisation_name': str,
            'peeringdb_facility_id': int,
            'pops': List[str],
            'postal_code': str,
            'street_address': str
        }

        self.attribute_map = {
            'address_country': 'address_country',
            'address_locality': 'address_locality',
            'address_region': 'address_region',
            'id': 'id',
            'metro_area': 'metro_area',
            'name': 'name',
            'organisation_name': 'organisation_name',
            'peeringdb_facility_id': 'peeringdb_facility_id',
            'pops': 'pops',
            'postal_code': 'postal_code',
            'street_address': 'street_address'
        }

        self._address_country = address_country
        self._address_locality = address_locality
        self._address_region = address_region
        self._id = id
        self._metro_area = metro_area
        self._name = name
        self._organisation_name = organisation_name
        self._peeringdb_facility_id = peeringdb_facility_id
        self._pops = pops
        self._postal_code = postal_code
        self._street_address = street_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacilityPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacilityPartial of this FacilityPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_country(self):
        """Gets the address_country of this FacilityPartial.

        ISO 3166-1 alpha-2 country code, for example DE 

        :return: The address_country of this FacilityPartial.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this FacilityPartial.

        ISO 3166-1 alpha-2 country code, for example DE 

        :param address_country: The address_country of this FacilityPartial.
        :type address_country: str
        """
        if address_country is not None and len(address_country) > 2:
            raise ValueError("Invalid value for `address_country`, length must be less than or equal to `2`")

        self._address_country = address_country

    @property
    def address_locality(self):
        """Gets the address_locality of this FacilityPartial.

        The locality/city. For example, Mountain View.

        :return: The address_locality of this FacilityPartial.
        :rtype: str
        """
        return self._address_locality

    @address_locality.setter
    def address_locality(self, address_locality):
        """Sets the address_locality of this FacilityPartial.

        The locality/city. For example, Mountain View.

        :param address_locality: The address_locality of this FacilityPartial.
        :type address_locality: str
        """
        if address_locality is not None and len(address_locality) > 80:
            raise ValueError("Invalid value for `address_locality`, length must be less than or equal to `80`")

        self._address_locality = address_locality

    @property
    def address_region(self):
        """Gets the address_region of this FacilityPartial.

        The region. For example, CA

        :return: The address_region of this FacilityPartial.
        :rtype: str
        """
        return self._address_region

    @address_region.setter
    def address_region(self, address_region):
        """Sets the address_region of this FacilityPartial.

        The region. For example, CA

        :param address_region: The address_region of this FacilityPartial.
        :type address_region: str
        """
        if address_region is not None and len(address_region) > 80:
            raise ValueError("Invalid value for `address_region`, length must be less than or equal to `80`")

        self._address_region = address_region

    @property
    def id(self):
        """Gets the id of this FacilityPartial.


        :return: The id of this FacilityPartial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FacilityPartial.


        :param id: The id of this FacilityPartial.
        :type id: str
        """
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def metro_area(self):
        """Gets the metro_area of this FacilityPartial.

        Id of the `MetroArea` the DC is located in. 

        :return: The metro_area of this FacilityPartial.
        :rtype: str
        """
        return self._metro_area

    @metro_area.setter
    def metro_area(self, metro_area):
        """Sets the metro_area of this FacilityPartial.

        Id of the `MetroArea` the DC is located in. 

        :param metro_area: The metro_area of this FacilityPartial.
        :type metro_area: str
        """

        self._metro_area = metro_area

    @property
    def name(self):
        """Gets the name of this FacilityPartial.

        Name of the Datacenter as called by the operator 

        :return: The name of this FacilityPartial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacilityPartial.

        Name of the Datacenter as called by the operator 

        :param name: The name of this FacilityPartial.
        :type name: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")

        self._name = name

    @property
    def organisation_name(self):
        """Gets the organisation_name of this FacilityPartial.

        Name of Datacenter operator 

        :return: The organisation_name of this FacilityPartial.
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name):
        """Sets the organisation_name of this FacilityPartial.

        Name of Datacenter operator 

        :param organisation_name: The organisation_name of this FacilityPartial.
        :type organisation_name: str
        """
        if organisation_name is not None and len(organisation_name) > 80:
            raise ValueError("Invalid value for `organisation_name`, length must be less than or equal to `80`")

        self._organisation_name = organisation_name

    @property
    def peeringdb_facility_id(self):
        """Gets the peeringdb_facility_id of this FacilityPartial.

        [PeeringDB](https://www.peeringdb.com) facitlity ID, can be extracted from the url https://www.peeringdb.com/fac/$id 

        :return: The peeringdb_facility_id of this FacilityPartial.
        :rtype: int
        """
        return self._peeringdb_facility_id

    @peeringdb_facility_id.setter
    def peeringdb_facility_id(self, peeringdb_facility_id):
        """Sets the peeringdb_facility_id of this FacilityPartial.

        [PeeringDB](https://www.peeringdb.com) facitlity ID, can be extracted from the url https://www.peeringdb.com/fac/$id 

        :param peeringdb_facility_id: The peeringdb_facility_id of this FacilityPartial.
        :type peeringdb_facility_id: int
        """
        if peeringdb_facility_id is not None and peeringdb_facility_id > 2147483647:
            raise ValueError("Invalid value for `peeringdb_facility_id`, must be a value less than or equal to `2147483647`")
        if peeringdb_facility_id is not None and peeringdb_facility_id < 0:
            raise ValueError("Invalid value for `peeringdb_facility_id`, must be a value greater than or equal to `0`")

        self._peeringdb_facility_id = peeringdb_facility_id

    @property
    def pops(self):
        """Gets the pops of this FacilityPartial.

        List of pops in the `Facility`.

        :return: The pops of this FacilityPartial.
        :rtype: List[str]
        """
        return self._pops

    @pops.setter
    def pops(self, pops):
        """Sets the pops of this FacilityPartial.

        List of pops in the `Facility`.

        :param pops: The pops of this FacilityPartial.
        :type pops: List[str]
        """

        self._pops = pops

    @property
    def postal_code(self):
        """Gets the postal_code of this FacilityPartial.

        A postal code. For example, 9404

        :return: The postal_code of this FacilityPartial.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this FacilityPartial.

        A postal code. For example, 9404

        :param postal_code: The postal_code of this FacilityPartial.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 18:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `18`")

        self._postal_code = postal_code

    @property
    def street_address(self):
        """Gets the street_address of this FacilityPartial.

        The street address. For example, 1600 Amphitheatre Pkwy.

        :return: The street_address of this FacilityPartial.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this FacilityPartial.

        The street address. For example, 1600 Amphitheatre Pkwy.

        :param street_address: The street_address of this FacilityPartial.
        :type street_address: str
        """
        if street_address is not None and len(street_address) > 80:
            raise ValueError("Invalid value for `street_address`, length must be less than or equal to `80`")

        self._street_address = street_address
