# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OwnablePartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consuming_account: str=None, external_ref: str=None, managing_account: str=None):
        """OwnablePartial - a model defined in OpenAPI

        :param consuming_account: The consuming_account of this OwnablePartial.
        :param external_ref: The external_ref of this OwnablePartial.
        :param managing_account: The managing_account of this OwnablePartial.
        """
        self.openapi_types = {
            'consuming_account': str,
            'external_ref': str,
            'managing_account': str
        }

        self.attribute_map = {
            'consuming_account': 'consuming_account',
            'external_ref': 'external_ref',
            'managing_account': 'managing_account'
        }

        self._consuming_account = consuming_account
        self._external_ref = external_ref
        self._managing_account = managing_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OwnablePartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OwnablePartial of this OwnablePartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consuming_account(self):
        """Gets the consuming_account of this OwnablePartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this OwnablePartial.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this OwnablePartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this OwnablePartial.
        :type consuming_account: str
        """

        self._consuming_account = consuming_account

    @property
    def external_ref(self):
        """Gets the external_ref of this OwnablePartial.

        Reference field, free to use for the API user.

        :return: The external_ref of this OwnablePartial.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this OwnablePartial.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this OwnablePartial.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def managing_account(self):
        """Gets the managing_account of this OwnablePartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this OwnablePartial.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this OwnablePartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this OwnablePartial.
        :type managing_account: str
        """

        self._managing_account = managing_account
