# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vlan_config import VlanConfig
from openapi_server import util


class CloudNetworkServiceConfigRequestPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, cloud_vlan: int=None, connection: str=None, consuming_account: str=None, contract_ref: str=None, external_ref: str=None, handover: int=None, managing_account: str=None, network_feature_configs: List[str]=None, network_service: str=None, purchase_order: str='', role_assignments: List[str]=None, type: str=None, vlan_config: VlanConfig=None):
        """CloudNetworkServiceConfigRequestPartial - a model defined in OpenAPI

        :param billing_account: The billing_account of this CloudNetworkServiceConfigRequestPartial.
        :param cloud_vlan: The cloud_vlan of this CloudNetworkServiceConfigRequestPartial.
        :param connection: The connection of this CloudNetworkServiceConfigRequestPartial.
        :param consuming_account: The consuming_account of this CloudNetworkServiceConfigRequestPartial.
        :param contract_ref: The contract_ref of this CloudNetworkServiceConfigRequestPartial.
        :param external_ref: The external_ref of this CloudNetworkServiceConfigRequestPartial.
        :param handover: The handover of this CloudNetworkServiceConfigRequestPartial.
        :param managing_account: The managing_account of this CloudNetworkServiceConfigRequestPartial.
        :param network_feature_configs: The network_feature_configs of this CloudNetworkServiceConfigRequestPartial.
        :param network_service: The network_service of this CloudNetworkServiceConfigRequestPartial.
        :param purchase_order: The purchase_order of this CloudNetworkServiceConfigRequestPartial.
        :param role_assignments: The role_assignments of this CloudNetworkServiceConfigRequestPartial.
        :param type: The type of this CloudNetworkServiceConfigRequestPartial.
        :param vlan_config: The vlan_config of this CloudNetworkServiceConfigRequestPartial.
        """
        self.openapi_types = {
            'billing_account': str,
            'cloud_vlan': int,
            'connection': str,
            'consuming_account': str,
            'contract_ref': str,
            'external_ref': str,
            'handover': int,
            'managing_account': str,
            'network_feature_configs': List[str],
            'network_service': str,
            'purchase_order': str,
            'role_assignments': List[str],
            'type': str,
            'vlan_config': VlanConfig
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'cloud_vlan': 'cloud_vlan',
            'connection': 'connection',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'external_ref': 'external_ref',
            'handover': 'handover',
            'managing_account': 'managing_account',
            'network_feature_configs': 'network_feature_configs',
            'network_service': 'network_service',
            'purchase_order': 'purchase_order',
            'role_assignments': 'role_assignments',
            'type': 'type',
            'vlan_config': 'vlan_config'
        }

        self._billing_account = billing_account
        self._cloud_vlan = cloud_vlan
        self._connection = connection
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._external_ref = external_ref
        self._handover = handover
        self._managing_account = managing_account
        self._network_feature_configs = network_feature_configs
        self._network_service = network_service
        self._purchase_order = purchase_order
        self._role_assignments = role_assignments
        self._type = type
        self._vlan_config = vlan_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudNetworkServiceConfigRequestPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudNetworkServiceConfigRequestPartial of this CloudNetworkServiceConfigRequestPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this CloudNetworkServiceConfigRequestPartial.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this CloudNetworkServiceConfigRequestPartial.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this CloudNetworkServiceConfigRequestPartial.
        :type billing_account: str
        """

        self._billing_account = billing_account

    @property
    def cloud_vlan(self):
        """Gets the cloud_vlan of this CloudNetworkServiceConfigRequestPartial.

        If the `provider_vlans` property of the `ProductOffering` is `multi`, a numeric value refers to a specific vlan on the service provider side.  Otherwise, if set to `null`, it refers to all unmatched vlan ids on the service provider side. (All vlan ids from the service provider side are presented as tags within any vlans specified in `vlan_config`.)  If the `provider_vlans` property of the `ProductOffering` is `single`, the `cloud_vlan` MUST be `null` or MUST NOT be provided.

        :return: The cloud_vlan of this CloudNetworkServiceConfigRequestPartial.
        :rtype: int
        """
        return self._cloud_vlan

    @cloud_vlan.setter
    def cloud_vlan(self, cloud_vlan):
        """Sets the cloud_vlan of this CloudNetworkServiceConfigRequestPartial.

        If the `provider_vlans` property of the `ProductOffering` is `multi`, a numeric value refers to a specific vlan on the service provider side.  Otherwise, if set to `null`, it refers to all unmatched vlan ids on the service provider side. (All vlan ids from the service provider side are presented as tags within any vlans specified in `vlan_config`.)  If the `provider_vlans` property of the `ProductOffering` is `single`, the `cloud_vlan` MUST be `null` or MUST NOT be provided.

        :param cloud_vlan: The cloud_vlan of this CloudNetworkServiceConfigRequestPartial.
        :type cloud_vlan: int
        """
        if cloud_vlan is not None and cloud_vlan > 4094:
            raise ValueError("Invalid value for `cloud_vlan`, must be a value less than or equal to `4094`")
        if cloud_vlan is not None and cloud_vlan < 1:
            raise ValueError("Invalid value for `cloud_vlan`, must be a value greater than or equal to `1`")

        self._cloud_vlan = cloud_vlan

    @property
    def connection(self):
        """Gets the connection of this CloudNetworkServiceConfigRequestPartial.

        The id of the connection to use for this `NetworkServiceConfig`.

        :return: The connection of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this CloudNetworkServiceConfigRequestPartial.

        The id of the connection to use for this `NetworkServiceConfig`.

        :param connection: The connection of this CloudNetworkServiceConfigRequestPartial.
        :type connection: str
        """

        self._connection = connection

    @property
    def consuming_account(self):
        """Gets the consuming_account of this CloudNetworkServiceConfigRequestPartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this CloudNetworkServiceConfigRequestPartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this CloudNetworkServiceConfigRequestPartial.
        :type consuming_account: str
        """

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this CloudNetworkServiceConfigRequestPartial.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this CloudNetworkServiceConfigRequestPartial.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this CloudNetworkServiceConfigRequestPartial.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def external_ref(self):
        """Gets the external_ref of this CloudNetworkServiceConfigRequestPartial.

        Reference field, free to use for the API user.

        :return: The external_ref of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this CloudNetworkServiceConfigRequestPartial.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this CloudNetworkServiceConfigRequestPartial.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def handover(self):
        """Gets the handover of this CloudNetworkServiceConfigRequestPartial.

        The handover enumerates the connection and is required for checking diversity constraints.  It must be within `1 <= x <= network_service.diversity`. 

        :return: The handover of this CloudNetworkServiceConfigRequestPartial.
        :rtype: int
        """
        return self._handover

    @handover.setter
    def handover(self, handover):
        """Sets the handover of this CloudNetworkServiceConfigRequestPartial.

        The handover enumerates the connection and is required for checking diversity constraints.  It must be within `1 <= x <= network_service.diversity`. 

        :param handover: The handover of this CloudNetworkServiceConfigRequestPartial.
        :type handover: int
        """
        if handover is not None and handover < 1:
            raise ValueError("Invalid value for `handover`, must be a value greater than or equal to `1`")

        self._handover = handover

    @property
    def managing_account(self):
        """Gets the managing_account of this CloudNetworkServiceConfigRequestPartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this CloudNetworkServiceConfigRequestPartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this CloudNetworkServiceConfigRequestPartial.
        :type managing_account: str
        """

        self._managing_account = managing_account

    @property
    def network_feature_configs(self):
        """Gets the network_feature_configs of this CloudNetworkServiceConfigRequestPartial.

        A list of ids of `NetworkFeatureConfig`s. 

        :return: The network_feature_configs of this CloudNetworkServiceConfigRequestPartial.
        :rtype: List[str]
        """
        return self._network_feature_configs

    @network_feature_configs.setter
    def network_feature_configs(self, network_feature_configs):
        """Sets the network_feature_configs of this CloudNetworkServiceConfigRequestPartial.

        A list of ids of `NetworkFeatureConfig`s. 

        :param network_feature_configs: The network_feature_configs of this CloudNetworkServiceConfigRequestPartial.
        :type network_feature_configs: List[str]
        """

        self._network_feature_configs = network_feature_configs

    @property
    def network_service(self):
        """Gets the network_service of this CloudNetworkServiceConfigRequestPartial.

        The id of the `NetworkService` to configure.

        :return: The network_service of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._network_service

    @network_service.setter
    def network_service(self, network_service):
        """Sets the network_service of this CloudNetworkServiceConfigRequestPartial.

        The id of the `NetworkService` to configure.

        :param network_service: The network_service of this CloudNetworkServiceConfigRequestPartial.
        :type network_service: str
        """

        self._network_service = network_service

    @property
    def purchase_order(self):
        """Gets the purchase_order of this CloudNetworkServiceConfigRequestPartial.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this CloudNetworkServiceConfigRequestPartial.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this CloudNetworkServiceConfigRequestPartial.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def role_assignments(self):
        """Gets the role_assignments of this CloudNetworkServiceConfigRequestPartial.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :return: The role_assignments of this CloudNetworkServiceConfigRequestPartial.
        :rtype: List[str]
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this CloudNetworkServiceConfigRequestPartial.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :param role_assignments: The role_assignments of this CloudNetworkServiceConfigRequestPartial.
        :type role_assignments: List[str]
        """

        self._role_assignments = role_assignments

    @property
    def type(self):
        """Gets the type of this CloudNetworkServiceConfigRequestPartial.


        :return: The type of this CloudNetworkServiceConfigRequestPartial.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CloudNetworkServiceConfigRequestPartial.


        :param type: The type of this CloudNetworkServiceConfigRequestPartial.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vlan_config(self):
        """Gets the vlan_config of this CloudNetworkServiceConfigRequestPartial.


        :return: The vlan_config of this CloudNetworkServiceConfigRequestPartial.
        :rtype: VlanConfig
        """
        return self._vlan_config

    @vlan_config.setter
    def vlan_config(self, vlan_config):
        """Sets the vlan_config of this CloudNetworkServiceConfigRequestPartial.


        :param vlan_config: The vlan_config of this CloudNetworkServiceConfigRequestPartial.
        :type vlan_config: VlanConfig
        """

        self._vlan_config = vlan_config
