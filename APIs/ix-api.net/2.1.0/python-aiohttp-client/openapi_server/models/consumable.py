# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Consumable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consuming_account: str=None):
        """Consumable - a model defined in OpenAPI

        :param consuming_account: The consuming_account of this Consumable.
        """
        self.openapi_types = {
            'consuming_account': str
        }

        self.attribute_map = {
            'consuming_account': 'consuming_account'
        }

        self._consuming_account = consuming_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consumable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consumable of this Consumable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consuming_account(self):
        """Gets the consuming_account of this Consumable.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this Consumable.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this Consumable.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this Consumable.
        :type consuming_account: str
        """
        if consuming_account is None:
            raise ValueError("Invalid value for `consuming_account`, must not be `None`")

        self._consuming_account = consuming_account
