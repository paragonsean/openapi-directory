# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server.models.vlan_config import VlanConfig
from openapi_server import util


class P2MPNetworkServiceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, capacity: int=None, charged_until: date=None, connection: str=None, consuming_account: str=None, contract_ref: str=None, decommission_at: date=None, external_ref: str=None, id: str=None, managing_account: str=None, network_feature_configs: List[str]=None, network_service: str=None, purchase_order: str='', role: str='leaf', role_assignments: List[str]=None, state: str=None, status: List[Status]=None, type: str=None, vlan_config: VlanConfig=None):
        """P2MPNetworkServiceConfig - a model defined in OpenAPI

        :param billing_account: The billing_account of this P2MPNetworkServiceConfig.
        :param capacity: The capacity of this P2MPNetworkServiceConfig.
        :param charged_until: The charged_until of this P2MPNetworkServiceConfig.
        :param connection: The connection of this P2MPNetworkServiceConfig.
        :param consuming_account: The consuming_account of this P2MPNetworkServiceConfig.
        :param contract_ref: The contract_ref of this P2MPNetworkServiceConfig.
        :param decommission_at: The decommission_at of this P2MPNetworkServiceConfig.
        :param external_ref: The external_ref of this P2MPNetworkServiceConfig.
        :param id: The id of this P2MPNetworkServiceConfig.
        :param managing_account: The managing_account of this P2MPNetworkServiceConfig.
        :param network_feature_configs: The network_feature_configs of this P2MPNetworkServiceConfig.
        :param network_service: The network_service of this P2MPNetworkServiceConfig.
        :param purchase_order: The purchase_order of this P2MPNetworkServiceConfig.
        :param role: The role of this P2MPNetworkServiceConfig.
        :param role_assignments: The role_assignments of this P2MPNetworkServiceConfig.
        :param state: The state of this P2MPNetworkServiceConfig.
        :param status: The status of this P2MPNetworkServiceConfig.
        :param type: The type of this P2MPNetworkServiceConfig.
        :param vlan_config: The vlan_config of this P2MPNetworkServiceConfig.
        """
        self.openapi_types = {
            'billing_account': str,
            'capacity': int,
            'charged_until': date,
            'connection': str,
            'consuming_account': str,
            'contract_ref': str,
            'decommission_at': date,
            'external_ref': str,
            'id': str,
            'managing_account': str,
            'network_feature_configs': List[str],
            'network_service': str,
            'purchase_order': str,
            'role': str,
            'role_assignments': List[str],
            'state': str,
            'status': List[Status],
            'type': str,
            'vlan_config': VlanConfig
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'capacity': 'capacity',
            'charged_until': 'charged_until',
            'connection': 'connection',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'decommission_at': 'decommission_at',
            'external_ref': 'external_ref',
            'id': 'id',
            'managing_account': 'managing_account',
            'network_feature_configs': 'network_feature_configs',
            'network_service': 'network_service',
            'purchase_order': 'purchase_order',
            'role': 'role',
            'role_assignments': 'role_assignments',
            'state': 'state',
            'status': 'status',
            'type': 'type',
            'vlan_config': 'vlan_config'
        }

        self._billing_account = billing_account
        self._capacity = capacity
        self._charged_until = charged_until
        self._connection = connection
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._decommission_at = decommission_at
        self._external_ref = external_ref
        self._id = id
        self._managing_account = managing_account
        self._network_feature_configs = network_feature_configs
        self._network_service = network_service
        self._purchase_order = purchase_order
        self._role = role
        self._role_assignments = role_assignments
        self._state = state
        self._status = status
        self._type = type
        self._vlan_config = vlan_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'P2MPNetworkServiceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The P2MPNetworkServiceConfig of this P2MPNetworkServiceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this P2MPNetworkServiceConfig.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this P2MPNetworkServiceConfig.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this P2MPNetworkServiceConfig.
        :type billing_account: str
        """
        if billing_account is None:
            raise ValueError("Invalid value for `billing_account`, must not be `None`")

        self._billing_account = billing_account

    @property
    def capacity(self):
        """Gets the capacity of this P2MPNetworkServiceConfig.

        The capacity of the service in Mbps. If set to Null, the maximum capacity will be used, i.e. the virtual circuit is not rate-limited.  An exchange may choose to constrain the available capacity range of a `ProductOffering`.  That means, the service can consume up to the total bandwidth of the `Connection`.  Typically the service is charged based on the capacity.

        :return: The capacity of this P2MPNetworkServiceConfig.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this P2MPNetworkServiceConfig.

        The capacity of the service in Mbps. If set to Null, the maximum capacity will be used, i.e. the virtual circuit is not rate-limited.  An exchange may choose to constrain the available capacity range of a `ProductOffering`.  That means, the service can consume up to the total bandwidth of the `Connection`.  Typically the service is charged based on the capacity.

        :param capacity: The capacity of this P2MPNetworkServiceConfig.
        :type capacity: int
        """
        if capacity is not None and capacity < 1:
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `1`")

        self._capacity = capacity

    @property
    def charged_until(self):
        """Gets the charged_until of this P2MPNetworkServiceConfig.

        Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :return: The charged_until of this P2MPNetworkServiceConfig.
        :rtype: date
        """
        return self._charged_until

    @charged_until.setter
    def charged_until(self, charged_until):
        """Sets the charged_until of this P2MPNetworkServiceConfig.

        Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :param charged_until: The charged_until of this P2MPNetworkServiceConfig.
        :type charged_until: date
        """

        self._charged_until = charged_until

    @property
    def connection(self):
        """Gets the connection of this P2MPNetworkServiceConfig.

        The id of the connection to use for this `NetworkServiceConfig`.

        :return: The connection of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._connection

    @connection.setter
    def connection(self, connection):
        """Sets the connection of this P2MPNetworkServiceConfig.

        The id of the connection to use for this `NetworkServiceConfig`.

        :param connection: The connection of this P2MPNetworkServiceConfig.
        :type connection: str
        """
        if connection is None:
            raise ValueError("Invalid value for `connection`, must not be `None`")

        self._connection = connection

    @property
    def consuming_account(self):
        """Gets the consuming_account of this P2MPNetworkServiceConfig.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this P2MPNetworkServiceConfig.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this P2MPNetworkServiceConfig.
        :type consuming_account: str
        """
        if consuming_account is None:
            raise ValueError("Invalid value for `consuming_account`, must not be `None`")

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this P2MPNetworkServiceConfig.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this P2MPNetworkServiceConfig.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this P2MPNetworkServiceConfig.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def decommission_at(self):
        """Gets the decommission_at of this P2MPNetworkServiceConfig.

        The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :return: The decommission_at of this P2MPNetworkServiceConfig.
        :rtype: date
        """
        return self._decommission_at

    @decommission_at.setter
    def decommission_at(self, decommission_at):
        """Sets the decommission_at of this P2MPNetworkServiceConfig.

        The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :param decommission_at: The decommission_at of this P2MPNetworkServiceConfig.
        :type decommission_at: date
        """

        self._decommission_at = decommission_at

    @property
    def external_ref(self):
        """Gets the external_ref of this P2MPNetworkServiceConfig.

        Reference field, free to use for the API user.

        :return: The external_ref of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this P2MPNetworkServiceConfig.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this P2MPNetworkServiceConfig.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def id(self):
        """Gets the id of this P2MPNetworkServiceConfig.


        :return: The id of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this P2MPNetworkServiceConfig.


        :param id: The id of this P2MPNetworkServiceConfig.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def managing_account(self):
        """Gets the managing_account of this P2MPNetworkServiceConfig.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this P2MPNetworkServiceConfig.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this P2MPNetworkServiceConfig.
        :type managing_account: str
        """
        if managing_account is None:
            raise ValueError("Invalid value for `managing_account`, must not be `None`")

        self._managing_account = managing_account

    @property
    def network_feature_configs(self):
        """Gets the network_feature_configs of this P2MPNetworkServiceConfig.

        A list of ids of `NetworkFeatureConfig`s. 

        :return: The network_feature_configs of this P2MPNetworkServiceConfig.
        :rtype: List[str]
        """
        return self._network_feature_configs

    @network_feature_configs.setter
    def network_feature_configs(self, network_feature_configs):
        """Sets the network_feature_configs of this P2MPNetworkServiceConfig.

        A list of ids of `NetworkFeatureConfig`s. 

        :param network_feature_configs: The network_feature_configs of this P2MPNetworkServiceConfig.
        :type network_feature_configs: List[str]
        """

        self._network_feature_configs = network_feature_configs

    @property
    def network_service(self):
        """Gets the network_service of this P2MPNetworkServiceConfig.

        The id of the configured network service.

        :return: The network_service of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._network_service

    @network_service.setter
    def network_service(self, network_service):
        """Sets the network_service of this P2MPNetworkServiceConfig.

        The id of the configured network service.

        :param network_service: The network_service of this P2MPNetworkServiceConfig.
        :type network_service: str
        """
        if network_service is None:
            raise ValueError("Invalid value for `network_service`, must not be `None`")

        self._network_service = network_service

    @property
    def purchase_order(self):
        """Gets the purchase_order of this P2MPNetworkServiceConfig.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this P2MPNetworkServiceConfig.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this P2MPNetworkServiceConfig.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def role(self):
        """Gets the role of this P2MPNetworkServiceConfig.

        A `leaf` can only reach roots and is isolated from other leafs. A `root` can reach any other point in the virtual circuit including other roots.

        :return: The role of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this P2MPNetworkServiceConfig.

        A `leaf` can only reach roots and is isolated from other leafs. A `root` can reach any other point in the virtual circuit including other roots.

        :param role: The role of this P2MPNetworkServiceConfig.
        :type role: str
        """
        allowed_values = ["root", "leaf"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def role_assignments(self):
        """Gets the role_assignments of this P2MPNetworkServiceConfig.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :return: The role_assignments of this P2MPNetworkServiceConfig.
        :rtype: List[str]
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this P2MPNetworkServiceConfig.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :param role_assignments: The role_assignments of this P2MPNetworkServiceConfig.
        :type role_assignments: List[str]
        """
        if role_assignments is None:
            raise ValueError("Invalid value for `role_assignments`, must not be `None`")

        self._role_assignments = role_assignments

    @property
    def state(self):
        """Gets the state of this P2MPNetworkServiceConfig.


        :return: The state of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this P2MPNetworkServiceConfig.


        :param state: The state of this P2MPNetworkServiceConfig.
        :type state: str
        """
        allowed_values = ["requested", "allocated", "testing", "production", "production_change_pending", "decommission_requested", "decommissioned", "archived", "error", "operator", "scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this P2MPNetworkServiceConfig.


        :return: The status of this P2MPNetworkServiceConfig.
        :rtype: List[Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this P2MPNetworkServiceConfig.


        :param status: The status of this P2MPNetworkServiceConfig.
        :type status: List[Status]
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this P2MPNetworkServiceConfig.


        :return: The type of this P2MPNetworkServiceConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this P2MPNetworkServiceConfig.


        :param type: The type of this P2MPNetworkServiceConfig.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vlan_config(self):
        """Gets the vlan_config of this P2MPNetworkServiceConfig.


        :return: The vlan_config of this P2MPNetworkServiceConfig.
        :rtype: VlanConfig
        """
        return self._vlan_config

    @vlan_config.setter
    def vlan_config(self, vlan_config):
        """Sets the vlan_config of this P2MPNetworkServiceConfig.


        :param vlan_config: The vlan_config of this P2MPNetworkServiceConfig.
        :type vlan_config: VlanConfig
        """
        if vlan_config is None:
            raise ValueError("Invalid value for `vlan_config`, must not be `None`")

        self._vlan_config = vlan_config
