# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, consuming_account: str=None, contract_ref: str=None, external_ref: str=None, lacp_timeout: str=None, managing_account: str=None, mode: str=None, purchase_order: str='', role_assignments: List[str]=None, speed: int=None):
        """ConnectionRequest - a model defined in OpenAPI

        :param billing_account: The billing_account of this ConnectionRequest.
        :param consuming_account: The consuming_account of this ConnectionRequest.
        :param contract_ref: The contract_ref of this ConnectionRequest.
        :param external_ref: The external_ref of this ConnectionRequest.
        :param lacp_timeout: The lacp_timeout of this ConnectionRequest.
        :param managing_account: The managing_account of this ConnectionRequest.
        :param mode: The mode of this ConnectionRequest.
        :param purchase_order: The purchase_order of this ConnectionRequest.
        :param role_assignments: The role_assignments of this ConnectionRequest.
        :param speed: The speed of this ConnectionRequest.
        """
        self.openapi_types = {
            'billing_account': str,
            'consuming_account': str,
            'contract_ref': str,
            'external_ref': str,
            'lacp_timeout': str,
            'managing_account': str,
            'mode': str,
            'purchase_order': str,
            'role_assignments': List[str],
            'speed': int
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'external_ref': 'external_ref',
            'lacp_timeout': 'lacp_timeout',
            'managing_account': 'managing_account',
            'mode': 'mode',
            'purchase_order': 'purchase_order',
            'role_assignments': 'role_assignments',
            'speed': 'speed'
        }

        self._billing_account = billing_account
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._external_ref = external_ref
        self._lacp_timeout = lacp_timeout
        self._managing_account = managing_account
        self._mode = mode
        self._purchase_order = purchase_order
        self._role_assignments = role_assignments
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionRequest of this ConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this ConnectionRequest.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this ConnectionRequest.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this ConnectionRequest.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this ConnectionRequest.
        :type billing_account: str
        """
        if billing_account is None:
            raise ValueError("Invalid value for `billing_account`, must not be `None`")

        self._billing_account = billing_account

    @property
    def consuming_account(self):
        """Gets the consuming_account of this ConnectionRequest.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this ConnectionRequest.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this ConnectionRequest.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this ConnectionRequest.
        :type consuming_account: str
        """
        if consuming_account is None:
            raise ValueError("Invalid value for `consuming_account`, must not be `None`")

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this ConnectionRequest.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this ConnectionRequest.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this ConnectionRequest.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this ConnectionRequest.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def external_ref(self):
        """Gets the external_ref of this ConnectionRequest.

        Reference field, free to use for the API user.

        :return: The external_ref of this ConnectionRequest.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this ConnectionRequest.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this ConnectionRequest.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def lacp_timeout(self):
        """Gets the lacp_timeout of this ConnectionRequest.

        This sets the LACP Timeout mode. Both ends of the connections need to be configured the same. 

        :return: The lacp_timeout of this ConnectionRequest.
        :rtype: str
        """
        return self._lacp_timeout

    @lacp_timeout.setter
    def lacp_timeout(self, lacp_timeout):
        """Sets the lacp_timeout of this ConnectionRequest.

        This sets the LACP Timeout mode. Both ends of the connections need to be configured the same. 

        :param lacp_timeout: The lacp_timeout of this ConnectionRequest.
        :type lacp_timeout: str
        """
        allowed_values = [None,"slow", "fast"]  # noqa: E501
        if lacp_timeout not in allowed_values:
            raise ValueError(
                "Invalid value for `lacp_timeout` ({0}), must be one of {1}"
                .format(lacp_timeout, allowed_values)
            )

        self._lacp_timeout = lacp_timeout

    @property
    def managing_account(self):
        """Gets the managing_account of this ConnectionRequest.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this ConnectionRequest.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this ConnectionRequest.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this ConnectionRequest.
        :type managing_account: str
        """
        if managing_account is None:
            raise ValueError("Invalid value for `managing_account`, must not be `None`")

        self._managing_account = managing_account

    @property
    def mode(self):
        """Gets the mode of this ConnectionRequest.

        Sets the mode of the connection. The mode can be:  - `lag_lacp`: connection is build as a LAG with LACP enabled - `lag_static`: connection is build as LAG with static configuration - `flex_ethernet`: connect is build as a FlexEthernet channel - `standalone`: only one port is allowed in this connection without any bundling. 

        :return: The mode of this ConnectionRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ConnectionRequest.

        Sets the mode of the connection. The mode can be:  - `lag_lacp`: connection is build as a LAG with LACP enabled - `lag_static`: connection is build as LAG with static configuration - `flex_ethernet`: connect is build as a FlexEthernet channel - `standalone`: only one port is allowed in this connection without any bundling. 

        :param mode: The mode of this ConnectionRequest.
        :type mode: str
        """
        allowed_values = ["lag_lacp", "lag_static", "flex_ethernet", "standalone"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def purchase_order(self):
        """Gets the purchase_order of this ConnectionRequest.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this ConnectionRequest.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this ConnectionRequest.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this ConnectionRequest.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def role_assignments(self):
        """Gets the role_assignments of this ConnectionRequest.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :return: The role_assignments of this ConnectionRequest.
        :rtype: List[str]
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this ConnectionRequest.

        A set of `RoleAssignment`s. See the documentation on the specific `required_contact_roles`, `nfc_required_contact_roles` or `nsc_required_contact_roles` on what `RoleAssignment`s to provide. 

        :param role_assignments: The role_assignments of this ConnectionRequest.
        :type role_assignments: List[str]
        """
        if role_assignments is None:
            raise ValueError("Invalid value for `role_assignments`, must not be `None`")

        self._role_assignments = role_assignments

    @property
    def speed(self):
        """Gets the speed of this ConnectionRequest.

        Shows the total bandwidth of the connection in Mbit/s. 

        :return: The speed of this ConnectionRequest.
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this ConnectionRequest.

        Shows the total bandwidth of the connection in Mbit/s. 

        :param speed: The speed of this ConnectionRequest.
        :type speed: int
        """
        if speed is not None and speed < 0:
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0`")

        self._speed = speed
