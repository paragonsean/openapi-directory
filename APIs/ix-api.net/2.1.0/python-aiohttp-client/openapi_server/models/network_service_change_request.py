# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkServiceChangeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, product_offering: str=None):
        """NetworkServiceChangeRequest - a model defined in OpenAPI

        :param capacity: The capacity of this NetworkServiceChangeRequest.
        :param product_offering: The product_offering of this NetworkServiceChangeRequest.
        """
        self.openapi_types = {
            'capacity': int,
            'product_offering': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'product_offering': 'product_offering'
        }

        self._capacity = capacity
        self._product_offering = product_offering

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkServiceChangeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkServiceChangeRequest of this NetworkServiceChangeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this NetworkServiceChangeRequest.

        The desired capacity of the service in Mbps.  Must be within the range of `bandwidth_min` and `bandwidth_max` of the `ProductOffering`.  When `null` the maximum capacity wil be used.

        :return: The capacity of this NetworkServiceChangeRequest.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this NetworkServiceChangeRequest.

        The desired capacity of the service in Mbps.  Must be within the range of `bandwidth_min` and `bandwidth_max` of the `ProductOffering`.  When `null` the maximum capacity wil be used.

        :param capacity: The capacity of this NetworkServiceChangeRequest.
        :type capacity: int
        """
        if capacity is not None and capacity < 1:
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `1`")

        self._capacity = capacity

    @property
    def product_offering(self):
        """Gets the product_offering of this NetworkServiceChangeRequest.

        Migrate to a diffrent product offering. Please note, that the offering only may differ in bandwidth.

        :return: The product_offering of this NetworkServiceChangeRequest.
        :rtype: str
        """
        return self._product_offering

    @product_offering.setter
    def product_offering(self, product_offering):
        """Sets the product_offering of this NetworkServiceChangeRequest.

        Migrate to a diffrent product offering. Please note, that the offering only may differ in bandwidth.

        :param product_offering: The product_offering of this NetworkServiceChangeRequest.
        :type product_offering: str
        """
        if product_offering is None:
            raise ValueError("Invalid value for `product_offering`, must not be `None`")

        self._product_offering = product_offering
