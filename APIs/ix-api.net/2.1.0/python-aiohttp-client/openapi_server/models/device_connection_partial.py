# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceConnectionPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity_max: int=None, connected_device: str=None, device: str=None, id: str=None):
        """DeviceConnectionPartial - a model defined in OpenAPI

        :param capacity_max: The capacity_max of this DeviceConnectionPartial.
        :param connected_device: The connected_device of this DeviceConnectionPartial.
        :param device: The device of this DeviceConnectionPartial.
        :param id: The id of this DeviceConnectionPartial.
        """
        self.openapi_types = {
            'capacity_max': int,
            'connected_device': str,
            'device': str,
            'id': str
        }

        self.attribute_map = {
            'capacity_max': 'capacity_max',
            'connected_device': 'connected_device',
            'device': 'device',
            'id': 'id'
        }

        self._capacity_max = capacity_max
        self._connected_device = connected_device
        self._device = device
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceConnectionPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceConnectionPartial of this DeviceConnectionPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity_max(self):
        """Gets the capacity_max of this DeviceConnectionPartial.


        :return: The capacity_max of this DeviceConnectionPartial.
        :rtype: int
        """
        return self._capacity_max

    @capacity_max.setter
    def capacity_max(self, capacity_max):
        """Sets the capacity_max of this DeviceConnectionPartial.


        :param capacity_max: The capacity_max of this DeviceConnectionPartial.
        :type capacity_max: int
        """
        if capacity_max is not None and capacity_max > 2147483647:
            raise ValueError("Invalid value for `capacity_max`, must be a value less than or equal to `2147483647`")
        if capacity_max is not None and capacity_max < 0:
            raise ValueError("Invalid value for `capacity_max`, must be a value greater than or equal to `0`")

        self._capacity_max = capacity_max

    @property
    def connected_device(self):
        """Gets the connected_device of this DeviceConnectionPartial.


        :return: The connected_device of this DeviceConnectionPartial.
        :rtype: str
        """
        return self._connected_device

    @connected_device.setter
    def connected_device(self, connected_device):
        """Sets the connected_device of this DeviceConnectionPartial.


        :param connected_device: The connected_device of this DeviceConnectionPartial.
        :type connected_device: str
        """

        self._connected_device = connected_device

    @property
    def device(self):
        """Gets the device of this DeviceConnectionPartial.


        :return: The device of this DeviceConnectionPartial.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DeviceConnectionPartial.


        :param device: The device of this DeviceConnectionPartial.
        :type device: str
        """

        self._device = device

    @property
    def id(self):
        """Gets the id of this DeviceConnectionPartial.


        :return: The id of this DeviceConnectionPartial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceConnectionPartial.


        :param id: The id of this DeviceConnectionPartial.
        :type id: str
        """
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id
