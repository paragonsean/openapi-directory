# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Invoiceable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, contract_ref: str=None, purchase_order: str=''):
        """Invoiceable - a model defined in OpenAPI

        :param billing_account: The billing_account of this Invoiceable.
        :param contract_ref: The contract_ref of this Invoiceable.
        :param purchase_order: The purchase_order of this Invoiceable.
        """
        self.openapi_types = {
            'billing_account': str,
            'contract_ref': str,
            'purchase_order': str
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'contract_ref': 'contract_ref',
            'purchase_order': 'purchase_order'
        }

        self._billing_account = billing_account
        self._contract_ref = contract_ref
        self._purchase_order = purchase_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoiceable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoiceable of this Invoiceable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this Invoiceable.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this Invoiceable.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this Invoiceable.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this Invoiceable.
        :type billing_account: str
        """
        if billing_account is None:
            raise ValueError("Invalid value for `billing_account`, must not be `None`")

        self._billing_account = billing_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this Invoiceable.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this Invoiceable.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this Invoiceable.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this Invoiceable.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def purchase_order(self):
        """Gets the purchase_order of this Invoiceable.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this Invoiceable.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this Invoiceable.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this Invoiceable.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order
