# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class P2MPNetworkService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, charged_until: date=None, consuming_account: str=None, contract_ref: str=None, decommission_at: date=None, external_ref: str=None, id: str=None, managing_account: str=None, member_joining_rules: List[str]=None, name: str=None, network_features: List[str]=None, nsc_required_contact_roles: List[str]=None, product_offering: str=None, public: bool=False, purchase_order: str='', state: str=None, status: List[Status]=None, type: str=None):
        """P2MPNetworkService - a model defined in OpenAPI

        :param billing_account: The billing_account of this P2MPNetworkService.
        :param charged_until: The charged_until of this P2MPNetworkService.
        :param consuming_account: The consuming_account of this P2MPNetworkService.
        :param contract_ref: The contract_ref of this P2MPNetworkService.
        :param decommission_at: The decommission_at of this P2MPNetworkService.
        :param external_ref: The external_ref of this P2MPNetworkService.
        :param id: The id of this P2MPNetworkService.
        :param managing_account: The managing_account of this P2MPNetworkService.
        :param member_joining_rules: The member_joining_rules of this P2MPNetworkService.
        :param name: The name of this P2MPNetworkService.
        :param network_features: The network_features of this P2MPNetworkService.
        :param nsc_required_contact_roles: The nsc_required_contact_roles of this P2MPNetworkService.
        :param product_offering: The product_offering of this P2MPNetworkService.
        :param public: The public of this P2MPNetworkService.
        :param purchase_order: The purchase_order of this P2MPNetworkService.
        :param state: The state of this P2MPNetworkService.
        :param status: The status of this P2MPNetworkService.
        :param type: The type of this P2MPNetworkService.
        """
        self.openapi_types = {
            'billing_account': str,
            'charged_until': date,
            'consuming_account': str,
            'contract_ref': str,
            'decommission_at': date,
            'external_ref': str,
            'id': str,
            'managing_account': str,
            'member_joining_rules': List[str],
            'name': str,
            'network_features': List[str],
            'nsc_required_contact_roles': List[str],
            'product_offering': str,
            'public': bool,
            'purchase_order': str,
            'state': str,
            'status': List[Status],
            'type': str
        }

        self.attribute_map = {
            'billing_account': 'billing_account',
            'charged_until': 'charged_until',
            'consuming_account': 'consuming_account',
            'contract_ref': 'contract_ref',
            'decommission_at': 'decommission_at',
            'external_ref': 'external_ref',
            'id': 'id',
            'managing_account': 'managing_account',
            'member_joining_rules': 'member_joining_rules',
            'name': 'name',
            'network_features': 'network_features',
            'nsc_required_contact_roles': 'nsc_required_contact_roles',
            'product_offering': 'product_offering',
            'public': 'public',
            'purchase_order': 'purchase_order',
            'state': 'state',
            'status': 'status',
            'type': 'type'
        }

        self._billing_account = billing_account
        self._charged_until = charged_until
        self._consuming_account = consuming_account
        self._contract_ref = contract_ref
        self._decommission_at = decommission_at
        self._external_ref = external_ref
        self._id = id
        self._managing_account = managing_account
        self._member_joining_rules = member_joining_rules
        self._name = name
        self._network_features = network_features
        self._nsc_required_contact_roles = nsc_required_contact_roles
        self._product_offering = product_offering
        self._public = public
        self._purchase_order = purchase_order
        self._state = state
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'P2MPNetworkService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The P2MPNetworkService of this P2MPNetworkService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this P2MPNetworkService.

        An account requires billing_information to be used as a `billing_account`.

        :return: The billing_account of this P2MPNetworkService.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this P2MPNetworkService.

        An account requires billing_information to be used as a `billing_account`.

        :param billing_account: The billing_account of this P2MPNetworkService.
        :type billing_account: str
        """
        if billing_account is None:
            raise ValueError("Invalid value for `billing_account`, must not be `None`")

        self._billing_account = billing_account

    @property
    def charged_until(self):
        """Gets the charged_until of this P2MPNetworkService.

        Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :return: The charged_until of this P2MPNetworkService.
        :rtype: date
        """
        return self._charged_until

    @charged_until.setter
    def charged_until(self, charged_until):
        """Sets the charged_until of this P2MPNetworkService.

        Your obligation to pay for the service will end on this date. Typically `≥ decommission_at`.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :param charged_until: The charged_until of this P2MPNetworkService.
        :type charged_until: date
        """

        self._charged_until = charged_until

    @property
    def consuming_account(self):
        """Gets the consuming_account of this P2MPNetworkService.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this P2MPNetworkService.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this P2MPNetworkService.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this P2MPNetworkService.
        :type consuming_account: str
        """
        if consuming_account is None:
            raise ValueError("Invalid value for `consuming_account`, must not be `None`")

        self._consuming_account = consuming_account

    @property
    def contract_ref(self):
        """Gets the contract_ref of this P2MPNetworkService.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :return: The contract_ref of this P2MPNetworkService.
        :rtype: str
        """
        return self._contract_ref

    @contract_ref.setter
    def contract_ref(self, contract_ref):
        """Sets the contract_ref of this P2MPNetworkService.

        A reference to a contract. If no specific contract is used, a default MAY be chosen by the implementer. 

        :param contract_ref: The contract_ref of this P2MPNetworkService.
        :type contract_ref: str
        """
        if contract_ref is not None and len(contract_ref) > 128:
            raise ValueError("Invalid value for `contract_ref`, length must be less than or equal to `128`")

        self._contract_ref = contract_ref

    @property
    def decommission_at(self):
        """Gets the decommission_at of this P2MPNetworkService.

        The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :return: The decommission_at of this P2MPNetworkService.
        :rtype: date
        """
        return self._decommission_at

    @decommission_at.setter
    def decommission_at(self, decommission_at):
        """Sets the decommission_at of this P2MPNetworkService.

        The service will be decommissioned on this date.  This field is only used when the state is `DECOMMISSION_REQUESTED` or `DECOMMISSIONED`.

        :param decommission_at: The decommission_at of this P2MPNetworkService.
        :type decommission_at: date
        """

        self._decommission_at = decommission_at

    @property
    def external_ref(self):
        """Gets the external_ref of this P2MPNetworkService.

        Reference field, free to use for the API user.

        :return: The external_ref of this P2MPNetworkService.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this P2MPNetworkService.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this P2MPNetworkService.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def id(self):
        """Gets the id of this P2MPNetworkService.


        :return: The id of this P2MPNetworkService.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this P2MPNetworkService.


        :param id: The id of this P2MPNetworkService.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def managing_account(self):
        """Gets the managing_account of this P2MPNetworkService.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this P2MPNetworkService.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this P2MPNetworkService.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this P2MPNetworkService.
        :type managing_account: str
        """
        if managing_account is None:
            raise ValueError("Invalid value for `managing_account`, must not be `None`")

        self._managing_account = managing_account

    @property
    def member_joining_rules(self):
        """Gets the member_joining_rules of this P2MPNetworkService.


        :return: The member_joining_rules of this P2MPNetworkService.
        :rtype: List[str]
        """
        return self._member_joining_rules

    @member_joining_rules.setter
    def member_joining_rules(self, member_joining_rules):
        """Sets the member_joining_rules of this P2MPNetworkService.


        :param member_joining_rules: The member_joining_rules of this P2MPNetworkService.
        :type member_joining_rules: List[str]
        """
        if member_joining_rules is None:
            raise ValueError("Invalid value for `member_joining_rules`, must not be `None`")

        self._member_joining_rules = member_joining_rules

    @property
    def name(self):
        """Gets the name of this P2MPNetworkService.

        Name of the point to multi-point virtual circuit.

        :return: The name of this P2MPNetworkService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this P2MPNetworkService.

        Name of the point to multi-point virtual circuit.

        :param name: The name of this P2MPNetworkService.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")

        self._name = name

    @property
    def network_features(self):
        """Gets the network_features of this P2MPNetworkService.


        :return: The network_features of this P2MPNetworkService.
        :rtype: List[str]
        """
        return self._network_features

    @network_features.setter
    def network_features(self, network_features):
        """Sets the network_features of this P2MPNetworkService.


        :param network_features: The network_features of this P2MPNetworkService.
        :type network_features: List[str]
        """
        if network_features is None:
            raise ValueError("Invalid value for `network_features`, must not be `None`")

        self._network_features = network_features

    @property
    def nsc_required_contact_roles(self):
        """Gets the nsc_required_contact_roles of this P2MPNetworkService.

        The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.

        :return: The nsc_required_contact_roles of this P2MPNetworkService.
        :rtype: List[str]
        """
        return self._nsc_required_contact_roles

    @nsc_required_contact_roles.setter
    def nsc_required_contact_roles(self, nsc_required_contact_roles):
        """Sets the nsc_required_contact_roles of this P2MPNetworkService.

        The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.

        :param nsc_required_contact_roles: The nsc_required_contact_roles of this P2MPNetworkService.
        :type nsc_required_contact_roles: List[str]
        """

        self._nsc_required_contact_roles = nsc_required_contact_roles

    @property
    def product_offering(self):
        """Gets the product_offering of this P2MPNetworkService.


        :return: The product_offering of this P2MPNetworkService.
        :rtype: str
        """
        return self._product_offering

    @product_offering.setter
    def product_offering(self, product_offering):
        """Sets the product_offering of this P2MPNetworkService.


        :param product_offering: The product_offering of this P2MPNetworkService.
        :type product_offering: str
        """
        if product_offering is None:
            raise ValueError("Invalid value for `product_offering`, must not be `None`")

        self._product_offering = product_offering

    @property
    def public(self):
        """Gets the public of this P2MPNetworkService.

        A public p2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.

        :return: The public of this P2MPNetworkService.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this P2MPNetworkService.

        A public p2mp network service can be joined by everyone on the exchange unless denied by a member-joining-rule.  Public network services are visible to other members of the IXP, however only `name`, `type`, `product_offering`, `consuming_account` and `managing_account` are made available.  Other required fields are redacted.

        :param public: The public of this P2MPNetworkService.
        :type public: bool
        """

        self._public = public

    @property
    def purchase_order(self):
        """Gets the purchase_order of this P2MPNetworkService.

        Purchase Order ID which will be displayed on the invoice. 

        :return: The purchase_order of this P2MPNetworkService.
        :rtype: str
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this P2MPNetworkService.

        Purchase Order ID which will be displayed on the invoice. 

        :param purchase_order: The purchase_order of this P2MPNetworkService.
        :type purchase_order: str
        """
        if purchase_order is not None and len(purchase_order) > 80:
            raise ValueError("Invalid value for `purchase_order`, length must be less than or equal to `80`")

        self._purchase_order = purchase_order

    @property
    def state(self):
        """Gets the state of this P2MPNetworkService.


        :return: The state of this P2MPNetworkService.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this P2MPNetworkService.


        :param state: The state of this P2MPNetworkService.
        :type state: str
        """
        allowed_values = ["requested", "allocated", "testing", "production", "production_change_pending", "decommission_requested", "decommissioned", "archived", "error", "operator", "scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this P2MPNetworkService.


        :return: The status of this P2MPNetworkService.
        :rtype: List[Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this P2MPNetworkService.


        :param status: The status of this P2MPNetworkService.
        :type status: List[Status]
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this P2MPNetworkService.


        :return: The type of this P2MPNetworkService.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this P2MPNetworkService.


        :param type: The type of this P2MPNetworkService.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
