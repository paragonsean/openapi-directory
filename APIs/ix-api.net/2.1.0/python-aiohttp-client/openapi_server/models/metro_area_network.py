# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetroAreaNetwork(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, metro_area: str=None, name: str=None, pops: List[str]=None, service_provider: str=None):
        """MetroAreaNetwork - a model defined in OpenAPI

        :param id: The id of this MetroAreaNetwork.
        :param metro_area: The metro_area of this MetroAreaNetwork.
        :param name: The name of this MetroAreaNetwork.
        :param pops: The pops of this MetroAreaNetwork.
        :param service_provider: The service_provider of this MetroAreaNetwork.
        """
        self.openapi_types = {
            'id': str,
            'metro_area': str,
            'name': str,
            'pops': List[str],
            'service_provider': str
        }

        self.attribute_map = {
            'id': 'id',
            'metro_area': 'metro_area',
            'name': 'name',
            'pops': 'pops',
            'service_provider': 'service_provider'
        }

        self._id = id
        self._metro_area = metro_area
        self._name = name
        self._pops = pops
        self._service_provider = service_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetroAreaNetwork':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetroAreaNetwork of this MetroAreaNetwork.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MetroAreaNetwork.


        :return: The id of this MetroAreaNetwork.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetroAreaNetwork.


        :param id: The id of this MetroAreaNetwork.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def metro_area(self):
        """Gets the metro_area of this MetroAreaNetwork.

        The id of the metro area. 

        :return: The metro_area of this MetroAreaNetwork.
        :rtype: str
        """
        return self._metro_area

    @metro_area.setter
    def metro_area(self, metro_area):
        """Sets the metro_area of this MetroAreaNetwork.

        The id of the metro area. 

        :param metro_area: The metro_area of this MetroAreaNetwork.
        :type metro_area: str
        """
        if metro_area is None:
            raise ValueError("Invalid value for `metro_area`, must not be `None`")

        self._metro_area = metro_area

    @property
    def name(self):
        """Gets the name of this MetroAreaNetwork.

        The name of the metro area network. 

        :return: The name of this MetroAreaNetwork.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetroAreaNetwork.

        The name of the metro area network. 

        :param name: The name of this MetroAreaNetwork.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")

        self._name = name

    @property
    def pops(self):
        """Gets the pops of this MetroAreaNetwork.

        List of pops in the metro area network.

        :return: The pops of this MetroAreaNetwork.
        :rtype: List[str]
        """
        return self._pops

    @pops.setter
    def pops(self, pops):
        """Sets the pops of this MetroAreaNetwork.

        List of pops in the metro area network.

        :param pops: The pops of this MetroAreaNetwork.
        :type pops: List[str]
        """
        if pops is None:
            raise ValueError("Invalid value for `pops`, must not be `None`")

        self._pops = pops

    @property
    def service_provider(self):
        """Gets the service_provider of this MetroAreaNetwork.

        The service provider is operating the network. Usually the exchange. 

        :return: The service_provider of this MetroAreaNetwork.
        :rtype: str
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this MetroAreaNetwork.

        The service provider is operating the network. Usually the exchange. 

        :param service_provider: The service_provider of this MetroAreaNetwork.
        :type service_provider: str
        """
        if service_provider is None:
            raise ValueError("Invalid value for `service_provider`, must not be `None`")
        if service_provider is not None and len(service_provider) > 128:
            raise ValueError("Invalid value for `service_provider`, length must be less than or equal to `128`")

        self._service_provider = service_provider
