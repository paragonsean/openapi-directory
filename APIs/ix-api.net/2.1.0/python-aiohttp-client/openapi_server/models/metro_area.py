# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetroArea(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, facilities: List[str]=None, iata_code: str=None, id: str=None, metro_area_networks: List[str]=None, un_locode: str=None):
        """MetroArea - a model defined in OpenAPI

        :param display_name: The display_name of this MetroArea.
        :param facilities: The facilities of this MetroArea.
        :param iata_code: The iata_code of this MetroArea.
        :param id: The id of this MetroArea.
        :param metro_area_networks: The metro_area_networks of this MetroArea.
        :param un_locode: The un_locode of this MetroArea.
        """
        self.openapi_types = {
            'display_name': str,
            'facilities': List[str],
            'iata_code': str,
            'id': str,
            'metro_area_networks': List[str],
            'un_locode': str
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'facilities': 'facilities',
            'iata_code': 'iata_code',
            'id': 'id',
            'metro_area_networks': 'metro_area_networks',
            'un_locode': 'un_locode'
        }

        self._display_name = display_name
        self._facilities = facilities
        self._iata_code = iata_code
        self._id = id
        self._metro_area_networks = metro_area_networks
        self._un_locode = un_locode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetroArea':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetroArea of this MetroArea.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this MetroArea.

        The name of the metro area. Likely the same as the IATA code. 

        :return: The display_name of this MetroArea.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetroArea.

        The name of the metro area. Likely the same as the IATA code. 

        :param display_name: The display_name of this MetroArea.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")
        if display_name is not None and len(display_name) > 64:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `64`")

        self._display_name = display_name

    @property
    def facilities(self):
        """Gets the facilities of this MetroArea.

        List of facilities the metro area network.

        :return: The facilities of this MetroArea.
        :rtype: List[str]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities):
        """Sets the facilities of this MetroArea.

        List of facilities the metro area network.

        :param facilities: The facilities of this MetroArea.
        :type facilities: List[str]
        """
        if facilities is None:
            raise ValueError("Invalid value for `facilities`, must not be `None`")

        self._facilities = facilities

    @property
    def iata_code(self):
        """Gets the iata_code of this MetroArea.

        The three letter IATA airport code for identiying the metro area. 

        :return: The iata_code of this MetroArea.
        :rtype: str
        """
        return self._iata_code

    @iata_code.setter
    def iata_code(self, iata_code):
        """Sets the iata_code of this MetroArea.

        The three letter IATA airport code for identiying the metro area. 

        :param iata_code: The iata_code of this MetroArea.
        :type iata_code: str
        """
        if iata_code is None:
            raise ValueError("Invalid value for `iata_code`, must not be `None`")
        if iata_code is not None and len(iata_code) > 3:
            raise ValueError("Invalid value for `iata_code`, length must be less than or equal to `3`")

        self._iata_code = iata_code

    @property
    def id(self):
        """Gets the id of this MetroArea.


        :return: The id of this MetroArea.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetroArea.


        :param id: The id of this MetroArea.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def metro_area_networks(self):
        """Gets the metro_area_networks of this MetroArea.

        List of networks in the metro area.

        :return: The metro_area_networks of this MetroArea.
        :rtype: List[str]
        """
        return self._metro_area_networks

    @metro_area_networks.setter
    def metro_area_networks(self, metro_area_networks):
        """Sets the metro_area_networks of this MetroArea.

        List of networks in the metro area.

        :param metro_area_networks: The metro_area_networks of this MetroArea.
        :type metro_area_networks: List[str]
        """
        if metro_area_networks is None:
            raise ValueError("Invalid value for `metro_area_networks`, must not be `None`")

        self._metro_area_networks = metro_area_networks

    @property
    def un_locode(self):
        """Gets the un_locode of this MetroArea.

        The UN/LOCODE for identifying the metro area. 

        :return: The un_locode of this MetroArea.
        :rtype: str
        """
        return self._un_locode

    @un_locode.setter
    def un_locode(self, un_locode):
        """Sets the un_locode of this MetroArea.

        The UN/LOCODE for identifying the metro area. 

        :param un_locode: The un_locode of this MetroArea.
        :type un_locode: str
        """
        if un_locode is None:
            raise ValueError("Invalid value for `un_locode`, must not be `None`")
        if un_locode is not None and len(un_locode) > 6:
            raise ValueError("Invalid value for `un_locode`, length must be less than or equal to `6`")

        self._un_locode = un_locode
