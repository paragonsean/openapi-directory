# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VLanConfigDot1QPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vlan: int=None, vlan_ethertype: str='0x8100', vlan_type: str=None):
        """VLanConfigDot1QPartial - a model defined in OpenAPI

        :param vlan: The vlan of this VLanConfigDot1QPartial.
        :param vlan_ethertype: The vlan_ethertype of this VLanConfigDot1QPartial.
        :param vlan_type: The vlan_type of this VLanConfigDot1QPartial.
        """
        self.openapi_types = {
            'vlan': int,
            'vlan_ethertype': str,
            'vlan_type': str
        }

        self.attribute_map = {
            'vlan': 'vlan',
            'vlan_ethertype': 'vlan_ethertype',
            'vlan_type': 'vlan_type'
        }

        self._vlan = vlan
        self._vlan_ethertype = vlan_ethertype
        self._vlan_type = vlan_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VLanConfigDot1QPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VLanConfigDot1QPartial of this VLanConfigDot1QPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vlan(self):
        """Gets the vlan of this VLanConfigDot1QPartial.

        A VLAN tag 

        :return: The vlan of this VLanConfigDot1QPartial.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this VLanConfigDot1QPartial.

        A VLAN tag 

        :param vlan: The vlan of this VLanConfigDot1QPartial.
        :type vlan: int
        """
        if vlan is not None and vlan > 4094:
            raise ValueError("Invalid value for `vlan`, must be a value less than or equal to `4094`")
        if vlan is not None and vlan < 1:
            raise ValueError("Invalid value for `vlan`, must be a value greater than or equal to `1`")

        self._vlan = vlan

    @property
    def vlan_ethertype(self):
        """Gets the vlan_ethertype of this VLanConfigDot1QPartial.

        The ethertype of the vlan in hexadecimal notation.

        :return: The vlan_ethertype of this VLanConfigDot1QPartial.
        :rtype: str
        """
        return self._vlan_ethertype

    @vlan_ethertype.setter
    def vlan_ethertype(self, vlan_ethertype):
        """Sets the vlan_ethertype of this VLanConfigDot1QPartial.

        The ethertype of the vlan in hexadecimal notation.

        :param vlan_ethertype: The vlan_ethertype of this VLanConfigDot1QPartial.
        :type vlan_ethertype: str
        """
        allowed_values = ["0x8100", "0x88a8", "0x9100"]  # noqa: E501
        if vlan_ethertype not in allowed_values:
            raise ValueError(
                "Invalid value for `vlan_ethertype` ({0}), must be one of {1}"
                .format(vlan_ethertype, allowed_values)
            )

        self._vlan_ethertype = vlan_ethertype

    @property
    def vlan_type(self):
        """Gets the vlan_type of this VLanConfigDot1QPartial.


        :return: The vlan_type of this VLanConfigDot1QPartial.
        :rtype: str
        """
        return self._vlan_type

    @vlan_type.setter
    def vlan_type(self, vlan_type):
        """Sets the vlan_type of this VLanConfigDot1QPartial.


        :param vlan_type: The vlan_type of this VLanConfigDot1QPartial.
        :type vlan_type: str
        """
        if vlan_type is None:
            raise ValueError("Invalid value for `vlan_type`, must not be `None`")

        self._vlan_type = vlan_type
