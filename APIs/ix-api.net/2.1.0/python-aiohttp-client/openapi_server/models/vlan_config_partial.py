# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v_lan_config_dot1_q_partial import VLanConfigDot1QPartial
from openapi_server.models.v_lan_config_port_partial import VLanConfigPortPartial
from openapi_server.models.v_lan_config_qin_q_partial import VLanConfigQinQPartial
from openapi_server import util


class VlanConfigPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vlan: int=None, vlan_ethertype: str='0x8100', vlan_type: str=None, inner_vlan: int=None, outer_vlan: int=None, outer_vlan_ethertype: str='0x8100'):
        """VlanConfigPartial - a model defined in OpenAPI

        :param vlan: The vlan of this VlanConfigPartial.
        :param vlan_ethertype: The vlan_ethertype of this VlanConfigPartial.
        :param vlan_type: The vlan_type of this VlanConfigPartial.
        :param inner_vlan: The inner_vlan of this VlanConfigPartial.
        :param outer_vlan: The outer_vlan of this VlanConfigPartial.
        :param outer_vlan_ethertype: The outer_vlan_ethertype of this VlanConfigPartial.
        """
        self.openapi_types = {
            'vlan': int,
            'vlan_ethertype': str,
            'vlan_type': str,
            'inner_vlan': int,
            'outer_vlan': int,
            'outer_vlan_ethertype': str
        }

        self.attribute_map = {
            'vlan': 'vlan',
            'vlan_ethertype': 'vlan_ethertype',
            'vlan_type': 'vlan_type',
            'inner_vlan': 'inner_vlan',
            'outer_vlan': 'outer_vlan',
            'outer_vlan_ethertype': 'outer_vlan_ethertype'
        }

        self._vlan = vlan
        self._vlan_ethertype = vlan_ethertype
        self._vlan_type = vlan_type
        self._inner_vlan = inner_vlan
        self._outer_vlan = outer_vlan
        self._outer_vlan_ethertype = outer_vlan_ethertype

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VlanConfigPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VlanConfigPartial of this VlanConfigPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vlan(self):
        """Gets the vlan of this VlanConfigPartial.

        A VLAN tag 

        :return: The vlan of this VlanConfigPartial.
        :rtype: int
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """Sets the vlan of this VlanConfigPartial.

        A VLAN tag 

        :param vlan: The vlan of this VlanConfigPartial.
        :type vlan: int
        """
        if vlan is not None and vlan > 4094:
            raise ValueError("Invalid value for `vlan`, must be a value less than or equal to `4094`")
        if vlan is not None and vlan < 1:
            raise ValueError("Invalid value for `vlan`, must be a value greater than or equal to `1`")

        self._vlan = vlan

    @property
    def vlan_ethertype(self):
        """Gets the vlan_ethertype of this VlanConfigPartial.

        The ethertype of the vlan in hexadecimal notation.

        :return: The vlan_ethertype of this VlanConfigPartial.
        :rtype: str
        """
        return self._vlan_ethertype

    @vlan_ethertype.setter
    def vlan_ethertype(self, vlan_ethertype):
        """Sets the vlan_ethertype of this VlanConfigPartial.

        The ethertype of the vlan in hexadecimal notation.

        :param vlan_ethertype: The vlan_ethertype of this VlanConfigPartial.
        :type vlan_ethertype: str
        """
        allowed_values = ["0x8100", "0x88a8", "0x9100"]  # noqa: E501
        if vlan_ethertype not in allowed_values:
            raise ValueError(
                "Invalid value for `vlan_ethertype` ({0}), must be one of {1}"
                .format(vlan_ethertype, allowed_values)
            )

        self._vlan_ethertype = vlan_ethertype

    @property
    def vlan_type(self):
        """Gets the vlan_type of this VlanConfigPartial.


        :return: The vlan_type of this VlanConfigPartial.
        :rtype: str
        """
        return self._vlan_type

    @vlan_type.setter
    def vlan_type(self, vlan_type):
        """Sets the vlan_type of this VlanConfigPartial.


        :param vlan_type: The vlan_type of this VlanConfigPartial.
        :type vlan_type: str
        """
        if vlan_type is None:
            raise ValueError("Invalid value for `vlan_type`, must not be `None`")

        self._vlan_type = vlan_type

    @property
    def inner_vlan(self):
        """Gets the inner_vlan of this VlanConfigPartial.

        The inner VLAN id. 

        :return: The inner_vlan of this VlanConfigPartial.
        :rtype: int
        """
        return self._inner_vlan

    @inner_vlan.setter
    def inner_vlan(self, inner_vlan):
        """Sets the inner_vlan of this VlanConfigPartial.

        The inner VLAN id. 

        :param inner_vlan: The inner_vlan of this VlanConfigPartial.
        :type inner_vlan: int
        """
        if inner_vlan is not None and inner_vlan > 4094:
            raise ValueError("Invalid value for `inner_vlan`, must be a value less than or equal to `4094`")
        if inner_vlan is not None and inner_vlan < 1:
            raise ValueError("Invalid value for `inner_vlan`, must be a value greater than or equal to `1`")

        self._inner_vlan = inner_vlan

    @property
    def outer_vlan(self):
        """Gets the outer_vlan of this VlanConfigPartial.

        The outer VLAN id. 

        :return: The outer_vlan of this VlanConfigPartial.
        :rtype: int
        """
        return self._outer_vlan

    @outer_vlan.setter
    def outer_vlan(self, outer_vlan):
        """Sets the outer_vlan of this VlanConfigPartial.

        The outer VLAN id. 

        :param outer_vlan: The outer_vlan of this VlanConfigPartial.
        :type outer_vlan: int
        """
        if outer_vlan is not None and outer_vlan > 4094:
            raise ValueError("Invalid value for `outer_vlan`, must be a value less than or equal to `4094`")
        if outer_vlan is not None and outer_vlan < 1:
            raise ValueError("Invalid value for `outer_vlan`, must be a value greater than or equal to `1`")

        self._outer_vlan = outer_vlan

    @property
    def outer_vlan_ethertype(self):
        """Gets the outer_vlan_ethertype of this VlanConfigPartial.

        The ethertype of the outer tag in hexadecimal notation.

        :return: The outer_vlan_ethertype of this VlanConfigPartial.
        :rtype: str
        """
        return self._outer_vlan_ethertype

    @outer_vlan_ethertype.setter
    def outer_vlan_ethertype(self, outer_vlan_ethertype):
        """Sets the outer_vlan_ethertype of this VlanConfigPartial.

        The ethertype of the outer tag in hexadecimal notation.

        :param outer_vlan_ethertype: The outer_vlan_ethertype of this VlanConfigPartial.
        :type outer_vlan_ethertype: str
        """
        allowed_values = ["0x8100", "0x88a8", "0x9100"]  # noqa: E501
        if outer_vlan_ethertype not in allowed_values:
            raise ValueError(
                "Invalid value for `outer_vlan_ethertype` ({0}), must be one of {1}"
                .format(outer_vlan_ethertype, allowed_values)
            )

        self._outer_vlan_ethertype = outer_vlan_ethertype
