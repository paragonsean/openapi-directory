# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, locality: str=None, post_office_box_number: str=None, postal_code: str=None, region: str=None, street_address: str=None):
        """Address - a model defined in OpenAPI

        :param country: The country of this Address.
        :param locality: The locality of this Address.
        :param post_office_box_number: The post_office_box_number of this Address.
        :param postal_code: The postal_code of this Address.
        :param region: The region of this Address.
        :param street_address: The street_address of this Address.
        """
        self.openapi_types = {
            'country': str,
            'locality': str,
            'post_office_box_number': str,
            'postal_code': str,
            'region': str,
            'street_address': str
        }

        self.attribute_map = {
            'country': 'country',
            'locality': 'locality',
            'post_office_box_number': 'post_office_box_number',
            'postal_code': 'postal_code',
            'region': 'region',
            'street_address': 'street_address'
        }

        self._country = country
        self._locality = locality
        self._post_office_box_number = post_office_box_number
        self._postal_code = postal_code
        self._region = region
        self._street_address = street_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Address.

        ISO 3166-1 alpha-2 country code, for example DE

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        ISO 3166-1 alpha-2 country code, for example DE

        :param country: The country of this Address.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")

        self._country = country

    @property
    def locality(self):
        """Gets the locality of this Address.

        The locality/city. For example, Mountain View.

        :return: The locality of this Address.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Address.

        The locality/city. For example, Mountain View.

        :param locality: The locality of this Address.
        :type locality: str
        """
        if locality is None:
            raise ValueError("Invalid value for `locality`, must not be `None`")
        if locality is not None and len(locality) > 40:
            raise ValueError("Invalid value for `locality`, length must be less than or equal to `40`")

        self._locality = locality

    @property
    def post_office_box_number(self):
        """Gets the post_office_box_number of this Address.

        The post office box number for PO box addresses.

        :return: The post_office_box_number of this Address.
        :rtype: str
        """
        return self._post_office_box_number

    @post_office_box_number.setter
    def post_office_box_number(self, post_office_box_number):
        """Sets the post_office_box_number of this Address.

        The post office box number for PO box addresses.

        :param post_office_box_number: The post_office_box_number of this Address.
        :type post_office_box_number: str
        """
        if post_office_box_number is not None and len(post_office_box_number) > 80:
            raise ValueError("Invalid value for `post_office_box_number`, length must be less than or equal to `80`")

        self._post_office_box_number = post_office_box_number

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        A postal code. For example, 9404

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        A postal code. For example, 9404

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and len(postal_code) > 24:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `24`")

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this Address.

        The region. For example, CA

        :return: The region of this Address.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.

        The region. For example, CA

        :param region: The region of this Address.
        :type region: str
        """
        if region is not None and len(region) > 80:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `80`")

        self._region = region

    @property
    def street_address(self):
        """Gets the street_address of this Address.

        The street address. For example, 1600 Amphitheatre Pkwy.

        :return: The street_address of this Address.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Address.

        The street address. For example, 1600 Amphitheatre Pkwy.

        :param street_address: The street_address of this Address.
        :type street_address: str
        """
        if street_address is None:
            raise ValueError("Invalid value for `street_address`, must not be `None`")
        if street_address is not None and len(street_address) > 80:
            raise ValueError("Invalid value for `street_address`, length must be less than or equal to `80`")

        self._street_address = street_address
