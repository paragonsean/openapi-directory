# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PointOfPresence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, devices: List[str]=None, facility: str=None, id: str=None, metro_area_network: str=None, name: str=None):
        """PointOfPresence - a model defined in OpenAPI

        :param devices: The devices of this PointOfPresence.
        :param facility: The facility of this PointOfPresence.
        :param id: The id of this PointOfPresence.
        :param metro_area_network: The metro_area_network of this PointOfPresence.
        :param name: The name of this PointOfPresence.
        """
        self.openapi_types = {
            'devices': List[str],
            'facility': str,
            'id': str,
            'metro_area_network': str,
            'name': str
        }

        self.attribute_map = {
            'devices': 'devices',
            'facility': 'facility',
            'id': 'id',
            'metro_area_network': 'metro_area_network',
            'name': 'name'
        }

        self._devices = devices
        self._facility = facility
        self._id = id
        self._metro_area_network = metro_area_network
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PointOfPresence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PointOfPresence of this PointOfPresence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def devices(self):
        """Gets the devices of this PointOfPresence.


        :return: The devices of this PointOfPresence.
        :rtype: List[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this PointOfPresence.


        :param devices: The devices of this PointOfPresence.
        :type devices: List[str]
        """
        if devices is None:
            raise ValueError("Invalid value for `devices`, must not be `None`")

        self._devices = devices

    @property
    def facility(self):
        """Gets the facility of this PointOfPresence.


        :return: The facility of this PointOfPresence.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this PointOfPresence.


        :param facility: The facility of this PointOfPresence.
        :type facility: str
        """
        if facility is None:
            raise ValueError("Invalid value for `facility`, must not be `None`")

        self._facility = facility

    @property
    def id(self):
        """Gets the id of this PointOfPresence.


        :return: The id of this PointOfPresence.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PointOfPresence.


        :param id: The id of this PointOfPresence.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def metro_area_network(self):
        """Gets the metro_area_network of this PointOfPresence.


        :return: The metro_area_network of this PointOfPresence.
        :rtype: str
        """
        return self._metro_area_network

    @metro_area_network.setter
    def metro_area_network(self, metro_area_network):
        """Sets the metro_area_network of this PointOfPresence.


        :param metro_area_network: The metro_area_network of this PointOfPresence.
        :type metro_area_network: str
        """
        if metro_area_network is None:
            raise ValueError("Invalid value for `metro_area_network`, must not be `None`")

        self._metro_area_network = metro_area_network

    @property
    def name(self):
        """Gets the name of this PointOfPresence.


        :return: The name of this PointOfPresence.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PointOfPresence.


        :param name: The name of this PointOfPresence.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")

        self._name = name
