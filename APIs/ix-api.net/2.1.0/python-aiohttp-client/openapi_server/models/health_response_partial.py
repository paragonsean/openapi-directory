# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthResponsePartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checks: Dict[str, Dict[str, str]]=None, description: str=None, links: Dict[str, str]=None, notes: List[str]=None, output: str=None, release_id: str=None, service_id: str=None, status: str=None, version: str=None):
        """HealthResponsePartial - a model defined in OpenAPI

        :param checks: The checks of this HealthResponsePartial.
        :param description: The description of this HealthResponsePartial.
        :param links: The links of this HealthResponsePartial.
        :param notes: The notes of this HealthResponsePartial.
        :param output: The output of this HealthResponsePartial.
        :param release_id: The release_id of this HealthResponsePartial.
        :param service_id: The service_id of this HealthResponsePartial.
        :param status: The status of this HealthResponsePartial.
        :param version: The version of this HealthResponsePartial.
        """
        self.openapi_types = {
            'checks': Dict[str, Dict[str, str]],
            'description': str,
            'links': Dict[str, str],
            'notes': List[str],
            'output': str,
            'release_id': str,
            'service_id': str,
            'status': str,
            'version': str
        }

        self.attribute_map = {
            'checks': 'checks',
            'description': 'description',
            'links': 'links',
            'notes': 'notes',
            'output': 'output',
            'release_id': 'releaseId',
            'service_id': 'serviceId',
            'status': 'status',
            'version': 'version'
        }

        self._checks = checks
        self._description = description
        self._links = links
        self._notes = notes
        self._output = output
        self._release_id = release_id
        self._service_id = service_id
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthResponsePartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthResponsePartial of this HealthResponsePartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checks(self):
        """Gets the checks of this HealthResponsePartial.

        The \"checks\" object MAY have a number of unique keys, one for each logical downstream dependency or sub-component.  Since each sub-component may be backed by several nodes with varying health statuses, these keys point to arrays of objects. In case of a single-node sub-component (or if presence of nodes is not relevant), a single-element array SHOULD be used as the value, for consistency.  Please see https://tools.ietf.org/id/draft-inadarei-api-health-check-04.html#the-checks-object for details.

        :return: The checks of this HealthResponsePartial.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this HealthResponsePartial.

        The \"checks\" object MAY have a number of unique keys, one for each logical downstream dependency or sub-component.  Since each sub-component may be backed by several nodes with varying health statuses, these keys point to arrays of objects. In case of a single-node sub-component (or if presence of nodes is not relevant), a single-element array SHOULD be used as the value, for consistency.  Please see https://tools.ietf.org/id/draft-inadarei-api-health-check-04.html#the-checks-object for details.

        :param checks: The checks of this HealthResponsePartial.
        :type checks: Dict[str, Dict[str, str]]
        """

        self._checks = checks

    @property
    def description(self):
        """Gets the description of this HealthResponsePartial.

        A human-friendly description of the service.

        :return: The description of this HealthResponsePartial.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthResponsePartial.

        A human-friendly description of the service.

        :param description: The description of this HealthResponsePartial.
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this HealthResponsePartial.

        Is an object containing link relations and URIs [RFC3986] for external links that MAY contain more information about the health of the endpoint.

        :return: The links of this HealthResponsePartial.
        :rtype: Dict[str, str]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this HealthResponsePartial.

        Is an object containing link relations and URIs [RFC3986] for external links that MAY contain more information about the health of the endpoint.

        :param links: The links of this HealthResponsePartial.
        :type links: Dict[str, str]
        """

        self._links = links

    @property
    def notes(self):
        """Gets the notes of this HealthResponsePartial.

        Array of notes relevant to current state of health.

        :return: The notes of this HealthResponsePartial.
        :rtype: List[str]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this HealthResponsePartial.

        Array of notes relevant to current state of health.

        :param notes: The notes of this HealthResponsePartial.
        :type notes: List[str]
        """

        self._notes = notes

    @property
    def output(self):
        """Gets the output of this HealthResponsePartial.

        Raw error output, in case of \"fail\" or \"warn\" states.

        :return: The output of this HealthResponsePartial.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this HealthResponsePartial.

        Raw error output, in case of \"fail\" or \"warn\" states.

        :param output: The output of this HealthResponsePartial.
        :type output: str
        """

        self._output = output

    @property
    def release_id(self):
        """Gets the release_id of this HealthResponsePartial.

        Release version of the api implementation. 

        :return: The release_id of this HealthResponsePartial.
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this HealthResponsePartial.

        Release version of the api implementation. 

        :param release_id: The release_id of this HealthResponsePartial.
        :type release_id: str
        """

        self._release_id = release_id

    @property
    def service_id(self):
        """Gets the service_id of this HealthResponsePartial.

        A unique identifier of the service, in the application scope.

        :return: The service_id of this HealthResponsePartial.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this HealthResponsePartial.

        A unique identifier of the service, in the application scope.

        :param service_id: The service_id of this HealthResponsePartial.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def status(self):
        """Gets the status of this HealthResponsePartial.

        status indicates whether the service status is acceptable or not.

        :return: The status of this HealthResponsePartial.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HealthResponsePartial.

        status indicates whether the service status is acceptable or not.

        :param status: The status of this HealthResponsePartial.
        :type status: str
        """
        allowed_values = ["pass", "fail", "warn"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """Gets the version of this HealthResponsePartial.

        Public version of the service. 

        :return: The version of this HealthResponsePartial.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this HealthResponsePartial.

        Public version of the service. 

        :param version: The version of this HealthResponsePartial.
        :type version: str
        """

        self._version = version
