# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class StatefulPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: str=None, status: List[Status]=None):
        """StatefulPartial - a model defined in OpenAPI

        :param state: The state of this StatefulPartial.
        :param status: The status of this StatefulPartial.
        """
        self.openapi_types = {
            'state': str,
            'status': List[Status]
        }

        self.attribute_map = {
            'state': 'state',
            'status': 'status'
        }

        self._state = state
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatefulPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatefulPartial of this StatefulPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this StatefulPartial.


        :return: The state of this StatefulPartial.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StatefulPartial.


        :param state: The state of this StatefulPartial.
        :type state: str
        """
        allowed_values = ["requested", "allocated", "testing", "production", "production_change_pending", "decommission_requested", "decommissioned", "archived", "error", "operator", "scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this StatefulPartial.


        :return: The status of this StatefulPartial.
        :rtype: List[Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatefulPartial.


        :param status: The status of this StatefulPartial.
        :type status: List[Status]
        """

        self._status = status
