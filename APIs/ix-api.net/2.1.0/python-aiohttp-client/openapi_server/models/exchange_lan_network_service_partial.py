# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ExchangeLanNetworkServicePartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consuming_account: str=None, external_ref: str=None, id: str=None, ixfdb_ixid: int=None, managing_account: str=None, metro_area_network: str=None, name: str=None, network_features: List[str]=None, nsc_required_contact_roles: List[str]=None, peeringdb_ixid: int=None, product_offering: str=None, state: str=None, status: List[Status]=None, subnet_v4: str=None, subnet_v6: str=None, type: str=None):
        """ExchangeLanNetworkServicePartial - a model defined in OpenAPI

        :param consuming_account: The consuming_account of this ExchangeLanNetworkServicePartial.
        :param external_ref: The external_ref of this ExchangeLanNetworkServicePartial.
        :param id: The id of this ExchangeLanNetworkServicePartial.
        :param ixfdb_ixid: The ixfdb_ixid of this ExchangeLanNetworkServicePartial.
        :param managing_account: The managing_account of this ExchangeLanNetworkServicePartial.
        :param metro_area_network: The metro_area_network of this ExchangeLanNetworkServicePartial.
        :param name: The name of this ExchangeLanNetworkServicePartial.
        :param network_features: The network_features of this ExchangeLanNetworkServicePartial.
        :param nsc_required_contact_roles: The nsc_required_contact_roles of this ExchangeLanNetworkServicePartial.
        :param peeringdb_ixid: The peeringdb_ixid of this ExchangeLanNetworkServicePartial.
        :param product_offering: The product_offering of this ExchangeLanNetworkServicePartial.
        :param state: The state of this ExchangeLanNetworkServicePartial.
        :param status: The status of this ExchangeLanNetworkServicePartial.
        :param subnet_v4: The subnet_v4 of this ExchangeLanNetworkServicePartial.
        :param subnet_v6: The subnet_v6 of this ExchangeLanNetworkServicePartial.
        :param type: The type of this ExchangeLanNetworkServicePartial.
        """
        self.openapi_types = {
            'consuming_account': str,
            'external_ref': str,
            'id': str,
            'ixfdb_ixid': int,
            'managing_account': str,
            'metro_area_network': str,
            'name': str,
            'network_features': List[str],
            'nsc_required_contact_roles': List[str],
            'peeringdb_ixid': int,
            'product_offering': str,
            'state': str,
            'status': List[Status],
            'subnet_v4': str,
            'subnet_v6': str,
            'type': str
        }

        self.attribute_map = {
            'consuming_account': 'consuming_account',
            'external_ref': 'external_ref',
            'id': 'id',
            'ixfdb_ixid': 'ixfdb_ixid',
            'managing_account': 'managing_account',
            'metro_area_network': 'metro_area_network',
            'name': 'name',
            'network_features': 'network_features',
            'nsc_required_contact_roles': 'nsc_required_contact_roles',
            'peeringdb_ixid': 'peeringdb_ixid',
            'product_offering': 'product_offering',
            'state': 'state',
            'status': 'status',
            'subnet_v4': 'subnet_v4',
            'subnet_v6': 'subnet_v6',
            'type': 'type'
        }

        self._consuming_account = consuming_account
        self._external_ref = external_ref
        self._id = id
        self._ixfdb_ixid = ixfdb_ixid
        self._managing_account = managing_account
        self._metro_area_network = metro_area_network
        self._name = name
        self._network_features = network_features
        self._nsc_required_contact_roles = nsc_required_contact_roles
        self._peeringdb_ixid = peeringdb_ixid
        self._product_offering = product_offering
        self._state = state
        self._status = status
        self._subnet_v4 = subnet_v4
        self._subnet_v6 = subnet_v6
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExchangeLanNetworkServicePartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExchangeLanNetworkServicePartial of this ExchangeLanNetworkServicePartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consuming_account(self):
        """Gets the consuming_account of this ExchangeLanNetworkServicePartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this ExchangeLanNetworkServicePartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this ExchangeLanNetworkServicePartial.
        :type consuming_account: str
        """

        self._consuming_account = consuming_account

    @property
    def external_ref(self):
        """Gets the external_ref of this ExchangeLanNetworkServicePartial.

        Reference field, free to use for the API user.

        :return: The external_ref of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this ExchangeLanNetworkServicePartial.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this ExchangeLanNetworkServicePartial.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def id(self):
        """Gets the id of this ExchangeLanNetworkServicePartial.


        :return: The id of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExchangeLanNetworkServicePartial.


        :param id: The id of this ExchangeLanNetworkServicePartial.
        :type id: str
        """

        self._id = id

    @property
    def ixfdb_ixid(self):
        """Gets the ixfdb_ixid of this ExchangeLanNetworkServicePartial.

        id of ixfdb

        :return: The ixfdb_ixid of this ExchangeLanNetworkServicePartial.
        :rtype: int
        """
        return self._ixfdb_ixid

    @ixfdb_ixid.setter
    def ixfdb_ixid(self, ixfdb_ixid):
        """Sets the ixfdb_ixid of this ExchangeLanNetworkServicePartial.

        id of ixfdb

        :param ixfdb_ixid: The ixfdb_ixid of this ExchangeLanNetworkServicePartial.
        :type ixfdb_ixid: int
        """

        self._ixfdb_ixid = ixfdb_ixid

    @property
    def managing_account(self):
        """Gets the managing_account of this ExchangeLanNetworkServicePartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this ExchangeLanNetworkServicePartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this ExchangeLanNetworkServicePartial.
        :type managing_account: str
        """

        self._managing_account = managing_account

    @property
    def metro_area_network(self):
        """Gets the metro_area_network of this ExchangeLanNetworkServicePartial.

        Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`. 

        :return: The metro_area_network of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._metro_area_network

    @metro_area_network.setter
    def metro_area_network(self, metro_area_network):
        """Sets the metro_area_network of this ExchangeLanNetworkServicePartial.

        Id of the `MetroAreaNetwork` where the exchange lan network service is directly provided.  Same as `service_metro_area_network` on the related `ProductOffering`. 

        :param metro_area_network: The metro_area_network of this ExchangeLanNetworkServicePartial.
        :type metro_area_network: str
        """

        self._metro_area_network = metro_area_network

    @property
    def name(self):
        """Gets the name of this ExchangeLanNetworkServicePartial.

        Exchange-dependent service name, will be shown on the invoice.

        :return: The name of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExchangeLanNetworkServicePartial.

        Exchange-dependent service name, will be shown on the invoice.

        :param name: The name of this ExchangeLanNetworkServicePartial.
        :type name: str
        """
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")

        self._name = name

    @property
    def network_features(self):
        """Gets the network_features of this ExchangeLanNetworkServicePartial.


        :return: The network_features of this ExchangeLanNetworkServicePartial.
        :rtype: List[str]
        """
        return self._network_features

    @network_features.setter
    def network_features(self, network_features):
        """Sets the network_features of this ExchangeLanNetworkServicePartial.


        :param network_features: The network_features of this ExchangeLanNetworkServicePartial.
        :type network_features: List[str]
        """

        self._network_features = network_features

    @property
    def nsc_required_contact_roles(self):
        """Gets the nsc_required_contact_roles of this ExchangeLanNetworkServicePartial.

        The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.

        :return: The nsc_required_contact_roles of this ExchangeLanNetworkServicePartial.
        :rtype: List[str]
        """
        return self._nsc_required_contact_roles

    @nsc_required_contact_roles.setter
    def nsc_required_contact_roles(self, nsc_required_contact_roles):
        """Sets the nsc_required_contact_roles of this ExchangeLanNetworkServicePartial.

        The configuration will require at least one of each of the specified roles assigned to contacts.  The `RoleAssignment` is associated through the `role_assignments` list property of the network service configuration.

        :param nsc_required_contact_roles: The nsc_required_contact_roles of this ExchangeLanNetworkServicePartial.
        :type nsc_required_contact_roles: List[str]
        """

        self._nsc_required_contact_roles = nsc_required_contact_roles

    @property
    def peeringdb_ixid(self):
        """Gets the peeringdb_ixid of this ExchangeLanNetworkServicePartial.

        PeeringDB ixid

        :return: The peeringdb_ixid of this ExchangeLanNetworkServicePartial.
        :rtype: int
        """
        return self._peeringdb_ixid

    @peeringdb_ixid.setter
    def peeringdb_ixid(self, peeringdb_ixid):
        """Sets the peeringdb_ixid of this ExchangeLanNetworkServicePartial.

        PeeringDB ixid

        :param peeringdb_ixid: The peeringdb_ixid of this ExchangeLanNetworkServicePartial.
        :type peeringdb_ixid: int
        """

        self._peeringdb_ixid = peeringdb_ixid

    @property
    def product_offering(self):
        """Gets the product_offering of this ExchangeLanNetworkServicePartial.

        *deprecation notice*

        :return: The product_offering of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._product_offering

    @product_offering.setter
    def product_offering(self, product_offering):
        """Sets the product_offering of this ExchangeLanNetworkServicePartial.

        *deprecation notice*

        :param product_offering: The product_offering of this ExchangeLanNetworkServicePartial.
        :type product_offering: str
        """

        self._product_offering = product_offering

    @property
    def state(self):
        """Gets the state of this ExchangeLanNetworkServicePartial.


        :return: The state of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExchangeLanNetworkServicePartial.


        :param state: The state of this ExchangeLanNetworkServicePartial.
        :type state: str
        """
        allowed_values = ["requested", "allocated", "testing", "production", "production_change_pending", "decommission_requested", "decommissioned", "archived", "error", "operator", "scheduled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status(self):
        """Gets the status of this ExchangeLanNetworkServicePartial.


        :return: The status of this ExchangeLanNetworkServicePartial.
        :rtype: List[Status]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExchangeLanNetworkServicePartial.


        :param status: The status of this ExchangeLanNetworkServicePartial.
        :type status: List[Status]
        """

        self._status = status

    @property
    def subnet_v4(self):
        """Gets the subnet_v4 of this ExchangeLanNetworkServicePartial.

        IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation. 

        :return: The subnet_v4 of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._subnet_v4

    @subnet_v4.setter
    def subnet_v4(self, subnet_v4):
        """Sets the subnet_v4 of this ExchangeLanNetworkServicePartial.

        IPv4 subnet in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) CIDR notation. 

        :param subnet_v4: The subnet_v4 of this ExchangeLanNetworkServicePartial.
        :type subnet_v4: str
        """

        self._subnet_v4 = subnet_v4

    @property
    def subnet_v6(self):
        """Gets the subnet_v6 of this ExchangeLanNetworkServicePartial.

        IPv6 subnet in hexadecimal colon separated CIDR notation. 

        :return: The subnet_v6 of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._subnet_v6

    @subnet_v6.setter
    def subnet_v6(self, subnet_v6):
        """Sets the subnet_v6 of this ExchangeLanNetworkServicePartial.

        IPv6 subnet in hexadecimal colon separated CIDR notation. 

        :param subnet_v6: The subnet_v6 of this ExchangeLanNetworkServicePartial.
        :type subnet_v6: str
        """

        self._subnet_v6 = subnet_v6

    @property
    def type(self):
        """Gets the type of this ExchangeLanNetworkServicePartial.


        :return: The type of this ExchangeLanNetworkServicePartial.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExchangeLanNetworkServicePartial.


        :param type: The type of this ExchangeLanNetworkServicePartial.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
