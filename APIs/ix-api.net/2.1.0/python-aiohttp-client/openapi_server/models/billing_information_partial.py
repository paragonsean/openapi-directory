# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class BillingInformationPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, name: str=None, vat_number: str=None):
        """BillingInformationPartial - a model defined in OpenAPI

        :param address: The address of this BillingInformationPartial.
        :param name: The name of this BillingInformationPartial.
        :param vat_number: The vat_number of this BillingInformationPartial.
        """
        self.openapi_types = {
            'address': Address,
            'name': str,
            'vat_number': str
        }

        self.attribute_map = {
            'address': 'address',
            'name': 'name',
            'vat_number': 'vat_number'
        }

        self._address = address
        self._name = name
        self._vat_number = vat_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingInformationPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingInformationPartial of this BillingInformationPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this BillingInformationPartial.


        :return: The address of this BillingInformationPartial.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this BillingInformationPartial.


        :param address: The address of this BillingInformationPartial.
        :type address: Address
        """

        self._address = address

    @property
    def name(self):
        """Gets the name of this BillingInformationPartial.

        Name of the organisation receiving invoices. 

        :return: The name of this BillingInformationPartial.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BillingInformationPartial.

        Name of the organisation receiving invoices. 

        :param name: The name of this BillingInformationPartial.
        :type name: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")

        self._name = name

    @property
    def vat_number(self):
        """Gets the vat_number of this BillingInformationPartial.

        Value-added tax number, required for european reverse charge system. 

        :return: The vat_number of this BillingInformationPartial.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this BillingInformationPartial.

        Value-added tax number, required for european reverse charge system. 

        :param vat_number: The vat_number of this BillingInformationPartial.
        :type vat_number: str
        """
        if vat_number is not None and len(vat_number) > 20:
            raise ValueError("Invalid value for `vat_number`, length must be less than or equal to `20`")
        if vat_number is not None and len(vat_number) < 2:
            raise ValueError("Invalid value for `vat_number`, length must be greater than or equal to `2`")

        self._vat_number = vat_number
