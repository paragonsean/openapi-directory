# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpAddressPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, consuming_account: str=None, external_ref: str=None, fqdn: str=None, id: str=None, managing_account: str=None, prefix_length: int=None, valid_not_after: datetime=None, valid_not_before: datetime=None, version: int=None):
        """IpAddressPartial - a model defined in OpenAPI

        :param address: The address of this IpAddressPartial.
        :param consuming_account: The consuming_account of this IpAddressPartial.
        :param external_ref: The external_ref of this IpAddressPartial.
        :param fqdn: The fqdn of this IpAddressPartial.
        :param id: The id of this IpAddressPartial.
        :param managing_account: The managing_account of this IpAddressPartial.
        :param prefix_length: The prefix_length of this IpAddressPartial.
        :param valid_not_after: The valid_not_after of this IpAddressPartial.
        :param valid_not_before: The valid_not_before of this IpAddressPartial.
        :param version: The version of this IpAddressPartial.
        """
        self.openapi_types = {
            'address': str,
            'consuming_account': str,
            'external_ref': str,
            'fqdn': str,
            'id': str,
            'managing_account': str,
            'prefix_length': int,
            'valid_not_after': datetime,
            'valid_not_before': datetime,
            'version': int
        }

        self.attribute_map = {
            'address': 'address',
            'consuming_account': 'consuming_account',
            'external_ref': 'external_ref',
            'fqdn': 'fqdn',
            'id': 'id',
            'managing_account': 'managing_account',
            'prefix_length': 'prefix_length',
            'valid_not_after': 'valid_not_after',
            'valid_not_before': 'valid_not_before',
            'version': 'version'
        }

        self._address = address
        self._consuming_account = consuming_account
        self._external_ref = external_ref
        self._fqdn = fqdn
        self._id = id
        self._managing_account = managing_account
        self._prefix_length = prefix_length
        self._valid_not_after = valid_not_after
        self._valid_not_before = valid_not_before
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpAddressPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpAddressPartial of this IpAddressPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this IpAddressPartial.

        IPv4 or IPv6 Address in the following format: - IPv4: [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) - IPv6: hexadecimal colon separated notation 

        :return: The address of this IpAddressPartial.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IpAddressPartial.

        IPv4 or IPv6 Address in the following format: - IPv4: [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) - IPv6: hexadecimal colon separated notation 

        :param address: The address of this IpAddressPartial.
        :type address: str
        """

        self._address = address

    @property
    def consuming_account(self):
        """Gets the consuming_account of this IpAddressPartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :return: The consuming_account of this IpAddressPartial.
        :rtype: str
        """
        return self._consuming_account

    @consuming_account.setter
    def consuming_account(self, consuming_account):
        """Sets the consuming_account of this IpAddressPartial.

        The `id` of the account consuming a service.  Used to be `owning_customer`. 

        :param consuming_account: The consuming_account of this IpAddressPartial.
        :type consuming_account: str
        """

        self._consuming_account = consuming_account

    @property
    def external_ref(self):
        """Gets the external_ref of this IpAddressPartial.

        Reference field, free to use for the API user.

        :return: The external_ref of this IpAddressPartial.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this IpAddressPartial.

        Reference field, free to use for the API user.

        :param external_ref: The external_ref of this IpAddressPartial.
        :type external_ref: str
        """
        if external_ref is not None and len(external_ref) > 128:
            raise ValueError("Invalid value for `external_ref`, length must be less than or equal to `128`")

        self._external_ref = external_ref

    @property
    def fqdn(self):
        """Gets the fqdn of this IpAddressPartial.


        :return: The fqdn of this IpAddressPartial.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this IpAddressPartial.


        :param fqdn: The fqdn of this IpAddressPartial.
        :type fqdn: str
        """
        if fqdn is not None and len(fqdn) > 100:
            raise ValueError("Invalid value for `fqdn`, length must be less than or equal to `100`")

        self._fqdn = fqdn

    @property
    def id(self):
        """Gets the id of this IpAddressPartial.


        :return: The id of this IpAddressPartial.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IpAddressPartial.


        :param id: The id of this IpAddressPartial.
        :type id: str
        """
        if id is not None and len(id) > 80:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `80`")

        self._id = id

    @property
    def managing_account(self):
        """Gets the managing_account of this IpAddressPartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :return: The managing_account of this IpAddressPartial.
        :rtype: str
        """
        return self._managing_account

    @managing_account.setter
    def managing_account(self, managing_account):
        """Sets the managing_account of this IpAddressPartial.

        The `id` of the account responsible for managing the service via the API. A manager can read and update the state of entities. 

        :param managing_account: The managing_account of this IpAddressPartial.
        :type managing_account: str
        """

        self._managing_account = managing_account

    @property
    def prefix_length(self):
        """Gets the prefix_length of this IpAddressPartial.

        The CIDR ip prefix length 

        :return: The prefix_length of this IpAddressPartial.
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this IpAddressPartial.

        The CIDR ip prefix length 

        :param prefix_length: The prefix_length of this IpAddressPartial.
        :type prefix_length: int
        """
        if prefix_length is not None and prefix_length > 128:
            raise ValueError("Invalid value for `prefix_length`, must be a value less than or equal to `128`")
        if prefix_length is not None and prefix_length < 0:
            raise ValueError("Invalid value for `prefix_length`, must be a value greater than or equal to `0`")

        self._prefix_length = prefix_length

    @property
    def valid_not_after(self):
        """Gets the valid_not_after of this IpAddressPartial.


        :return: The valid_not_after of this IpAddressPartial.
        :rtype: datetime
        """
        return self._valid_not_after

    @valid_not_after.setter
    def valid_not_after(self, valid_not_after):
        """Sets the valid_not_after of this IpAddressPartial.


        :param valid_not_after: The valid_not_after of this IpAddressPartial.
        :type valid_not_after: datetime
        """

        self._valid_not_after = valid_not_after

    @property
    def valid_not_before(self):
        """Gets the valid_not_before of this IpAddressPartial.


        :return: The valid_not_before of this IpAddressPartial.
        :rtype: datetime
        """
        return self._valid_not_before

    @valid_not_before.setter
    def valid_not_before(self, valid_not_before):
        """Sets the valid_not_before of this IpAddressPartial.


        :param valid_not_before: The valid_not_before of this IpAddressPartial.
        :type valid_not_before: datetime
        """

        self._valid_not_before = valid_not_before

    @property
    def version(self):
        """Gets the version of this IpAddressPartial.

        The version of the internet protocol. 

        :return: The version of this IpAddressPartial.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IpAddressPartial.

        The version of the internet protocol. 

        :param version: The version of this IpAddressPartial.
        :type version: int
        """

        self._version = version
