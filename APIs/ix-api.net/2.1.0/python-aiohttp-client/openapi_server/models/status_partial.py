# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatusPartial(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attrs: object=None, message: str=None, severity: int=None, tag: str=None, timestamp: datetime=None):
        """StatusPartial - a model defined in OpenAPI

        :param attrs: The attrs of this StatusPartial.
        :param message: The message of this StatusPartial.
        :param severity: The severity of this StatusPartial.
        :param tag: The tag of this StatusPartial.
        :param timestamp: The timestamp of this StatusPartial.
        """
        self.openapi_types = {
            'attrs': object,
            'message': str,
            'severity': int,
            'tag': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'attrs': 'attrs',
            'message': 'message',
            'severity': 'severity',
            'tag': 'tag',
            'timestamp': 'timestamp'
        }

        self._attrs = attrs
        self._message = message
        self._severity = severity
        self._tag = tag
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusPartial':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusPartial of this StatusPartial.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attrs(self):
        """Gets the attrs of this StatusPartial.


        :return: The attrs of this StatusPartial.
        :rtype: object
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this StatusPartial.


        :param attrs: The attrs of this StatusPartial.
        :type attrs: object
        """

        self._attrs = attrs

    @property
    def message(self):
        """Gets the message of this StatusPartial.


        :return: The message of this StatusPartial.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StatusPartial.


        :param message: The message of this StatusPartial.
        :type message: str
        """

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this StatusPartial.

        We are using syslog severity levels: 0 = Emergency, 1 = Alert, 2 = Critical, 3 = Error, 4 = Warning, 5 = Notice, 6 = Informational, 7 = Debug. 

        :return: The severity of this StatusPartial.
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this StatusPartial.

        We are using syslog severity levels: 0 = Emergency, 1 = Alert, 2 = Critical, 3 = Error, 4 = Warning, 5 = Notice, 6 = Informational, 7 = Debug. 

        :param severity: The severity of this StatusPartial.
        :type severity: int
        """
        if severity is not None and severity > 7:
            raise ValueError("Invalid value for `severity`, must be a value less than or equal to `7`")
        if severity is not None and severity < 0:
            raise ValueError("Invalid value for `severity`, must be a value greater than or equal to `0`")

        self._severity = severity

    @property
    def tag(self):
        """Gets the tag of this StatusPartial.


        :return: The tag of this StatusPartial.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this StatusPartial.


        :param tag: The tag of this StatusPartial.
        :type tag: str
        """

        self._tag = tag

    @property
    def timestamp(self):
        """Gets the timestamp of this StatusPartial.


        :return: The timestamp of this StatusPartial.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StatusPartial.


        :param timestamp: The timestamp of this StatusPartial.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
