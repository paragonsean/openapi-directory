/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchangeLanNetworkService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchangeLanNetworkService::OAIExchangeLanNetworkService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchangeLanNetworkService::OAIExchangeLanNetworkService() {
    this->initializeModel();
}

OAIExchangeLanNetworkService::~OAIExchangeLanNetworkService() {}

void OAIExchangeLanNetworkService::initializeModel() {

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ixfdb_ixid_isSet = false;
    m_ixfdb_ixid_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_metro_area_network_isSet = false;
    m_metro_area_network_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_features_isSet = false;
    m_network_features_isValid = false;

    m_nsc_required_contact_roles_isSet = false;
    m_nsc_required_contact_roles_isValid = false;

    m_peeringdb_ixid_isSet = false;
    m_peeringdb_ixid_isValid = false;

    m_product_offering_isSet = false;
    m_product_offering_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subnet_v4_isSet = false;
    m_subnet_v4_isValid = false;

    m_subnet_v6_isSet = false;
    m_subnet_v6_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExchangeLanNetworkService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchangeLanNetworkService::fromJsonObject(QJsonObject json) {

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ixfdb_ixid_isValid = ::OpenAPI::fromJsonValue(m_ixfdb_ixid, json[QString("ixfdb_ixid")]);
    m_ixfdb_ixid_isSet = !json[QString("ixfdb_ixid")].isNull() && m_ixfdb_ixid_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_metro_area_network_isValid = ::OpenAPI::fromJsonValue(m_metro_area_network, json[QString("metro_area_network")]);
    m_metro_area_network_isSet = !json[QString("metro_area_network")].isNull() && m_metro_area_network_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_features_isValid = ::OpenAPI::fromJsonValue(m_network_features, json[QString("network_features")]);
    m_network_features_isSet = !json[QString("network_features")].isNull() && m_network_features_isValid;

    m_nsc_required_contact_roles_isValid = ::OpenAPI::fromJsonValue(m_nsc_required_contact_roles, json[QString("nsc_required_contact_roles")]);
    m_nsc_required_contact_roles_isSet = !json[QString("nsc_required_contact_roles")].isNull() && m_nsc_required_contact_roles_isValid;

    m_peeringdb_ixid_isValid = ::OpenAPI::fromJsonValue(m_peeringdb_ixid, json[QString("peeringdb_ixid")]);
    m_peeringdb_ixid_isSet = !json[QString("peeringdb_ixid")].isNull() && m_peeringdb_ixid_isValid;

    m_product_offering_isValid = ::OpenAPI::fromJsonValue(m_product_offering, json[QString("product_offering")]);
    m_product_offering_isSet = !json[QString("product_offering")].isNull() && m_product_offering_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subnet_v4_isValid = ::OpenAPI::fromJsonValue(m_subnet_v4, json[QString("subnet_v4")]);
    m_subnet_v4_isSet = !json[QString("subnet_v4")].isNull() && m_subnet_v4_isValid;

    m_subnet_v6_isValid = ::OpenAPI::fromJsonValue(m_subnet_v6, json[QString("subnet_v6")]);
    m_subnet_v6_isSet = !json[QString("subnet_v6")].isNull() && m_subnet_v6_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExchangeLanNetworkService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchangeLanNetworkService::asJsonObject() const {
    QJsonObject obj;
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ixfdb_ixid_isSet) {
        obj.insert(QString("ixfdb_ixid"), ::OpenAPI::toJsonValue(m_ixfdb_ixid));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_metro_area_network_isSet) {
        obj.insert(QString("metro_area_network"), ::OpenAPI::toJsonValue(m_metro_area_network));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_features.size() > 0) {
        obj.insert(QString("network_features"), ::OpenAPI::toJsonValue(m_network_features));
    }
    if (m_nsc_required_contact_roles.size() > 0) {
        obj.insert(QString("nsc_required_contact_roles"), ::OpenAPI::toJsonValue(m_nsc_required_contact_roles));
    }
    if (m_peeringdb_ixid_isSet) {
        obj.insert(QString("peeringdb_ixid"), ::OpenAPI::toJsonValue(m_peeringdb_ixid));
    }
    if (m_product_offering_isSet) {
        obj.insert(QString("product_offering"), ::OpenAPI::toJsonValue(m_product_offering));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subnet_v4_isSet) {
        obj.insert(QString("subnet_v4"), ::OpenAPI::toJsonValue(m_subnet_v4));
    }
    if (m_subnet_v6_isSet) {
        obj.insert(QString("subnet_v6"), ::OpenAPI::toJsonValue(m_subnet_v6));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExchangeLanNetworkService::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIExchangeLanNetworkService::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIExchangeLanNetworkService::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIExchangeLanNetworkService::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIExchangeLanNetworkService::getExternalRef() const {
    return m_external_ref;
}
void OAIExchangeLanNetworkService::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIExchangeLanNetworkService::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIExchangeLanNetworkService::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIExchangeLanNetworkService::getId() const {
    return m_id;
}
void OAIExchangeLanNetworkService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExchangeLanNetworkService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExchangeLanNetworkService::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIExchangeLanNetworkService::getIxfdbIxid() const {
    return m_ixfdb_ixid;
}
void OAIExchangeLanNetworkService::setIxfdbIxid(const qint32 &ixfdb_ixid) {
    m_ixfdb_ixid = ixfdb_ixid;
    m_ixfdb_ixid_isSet = true;
}

bool OAIExchangeLanNetworkService::is_ixfdb_ixid_Set() const{
    return m_ixfdb_ixid_isSet;
}

bool OAIExchangeLanNetworkService::is_ixfdb_ixid_Valid() const{
    return m_ixfdb_ixid_isValid;
}

QString OAIExchangeLanNetworkService::getManagingAccount() const {
    return m_managing_account;
}
void OAIExchangeLanNetworkService::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIExchangeLanNetworkService::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIExchangeLanNetworkService::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QString OAIExchangeLanNetworkService::getMetroAreaNetwork() const {
    return m_metro_area_network;
}
void OAIExchangeLanNetworkService::setMetroAreaNetwork(const QString &metro_area_network) {
    m_metro_area_network = metro_area_network;
    m_metro_area_network_isSet = true;
}

bool OAIExchangeLanNetworkService::is_metro_area_network_Set() const{
    return m_metro_area_network_isSet;
}

bool OAIExchangeLanNetworkService::is_metro_area_network_Valid() const{
    return m_metro_area_network_isValid;
}

QString OAIExchangeLanNetworkService::getName() const {
    return m_name;
}
void OAIExchangeLanNetworkService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExchangeLanNetworkService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExchangeLanNetworkService::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIExchangeLanNetworkService::getNetworkFeatures() const {
    return m_network_features;
}
void OAIExchangeLanNetworkService::setNetworkFeatures(const QList<QString> &network_features) {
    m_network_features = network_features;
    m_network_features_isSet = true;
}

bool OAIExchangeLanNetworkService::is_network_features_Set() const{
    return m_network_features_isSet;
}

bool OAIExchangeLanNetworkService::is_network_features_Valid() const{
    return m_network_features_isValid;
}

QList<QString> OAIExchangeLanNetworkService::getNscRequiredContactRoles() const {
    return m_nsc_required_contact_roles;
}
void OAIExchangeLanNetworkService::setNscRequiredContactRoles(const QList<QString> &nsc_required_contact_roles) {
    m_nsc_required_contact_roles = nsc_required_contact_roles;
    m_nsc_required_contact_roles_isSet = true;
}

bool OAIExchangeLanNetworkService::is_nsc_required_contact_roles_Set() const{
    return m_nsc_required_contact_roles_isSet;
}

bool OAIExchangeLanNetworkService::is_nsc_required_contact_roles_Valid() const{
    return m_nsc_required_contact_roles_isValid;
}

qint32 OAIExchangeLanNetworkService::getPeeringdbIxid() const {
    return m_peeringdb_ixid;
}
void OAIExchangeLanNetworkService::setPeeringdbIxid(const qint32 &peeringdb_ixid) {
    m_peeringdb_ixid = peeringdb_ixid;
    m_peeringdb_ixid_isSet = true;
}

bool OAIExchangeLanNetworkService::is_peeringdb_ixid_Set() const{
    return m_peeringdb_ixid_isSet;
}

bool OAIExchangeLanNetworkService::is_peeringdb_ixid_Valid() const{
    return m_peeringdb_ixid_isValid;
}

QString OAIExchangeLanNetworkService::getProductOffering() const {
    return m_product_offering;
}
void OAIExchangeLanNetworkService::setProductOffering(const QString &product_offering) {
    m_product_offering = product_offering;
    m_product_offering_isSet = true;
}

bool OAIExchangeLanNetworkService::is_product_offering_Set() const{
    return m_product_offering_isSet;
}

bool OAIExchangeLanNetworkService::is_product_offering_Valid() const{
    return m_product_offering_isValid;
}

QString OAIExchangeLanNetworkService::getState() const {
    return m_state;
}
void OAIExchangeLanNetworkService::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExchangeLanNetworkService::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExchangeLanNetworkService::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIStatus> OAIExchangeLanNetworkService::getStatus() const {
    return m_status;
}
void OAIExchangeLanNetworkService::setStatus(const QList<OAIStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExchangeLanNetworkService::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExchangeLanNetworkService::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIExchangeLanNetworkService::getSubnetV4() const {
    return m_subnet_v4;
}
void OAIExchangeLanNetworkService::setSubnetV4(const QString &subnet_v4) {
    m_subnet_v4 = subnet_v4;
    m_subnet_v4_isSet = true;
}

bool OAIExchangeLanNetworkService::is_subnet_v4_Set() const{
    return m_subnet_v4_isSet;
}

bool OAIExchangeLanNetworkService::is_subnet_v4_Valid() const{
    return m_subnet_v4_isValid;
}

QString OAIExchangeLanNetworkService::getSubnetV6() const {
    return m_subnet_v6;
}
void OAIExchangeLanNetworkService::setSubnetV6(const QString &subnet_v6) {
    m_subnet_v6 = subnet_v6;
    m_subnet_v6_isSet = true;
}

bool OAIExchangeLanNetworkService::is_subnet_v6_Set() const{
    return m_subnet_v6_isSet;
}

bool OAIExchangeLanNetworkService::is_subnet_v6_Valid() const{
    return m_subnet_v6_isValid;
}

QString OAIExchangeLanNetworkService::getType() const {
    return m_type;
}
void OAIExchangeLanNetworkService::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExchangeLanNetworkService::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExchangeLanNetworkService::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExchangeLanNetworkService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ixfdb_ixid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_area_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsc_required_contact_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peeringdb_ixid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_offering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchangeLanNetworkService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consuming_account_isValid && m_id_isValid && m_managing_account_isValid && m_metro_area_network_isValid && m_name_isValid && m_network_features_isValid && m_state_isValid && m_subnet_v4_isValid && m_subnet_v6_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
