/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPointOfPresencePartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPointOfPresencePartial::OAIPointOfPresencePartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPointOfPresencePartial::OAIPointOfPresencePartial() {
    this->initializeModel();
}

OAIPointOfPresencePartial::~OAIPointOfPresencePartial() {}

void OAIPointOfPresencePartial::initializeModel() {

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_facility_isSet = false;
    m_facility_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metro_area_network_isSet = false;
    m_metro_area_network_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPointOfPresencePartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPointOfPresencePartial::fromJsonObject(QJsonObject json) {

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_facility_isValid = ::OpenAPI::fromJsonValue(m_facility, json[QString("facility")]);
    m_facility_isSet = !json[QString("facility")].isNull() && m_facility_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metro_area_network_isValid = ::OpenAPI::fromJsonValue(m_metro_area_network, json[QString("metro_area_network")]);
    m_metro_area_network_isSet = !json[QString("metro_area_network")].isNull() && m_metro_area_network_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPointOfPresencePartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPointOfPresencePartial::asJsonObject() const {
    QJsonObject obj;
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_facility_isSet) {
        obj.insert(QString("facility"), ::OpenAPI::toJsonValue(m_facility));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metro_area_network_isSet) {
        obj.insert(QString("metro_area_network"), ::OpenAPI::toJsonValue(m_metro_area_network));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIPointOfPresencePartial::getDevices() const {
    return m_devices;
}
void OAIPointOfPresencePartial::setDevices(const QList<QString> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIPointOfPresencePartial::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIPointOfPresencePartial::is_devices_Valid() const{
    return m_devices_isValid;
}

QString OAIPointOfPresencePartial::getFacility() const {
    return m_facility;
}
void OAIPointOfPresencePartial::setFacility(const QString &facility) {
    m_facility = facility;
    m_facility_isSet = true;
}

bool OAIPointOfPresencePartial::is_facility_Set() const{
    return m_facility_isSet;
}

bool OAIPointOfPresencePartial::is_facility_Valid() const{
    return m_facility_isValid;
}

QString OAIPointOfPresencePartial::getId() const {
    return m_id;
}
void OAIPointOfPresencePartial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPointOfPresencePartial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPointOfPresencePartial::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPointOfPresencePartial::getMetroAreaNetwork() const {
    return m_metro_area_network;
}
void OAIPointOfPresencePartial::setMetroAreaNetwork(const QString &metro_area_network) {
    m_metro_area_network = metro_area_network;
    m_metro_area_network_isSet = true;
}

bool OAIPointOfPresencePartial::is_metro_area_network_Set() const{
    return m_metro_area_network_isSet;
}

bool OAIPointOfPresencePartial::is_metro_area_network_Valid() const{
    return m_metro_area_network_isValid;
}

QString OAIPointOfPresencePartial::getName() const {
    return m_name;
}
void OAIPointOfPresencePartial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPointOfPresencePartial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPointOfPresencePartial::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPointOfPresencePartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_facility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_area_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPointOfPresencePartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
