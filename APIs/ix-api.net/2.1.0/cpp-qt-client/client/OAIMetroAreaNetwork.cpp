/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetroAreaNetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetroAreaNetwork::OAIMetroAreaNetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetroAreaNetwork::OAIMetroAreaNetwork() {
    this->initializeModel();
}

OAIMetroAreaNetwork::~OAIMetroAreaNetwork() {}

void OAIMetroAreaNetwork::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_metro_area_isSet = false;
    m_metro_area_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pops_isSet = false;
    m_pops_isValid = false;

    m_service_provider_isSet = false;
    m_service_provider_isValid = false;
}

void OAIMetroAreaNetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetroAreaNetwork::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metro_area_isValid = ::OpenAPI::fromJsonValue(m_metro_area, json[QString("metro_area")]);
    m_metro_area_isSet = !json[QString("metro_area")].isNull() && m_metro_area_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pops_isValid = ::OpenAPI::fromJsonValue(m_pops, json[QString("pops")]);
    m_pops_isSet = !json[QString("pops")].isNull() && m_pops_isValid;

    m_service_provider_isValid = ::OpenAPI::fromJsonValue(m_service_provider, json[QString("service_provider")]);
    m_service_provider_isSet = !json[QString("service_provider")].isNull() && m_service_provider_isValid;
}

QString OAIMetroAreaNetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetroAreaNetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metro_area_isSet) {
        obj.insert(QString("metro_area"), ::OpenAPI::toJsonValue(m_metro_area));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pops.size() > 0) {
        obj.insert(QString("pops"), ::OpenAPI::toJsonValue(m_pops));
    }
    if (m_service_provider_isSet) {
        obj.insert(QString("service_provider"), ::OpenAPI::toJsonValue(m_service_provider));
    }
    return obj;
}

QString OAIMetroAreaNetwork::getId() const {
    return m_id;
}
void OAIMetroAreaNetwork::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMetroAreaNetwork::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMetroAreaNetwork::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMetroAreaNetwork::getMetroArea() const {
    return m_metro_area;
}
void OAIMetroAreaNetwork::setMetroArea(const QString &metro_area) {
    m_metro_area = metro_area;
    m_metro_area_isSet = true;
}

bool OAIMetroAreaNetwork::is_metro_area_Set() const{
    return m_metro_area_isSet;
}

bool OAIMetroAreaNetwork::is_metro_area_Valid() const{
    return m_metro_area_isValid;
}

QString OAIMetroAreaNetwork::getName() const {
    return m_name;
}
void OAIMetroAreaNetwork::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetroAreaNetwork::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetroAreaNetwork::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIMetroAreaNetwork::getPops() const {
    return m_pops;
}
void OAIMetroAreaNetwork::setPops(const QList<QString> &pops) {
    m_pops = pops;
    m_pops_isSet = true;
}

bool OAIMetroAreaNetwork::is_pops_Set() const{
    return m_pops_isSet;
}

bool OAIMetroAreaNetwork::is_pops_Valid() const{
    return m_pops_isValid;
}

QString OAIMetroAreaNetwork::getServiceProvider() const {
    return m_service_provider;
}
void OAIMetroAreaNetwork::setServiceProvider(const QString &service_provider) {
    m_service_provider = service_provider;
    m_service_provider_isSet = true;
}

bool OAIMetroAreaNetwork::is_service_provider_Set() const{
    return m_service_provider_isSet;
}

bool OAIMetroAreaNetwork::is_service_provider_Valid() const{
    return m_service_provider_isValid;
}

bool OAIMetroAreaNetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetroAreaNetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_metro_area_isValid && m_name_isValid && m_pops_isValid && m_service_provider_isValid && true;
}

} // namespace OpenAPI
