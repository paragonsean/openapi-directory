/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMacsApi_H
#define OAI_OAIMacsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccounts_list_400_response.h"
#include "OAIAccounts_list_401_response.h"
#include "OAIAccounts_list_403_response.h"
#include "OAIAccounts_read_404_response.h"
#include "OAIContacts_destroy_400_response.h"
#include "OAIMacAddress.h"
#include "OAIMacAddressRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMacsApi : public QObject {
    Q_OBJECT

public:
    OAIMacsApi(const int timeOut = 0);
    ~OAIMacsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_mac_address_request OAIMacAddressRequest [optional]
    */
    virtual void macsCreate(const ::OpenAPI::OptionalParam<OAIMacAddressRequest> &oai_mac_address_request = ::OpenAPI::OptionalParam<OAIMacAddressRequest>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void macsDestroy(const QString &id);

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  managing_account QString [optional]
    * @param[in]  consuming_account QString [optional]
    * @param[in]  external_ref QString [optional]
    * @param[in]  network_service_config QString [optional]
    * @param[in]  address QString [optional]
    * @param[in]  assigned_at QString [optional]
    * @param[in]  valid_not_before QString [optional]
    * @param[in]  valid_not_after QString [optional]
    */
    virtual void macsList(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &managing_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consuming_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_service_config = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assigned_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &valid_not_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &valid_not_after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void macsRead(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void macsCreateCallback(OAIHttpRequestWorker *worker);
    void macsDestroyCallback(OAIHttpRequestWorker *worker);
    void macsListCallback(OAIHttpRequestWorker *worker);
    void macsReadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void macsCreateSignal(OAIMacAddress summary);
    void macsDestroySignal(OAIMacAddress summary);
    void macsListSignal(QList<OAIMacAddress> summary);
    void macsReadSignal(OAIMacAddress summary);


    void macsCreateSignalFull(OAIHttpRequestWorker *worker, OAIMacAddress summary);
    void macsDestroySignalFull(OAIHttpRequestWorker *worker, OAIMacAddress summary);
    void macsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIMacAddress> summary);
    void macsReadSignalFull(OAIHttpRequestWorker *worker, OAIMacAddress summary);

    Q_DECL_DEPRECATED_X("Use macsCreateSignalError() instead")
    void macsCreateSignalE(OAIMacAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void macsCreateSignalError(OAIMacAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use macsDestroySignalError() instead")
    void macsDestroySignalE(OAIMacAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void macsDestroySignalError(OAIMacAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use macsListSignalError() instead")
    void macsListSignalE(QList<OAIMacAddress> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void macsListSignalError(QList<OAIMacAddress> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use macsReadSignalError() instead")
    void macsReadSignalE(OAIMacAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void macsReadSignalError(OAIMacAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use macsCreateSignalErrorFull() instead")
    void macsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void macsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use macsDestroySignalErrorFull() instead")
    void macsDestroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void macsDestroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use macsListSignalErrorFull() instead")
    void macsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void macsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use macsReadSignalErrorFull() instead")
    void macsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void macsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
