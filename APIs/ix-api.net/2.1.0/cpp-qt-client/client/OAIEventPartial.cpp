/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventPartial::OAIEventPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventPartial::OAIEventPartial() {
    this->initializeModel();
}

OAIEventPartial::~OAIEventPartial() {}

void OAIEventPartial::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventPartial::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventPartial::getAccount() const {
    return m_account;
}
void OAIEventPartial::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIEventPartial::is_account_Set() const{
    return m_account_isSet;
}

bool OAIEventPartial::is_account_Valid() const{
    return m_account_isValid;
}

OAIObject OAIEventPartial::getPayload() const {
    return m_payload;
}
void OAIEventPartial::setPayload(const OAIObject &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIEventPartial::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIEventPartial::is_payload_Valid() const{
    return m_payload_isValid;
}

qint32 OAIEventPartial::getSerial() const {
    return m_serial;
}
void OAIEventPartial::setSerial(const qint32 &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIEventPartial::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIEventPartial::is_serial_Valid() const{
    return m_serial_isValid;
}

QDateTime OAIEventPartial::getTimestamp() const {
    return m_timestamp;
}
void OAIEventPartial::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEventPartial::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEventPartial::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIEventPartial::getType() const {
    return m_type;
}
void OAIEventPartial::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventPartial::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventPartial::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
