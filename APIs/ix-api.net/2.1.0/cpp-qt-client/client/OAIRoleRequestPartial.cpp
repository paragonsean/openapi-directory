/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleRequestPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleRequestPartial::OAIRoleRequestPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleRequestPartial::OAIRoleRequestPartial() {
    this->initializeModel();
}

OAIRoleRequestPartial::~OAIRoleRequestPartial() {}

void OAIRoleRequestPartial::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_fields_isSet = false;
    m_required_fields_isValid = false;
}

void OAIRoleRequestPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleRequestPartial::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_required_fields_isValid = ::OpenAPI::fromJsonValue(m_required_fields, json[QString("required_fields")]);
    m_required_fields_isSet = !json[QString("required_fields")].isNull() && m_required_fields_isValid;
}

QString OAIRoleRequestPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleRequestPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_fields.size() > 0) {
        obj.insert(QString("required_fields"), ::OpenAPI::toJsonValue(m_required_fields));
    }
    return obj;
}

QString OAIRoleRequestPartial::getName() const {
    return m_name;
}
void OAIRoleRequestPartial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoleRequestPartial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoleRequestPartial::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIRoleRequestPartial::getRequiredFields() const {
    return m_required_fields;
}
void OAIRoleRequestPartial::setRequiredFields(const QList<QString> &required_fields) {
    m_required_fields = required_fields;
    m_required_fields_isSet = true;
}

bool OAIRoleRequestPartial::is_required_fields_Set() const{
    return m_required_fields_isSet;
}

bool OAIRoleRequestPartial::is_required_fields_Valid() const{
    return m_required_fields_isValid;
}

bool OAIRoleRequestPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleRequestPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
