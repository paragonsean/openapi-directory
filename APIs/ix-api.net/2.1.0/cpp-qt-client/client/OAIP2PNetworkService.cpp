/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIP2PNetworkService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIP2PNetworkService::OAIP2PNetworkService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIP2PNetworkService::OAIP2PNetworkService() {
    this->initializeModel();
}

OAIP2PNetworkService::~OAIP2PNetworkService() {}

void OAIP2PNetworkService::initializeModel() {

    m_billing_account_isSet = false;
    m_billing_account_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_charged_until_isSet = false;
    m_charged_until_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_contract_ref_isSet = false;
    m_contract_ref_isValid = false;

    m_decommission_at_isSet = false;
    m_decommission_at_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_joining_member_account_isSet = false;
    m_joining_member_account_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_nsc_required_contact_roles_isSet = false;
    m_nsc_required_contact_roles_isValid = false;

    m_product_offering_isSet = false;
    m_product_offering_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIP2PNetworkService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIP2PNetworkService::fromJsonObject(QJsonObject json) {

    m_billing_account_isValid = ::OpenAPI::fromJsonValue(m_billing_account, json[QString("billing_account")]);
    m_billing_account_isSet = !json[QString("billing_account")].isNull() && m_billing_account_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_charged_until_isValid = ::OpenAPI::fromJsonValue(m_charged_until, json[QString("charged_until")]);
    m_charged_until_isSet = !json[QString("charged_until")].isNull() && m_charged_until_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_contract_ref_isValid = ::OpenAPI::fromJsonValue(m_contract_ref, json[QString("contract_ref")]);
    m_contract_ref_isSet = !json[QString("contract_ref")].isNull() && m_contract_ref_isValid;

    m_decommission_at_isValid = ::OpenAPI::fromJsonValue(m_decommission_at, json[QString("decommission_at")]);
    m_decommission_at_isSet = !json[QString("decommission_at")].isNull() && m_decommission_at_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_joining_member_account_isValid = ::OpenAPI::fromJsonValue(m_joining_member_account, json[QString("joining_member_account")]);
    m_joining_member_account_isSet = !json[QString("joining_member_account")].isNull() && m_joining_member_account_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_nsc_required_contact_roles_isValid = ::OpenAPI::fromJsonValue(m_nsc_required_contact_roles, json[QString("nsc_required_contact_roles")]);
    m_nsc_required_contact_roles_isSet = !json[QString("nsc_required_contact_roles")].isNull() && m_nsc_required_contact_roles_isValid;

    m_product_offering_isValid = ::OpenAPI::fromJsonValue(m_product_offering, json[QString("product_offering")]);
    m_product_offering_isSet = !json[QString("product_offering")].isNull() && m_product_offering_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIP2PNetworkService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIP2PNetworkService::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_account_isSet) {
        obj.insert(QString("billing_account"), ::OpenAPI::toJsonValue(m_billing_account));
    }
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_charged_until_isSet) {
        obj.insert(QString("charged_until"), ::OpenAPI::toJsonValue(m_charged_until));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_contract_ref_isSet) {
        obj.insert(QString("contract_ref"), ::OpenAPI::toJsonValue(m_contract_ref));
    }
    if (m_decommission_at_isSet) {
        obj.insert(QString("decommission_at"), ::OpenAPI::toJsonValue(m_decommission_at));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_joining_member_account_isSet) {
        obj.insert(QString("joining_member_account"), ::OpenAPI::toJsonValue(m_joining_member_account));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_nsc_required_contact_roles.size() > 0) {
        obj.insert(QString("nsc_required_contact_roles"), ::OpenAPI::toJsonValue(m_nsc_required_contact_roles));
    }
    if (m_product_offering_isSet) {
        obj.insert(QString("product_offering"), ::OpenAPI::toJsonValue(m_product_offering));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIP2PNetworkService::getBillingAccount() const {
    return m_billing_account;
}
void OAIP2PNetworkService::setBillingAccount(const QString &billing_account) {
    m_billing_account = billing_account;
    m_billing_account_isSet = true;
}

bool OAIP2PNetworkService::is_billing_account_Set() const{
    return m_billing_account_isSet;
}

bool OAIP2PNetworkService::is_billing_account_Valid() const{
    return m_billing_account_isValid;
}

qint32 OAIP2PNetworkService::getCapacity() const {
    return m_capacity;
}
void OAIP2PNetworkService::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIP2PNetworkService::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIP2PNetworkService::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QDate OAIP2PNetworkService::getChargedUntil() const {
    return m_charged_until;
}
void OAIP2PNetworkService::setChargedUntil(const QDate &charged_until) {
    m_charged_until = charged_until;
    m_charged_until_isSet = true;
}

bool OAIP2PNetworkService::is_charged_until_Set() const{
    return m_charged_until_isSet;
}

bool OAIP2PNetworkService::is_charged_until_Valid() const{
    return m_charged_until_isValid;
}

QString OAIP2PNetworkService::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIP2PNetworkService::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIP2PNetworkService::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIP2PNetworkService::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIP2PNetworkService::getContractRef() const {
    return m_contract_ref;
}
void OAIP2PNetworkService::setContractRef(const QString &contract_ref) {
    m_contract_ref = contract_ref;
    m_contract_ref_isSet = true;
}

bool OAIP2PNetworkService::is_contract_ref_Set() const{
    return m_contract_ref_isSet;
}

bool OAIP2PNetworkService::is_contract_ref_Valid() const{
    return m_contract_ref_isValid;
}

QDate OAIP2PNetworkService::getDecommissionAt() const {
    return m_decommission_at;
}
void OAIP2PNetworkService::setDecommissionAt(const QDate &decommission_at) {
    m_decommission_at = decommission_at;
    m_decommission_at_isSet = true;
}

bool OAIP2PNetworkService::is_decommission_at_Set() const{
    return m_decommission_at_isSet;
}

bool OAIP2PNetworkService::is_decommission_at_Valid() const{
    return m_decommission_at_isValid;
}

QString OAIP2PNetworkService::getExternalRef() const {
    return m_external_ref;
}
void OAIP2PNetworkService::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIP2PNetworkService::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIP2PNetworkService::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIP2PNetworkService::getId() const {
    return m_id;
}
void OAIP2PNetworkService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIP2PNetworkService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIP2PNetworkService::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIP2PNetworkService::getJoiningMemberAccount() const {
    return m_joining_member_account;
}
void OAIP2PNetworkService::setJoiningMemberAccount(const QString &joining_member_account) {
    m_joining_member_account = joining_member_account;
    m_joining_member_account_isSet = true;
}

bool OAIP2PNetworkService::is_joining_member_account_Set() const{
    return m_joining_member_account_isSet;
}

bool OAIP2PNetworkService::is_joining_member_account_Valid() const{
    return m_joining_member_account_isValid;
}

QString OAIP2PNetworkService::getManagingAccount() const {
    return m_managing_account;
}
void OAIP2PNetworkService::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIP2PNetworkService::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIP2PNetworkService::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QList<QString> OAIP2PNetworkService::getNscRequiredContactRoles() const {
    return m_nsc_required_contact_roles;
}
void OAIP2PNetworkService::setNscRequiredContactRoles(const QList<QString> &nsc_required_contact_roles) {
    m_nsc_required_contact_roles = nsc_required_contact_roles;
    m_nsc_required_contact_roles_isSet = true;
}

bool OAIP2PNetworkService::is_nsc_required_contact_roles_Set() const{
    return m_nsc_required_contact_roles_isSet;
}

bool OAIP2PNetworkService::is_nsc_required_contact_roles_Valid() const{
    return m_nsc_required_contact_roles_isValid;
}

QString OAIP2PNetworkService::getProductOffering() const {
    return m_product_offering;
}
void OAIP2PNetworkService::setProductOffering(const QString &product_offering) {
    m_product_offering = product_offering;
    m_product_offering_isSet = true;
}

bool OAIP2PNetworkService::is_product_offering_Set() const{
    return m_product_offering_isSet;
}

bool OAIP2PNetworkService::is_product_offering_Valid() const{
    return m_product_offering_isValid;
}

QString OAIP2PNetworkService::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAIP2PNetworkService::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAIP2PNetworkService::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAIP2PNetworkService::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

QString OAIP2PNetworkService::getState() const {
    return m_state;
}
void OAIP2PNetworkService::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIP2PNetworkService::is_state_Set() const{
    return m_state_isSet;
}

bool OAIP2PNetworkService::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIStatus> OAIP2PNetworkService::getStatus() const {
    return m_status;
}
void OAIP2PNetworkService::setStatus(const QList<OAIStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIP2PNetworkService::is_status_Set() const{
    return m_status_isSet;
}

bool OAIP2PNetworkService::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIP2PNetworkService::getType() const {
    return m_type;
}
void OAIP2PNetworkService::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIP2PNetworkService::is_type_Set() const{
    return m_type_isSet;
}

bool OAIP2PNetworkService::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIP2PNetworkService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charged_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joining_member_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsc_required_contact_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_offering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIP2PNetworkService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_billing_account_isValid && m_consuming_account_isValid && m_id_isValid && m_joining_member_account_isValid && m_managing_account_isValid && m_product_offering_isValid && m_state_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
