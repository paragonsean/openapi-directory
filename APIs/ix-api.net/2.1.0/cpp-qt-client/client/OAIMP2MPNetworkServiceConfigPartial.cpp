/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMP2MPNetworkServiceConfigPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMP2MPNetworkServiceConfigPartial::OAIMP2MPNetworkServiceConfigPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMP2MPNetworkServiceConfigPartial::OAIMP2MPNetworkServiceConfigPartial() {
    this->initializeModel();
}

OAIMP2MPNetworkServiceConfigPartial::~OAIMP2MPNetworkServiceConfigPartial() {}

void OAIMP2MPNetworkServiceConfigPartial::initializeModel() {

    m_billing_account_isSet = false;
    m_billing_account_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_charged_until_isSet = false;
    m_charged_until_isValid = false;

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_contract_ref_isSet = false;
    m_contract_ref_isValid = false;

    m_decommission_at_isSet = false;
    m_decommission_at_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_macs_isSet = false;
    m_macs_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_network_feature_configs_isSet = false;
    m_network_feature_configs_isValid = false;

    m_network_service_isSet = false;
    m_network_service_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_config_isSet = false;
    m_vlan_config_isValid = false;
}

void OAIMP2MPNetworkServiceConfigPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMP2MPNetworkServiceConfigPartial::fromJsonObject(QJsonObject json) {

    m_billing_account_isValid = ::OpenAPI::fromJsonValue(m_billing_account, json[QString("billing_account")]);
    m_billing_account_isSet = !json[QString("billing_account")].isNull() && m_billing_account_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_charged_until_isValid = ::OpenAPI::fromJsonValue(m_charged_until, json[QString("charged_until")]);
    m_charged_until_isSet = !json[QString("charged_until")].isNull() && m_charged_until_isValid;

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_contract_ref_isValid = ::OpenAPI::fromJsonValue(m_contract_ref, json[QString("contract_ref")]);
    m_contract_ref_isSet = !json[QString("contract_ref")].isNull() && m_contract_ref_isValid;

    m_decommission_at_isValid = ::OpenAPI::fromJsonValue(m_decommission_at, json[QString("decommission_at")]);
    m_decommission_at_isSet = !json[QString("decommission_at")].isNull() && m_decommission_at_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_macs_isValid = ::OpenAPI::fromJsonValue(m_macs, json[QString("macs")]);
    m_macs_isSet = !json[QString("macs")].isNull() && m_macs_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_network_feature_configs_isValid = ::OpenAPI::fromJsonValue(m_network_feature_configs, json[QString("network_feature_configs")]);
    m_network_feature_configs_isSet = !json[QString("network_feature_configs")].isNull() && m_network_feature_configs_isValid;

    m_network_service_isValid = ::OpenAPI::fromJsonValue(m_network_service, json[QString("network_service")]);
    m_network_service_isSet = !json[QString("network_service")].isNull() && m_network_service_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_role_assignments_isValid = ::OpenAPI::fromJsonValue(m_role_assignments, json[QString("role_assignments")]);
    m_role_assignments_isSet = !json[QString("role_assignments")].isNull() && m_role_assignments_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_config_isValid = ::OpenAPI::fromJsonValue(m_vlan_config, json[QString("vlan_config")]);
    m_vlan_config_isSet = !json[QString("vlan_config")].isNull() && m_vlan_config_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMP2MPNetworkServiceConfigPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_account_isSet) {
        obj.insert(QString("billing_account"), ::OpenAPI::toJsonValue(m_billing_account));
    }
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_charged_until_isSet) {
        obj.insert(QString("charged_until"), ::OpenAPI::toJsonValue(m_charged_until));
    }
    if (m_connection_isSet) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_contract_ref_isSet) {
        obj.insert(QString("contract_ref"), ::OpenAPI::toJsonValue(m_contract_ref));
    }
    if (m_decommission_at_isSet) {
        obj.insert(QString("decommission_at"), ::OpenAPI::toJsonValue(m_decommission_at));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_macs.size() > 0) {
        obj.insert(QString("macs"), ::OpenAPI::toJsonValue(m_macs));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_network_feature_configs.size() > 0) {
        obj.insert(QString("network_feature_configs"), ::OpenAPI::toJsonValue(m_network_feature_configs));
    }
    if (m_network_service_isSet) {
        obj.insert(QString("network_service"), ::OpenAPI::toJsonValue(m_network_service));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_role_assignments.size() > 0) {
        obj.insert(QString("role_assignments"), ::OpenAPI::toJsonValue(m_role_assignments));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_config.isSet()) {
        obj.insert(QString("vlan_config"), ::OpenAPI::toJsonValue(m_vlan_config));
    }
    return obj;
}

QString OAIMP2MPNetworkServiceConfigPartial::getBillingAccount() const {
    return m_billing_account;
}
void OAIMP2MPNetworkServiceConfigPartial::setBillingAccount(const QString &billing_account) {
    m_billing_account = billing_account;
    m_billing_account_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_billing_account_Set() const{
    return m_billing_account_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_billing_account_Valid() const{
    return m_billing_account_isValid;
}

qint32 OAIMP2MPNetworkServiceConfigPartial::getCapacity() const {
    return m_capacity;
}
void OAIMP2MPNetworkServiceConfigPartial::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QDate OAIMP2MPNetworkServiceConfigPartial::getChargedUntil() const {
    return m_charged_until;
}
void OAIMP2MPNetworkServiceConfigPartial::setChargedUntil(const QDate &charged_until) {
    m_charged_until = charged_until;
    m_charged_until_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_charged_until_Set() const{
    return m_charged_until_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_charged_until_Valid() const{
    return m_charged_until_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getConnection() const {
    return m_connection;
}
void OAIMP2MPNetworkServiceConfigPartial::setConnection(const QString &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIMP2MPNetworkServiceConfigPartial::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getContractRef() const {
    return m_contract_ref;
}
void OAIMP2MPNetworkServiceConfigPartial::setContractRef(const QString &contract_ref) {
    m_contract_ref = contract_ref;
    m_contract_ref_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_contract_ref_Set() const{
    return m_contract_ref_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_contract_ref_Valid() const{
    return m_contract_ref_isValid;
}

QDate OAIMP2MPNetworkServiceConfigPartial::getDecommissionAt() const {
    return m_decommission_at;
}
void OAIMP2MPNetworkServiceConfigPartial::setDecommissionAt(const QDate &decommission_at) {
    m_decommission_at = decommission_at;
    m_decommission_at_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_decommission_at_Set() const{
    return m_decommission_at_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_decommission_at_Valid() const{
    return m_decommission_at_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getExternalRef() const {
    return m_external_ref;
}
void OAIMP2MPNetworkServiceConfigPartial::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getId() const {
    return m_id;
}
void OAIMP2MPNetworkServiceConfigPartial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIMP2MPNetworkServiceConfigPartial::getMacs() const {
    return m_macs;
}
void OAIMP2MPNetworkServiceConfigPartial::setMacs(const QList<QString> &macs) {
    m_macs = macs;
    m_macs_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_macs_Set() const{
    return m_macs_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_macs_Valid() const{
    return m_macs_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getManagingAccount() const {
    return m_managing_account;
}
void OAIMP2MPNetworkServiceConfigPartial::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QList<QString> OAIMP2MPNetworkServiceConfigPartial::getNetworkFeatureConfigs() const {
    return m_network_feature_configs;
}
void OAIMP2MPNetworkServiceConfigPartial::setNetworkFeatureConfigs(const QList<QString> &network_feature_configs) {
    m_network_feature_configs = network_feature_configs;
    m_network_feature_configs_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_network_feature_configs_Set() const{
    return m_network_feature_configs_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_network_feature_configs_Valid() const{
    return m_network_feature_configs_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getNetworkService() const {
    return m_network_service;
}
void OAIMP2MPNetworkServiceConfigPartial::setNetworkService(const QString &network_service) {
    m_network_service = network_service;
    m_network_service_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_network_service_Set() const{
    return m_network_service_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_network_service_Valid() const{
    return m_network_service_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAIMP2MPNetworkServiceConfigPartial::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

QList<QString> OAIMP2MPNetworkServiceConfigPartial::getRoleAssignments() const {
    return m_role_assignments;
}
void OAIMP2MPNetworkServiceConfigPartial::setRoleAssignments(const QList<QString> &role_assignments) {
    m_role_assignments = role_assignments;
    m_role_assignments_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getState() const {
    return m_state;
}
void OAIMP2MPNetworkServiceConfigPartial::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIStatus> OAIMP2MPNetworkServiceConfigPartial::getStatus() const {
    return m_status;
}
void OAIMP2MPNetworkServiceConfigPartial::setStatus(const QList<OAIStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMP2MPNetworkServiceConfigPartial::getType() const {
    return m_type;
}
void OAIMP2MPNetworkServiceConfigPartial::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_type_Valid() const{
    return m_type_isValid;
}

OAIVlanConfig OAIMP2MPNetworkServiceConfigPartial::getVlanConfig() const {
    return m_vlan_config;
}
void OAIMP2MPNetworkServiceConfigPartial::setVlanConfig(const OAIVlanConfig &vlan_config) {
    m_vlan_config = vlan_config;
    m_vlan_config_isSet = true;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_vlan_config_Set() const{
    return m_vlan_config_isSet;
}

bool OAIMP2MPNetworkServiceConfigPartial::is_vlan_config_Valid() const{
    return m_vlan_config_isValid;
}

bool OAIMP2MPNetworkServiceConfigPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charged_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_macs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_feature_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMP2MPNetworkServiceConfigPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
