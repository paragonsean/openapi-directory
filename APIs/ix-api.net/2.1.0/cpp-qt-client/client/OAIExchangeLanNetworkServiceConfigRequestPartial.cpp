/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchangeLanNetworkServiceConfigRequestPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchangeLanNetworkServiceConfigRequestPartial::OAIExchangeLanNetworkServiceConfigRequestPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchangeLanNetworkServiceConfigRequestPartial::OAIExchangeLanNetworkServiceConfigRequestPartial() {
    this->initializeModel();
}

OAIExchangeLanNetworkServiceConfigRequestPartial::~OAIExchangeLanNetworkServiceConfigRequestPartial() {}

void OAIExchangeLanNetworkServiceConfigRequestPartial::initializeModel() {

    m_asns_isSet = false;
    m_asns_isValid = false;

    m_billing_account_isSet = false;
    m_billing_account_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_contract_ref_isSet = false;
    m_contract_ref_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_ips_isSet = false;
    m_ips_isValid = false;

    m_listed_isSet = false;
    m_listed_isValid = false;

    m_macs_isSet = false;
    m_macs_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_network_feature_configs_isSet = false;
    m_network_feature_configs_isValid = false;

    m_network_service_isSet = false;
    m_network_service_isValid = false;

    m_product_offering_isSet = false;
    m_product_offering_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_config_isSet = false;
    m_vlan_config_isValid = false;
}

void OAIExchangeLanNetworkServiceConfigRequestPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchangeLanNetworkServiceConfigRequestPartial::fromJsonObject(QJsonObject json) {

    m_asns_isValid = ::OpenAPI::fromJsonValue(m_asns, json[QString("asns")]);
    m_asns_isSet = !json[QString("asns")].isNull() && m_asns_isValid;

    m_billing_account_isValid = ::OpenAPI::fromJsonValue(m_billing_account, json[QString("billing_account")]);
    m_billing_account_isSet = !json[QString("billing_account")].isNull() && m_billing_account_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_contract_ref_isValid = ::OpenAPI::fromJsonValue(m_contract_ref, json[QString("contract_ref")]);
    m_contract_ref_isSet = !json[QString("contract_ref")].isNull() && m_contract_ref_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_ips_isValid = ::OpenAPI::fromJsonValue(m_ips, json[QString("ips")]);
    m_ips_isSet = !json[QString("ips")].isNull() && m_ips_isValid;

    m_listed_isValid = ::OpenAPI::fromJsonValue(m_listed, json[QString("listed")]);
    m_listed_isSet = !json[QString("listed")].isNull() && m_listed_isValid;

    m_macs_isValid = ::OpenAPI::fromJsonValue(m_macs, json[QString("macs")]);
    m_macs_isSet = !json[QString("macs")].isNull() && m_macs_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_network_feature_configs_isValid = ::OpenAPI::fromJsonValue(m_network_feature_configs, json[QString("network_feature_configs")]);
    m_network_feature_configs_isSet = !json[QString("network_feature_configs")].isNull() && m_network_feature_configs_isValid;

    m_network_service_isValid = ::OpenAPI::fromJsonValue(m_network_service, json[QString("network_service")]);
    m_network_service_isSet = !json[QString("network_service")].isNull() && m_network_service_isValid;

    m_product_offering_isValid = ::OpenAPI::fromJsonValue(m_product_offering, json[QString("product_offering")]);
    m_product_offering_isSet = !json[QString("product_offering")].isNull() && m_product_offering_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_role_assignments_isValid = ::OpenAPI::fromJsonValue(m_role_assignments, json[QString("role_assignments")]);
    m_role_assignments_isSet = !json[QString("role_assignments")].isNull() && m_role_assignments_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_config_isValid = ::OpenAPI::fromJsonValue(m_vlan_config, json[QString("vlan_config")]);
    m_vlan_config_isSet = !json[QString("vlan_config")].isNull() && m_vlan_config_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchangeLanNetworkServiceConfigRequestPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_asns.size() > 0) {
        obj.insert(QString("asns"), ::OpenAPI::toJsonValue(m_asns));
    }
    if (m_billing_account_isSet) {
        obj.insert(QString("billing_account"), ::OpenAPI::toJsonValue(m_billing_account));
    }
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_connection_isSet) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_contract_ref_isSet) {
        obj.insert(QString("contract_ref"), ::OpenAPI::toJsonValue(m_contract_ref));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_ips.size() > 0) {
        obj.insert(QString("ips"), ::OpenAPI::toJsonValue(m_ips));
    }
    if (m_listed_isSet) {
        obj.insert(QString("listed"), ::OpenAPI::toJsonValue(m_listed));
    }
    if (m_macs.size() > 0) {
        obj.insert(QString("macs"), ::OpenAPI::toJsonValue(m_macs));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_network_feature_configs.size() > 0) {
        obj.insert(QString("network_feature_configs"), ::OpenAPI::toJsonValue(m_network_feature_configs));
    }
    if (m_network_service_isSet) {
        obj.insert(QString("network_service"), ::OpenAPI::toJsonValue(m_network_service));
    }
    if (m_product_offering_isSet) {
        obj.insert(QString("product_offering"), ::OpenAPI::toJsonValue(m_product_offering));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_role_assignments.size() > 0) {
        obj.insert(QString("role_assignments"), ::OpenAPI::toJsonValue(m_role_assignments));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_config.isSet()) {
        obj.insert(QString("vlan_config"), ::OpenAPI::toJsonValue(m_vlan_config));
    }
    return obj;
}

QList<qint64> OAIExchangeLanNetworkServiceConfigRequestPartial::getAsns() const {
    return m_asns;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setAsns(const QList<qint64> &asns) {
    m_asns = asns;
    m_asns_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_asns_Set() const{
    return m_asns_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_asns_Valid() const{
    return m_asns_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getBillingAccount() const {
    return m_billing_account;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setBillingAccount(const QString &billing_account) {
    m_billing_account = billing_account;
    m_billing_account_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_billing_account_Set() const{
    return m_billing_account_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_billing_account_Valid() const{
    return m_billing_account_isValid;
}

qint32 OAIExchangeLanNetworkServiceConfigRequestPartial::getCapacity() const {
    return m_capacity;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getConnection() const {
    return m_connection;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setConnection(const QString &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getContractRef() const {
    return m_contract_ref;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setContractRef(const QString &contract_ref) {
    m_contract_ref = contract_ref;
    m_contract_ref_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_contract_ref_Set() const{
    return m_contract_ref_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_contract_ref_Valid() const{
    return m_contract_ref_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getExternalRef() const {
    return m_external_ref;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QList<QString> OAIExchangeLanNetworkServiceConfigRequestPartial::getIps() const {
    return m_ips;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setIps(const QList<QString> &ips) {
    m_ips = ips;
    m_ips_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_ips_Set() const{
    return m_ips_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_ips_Valid() const{
    return m_ips_isValid;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::isListed() const {
    return m_listed;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setListed(const bool &listed) {
    m_listed = listed;
    m_listed_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_listed_Set() const{
    return m_listed_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_listed_Valid() const{
    return m_listed_isValid;
}

QList<QString> OAIExchangeLanNetworkServiceConfigRequestPartial::getMacs() const {
    return m_macs;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setMacs(const QList<QString> &macs) {
    m_macs = macs;
    m_macs_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_macs_Set() const{
    return m_macs_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_macs_Valid() const{
    return m_macs_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getManagingAccount() const {
    return m_managing_account;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QList<QString> OAIExchangeLanNetworkServiceConfigRequestPartial::getNetworkFeatureConfigs() const {
    return m_network_feature_configs;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setNetworkFeatureConfigs(const QList<QString> &network_feature_configs) {
    m_network_feature_configs = network_feature_configs;
    m_network_feature_configs_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_network_feature_configs_Set() const{
    return m_network_feature_configs_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_network_feature_configs_Valid() const{
    return m_network_feature_configs_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getNetworkService() const {
    return m_network_service;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setNetworkService(const QString &network_service) {
    m_network_service = network_service;
    m_network_service_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_network_service_Set() const{
    return m_network_service_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_network_service_Valid() const{
    return m_network_service_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getProductOffering() const {
    return m_product_offering;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setProductOffering(const QString &product_offering) {
    m_product_offering = product_offering;
    m_product_offering_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_product_offering_Set() const{
    return m_product_offering_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_product_offering_Valid() const{
    return m_product_offering_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

QList<QString> OAIExchangeLanNetworkServiceConfigRequestPartial::getRoleAssignments() const {
    return m_role_assignments;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setRoleAssignments(const QList<QString> &role_assignments) {
    m_role_assignments = role_assignments;
    m_role_assignments_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

QString OAIExchangeLanNetworkServiceConfigRequestPartial::getType() const {
    return m_type;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_type_Valid() const{
    return m_type_isValid;
}

OAIVlanConfig OAIExchangeLanNetworkServiceConfigRequestPartial::getVlanConfig() const {
    return m_vlan_config;
}
void OAIExchangeLanNetworkServiceConfigRequestPartial::setVlanConfig(const OAIVlanConfig &vlan_config) {
    m_vlan_config = vlan_config;
    m_vlan_config_isSet = true;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_vlan_config_Set() const{
    return m_vlan_config_isSet;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::is_vlan_config_Valid() const{
    return m_vlan_config_isValid;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_listed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_macs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_feature_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_offering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchangeLanNetworkServiceConfigRequestPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
