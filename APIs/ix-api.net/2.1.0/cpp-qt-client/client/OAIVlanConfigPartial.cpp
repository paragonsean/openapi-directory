/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVlanConfigPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVlanConfigPartial::OAIVlanConfigPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVlanConfigPartial::OAIVlanConfigPartial() {
    this->initializeModel();
}

OAIVlanConfigPartial::~OAIVlanConfigPartial() {}

void OAIVlanConfigPartial::initializeModel() {

    m_vlan_isSet = false;
    m_vlan_isValid = false;

    m_vlan_ethertype_isSet = false;
    m_vlan_ethertype_isValid = false;

    m_vlan_type_isSet = false;
    m_vlan_type_isValid = false;

    m_inner_vlan_isSet = false;
    m_inner_vlan_isValid = false;

    m_outer_vlan_isSet = false;
    m_outer_vlan_isValid = false;

    m_outer_vlan_ethertype_isSet = false;
    m_outer_vlan_ethertype_isValid = false;
}

void OAIVlanConfigPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVlanConfigPartial::fromJsonObject(QJsonObject json) {

    m_vlan_isValid = ::OpenAPI::fromJsonValue(m_vlan, json[QString("vlan")]);
    m_vlan_isSet = !json[QString("vlan")].isNull() && m_vlan_isValid;

    m_vlan_ethertype_isValid = ::OpenAPI::fromJsonValue(m_vlan_ethertype, json[QString("vlan_ethertype")]);
    m_vlan_ethertype_isSet = !json[QString("vlan_ethertype")].isNull() && m_vlan_ethertype_isValid;

    m_vlan_type_isValid = ::OpenAPI::fromJsonValue(m_vlan_type, json[QString("vlan_type")]);
    m_vlan_type_isSet = !json[QString("vlan_type")].isNull() && m_vlan_type_isValid;

    m_inner_vlan_isValid = ::OpenAPI::fromJsonValue(m_inner_vlan, json[QString("inner_vlan")]);
    m_inner_vlan_isSet = !json[QString("inner_vlan")].isNull() && m_inner_vlan_isValid;

    m_outer_vlan_isValid = ::OpenAPI::fromJsonValue(m_outer_vlan, json[QString("outer_vlan")]);
    m_outer_vlan_isSet = !json[QString("outer_vlan")].isNull() && m_outer_vlan_isValid;

    m_outer_vlan_ethertype_isValid = ::OpenAPI::fromJsonValue(m_outer_vlan_ethertype, json[QString("outer_vlan_ethertype")]);
    m_outer_vlan_ethertype_isSet = !json[QString("outer_vlan_ethertype")].isNull() && m_outer_vlan_ethertype_isValid;
}

QString OAIVlanConfigPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVlanConfigPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_vlan_isSet) {
        obj.insert(QString("vlan"), ::OpenAPI::toJsonValue(m_vlan));
    }
    if (m_vlan_ethertype_isSet) {
        obj.insert(QString("vlan_ethertype"), ::OpenAPI::toJsonValue(m_vlan_ethertype));
    }
    if (m_vlan_type_isSet) {
        obj.insert(QString("vlan_type"), ::OpenAPI::toJsonValue(m_vlan_type));
    }
    if (m_inner_vlan_isSet) {
        obj.insert(QString("inner_vlan"), ::OpenAPI::toJsonValue(m_inner_vlan));
    }
    if (m_outer_vlan_isSet) {
        obj.insert(QString("outer_vlan"), ::OpenAPI::toJsonValue(m_outer_vlan));
    }
    if (m_outer_vlan_ethertype_isSet) {
        obj.insert(QString("outer_vlan_ethertype"), ::OpenAPI::toJsonValue(m_outer_vlan_ethertype));
    }
    return obj;
}

qint32 OAIVlanConfigPartial::getVlan() const {
    return m_vlan;
}
void OAIVlanConfigPartial::setVlan(const qint32 &vlan) {
    m_vlan = vlan;
    m_vlan_isSet = true;
}

bool OAIVlanConfigPartial::is_vlan_Set() const{
    return m_vlan_isSet;
}

bool OAIVlanConfigPartial::is_vlan_Valid() const{
    return m_vlan_isValid;
}

QString OAIVlanConfigPartial::getVlanEthertype() const {
    return m_vlan_ethertype;
}
void OAIVlanConfigPartial::setVlanEthertype(const QString &vlan_ethertype) {
    m_vlan_ethertype = vlan_ethertype;
    m_vlan_ethertype_isSet = true;
}

bool OAIVlanConfigPartial::is_vlan_ethertype_Set() const{
    return m_vlan_ethertype_isSet;
}

bool OAIVlanConfigPartial::is_vlan_ethertype_Valid() const{
    return m_vlan_ethertype_isValid;
}

QString OAIVlanConfigPartial::getVlanType() const {
    return m_vlan_type;
}
void OAIVlanConfigPartial::setVlanType(const QString &vlan_type) {
    m_vlan_type = vlan_type;
    m_vlan_type_isSet = true;
}

bool OAIVlanConfigPartial::is_vlan_type_Set() const{
    return m_vlan_type_isSet;
}

bool OAIVlanConfigPartial::is_vlan_type_Valid() const{
    return m_vlan_type_isValid;
}

qint32 OAIVlanConfigPartial::getInnerVlan() const {
    return m_inner_vlan;
}
void OAIVlanConfigPartial::setInnerVlan(const qint32 &inner_vlan) {
    m_inner_vlan = inner_vlan;
    m_inner_vlan_isSet = true;
}

bool OAIVlanConfigPartial::is_inner_vlan_Set() const{
    return m_inner_vlan_isSet;
}

bool OAIVlanConfigPartial::is_inner_vlan_Valid() const{
    return m_inner_vlan_isValid;
}

qint32 OAIVlanConfigPartial::getOuterVlan() const {
    return m_outer_vlan;
}
void OAIVlanConfigPartial::setOuterVlan(const qint32 &outer_vlan) {
    m_outer_vlan = outer_vlan;
    m_outer_vlan_isSet = true;
}

bool OAIVlanConfigPartial::is_outer_vlan_Set() const{
    return m_outer_vlan_isSet;
}

bool OAIVlanConfigPartial::is_outer_vlan_Valid() const{
    return m_outer_vlan_isValid;
}

QString OAIVlanConfigPartial::getOuterVlanEthertype() const {
    return m_outer_vlan_ethertype;
}
void OAIVlanConfigPartial::setOuterVlanEthertype(const QString &outer_vlan_ethertype) {
    m_outer_vlan_ethertype = outer_vlan_ethertype;
    m_outer_vlan_ethertype_isSet = true;
}

bool OAIVlanConfigPartial::is_outer_vlan_ethertype_Set() const{
    return m_outer_vlan_ethertype_isSet;
}

bool OAIVlanConfigPartial::is_outer_vlan_ethertype_Valid() const{
    return m_outer_vlan_ethertype_isValid;
}

bool OAIVlanConfigPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_ethertype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_vlan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_vlan_ethertype_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVlanConfigPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_vlan_type_isValid && true;
}

} // namespace OpenAPI
