/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceConnection::OAIDeviceConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceConnection::OAIDeviceConnection() {
    this->initializeModel();
}

OAIDeviceConnection::~OAIDeviceConnection() {}

void OAIDeviceConnection::initializeModel() {

    m_capacity_max_isSet = false;
    m_capacity_max_isValid = false;

    m_connected_device_isSet = false;
    m_connected_device_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIDeviceConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceConnection::fromJsonObject(QJsonObject json) {

    m_capacity_max_isValid = ::OpenAPI::fromJsonValue(m_capacity_max, json[QString("capacity_max")]);
    m_capacity_max_isSet = !json[QString("capacity_max")].isNull() && m_capacity_max_isValid;

    m_connected_device_isValid = ::OpenAPI::fromJsonValue(m_connected_device, json[QString("connected_device")]);
    m_connected_device_isSet = !json[QString("connected_device")].isNull() && m_connected_device_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIDeviceConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_max_isSet) {
        obj.insert(QString("capacity_max"), ::OpenAPI::toJsonValue(m_capacity_max));
    }
    if (m_connected_device_isSet) {
        obj.insert(QString("connected_device"), ::OpenAPI::toJsonValue(m_connected_device));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

qint32 OAIDeviceConnection::getCapacityMax() const {
    return m_capacity_max;
}
void OAIDeviceConnection::setCapacityMax(const qint32 &capacity_max) {
    m_capacity_max = capacity_max;
    m_capacity_max_isSet = true;
}

bool OAIDeviceConnection::is_capacity_max_Set() const{
    return m_capacity_max_isSet;
}

bool OAIDeviceConnection::is_capacity_max_Valid() const{
    return m_capacity_max_isValid;
}

QString OAIDeviceConnection::getConnectedDevice() const {
    return m_connected_device;
}
void OAIDeviceConnection::setConnectedDevice(const QString &connected_device) {
    m_connected_device = connected_device;
    m_connected_device_isSet = true;
}

bool OAIDeviceConnection::is_connected_device_Set() const{
    return m_connected_device_isSet;
}

bool OAIDeviceConnection::is_connected_device_Valid() const{
    return m_connected_device_isValid;
}

QString OAIDeviceConnection::getDevice() const {
    return m_device;
}
void OAIDeviceConnection::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIDeviceConnection::is_device_Set() const{
    return m_device_isSet;
}

bool OAIDeviceConnection::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIDeviceConnection::getId() const {
    return m_id;
}
void OAIDeviceConnection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceConnection::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceConnection::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDeviceConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connected_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capacity_max_isValid && m_connected_device_isValid && m_device_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
