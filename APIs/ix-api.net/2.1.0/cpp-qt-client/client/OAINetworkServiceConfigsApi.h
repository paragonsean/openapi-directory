/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworkServiceConfigsApi_H
#define OAI_OAINetworkServiceConfigsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccounts_list_400_response.h"
#include "OAIAccounts_list_401_response.h"
#include "OAIAccounts_list_403_response.h"
#include "OAIAccounts_read_404_response.h"
#include "OAICancellationPolicy.h"
#include "OAICancellationRequest.h"
#include "OAINetworkServiceConfig.h"
#include "OAINetworkServiceConfigRequest.h"
#include "OAINetworkServiceConfigUpdate.h"
#include "OAINetworkServiceConfigUpdatePartial.h"
#include "OAINetwork_service_configs_destroy_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworkServiceConfigsApi : public QObject {
    Q_OBJECT

public:
    OAINetworkServiceConfigsApi(const int timeOut = 0);
    ~OAINetworkServiceConfigsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  decommission_at QString [optional]
    */
    virtual void networkServiceConfigCancellationPolicyRead(const QString &id, const ::OpenAPI::OptionalParam<QString> &decommission_at = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_network_service_config_request OAINetworkServiceConfigRequest [optional]
    */
    virtual void networkServiceConfigsCreate(const ::OpenAPI::OptionalParam<OAINetworkServiceConfigRequest> &oai_network_service_config_request = ::OpenAPI::OptionalParam<OAINetworkServiceConfigRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_cancellation_request OAICancellationRequest [optional]
    */
    virtual void networkServiceConfigsDestroy(const QString &id, const ::OpenAPI::OptionalParam<OAICancellationRequest> &oai_cancellation_request = ::OpenAPI::OptionalParam<OAICancellationRequest>());

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  state QString [optional]
    * @param[in]  state__is_not QString [optional]
    * @param[in]  managing_account QString [optional]
    * @param[in]  consuming_account QString [optional]
    * @param[in]  external_ref QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  inner_vlan qint32 [optional]
    * @param[in]  outer_vlan qint32 [optional]
    * @param[in]  capacity qint32 [optional]
    * @param[in]  network_service QString [optional]
    * @param[in]  connection QString [optional]
    * @param[in]  product_offering QString [optional]
    */
    virtual void networkServiceConfigsList(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state__is_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &managing_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consuming_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &inner_vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &outer_vlan = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &capacity = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &network_service = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_offering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_network_service_config_update_partial OAINetworkServiceConfigUpdatePartial [optional]
    */
    virtual void networkServiceConfigsPartialUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAINetworkServiceConfigUpdatePartial> &oai_network_service_config_update_partial = ::OpenAPI::OptionalParam<OAINetworkServiceConfigUpdatePartial>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void networkServiceConfigsRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_network_service_config_update OAINetworkServiceConfigUpdate [optional]
    */
    virtual void networkServiceConfigsUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAINetworkServiceConfigUpdate> &oai_network_service_config_update = ::OpenAPI::OptionalParam<OAINetworkServiceConfigUpdate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networkServiceConfigCancellationPolicyReadCallback(OAIHttpRequestWorker *worker);
    void networkServiceConfigsCreateCallback(OAIHttpRequestWorker *worker);
    void networkServiceConfigsDestroyCallback(OAIHttpRequestWorker *worker);
    void networkServiceConfigsListCallback(OAIHttpRequestWorker *worker);
    void networkServiceConfigsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void networkServiceConfigsReadCallback(OAIHttpRequestWorker *worker);
    void networkServiceConfigsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networkServiceConfigCancellationPolicyReadSignal(OAICancellationPolicy summary);
    void networkServiceConfigsCreateSignal(OAINetworkServiceConfig summary);
    void networkServiceConfigsDestroySignal(OAINetworkServiceConfig summary);
    void networkServiceConfigsListSignal(QList<OAINetworkServiceConfig> summary);
    void networkServiceConfigsPartialUpdateSignal(OAINetworkServiceConfig summary);
    void networkServiceConfigsReadSignal(OAINetworkServiceConfig summary);
    void networkServiceConfigsUpdateSignal(OAINetworkServiceConfig summary);


    void networkServiceConfigCancellationPolicyReadSignalFull(OAIHttpRequestWorker *worker, OAICancellationPolicy summary);
    void networkServiceConfigsCreateSignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceConfig summary);
    void networkServiceConfigsDestroySignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceConfig summary);
    void networkServiceConfigsListSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkServiceConfig> summary);
    void networkServiceConfigsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceConfig summary);
    void networkServiceConfigsReadSignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceConfig summary);
    void networkServiceConfigsUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceConfig summary);

    Q_DECL_DEPRECATED_X("Use networkServiceConfigCancellationPolicyReadSignalError() instead")
    void networkServiceConfigCancellationPolicyReadSignalE(OAICancellationPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigCancellationPolicyReadSignalError(OAICancellationPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsCreateSignalError() instead")
    void networkServiceConfigsCreateSignalE(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsCreateSignalError(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsDestroySignalError() instead")
    void networkServiceConfigsDestroySignalE(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsDestroySignalError(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsListSignalError() instead")
    void networkServiceConfigsListSignalE(QList<OAINetworkServiceConfig> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsListSignalError(QList<OAINetworkServiceConfig> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsPartialUpdateSignalError() instead")
    void networkServiceConfigsPartialUpdateSignalE(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsPartialUpdateSignalError(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsReadSignalError() instead")
    void networkServiceConfigsReadSignalE(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsReadSignalError(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsUpdateSignalError() instead")
    void networkServiceConfigsUpdateSignalE(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsUpdateSignalError(OAINetworkServiceConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networkServiceConfigCancellationPolicyReadSignalErrorFull() instead")
    void networkServiceConfigCancellationPolicyReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigCancellationPolicyReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsCreateSignalErrorFull() instead")
    void networkServiceConfigsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsDestroySignalErrorFull() instead")
    void networkServiceConfigsDestroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsDestroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsListSignalErrorFull() instead")
    void networkServiceConfigsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsPartialUpdateSignalErrorFull() instead")
    void networkServiceConfigsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsReadSignalErrorFull() instead")
    void networkServiceConfigsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceConfigsUpdateSignalErrorFull() instead")
    void networkServiceConfigsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceConfigsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
