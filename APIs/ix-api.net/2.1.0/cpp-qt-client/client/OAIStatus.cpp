/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_attrs_isSet = false;
    m_attrs_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_attrs_isValid = ::OpenAPI::fromJsonValue(m_attrs, json[QString("attrs")]);
    m_attrs_isSet = !json[QString("attrs")].isNull() && m_attrs_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_attrs_isSet) {
        obj.insert(QString("attrs"), ::OpenAPI::toJsonValue(m_attrs));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIObject OAIStatus::getAttrs() const {
    return m_attrs;
}
void OAIStatus::setAttrs(const OAIObject &attrs) {
    m_attrs = attrs;
    m_attrs_isSet = true;
}

bool OAIStatus::is_attrs_Set() const{
    return m_attrs_isSet;
}

bool OAIStatus::is_attrs_Valid() const{
    return m_attrs_isValid;
}

QString OAIStatus::getMessage() const {
    return m_message;
}
void OAIStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStatus::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIStatus::getSeverity() const {
    return m_severity;
}
void OAIStatus::setSeverity(const qint32 &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIStatus::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIStatus::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIStatus::getTag() const {
    return m_tag;
}
void OAIStatus::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIStatus::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIStatus::is_tag_Valid() const{
    return m_tag_isValid;
}

QDateTime OAIStatus::getTimestamp() const {
    return m_timestamp;
}
void OAIStatus::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIStatus::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIStatus::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attrs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attrs_isValid && m_message_isValid && m_severity_isValid && m_tag_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
