/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIAccountRequest.h"
#include "OAIAccountUpdate.h"
#include "OAIAccountUpdatePartial.h"
#include "OAIAccounts_list_400_response.h"
#include "OAIAccounts_list_401_response.h"
#include "OAIAccounts_list_403_response.h"
#include "OAIAccounts_read_404_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_account_request OAIAccountRequest [optional]
    */
    virtual void accountsCreate(const ::OpenAPI::OptionalParam<OAIAccountRequest> &oai_account_request = ::OpenAPI::OptionalParam<OAIAccountRequest>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void accountsDestroy(const QString &id);

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  state QString [optional]
    * @param[in]  state__is_not QString [optional]
    * @param[in]  managing_account QString [optional]
    * @param[in]  billable qint32 [optional]
    * @param[in]  external_ref QString [optional]
    * @param[in]  name QString [optional]
    */
    virtual void accountsList(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state__is_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &managing_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &billable = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &external_ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_account_update_partial OAIAccountUpdatePartial [optional]
    */
    virtual void accountsPartialUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAIAccountUpdatePartial> &oai_account_update_partial = ::OpenAPI::OptionalParam<OAIAccountUpdatePartial>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void accountsRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_account_update OAIAccountUpdate [optional]
    */
    virtual void accountsUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAIAccountUpdate> &oai_account_update = ::OpenAPI::OptionalParam<OAIAccountUpdate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsCreateCallback(OAIHttpRequestWorker *worker);
    void accountsDestroyCallback(OAIHttpRequestWorker *worker);
    void accountsListCallback(OAIHttpRequestWorker *worker);
    void accountsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void accountsReadCallback(OAIHttpRequestWorker *worker);
    void accountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsCreateSignal(OAIAccount summary);
    void accountsDestroySignal(OAIAccount summary);
    void accountsListSignal(QList<OAIAccount> summary);
    void accountsPartialUpdateSignal(OAIAccount summary);
    void accountsReadSignal(OAIAccount summary);
    void accountsUpdateSignal(OAIAccount summary);


    void accountsCreateSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void accountsDestroySignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void accountsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount> summary);
    void accountsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void accountsReadSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void accountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);

    Q_DECL_DEPRECATED_X("Use accountsCreateSignalError() instead")
    void accountsCreateSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCreateSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDestroySignalError() instead")
    void accountsDestroySignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDestroySignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListSignalError() instead")
    void accountsListSignalE(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListSignalError(QList<OAIAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPartialUpdateSignalError() instead")
    void accountsPartialUpdateSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPartialUpdateSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsReadSignalError() instead")
    void accountsReadSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsReadSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsUpdateSignalError() instead")
    void accountsUpdateSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsUpdateSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsCreateSignalErrorFull() instead")
    void accountsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDestroySignalErrorFull() instead")
    void accountsDestroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDestroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListSignalErrorFull() instead")
    void accountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsPartialUpdateSignalErrorFull() instead")
    void accountsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsReadSignalErrorFull() instead")
    void accountsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsUpdateSignalErrorFull() instead")
    void accountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
