/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleAssignmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleAssignmentRequest::OAIRoleAssignmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleAssignmentRequest::OAIRoleAssignmentRequest() {
    this->initializeModel();
}

OAIRoleAssignmentRequest::~OAIRoleAssignmentRequest() {}

void OAIRoleAssignmentRequest::initializeModel() {

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIRoleAssignmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleAssignmentRequest::fromJsonObject(QJsonObject json) {

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIRoleAssignmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleAssignmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_isSet) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIRoleAssignmentRequest::getContact() const {
    return m_contact;
}
void OAIRoleAssignmentRequest::setContact(const QString &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIRoleAssignmentRequest::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIRoleAssignmentRequest::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIRoleAssignmentRequest::getRole() const {
    return m_role;
}
void OAIRoleAssignmentRequest::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIRoleAssignmentRequest::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRoleAssignmentRequest::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIRoleAssignmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleAssignmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
