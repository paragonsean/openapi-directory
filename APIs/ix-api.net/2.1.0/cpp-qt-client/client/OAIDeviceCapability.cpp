/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceCapability::OAIDeviceCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceCapability::OAIDeviceCapability() {
    this->initializeModel();
}

OAIDeviceCapability::~OAIDeviceCapability() {}

void OAIDeviceCapability::initializeModel() {

    m_availability_isSet = false;
    m_availability_isValid = false;

    m_max_lag_isSet = false;
    m_max_lag_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;
}

void OAIDeviceCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceCapability::fromJsonObject(QJsonObject json) {

    m_availability_isValid = ::OpenAPI::fromJsonValue(m_availability, json[QString("availability")]);
    m_availability_isSet = !json[QString("availability")].isNull() && m_availability_isValid;

    m_max_lag_isValid = ::OpenAPI::fromJsonValue(m_max_lag, json[QString("max_lag")]);
    m_max_lag_isSet = !json[QString("max_lag")].isNull() && m_max_lag_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;
}

QString OAIDeviceCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_isSet) {
        obj.insert(QString("availability"), ::OpenAPI::toJsonValue(m_availability));
    }
    if (m_max_lag_isSet) {
        obj.insert(QString("max_lag"), ::OpenAPI::toJsonValue(m_max_lag));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    return obj;
}

qint32 OAIDeviceCapability::getAvailability() const {
    return m_availability;
}
void OAIDeviceCapability::setAvailability(const qint32 &availability) {
    m_availability = availability;
    m_availability_isSet = true;
}

bool OAIDeviceCapability::is_availability_Set() const{
    return m_availability_isSet;
}

bool OAIDeviceCapability::is_availability_Valid() const{
    return m_availability_isValid;
}

qint32 OAIDeviceCapability::getMaxLag() const {
    return m_max_lag;
}
void OAIDeviceCapability::setMaxLag(const qint32 &max_lag) {
    m_max_lag = max_lag;
    m_max_lag_isSet = true;
}

bool OAIDeviceCapability::is_max_lag_Set() const{
    return m_max_lag_isSet;
}

bool OAIDeviceCapability::is_max_lag_Valid() const{
    return m_max_lag_isValid;
}

QString OAIDeviceCapability::getMediaType() const {
    return m_media_type;
}
void OAIDeviceCapability::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIDeviceCapability::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIDeviceCapability::is_media_type_Valid() const{
    return m_media_type_isValid;
}

qint32 OAIDeviceCapability::getSpeed() const {
    return m_speed;
}
void OAIDeviceCapability::setSpeed(const qint32 &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIDeviceCapability::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIDeviceCapability::is_speed_Valid() const{
    return m_speed_isValid;
}

bool OAIDeviceCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_lag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
