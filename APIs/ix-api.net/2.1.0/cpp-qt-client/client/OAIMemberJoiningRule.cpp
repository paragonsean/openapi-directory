/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberJoiningRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberJoiningRule::OAIMemberJoiningRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberJoiningRule::OAIMemberJoiningRule() {
    this->initializeModel();
}

OAIMemberJoiningRule::~OAIMemberJoiningRule() {}

void OAIMemberJoiningRule::initializeModel() {

    m_capacity_max_isSet = false;
    m_capacity_max_isValid = false;

    m_capacity_min_isSet = false;
    m_capacity_min_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_network_service_isSet = false;
    m_network_service_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMemberJoiningRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberJoiningRule::fromJsonObject(QJsonObject json) {

    m_capacity_max_isValid = ::OpenAPI::fromJsonValue(m_capacity_max, json[QString("capacity_max")]);
    m_capacity_max_isSet = !json[QString("capacity_max")].isNull() && m_capacity_max_isValid;

    m_capacity_min_isValid = ::OpenAPI::fromJsonValue(m_capacity_min, json[QString("capacity_min")]);
    m_capacity_min_isSet = !json[QString("capacity_min")].isNull() && m_capacity_min_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_network_service_isValid = ::OpenAPI::fromJsonValue(m_network_service, json[QString("network_service")]);
    m_network_service_isSet = !json[QString("network_service")].isNull() && m_network_service_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMemberJoiningRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberJoiningRule::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_max_isSet) {
        obj.insert(QString("capacity_max"), ::OpenAPI::toJsonValue(m_capacity_max));
    }
    if (m_capacity_min_isSet) {
        obj.insert(QString("capacity_min"), ::OpenAPI::toJsonValue(m_capacity_min));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_network_service_isSet) {
        obj.insert(QString("network_service"), ::OpenAPI::toJsonValue(m_network_service));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIMemberJoiningRule::getCapacityMax() const {
    return m_capacity_max;
}
void OAIMemberJoiningRule::setCapacityMax(const qint32 &capacity_max) {
    m_capacity_max = capacity_max;
    m_capacity_max_isSet = true;
}

bool OAIMemberJoiningRule::is_capacity_max_Set() const{
    return m_capacity_max_isSet;
}

bool OAIMemberJoiningRule::is_capacity_max_Valid() const{
    return m_capacity_max_isValid;
}

qint32 OAIMemberJoiningRule::getCapacityMin() const {
    return m_capacity_min;
}
void OAIMemberJoiningRule::setCapacityMin(const qint32 &capacity_min) {
    m_capacity_min = capacity_min;
    m_capacity_min_isSet = true;
}

bool OAIMemberJoiningRule::is_capacity_min_Set() const{
    return m_capacity_min_isSet;
}

bool OAIMemberJoiningRule::is_capacity_min_Valid() const{
    return m_capacity_min_isValid;
}

QString OAIMemberJoiningRule::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIMemberJoiningRule::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIMemberJoiningRule::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIMemberJoiningRule::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIMemberJoiningRule::getExternalRef() const {
    return m_external_ref;
}
void OAIMemberJoiningRule::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIMemberJoiningRule::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIMemberJoiningRule::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIMemberJoiningRule::getId() const {
    return m_id;
}
void OAIMemberJoiningRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMemberJoiningRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMemberJoiningRule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMemberJoiningRule::getManagingAccount() const {
    return m_managing_account;
}
void OAIMemberJoiningRule::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIMemberJoiningRule::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIMemberJoiningRule::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QString OAIMemberJoiningRule::getNetworkService() const {
    return m_network_service;
}
void OAIMemberJoiningRule::setNetworkService(const QString &network_service) {
    m_network_service = network_service;
    m_network_service_isSet = true;
}

bool OAIMemberJoiningRule::is_network_service_Set() const{
    return m_network_service_isSet;
}

bool OAIMemberJoiningRule::is_network_service_Valid() const{
    return m_network_service_isValid;
}

QString OAIMemberJoiningRule::getType() const {
    return m_type;
}
void OAIMemberJoiningRule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMemberJoiningRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMemberJoiningRule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMemberJoiningRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberJoiningRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_consuming_account_isValid && m_id_isValid && m_managing_account_isValid && m_network_service_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
