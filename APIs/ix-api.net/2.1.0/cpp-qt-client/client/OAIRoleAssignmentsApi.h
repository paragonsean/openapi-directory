/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoleAssignmentsApi_H
#define OAI_OAIRoleAssignmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccounts_list_400_response.h"
#include "OAIAccounts_list_401_response.h"
#include "OAIAccounts_list_403_response.h"
#include "OAIAccounts_read_404_response.h"
#include "OAIContacts_destroy_400_response.h"
#include "OAIRoleAssignment.h"
#include "OAIRoleAssignmentRequest.h"
#include "OAIRole_assignments_create_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoleAssignmentsApi : public QObject {
    Q_OBJECT

public:
    OAIRoleAssignmentsApi(const int timeOut = 0);
    ~OAIRoleAssignmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_role_assignment_request OAIRoleAssignmentRequest [optional]
    */
    virtual void roleAssignmentsCreate(const ::OpenAPI::OptionalParam<OAIRoleAssignmentRequest> &oai_role_assignment_request = ::OpenAPI::OptionalParam<OAIRoleAssignmentRequest>());

    /**
    * @param[in]  assignment_id QString [required]
    */
    virtual void roleAssignmentsDestroy(const QString &assignment_id);

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  contact QString [optional]
    * @param[in]  role QString [optional]
    */
    virtual void roleAssignmentsList(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &contact = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  assignment_id QString [required]
    */
    virtual void roleAssignmentsRead(const QString &assignment_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void roleAssignmentsCreateCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsDestroyCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsListCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsReadCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void roleAssignmentsCreateSignal(OAIRoleAssignment summary);
    void roleAssignmentsDestroySignal(OAIRoleAssignment summary);
    void roleAssignmentsListSignal(QList<OAIRoleAssignment> summary);
    void roleAssignmentsReadSignal(OAIRoleAssignment summary);


    void roleAssignmentsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsDestroySignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleAssignment> summary);
    void roleAssignmentsReadSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);

    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateSignalError() instead")
    void roleAssignmentsCreateSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDestroySignalError() instead")
    void roleAssignmentsDestroySignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDestroySignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListSignalError() instead")
    void roleAssignmentsListSignalE(QList<OAIRoleAssignment> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListSignalError(QList<OAIRoleAssignment> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsReadSignalError() instead")
    void roleAssignmentsReadSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsReadSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateSignalErrorFull() instead")
    void roleAssignmentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDestroySignalErrorFull() instead")
    void roleAssignmentsDestroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDestroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListSignalErrorFull() instead")
    void roleAssignmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsReadSignalErrorFull() instead")
    void roleAssignmentsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
