/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelable::OAICancelable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelable::OAICancelable() {
    this->initializeModel();
}

OAICancelable::~OAICancelable() {}

void OAICancelable::initializeModel() {

    m_charged_until_isSet = false;
    m_charged_until_isValid = false;

    m_decommission_at_isSet = false;
    m_decommission_at_isValid = false;
}

void OAICancelable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelable::fromJsonObject(QJsonObject json) {

    m_charged_until_isValid = ::OpenAPI::fromJsonValue(m_charged_until, json[QString("charged_until")]);
    m_charged_until_isSet = !json[QString("charged_until")].isNull() && m_charged_until_isValid;

    m_decommission_at_isValid = ::OpenAPI::fromJsonValue(m_decommission_at, json[QString("decommission_at")]);
    m_decommission_at_isSet = !json[QString("decommission_at")].isNull() && m_decommission_at_isValid;
}

QString OAICancelable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelable::asJsonObject() const {
    QJsonObject obj;
    if (m_charged_until_isSet) {
        obj.insert(QString("charged_until"), ::OpenAPI::toJsonValue(m_charged_until));
    }
    if (m_decommission_at_isSet) {
        obj.insert(QString("decommission_at"), ::OpenAPI::toJsonValue(m_decommission_at));
    }
    return obj;
}

QDate OAICancelable::getChargedUntil() const {
    return m_charged_until;
}
void OAICancelable::setChargedUntil(const QDate &charged_until) {
    m_charged_until = charged_until;
    m_charged_until_isSet = true;
}

bool OAICancelable::is_charged_until_Set() const{
    return m_charged_until_isSet;
}

bool OAICancelable::is_charged_until_Valid() const{
    return m_charged_until_isValid;
}

QDate OAICancelable::getDecommissionAt() const {
    return m_decommission_at;
}
void OAICancelable::setDecommissionAt(const QDate &decommission_at) {
    m_decommission_at = decommission_at;
    m_decommission_at_isSet = true;
}

bool OAICancelable::is_decommission_at_Set() const{
    return m_decommission_at_isSet;
}

bool OAICancelable::is_decommission_at_Valid() const{
    return m_decommission_at_isValid;
}

bool OAICancelable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charged_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decommission_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
