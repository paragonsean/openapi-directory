/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetworkFeaturePartial.h
 *
 * Polymorphic Network Feature
 */

#ifndef OAINetworkFeaturePartial_H
#define OAINetworkFeaturePartial_H

#include <QJsonObject>

#include "OAIIXPSpecificFeatureFlag.h"
#include "OAIRouteServerNetworkFeaturePartial.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIXPSpecificFeatureFlag;

class OAINetworkFeaturePartial : public OAIObject {
public:
    OAINetworkFeaturePartial();
    OAINetworkFeaturePartial(QString json);
    ~OAINetworkFeaturePartial() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAddressFamilies() const;
    void setAddressFamilies(const QList<QString> &address_families);
    bool is_address_families_Set() const;
    bool is_address_families_Valid() const;

    qint32 getAsn() const;
    void setAsn(const qint32 &asn);
    bool is_asn_Set() const;
    bool is_asn_Valid() const;

    QList<QString> getAvailableBgpSessionTypes() const;
    void setAvailableBgpSessionTypes(const QList<QString> &available_bgp_session_types);
    bool is_available_bgp_session_types_Set() const;
    bool is_available_bgp_session_types_Valid() const;

    QList<OAIIXPSpecificFeatureFlag> getFlags() const;
    void setFlags(const QList<OAIIXPSpecificFeatureFlag> &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    QString getFqdn() const;
    void setFqdn(const QString &fqdn);
    bool is_fqdn_Set() const;
    bool is_fqdn_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIpV4() const;
    void setIpV4(const QString &ip_v4);
    bool is_ip_v4_Set() const;
    bool is_ip_v4_Valid() const;

    QString getIpV6() const;
    void setIpV6(const QString &ip_v6);
    bool is_ip_v6_Set() const;
    bool is_ip_v6_Valid() const;

    QString getLookingGlassUrl() const;
    void setLookingGlassUrl(const QString &looking_glass_url);
    bool is_looking_glass_url_Set() const;
    bool is_looking_glass_url_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetworkService() const;
    void setNetworkService(const QString &network_service);
    bool is_network_service_Set() const;
    bool is_network_service_Valid() const;

    QList<QString> getNfcRequiredContactRoles() const;
    void setNfcRequiredContactRoles(const QList<QString> &nfc_required_contact_roles);
    bool is_nfc_required_contact_roles_Set() const;
    bool is_nfc_required_contact_roles_Valid() const;

    bool isRequired() const;
    void setRequired(const bool &required);
    bool is_required_Set() const;
    bool is_required_Valid() const;

    QString getSessionMode() const;
    void setSessionMode(const QString &session_mode);
    bool is_session_mode_Set() const;
    bool is_session_mode_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_address_families;
    bool m_address_families_isSet;
    bool m_address_families_isValid;

    qint32 m_asn;
    bool m_asn_isSet;
    bool m_asn_isValid;

    QList<QString> m_available_bgp_session_types;
    bool m_available_bgp_session_types_isSet;
    bool m_available_bgp_session_types_isValid;

    QList<OAIIXPSpecificFeatureFlag> m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    QString m_fqdn;
    bool m_fqdn_isSet;
    bool m_fqdn_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_ip_v4;
    bool m_ip_v4_isSet;
    bool m_ip_v4_isValid;

    QString m_ip_v6;
    bool m_ip_v6_isSet;
    bool m_ip_v6_isValid;

    QString m_looking_glass_url;
    bool m_looking_glass_url_isSet;
    bool m_looking_glass_url_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network_service;
    bool m_network_service_isSet;
    bool m_network_service_isValid;

    QList<QString> m_nfc_required_contact_roles;
    bool m_nfc_required_contact_roles_isSet;
    bool m_nfc_required_contact_roles_isValid;

    bool m_required;
    bool m_required_isSet;
    bool m_required_isValid;

    QString m_session_mode;
    bool m_session_mode_isSet;
    bool m_session_mode_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetworkFeaturePartial)

#endif // OAINetworkFeaturePartial_H
