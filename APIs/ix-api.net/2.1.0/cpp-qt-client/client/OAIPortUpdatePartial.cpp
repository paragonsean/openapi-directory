/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortUpdatePartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortUpdatePartial::OAIPortUpdatePartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortUpdatePartial::OAIPortUpdatePartial() {
    this->initializeModel();
}

OAIPortUpdatePartial::~OAIPortUpdatePartial() {}

void OAIPortUpdatePartial::initializeModel() {

    m_billing_account_isSet = false;
    m_billing_account_isValid = false;

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_contract_ref_isSet = false;
    m_contract_ref_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;
}

void OAIPortUpdatePartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPortUpdatePartial::fromJsonObject(QJsonObject json) {

    m_billing_account_isValid = ::OpenAPI::fromJsonValue(m_billing_account, json[QString("billing_account")]);
    m_billing_account_isSet = !json[QString("billing_account")].isNull() && m_billing_account_isValid;

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_contract_ref_isValid = ::OpenAPI::fromJsonValue(m_contract_ref, json[QString("contract_ref")]);
    m_contract_ref_isSet = !json[QString("contract_ref")].isNull() && m_contract_ref_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_role_assignments_isValid = ::OpenAPI::fromJsonValue(m_role_assignments, json[QString("role_assignments")]);
    m_role_assignments_isSet = !json[QString("role_assignments")].isNull() && m_role_assignments_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;
}

QString OAIPortUpdatePartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPortUpdatePartial::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_account_isSet) {
        obj.insert(QString("billing_account"), ::OpenAPI::toJsonValue(m_billing_account));
    }
    if (m_connection_isSet) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_contract_ref_isSet) {
        obj.insert(QString("contract_ref"), ::OpenAPI::toJsonValue(m_contract_ref));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_role_assignments.size() > 0) {
        obj.insert(QString("role_assignments"), ::OpenAPI::toJsonValue(m_role_assignments));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    return obj;
}

QString OAIPortUpdatePartial::getBillingAccount() const {
    return m_billing_account;
}
void OAIPortUpdatePartial::setBillingAccount(const QString &billing_account) {
    m_billing_account = billing_account;
    m_billing_account_isSet = true;
}

bool OAIPortUpdatePartial::is_billing_account_Set() const{
    return m_billing_account_isSet;
}

bool OAIPortUpdatePartial::is_billing_account_Valid() const{
    return m_billing_account_isValid;
}

QString OAIPortUpdatePartial::getConnection() const {
    return m_connection;
}
void OAIPortUpdatePartial::setConnection(const QString &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIPortUpdatePartial::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIPortUpdatePartial::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAIPortUpdatePartial::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIPortUpdatePartial::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIPortUpdatePartial::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIPortUpdatePartial::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIPortUpdatePartial::getContractRef() const {
    return m_contract_ref;
}
void OAIPortUpdatePartial::setContractRef(const QString &contract_ref) {
    m_contract_ref = contract_ref;
    m_contract_ref_isSet = true;
}

bool OAIPortUpdatePartial::is_contract_ref_Set() const{
    return m_contract_ref_isSet;
}

bool OAIPortUpdatePartial::is_contract_ref_Valid() const{
    return m_contract_ref_isValid;
}

QString OAIPortUpdatePartial::getExternalRef() const {
    return m_external_ref;
}
void OAIPortUpdatePartial::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIPortUpdatePartial::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIPortUpdatePartial::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIPortUpdatePartial::getManagingAccount() const {
    return m_managing_account;
}
void OAIPortUpdatePartial::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIPortUpdatePartial::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIPortUpdatePartial::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QString OAIPortUpdatePartial::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAIPortUpdatePartial::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAIPortUpdatePartial::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAIPortUpdatePartial::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

QList<QString> OAIPortUpdatePartial::getRoleAssignments() const {
    return m_role_assignments;
}
void OAIPortUpdatePartial::setRoleAssignments(const QList<QString> &role_assignments) {
    m_role_assignments = role_assignments;
    m_role_assignments_isSet = true;
}

bool OAIPortUpdatePartial::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAIPortUpdatePartial::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

qint32 OAIPortUpdatePartial::getSpeed() const {
    return m_speed;
}
void OAIPortUpdatePartial::setSpeed(const qint32 &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIPortUpdatePartial::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIPortUpdatePartial::is_speed_Valid() const{
    return m_speed_isValid;
}

bool OAIPortUpdatePartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPortUpdatePartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
