/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkFeaturePartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkFeaturePartial::OAINetworkFeaturePartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkFeaturePartial::OAINetworkFeaturePartial() {
    this->initializeModel();
}

OAINetworkFeaturePartial::~OAINetworkFeaturePartial() {}

void OAINetworkFeaturePartial::initializeModel() {

    m_address_families_isSet = false;
    m_address_families_isValid = false;

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_available_bgp_session_types_isSet = false;
    m_available_bgp_session_types_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_v4_isSet = false;
    m_ip_v4_isValid = false;

    m_ip_v6_isSet = false;
    m_ip_v6_isValid = false;

    m_looking_glass_url_isSet = false;
    m_looking_glass_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_service_isSet = false;
    m_network_service_isValid = false;

    m_nfc_required_contact_roles_isSet = false;
    m_nfc_required_contact_roles_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_session_mode_isSet = false;
    m_session_mode_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINetworkFeaturePartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkFeaturePartial::fromJsonObject(QJsonObject json) {

    m_address_families_isValid = ::OpenAPI::fromJsonValue(m_address_families, json[QString("address_families")]);
    m_address_families_isSet = !json[QString("address_families")].isNull() && m_address_families_isValid;

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_available_bgp_session_types_isValid = ::OpenAPI::fromJsonValue(m_available_bgp_session_types, json[QString("available_bgp_session_types")]);
    m_available_bgp_session_types_isSet = !json[QString("available_bgp_session_types")].isNull() && m_available_bgp_session_types_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_v4_isValid = ::OpenAPI::fromJsonValue(m_ip_v4, json[QString("ip_v4")]);
    m_ip_v4_isSet = !json[QString("ip_v4")].isNull() && m_ip_v4_isValid;

    m_ip_v6_isValid = ::OpenAPI::fromJsonValue(m_ip_v6, json[QString("ip_v6")]);
    m_ip_v6_isSet = !json[QString("ip_v6")].isNull() && m_ip_v6_isValid;

    m_looking_glass_url_isValid = ::OpenAPI::fromJsonValue(m_looking_glass_url, json[QString("looking_glass_url")]);
    m_looking_glass_url_isSet = !json[QString("looking_glass_url")].isNull() && m_looking_glass_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_service_isValid = ::OpenAPI::fromJsonValue(m_network_service, json[QString("network_service")]);
    m_network_service_isSet = !json[QString("network_service")].isNull() && m_network_service_isValid;

    m_nfc_required_contact_roles_isValid = ::OpenAPI::fromJsonValue(m_nfc_required_contact_roles, json[QString("nfc_required_contact_roles")]);
    m_nfc_required_contact_roles_isSet = !json[QString("nfc_required_contact_roles")].isNull() && m_nfc_required_contact_roles_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_session_mode_isValid = ::OpenAPI::fromJsonValue(m_session_mode, json[QString("session_mode")]);
    m_session_mode_isSet = !json[QString("session_mode")].isNull() && m_session_mode_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINetworkFeaturePartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkFeaturePartial::asJsonObject() const {
    QJsonObject obj;
    if (m_address_families.size() > 0) {
        obj.insert(QString("address_families"), ::OpenAPI::toJsonValue(m_address_families));
    }
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_available_bgp_session_types.size() > 0) {
        obj.insert(QString("available_bgp_session_types"), ::OpenAPI::toJsonValue(m_available_bgp_session_types));
    }
    if (m_flags.size() > 0) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_v4_isSet) {
        obj.insert(QString("ip_v4"), ::OpenAPI::toJsonValue(m_ip_v4));
    }
    if (m_ip_v6_isSet) {
        obj.insert(QString("ip_v6"), ::OpenAPI::toJsonValue(m_ip_v6));
    }
    if (m_looking_glass_url_isSet) {
        obj.insert(QString("looking_glass_url"), ::OpenAPI::toJsonValue(m_looking_glass_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_service_isSet) {
        obj.insert(QString("network_service"), ::OpenAPI::toJsonValue(m_network_service));
    }
    if (m_nfc_required_contact_roles.size() > 0) {
        obj.insert(QString("nfc_required_contact_roles"), ::OpenAPI::toJsonValue(m_nfc_required_contact_roles));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_session_mode_isSet) {
        obj.insert(QString("session_mode"), ::OpenAPI::toJsonValue(m_session_mode));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAINetworkFeaturePartial::getAddressFamilies() const {
    return m_address_families;
}
void OAINetworkFeaturePartial::setAddressFamilies(const QList<QString> &address_families) {
    m_address_families = address_families;
    m_address_families_isSet = true;
}

bool OAINetworkFeaturePartial::is_address_families_Set() const{
    return m_address_families_isSet;
}

bool OAINetworkFeaturePartial::is_address_families_Valid() const{
    return m_address_families_isValid;
}

qint32 OAINetworkFeaturePartial::getAsn() const {
    return m_asn;
}
void OAINetworkFeaturePartial::setAsn(const qint32 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAINetworkFeaturePartial::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAINetworkFeaturePartial::is_asn_Valid() const{
    return m_asn_isValid;
}

QList<QString> OAINetworkFeaturePartial::getAvailableBgpSessionTypes() const {
    return m_available_bgp_session_types;
}
void OAINetworkFeaturePartial::setAvailableBgpSessionTypes(const QList<QString> &available_bgp_session_types) {
    m_available_bgp_session_types = available_bgp_session_types;
    m_available_bgp_session_types_isSet = true;
}

bool OAINetworkFeaturePartial::is_available_bgp_session_types_Set() const{
    return m_available_bgp_session_types_isSet;
}

bool OAINetworkFeaturePartial::is_available_bgp_session_types_Valid() const{
    return m_available_bgp_session_types_isValid;
}

QList<OAIIXPSpecificFeatureFlag> OAINetworkFeaturePartial::getFlags() const {
    return m_flags;
}
void OAINetworkFeaturePartial::setFlags(const QList<OAIIXPSpecificFeatureFlag> &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAINetworkFeaturePartial::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAINetworkFeaturePartial::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAINetworkFeaturePartial::getFqdn() const {
    return m_fqdn;
}
void OAINetworkFeaturePartial::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAINetworkFeaturePartial::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAINetworkFeaturePartial::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAINetworkFeaturePartial::getId() const {
    return m_id;
}
void OAINetworkFeaturePartial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINetworkFeaturePartial::is_id_Set() const{
    return m_id_isSet;
}

bool OAINetworkFeaturePartial::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINetworkFeaturePartial::getIpV4() const {
    return m_ip_v4;
}
void OAINetworkFeaturePartial::setIpV4(const QString &ip_v4) {
    m_ip_v4 = ip_v4;
    m_ip_v4_isSet = true;
}

bool OAINetworkFeaturePartial::is_ip_v4_Set() const{
    return m_ip_v4_isSet;
}

bool OAINetworkFeaturePartial::is_ip_v4_Valid() const{
    return m_ip_v4_isValid;
}

QString OAINetworkFeaturePartial::getIpV6() const {
    return m_ip_v6;
}
void OAINetworkFeaturePartial::setIpV6(const QString &ip_v6) {
    m_ip_v6 = ip_v6;
    m_ip_v6_isSet = true;
}

bool OAINetworkFeaturePartial::is_ip_v6_Set() const{
    return m_ip_v6_isSet;
}

bool OAINetworkFeaturePartial::is_ip_v6_Valid() const{
    return m_ip_v6_isValid;
}

QString OAINetworkFeaturePartial::getLookingGlassUrl() const {
    return m_looking_glass_url;
}
void OAINetworkFeaturePartial::setLookingGlassUrl(const QString &looking_glass_url) {
    m_looking_glass_url = looking_glass_url;
    m_looking_glass_url_isSet = true;
}

bool OAINetworkFeaturePartial::is_looking_glass_url_Set() const{
    return m_looking_glass_url_isSet;
}

bool OAINetworkFeaturePartial::is_looking_glass_url_Valid() const{
    return m_looking_glass_url_isValid;
}

QString OAINetworkFeaturePartial::getName() const {
    return m_name;
}
void OAINetworkFeaturePartial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINetworkFeaturePartial::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetworkFeaturePartial::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINetworkFeaturePartial::getNetworkService() const {
    return m_network_service;
}
void OAINetworkFeaturePartial::setNetworkService(const QString &network_service) {
    m_network_service = network_service;
    m_network_service_isSet = true;
}

bool OAINetworkFeaturePartial::is_network_service_Set() const{
    return m_network_service_isSet;
}

bool OAINetworkFeaturePartial::is_network_service_Valid() const{
    return m_network_service_isValid;
}

QList<QString> OAINetworkFeaturePartial::getNfcRequiredContactRoles() const {
    return m_nfc_required_contact_roles;
}
void OAINetworkFeaturePartial::setNfcRequiredContactRoles(const QList<QString> &nfc_required_contact_roles) {
    m_nfc_required_contact_roles = nfc_required_contact_roles;
    m_nfc_required_contact_roles_isSet = true;
}

bool OAINetworkFeaturePartial::is_nfc_required_contact_roles_Set() const{
    return m_nfc_required_contact_roles_isSet;
}

bool OAINetworkFeaturePartial::is_nfc_required_contact_roles_Valid() const{
    return m_nfc_required_contact_roles_isValid;
}

bool OAINetworkFeaturePartial::isRequired() const {
    return m_required;
}
void OAINetworkFeaturePartial::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAINetworkFeaturePartial::is_required_Set() const{
    return m_required_isSet;
}

bool OAINetworkFeaturePartial::is_required_Valid() const{
    return m_required_isValid;
}

QString OAINetworkFeaturePartial::getSessionMode() const {
    return m_session_mode;
}
void OAINetworkFeaturePartial::setSessionMode(const QString &session_mode) {
    m_session_mode = session_mode;
    m_session_mode_isSet = true;
}

bool OAINetworkFeaturePartial::is_session_mode_Set() const{
    return m_session_mode_isSet;
}

bool OAINetworkFeaturePartial::is_session_mode_Valid() const{
    return m_session_mode_isValid;
}

QString OAINetworkFeaturePartial::getType() const {
    return m_type;
}
void OAINetworkFeaturePartial::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINetworkFeaturePartial::is_type_Set() const{
    return m_type_isSet;
}

bool OAINetworkFeaturePartial::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINetworkFeaturePartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_families.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_bgp_session_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_looking_glass_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfc_required_contact_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkFeaturePartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
