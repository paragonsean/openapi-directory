/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteServerNetworkFeatureConfigRequestPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteServerNetworkFeatureConfigRequestPartial::OAIRouteServerNetworkFeatureConfigRequestPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteServerNetworkFeatureConfigRequestPartial::OAIRouteServerNetworkFeatureConfigRequestPartial() {
    this->initializeModel();
}

OAIRouteServerNetworkFeatureConfigRequestPartial::~OAIRouteServerNetworkFeatureConfigRequestPartial() {}

void OAIRouteServerNetworkFeatureConfigRequestPartial::initializeModel() {

    m_as_set_v4_isSet = false;
    m_as_set_v4_isValid = false;

    m_as_set_v6_isSet = false;
    m_as_set_v6_isValid = false;

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_bgp_session_type_isSet = false;
    m_bgp_session_type_isValid = false;

    m_billing_account_isSet = false;
    m_billing_account_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_contract_ref_isSet = false;
    m_contract_ref_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_insert_ixp_asn_isSet = false;
    m_insert_ixp_asn_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_max_prefix_v4_isSet = false;
    m_max_prefix_v4_isValid = false;

    m_max_prefix_v6_isSet = false;
    m_max_prefix_v6_isValid = false;

    m_network_feature_isSet = false;
    m_network_feature_isValid = false;

    m_network_service_config_isSet = false;
    m_network_service_config_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_session_mode_isSet = false;
    m_session_mode_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRouteServerNetworkFeatureConfigRequestPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteServerNetworkFeatureConfigRequestPartial::fromJsonObject(QJsonObject json) {

    m_as_set_v4_isValid = ::OpenAPI::fromJsonValue(m_as_set_v4, json[QString("as_set_v4")]);
    m_as_set_v4_isSet = !json[QString("as_set_v4")].isNull() && m_as_set_v4_isValid;

    m_as_set_v6_isValid = ::OpenAPI::fromJsonValue(m_as_set_v6, json[QString("as_set_v6")]);
    m_as_set_v6_isSet = !json[QString("as_set_v6")].isNull() && m_as_set_v6_isValid;

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_bgp_session_type_isValid = ::OpenAPI::fromJsonValue(m_bgp_session_type, json[QString("bgp_session_type")]);
    m_bgp_session_type_isSet = !json[QString("bgp_session_type")].isNull() && m_bgp_session_type_isValid;

    m_billing_account_isValid = ::OpenAPI::fromJsonValue(m_billing_account, json[QString("billing_account")]);
    m_billing_account_isSet = !json[QString("billing_account")].isNull() && m_billing_account_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_contract_ref_isValid = ::OpenAPI::fromJsonValue(m_contract_ref, json[QString("contract_ref")]);
    m_contract_ref_isSet = !json[QString("contract_ref")].isNull() && m_contract_ref_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_insert_ixp_asn_isValid = ::OpenAPI::fromJsonValue(m_insert_ixp_asn, json[QString("insert_ixp_asn")]);
    m_insert_ixp_asn_isSet = !json[QString("insert_ixp_asn")].isNull() && m_insert_ixp_asn_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_max_prefix_v4_isValid = ::OpenAPI::fromJsonValue(m_max_prefix_v4, json[QString("max_prefix_v4")]);
    m_max_prefix_v4_isSet = !json[QString("max_prefix_v4")].isNull() && m_max_prefix_v4_isValid;

    m_max_prefix_v6_isValid = ::OpenAPI::fromJsonValue(m_max_prefix_v6, json[QString("max_prefix_v6")]);
    m_max_prefix_v6_isSet = !json[QString("max_prefix_v6")].isNull() && m_max_prefix_v6_isValid;

    m_network_feature_isValid = ::OpenAPI::fromJsonValue(m_network_feature, json[QString("network_feature")]);
    m_network_feature_isSet = !json[QString("network_feature")].isNull() && m_network_feature_isValid;

    m_network_service_config_isValid = ::OpenAPI::fromJsonValue(m_network_service_config, json[QString("network_service_config")]);
    m_network_service_config_isSet = !json[QString("network_service_config")].isNull() && m_network_service_config_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_role_assignments_isValid = ::OpenAPI::fromJsonValue(m_role_assignments, json[QString("role_assignments")]);
    m_role_assignments_isSet = !json[QString("role_assignments")].isNull() && m_role_assignments_isValid;

    m_session_mode_isValid = ::OpenAPI::fromJsonValue(m_session_mode, json[QString("session_mode")]);
    m_session_mode_isSet = !json[QString("session_mode")].isNull() && m_session_mode_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteServerNetworkFeatureConfigRequestPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_as_set_v4_isSet) {
        obj.insert(QString("as_set_v4"), ::OpenAPI::toJsonValue(m_as_set_v4));
    }
    if (m_as_set_v6_isSet) {
        obj.insert(QString("as_set_v6"), ::OpenAPI::toJsonValue(m_as_set_v6));
    }
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_bgp_session_type_isSet) {
        obj.insert(QString("bgp_session_type"), ::OpenAPI::toJsonValue(m_bgp_session_type));
    }
    if (m_billing_account_isSet) {
        obj.insert(QString("billing_account"), ::OpenAPI::toJsonValue(m_billing_account));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_contract_ref_isSet) {
        obj.insert(QString("contract_ref"), ::OpenAPI::toJsonValue(m_contract_ref));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_insert_ixp_asn_isSet) {
        obj.insert(QString("insert_ixp_asn"), ::OpenAPI::toJsonValue(m_insert_ixp_asn));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_max_prefix_v4_isSet) {
        obj.insert(QString("max_prefix_v4"), ::OpenAPI::toJsonValue(m_max_prefix_v4));
    }
    if (m_max_prefix_v6_isSet) {
        obj.insert(QString("max_prefix_v6"), ::OpenAPI::toJsonValue(m_max_prefix_v6));
    }
    if (m_network_feature_isSet) {
        obj.insert(QString("network_feature"), ::OpenAPI::toJsonValue(m_network_feature));
    }
    if (m_network_service_config_isSet) {
        obj.insert(QString("network_service_config"), ::OpenAPI::toJsonValue(m_network_service_config));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_role_assignments.size() > 0) {
        obj.insert(QString("role_assignments"), ::OpenAPI::toJsonValue(m_role_assignments));
    }
    if (m_session_mode_isSet) {
        obj.insert(QString("session_mode"), ::OpenAPI::toJsonValue(m_session_mode));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getAsSetV4() const {
    return m_as_set_v4;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setAsSetV4(const QString &as_set_v4) {
    m_as_set_v4 = as_set_v4;
    m_as_set_v4_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_as_set_v4_Set() const{
    return m_as_set_v4_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_as_set_v4_Valid() const{
    return m_as_set_v4_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getAsSetV6() const {
    return m_as_set_v6;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setAsSetV6(const QString &as_set_v6) {
    m_as_set_v6 = as_set_v6;
    m_as_set_v6_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_as_set_v6_Set() const{
    return m_as_set_v6_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_as_set_v6_Valid() const{
    return m_as_set_v6_isValid;
}

qint64 OAIRouteServerNetworkFeatureConfigRequestPartial::getAsn() const {
    return m_asn;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setAsn(const qint64 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getBgpSessionType() const {
    return m_bgp_session_type;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setBgpSessionType(const QString &bgp_session_type) {
    m_bgp_session_type = bgp_session_type;
    m_bgp_session_type_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_bgp_session_type_Set() const{
    return m_bgp_session_type_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_bgp_session_type_Valid() const{
    return m_bgp_session_type_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getBillingAccount() const {
    return m_billing_account;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setBillingAccount(const QString &billing_account) {
    m_billing_account = billing_account;
    m_billing_account_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_billing_account_Set() const{
    return m_billing_account_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_billing_account_Valid() const{
    return m_billing_account_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getContractRef() const {
    return m_contract_ref;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setContractRef(const QString &contract_ref) {
    m_contract_ref = contract_ref;
    m_contract_ref_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_contract_ref_Set() const{
    return m_contract_ref_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_contract_ref_Valid() const{
    return m_contract_ref_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getExternalRef() const {
    return m_external_ref;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::isInsertIxpAsn() const {
    return m_insert_ixp_asn;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setInsertIxpAsn(const bool &insert_ixp_asn) {
    m_insert_ixp_asn = insert_ixp_asn;
    m_insert_ixp_asn_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_insert_ixp_asn_Set() const{
    return m_insert_ixp_asn_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_insert_ixp_asn_Valid() const{
    return m_insert_ixp_asn_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getIp() const {
    return m_ip;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getManagingAccount() const {
    return m_managing_account;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

qint32 OAIRouteServerNetworkFeatureConfigRequestPartial::getMaxPrefixV4() const {
    return m_max_prefix_v4;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setMaxPrefixV4(const qint32 &max_prefix_v4) {
    m_max_prefix_v4 = max_prefix_v4;
    m_max_prefix_v4_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_max_prefix_v4_Set() const{
    return m_max_prefix_v4_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_max_prefix_v4_Valid() const{
    return m_max_prefix_v4_isValid;
}

qint32 OAIRouteServerNetworkFeatureConfigRequestPartial::getMaxPrefixV6() const {
    return m_max_prefix_v6;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setMaxPrefixV6(const qint32 &max_prefix_v6) {
    m_max_prefix_v6 = max_prefix_v6;
    m_max_prefix_v6_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_max_prefix_v6_Set() const{
    return m_max_prefix_v6_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_max_prefix_v6_Valid() const{
    return m_max_prefix_v6_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getNetworkFeature() const {
    return m_network_feature;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setNetworkFeature(const QString &network_feature) {
    m_network_feature = network_feature;
    m_network_feature_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_network_feature_Set() const{
    return m_network_feature_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_network_feature_Valid() const{
    return m_network_feature_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getNetworkServiceConfig() const {
    return m_network_service_config;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setNetworkServiceConfig(const QString &network_service_config) {
    m_network_service_config = network_service_config;
    m_network_service_config_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_network_service_config_Set() const{
    return m_network_service_config_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_network_service_config_Valid() const{
    return m_network_service_config_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getPassword() const {
    return m_password;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_password_Set() const{
    return m_password_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

QList<QString> OAIRouteServerNetworkFeatureConfigRequestPartial::getRoleAssignments() const {
    return m_role_assignments;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setRoleAssignments(const QList<QString> &role_assignments) {
    m_role_assignments = role_assignments;
    m_role_assignments_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getSessionMode() const {
    return m_session_mode;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setSessionMode(const QString &session_mode) {
    m_session_mode = session_mode;
    m_session_mode_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_session_mode_Set() const{
    return m_session_mode_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_session_mode_Valid() const{
    return m_session_mode_isValid;
}

QString OAIRouteServerNetworkFeatureConfigRequestPartial::getType() const {
    return m_type;
}
void OAIRouteServerNetworkFeatureConfigRequestPartial::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_as_set_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_set_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bgp_session_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_ixp_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_prefix_v4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_prefix_v6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_feature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_service_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteServerNetworkFeatureConfigRequestPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
