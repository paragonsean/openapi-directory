/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIpsApi_H
#define OAI_OAIIpsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccounts_list_400_response.h"
#include "OAIAccounts_list_401_response.h"
#include "OAIAccounts_list_403_response.h"
#include "OAIAccounts_read_404_response.h"
#include "OAIIpAddress.h"
#include "OAIIpAddressRequest.h"
#include "OAIIpAddressUpdate.h"
#include "OAIIpAddressUpdatePartial.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIpsApi : public QObject {
    Q_OBJECT

public:
    OAIIpsApi(const int timeOut = 0);
    ~OAIIpsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oaiip_address_request OAIIpAddressRequest [optional]
    */
    virtual void ipsCreate(const ::OpenAPI::OptionalParam<OAIIpAddressRequest> &oaiip_address_request = ::OpenAPI::OptionalParam<OAIIpAddressRequest>());

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  managing_account QString [optional]
    * @param[in]  consuming_account QString [optional]
    * @param[in]  external_ref QString [optional]
    * @param[in]  network_service QString [optional]
    * @param[in]  network_service_config QString [optional]
    * @param[in]  network_feature QString [optional]
    * @param[in]  network_feature_config QString [optional]
    * @param[in]  version qint32 [optional]
    * @param[in]  fqdn QString [optional]
    * @param[in]  prefix_length qint32 [optional]
    * @param[in]  valid_not_before QString [optional]
    * @param[in]  valid_not_after QString [optional]
    */
    virtual void ipsList(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &managing_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consuming_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_service = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_service_config = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_feature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &network_feature_config = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &fqdn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &prefix_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &valid_not_before = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &valid_not_after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaiip_address_update_partial OAIIpAddressUpdatePartial [optional]
    */
    virtual void ipsPartialUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAIIpAddressUpdatePartial> &oaiip_address_update_partial = ::OpenAPI::OptionalParam<OAIIpAddressUpdatePartial>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void ipsRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oaiip_address_update OAIIpAddressUpdate [optional]
    */
    virtual void ipsUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAIIpAddressUpdate> &oaiip_address_update = ::OpenAPI::OptionalParam<OAIIpAddressUpdate>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ipsCreateCallback(OAIHttpRequestWorker *worker);
    void ipsListCallback(OAIHttpRequestWorker *worker);
    void ipsPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void ipsReadCallback(OAIHttpRequestWorker *worker);
    void ipsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ipsCreateSignal(OAIIpAddress summary);
    void ipsListSignal(QList<OAIIpAddress> summary);
    void ipsPartialUpdateSignal(OAIIpAddress summary);
    void ipsReadSignal(OAIIpAddress summary);
    void ipsUpdateSignal(OAIIpAddress summary);


    void ipsCreateSignalFull(OAIHttpRequestWorker *worker, OAIIpAddress summary);
    void ipsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIIpAddress> summary);
    void ipsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIpAddress summary);
    void ipsReadSignalFull(OAIHttpRequestWorker *worker, OAIIpAddress summary);
    void ipsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIpAddress summary);

    Q_DECL_DEPRECATED_X("Use ipsCreateSignalError() instead")
    void ipsCreateSignalE(OAIIpAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCreateSignalError(OAIIpAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsListSignalError() instead")
    void ipsListSignalE(QList<OAIIpAddress> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsListSignalError(QList<OAIIpAddress> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsPartialUpdateSignalError() instead")
    void ipsPartialUpdateSignalE(OAIIpAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsPartialUpdateSignalError(OAIIpAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsReadSignalError() instead")
    void ipsReadSignalE(OAIIpAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsReadSignalError(OAIIpAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsUpdateSignalError() instead")
    void ipsUpdateSignalE(OAIIpAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsUpdateSignalError(OAIIpAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ipsCreateSignalErrorFull() instead")
    void ipsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsListSignalErrorFull() instead")
    void ipsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsPartialUpdateSignalErrorFull() instead")
    void ipsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsReadSignalErrorFull() instead")
    void ipsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ipsUpdateSignalErrorFull() instead")
    void ipsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ipsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
