/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpAddressRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpAddressRequest::OAIIpAddressRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpAddressRequest::OAIIpAddressRequest() {
    this->initializeModel();
}

OAIIpAddressRequest::~OAIIpAddressRequest() {}

void OAIIpAddressRequest::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_prefix_length_isSet = false;
    m_prefix_length_isValid = false;

    m_valid_not_after_isSet = false;
    m_valid_not_after_isValid = false;

    m_valid_not_before_isSet = false;
    m_valid_not_before_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIIpAddressRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpAddressRequest::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_prefix_length, json[QString("prefix_length")]);
    m_prefix_length_isSet = !json[QString("prefix_length")].isNull() && m_prefix_length_isValid;

    m_valid_not_after_isValid = ::OpenAPI::fromJsonValue(m_valid_not_after, json[QString("valid_not_after")]);
    m_valid_not_after_isSet = !json[QString("valid_not_after")].isNull() && m_valid_not_after_isValid;

    m_valid_not_before_isValid = ::OpenAPI::fromJsonValue(m_valid_not_before, json[QString("valid_not_before")]);
    m_valid_not_before_isSet = !json[QString("valid_not_before")].isNull() && m_valid_not_before_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIIpAddressRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpAddressRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_prefix_length_isSet) {
        obj.insert(QString("prefix_length"), ::OpenAPI::toJsonValue(m_prefix_length));
    }
    if (m_valid_not_after_isSet) {
        obj.insert(QString("valid_not_after"), ::OpenAPI::toJsonValue(m_valid_not_after));
    }
    if (m_valid_not_before_isSet) {
        obj.insert(QString("valid_not_before"), ::OpenAPI::toJsonValue(m_valid_not_before));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIIpAddressRequest::getAddress() const {
    return m_address;
}
void OAIIpAddressRequest::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIIpAddressRequest::is_address_Set() const{
    return m_address_isSet;
}

bool OAIIpAddressRequest::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIIpAddressRequest::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIIpAddressRequest::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIIpAddressRequest::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIIpAddressRequest::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIIpAddressRequest::getExternalRef() const {
    return m_external_ref;
}
void OAIIpAddressRequest::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIIpAddressRequest::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIIpAddressRequest::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIIpAddressRequest::getFqdn() const {
    return m_fqdn;
}
void OAIIpAddressRequest::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIIpAddressRequest::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIIpAddressRequest::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAIIpAddressRequest::getManagingAccount() const {
    return m_managing_account;
}
void OAIIpAddressRequest::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIIpAddressRequest::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIIpAddressRequest::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

qint32 OAIIpAddressRequest::getPrefixLength() const {
    return m_prefix_length;
}
void OAIIpAddressRequest::setPrefixLength(const qint32 &prefix_length) {
    m_prefix_length = prefix_length;
    m_prefix_length_isSet = true;
}

bool OAIIpAddressRequest::is_prefix_length_Set() const{
    return m_prefix_length_isSet;
}

bool OAIIpAddressRequest::is_prefix_length_Valid() const{
    return m_prefix_length_isValid;
}

QDateTime OAIIpAddressRequest::getValidNotAfter() const {
    return m_valid_not_after;
}
void OAIIpAddressRequest::setValidNotAfter(const QDateTime &valid_not_after) {
    m_valid_not_after = valid_not_after;
    m_valid_not_after_isSet = true;
}

bool OAIIpAddressRequest::is_valid_not_after_Set() const{
    return m_valid_not_after_isSet;
}

bool OAIIpAddressRequest::is_valid_not_after_Valid() const{
    return m_valid_not_after_isValid;
}

QDateTime OAIIpAddressRequest::getValidNotBefore() const {
    return m_valid_not_before;
}
void OAIIpAddressRequest::setValidNotBefore(const QDateTime &valid_not_before) {
    m_valid_not_before = valid_not_before;
    m_valid_not_before_isSet = true;
}

bool OAIIpAddressRequest::is_valid_not_before_Set() const{
    return m_valid_not_before_isSet;
}

bool OAIIpAddressRequest::is_valid_not_before_Valid() const{
    return m_valid_not_before_isValid;
}

qint32 OAIIpAddressRequest::getVersion() const {
    return m_version;
}
void OAIIpAddressRequest::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIpAddressRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIpAddressRequest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIIpAddressRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpAddressRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_consuming_account_isValid && m_managing_account_isValid && m_prefix_length_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
