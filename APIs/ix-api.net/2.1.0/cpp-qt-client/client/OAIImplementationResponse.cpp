/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImplementationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImplementationResponse::OAIImplementationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImplementationResponse::OAIImplementationResponse() {
    this->initializeModel();
}

OAIImplementationResponse::~OAIImplementationResponse() {}

void OAIImplementationResponse::initializeModel() {

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_service_version_isSet = false;
    m_service_version_isValid = false;

    m_supported_network_feature_config_types_isSet = false;
    m_supported_network_feature_config_types_isValid = false;

    m_supported_network_feature_types_isSet = false;
    m_supported_network_feature_types_isValid = false;

    m_supported_network_service_config_types_isSet = false;
    m_supported_network_service_config_types_isValid = false;

    m_supported_network_service_types_isSet = false;
    m_supported_network_service_types_isValid = false;

    m_supported_operations_isSet = false;
    m_supported_operations_isValid = false;
}

void OAIImplementationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImplementationResponse::fromJsonObject(QJsonObject json) {

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schema_version")]);
    m_schema_version_isSet = !json[QString("schema_version")].isNull() && m_schema_version_isValid;

    m_service_version_isValid = ::OpenAPI::fromJsonValue(m_service_version, json[QString("service_version")]);
    m_service_version_isSet = !json[QString("service_version")].isNull() && m_service_version_isValid;

    m_supported_network_feature_config_types_isValid = ::OpenAPI::fromJsonValue(m_supported_network_feature_config_types, json[QString("supported_network_feature_config_types")]);
    m_supported_network_feature_config_types_isSet = !json[QString("supported_network_feature_config_types")].isNull() && m_supported_network_feature_config_types_isValid;

    m_supported_network_feature_types_isValid = ::OpenAPI::fromJsonValue(m_supported_network_feature_types, json[QString("supported_network_feature_types")]);
    m_supported_network_feature_types_isSet = !json[QString("supported_network_feature_types")].isNull() && m_supported_network_feature_types_isValid;

    m_supported_network_service_config_types_isValid = ::OpenAPI::fromJsonValue(m_supported_network_service_config_types, json[QString("supported_network_service_config_types")]);
    m_supported_network_service_config_types_isSet = !json[QString("supported_network_service_config_types")].isNull() && m_supported_network_service_config_types_isValid;

    m_supported_network_service_types_isValid = ::OpenAPI::fromJsonValue(m_supported_network_service_types, json[QString("supported_network_service_types")]);
    m_supported_network_service_types_isSet = !json[QString("supported_network_service_types")].isNull() && m_supported_network_service_types_isValid;

    m_supported_operations_isValid = ::OpenAPI::fromJsonValue(m_supported_operations, json[QString("supported_operations")]);
    m_supported_operations_isSet = !json[QString("supported_operations")].isNull() && m_supported_operations_isValid;
}

QString OAIImplementationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImplementationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_version_isSet) {
        obj.insert(QString("schema_version"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_service_version_isSet) {
        obj.insert(QString("service_version"), ::OpenAPI::toJsonValue(m_service_version));
    }
    if (m_supported_network_feature_config_types.size() > 0) {
        obj.insert(QString("supported_network_feature_config_types"), ::OpenAPI::toJsonValue(m_supported_network_feature_config_types));
    }
    if (m_supported_network_feature_types.size() > 0) {
        obj.insert(QString("supported_network_feature_types"), ::OpenAPI::toJsonValue(m_supported_network_feature_types));
    }
    if (m_supported_network_service_config_types.size() > 0) {
        obj.insert(QString("supported_network_service_config_types"), ::OpenAPI::toJsonValue(m_supported_network_service_config_types));
    }
    if (m_supported_network_service_types.size() > 0) {
        obj.insert(QString("supported_network_service_types"), ::OpenAPI::toJsonValue(m_supported_network_service_types));
    }
    if (m_supported_operations.size() > 0) {
        obj.insert(QString("supported_operations"), ::OpenAPI::toJsonValue(m_supported_operations));
    }
    return obj;
}

QString OAIImplementationResponse::getSchemaVersion() const {
    return m_schema_version;
}
void OAIImplementationResponse::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIImplementationResponse::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIImplementationResponse::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAIImplementationResponse::getServiceVersion() const {
    return m_service_version;
}
void OAIImplementationResponse::setServiceVersion(const QString &service_version) {
    m_service_version = service_version;
    m_service_version_isSet = true;
}

bool OAIImplementationResponse::is_service_version_Set() const{
    return m_service_version_isSet;
}

bool OAIImplementationResponse::is_service_version_Valid() const{
    return m_service_version_isValid;
}

QList<QString> OAIImplementationResponse::getSupportedNetworkFeatureConfigTypes() const {
    return m_supported_network_feature_config_types;
}
void OAIImplementationResponse::setSupportedNetworkFeatureConfigTypes(const QList<QString> &supported_network_feature_config_types) {
    m_supported_network_feature_config_types = supported_network_feature_config_types;
    m_supported_network_feature_config_types_isSet = true;
}

bool OAIImplementationResponse::is_supported_network_feature_config_types_Set() const{
    return m_supported_network_feature_config_types_isSet;
}

bool OAIImplementationResponse::is_supported_network_feature_config_types_Valid() const{
    return m_supported_network_feature_config_types_isValid;
}

QList<QString> OAIImplementationResponse::getSupportedNetworkFeatureTypes() const {
    return m_supported_network_feature_types;
}
void OAIImplementationResponse::setSupportedNetworkFeatureTypes(const QList<QString> &supported_network_feature_types) {
    m_supported_network_feature_types = supported_network_feature_types;
    m_supported_network_feature_types_isSet = true;
}

bool OAIImplementationResponse::is_supported_network_feature_types_Set() const{
    return m_supported_network_feature_types_isSet;
}

bool OAIImplementationResponse::is_supported_network_feature_types_Valid() const{
    return m_supported_network_feature_types_isValid;
}

QList<QString> OAIImplementationResponse::getSupportedNetworkServiceConfigTypes() const {
    return m_supported_network_service_config_types;
}
void OAIImplementationResponse::setSupportedNetworkServiceConfigTypes(const QList<QString> &supported_network_service_config_types) {
    m_supported_network_service_config_types = supported_network_service_config_types;
    m_supported_network_service_config_types_isSet = true;
}

bool OAIImplementationResponse::is_supported_network_service_config_types_Set() const{
    return m_supported_network_service_config_types_isSet;
}

bool OAIImplementationResponse::is_supported_network_service_config_types_Valid() const{
    return m_supported_network_service_config_types_isValid;
}

QList<QString> OAIImplementationResponse::getSupportedNetworkServiceTypes() const {
    return m_supported_network_service_types;
}
void OAIImplementationResponse::setSupportedNetworkServiceTypes(const QList<QString> &supported_network_service_types) {
    m_supported_network_service_types = supported_network_service_types;
    m_supported_network_service_types_isSet = true;
}

bool OAIImplementationResponse::is_supported_network_service_types_Set() const{
    return m_supported_network_service_types_isSet;
}

bool OAIImplementationResponse::is_supported_network_service_types_Valid() const{
    return m_supported_network_service_types_isValid;
}

QList<QString> OAIImplementationResponse::getSupportedOperations() const {
    return m_supported_operations;
}
void OAIImplementationResponse::setSupportedOperations(const QList<QString> &supported_operations) {
    m_supported_operations = supported_operations;
    m_supported_operations_isSet = true;
}

bool OAIImplementationResponse::is_supported_operations_Set() const{
    return m_supported_operations_isSet;
}

bool OAIImplementationResponse::is_supported_operations_Valid() const{
    return m_supported_operations_isValid;
}

bool OAIImplementationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_network_feature_config_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_network_feature_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_network_service_config_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_network_service_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImplementationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_version_isValid && m_supported_network_feature_config_types_isValid && m_supported_network_feature_types_isValid && m_supported_network_service_config_types_isValid && m_supported_network_service_types_isValid && m_supported_operations_isValid && true;
}

} // namespace OpenAPI
