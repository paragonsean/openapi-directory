/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExchangeLanNetworkProductOfferingPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExchangeLanNetworkProductOfferingPartial::OAIExchangeLanNetworkProductOfferingPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExchangeLanNetworkProductOfferingPartial::OAIExchangeLanNetworkProductOfferingPartial() {
    this->initializeModel();
}

OAIExchangeLanNetworkProductOfferingPartial::~OAIExchangeLanNetworkProductOfferingPartial() {}

void OAIExchangeLanNetworkProductOfferingPartial::initializeModel() {

    m_bandwidth_max_isSet = false;
    m_bandwidth_max_isValid = false;

    m_bandwidth_min_isSet = false;
    m_bandwidth_min_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_downgrade_allowed_isSet = false;
    m_downgrade_allowed_isValid = false;

    m_exchange_lan_network_service_isSet = false;
    m_exchange_lan_network_service_isValid = false;

    m_handover_metro_area_isSet = false;
    m_handover_metro_area_isValid = false;

    m_handover_metro_area_network_isSet = false;
    m_handover_metro_area_network_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_physical_port_speed_isSet = false;
    m_physical_port_speed_isValid = false;

    m_provider_vlans_isSet = false;
    m_provider_vlans_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_service_metro_area_isSet = false;
    m_service_metro_area_isValid = false;

    m_service_metro_area_network_isSet = false;
    m_service_metro_area_network_isValid = false;

    m_service_provider_isSet = false;
    m_service_provider_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_upgrade_allowed_isSet = false;
    m_upgrade_allowed_isValid = false;
}

void OAIExchangeLanNetworkProductOfferingPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExchangeLanNetworkProductOfferingPartial::fromJsonObject(QJsonObject json) {

    m_bandwidth_max_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_max, json[QString("bandwidth_max")]);
    m_bandwidth_max_isSet = !json[QString("bandwidth_max")].isNull() && m_bandwidth_max_isValid;

    m_bandwidth_min_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_min, json[QString("bandwidth_min")]);
    m_bandwidth_min_isSet = !json[QString("bandwidth_min")].isNull() && m_bandwidth_min_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_downgrade_allowed_isValid = ::OpenAPI::fromJsonValue(m_downgrade_allowed, json[QString("downgrade_allowed")]);
    m_downgrade_allowed_isSet = !json[QString("downgrade_allowed")].isNull() && m_downgrade_allowed_isValid;

    m_exchange_lan_network_service_isValid = ::OpenAPI::fromJsonValue(m_exchange_lan_network_service, json[QString("exchange_lan_network_service")]);
    m_exchange_lan_network_service_isSet = !json[QString("exchange_lan_network_service")].isNull() && m_exchange_lan_network_service_isValid;

    m_handover_metro_area_isValid = ::OpenAPI::fromJsonValue(m_handover_metro_area, json[QString("handover_metro_area")]);
    m_handover_metro_area_isSet = !json[QString("handover_metro_area")].isNull() && m_handover_metro_area_isValid;

    m_handover_metro_area_network_isValid = ::OpenAPI::fromJsonValue(m_handover_metro_area_network, json[QString("handover_metro_area_network")]);
    m_handover_metro_area_network_isSet = !json[QString("handover_metro_area_network")].isNull() && m_handover_metro_area_network_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_physical_port_speed_isValid = ::OpenAPI::fromJsonValue(m_physical_port_speed, json[QString("physical_port_speed")]);
    m_physical_port_speed_isSet = !json[QString("physical_port_speed")].isNull() && m_physical_port_speed_isValid;

    m_provider_vlans_isValid = ::OpenAPI::fromJsonValue(m_provider_vlans, json[QString("provider_vlans")]);
    m_provider_vlans_isSet = !json[QString("provider_vlans")].isNull() && m_provider_vlans_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_service_metro_area_isValid = ::OpenAPI::fromJsonValue(m_service_metro_area, json[QString("service_metro_area")]);
    m_service_metro_area_isSet = !json[QString("service_metro_area")].isNull() && m_service_metro_area_isValid;

    m_service_metro_area_network_isValid = ::OpenAPI::fromJsonValue(m_service_metro_area_network, json[QString("service_metro_area_network")]);
    m_service_metro_area_network_isSet = !json[QString("service_metro_area_network")].isNull() && m_service_metro_area_network_isValid;

    m_service_provider_isValid = ::OpenAPI::fromJsonValue(m_service_provider, json[QString("service_provider")]);
    m_service_provider_isSet = !json[QString("service_provider")].isNull() && m_service_provider_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_upgrade_allowed_isValid = ::OpenAPI::fromJsonValue(m_upgrade_allowed, json[QString("upgrade_allowed")]);
    m_upgrade_allowed_isSet = !json[QString("upgrade_allowed")].isNull() && m_upgrade_allowed_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExchangeLanNetworkProductOfferingPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_max_isSet) {
        obj.insert(QString("bandwidth_max"), ::OpenAPI::toJsonValue(m_bandwidth_max));
    }
    if (m_bandwidth_min_isSet) {
        obj.insert(QString("bandwidth_min"), ::OpenAPI::toJsonValue(m_bandwidth_min));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_downgrade_allowed_isSet) {
        obj.insert(QString("downgrade_allowed"), ::OpenAPI::toJsonValue(m_downgrade_allowed));
    }
    if (m_exchange_lan_network_service_isSet) {
        obj.insert(QString("exchange_lan_network_service"), ::OpenAPI::toJsonValue(m_exchange_lan_network_service));
    }
    if (m_handover_metro_area_isSet) {
        obj.insert(QString("handover_metro_area"), ::OpenAPI::toJsonValue(m_handover_metro_area));
    }
    if (m_handover_metro_area_network_isSet) {
        obj.insert(QString("handover_metro_area_network"), ::OpenAPI::toJsonValue(m_handover_metro_area_network));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_physical_port_speed_isSet) {
        obj.insert(QString("physical_port_speed"), ::OpenAPI::toJsonValue(m_physical_port_speed));
    }
    if (m_provider_vlans_isSet) {
        obj.insert(QString("provider_vlans"), ::OpenAPI::toJsonValue(m_provider_vlans));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_service_metro_area_isSet) {
        obj.insert(QString("service_metro_area"), ::OpenAPI::toJsonValue(m_service_metro_area));
    }
    if (m_service_metro_area_network_isSet) {
        obj.insert(QString("service_metro_area_network"), ::OpenAPI::toJsonValue(m_service_metro_area_network));
    }
    if (m_service_provider_isSet) {
        obj.insert(QString("service_provider"), ::OpenAPI::toJsonValue(m_service_provider));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_upgrade_allowed_isSet) {
        obj.insert(QString("upgrade_allowed"), ::OpenAPI::toJsonValue(m_upgrade_allowed));
    }
    return obj;
}

qint32 OAIExchangeLanNetworkProductOfferingPartial::getBandwidthMax() const {
    return m_bandwidth_max;
}
void OAIExchangeLanNetworkProductOfferingPartial::setBandwidthMax(const qint32 &bandwidth_max) {
    m_bandwidth_max = bandwidth_max;
    m_bandwidth_max_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_bandwidth_max_Set() const{
    return m_bandwidth_max_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_bandwidth_max_Valid() const{
    return m_bandwidth_max_isValid;
}

qint32 OAIExchangeLanNetworkProductOfferingPartial::getBandwidthMin() const {
    return m_bandwidth_min;
}
void OAIExchangeLanNetworkProductOfferingPartial::setBandwidthMin(const qint32 &bandwidth_min) {
    m_bandwidth_min = bandwidth_min;
    m_bandwidth_min_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_bandwidth_min_Set() const{
    return m_bandwidth_min_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_bandwidth_min_Valid() const{
    return m_bandwidth_min_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getDisplayName() const {
    return m_display_name;
}
void OAIExchangeLanNetworkProductOfferingPartial::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIExchangeLanNetworkProductOfferingPartial::isDowngradeAllowed() const {
    return m_downgrade_allowed;
}
void OAIExchangeLanNetworkProductOfferingPartial::setDowngradeAllowed(const bool &downgrade_allowed) {
    m_downgrade_allowed = downgrade_allowed;
    m_downgrade_allowed_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_downgrade_allowed_Set() const{
    return m_downgrade_allowed_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_downgrade_allowed_Valid() const{
    return m_downgrade_allowed_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getExchangeLanNetworkService() const {
    return m_exchange_lan_network_service;
}
void OAIExchangeLanNetworkProductOfferingPartial::setExchangeLanNetworkService(const QString &exchange_lan_network_service) {
    m_exchange_lan_network_service = exchange_lan_network_service;
    m_exchange_lan_network_service_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_exchange_lan_network_service_Set() const{
    return m_exchange_lan_network_service_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_exchange_lan_network_service_Valid() const{
    return m_exchange_lan_network_service_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getHandoverMetroArea() const {
    return m_handover_metro_area;
}
void OAIExchangeLanNetworkProductOfferingPartial::setHandoverMetroArea(const QString &handover_metro_area) {
    m_handover_metro_area = handover_metro_area;
    m_handover_metro_area_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_handover_metro_area_Set() const{
    return m_handover_metro_area_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_handover_metro_area_Valid() const{
    return m_handover_metro_area_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getHandoverMetroAreaNetwork() const {
    return m_handover_metro_area_network;
}
void OAIExchangeLanNetworkProductOfferingPartial::setHandoverMetroAreaNetwork(const QString &handover_metro_area_network) {
    m_handover_metro_area_network = handover_metro_area_network;
    m_handover_metro_area_network_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_handover_metro_area_network_Set() const{
    return m_handover_metro_area_network_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_handover_metro_area_network_Valid() const{
    return m_handover_metro_area_network_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getId() const {
    return m_id;
}
void OAIExchangeLanNetworkProductOfferingPartial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getName() const {
    return m_name;
}
void OAIExchangeLanNetworkProductOfferingPartial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIExchangeLanNetworkProductOfferingPartial::getPhysicalPortSpeed() const {
    return m_physical_port_speed;
}
void OAIExchangeLanNetworkProductOfferingPartial::setPhysicalPortSpeed(const qint32 &physical_port_speed) {
    m_physical_port_speed = physical_port_speed;
    m_physical_port_speed_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_physical_port_speed_Set() const{
    return m_physical_port_speed_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_physical_port_speed_Valid() const{
    return m_physical_port_speed_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getProviderVlans() const {
    return m_provider_vlans;
}
void OAIExchangeLanNetworkProductOfferingPartial::setProviderVlans(const QString &provider_vlans) {
    m_provider_vlans = provider_vlans;
    m_provider_vlans_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_provider_vlans_Set() const{
    return m_provider_vlans_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_provider_vlans_Valid() const{
    return m_provider_vlans_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getResourceType() const {
    return m_resource_type;
}
void OAIExchangeLanNetworkProductOfferingPartial::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getServiceMetroArea() const {
    return m_service_metro_area;
}
void OAIExchangeLanNetworkProductOfferingPartial::setServiceMetroArea(const QString &service_metro_area) {
    m_service_metro_area = service_metro_area;
    m_service_metro_area_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_service_metro_area_Set() const{
    return m_service_metro_area_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_service_metro_area_Valid() const{
    return m_service_metro_area_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getServiceMetroAreaNetwork() const {
    return m_service_metro_area_network;
}
void OAIExchangeLanNetworkProductOfferingPartial::setServiceMetroAreaNetwork(const QString &service_metro_area_network) {
    m_service_metro_area_network = service_metro_area_network;
    m_service_metro_area_network_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_service_metro_area_network_Set() const{
    return m_service_metro_area_network_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_service_metro_area_network_Valid() const{
    return m_service_metro_area_network_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getServiceProvider() const {
    return m_service_provider;
}
void OAIExchangeLanNetworkProductOfferingPartial::setServiceProvider(const QString &service_provider) {
    m_service_provider = service_provider;
    m_service_provider_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_service_provider_Set() const{
    return m_service_provider_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_service_provider_Valid() const{
    return m_service_provider_isValid;
}

QString OAIExchangeLanNetworkProductOfferingPartial::getType() const {
    return m_type;
}
void OAIExchangeLanNetworkProductOfferingPartial::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExchangeLanNetworkProductOfferingPartial::isUpgradeAllowed() const {
    return m_upgrade_allowed;
}
void OAIExchangeLanNetworkProductOfferingPartial::setUpgradeAllowed(const bool &upgrade_allowed) {
    m_upgrade_allowed = upgrade_allowed;
    m_upgrade_allowed_isSet = true;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_upgrade_allowed_Set() const{
    return m_upgrade_allowed_isSet;
}

bool OAIExchangeLanNetworkProductOfferingPartial::is_upgrade_allowed_Valid() const{
    return m_upgrade_allowed_isValid;
}

bool OAIExchangeLanNetworkProductOfferingPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downgrade_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_lan_network_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handover_metro_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handover_metro_area_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_port_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_vlans_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_metro_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_metro_area_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExchangeLanNetworkProductOfferingPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
