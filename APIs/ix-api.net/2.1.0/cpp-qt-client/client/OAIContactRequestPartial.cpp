/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactRequestPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactRequestPartial::OAIContactRequestPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactRequestPartial::OAIContactRequestPartial() {
    this->initializeModel();
}

OAIContactRequestPartial::~OAIContactRequestPartial() {}

void OAIContactRequestPartial::initializeModel() {

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_telephone_isSet = false;
    m_telephone_isValid = false;
}

void OAIContactRequestPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactRequestPartial::fromJsonObject(QJsonObject json) {

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_telephone_isValid = ::OpenAPI::fromJsonValue(m_telephone, json[QString("telephone")]);
    m_telephone_isSet = !json[QString("telephone")].isNull() && m_telephone_isValid;
}

QString OAIContactRequestPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactRequestPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_telephone_isSet) {
        obj.insert(QString("telephone"), ::OpenAPI::toJsonValue(m_telephone));
    }
    return obj;
}

QString OAIContactRequestPartial::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIContactRequestPartial::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIContactRequestPartial::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIContactRequestPartial::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIContactRequestPartial::getEmail() const {
    return m_email;
}
void OAIContactRequestPartial::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIContactRequestPartial::is_email_Set() const{
    return m_email_isSet;
}

bool OAIContactRequestPartial::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIContactRequestPartial::getExternalRef() const {
    return m_external_ref;
}
void OAIContactRequestPartial::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIContactRequestPartial::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIContactRequestPartial::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIContactRequestPartial::getManagingAccount() const {
    return m_managing_account;
}
void OAIContactRequestPartial::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIContactRequestPartial::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIContactRequestPartial::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QString OAIContactRequestPartial::getName() const {
    return m_name;
}
void OAIContactRequestPartial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContactRequestPartial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContactRequestPartial::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIContactRequestPartial::getTelephone() const {
    return m_telephone;
}
void OAIContactRequestPartial::setTelephone(const QString &telephone) {
    m_telephone = telephone;
    m_telephone_isSet = true;
}

bool OAIContactRequestPartial::is_telephone_Set() const{
    return m_telephone_isSet;
}

bool OAIContactRequestPartial::is_telephone_Valid() const{
    return m_telephone_isValid;
}

bool OAIContactRequestPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactRequestPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
