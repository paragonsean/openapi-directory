/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworkServicesApi_H
#define OAI_OAINetworkServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccounts_list_400_response.h"
#include "OAIAccounts_list_401_response.h"
#include "OAIAccounts_list_403_response.h"
#include "OAIAccounts_read_404_response.h"
#include "OAICancellationPolicy.h"
#include "OAICancellationRequest.h"
#include "OAIContacts_destroy_400_response.h"
#include "OAINetworkService.h"
#include "OAINetworkServiceChangeRequest.h"
#include "OAINetworkServiceRequest.h"
#include "OAINetworkServiceRequestPartial.h"
#include "OAINetwork_service_configs_destroy_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworkServicesApi : public QObject {
    Q_OBJECT

public:
    OAINetworkServicesApi(const int timeOut = 0);
    ~OAINetworkServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  decommission_at QString [optional]
    */
    virtual void networkServiceCancellationPolicyRead(const QString &id, const ::OpenAPI::OptionalParam<QString> &decommission_at = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_network_service_change_request OAINetworkServiceChangeRequest [optional]
    */
    virtual void networkServiceChangeRequestCreate(const QString &id, const ::OpenAPI::OptionalParam<OAINetworkServiceChangeRequest> &oai_network_service_change_request = ::OpenAPI::OptionalParam<OAINetworkServiceChangeRequest>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void networkServiceChangeRequestDestroy(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void networkServiceChangeRequestRead(const QString &id);

    /**
    * @param[in]  oai_network_service_request OAINetworkServiceRequest [optional]
    */
    virtual void networkServicesCreate(const ::OpenAPI::OptionalParam<OAINetworkServiceRequest> &oai_network_service_request = ::OpenAPI::OptionalParam<OAINetworkServiceRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_cancellation_request OAICancellationRequest [optional]
    */
    virtual void networkServicesDestroy(const QString &id, const ::OpenAPI::OptionalParam<OAICancellationRequest> &oai_cancellation_request = ::OpenAPI::OptionalParam<OAICancellationRequest>());

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  state QString [optional]
    * @param[in]  state__is_not QString [optional]
    * @param[in]  managing_account QString [optional]
    * @param[in]  consuming_account QString [optional]
    * @param[in]  external_ref QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  pop QString [optional]
    * @param[in]  product_offering QString [optional]
    */
    virtual void networkServicesList(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state__is_not = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &managing_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &consuming_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &external_ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pop = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_offering = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_network_service_request_partial OAINetworkServiceRequestPartial [optional]
    */
    virtual void networkServicesPartialUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAINetworkServiceRequestPartial> &oai_network_service_request_partial = ::OpenAPI::OptionalParam<OAINetworkServiceRequestPartial>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void networkServicesRead(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_network_service_request OAINetworkServiceRequest [optional]
    */
    virtual void networkServicesUpdate(const QString &id, const ::OpenAPI::OptionalParam<OAINetworkServiceRequest> &oai_network_service_request = ::OpenAPI::OptionalParam<OAINetworkServiceRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networkServiceCancellationPolicyReadCallback(OAIHttpRequestWorker *worker);
    void networkServiceChangeRequestCreateCallback(OAIHttpRequestWorker *worker);
    void networkServiceChangeRequestDestroyCallback(OAIHttpRequestWorker *worker);
    void networkServiceChangeRequestReadCallback(OAIHttpRequestWorker *worker);
    void networkServicesCreateCallback(OAIHttpRequestWorker *worker);
    void networkServicesDestroyCallback(OAIHttpRequestWorker *worker);
    void networkServicesListCallback(OAIHttpRequestWorker *worker);
    void networkServicesPartialUpdateCallback(OAIHttpRequestWorker *worker);
    void networkServicesReadCallback(OAIHttpRequestWorker *worker);
    void networkServicesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networkServiceCancellationPolicyReadSignal(OAICancellationPolicy summary);
    void networkServiceChangeRequestCreateSignal(OAINetworkServiceChangeRequest summary);
    void networkServiceChangeRequestDestroySignal(OAINetworkServiceChangeRequest summary);
    void networkServiceChangeRequestReadSignal(OAINetworkServiceChangeRequest summary);
    void networkServicesCreateSignal(OAINetworkService summary);
    void networkServicesDestroySignal(OAINetworkService summary);
    void networkServicesListSignal(QList<OAINetworkService> summary);
    void networkServicesPartialUpdateSignal(OAINetworkService summary);
    void networkServicesReadSignal(OAINetworkService summary);
    void networkServicesUpdateSignal(OAINetworkService summary);


    void networkServiceCancellationPolicyReadSignalFull(OAIHttpRequestWorker *worker, OAICancellationPolicy summary);
    void networkServiceChangeRequestCreateSignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceChangeRequest summary);
    void networkServiceChangeRequestDestroySignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceChangeRequest summary);
    void networkServiceChangeRequestReadSignalFull(OAIHttpRequestWorker *worker, OAINetworkServiceChangeRequest summary);
    void networkServicesCreateSignalFull(OAIHttpRequestWorker *worker, OAINetworkService summary);
    void networkServicesDestroySignalFull(OAIHttpRequestWorker *worker, OAINetworkService summary);
    void networkServicesListSignalFull(OAIHttpRequestWorker *worker, QList<OAINetworkService> summary);
    void networkServicesPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkService summary);
    void networkServicesReadSignalFull(OAIHttpRequestWorker *worker, OAINetworkService summary);
    void networkServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkService summary);

    Q_DECL_DEPRECATED_X("Use networkServiceCancellationPolicyReadSignalError() instead")
    void networkServiceCancellationPolicyReadSignalE(OAICancellationPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceCancellationPolicyReadSignalError(OAICancellationPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceChangeRequestCreateSignalError() instead")
    void networkServiceChangeRequestCreateSignalE(OAINetworkServiceChangeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceChangeRequestCreateSignalError(OAINetworkServiceChangeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceChangeRequestDestroySignalError() instead")
    void networkServiceChangeRequestDestroySignalE(OAINetworkServiceChangeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceChangeRequestDestroySignalError(OAINetworkServiceChangeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceChangeRequestReadSignalError() instead")
    void networkServiceChangeRequestReadSignalE(OAINetworkServiceChangeRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceChangeRequestReadSignalError(OAINetworkServiceChangeRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesCreateSignalError() instead")
    void networkServicesCreateSignalE(OAINetworkService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesCreateSignalError(OAINetworkService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesDestroySignalError() instead")
    void networkServicesDestroySignalE(OAINetworkService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesDestroySignalError(OAINetworkService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesListSignalError() instead")
    void networkServicesListSignalE(QList<OAINetworkService> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesListSignalError(QList<OAINetworkService> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesPartialUpdateSignalError() instead")
    void networkServicesPartialUpdateSignalE(OAINetworkService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesPartialUpdateSignalError(OAINetworkService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesReadSignalError() instead")
    void networkServicesReadSignalE(OAINetworkService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesReadSignalError(OAINetworkService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesUpdateSignalError() instead")
    void networkServicesUpdateSignalE(OAINetworkService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesUpdateSignalError(OAINetworkService summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networkServiceCancellationPolicyReadSignalErrorFull() instead")
    void networkServiceCancellationPolicyReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceCancellationPolicyReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceChangeRequestCreateSignalErrorFull() instead")
    void networkServiceChangeRequestCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceChangeRequestCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceChangeRequestDestroySignalErrorFull() instead")
    void networkServiceChangeRequestDestroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceChangeRequestDestroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServiceChangeRequestReadSignalErrorFull() instead")
    void networkServiceChangeRequestReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServiceChangeRequestReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesCreateSignalErrorFull() instead")
    void networkServicesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesDestroySignalErrorFull() instead")
    void networkServicesDestroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesDestroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesListSignalErrorFull() instead")
    void networkServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesPartialUpdateSignalErrorFull() instead")
    void networkServicesPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesReadSignalErrorFull() instead")
    void networkServicesReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkServicesUpdateSignalErrorFull() instead")
    void networkServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
