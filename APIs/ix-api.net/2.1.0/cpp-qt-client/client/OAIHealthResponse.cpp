/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthResponse::OAIHealthResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthResponse::OAIHealthResponse() {
    this->initializeModel();
}

OAIHealthResponse::~OAIHealthResponse() {}

void OAIHealthResponse::initializeModel() {

    m_checks_isSet = false;
    m_checks_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_release_id_isSet = false;
    m_release_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHealthResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthResponse::fromJsonObject(QJsonObject json) {

    if(json["checks"].isObject()){
        auto varmap = json["checks"].toObject().toVariantMap();
        m_checks_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_checks_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_checks_isSet &= !jval.isNull() && m_checks_isValid;
                m_checks.insert(m_checks.end(), val, item);
            }
        }
    }

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_release_id_isValid = ::OpenAPI::fromJsonValue(m_release_id, json[QString("releaseId")]);
    m_release_id_isSet = !json[QString("releaseId")].isNull() && m_release_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHealthResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_checks.size() > 0) {
        
        obj.insert(QString("checks"), toJsonValue(m_checks));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notes.size() > 0) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_output_isSet) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_release_id_isSet) {
        obj.insert(QString("releaseId"), ::OpenAPI::toJsonValue(m_release_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, QMap<QString, QString>> OAIHealthResponse::getChecks() const {
    return m_checks;
}
void OAIHealthResponse::setChecks(const QMap<QString, QMap<QString, QString>> &checks) {
    m_checks = checks;
    m_checks_isSet = true;
}

bool OAIHealthResponse::is_checks_Set() const{
    return m_checks_isSet;
}

bool OAIHealthResponse::is_checks_Valid() const{
    return m_checks_isValid;
}

QString OAIHealthResponse::getDescription() const {
    return m_description;
}
void OAIHealthResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHealthResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHealthResponse::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIHealthResponse::getLinks() const {
    return m_links;
}
void OAIHealthResponse::setLinks(const QMap<QString, QString> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIHealthResponse::is_links_Set() const{
    return m_links_isSet;
}

bool OAIHealthResponse::is_links_Valid() const{
    return m_links_isValid;
}

QList<QString> OAIHealthResponse::getNotes() const {
    return m_notes;
}
void OAIHealthResponse::setNotes(const QList<QString> &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIHealthResponse::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIHealthResponse::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIHealthResponse::getOutput() const {
    return m_output;
}
void OAIHealthResponse::setOutput(const QString &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIHealthResponse::is_output_Set() const{
    return m_output_isSet;
}

bool OAIHealthResponse::is_output_Valid() const{
    return m_output_isValid;
}

QString OAIHealthResponse::getReleaseId() const {
    return m_release_id;
}
void OAIHealthResponse::setReleaseId(const QString &release_id) {
    m_release_id = release_id;
    m_release_id_isSet = true;
}

bool OAIHealthResponse::is_release_id_Set() const{
    return m_release_id_isSet;
}

bool OAIHealthResponse::is_release_id_Valid() const{
    return m_release_id_isValid;
}

QString OAIHealthResponse::getServiceId() const {
    return m_service_id;
}
void OAIHealthResponse::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIHealthResponse::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIHealthResponse::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIHealthResponse::getStatus() const {
    return m_status;
}
void OAIHealthResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHealthResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHealthResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIHealthResponse::getVersion() const {
    return m_version;
}
void OAIHealthResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHealthResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHealthResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHealthResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
