/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacility::OAIFacility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacility::OAIFacility() {
    this->initializeModel();
}

OAIFacility::~OAIFacility() {}

void OAIFacility::initializeModel() {

    m_address_country_isSet = false;
    m_address_country_isValid = false;

    m_address_locality_isSet = false;
    m_address_locality_isValid = false;

    m_address_region_isSet = false;
    m_address_region_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metro_area_isSet = false;
    m_metro_area_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organisation_name_isSet = false;
    m_organisation_name_isValid = false;

    m_peeringdb_facility_id_isSet = false;
    m_peeringdb_facility_id_isValid = false;

    m_pops_isSet = false;
    m_pops_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;
}

void OAIFacility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacility::fromJsonObject(QJsonObject json) {

    m_address_country_isValid = ::OpenAPI::fromJsonValue(m_address_country, json[QString("address_country")]);
    m_address_country_isSet = !json[QString("address_country")].isNull() && m_address_country_isValid;

    m_address_locality_isValid = ::OpenAPI::fromJsonValue(m_address_locality, json[QString("address_locality")]);
    m_address_locality_isSet = !json[QString("address_locality")].isNull() && m_address_locality_isValid;

    m_address_region_isValid = ::OpenAPI::fromJsonValue(m_address_region, json[QString("address_region")]);
    m_address_region_isSet = !json[QString("address_region")].isNull() && m_address_region_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metro_area_isValid = ::OpenAPI::fromJsonValue(m_metro_area, json[QString("metro_area")]);
    m_metro_area_isSet = !json[QString("metro_area")].isNull() && m_metro_area_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organisation_name_isValid = ::OpenAPI::fromJsonValue(m_organisation_name, json[QString("organisation_name")]);
    m_organisation_name_isSet = !json[QString("organisation_name")].isNull() && m_organisation_name_isValid;

    m_peeringdb_facility_id_isValid = ::OpenAPI::fromJsonValue(m_peeringdb_facility_id, json[QString("peeringdb_facility_id")]);
    m_peeringdb_facility_id_isSet = !json[QString("peeringdb_facility_id")].isNull() && m_peeringdb_facility_id_isValid;

    m_pops_isValid = ::OpenAPI::fromJsonValue(m_pops, json[QString("pops")]);
    m_pops_isSet = !json[QString("pops")].isNull() && m_pops_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("street_address")]);
    m_street_address_isSet = !json[QString("street_address")].isNull() && m_street_address_isValid;
}

QString OAIFacility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacility::asJsonObject() const {
    QJsonObject obj;
    if (m_address_country_isSet) {
        obj.insert(QString("address_country"), ::OpenAPI::toJsonValue(m_address_country));
    }
    if (m_address_locality_isSet) {
        obj.insert(QString("address_locality"), ::OpenAPI::toJsonValue(m_address_locality));
    }
    if (m_address_region_isSet) {
        obj.insert(QString("address_region"), ::OpenAPI::toJsonValue(m_address_region));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metro_area_isSet) {
        obj.insert(QString("metro_area"), ::OpenAPI::toJsonValue(m_metro_area));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organisation_name_isSet) {
        obj.insert(QString("organisation_name"), ::OpenAPI::toJsonValue(m_organisation_name));
    }
    if (m_peeringdb_facility_id_isSet) {
        obj.insert(QString("peeringdb_facility_id"), ::OpenAPI::toJsonValue(m_peeringdb_facility_id));
    }
    if (m_pops.size() > 0) {
        obj.insert(QString("pops"), ::OpenAPI::toJsonValue(m_pops));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("street_address"), ::OpenAPI::toJsonValue(m_street_address));
    }
    return obj;
}

QString OAIFacility::getAddressCountry() const {
    return m_address_country;
}
void OAIFacility::setAddressCountry(const QString &address_country) {
    m_address_country = address_country;
    m_address_country_isSet = true;
}

bool OAIFacility::is_address_country_Set() const{
    return m_address_country_isSet;
}

bool OAIFacility::is_address_country_Valid() const{
    return m_address_country_isValid;
}

QString OAIFacility::getAddressLocality() const {
    return m_address_locality;
}
void OAIFacility::setAddressLocality(const QString &address_locality) {
    m_address_locality = address_locality;
    m_address_locality_isSet = true;
}

bool OAIFacility::is_address_locality_Set() const{
    return m_address_locality_isSet;
}

bool OAIFacility::is_address_locality_Valid() const{
    return m_address_locality_isValid;
}

QString OAIFacility::getAddressRegion() const {
    return m_address_region;
}
void OAIFacility::setAddressRegion(const QString &address_region) {
    m_address_region = address_region;
    m_address_region_isSet = true;
}

bool OAIFacility::is_address_region_Set() const{
    return m_address_region_isSet;
}

bool OAIFacility::is_address_region_Valid() const{
    return m_address_region_isValid;
}

QString OAIFacility::getId() const {
    return m_id;
}
void OAIFacility::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFacility::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFacility::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFacility::getMetroArea() const {
    return m_metro_area;
}
void OAIFacility::setMetroArea(const QString &metro_area) {
    m_metro_area = metro_area;
    m_metro_area_isSet = true;
}

bool OAIFacility::is_metro_area_Set() const{
    return m_metro_area_isSet;
}

bool OAIFacility::is_metro_area_Valid() const{
    return m_metro_area_isValid;
}

QString OAIFacility::getName() const {
    return m_name;
}
void OAIFacility::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFacility::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFacility::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFacility::getOrganisationName() const {
    return m_organisation_name;
}
void OAIFacility::setOrganisationName(const QString &organisation_name) {
    m_organisation_name = organisation_name;
    m_organisation_name_isSet = true;
}

bool OAIFacility::is_organisation_name_Set() const{
    return m_organisation_name_isSet;
}

bool OAIFacility::is_organisation_name_Valid() const{
    return m_organisation_name_isValid;
}

qint32 OAIFacility::getPeeringdbFacilityId() const {
    return m_peeringdb_facility_id;
}
void OAIFacility::setPeeringdbFacilityId(const qint32 &peeringdb_facility_id) {
    m_peeringdb_facility_id = peeringdb_facility_id;
    m_peeringdb_facility_id_isSet = true;
}

bool OAIFacility::is_peeringdb_facility_id_Set() const{
    return m_peeringdb_facility_id_isSet;
}

bool OAIFacility::is_peeringdb_facility_id_Valid() const{
    return m_peeringdb_facility_id_isValid;
}

QList<QString> OAIFacility::getPops() const {
    return m_pops;
}
void OAIFacility::setPops(const QList<QString> &pops) {
    m_pops = pops;
    m_pops_isSet = true;
}

bool OAIFacility::is_pops_Set() const{
    return m_pops_isSet;
}

bool OAIFacility::is_pops_Valid() const{
    return m_pops_isValid;
}

QString OAIFacility::getPostalCode() const {
    return m_postal_code;
}
void OAIFacility::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIFacility::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIFacility::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIFacility::getStreetAddress() const {
    return m_street_address;
}
void OAIFacility::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAIFacility::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIFacility::is_street_address_Valid() const{
    return m_street_address_isValid;
}

bool OAIFacility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organisation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peeringdb_facility_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacility::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_country_isValid && m_address_locality_isValid && m_address_region_isValid && m_id_isValid && m_metro_area_isValid && m_name_isValid && m_organisation_name_isValid && m_pops_isValid && m_postal_code_isValid && m_street_address_isValid && true;
}

} // namespace OpenAPI
