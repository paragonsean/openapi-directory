/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionPartial::OAIConnectionPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionPartial::OAIConnectionPartial() {
    this->initializeModel();
}

OAIConnectionPartial::~OAIConnectionPartial() {}

void OAIConnectionPartial::initializeModel() {

    m_billing_account_isSet = false;
    m_billing_account_isValid = false;

    m_consuming_account_isSet = false;
    m_consuming_account_isValid = false;

    m_contract_ref_isSet = false;
    m_contract_ref_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lacp_timeout_isSet = false;
    m_lacp_timeout_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outer_vlan_ethertypes_isSet = false;
    m_outer_vlan_ethertypes_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_purchase_order_isSet = false;
    m_purchase_order_isValid = false;

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vlan_types_isSet = false;
    m_vlan_types_isValid = false;
}

void OAIConnectionPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionPartial::fromJsonObject(QJsonObject json) {

    m_billing_account_isValid = ::OpenAPI::fromJsonValue(m_billing_account, json[QString("billing_account")]);
    m_billing_account_isSet = !json[QString("billing_account")].isNull() && m_billing_account_isValid;

    m_consuming_account_isValid = ::OpenAPI::fromJsonValue(m_consuming_account, json[QString("consuming_account")]);
    m_consuming_account_isSet = !json[QString("consuming_account")].isNull() && m_consuming_account_isValid;

    m_contract_ref_isValid = ::OpenAPI::fromJsonValue(m_contract_ref, json[QString("contract_ref")]);
    m_contract_ref_isSet = !json[QString("contract_ref")].isNull() && m_contract_ref_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lacp_timeout_isValid = ::OpenAPI::fromJsonValue(m_lacp_timeout, json[QString("lacp_timeout")]);
    m_lacp_timeout_isSet = !json[QString("lacp_timeout")].isNull() && m_lacp_timeout_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outer_vlan_ethertypes_isValid = ::OpenAPI::fromJsonValue(m_outer_vlan_ethertypes, json[QString("outer_vlan_ethertypes")]);
    m_outer_vlan_ethertypes_isSet = !json[QString("outer_vlan_ethertypes")].isNull() && m_outer_vlan_ethertypes_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_purchase_order_isValid = ::OpenAPI::fromJsonValue(m_purchase_order, json[QString("purchase_order")]);
    m_purchase_order_isSet = !json[QString("purchase_order")].isNull() && m_purchase_order_isValid;

    m_role_assignments_isValid = ::OpenAPI::fromJsonValue(m_role_assignments, json[QString("role_assignments")]);
    m_role_assignments_isSet = !json[QString("role_assignments")].isNull() && m_role_assignments_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("speed")]);
    m_speed_isSet = !json[QString("speed")].isNull() && m_speed_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vlan_types_isValid = ::OpenAPI::fromJsonValue(m_vlan_types, json[QString("vlan_types")]);
    m_vlan_types_isSet = !json[QString("vlan_types")].isNull() && m_vlan_types_isValid;
}

QString OAIConnectionPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_account_isSet) {
        obj.insert(QString("billing_account"), ::OpenAPI::toJsonValue(m_billing_account));
    }
    if (m_consuming_account_isSet) {
        obj.insert(QString("consuming_account"), ::OpenAPI::toJsonValue(m_consuming_account));
    }
    if (m_contract_ref_isSet) {
        obj.insert(QString("contract_ref"), ::OpenAPI::toJsonValue(m_contract_ref));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lacp_timeout_isSet) {
        obj.insert(QString("lacp_timeout"), ::OpenAPI::toJsonValue(m_lacp_timeout));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outer_vlan_ethertypes.size() > 0) {
        obj.insert(QString("outer_vlan_ethertypes"), ::OpenAPI::toJsonValue(m_outer_vlan_ethertypes));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_purchase_order_isSet) {
        obj.insert(QString("purchase_order"), ::OpenAPI::toJsonValue(m_purchase_order));
    }
    if (m_role_assignments.size() > 0) {
        obj.insert(QString("role_assignments"), ::OpenAPI::toJsonValue(m_role_assignments));
    }
    if (m_speed_isSet) {
        obj.insert(QString("speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vlan_types.size() > 0) {
        obj.insert(QString("vlan_types"), ::OpenAPI::toJsonValue(m_vlan_types));
    }
    return obj;
}

QString OAIConnectionPartial::getBillingAccount() const {
    return m_billing_account;
}
void OAIConnectionPartial::setBillingAccount(const QString &billing_account) {
    m_billing_account = billing_account;
    m_billing_account_isSet = true;
}

bool OAIConnectionPartial::is_billing_account_Set() const{
    return m_billing_account_isSet;
}

bool OAIConnectionPartial::is_billing_account_Valid() const{
    return m_billing_account_isValid;
}

QString OAIConnectionPartial::getConsumingAccount() const {
    return m_consuming_account;
}
void OAIConnectionPartial::setConsumingAccount(const QString &consuming_account) {
    m_consuming_account = consuming_account;
    m_consuming_account_isSet = true;
}

bool OAIConnectionPartial::is_consuming_account_Set() const{
    return m_consuming_account_isSet;
}

bool OAIConnectionPartial::is_consuming_account_Valid() const{
    return m_consuming_account_isValid;
}

QString OAIConnectionPartial::getContractRef() const {
    return m_contract_ref;
}
void OAIConnectionPartial::setContractRef(const QString &contract_ref) {
    m_contract_ref = contract_ref;
    m_contract_ref_isSet = true;
}

bool OAIConnectionPartial::is_contract_ref_Set() const{
    return m_contract_ref_isSet;
}

bool OAIConnectionPartial::is_contract_ref_Valid() const{
    return m_contract_ref_isValid;
}

QString OAIConnectionPartial::getExternalRef() const {
    return m_external_ref;
}
void OAIConnectionPartial::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIConnectionPartial::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIConnectionPartial::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIConnectionPartial::getId() const {
    return m_id;
}
void OAIConnectionPartial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnectionPartial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnectionPartial::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnectionPartial::getLacpTimeout() const {
    return m_lacp_timeout;
}
void OAIConnectionPartial::setLacpTimeout(const QString &lacp_timeout) {
    m_lacp_timeout = lacp_timeout;
    m_lacp_timeout_isSet = true;
}

bool OAIConnectionPartial::is_lacp_timeout_Set() const{
    return m_lacp_timeout_isSet;
}

bool OAIConnectionPartial::is_lacp_timeout_Valid() const{
    return m_lacp_timeout_isValid;
}

QString OAIConnectionPartial::getManagingAccount() const {
    return m_managing_account;
}
void OAIConnectionPartial::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIConnectionPartial::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIConnectionPartial::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QString OAIConnectionPartial::getMode() const {
    return m_mode;
}
void OAIConnectionPartial::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIConnectionPartial::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIConnectionPartial::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIConnectionPartial::getName() const {
    return m_name;
}
void OAIConnectionPartial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnectionPartial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnectionPartial::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIConnectionPartial::getOuterVlanEthertypes() const {
    return m_outer_vlan_ethertypes;
}
void OAIConnectionPartial::setOuterVlanEthertypes(const QList<QString> &outer_vlan_ethertypes) {
    m_outer_vlan_ethertypes = outer_vlan_ethertypes;
    m_outer_vlan_ethertypes_isSet = true;
}

bool OAIConnectionPartial::is_outer_vlan_ethertypes_Set() const{
    return m_outer_vlan_ethertypes_isSet;
}

bool OAIConnectionPartial::is_outer_vlan_ethertypes_Valid() const{
    return m_outer_vlan_ethertypes_isValid;
}

QList<QString> OAIConnectionPartial::getPorts() const {
    return m_ports;
}
void OAIConnectionPartial::setPorts(const QList<QString> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIConnectionPartial::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIConnectionPartial::is_ports_Valid() const{
    return m_ports_isValid;
}

QString OAIConnectionPartial::getPurchaseOrder() const {
    return m_purchase_order;
}
void OAIConnectionPartial::setPurchaseOrder(const QString &purchase_order) {
    m_purchase_order = purchase_order;
    m_purchase_order_isSet = true;
}

bool OAIConnectionPartial::is_purchase_order_Set() const{
    return m_purchase_order_isSet;
}

bool OAIConnectionPartial::is_purchase_order_Valid() const{
    return m_purchase_order_isValid;
}

QList<QString> OAIConnectionPartial::getRoleAssignments() const {
    return m_role_assignments;
}
void OAIConnectionPartial::setRoleAssignments(const QList<QString> &role_assignments) {
    m_role_assignments = role_assignments;
    m_role_assignments_isSet = true;
}

bool OAIConnectionPartial::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAIConnectionPartial::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

qint32 OAIConnectionPartial::getSpeed() const {
    return m_speed;
}
void OAIConnectionPartial::setSpeed(const qint32 &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAIConnectionPartial::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAIConnectionPartial::is_speed_Valid() const{
    return m_speed_isValid;
}

QString OAIConnectionPartial::getState() const {
    return m_state;
}
void OAIConnectionPartial::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConnectionPartial::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConnectionPartial::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIStatus> OAIConnectionPartial::getStatus() const {
    return m_status;
}
void OAIConnectionPartial::setStatus(const QList<OAIStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConnectionPartial::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConnectionPartial::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIConnectionPartial::getVlanTypes() const {
    return m_vlan_types;
}
void OAIConnectionPartial::setVlanTypes(const QList<QString> &vlan_types) {
    m_vlan_types = vlan_types;
    m_vlan_types_isSet = true;
}

bool OAIConnectionPartial::is_vlan_types_Set() const{
    return m_vlan_types_isSet;
}

bool OAIConnectionPartial::is_vlan_types_Valid() const{
    return m_vlan_types_isValid;
}

bool OAIConnectionPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consuming_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lacp_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_vlan_ethertypes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
