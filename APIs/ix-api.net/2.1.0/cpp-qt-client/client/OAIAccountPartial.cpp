/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountPartial::OAIAccountPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountPartial::OAIAccountPartial() {
    this->initializeModel();
}

OAIAccountPartial::~OAIAccountPartial() {}

void OAIAccountPartial::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_billing_information_isSet = false;
    m_billing_information_isValid = false;

    m_discoverable_isSet = false;
    m_discoverable_isValid = false;

    m_external_ref_isSet = false;
    m_external_ref_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_legal_name_isSet = false;
    m_legal_name_isValid = false;

    m_managing_account_isSet = false;
    m_managing_account_isValid = false;

    m_metro_area_network_presence_isSet = false;
    m_metro_area_network_presence_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAccountPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountPartial::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_billing_information_isValid = ::OpenAPI::fromJsonValue(m_billing_information, json[QString("billing_information")]);
    m_billing_information_isSet = !json[QString("billing_information")].isNull() && m_billing_information_isValid;

    m_discoverable_isValid = ::OpenAPI::fromJsonValue(m_discoverable, json[QString("discoverable")]);
    m_discoverable_isSet = !json[QString("discoverable")].isNull() && m_discoverable_isValid;

    m_external_ref_isValid = ::OpenAPI::fromJsonValue(m_external_ref, json[QString("external_ref")]);
    m_external_ref_isSet = !json[QString("external_ref")].isNull() && m_external_ref_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_legal_name_isValid = ::OpenAPI::fromJsonValue(m_legal_name, json[QString("legal_name")]);
    m_legal_name_isSet = !json[QString("legal_name")].isNull() && m_legal_name_isValid;

    m_managing_account_isValid = ::OpenAPI::fromJsonValue(m_managing_account, json[QString("managing_account")]);
    m_managing_account_isSet = !json[QString("managing_account")].isNull() && m_managing_account_isValid;

    m_metro_area_network_presence_isValid = ::OpenAPI::fromJsonValue(m_metro_area_network_presence, json[QString("metro_area_network_presence")]);
    m_metro_area_network_presence_isSet = !json[QString("metro_area_network_presence")].isNull() && m_metro_area_network_presence_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAccountPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_billing_information.isSet()) {
        obj.insert(QString("billing_information"), ::OpenAPI::toJsonValue(m_billing_information));
    }
    if (m_discoverable_isSet) {
        obj.insert(QString("discoverable"), ::OpenAPI::toJsonValue(m_discoverable));
    }
    if (m_external_ref_isSet) {
        obj.insert(QString("external_ref"), ::OpenAPI::toJsonValue(m_external_ref));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_legal_name_isSet) {
        obj.insert(QString("legal_name"), ::OpenAPI::toJsonValue(m_legal_name));
    }
    if (m_managing_account_isSet) {
        obj.insert(QString("managing_account"), ::OpenAPI::toJsonValue(m_managing_account));
    }
    if (m_metro_area_network_presence.size() > 0) {
        obj.insert(QString("metro_area_network_presence"), ::OpenAPI::toJsonValue(m_metro_area_network_presence));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAddress OAIAccountPartial::getAddress() const {
    return m_address;
}
void OAIAccountPartial::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccountPartial::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccountPartial::is_address_Valid() const{
    return m_address_isValid;
}

OAIBillingInformation OAIAccountPartial::getBillingInformation() const {
    return m_billing_information;
}
void OAIAccountPartial::setBillingInformation(const OAIBillingInformation &billing_information) {
    m_billing_information = billing_information;
    m_billing_information_isSet = true;
}

bool OAIAccountPartial::is_billing_information_Set() const{
    return m_billing_information_isSet;
}

bool OAIAccountPartial::is_billing_information_Valid() const{
    return m_billing_information_isValid;
}

bool OAIAccountPartial::isDiscoverable() const {
    return m_discoverable;
}
void OAIAccountPartial::setDiscoverable(const bool &discoverable) {
    m_discoverable = discoverable;
    m_discoverable_isSet = true;
}

bool OAIAccountPartial::is_discoverable_Set() const{
    return m_discoverable_isSet;
}

bool OAIAccountPartial::is_discoverable_Valid() const{
    return m_discoverable_isValid;
}

QString OAIAccountPartial::getExternalRef() const {
    return m_external_ref;
}
void OAIAccountPartial::setExternalRef(const QString &external_ref) {
    m_external_ref = external_ref;
    m_external_ref_isSet = true;
}

bool OAIAccountPartial::is_external_ref_Set() const{
    return m_external_ref_isSet;
}

bool OAIAccountPartial::is_external_ref_Valid() const{
    return m_external_ref_isValid;
}

QString OAIAccountPartial::getId() const {
    return m_id;
}
void OAIAccountPartial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountPartial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountPartial::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccountPartial::getLegalName() const {
    return m_legal_name;
}
void OAIAccountPartial::setLegalName(const QString &legal_name) {
    m_legal_name = legal_name;
    m_legal_name_isSet = true;
}

bool OAIAccountPartial::is_legal_name_Set() const{
    return m_legal_name_isSet;
}

bool OAIAccountPartial::is_legal_name_Valid() const{
    return m_legal_name_isValid;
}

QString OAIAccountPartial::getManagingAccount() const {
    return m_managing_account;
}
void OAIAccountPartial::setManagingAccount(const QString &managing_account) {
    m_managing_account = managing_account;
    m_managing_account_isSet = true;
}

bool OAIAccountPartial::is_managing_account_Set() const{
    return m_managing_account_isSet;
}

bool OAIAccountPartial::is_managing_account_Valid() const{
    return m_managing_account_isValid;
}

QList<QString> OAIAccountPartial::getMetroAreaNetworkPresence() const {
    return m_metro_area_network_presence;
}
void OAIAccountPartial::setMetroAreaNetworkPresence(const QList<QString> &metro_area_network_presence) {
    m_metro_area_network_presence = metro_area_network_presence;
    m_metro_area_network_presence_isSet = true;
}

bool OAIAccountPartial::is_metro_area_network_presence_Set() const{
    return m_metro_area_network_presence_isSet;
}

bool OAIAccountPartial::is_metro_area_network_presence_Valid() const{
    return m_metro_area_network_presence_isValid;
}

QString OAIAccountPartial::getName() const {
    return m_name;
}
void OAIAccountPartial::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountPartial::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountPartial::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountPartial::getState() const {
    return m_state;
}
void OAIAccountPartial::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAccountPartial::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAccountPartial::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIStatus> OAIAccountPartial::getStatus() const {
    return m_status;
}
void OAIAccountPartial::setStatus(const QList<OAIStatus> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccountPartial::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccountPartial::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAccountPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_area_network_presence.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
