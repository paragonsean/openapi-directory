/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetroAreaPartial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetroAreaPartial::OAIMetroAreaPartial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetroAreaPartial::OAIMetroAreaPartial() {
    this->initializeModel();
}

OAIMetroAreaPartial::~OAIMetroAreaPartial() {}

void OAIMetroAreaPartial::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_facilities_isSet = false;
    m_facilities_isValid = false;

    m_iata_code_isSet = false;
    m_iata_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metro_area_networks_isSet = false;
    m_metro_area_networks_isValid = false;

    m_un_locode_isSet = false;
    m_un_locode_isValid = false;
}

void OAIMetroAreaPartial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetroAreaPartial::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_facilities_isValid = ::OpenAPI::fromJsonValue(m_facilities, json[QString("facilities")]);
    m_facilities_isSet = !json[QString("facilities")].isNull() && m_facilities_isValid;

    m_iata_code_isValid = ::OpenAPI::fromJsonValue(m_iata_code, json[QString("iata_code")]);
    m_iata_code_isSet = !json[QString("iata_code")].isNull() && m_iata_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metro_area_networks_isValid = ::OpenAPI::fromJsonValue(m_metro_area_networks, json[QString("metro_area_networks")]);
    m_metro_area_networks_isSet = !json[QString("metro_area_networks")].isNull() && m_metro_area_networks_isValid;

    m_un_locode_isValid = ::OpenAPI::fromJsonValue(m_un_locode, json[QString("un_locode")]);
    m_un_locode_isSet = !json[QString("un_locode")].isNull() && m_un_locode_isValid;
}

QString OAIMetroAreaPartial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetroAreaPartial::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_facilities.size() > 0) {
        obj.insert(QString("facilities"), ::OpenAPI::toJsonValue(m_facilities));
    }
    if (m_iata_code_isSet) {
        obj.insert(QString("iata_code"), ::OpenAPI::toJsonValue(m_iata_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metro_area_networks.size() > 0) {
        obj.insert(QString("metro_area_networks"), ::OpenAPI::toJsonValue(m_metro_area_networks));
    }
    if (m_un_locode_isSet) {
        obj.insert(QString("un_locode"), ::OpenAPI::toJsonValue(m_un_locode));
    }
    return obj;
}

QString OAIMetroAreaPartial::getDisplayName() const {
    return m_display_name;
}
void OAIMetroAreaPartial::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetroAreaPartial::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetroAreaPartial::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIMetroAreaPartial::getFacilities() const {
    return m_facilities;
}
void OAIMetroAreaPartial::setFacilities(const QList<QString> &facilities) {
    m_facilities = facilities;
    m_facilities_isSet = true;
}

bool OAIMetroAreaPartial::is_facilities_Set() const{
    return m_facilities_isSet;
}

bool OAIMetroAreaPartial::is_facilities_Valid() const{
    return m_facilities_isValid;
}

QString OAIMetroAreaPartial::getIataCode() const {
    return m_iata_code;
}
void OAIMetroAreaPartial::setIataCode(const QString &iata_code) {
    m_iata_code = iata_code;
    m_iata_code_isSet = true;
}

bool OAIMetroAreaPartial::is_iata_code_Set() const{
    return m_iata_code_isSet;
}

bool OAIMetroAreaPartial::is_iata_code_Valid() const{
    return m_iata_code_isValid;
}

QString OAIMetroAreaPartial::getId() const {
    return m_id;
}
void OAIMetroAreaPartial::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMetroAreaPartial::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMetroAreaPartial::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIMetroAreaPartial::getMetroAreaNetworks() const {
    return m_metro_area_networks;
}
void OAIMetroAreaPartial::setMetroAreaNetworks(const QList<QString> &metro_area_networks) {
    m_metro_area_networks = metro_area_networks;
    m_metro_area_networks_isSet = true;
}

bool OAIMetroAreaPartial::is_metro_area_networks_Set() const{
    return m_metro_area_networks_isSet;
}

bool OAIMetroAreaPartial::is_metro_area_networks_Valid() const{
    return m_metro_area_networks_isValid;
}

QString OAIMetroAreaPartial::getUnLocode() const {
    return m_un_locode;
}
void OAIMetroAreaPartial::setUnLocode(const QString &un_locode) {
    m_un_locode = un_locode;
    m_un_locode_isSet = true;
}

bool OAIMetroAreaPartial::is_un_locode_Set() const{
    return m_un_locode_isSet;
}

bool OAIMetroAreaPartial::is_un_locode_Valid() const{
    return m_un_locode_isValid;
}

bool OAIMetroAreaPartial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_iata_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_area_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_un_locode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetroAreaPartial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
