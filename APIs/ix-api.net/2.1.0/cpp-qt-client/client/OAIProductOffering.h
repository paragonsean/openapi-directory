/**
 * IX-API
 *  This API allows to config/change/delete Internet Exchange services.  # Filters  When querying collections, the provided query parameters are validated. Unknown query parameters are ignored. Providing invalid filter values should yield a validation error. 
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProductOffering.h
 *
 * Polymorphic Product Offering
 */

#ifndef OAIProductOffering_H
#define OAIProductOffering_H

#include <QJsonObject>

#include "OAICloudNetworkProductOffering.h"
#include "OAIExchangeLanNetworkProductOffering.h"
#include "OAIMP2MPNetworkProductOffering.h"
#include "OAIP2MPNetworkProductOffering.h"
#include "OAIP2PNetworkProductOffering.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProductOffering : public OAIObject {
public:
    OAIProductOffering();
    OAIProductOffering(QString json);
    ~OAIProductOffering() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBandwidthMax() const;
    void setBandwidthMax(const qint32 &bandwidth_max);
    bool is_bandwidth_max_Set() const;
    bool is_bandwidth_max_Valid() const;

    qint32 getBandwidthMin() const;
    void setBandwidthMin(const qint32 &bandwidth_min);
    bool is_bandwidth_min_Set() const;
    bool is_bandwidth_min_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isDowngradeAllowed() const;
    void setDowngradeAllowed(const bool &downgrade_allowed);
    bool is_downgrade_allowed_Set() const;
    bool is_downgrade_allowed_Valid() const;

    QString getExchangeLanNetworkService() const;
    void setExchangeLanNetworkService(const QString &exchange_lan_network_service);
    bool is_exchange_lan_network_service_Set() const;
    bool is_exchange_lan_network_service_Valid() const;

    QString getHandoverMetroArea() const;
    void setHandoverMetroArea(const QString &handover_metro_area);
    bool is_handover_metro_area_Set() const;
    bool is_handover_metro_area_Valid() const;

    QString getHandoverMetroAreaNetwork() const;
    void setHandoverMetroAreaNetwork(const QString &handover_metro_area_network);
    bool is_handover_metro_area_network_Set() const;
    bool is_handover_metro_area_network_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPhysicalPortSpeed() const;
    void setPhysicalPortSpeed(const qint32 &physical_port_speed);
    bool is_physical_port_speed_Set() const;
    bool is_physical_port_speed_Valid() const;

    QString getProviderVlans() const;
    void setProviderVlans(const QString &provider_vlans);
    bool is_provider_vlans_Set() const;
    bool is_provider_vlans_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getServiceMetroArea() const;
    void setServiceMetroArea(const QString &service_metro_area);
    bool is_service_metro_area_Set() const;
    bool is_service_metro_area_Valid() const;

    QString getServiceMetroAreaNetwork() const;
    void setServiceMetroAreaNetwork(const QString &service_metro_area_network);
    bool is_service_metro_area_network_Set() const;
    bool is_service_metro_area_network_Valid() const;

    QString getServiceProvider() const;
    void setServiceProvider(const QString &service_provider);
    bool is_service_provider_Set() const;
    bool is_service_provider_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    bool isUpgradeAllowed() const;
    void setUpgradeAllowed(const bool &upgrade_allowed);
    bool is_upgrade_allowed_Set() const;
    bool is_upgrade_allowed_Valid() const;

    QString getDeliveryMethod() const;
    void setDeliveryMethod(const QString &delivery_method);
    bool is_delivery_method_Set() const;
    bool is_delivery_method_Valid() const;

    qint32 getDiversity() const;
    void setDiversity(const qint32 &diversity);
    bool is_diversity_Set() const;
    bool is_diversity_Valid() const;

    QString getServiceProviderPop() const;
    void setServiceProviderPop(const QString &service_provider_pop);
    bool is_service_provider_pop_Set() const;
    bool is_service_provider_pop_Valid() const;

    QString getServiceProviderRegion() const;
    void setServiceProviderRegion(const QString &service_provider_region);
    bool is_service_provider_region_Set() const;
    bool is_service_provider_region_Valid() const;

    QString getServiceProviderWorkflow() const;
    void setServiceProviderWorkflow(const QString &service_provider_workflow);
    bool is_service_provider_workflow_Set() const;
    bool is_service_provider_workflow_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bandwidth_max;
    bool m_bandwidth_max_isSet;
    bool m_bandwidth_max_isValid;

    qint32 m_bandwidth_min;
    bool m_bandwidth_min_isSet;
    bool m_bandwidth_min_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_downgrade_allowed;
    bool m_downgrade_allowed_isSet;
    bool m_downgrade_allowed_isValid;

    QString m_exchange_lan_network_service;
    bool m_exchange_lan_network_service_isSet;
    bool m_exchange_lan_network_service_isValid;

    QString m_handover_metro_area;
    bool m_handover_metro_area_isSet;
    bool m_handover_metro_area_isValid;

    QString m_handover_metro_area_network;
    bool m_handover_metro_area_network_isSet;
    bool m_handover_metro_area_network_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_physical_port_speed;
    bool m_physical_port_speed_isSet;
    bool m_physical_port_speed_isValid;

    QString m_provider_vlans;
    bool m_provider_vlans_isSet;
    bool m_provider_vlans_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_service_metro_area;
    bool m_service_metro_area_isSet;
    bool m_service_metro_area_isValid;

    QString m_service_metro_area_network;
    bool m_service_metro_area_network_isSet;
    bool m_service_metro_area_network_isValid;

    QString m_service_provider;
    bool m_service_provider_isSet;
    bool m_service_provider_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    bool m_upgrade_allowed;
    bool m_upgrade_allowed_isSet;
    bool m_upgrade_allowed_isValid;

    QString m_delivery_method;
    bool m_delivery_method_isSet;
    bool m_delivery_method_isValid;

    qint32 m_diversity;
    bool m_diversity_isSet;
    bool m_diversity_isValid;

    QString m_service_provider_pop;
    bool m_service_provider_pop_isSet;
    bool m_service_provider_pop_isValid;

    QString m_service_provider_region;
    bool m_service_provider_region_isSet;
    bool m_service_provider_region_isValid;

    QString m_service_provider_workflow;
    bool m_service_provider_workflow_isSet;
    bool m_service_provider_workflow_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProductOffering)

#endif // OAIProductOffering_H
