/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentsApi_H
#define OAI_OAIPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreditorAccount.h"
#include "OAICreditorAccountWrite.h"
#include "OAICreditorAccountWriteRequest.h"
#include "OAIPaginatedCreditorAccountList.h"
#include "OAIPaginatedPaymentReadList.h"
#include "OAIPaymentRead.h"
#include "OAIPaymentReadRequest.h"
#include "OAIPaymentWrite.h"
#include "OAIPaymentWriteRequest.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentsApi(const int timeOut = 0);
    ~OAIPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_payment_write_request OAIPaymentWriteRequest [required]
    */
    virtual void create_payment(const OAIPaymentWriteRequest &oai_payment_write_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void delete_periodic_payment(const QString &id);

    /**
    * @param[in]  institution_id QString [required]
    */
    virtual void list_minimum_required_fields_for_institution(const QString &institution_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void list_payments(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_creditor_account_write_request OAICreditorAccountWriteRequest [required]
    */
    virtual void paymentsCreditorsCreate(const OAICreditorAccountWriteRequest &oai_creditor_account_write_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void paymentsCreditorsDestroy(const QString &id);

    /**
    * @param[in]  account QString [optional]
    * @param[in]  address_country QString [optional]
    * @param[in]  agent QString [optional]
    * @param[in]  currency QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  type QString [optional]
    */
    virtual void paymentsCreditorsList(const ::OpenAPI::OptionalParam<QString> &account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &agent = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void paymentsCreditorsRetrieve(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_payment_read_request OAIPaymentReadRequest [required]
    */
    virtual void paymentsSubmitCreate(const QString &id, const OAIPaymentReadRequest &oai_payment_read_request);


    virtual void retrieve_all_payment_creditor_accounts();

    /**
    * @param[in]  id QString [required]
    */
    virtual void retrieve_payment(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void create_paymentCallback(OAIHttpRequestWorker *worker);
    void delete_periodic_paymentCallback(OAIHttpRequestWorker *worker);
    void list_minimum_required_fields_for_institutionCallback(OAIHttpRequestWorker *worker);
    void list_paymentsCallback(OAIHttpRequestWorker *worker);
    void paymentsCreditorsCreateCallback(OAIHttpRequestWorker *worker);
    void paymentsCreditorsDestroyCallback(OAIHttpRequestWorker *worker);
    void paymentsCreditorsListCallback(OAIHttpRequestWorker *worker);
    void paymentsCreditorsRetrieveCallback(OAIHttpRequestWorker *worker);
    void paymentsSubmitCreateCallback(OAIHttpRequestWorker *worker);
    void retrieve_all_payment_creditor_accountsCallback(OAIHttpRequestWorker *worker);
    void retrieve_paymentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void create_paymentSignal(OAIPaymentWrite summary);
    void delete_periodic_paymentSignal(QMap<QString, QJsonValue> summary);
    void list_minimum_required_fields_for_institutionSignal(QMap<QString, QJsonValue> summary);
    void list_paymentsSignal(OAIPaginatedPaymentReadList summary);
    void paymentsCreditorsCreateSignal(OAICreditorAccountWrite summary);
    void paymentsCreditorsDestroySignal();
    void paymentsCreditorsListSignal(OAIPaginatedCreditorAccountList summary);
    void paymentsCreditorsRetrieveSignal(OAICreditorAccount summary);
    void paymentsSubmitCreateSignal(OAIPaymentRead summary);
    void retrieve_all_payment_creditor_accountsSignal(QList<OAICreditorAccount> summary);
    void retrieve_paymentSignal(OAIPaymentRead summary);


    void create_paymentSignalFull(OAIHttpRequestWorker *worker, OAIPaymentWrite summary);
    void delete_periodic_paymentSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void list_minimum_required_fields_for_institutionSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void list_paymentsSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedPaymentReadList summary);
    void paymentsCreditorsCreateSignalFull(OAIHttpRequestWorker *worker, OAICreditorAccountWrite summary);
    void paymentsCreditorsDestroySignalFull(OAIHttpRequestWorker *worker);
    void paymentsCreditorsListSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedCreditorAccountList summary);
    void paymentsCreditorsRetrieveSignalFull(OAIHttpRequestWorker *worker, OAICreditorAccount summary);
    void paymentsSubmitCreateSignalFull(OAIHttpRequestWorker *worker, OAIPaymentRead summary);
    void retrieve_all_payment_creditor_accountsSignalFull(OAIHttpRequestWorker *worker, QList<OAICreditorAccount> summary);
    void retrieve_paymentSignalFull(OAIHttpRequestWorker *worker, OAIPaymentRead summary);

    Q_DECL_DEPRECATED_X("Use create_paymentSignalError() instead")
    void create_paymentSignalE(OAIPaymentWrite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create_paymentSignalError(OAIPaymentWrite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_periodic_paymentSignalError() instead")
    void delete_periodic_paymentSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_periodic_paymentSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use list_minimum_required_fields_for_institutionSignalError() instead")
    void list_minimum_required_fields_for_institutionSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void list_minimum_required_fields_for_institutionSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use list_paymentsSignalError() instead")
    void list_paymentsSignalE(OAIPaginatedPaymentReadList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void list_paymentsSignalError(OAIPaginatedPaymentReadList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsCreateSignalError() instead")
    void paymentsCreditorsCreateSignalE(OAICreditorAccountWrite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsCreateSignalError(OAICreditorAccountWrite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsDestroySignalError() instead")
    void paymentsCreditorsDestroySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsDestroySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsListSignalError() instead")
    void paymentsCreditorsListSignalE(OAIPaginatedCreditorAccountList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsListSignalError(OAIPaginatedCreditorAccountList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsRetrieveSignalError() instead")
    void paymentsCreditorsRetrieveSignalE(OAICreditorAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsRetrieveSignalError(OAICreditorAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsSubmitCreateSignalError() instead")
    void paymentsSubmitCreateSignalE(OAIPaymentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsSubmitCreateSignalError(OAIPaymentRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieve_all_payment_creditor_accountsSignalError() instead")
    void retrieve_all_payment_creditor_accountsSignalE(QList<OAICreditorAccount> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieve_all_payment_creditor_accountsSignalError(QList<OAICreditorAccount> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieve_paymentSignalError() instead")
    void retrieve_paymentSignalE(OAIPaymentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieve_paymentSignalError(OAIPaymentRead summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use create_paymentSignalErrorFull() instead")
    void create_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delete_periodic_paymentSignalErrorFull() instead")
    void delete_periodic_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delete_periodic_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use list_minimum_required_fields_for_institutionSignalErrorFull() instead")
    void list_minimum_required_fields_for_institutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void list_minimum_required_fields_for_institutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use list_paymentsSignalErrorFull() instead")
    void list_paymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void list_paymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsCreateSignalErrorFull() instead")
    void paymentsCreditorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsDestroySignalErrorFull() instead")
    void paymentsCreditorsDestroySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsDestroySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsListSignalErrorFull() instead")
    void paymentsCreditorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsCreditorsRetrieveSignalErrorFull() instead")
    void paymentsCreditorsRetrieveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsCreditorsRetrieveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentsSubmitCreateSignalErrorFull() instead")
    void paymentsSubmitCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentsSubmitCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieve_all_payment_creditor_accountsSignalErrorFull() instead")
    void retrieve_all_payment_creditor_accountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieve_all_payment_creditor_accountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieve_paymentSignalErrorFull() instead")
    void retrieve_paymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieve_paymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
