/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationRetrieve.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationRetrieve::OAIIntegrationRetrieve(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationRetrieve::OAIIntegrationRetrieve() {
    this->initializeModel();
}

OAIIntegrationRetrieve::~OAIIntegrationRetrieve() {}

void OAIIntegrationRetrieve::initializeModel() {

    m_bic_isSet = false;
    m_bic_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_supported_features_isSet = false;
    m_supported_features_isValid = false;

    m_supported_payments_isSet = false;
    m_supported_payments_isValid = false;

    m_transaction_total_days_isSet = false;
    m_transaction_total_days_isValid = false;
}

void OAIIntegrationRetrieve::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationRetrieve::fromJsonObject(QJsonObject json) {

    m_bic_isValid = ::OpenAPI::fromJsonValue(m_bic, json[QString("bic")]);
    m_bic_isSet = !json[QString("bic")].isNull() && m_bic_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_supported_features_isValid = ::OpenAPI::fromJsonValue(m_supported_features, json[QString("supported_features")]);
    m_supported_features_isSet = !json[QString("supported_features")].isNull() && m_supported_features_isValid;

    m_supported_payments_isValid = ::OpenAPI::fromJsonValue(m_supported_payments, json[QString("supported_payments")]);
    m_supported_payments_isSet = !json[QString("supported_payments")].isNull() && m_supported_payments_isValid;

    m_transaction_total_days_isValid = ::OpenAPI::fromJsonValue(m_transaction_total_days, json[QString("transaction_total_days")]);
    m_transaction_total_days_isSet = !json[QString("transaction_total_days")].isNull() && m_transaction_total_days_isValid;
}

QString OAIIntegrationRetrieve::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationRetrieve::asJsonObject() const {
    QJsonObject obj;
    if (m_bic_isSet) {
        obj.insert(QString("bic"), ::OpenAPI::toJsonValue(m_bic));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_supported_features.size() > 0) {
        obj.insert(QString("supported_features"), ::OpenAPI::toJsonValue(m_supported_features));
    }
    if (m_supported_payments.size() > 0) {
        obj.insert(QString("supported_payments"), ::OpenAPI::toJsonValue(m_supported_payments));
    }
    if (m_transaction_total_days_isSet) {
        obj.insert(QString("transaction_total_days"), ::OpenAPI::toJsonValue(m_transaction_total_days));
    }
    return obj;
}

QString OAIIntegrationRetrieve::getBic() const {
    return m_bic;
}
void OAIIntegrationRetrieve::setBic(const QString &bic) {
    m_bic = bic;
    m_bic_isSet = true;
}

bool OAIIntegrationRetrieve::is_bic_Set() const{
    return m_bic_isSet;
}

bool OAIIntegrationRetrieve::is_bic_Valid() const{
    return m_bic_isValid;
}

QList<QString> OAIIntegrationRetrieve::getCountries() const {
    return m_countries;
}
void OAIIntegrationRetrieve::setCountries(const QList<QString> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIIntegrationRetrieve::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIIntegrationRetrieve::is_countries_Valid() const{
    return m_countries_isValid;
}

QString OAIIntegrationRetrieve::getId() const {
    return m_id;
}
void OAIIntegrationRetrieve::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIntegrationRetrieve::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIntegrationRetrieve::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIntegrationRetrieve::getLogo() const {
    return m_logo;
}
void OAIIntegrationRetrieve::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIIntegrationRetrieve::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIIntegrationRetrieve::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIIntegrationRetrieve::getName() const {
    return m_name;
}
void OAIIntegrationRetrieve::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIntegrationRetrieve::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntegrationRetrieve::is_name_Valid() const{
    return m_name_isValid;
}

QList<QJsonValue> OAIIntegrationRetrieve::getSupportedFeatures() const {
    return m_supported_features;
}
void OAIIntegrationRetrieve::setSupportedFeatures(const QList<QJsonValue> &supported_features) {
    m_supported_features = supported_features;
    m_supported_features_isSet = true;
}

bool OAIIntegrationRetrieve::is_supported_features_Set() const{
    return m_supported_features_isSet;
}

bool OAIIntegrationRetrieve::is_supported_features_Valid() const{
    return m_supported_features_isValid;
}

QMap<QString, QJsonValue> OAIIntegrationRetrieve::getSupportedPayments() const {
    return m_supported_payments;
}
void OAIIntegrationRetrieve::setSupportedPayments(const QMap<QString, QJsonValue> &supported_payments) {
    m_supported_payments = supported_payments;
    m_supported_payments_isSet = true;
}

bool OAIIntegrationRetrieve::is_supported_payments_Set() const{
    return m_supported_payments_isSet;
}

bool OAIIntegrationRetrieve::is_supported_payments_Valid() const{
    return m_supported_payments_isValid;
}

QString OAIIntegrationRetrieve::getTransactionTotalDays() const {
    return m_transaction_total_days;
}
void OAIIntegrationRetrieve::setTransactionTotalDays(const QString &transaction_total_days) {
    m_transaction_total_days = transaction_total_days;
    m_transaction_total_days_isSet = true;
}

bool OAIIntegrationRetrieve::is_transaction_total_days_Set() const{
    return m_transaction_total_days_isSet;
}

bool OAIIntegrationRetrieve::is_transaction_total_days_Valid() const{
    return m_transaction_total_days_isValid;
}

bool OAIIntegrationRetrieve::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_total_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationRetrieve::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_countries_isValid && m_id_isValid && m_logo_isValid && m_name_isValid && m_supported_features_isValid && m_supported_payments_isValid && true;
}

} // namespace OpenAPI
