/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentProductEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentProductEnum::OAIPaymentProductEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentProductEnum::OAIPaymentProductEnum() {
    this->initializeModel();
}

OAIPaymentProductEnum::~OAIPaymentProductEnum() {}

void OAIPaymentProductEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPaymentProductEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPaymentProductEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("T2P", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::T2P;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::SCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ISCT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::ISCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CBCT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::CBCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::BACS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHAPS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::CHAPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FPS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::FPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SWIFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::SWIFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::BT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentProductEnum::MT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPaymentProductEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPaymentProductEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPaymentProductEnum::T2P:
            val = "T2P";
            break;
        case eOAIPaymentProductEnum::SCT:
            val = "SCT";
            break;
        case eOAIPaymentProductEnum::ISCT:
            val = "ISCT";
            break;
        case eOAIPaymentProductEnum::CBCT:
            val = "CBCT";
            break;
        case eOAIPaymentProductEnum::BACS:
            val = "BACS";
            break;
        case eOAIPaymentProductEnum::CHAPS:
            val = "CHAPS";
            break;
        case eOAIPaymentProductEnum::FPS:
            val = "FPS";
            break;
        case eOAIPaymentProductEnum::SWIFT:
            val = "SWIFT";
            break;
        case eOAIPaymentProductEnum::BT:
            val = "BT";
            break;
        case eOAIPaymentProductEnum::MT:
            val = "MT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPaymentProductEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPaymentProductEnum::eOAIPaymentProductEnum OAIPaymentProductEnum::getValue() const {
    return m_value;
}

void OAIPaymentProductEnum::setValue(const OAIPaymentProductEnum::eOAIPaymentProductEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPaymentProductEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIPaymentProductEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
