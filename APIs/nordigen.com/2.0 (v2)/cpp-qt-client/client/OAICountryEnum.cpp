/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountryEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountryEnum::OAICountryEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountryEnum::OAICountryEnum() {
    this->initializeModel();
}

OAICountryEnum::~OAICountryEnum() {}

void OAICountryEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICountryEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICountryEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::AT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::BE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BG", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::BG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HR", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::HR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CY", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::CY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::CZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DK", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::DK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::EE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GR", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::GR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HU", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::HU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IS", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::IS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::IE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LV", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::LV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LI", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::LI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::LT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LU", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::LU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::MT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("false", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::FALSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PL", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::PL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RO", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::RO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SK", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::SK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SI", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::SI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SE", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::SE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US", Qt::CaseInsensitive) == 0) {
        m_value = eOAICountryEnum::US;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICountryEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICountryEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICountryEnum::AT:
            val = "AT";
            break;
        case eOAICountryEnum::BE:
            val = "BE";
            break;
        case eOAICountryEnum::BG:
            val = "BG";
            break;
        case eOAICountryEnum::HR:
            val = "HR";
            break;
        case eOAICountryEnum::CY:
            val = "CY";
            break;
        case eOAICountryEnum::CZ:
            val = "CZ";
            break;
        case eOAICountryEnum::DK:
            val = "DK";
            break;
        case eOAICountryEnum::EE:
            val = "EE";
            break;
        case eOAICountryEnum::FI:
            val = "FI";
            break;
        case eOAICountryEnum::FR:
            val = "FR";
            break;
        case eOAICountryEnum::DE:
            val = "DE";
            break;
        case eOAICountryEnum::GR:
            val = "GR";
            break;
        case eOAICountryEnum::HU:
            val = "HU";
            break;
        case eOAICountryEnum::IS:
            val = "IS";
            break;
        case eOAICountryEnum::IE:
            val = "IE";
            break;
        case eOAICountryEnum::IT:
            val = "IT";
            break;
        case eOAICountryEnum::LV:
            val = "LV";
            break;
        case eOAICountryEnum::LI:
            val = "LI";
            break;
        case eOAICountryEnum::LT:
            val = "LT";
            break;
        case eOAICountryEnum::LU:
            val = "LU";
            break;
        case eOAICountryEnum::MT:
            val = "MT";
            break;
        case eOAICountryEnum::NL:
            val = "NL";
            break;
        case eOAICountryEnum::FALSE:
            val = "false";
            break;
        case eOAICountryEnum::PL:
            val = "PL";
            break;
        case eOAICountryEnum::PT:
            val = "PT";
            break;
        case eOAICountryEnum::RO:
            val = "RO";
            break;
        case eOAICountryEnum::SK:
            val = "SK";
            break;
        case eOAICountryEnum::SI:
            val = "SI";
            break;
        case eOAICountryEnum::ES:
            val = "ES";
            break;
        case eOAICountryEnum::SE:
            val = "SE";
            break;
        case eOAICountryEnum::GB:
            val = "GB";
            break;
        case eOAICountryEnum::US:
            val = "US";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICountryEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICountryEnum::eOAICountryEnum OAICountryEnum::getValue() const {
    return m_value;
}

void OAICountryEnum::setValue(const OAICountryEnum::eOAICountryEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICountryEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAICountryEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
