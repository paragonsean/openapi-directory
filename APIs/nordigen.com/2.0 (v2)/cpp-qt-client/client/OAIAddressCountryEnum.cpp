/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressCountryEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressCountryEnum::OAIAddressCountryEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressCountryEnum::OAIAddressCountryEnum() {
    this->initializeModel();
}

OAIAddressCountryEnum::~OAIAddressCountryEnum() {}

void OAIAddressCountryEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAddressCountryEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAddressCountryEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::AT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::BE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::BG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::HR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::CY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::CZ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::DK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::EE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::GR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::HU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::IS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::IE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LV", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::LV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::LI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::LT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::LU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::MT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("false", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::FALSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::PL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::RO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::SK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::SI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::SE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::GB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("US", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAddressCountryEnum::US;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAddressCountryEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAddressCountryEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAddressCountryEnum::AT:
            val = "AT";
            break;
        case eOAIAddressCountryEnum::BE:
            val = "BE";
            break;
        case eOAIAddressCountryEnum::BG:
            val = "BG";
            break;
        case eOAIAddressCountryEnum::HR:
            val = "HR";
            break;
        case eOAIAddressCountryEnum::CY:
            val = "CY";
            break;
        case eOAIAddressCountryEnum::CZ:
            val = "CZ";
            break;
        case eOAIAddressCountryEnum::DK:
            val = "DK";
            break;
        case eOAIAddressCountryEnum::EE:
            val = "EE";
            break;
        case eOAIAddressCountryEnum::FI:
            val = "FI";
            break;
        case eOAIAddressCountryEnum::FR:
            val = "FR";
            break;
        case eOAIAddressCountryEnum::DE:
            val = "DE";
            break;
        case eOAIAddressCountryEnum::GR:
            val = "GR";
            break;
        case eOAIAddressCountryEnum::HU:
            val = "HU";
            break;
        case eOAIAddressCountryEnum::IS:
            val = "IS";
            break;
        case eOAIAddressCountryEnum::IE:
            val = "IE";
            break;
        case eOAIAddressCountryEnum::IT:
            val = "IT";
            break;
        case eOAIAddressCountryEnum::LV:
            val = "LV";
            break;
        case eOAIAddressCountryEnum::LI:
            val = "LI";
            break;
        case eOAIAddressCountryEnum::LT:
            val = "LT";
            break;
        case eOAIAddressCountryEnum::LU:
            val = "LU";
            break;
        case eOAIAddressCountryEnum::MT:
            val = "MT";
            break;
        case eOAIAddressCountryEnum::NL:
            val = "NL";
            break;
        case eOAIAddressCountryEnum::FALSE:
            val = "false";
            break;
        case eOAIAddressCountryEnum::PL:
            val = "PL";
            break;
        case eOAIAddressCountryEnum::PT:
            val = "PT";
            break;
        case eOAIAddressCountryEnum::RO:
            val = "RO";
            break;
        case eOAIAddressCountryEnum::SK:
            val = "SK";
            break;
        case eOAIAddressCountryEnum::SI:
            val = "SI";
            break;
        case eOAIAddressCountryEnum::ES:
            val = "ES";
            break;
        case eOAIAddressCountryEnum::SE:
            val = "SE";
            break;
        case eOAIAddressCountryEnum::GB:
            val = "GB";
            break;
        case eOAIAddressCountryEnum::US:
            val = "US";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAddressCountryEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAddressCountryEnum::eOAIAddressCountryEnum OAIAddressCountryEnum::getValue() const {
    return m_value;
}

void OAIAddressCountryEnum::setValue(const OAIAddressCountryEnum::eOAIAddressCountryEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAddressCountryEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIAddressCountryEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
