/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDebtorAccountWriteRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDebtorAccountWriteRequest::OAIDebtorAccountWriteRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDebtorAccountWriteRequest::OAIDebtorAccountWriteRequest() {
    this->initializeModel();
}

OAIDebtorAccountWriteRequest::~OAIDebtorAccountWriteRequest() {}

void OAIDebtorAccountWriteRequest::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_address_country_isSet = false;
    m_address_country_isValid = false;

    m_address_street_isSet = false;
    m_address_street_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_post_code_isSet = false;
    m_post_code_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_number_isSet = false;
    m_type_number_isValid = false;
}

void OAIDebtorAccountWriteRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDebtorAccountWriteRequest::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_address_country_isValid = ::OpenAPI::fromJsonValue(m_address_country, json[QString("address_country")]);
    m_address_country_isSet = !json[QString("address_country")].isNull() && m_address_country_isValid;

    m_address_street_isValid = ::OpenAPI::fromJsonValue(m_address_street, json[QString("address_street")]);
    m_address_street_isSet = !json[QString("address_street")].isNull() && m_address_street_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_post_code_isValid = ::OpenAPI::fromJsonValue(m_post_code, json[QString("post_code")]);
    m_post_code_isSet = !json[QString("post_code")].isNull() && m_post_code_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_type_number_isValid = ::OpenAPI::fromJsonValue(m_type_number, json[QString("type_number")]);
    m_type_number_isSet = !json[QString("type_number")].isNull() && m_type_number_isValid;
}

QString OAIDebtorAccountWriteRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDebtorAccountWriteRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_address_country_isSet) {
        obj.insert(QString("address_country"), ::OpenAPI::toJsonValue(m_address_country));
    }
    if (m_address_street_isSet) {
        obj.insert(QString("address_street"), ::OpenAPI::toJsonValue(m_address_street));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_post_code_isSet) {
        obj.insert(QString("post_code"), ::OpenAPI::toJsonValue(m_post_code));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_number_isSet) {
        obj.insert(QString("type_number"), ::OpenAPI::toJsonValue(m_type_number));
    }
    return obj;
}

QString OAIDebtorAccountWriteRequest::getAccount() const {
    return m_account;
}
void OAIDebtorAccountWriteRequest::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_account_Set() const{
    return m_account_isSet;
}

bool OAIDebtorAccountWriteRequest::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIDebtorAccountWriteRequest::getAddressCountry() const {
    return m_address_country;
}
void OAIDebtorAccountWriteRequest::setAddressCountry(const QString &address_country) {
    m_address_country = address_country;
    m_address_country_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_address_country_Set() const{
    return m_address_country_isSet;
}

bool OAIDebtorAccountWriteRequest::is_address_country_Valid() const{
    return m_address_country_isValid;
}

QString OAIDebtorAccountWriteRequest::getAddressStreet() const {
    return m_address_street;
}
void OAIDebtorAccountWriteRequest::setAddressStreet(const QString &address_street) {
    m_address_street = address_street;
    m_address_street_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_address_street_Set() const{
    return m_address_street_isSet;
}

bool OAIDebtorAccountWriteRequest::is_address_street_Valid() const{
    return m_address_street_isValid;
}

QString OAIDebtorAccountWriteRequest::getCurrency() const {
    return m_currency;
}
void OAIDebtorAccountWriteRequest::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDebtorAccountWriteRequest::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIDebtorAccountWriteRequest::getName() const {
    return m_name;
}
void OAIDebtorAccountWriteRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDebtorAccountWriteRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDebtorAccountWriteRequest::getPostCode() const {
    return m_post_code;
}
void OAIDebtorAccountWriteRequest::setPostCode(const QString &post_code) {
    m_post_code = post_code;
    m_post_code_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_post_code_Set() const{
    return m_post_code_isSet;
}

bool OAIDebtorAccountWriteRequest::is_post_code_Valid() const{
    return m_post_code_isValid;
}

OAITypeEnum OAIDebtorAccountWriteRequest::getType() const {
    return m_type;
}
void OAIDebtorAccountWriteRequest::setType(const OAITypeEnum &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDebtorAccountWriteRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDebtorAccountWriteRequest::getTypeNumber() const {
    return m_type_number;
}
void OAIDebtorAccountWriteRequest::setTypeNumber(const QString &type_number) {
    m_type_number = type_number;
    m_type_number_isSet = true;
}

bool OAIDebtorAccountWriteRequest::is_type_number_Set() const{
    return m_type_number_isSet;
}

bool OAIDebtorAccountWriteRequest::is_type_number_Valid() const{
    return m_type_number_isValid;
}

bool OAIDebtorAccountWriteRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDebtorAccountWriteRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
