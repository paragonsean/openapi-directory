/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrequencyEnum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrequencyEnum::OAIFrequencyEnum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrequencyEnum::OAIFrequencyEnum() {
    this->initializeModel();
}

OAIFrequencyEnum::~OAIFrequencyEnum() {}

void OAIFrequencyEnum::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFrequencyEnum::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFrequencyEnum::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Daily", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::DAILY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Weekly", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::WEEKLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EveryTwoWeeks", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::EVERYTWOWEEKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Monthly", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::MONTHLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EveryTwoMonths", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::EVERYTWOMONTHS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Quarterly", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::QUARTERLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SemiAnnual", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::SEMIANNUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Annual", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::ANNUAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MonthlyVariable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFrequencyEnum::MONTHLYVARIABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFrequencyEnum::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFrequencyEnum::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFrequencyEnum::DAILY:
            val = "Daily";
            break;
        case eOAIFrequencyEnum::WEEKLY:
            val = "Weekly";
            break;
        case eOAIFrequencyEnum::EVERYTWOWEEKS:
            val = "EveryTwoWeeks";
            break;
        case eOAIFrequencyEnum::MONTHLY:
            val = "Monthly";
            break;
        case eOAIFrequencyEnum::EVERYTWOMONTHS:
            val = "EveryTwoMonths";
            break;
        case eOAIFrequencyEnum::QUARTERLY:
            val = "Quarterly";
            break;
        case eOAIFrequencyEnum::SEMIANNUAL:
            val = "SemiAnnual";
            break;
        case eOAIFrequencyEnum::ANNUAL:
            val = "Annual";
            break;
        case eOAIFrequencyEnum::MONTHLYVARIABLE:
            val = "MonthlyVariable";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFrequencyEnum::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFrequencyEnum::eOAIFrequencyEnum OAIFrequencyEnum::getValue() const {
    return m_value;
}

void OAIFrequencyEnum::setValue(const OAIFrequencyEnum::eOAIFrequencyEnum& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFrequencyEnum::isSet() const {
    
    return m_value_isSet;
}

bool OAIFrequencyEnum::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
