/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndUserAgreementRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndUserAgreementRequest::OAIEndUserAgreementRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndUserAgreementRequest::OAIEndUserAgreementRequest() {
    this->initializeModel();
}

OAIEndUserAgreementRequest::~OAIEndUserAgreementRequest() {}

void OAIEndUserAgreementRequest::initializeModel() {

    m_access_scope_isSet = false;
    m_access_scope_isValid = false;

    m_access_valid_for_days_isSet = false;
    m_access_valid_for_days_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_max_historical_days_isSet = false;
    m_max_historical_days_isValid = false;
}

void OAIEndUserAgreementRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndUserAgreementRequest::fromJsonObject(QJsonObject json) {

    if(json["access_scope"].isArray()){
        auto arr = json["access_scope"].toArray();
        m_access_scope_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QJsonValue> item;
                m_access_scope_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_access_scope_isSet = !jval.isNull() && m_access_scope_isValid;
                m_access_scope.push_back(item);
            }
        }
    }

    m_access_valid_for_days_isValid = ::OpenAPI::fromJsonValue(m_access_valid_for_days, json[QString("access_valid_for_days")]);
    m_access_valid_for_days_isSet = !json[QString("access_valid_for_days")].isNull() && m_access_valid_for_days_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_max_historical_days_isValid = ::OpenAPI::fromJsonValue(m_max_historical_days, json[QString("max_historical_days")]);
    m_max_historical_days_isSet = !json[QString("max_historical_days")].isNull() && m_max_historical_days_isValid;
}

QString OAIEndUserAgreementRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndUserAgreementRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_scope.size() > 0) {
        
        obj.insert(QString("access_scope"), toJsonValue(m_access_scope));
    }
    if (m_access_valid_for_days_isSet) {
        obj.insert(QString("access_valid_for_days"), ::OpenAPI::toJsonValue(m_access_valid_for_days));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_max_historical_days_isSet) {
        obj.insert(QString("max_historical_days"), ::OpenAPI::toJsonValue(m_max_historical_days));
    }
    return obj;
}

QList<QList<QJsonValue>> OAIEndUserAgreementRequest::getAccessScope() const {
    return m_access_scope;
}
void OAIEndUserAgreementRequest::setAccessScope(const QList<QList<QJsonValue>> &access_scope) {
    m_access_scope = access_scope;
    m_access_scope_isSet = true;
}

bool OAIEndUserAgreementRequest::is_access_scope_Set() const{
    return m_access_scope_isSet;
}

bool OAIEndUserAgreementRequest::is_access_scope_Valid() const{
    return m_access_scope_isValid;
}

qint32 OAIEndUserAgreementRequest::getAccessValidForDays() const {
    return m_access_valid_for_days;
}
void OAIEndUserAgreementRequest::setAccessValidForDays(const qint32 &access_valid_for_days) {
    m_access_valid_for_days = access_valid_for_days;
    m_access_valid_for_days_isSet = true;
}

bool OAIEndUserAgreementRequest::is_access_valid_for_days_Set() const{
    return m_access_valid_for_days_isSet;
}

bool OAIEndUserAgreementRequest::is_access_valid_for_days_Valid() const{
    return m_access_valid_for_days_isValid;
}

QString OAIEndUserAgreementRequest::getInstitutionId() const {
    return m_institution_id;
}
void OAIEndUserAgreementRequest::setInstitutionId(const QString &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAIEndUserAgreementRequest::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAIEndUserAgreementRequest::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

qint32 OAIEndUserAgreementRequest::getMaxHistoricalDays() const {
    return m_max_historical_days;
}
void OAIEndUserAgreementRequest::setMaxHistoricalDays(const qint32 &max_historical_days) {
    m_max_historical_days = max_historical_days;
    m_max_historical_days_isSet = true;
}

bool OAIEndUserAgreementRequest::is_max_historical_days_Set() const{
    return m_max_historical_days_isSet;
}

bool OAIEndUserAgreementRequest::is_max_historical_days_Valid() const{
    return m_max_historical_days_isValid;
}

bool OAIEndUserAgreementRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_valid_for_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_historical_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndUserAgreementRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_institution_id_isValid && true;
}

} // namespace OpenAPI
