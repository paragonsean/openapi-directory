/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequisitionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequisitionRequest::OAIRequisitionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequisitionRequest::OAIRequisitionRequest() {
    this->initializeModel();
}

OAIRequisitionRequest::~OAIRequisitionRequest() {}

void OAIRequisitionRequest::initializeModel() {

    m_account_selection_isSet = false;
    m_account_selection_isValid = false;

    m_agreement_isSet = false;
    m_agreement_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_redirect_isSet = false;
    m_redirect_isValid = false;

    m_redirect_immediate_isSet = false;
    m_redirect_immediate_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_ssn_isSet = false;
    m_ssn_isValid = false;

    m_user_language_isSet = false;
    m_user_language_isValid = false;
}

void OAIRequisitionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequisitionRequest::fromJsonObject(QJsonObject json) {

    m_account_selection_isValid = ::OpenAPI::fromJsonValue(m_account_selection, json[QString("account_selection")]);
    m_account_selection_isSet = !json[QString("account_selection")].isNull() && m_account_selection_isValid;

    m_agreement_isValid = ::OpenAPI::fromJsonValue(m_agreement, json[QString("agreement")]);
    m_agreement_isSet = !json[QString("agreement")].isNull() && m_agreement_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_redirect_isValid = ::OpenAPI::fromJsonValue(m_redirect, json[QString("redirect")]);
    m_redirect_isSet = !json[QString("redirect")].isNull() && m_redirect_isValid;

    m_redirect_immediate_isValid = ::OpenAPI::fromJsonValue(m_redirect_immediate, json[QString("redirect_immediate")]);
    m_redirect_immediate_isSet = !json[QString("redirect_immediate")].isNull() && m_redirect_immediate_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_ssn_isValid = ::OpenAPI::fromJsonValue(m_ssn, json[QString("ssn")]);
    m_ssn_isSet = !json[QString("ssn")].isNull() && m_ssn_isValid;

    m_user_language_isValid = ::OpenAPI::fromJsonValue(m_user_language, json[QString("user_language")]);
    m_user_language_isSet = !json[QString("user_language")].isNull() && m_user_language_isValid;
}

QString OAIRequisitionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequisitionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_selection_isSet) {
        obj.insert(QString("account_selection"), ::OpenAPI::toJsonValue(m_account_selection));
    }
    if (m_agreement_isSet) {
        obj.insert(QString("agreement"), ::OpenAPI::toJsonValue(m_agreement));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_redirect_isSet) {
        obj.insert(QString("redirect"), ::OpenAPI::toJsonValue(m_redirect));
    }
    if (m_redirect_immediate_isSet) {
        obj.insert(QString("redirect_immediate"), ::OpenAPI::toJsonValue(m_redirect_immediate));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_ssn_isSet) {
        obj.insert(QString("ssn"), ::OpenAPI::toJsonValue(m_ssn));
    }
    if (m_user_language_isSet) {
        obj.insert(QString("user_language"), ::OpenAPI::toJsonValue(m_user_language));
    }
    return obj;
}

bool OAIRequisitionRequest::isAccountSelection() const {
    return m_account_selection;
}
void OAIRequisitionRequest::setAccountSelection(const bool &account_selection) {
    m_account_selection = account_selection;
    m_account_selection_isSet = true;
}

bool OAIRequisitionRequest::is_account_selection_Set() const{
    return m_account_selection_isSet;
}

bool OAIRequisitionRequest::is_account_selection_Valid() const{
    return m_account_selection_isValid;
}

QString OAIRequisitionRequest::getAgreement() const {
    return m_agreement;
}
void OAIRequisitionRequest::setAgreement(const QString &agreement) {
    m_agreement = agreement;
    m_agreement_isSet = true;
}

bool OAIRequisitionRequest::is_agreement_Set() const{
    return m_agreement_isSet;
}

bool OAIRequisitionRequest::is_agreement_Valid() const{
    return m_agreement_isValid;
}

QString OAIRequisitionRequest::getInstitutionId() const {
    return m_institution_id;
}
void OAIRequisitionRequest::setInstitutionId(const QString &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAIRequisitionRequest::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAIRequisitionRequest::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

QString OAIRequisitionRequest::getRedirect() const {
    return m_redirect;
}
void OAIRequisitionRequest::setRedirect(const QString &redirect) {
    m_redirect = redirect;
    m_redirect_isSet = true;
}

bool OAIRequisitionRequest::is_redirect_Set() const{
    return m_redirect_isSet;
}

bool OAIRequisitionRequest::is_redirect_Valid() const{
    return m_redirect_isValid;
}

bool OAIRequisitionRequest::isRedirectImmediate() const {
    return m_redirect_immediate;
}
void OAIRequisitionRequest::setRedirectImmediate(const bool &redirect_immediate) {
    m_redirect_immediate = redirect_immediate;
    m_redirect_immediate_isSet = true;
}

bool OAIRequisitionRequest::is_redirect_immediate_Set() const{
    return m_redirect_immediate_isSet;
}

bool OAIRequisitionRequest::is_redirect_immediate_Valid() const{
    return m_redirect_immediate_isValid;
}

QString OAIRequisitionRequest::getReference() const {
    return m_reference;
}
void OAIRequisitionRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIRequisitionRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIRequisitionRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIRequisitionRequest::getSsn() const {
    return m_ssn;
}
void OAIRequisitionRequest::setSsn(const QString &ssn) {
    m_ssn = ssn;
    m_ssn_isSet = true;
}

bool OAIRequisitionRequest::is_ssn_Set() const{
    return m_ssn_isSet;
}

bool OAIRequisitionRequest::is_ssn_Valid() const{
    return m_ssn_isValid;
}

QString OAIRequisitionRequest::getUserLanguage() const {
    return m_user_language;
}
void OAIRequisitionRequest::setUserLanguage(const QString &user_language) {
    m_user_language = user_language;
    m_user_language_isSet = true;
}

bool OAIRequisitionRequest::is_user_language_Set() const{
    return m_user_language_isSet;
}

bool OAIRequisitionRequest::is_user_language_Valid() const{
    return m_user_language_isValid;
}

bool OAIRequisitionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agreement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_immediate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_language_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequisitionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_institution_id_isValid && m_redirect_isValid && true;
}

} // namespace OpenAPI
