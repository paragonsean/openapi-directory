/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeriodicPaymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeriodicPaymentRequest::OAIPeriodicPaymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeriodicPaymentRequest::OAIPeriodicPaymentRequest() {
    this->initializeModel();
}

OAIPeriodicPaymentRequest::~OAIPeriodicPaymentRequest() {}

void OAIPeriodicPaymentRequest::initializeModel() {

    m_day_of_execution_isSet = false;
    m_day_of_execution_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_execution_rule_isSet = false;
    m_execution_rule_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIPeriodicPaymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeriodicPaymentRequest::fromJsonObject(QJsonObject json) {

    m_day_of_execution_isValid = ::OpenAPI::fromJsonValue(m_day_of_execution, json[QString("day_of_execution")]);
    m_day_of_execution_isSet = !json[QString("day_of_execution")].isNull() && m_day_of_execution_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_execution_rule_isValid = ::OpenAPI::fromJsonValue(m_execution_rule, json[QString("execution_rule")]);
    m_execution_rule_isSet = !json[QString("execution_rule")].isNull() && m_execution_rule_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;
}

QString OAIPeriodicPaymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeriodicPaymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_execution_isSet) {
        obj.insert(QString("day_of_execution"), ::OpenAPI::toJsonValue(m_day_of_execution));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_execution_rule.isSet()) {
        obj.insert(QString("execution_rule"), ::OpenAPI::toJsonValue(m_execution_rule));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIPeriodicPaymentRequest::getDayOfExecution() const {
    return m_day_of_execution;
}
void OAIPeriodicPaymentRequest::setDayOfExecution(const QString &day_of_execution) {
    m_day_of_execution = day_of_execution;
    m_day_of_execution_isSet = true;
}

bool OAIPeriodicPaymentRequest::is_day_of_execution_Set() const{
    return m_day_of_execution_isSet;
}

bool OAIPeriodicPaymentRequest::is_day_of_execution_Valid() const{
    return m_day_of_execution_isValid;
}

QDate OAIPeriodicPaymentRequest::getEndDate() const {
    return m_end_date;
}
void OAIPeriodicPaymentRequest::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPeriodicPaymentRequest::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPeriodicPaymentRequest::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIExecutionRuleEnum OAIPeriodicPaymentRequest::getExecutionRule() const {
    return m_execution_rule;
}
void OAIPeriodicPaymentRequest::setExecutionRule(const OAIExecutionRuleEnum &execution_rule) {
    m_execution_rule = execution_rule;
    m_execution_rule_isSet = true;
}

bool OAIPeriodicPaymentRequest::is_execution_rule_Set() const{
    return m_execution_rule_isSet;
}

bool OAIPeriodicPaymentRequest::is_execution_rule_Valid() const{
    return m_execution_rule_isValid;
}

OAIFrequencyEnum OAIPeriodicPaymentRequest::getFrequency() const {
    return m_frequency;
}
void OAIPeriodicPaymentRequest::setFrequency(const OAIFrequencyEnum &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIPeriodicPaymentRequest::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIPeriodicPaymentRequest::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QDate OAIPeriodicPaymentRequest::getStartDate() const {
    return m_start_date;
}
void OAIPeriodicPaymentRequest::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPeriodicPaymentRequest::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPeriodicPaymentRequest::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIPeriodicPaymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_execution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeriodicPaymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_date_isValid && true;
}

} // namespace OpenAPI
