/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentWriteRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentWriteRequest::OAIPaymentWriteRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentWriteRequest::OAIPaymentWriteRequest() {
    this->initializeModel();
}

OAIPaymentWriteRequest::~OAIPaymentWriteRequest() {}

void OAIPaymentWriteRequest::initializeModel() {

    m_creditor_account_isSet = false;
    m_creditor_account_isValid = false;

    m_creditor_object_isSet = false;
    m_creditor_object_isValid = false;

    m_custom_payment_id_isSet = false;
    m_custom_payment_id_isValid = false;

    m_debtor_account_isSet = false;
    m_debtor_account_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_institution_id_isSet = false;
    m_institution_id_isValid = false;

    m_instructed_amount_isSet = false;
    m_instructed_amount_isValid = false;

    m_payment_product_isSet = false;
    m_payment_product_isValid = false;

    m_periodic_payment_isSet = false;
    m_periodic_payment_isValid = false;

    m_redirect_isSet = false;
    m_redirect_isValid = false;

    m_requested_execution_date_isSet = false;
    m_requested_execution_date_isValid = false;

    m_submit_payment_isSet = false;
    m_submit_payment_isValid = false;
}

void OAIPaymentWriteRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentWriteRequest::fromJsonObject(QJsonObject json) {

    m_creditor_account_isValid = ::OpenAPI::fromJsonValue(m_creditor_account, json[QString("creditor_account")]);
    m_creditor_account_isSet = !json[QString("creditor_account")].isNull() && m_creditor_account_isValid;

    m_creditor_object_isValid = ::OpenAPI::fromJsonValue(m_creditor_object, json[QString("creditor_object")]);
    m_creditor_object_isSet = !json[QString("creditor_object")].isNull() && m_creditor_object_isValid;

    m_custom_payment_id_isValid = ::OpenAPI::fromJsonValue(m_custom_payment_id, json[QString("custom_payment_id")]);
    m_custom_payment_id_isSet = !json[QString("custom_payment_id")].isNull() && m_custom_payment_id_isValid;

    m_debtor_account_isValid = ::OpenAPI::fromJsonValue(m_debtor_account, json[QString("debtor_account")]);
    m_debtor_account_isSet = !json[QString("debtor_account")].isNull() && m_debtor_account_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_institution_id_isValid = ::OpenAPI::fromJsonValue(m_institution_id, json[QString("institution_id")]);
    m_institution_id_isSet = !json[QString("institution_id")].isNull() && m_institution_id_isValid;

    m_instructed_amount_isValid = ::OpenAPI::fromJsonValue(m_instructed_amount, json[QString("instructed_amount")]);
    m_instructed_amount_isSet = !json[QString("instructed_amount")].isNull() && m_instructed_amount_isValid;

    m_payment_product_isValid = ::OpenAPI::fromJsonValue(m_payment_product, json[QString("payment_product")]);
    m_payment_product_isSet = !json[QString("payment_product")].isNull() && m_payment_product_isValid;

    m_periodic_payment_isValid = ::OpenAPI::fromJsonValue(m_periodic_payment, json[QString("periodic_payment")]);
    m_periodic_payment_isSet = !json[QString("periodic_payment")].isNull() && m_periodic_payment_isValid;

    m_redirect_isValid = ::OpenAPI::fromJsonValue(m_redirect, json[QString("redirect")]);
    m_redirect_isSet = !json[QString("redirect")].isNull() && m_redirect_isValid;

    m_requested_execution_date_isValid = ::OpenAPI::fromJsonValue(m_requested_execution_date, json[QString("requested_execution_date")]);
    m_requested_execution_date_isSet = !json[QString("requested_execution_date")].isNull() && m_requested_execution_date_isValid;

    m_submit_payment_isValid = ::OpenAPI::fromJsonValue(m_submit_payment, json[QString("submit_payment")]);
    m_submit_payment_isSet = !json[QString("submit_payment")].isNull() && m_submit_payment_isValid;
}

QString OAIPaymentWriteRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentWriteRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_creditor_account_isSet) {
        obj.insert(QString("creditor_account"), ::OpenAPI::toJsonValue(m_creditor_account));
    }
    if (m_creditor_object.isSet()) {
        obj.insert(QString("creditor_object"), ::OpenAPI::toJsonValue(m_creditor_object));
    }
    if (m_custom_payment_id_isSet) {
        obj.insert(QString("custom_payment_id"), ::OpenAPI::toJsonValue(m_custom_payment_id));
    }
    if (m_debtor_account.isSet()) {
        obj.insert(QString("debtor_account"), ::OpenAPI::toJsonValue(m_debtor_account));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_institution_id_isSet) {
        obj.insert(QString("institution_id"), ::OpenAPI::toJsonValue(m_institution_id));
    }
    if (m_instructed_amount.isSet()) {
        obj.insert(QString("instructed_amount"), ::OpenAPI::toJsonValue(m_instructed_amount));
    }
    if (m_payment_product.isSet()) {
        obj.insert(QString("payment_product"), ::OpenAPI::toJsonValue(m_payment_product));
    }
    if (m_periodic_payment.isSet()) {
        obj.insert(QString("periodic_payment"), ::OpenAPI::toJsonValue(m_periodic_payment));
    }
    if (m_redirect_isSet) {
        obj.insert(QString("redirect"), ::OpenAPI::toJsonValue(m_redirect));
    }
    if (m_requested_execution_date_isSet) {
        obj.insert(QString("requested_execution_date"), ::OpenAPI::toJsonValue(m_requested_execution_date));
    }
    if (m_submit_payment_isSet) {
        obj.insert(QString("submit_payment"), ::OpenAPI::toJsonValue(m_submit_payment));
    }
    return obj;
}

QString OAIPaymentWriteRequest::getCreditorAccount() const {
    return m_creditor_account;
}
void OAIPaymentWriteRequest::setCreditorAccount(const QString &creditor_account) {
    m_creditor_account = creditor_account;
    m_creditor_account_isSet = true;
}

bool OAIPaymentWriteRequest::is_creditor_account_Set() const{
    return m_creditor_account_isSet;
}

bool OAIPaymentWriteRequest::is_creditor_account_Valid() const{
    return m_creditor_account_isValid;
}

OAICreditorAccountWriteRequest OAIPaymentWriteRequest::getCreditorObject() const {
    return m_creditor_object;
}
void OAIPaymentWriteRequest::setCreditorObject(const OAICreditorAccountWriteRequest &creditor_object) {
    m_creditor_object = creditor_object;
    m_creditor_object_isSet = true;
}

bool OAIPaymentWriteRequest::is_creditor_object_Set() const{
    return m_creditor_object_isSet;
}

bool OAIPaymentWriteRequest::is_creditor_object_Valid() const{
    return m_creditor_object_isValid;
}

QString OAIPaymentWriteRequest::getCustomPaymentId() const {
    return m_custom_payment_id;
}
void OAIPaymentWriteRequest::setCustomPaymentId(const QString &custom_payment_id) {
    m_custom_payment_id = custom_payment_id;
    m_custom_payment_id_isSet = true;
}

bool OAIPaymentWriteRequest::is_custom_payment_id_Set() const{
    return m_custom_payment_id_isSet;
}

bool OAIPaymentWriteRequest::is_custom_payment_id_Valid() const{
    return m_custom_payment_id_isValid;
}

OAIDebtorAccountWriteRequest OAIPaymentWriteRequest::getDebtorAccount() const {
    return m_debtor_account;
}
void OAIPaymentWriteRequest::setDebtorAccount(const OAIDebtorAccountWriteRequest &debtor_account) {
    m_debtor_account = debtor_account;
    m_debtor_account_isSet = true;
}

bool OAIPaymentWriteRequest::is_debtor_account_Set() const{
    return m_debtor_account_isSet;
}

bool OAIPaymentWriteRequest::is_debtor_account_Valid() const{
    return m_debtor_account_isValid;
}

QString OAIPaymentWriteRequest::getDescription() const {
    return m_description;
}
void OAIPaymentWriteRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentWriteRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentWriteRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPaymentWriteRequest::getInstitutionId() const {
    return m_institution_id;
}
void OAIPaymentWriteRequest::setInstitutionId(const QString &institution_id) {
    m_institution_id = institution_id;
    m_institution_id_isSet = true;
}

bool OAIPaymentWriteRequest::is_institution_id_Set() const{
    return m_institution_id_isSet;
}

bool OAIPaymentWriteRequest::is_institution_id_Valid() const{
    return m_institution_id_isValid;
}

OAIInstructedAmountRequest OAIPaymentWriteRequest::getInstructedAmount() const {
    return m_instructed_amount;
}
void OAIPaymentWriteRequest::setInstructedAmount(const OAIInstructedAmountRequest &instructed_amount) {
    m_instructed_amount = instructed_amount;
    m_instructed_amount_isSet = true;
}

bool OAIPaymentWriteRequest::is_instructed_amount_Set() const{
    return m_instructed_amount_isSet;
}

bool OAIPaymentWriteRequest::is_instructed_amount_Valid() const{
    return m_instructed_amount_isValid;
}

OAIPaymentProductEnum OAIPaymentWriteRequest::getPaymentProduct() const {
    return m_payment_product;
}
void OAIPaymentWriteRequest::setPaymentProduct(const OAIPaymentProductEnum &payment_product) {
    m_payment_product = payment_product;
    m_payment_product_isSet = true;
}

bool OAIPaymentWriteRequest::is_payment_product_Set() const{
    return m_payment_product_isSet;
}

bool OAIPaymentWriteRequest::is_payment_product_Valid() const{
    return m_payment_product_isValid;
}

OAIPeriodicPaymentRequest OAIPaymentWriteRequest::getPeriodicPayment() const {
    return m_periodic_payment;
}
void OAIPaymentWriteRequest::setPeriodicPayment(const OAIPeriodicPaymentRequest &periodic_payment) {
    m_periodic_payment = periodic_payment;
    m_periodic_payment_isSet = true;
}

bool OAIPaymentWriteRequest::is_periodic_payment_Set() const{
    return m_periodic_payment_isSet;
}

bool OAIPaymentWriteRequest::is_periodic_payment_Valid() const{
    return m_periodic_payment_isValid;
}

QString OAIPaymentWriteRequest::getRedirect() const {
    return m_redirect;
}
void OAIPaymentWriteRequest::setRedirect(const QString &redirect) {
    m_redirect = redirect;
    m_redirect_isSet = true;
}

bool OAIPaymentWriteRequest::is_redirect_Set() const{
    return m_redirect_isSet;
}

bool OAIPaymentWriteRequest::is_redirect_Valid() const{
    return m_redirect_isValid;
}

QDate OAIPaymentWriteRequest::getRequestedExecutionDate() const {
    return m_requested_execution_date;
}
void OAIPaymentWriteRequest::setRequestedExecutionDate(const QDate &requested_execution_date) {
    m_requested_execution_date = requested_execution_date;
    m_requested_execution_date_isSet = true;
}

bool OAIPaymentWriteRequest::is_requested_execution_date_Set() const{
    return m_requested_execution_date_isSet;
}

bool OAIPaymentWriteRequest::is_requested_execution_date_Valid() const{
    return m_requested_execution_date_isValid;
}

bool OAIPaymentWriteRequest::isSubmitPayment() const {
    return m_submit_payment;
}
void OAIPaymentWriteRequest::setSubmitPayment(const bool &submit_payment) {
    m_submit_payment = submit_payment;
    m_submit_payment_isSet = true;
}

bool OAIPaymentWriteRequest::is_submit_payment_Set() const{
    return m_submit_payment_isSet;
}

bool OAIPaymentWriteRequest::is_submit_payment_Valid() const{
    return m_submit_payment_isValid;
}

bool OAIPaymentWriteRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creditor_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creditor_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debtor_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_institution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructed_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_periodic_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_execution_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_payment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentWriteRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instructed_amount_isValid && m_redirect_isValid && true;
}

} // namespace OpenAPI
