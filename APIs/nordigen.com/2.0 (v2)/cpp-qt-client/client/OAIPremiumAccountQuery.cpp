/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPremiumAccountQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPremiumAccountQuery::OAIPremiumAccountQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPremiumAccountQuery::OAIPremiumAccountQuery() {
    this->initializeModel();
}

OAIPremiumAccountQuery::~OAIPremiumAccountQuery() {}

void OAIPremiumAccountQuery::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;
}

void OAIPremiumAccountQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPremiumAccountQuery::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("date_from")]);
    m_date_from_isSet = !json[QString("date_from")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(m_date_to, json[QString("date_to")]);
    m_date_to_isSet = !json[QString("date_to")].isNull() && m_date_to_isValid;
}

QString OAIPremiumAccountQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPremiumAccountQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date_from_isSet) {
        obj.insert(QString("date_from"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("date_to"), ::OpenAPI::toJsonValue(m_date_to));
    }
    return obj;
}

OAICountryEnum OAIPremiumAccountQuery::getCountry() const {
    return m_country;
}
void OAIPremiumAccountQuery::setCountry(const OAICountryEnum &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPremiumAccountQuery::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPremiumAccountQuery::is_country_Valid() const{
    return m_country_isValid;
}

QDate OAIPremiumAccountQuery::getDateFrom() const {
    return m_date_from;
}
void OAIPremiumAccountQuery::setDateFrom(const QDate &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAIPremiumAccountQuery::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAIPremiumAccountQuery::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QDate OAIPremiumAccountQuery::getDateTo() const {
    return m_date_to;
}
void OAIPremiumAccountQuery::setDateTo(const QDate &date_to) {
    m_date_to = date_to;
    m_date_to_isSet = true;
}

bool OAIPremiumAccountQuery::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAIPremiumAccountQuery::is_date_to_Valid() const{
    return m_date_to_isValid;
}

bool OAIPremiumAccountQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPremiumAccountQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
