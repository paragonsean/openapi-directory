/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaginatedCreditorAccountList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaginatedCreditorAccountList::OAIPaginatedCreditorAccountList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaginatedCreditorAccountList::OAIPaginatedCreditorAccountList() {
    this->initializeModel();
}

OAIPaginatedCreditorAccountList::~OAIPaginatedCreditorAccountList() {}

void OAIPaginatedCreditorAccountList::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIPaginatedCreditorAccountList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaginatedCreditorAccountList::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIPaginatedCreditorAccountList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaginatedCreditorAccountList::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

qint32 OAIPaginatedCreditorAccountList::getCount() const {
    return m_count;
}
void OAIPaginatedCreditorAccountList::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIPaginatedCreditorAccountList::is_count_Set() const{
    return m_count_isSet;
}

bool OAIPaginatedCreditorAccountList::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIPaginatedCreditorAccountList::getNext() const {
    return m_next;
}
void OAIPaginatedCreditorAccountList::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAIPaginatedCreditorAccountList::is_next_Set() const{
    return m_next_isSet;
}

bool OAIPaginatedCreditorAccountList::is_next_Valid() const{
    return m_next_isValid;
}

QString OAIPaginatedCreditorAccountList::getPrevious() const {
    return m_previous;
}
void OAIPaginatedCreditorAccountList::setPrevious(const QString &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAIPaginatedCreditorAccountList::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAIPaginatedCreditorAccountList::is_previous_Valid() const{
    return m_previous_isValid;
}

QList<OAICreditorAccount> OAIPaginatedCreditorAccountList::getResults() const {
    return m_results;
}
void OAIPaginatedCreditorAccountList::setResults(const QList<OAICreditorAccount> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIPaginatedCreditorAccountList::is_results_Set() const{
    return m_results_isSet;
}

bool OAIPaginatedCreditorAccountList::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIPaginatedCreditorAccountList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaginatedCreditorAccountList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
