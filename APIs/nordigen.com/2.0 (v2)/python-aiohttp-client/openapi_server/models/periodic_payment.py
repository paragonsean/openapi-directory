# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.execution_rule_enum import ExecutionRuleEnum
from openapi_server.models.frequency_enum import FrequencyEnum
from openapi_server import util


class PeriodicPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_execution: str=None, end_date: date=None, execution_rule: ExecutionRuleEnum=None, frequency: FrequencyEnum=None, start_date: date=None):
        """PeriodicPayment - a model defined in OpenAPI

        :param day_of_execution: The day_of_execution of this PeriodicPayment.
        :param end_date: The end_date of this PeriodicPayment.
        :param execution_rule: The execution_rule of this PeriodicPayment.
        :param frequency: The frequency of this PeriodicPayment.
        :param start_date: The start_date of this PeriodicPayment.
        """
        self.openapi_types = {
            'day_of_execution': str,
            'end_date': date,
            'execution_rule': ExecutionRuleEnum,
            'frequency': FrequencyEnum,
            'start_date': date
        }

        self.attribute_map = {
            'day_of_execution': 'day_of_execution',
            'end_date': 'end_date',
            'execution_rule': 'execution_rule',
            'frequency': 'frequency',
            'start_date': 'start_date'
        }

        self._day_of_execution = day_of_execution
        self._end_date = end_date
        self._execution_rule = execution_rule
        self._frequency = frequency
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeriodicPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeriodicPayment of this PeriodicPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_execution(self):
        """Gets the day_of_execution of this PeriodicPayment.


        :return: The day_of_execution of this PeriodicPayment.
        :rtype: str
        """
        return self._day_of_execution

    @day_of_execution.setter
    def day_of_execution(self, day_of_execution):
        """Sets the day_of_execution of this PeriodicPayment.


        :param day_of_execution: The day_of_execution of this PeriodicPayment.
        :type day_of_execution: str
        """

        self._day_of_execution = day_of_execution

    @property
    def end_date(self):
        """Gets the end_date of this PeriodicPayment.


        :return: The end_date of this PeriodicPayment.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PeriodicPayment.


        :param end_date: The end_date of this PeriodicPayment.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def execution_rule(self):
        """Gets the execution_rule of this PeriodicPayment.

        Behavior when periodic payment dates fall on holiday.  * `following` - following * `preceding` - preceding

        :return: The execution_rule of this PeriodicPayment.
        :rtype: ExecutionRuleEnum
        """
        return self._execution_rule

    @execution_rule.setter
    def execution_rule(self, execution_rule):
        """Sets the execution_rule of this PeriodicPayment.

        Behavior when periodic payment dates fall on holiday.  * `following` - following * `preceding` - preceding

        :param execution_rule: The execution_rule of this PeriodicPayment.
        :type execution_rule: ExecutionRuleEnum
        """

        self._execution_rule = execution_rule

    @property
    def frequency(self):
        """Gets the frequency of this PeriodicPayment.


        :return: The frequency of this PeriodicPayment.
        :rtype: FrequencyEnum
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this PeriodicPayment.


        :param frequency: The frequency of this PeriodicPayment.
        :type frequency: FrequencyEnum
        """

        self._frequency = frequency

    @property
    def start_date(self):
        """Gets the start_date of this PeriodicPayment.


        :return: The start_date of this PeriodicPayment.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PeriodicPayment.


        :param start_date: The start_date of this PeriodicPayment.
        :type start_date: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
