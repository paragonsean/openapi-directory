# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creditor_account_write_request import CreditorAccountWriteRequest
from openapi_server.models.debtor_account_write_request import DebtorAccountWriteRequest
from openapi_server.models.instructed_amount_request import InstructedAmountRequest
from openapi_server.models.payment_product_enum import PaymentProductEnum
from openapi_server.models.periodic_payment_request import PeriodicPaymentRequest
from openapi_server import util


class PaymentWriteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creditor_account: str=None, creditor_object: CreditorAccountWriteRequest=None, custom_payment_id: str=None, debtor_account: DebtorAccountWriteRequest=None, description: str='GOCARDLESS', institution_id: str='SWEDBANK_SANDBOX_SANDLV22', instructed_amount: InstructedAmountRequest=None, payment_product: PaymentProductEnum=None, periodic_payment: PeriodicPaymentRequest=None, redirect: str=None, requested_execution_date: date=None, submit_payment: bool=False):
        """PaymentWriteRequest - a model defined in OpenAPI

        :param creditor_account: The creditor_account of this PaymentWriteRequest.
        :param creditor_object: The creditor_object of this PaymentWriteRequest.
        :param custom_payment_id: The custom_payment_id of this PaymentWriteRequest.
        :param debtor_account: The debtor_account of this PaymentWriteRequest.
        :param description: The description of this PaymentWriteRequest.
        :param institution_id: The institution_id of this PaymentWriteRequest.
        :param instructed_amount: The instructed_amount of this PaymentWriteRequest.
        :param payment_product: The payment_product of this PaymentWriteRequest.
        :param periodic_payment: The periodic_payment of this PaymentWriteRequest.
        :param redirect: The redirect of this PaymentWriteRequest.
        :param requested_execution_date: The requested_execution_date of this PaymentWriteRequest.
        :param submit_payment: The submit_payment of this PaymentWriteRequest.
        """
        self.openapi_types = {
            'creditor_account': str,
            'creditor_object': CreditorAccountWriteRequest,
            'custom_payment_id': str,
            'debtor_account': DebtorAccountWriteRequest,
            'description': str,
            'institution_id': str,
            'instructed_amount': InstructedAmountRequest,
            'payment_product': PaymentProductEnum,
            'periodic_payment': PeriodicPaymentRequest,
            'redirect': str,
            'requested_execution_date': date,
            'submit_payment': bool
        }

        self.attribute_map = {
            'creditor_account': 'creditor_account',
            'creditor_object': 'creditor_object',
            'custom_payment_id': 'custom_payment_id',
            'debtor_account': 'debtor_account',
            'description': 'description',
            'institution_id': 'institution_id',
            'instructed_amount': 'instructed_amount',
            'payment_product': 'payment_product',
            'periodic_payment': 'periodic_payment',
            'redirect': 'redirect',
            'requested_execution_date': 'requested_execution_date',
            'submit_payment': 'submit_payment'
        }

        self._creditor_account = creditor_account
        self._creditor_object = creditor_object
        self._custom_payment_id = custom_payment_id
        self._debtor_account = debtor_account
        self._description = description
        self._institution_id = institution_id
        self._instructed_amount = instructed_amount
        self._payment_product = payment_product
        self._periodic_payment = periodic_payment
        self._redirect = redirect
        self._requested_execution_date = requested_execution_date
        self._submit_payment = submit_payment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentWriteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentWriteRequest of this PaymentWriteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PaymentWriteRequest.

        Registered creditor account

        :return: The creditor_account of this PaymentWriteRequest.
        :rtype: str
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PaymentWriteRequest.

        Registered creditor account

        :param creditor_account: The creditor_account of this PaymentWriteRequest.
        :type creditor_account: str
        """

        self._creditor_account = creditor_account

    @property
    def creditor_object(self):
        """Gets the creditor_object of this PaymentWriteRequest.

        Creditor account

        :return: The creditor_object of this PaymentWriteRequest.
        :rtype: CreditorAccountWriteRequest
        """
        return self._creditor_object

    @creditor_object.setter
    def creditor_object(self, creditor_object):
        """Sets the creditor_object of this PaymentWriteRequest.

        Creditor account

        :param creditor_object: The creditor_object of this PaymentWriteRequest.
        :type creditor_object: CreditorAccountWriteRequest
        """

        self._creditor_object = creditor_object

    @property
    def custom_payment_id(self):
        """Gets the custom_payment_id of this PaymentWriteRequest.

        Payment Custom Payment ID

        :return: The custom_payment_id of this PaymentWriteRequest.
        :rtype: str
        """
        return self._custom_payment_id

    @custom_payment_id.setter
    def custom_payment_id(self, custom_payment_id):
        """Sets the custom_payment_id of this PaymentWriteRequest.

        Payment Custom Payment ID

        :param custom_payment_id: The custom_payment_id of this PaymentWriteRequest.
        :type custom_payment_id: str
        """
        if custom_payment_id is not None and len(custom_payment_id) > 35:
            raise ValueError("Invalid value for `custom_payment_id`, length must be less than or equal to `35`")
        if custom_payment_id is not None and len(custom_payment_id) < 1:
            raise ValueError("Invalid value for `custom_payment_id`, length must be greater than or equal to `1`")

        self._custom_payment_id = custom_payment_id

    @property
    def debtor_account(self):
        """Gets the debtor_account of this PaymentWriteRequest.

        Debtor account

        :return: The debtor_account of this PaymentWriteRequest.
        :rtype: DebtorAccountWriteRequest
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this PaymentWriteRequest.

        Debtor account

        :param debtor_account: The debtor_account of this PaymentWriteRequest.
        :type debtor_account: DebtorAccountWriteRequest
        """

        self._debtor_account = debtor_account

    @property
    def description(self):
        """Gets the description of this PaymentWriteRequest.

        Payment description

        :return: The description of this PaymentWriteRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentWriteRequest.

        Payment description

        :param description: The description of this PaymentWriteRequest.
        :type description: str
        """
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def institution_id(self):
        """Gets the institution_id of this PaymentWriteRequest.

        Institution ID for Payment

        :return: The institution_id of this PaymentWriteRequest.
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this PaymentWriteRequest.

        Institution ID for Payment

        :param institution_id: The institution_id of this PaymentWriteRequest.
        :type institution_id: str
        """
        if institution_id is not None and len(institution_id) < 1:
            raise ValueError("Invalid value for `institution_id`, length must be greater than or equal to `1`")

        self._institution_id = institution_id

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PaymentWriteRequest.

        Instructed amount

        :return: The instructed_amount of this PaymentWriteRequest.
        :rtype: InstructedAmountRequest
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PaymentWriteRequest.

        Instructed amount

        :param instructed_amount: The instructed_amount of this PaymentWriteRequest.
        :type instructed_amount: InstructedAmountRequest
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")

        self._instructed_amount = instructed_amount

    @property
    def payment_product(self):
        """Gets the payment_product of this PaymentWriteRequest.

        Payment product  * `T2P` - target-2-payments * `SCT` - sepa-credit-transfers * `ISCT` - instant-sepa-credit-transfer * `CBCT` - cross-border-credit-transfers * `BACS` - Back Payment Scheme * `CHAPS` - CHAPS Payment Scheme * `FPS` - Faster Payment Scheme * `SWIFT` - Swift Payment Service * `BT` - Balance Transfer * `MT` - Money Transfer

        :return: The payment_product of this PaymentWriteRequest.
        :rtype: PaymentProductEnum
        """
        return self._payment_product

    @payment_product.setter
    def payment_product(self, payment_product):
        """Sets the payment_product of this PaymentWriteRequest.

        Payment product  * `T2P` - target-2-payments * `SCT` - sepa-credit-transfers * `ISCT` - instant-sepa-credit-transfer * `CBCT` - cross-border-credit-transfers * `BACS` - Back Payment Scheme * `CHAPS` - CHAPS Payment Scheme * `FPS` - Faster Payment Scheme * `SWIFT` - Swift Payment Service * `BT` - Balance Transfer * `MT` - Money Transfer

        :param payment_product: The payment_product of this PaymentWriteRequest.
        :type payment_product: PaymentProductEnum
        """

        self._payment_product = payment_product

    @property
    def periodic_payment(self):
        """Gets the periodic_payment of this PaymentWriteRequest.


        :return: The periodic_payment of this PaymentWriteRequest.
        :rtype: PeriodicPaymentRequest
        """
        return self._periodic_payment

    @periodic_payment.setter
    def periodic_payment(self, periodic_payment):
        """Sets the periodic_payment of this PaymentWriteRequest.


        :param periodic_payment: The periodic_payment of this PaymentWriteRequest.
        :type periodic_payment: PeriodicPaymentRequest
        """

        self._periodic_payment = periodic_payment

    @property
    def redirect(self):
        """Gets the redirect of this PaymentWriteRequest.

        Redirect URL to your application after payment is done

        :return: The redirect of this PaymentWriteRequest.
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this PaymentWriteRequest.

        Redirect URL to your application after payment is done

        :param redirect: The redirect of this PaymentWriteRequest.
        :type redirect: str
        """
        if redirect is None:
            raise ValueError("Invalid value for `redirect`, must not be `None`")
        if redirect is not None and len(redirect) > 1024:
            raise ValueError("Invalid value for `redirect`, length must be less than or equal to `1024`")
        if redirect is not None and len(redirect) < 1:
            raise ValueError("Invalid value for `redirect`, length must be greater than or equal to `1`")

        self._redirect = redirect

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this PaymentWriteRequest.

        Payment Execution date (for periodic payments)

        :return: The requested_execution_date of this PaymentWriteRequest.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this PaymentWriteRequest.

        Payment Execution date (for periodic payments)

        :param requested_execution_date: The requested_execution_date of this PaymentWriteRequest.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def submit_payment(self):
        """Gets the submit_payment of this PaymentWriteRequest.

        Indicates whether payment should be submitted separately

        :return: The submit_payment of this PaymentWriteRequest.
        :rtype: bool
        """
        return self._submit_payment

    @submit_payment.setter
    def submit_payment(self, submit_payment):
        """Sets the submit_payment of this PaymentWriteRequest.

        Indicates whether payment should be submitted separately

        :param submit_payment: The submit_payment of this PaymentWriteRequest.
        :type submit_payment: bool
        """

        self._submit_payment = submit_payment
