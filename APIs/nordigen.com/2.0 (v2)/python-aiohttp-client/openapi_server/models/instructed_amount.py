# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class InstructedAmount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, currency: str=None):
        """InstructedAmount - a model defined in OpenAPI

        :param amount: The amount of this InstructedAmount.
        :param currency: The currency of this InstructedAmount.
        """
        self.openapi_types = {
            'amount': str,
            'currency': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency'
        }

        self._amount = amount
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstructedAmount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstructedAmount of this InstructedAmount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InstructedAmount.

        Instructed amount

        :return: The amount of this InstructedAmount.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InstructedAmount.

        Instructed amount

        :param amount: The amount of this InstructedAmount.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and not re.search(r'^-?\d{0,10}(?:\.\d{0,2})?$', amount):
            raise ValueError("Invalid value for `amount`, must be a follow pattern or equal to `/^-?\d{0,10}(?:\.\d{0,2})?$/`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this InstructedAmount.

        Instructed amount currency

        :return: The currency of this InstructedAmount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InstructedAmount.

        Instructed amount currency

        :param currency: The currency of this InstructedAmount.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")

        self._currency = currency
