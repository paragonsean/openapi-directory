# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.type_enum import TypeEnum
from openapi_server import util


class CreditorAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, address_country: str=None, currency: str=None, id: str=None, name: str=None, type: TypeEnum=None):
        """CreditorAccount - a model defined in OpenAPI

        :param account: The account of this CreditorAccount.
        :param address_country: The address_country of this CreditorAccount.
        :param currency: The currency of this CreditorAccount.
        :param id: The id of this CreditorAccount.
        :param name: The name of this CreditorAccount.
        :param type: The type of this CreditorAccount.
        """
        self.openapi_types = {
            'account': str,
            'address_country': str,
            'currency': str,
            'id': str,
            'name': str,
            'type': TypeEnum
        }

        self.attribute_map = {
            'account': 'account',
            'address_country': 'address_country',
            'currency': 'currency',
            'id': 'id',
            'name': 'name',
            'type': 'type'
        }

        self._account = account
        self._address_country = address_country
        self._currency = currency
        self._id = id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditorAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreditorAccount of this CreditorAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this CreditorAccount.

        Creditor account type identifier

        :return: The account of this CreditorAccount.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CreditorAccount.

        Creditor account type identifier

        :param account: The account of this CreditorAccount.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")
        if account is not None and len(account) > 128:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `128`")

        self._account = account

    @property
    def address_country(self):
        """Gets the address_country of this CreditorAccount.

        Creditor account address country

        :return: The address_country of this CreditorAccount.
        :rtype: str
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this CreditorAccount.

        Creditor account address country

        :param address_country: The address_country of this CreditorAccount.
        :type address_country: str
        """
        if address_country is not None and len(address_country) > 2:
            raise ValueError("Invalid value for `address_country`, length must be less than or equal to `2`")

        self._address_country = address_country

    @property
    def currency(self):
        """Gets the currency of this CreditorAccount.

        Creditor account currency

        :return: The currency of this CreditorAccount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditorAccount.

        Creditor account currency

        :param currency: The currency of this CreditorAccount.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this CreditorAccount.

        Unique entry ID

        :return: The id of this CreditorAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditorAccount.

        Unique entry ID

        :param id: The id of this CreditorAccount.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CreditorAccount.

        Creditor account name

        :return: The name of this CreditorAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreditorAccount.

        Creditor account name

        :param name: The name of this CreditorAccount.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreditorAccount.

        Creditor account type  * `IBAN` - IBAN * `SCAN` - SortCodeAccountNumber

        :return: The type of this CreditorAccount.
        :rtype: TypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreditorAccount.

        Creditor account type  * `IBAN` - IBAN * `SCAN` - SortCodeAccountNumber

        :param type: The type of this CreditorAccount.
        :type type: TypeEnum
        """

        self._type = type
