# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JWTObtainPairRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_id: str=None, secret_key: str=None):
        """JWTObtainPairRequest - a model defined in OpenAPI

        :param secret_id: The secret_id of this JWTObtainPairRequest.
        :param secret_key: The secret_key of this JWTObtainPairRequest.
        """
        self.openapi_types = {
            'secret_id': str,
            'secret_key': str
        }

        self.attribute_map = {
            'secret_id': 'secret_id',
            'secret_key': 'secret_key'
        }

        self._secret_id = secret_id
        self._secret_key = secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JWTObtainPairRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JWTObtainPairRequest of this JWTObtainPairRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_id(self):
        """Gets the secret_id of this JWTObtainPairRequest.

        Secret id from /user-secrets/

        :return: The secret_id of this JWTObtainPairRequest.
        :rtype: str
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this JWTObtainPairRequest.

        Secret id from /user-secrets/

        :param secret_id: The secret_id of this JWTObtainPairRequest.
        :type secret_id: str
        """
        if secret_id is None:
            raise ValueError("Invalid value for `secret_id`, must not be `None`")
        if secret_id is not None and len(secret_id) < 1:
            raise ValueError("Invalid value for `secret_id`, length must be greater than or equal to `1`")

        self._secret_id = secret_id

    @property
    def secret_key(self):
        """Gets the secret_key of this JWTObtainPairRequest.

        Secret key from /user-secrets/

        :return: The secret_key of this JWTObtainPairRequest.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this JWTObtainPairRequest.

        Secret key from /user-secrets/

        :param secret_key: The secret_key of this JWTObtainPairRequest.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")
        if secret_key is not None and len(secret_key) < 1:
            raise ValueError("Invalid value for `secret_key`, length must be greater than or equal to `1`")

        self._secret_key = secret_key
