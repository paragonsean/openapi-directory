# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status1c5_enum import Status1c5Enum
from openapi_server import util


class SpectacularRequisition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_selection: bool=False, accounts: List[object]=[], agreement: str=None, created: datetime=None, id: str=None, institution_id: str=None, link: str='https://ob.nordigen.com/psd2/start/3fa85f64-5717-4562-b3fc-2c963f66afa6/{$INSTITUTION_ID}', redirect: str=None, redirect_immediate: bool=False, reference: str=None, ssn: str=None, status: Status1c5Enum=None, user_language: str=None):
        """SpectacularRequisition - a model defined in OpenAPI

        :param account_selection: The account_selection of this SpectacularRequisition.
        :param accounts: The accounts of this SpectacularRequisition.
        :param agreement: The agreement of this SpectacularRequisition.
        :param created: The created of this SpectacularRequisition.
        :param id: The id of this SpectacularRequisition.
        :param institution_id: The institution_id of this SpectacularRequisition.
        :param link: The link of this SpectacularRequisition.
        :param redirect: The redirect of this SpectacularRequisition.
        :param redirect_immediate: The redirect_immediate of this SpectacularRequisition.
        :param reference: The reference of this SpectacularRequisition.
        :param ssn: The ssn of this SpectacularRequisition.
        :param status: The status of this SpectacularRequisition.
        :param user_language: The user_language of this SpectacularRequisition.
        """
        self.openapi_types = {
            'account_selection': bool,
            'accounts': List[object],
            'agreement': str,
            'created': datetime,
            'id': str,
            'institution_id': str,
            'link': str,
            'redirect': str,
            'redirect_immediate': bool,
            'reference': str,
            'ssn': str,
            'status': Status1c5Enum,
            'user_language': str
        }

        self.attribute_map = {
            'account_selection': 'account_selection',
            'accounts': 'accounts',
            'agreement': 'agreement',
            'created': 'created',
            'id': 'id',
            'institution_id': 'institution_id',
            'link': 'link',
            'redirect': 'redirect',
            'redirect_immediate': 'redirect_immediate',
            'reference': 'reference',
            'ssn': 'ssn',
            'status': 'status',
            'user_language': 'user_language'
        }

        self._account_selection = account_selection
        self._accounts = accounts
        self._agreement = agreement
        self._created = created
        self._id = id
        self._institution_id = institution_id
        self._link = link
        self._redirect = redirect
        self._redirect_immediate = redirect_immediate
        self._reference = reference
        self._ssn = ssn
        self._status = status
        self._user_language = user_language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpectacularRequisition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpectacularRequisition of this SpectacularRequisition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_selection(self):
        """Gets the account_selection of this SpectacularRequisition.

        option to enable account selection view for the end user

        :return: The account_selection of this SpectacularRequisition.
        :rtype: bool
        """
        return self._account_selection

    @account_selection.setter
    def account_selection(self, account_selection):
        """Sets the account_selection of this SpectacularRequisition.

        option to enable account selection view for the end user

        :param account_selection: The account_selection of this SpectacularRequisition.
        :type account_selection: bool
        """

        self._account_selection = account_selection

    @property
    def accounts(self):
        """Gets the accounts of this SpectacularRequisition.

        array of account IDs retrieved within a scope of this requisition

        :return: The accounts of this SpectacularRequisition.
        :rtype: List[object]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SpectacularRequisition.

        array of account IDs retrieved within a scope of this requisition

        :param accounts: The accounts of this SpectacularRequisition.
        :type accounts: List[object]
        """

        self._accounts = accounts

    @property
    def agreement(self):
        """Gets the agreement of this SpectacularRequisition.

        EUA associated with this requisition

        :return: The agreement of this SpectacularRequisition.
        :rtype: str
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement):
        """Sets the agreement of this SpectacularRequisition.

        EUA associated with this requisition

        :param agreement: The agreement of this SpectacularRequisition.
        :type agreement: str
        """

        self._agreement = agreement

    @property
    def created(self):
        """Gets the created of this SpectacularRequisition.

        The date & time at which the requisition was created.

        :return: The created of this SpectacularRequisition.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SpectacularRequisition.

        The date & time at which the requisition was created.

        :param created: The created of this SpectacularRequisition.
        :type created: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this SpectacularRequisition.


        :return: The id of this SpectacularRequisition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpectacularRequisition.


        :param id: The id of this SpectacularRequisition.
        :type id: str
        """

        self._id = id

    @property
    def institution_id(self):
        """Gets the institution_id of this SpectacularRequisition.

        an Institution ID for this Requisition

        :return: The institution_id of this SpectacularRequisition.
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this SpectacularRequisition.

        an Institution ID for this Requisition

        :param institution_id: The institution_id of this SpectacularRequisition.
        :type institution_id: str
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")

        self._institution_id = institution_id

    @property
    def link(self):
        """Gets the link of this SpectacularRequisition.

        link to initiate authorization with Institution

        :return: The link of this SpectacularRequisition.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this SpectacularRequisition.

        link to initiate authorization with Institution

        :param link: The link of this SpectacularRequisition.
        :type link: str
        """

        self._link = link

    @property
    def redirect(self):
        """Gets the redirect of this SpectacularRequisition.

        redirect URL to your application after end-user authorization with ASPSP

        :return: The redirect of this SpectacularRequisition.
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this SpectacularRequisition.

        redirect URL to your application after end-user authorization with ASPSP

        :param redirect: The redirect of this SpectacularRequisition.
        :type redirect: str
        """
        if redirect is None:
            raise ValueError("Invalid value for `redirect`, must not be `None`")
        if redirect is not None and len(redirect) > 1024:
            raise ValueError("Invalid value for `redirect`, length must be less than or equal to `1024`")

        self._redirect = redirect

    @property
    def redirect_immediate(self):
        """Gets the redirect_immediate of this SpectacularRequisition.

        enable redirect back to the client after account list received

        :return: The redirect_immediate of this SpectacularRequisition.
        :rtype: bool
        """
        return self._redirect_immediate

    @redirect_immediate.setter
    def redirect_immediate(self, redirect_immediate):
        """Sets the redirect_immediate of this SpectacularRequisition.

        enable redirect back to the client after account list received

        :param redirect_immediate: The redirect_immediate of this SpectacularRequisition.
        :type redirect_immediate: bool
        """

        self._redirect_immediate = redirect_immediate

    @property
    def reference(self):
        """Gets the reference of this SpectacularRequisition.

        additional ID to identify the end user

        :return: The reference of this SpectacularRequisition.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SpectacularRequisition.

        additional ID to identify the end user

        :param reference: The reference of this SpectacularRequisition.
        :type reference: str
        """
        if reference is not None and len(reference) > 256:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `256`")

        self._reference = reference

    @property
    def ssn(self):
        """Gets the ssn of this SpectacularRequisition.

        optional SSN field to verify ownership of the account

        :return: The ssn of this SpectacularRequisition.
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this SpectacularRequisition.

        optional SSN field to verify ownership of the account

        :param ssn: The ssn of this SpectacularRequisition.
        :type ssn: str
        """
        if ssn is not None and len(ssn) > 64:
            raise ValueError("Invalid value for `ssn`, length must be less than or equal to `64`")

        self._ssn = ssn

    @property
    def status(self):
        """Gets the status of this SpectacularRequisition.

        status of this requisition

        :return: The status of this SpectacularRequisition.
        :rtype: Status1c5Enum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SpectacularRequisition.

        status of this requisition

        :param status: The status of this SpectacularRequisition.
        :type status: Status1c5Enum
        """

        self._status = status

    @property
    def user_language(self):
        """Gets the user_language of this SpectacularRequisition.

        A two-letter country code (ISO 639-1)

        :return: The user_language of this SpectacularRequisition.
        :rtype: str
        """
        return self._user_language

    @user_language.setter
    def user_language(self, user_language):
        """Sets the user_language of this SpectacularRequisition.

        A two-letter country code (ISO 639-1)

        :param user_language: The user_language of this SpectacularRequisition.
        :type user_language: str
        """
        if user_language is not None and len(user_language) > 5:
            raise ValueError("Invalid value for `user_language`, length must be less than or equal to `5`")

        self._user_language = user_language
