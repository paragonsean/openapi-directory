# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creditor_account_write import CreditorAccountWrite
from openapi_server.models.instructed_amount import InstructedAmount
from openapi_server.models.payment_product_enum import PaymentProductEnum
from openapi_server.models.payment_status_enum import PaymentStatusEnum
from openapi_server.models.payment_type_enum import PaymentTypeEnum
from openapi_server.models.periodic_payment import PeriodicPayment
from openapi_server import util


class PaymentWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creditor_account: str=None, creditor_object: CreditorAccountWrite=None, custom_payment_id: str=None, description: str='GOCARDLESS', instructed_amount: InstructedAmount=None, link: str='https://ob.nordigen.com/pis/start/ec728ca1-e25f-4eab-8fa6-66b94439722f/{$INSTITUTION_ID}', payment_id: str=None, payment_product: PaymentProductEnum=None, payment_status: PaymentStatusEnum=None, payment_type: PaymentTypeEnum=None, periodic_payment: PeriodicPayment=None, redirect: str=None, requested_execution_date: date=None, submit_payment: bool=False):
        """PaymentWrite - a model defined in OpenAPI

        :param creditor_account: The creditor_account of this PaymentWrite.
        :param creditor_object: The creditor_object of this PaymentWrite.
        :param custom_payment_id: The custom_payment_id of this PaymentWrite.
        :param description: The description of this PaymentWrite.
        :param instructed_amount: The instructed_amount of this PaymentWrite.
        :param link: The link of this PaymentWrite.
        :param payment_id: The payment_id of this PaymentWrite.
        :param payment_product: The payment_product of this PaymentWrite.
        :param payment_status: The payment_status of this PaymentWrite.
        :param payment_type: The payment_type of this PaymentWrite.
        :param periodic_payment: The periodic_payment of this PaymentWrite.
        :param redirect: The redirect of this PaymentWrite.
        :param requested_execution_date: The requested_execution_date of this PaymentWrite.
        :param submit_payment: The submit_payment of this PaymentWrite.
        """
        self.openapi_types = {
            'creditor_account': str,
            'creditor_object': CreditorAccountWrite,
            'custom_payment_id': str,
            'description': str,
            'instructed_amount': InstructedAmount,
            'link': str,
            'payment_id': str,
            'payment_product': PaymentProductEnum,
            'payment_status': PaymentStatusEnum,
            'payment_type': PaymentTypeEnum,
            'periodic_payment': PeriodicPayment,
            'redirect': str,
            'requested_execution_date': date,
            'submit_payment': bool
        }

        self.attribute_map = {
            'creditor_account': 'creditor_account',
            'creditor_object': 'creditor_object',
            'custom_payment_id': 'custom_payment_id',
            'description': 'description',
            'instructed_amount': 'instructed_amount',
            'link': 'link',
            'payment_id': 'payment_id',
            'payment_product': 'payment_product',
            'payment_status': 'payment_status',
            'payment_type': 'payment_type',
            'periodic_payment': 'periodic_payment',
            'redirect': 'redirect',
            'requested_execution_date': 'requested_execution_date',
            'submit_payment': 'submit_payment'
        }

        self._creditor_account = creditor_account
        self._creditor_object = creditor_object
        self._custom_payment_id = custom_payment_id
        self._description = description
        self._instructed_amount = instructed_amount
        self._link = link
        self._payment_id = payment_id
        self._payment_product = payment_product
        self._payment_status = payment_status
        self._payment_type = payment_type
        self._periodic_payment = periodic_payment
        self._redirect = redirect
        self._requested_execution_date = requested_execution_date
        self._submit_payment = submit_payment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentWrite of this PaymentWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PaymentWrite.

        Registered creditor account

        :return: The creditor_account of this PaymentWrite.
        :rtype: str
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PaymentWrite.

        Registered creditor account

        :param creditor_account: The creditor_account of this PaymentWrite.
        :type creditor_account: str
        """

        self._creditor_account = creditor_account

    @property
    def creditor_object(self):
        """Gets the creditor_object of this PaymentWrite.

        Creditor account

        :return: The creditor_object of this PaymentWrite.
        :rtype: CreditorAccountWrite
        """
        return self._creditor_object

    @creditor_object.setter
    def creditor_object(self, creditor_object):
        """Sets the creditor_object of this PaymentWrite.

        Creditor account

        :param creditor_object: The creditor_object of this PaymentWrite.
        :type creditor_object: CreditorAccountWrite
        """

        self._creditor_object = creditor_object

    @property
    def custom_payment_id(self):
        """Gets the custom_payment_id of this PaymentWrite.

        Payment Custom Payment ID

        :return: The custom_payment_id of this PaymentWrite.
        :rtype: str
        """
        return self._custom_payment_id

    @custom_payment_id.setter
    def custom_payment_id(self, custom_payment_id):
        """Sets the custom_payment_id of this PaymentWrite.

        Payment Custom Payment ID

        :param custom_payment_id: The custom_payment_id of this PaymentWrite.
        :type custom_payment_id: str
        """
        if custom_payment_id is not None and len(custom_payment_id) > 35:
            raise ValueError("Invalid value for `custom_payment_id`, length must be less than or equal to `35`")

        self._custom_payment_id = custom_payment_id

    @property
    def description(self):
        """Gets the description of this PaymentWrite.

        Payment description

        :return: The description of this PaymentWrite.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentWrite.

        Payment description

        :param description: The description of this PaymentWrite.
        :type description: str
        """

        self._description = description

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PaymentWrite.

        Instructed amount

        :return: The instructed_amount of this PaymentWrite.
        :rtype: InstructedAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PaymentWrite.

        Instructed amount

        :param instructed_amount: The instructed_amount of this PaymentWrite.
        :type instructed_amount: InstructedAmount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")

        self._instructed_amount = instructed_amount

    @property
    def link(self):
        """Gets the link of this PaymentWrite.

        Link to initiate authorization with Institution

        :return: The link of this PaymentWrite.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PaymentWrite.

        Link to initiate authorization with Institution

        :param link: The link of this PaymentWrite.
        :type link: str
        """

        self._link = link

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentWrite.

        Payment ID

        :return: The payment_id of this PaymentWrite.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentWrite.

        Payment ID

        :param payment_id: The payment_id of this PaymentWrite.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def payment_product(self):
        """Gets the payment_product of this PaymentWrite.

        Payment product  * `T2P` - target-2-payments * `SCT` - sepa-credit-transfers * `ISCT` - instant-sepa-credit-transfer * `CBCT` - cross-border-credit-transfers * `BACS` - Back Payment Scheme * `CHAPS` - CHAPS Payment Scheme * `FPS` - Faster Payment Scheme * `SWIFT` - Swift Payment Service * `BT` - Balance Transfer * `MT` - Money Transfer

        :return: The payment_product of this PaymentWrite.
        :rtype: PaymentProductEnum
        """
        return self._payment_product

    @payment_product.setter
    def payment_product(self, payment_product):
        """Sets the payment_product of this PaymentWrite.

        Payment product  * `T2P` - target-2-payments * `SCT` - sepa-credit-transfers * `ISCT` - instant-sepa-credit-transfer * `CBCT` - cross-border-credit-transfers * `BACS` - Back Payment Scheme * `CHAPS` - CHAPS Payment Scheme * `FPS` - Faster Payment Scheme * `SWIFT` - Swift Payment Service * `BT` - Balance Transfer * `MT` - Money Transfer

        :param payment_product: The payment_product of this PaymentWrite.
        :type payment_product: PaymentProductEnum
        """

        self._payment_product = payment_product

    @property
    def payment_status(self):
        """Gets the payment_status of this PaymentWrite.

        Payment end to end identification  * `INIT` - Initiated. Payment has been initiated. * `ERRE` - ExecutionError. We experienced error on payment execution. * `ERRS` - StatusError. We experienced error retrieving payment status. Try again. * `ACCC` - AcceptedSettlementCompleted. Settlement on the creditor's account has been completed * `ACCP` - AcceptedCustomerProfile. Preceding check of technical validation was successful. Customer profile check was successful * `ACSC` - AcceptedSettlementCompleted. Settlement on the debtor’s account has been completed * `ACSP` - AcceptedSettlementInProcess. All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution * `ACTC` - AcceptedTechnicalValidation. Authentication and syntactical and semantical validation are successful * `ACWC` - AcceptedWithChange. Instruction is accepted but a change will be made, such as date or remittance not sent * `ACWP` - AcceptedWithoutPosting. Payment instruction included in the credit transfer is accepted without being posted to the creditor customer’s account * `RCVD` - Received. Payment initiation has been received by the receiving agent * `PDNG` - Pending. Payment initiation or individual transaction included in the payment initiation is pending. Further checks and status update will be performed * `RJCT` - Rejected. Payment initiation or individual transaction included in the payment initiation has been rejected. * `CANC` - Cancelled. Payment initiation has been cancelled before execution * `ACFC` - AcceptedFundsChecked. Pre-ceeding check of technical validation and customer profile was successful and an automatic funds check was positive * `PATC` - PartiallyAcceptedTechnicalCorrect. The payment initiation needs multiple authentications, where some but not yet all have been performed * `PART` - PartiallyAccepted. A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status

        :return: The payment_status of this PaymentWrite.
        :rtype: PaymentStatusEnum
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this PaymentWrite.

        Payment end to end identification  * `INIT` - Initiated. Payment has been initiated. * `ERRE` - ExecutionError. We experienced error on payment execution. * `ERRS` - StatusError. We experienced error retrieving payment status. Try again. * `ACCC` - AcceptedSettlementCompleted. Settlement on the creditor's account has been completed * `ACCP` - AcceptedCustomerProfile. Preceding check of technical validation was successful. Customer profile check was successful * `ACSC` - AcceptedSettlementCompleted. Settlement on the debtor’s account has been completed * `ACSP` - AcceptedSettlementInProcess. All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution * `ACTC` - AcceptedTechnicalValidation. Authentication and syntactical and semantical validation are successful * `ACWC` - AcceptedWithChange. Instruction is accepted but a change will be made, such as date or remittance not sent * `ACWP` - AcceptedWithoutPosting. Payment instruction included in the credit transfer is accepted without being posted to the creditor customer’s account * `RCVD` - Received. Payment initiation has been received by the receiving agent * `PDNG` - Pending. Payment initiation or individual transaction included in the payment initiation is pending. Further checks and status update will be performed * `RJCT` - Rejected. Payment initiation or individual transaction included in the payment initiation has been rejected. * `CANC` - Cancelled. Payment initiation has been cancelled before execution * `ACFC` - AcceptedFundsChecked. Pre-ceeding check of technical validation and customer profile was successful and an automatic funds check was positive * `PATC` - PartiallyAcceptedTechnicalCorrect. The payment initiation needs multiple authentications, where some but not yet all have been performed * `PART` - PartiallyAccepted. A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status

        :param payment_status: The payment_status of this PaymentWrite.
        :type payment_status: PaymentStatusEnum
        """

        self._payment_status = payment_status

    @property
    def payment_type(self):
        """Gets the payment_type of this PaymentWrite.

        Payment Type  * `single-payment` - payment * `bulk-payment` - bulk-payments * `periodic-payment` - periodic-payments

        :return: The payment_type of this PaymentWrite.
        :rtype: PaymentTypeEnum
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PaymentWrite.

        Payment Type  * `single-payment` - payment * `bulk-payment` - bulk-payments * `periodic-payment` - periodic-payments

        :param payment_type: The payment_type of this PaymentWrite.
        :type payment_type: PaymentTypeEnum
        """

        self._payment_type = payment_type

    @property
    def periodic_payment(self):
        """Gets the periodic_payment of this PaymentWrite.


        :return: The periodic_payment of this PaymentWrite.
        :rtype: PeriodicPayment
        """
        return self._periodic_payment

    @periodic_payment.setter
    def periodic_payment(self, periodic_payment):
        """Sets the periodic_payment of this PaymentWrite.


        :param periodic_payment: The periodic_payment of this PaymentWrite.
        :type periodic_payment: PeriodicPayment
        """

        self._periodic_payment = periodic_payment

    @property
    def redirect(self):
        """Gets the redirect of this PaymentWrite.

        Redirect URL to your application after payment is done

        :return: The redirect of this PaymentWrite.
        :rtype: str
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this PaymentWrite.

        Redirect URL to your application after payment is done

        :param redirect: The redirect of this PaymentWrite.
        :type redirect: str
        """
        if redirect is None:
            raise ValueError("Invalid value for `redirect`, must not be `None`")
        if redirect is not None and len(redirect) > 1024:
            raise ValueError("Invalid value for `redirect`, length must be less than or equal to `1024`")

        self._redirect = redirect

    @property
    def requested_execution_date(self):
        """Gets the requested_execution_date of this PaymentWrite.

        Payment Execution date (for periodic payments)

        :return: The requested_execution_date of this PaymentWrite.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date):
        """Sets the requested_execution_date of this PaymentWrite.

        Payment Execution date (for periodic payments)

        :param requested_execution_date: The requested_execution_date of this PaymentWrite.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def submit_payment(self):
        """Gets the submit_payment of this PaymentWrite.

        Indicates whether payment should be submitted separately

        :return: The submit_payment of this PaymentWrite.
        :rtype: bool
        """
        return self._submit_payment

    @submit_payment.setter
    def submit_payment(self, submit_payment):
        """Sets the submit_payment of this PaymentWrite.

        Indicates whether payment should be submitted separately

        :param submit_payment: The submit_payment of this PaymentWrite.
        :type submit_payment: bool
        """

        self._submit_payment = submit_payment
