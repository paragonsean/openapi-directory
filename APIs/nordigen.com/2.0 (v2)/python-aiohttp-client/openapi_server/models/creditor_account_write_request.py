# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_country_enum import AddressCountryEnum
from openapi_server.models.type_enum import TypeEnum
from openapi_server import util


class CreditorAccountWriteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, address_country: AddressCountryEnum=None, address_street: str=None, agent: str=None, agent_name: str=None, currency: str=None, institution_id: str=None, name: str=None, post_code: str=None, type: TypeEnum=None):
        """CreditorAccountWriteRequest - a model defined in OpenAPI

        :param account: The account of this CreditorAccountWriteRequest.
        :param address_country: The address_country of this CreditorAccountWriteRequest.
        :param address_street: The address_street of this CreditorAccountWriteRequest.
        :param agent: The agent of this CreditorAccountWriteRequest.
        :param agent_name: The agent_name of this CreditorAccountWriteRequest.
        :param currency: The currency of this CreditorAccountWriteRequest.
        :param institution_id: The institution_id of this CreditorAccountWriteRequest.
        :param name: The name of this CreditorAccountWriteRequest.
        :param post_code: The post_code of this CreditorAccountWriteRequest.
        :param type: The type of this CreditorAccountWriteRequest.
        """
        self.openapi_types = {
            'account': str,
            'address_country': AddressCountryEnum,
            'address_street': str,
            'agent': str,
            'agent_name': str,
            'currency': str,
            'institution_id': str,
            'name': str,
            'post_code': str,
            'type': TypeEnum
        }

        self.attribute_map = {
            'account': 'account',
            'address_country': 'address_country',
            'address_street': 'address_street',
            'agent': 'agent',
            'agent_name': 'agent_name',
            'currency': 'currency',
            'institution_id': 'institution_id',
            'name': 'name',
            'post_code': 'post_code',
            'type': 'type'
        }

        self._account = account
        self._address_country = address_country
        self._address_street = address_street
        self._agent = agent
        self._agent_name = agent_name
        self._currency = currency
        self._institution_id = institution_id
        self._name = name
        self._post_code = post_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreditorAccountWriteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreditorAccountWriteRequest of this CreditorAccountWriteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this CreditorAccountWriteRequest.

        Creditor account type identifier

        :return: The account of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CreditorAccountWriteRequest.

        Creditor account type identifier

        :param account: The account of this CreditorAccountWriteRequest.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")
        if account is not None and len(account) > 128:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `128`")
        if account is not None and len(account) < 1:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `1`")

        self._account = account

    @property
    def address_country(self):
        """Gets the address_country of this CreditorAccountWriteRequest.


        :return: The address_country of this CreditorAccountWriteRequest.
        :rtype: AddressCountryEnum
        """
        return self._address_country

    @address_country.setter
    def address_country(self, address_country):
        """Sets the address_country of this CreditorAccountWriteRequest.


        :param address_country: The address_country of this CreditorAccountWriteRequest.
        :type address_country: AddressCountryEnum
        """

        self._address_country = address_country

    @property
    def address_street(self):
        """Gets the address_street of this CreditorAccountWriteRequest.

        Creditor account address street

        :return: The address_street of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._address_street

    @address_street.setter
    def address_street(self, address_street):
        """Sets the address_street of this CreditorAccountWriteRequest.

        Creditor account address street

        :param address_street: The address_street of this CreditorAccountWriteRequest.
        :type address_street: str
        """
        if address_street is not None and len(address_street) > 140:
            raise ValueError("Invalid value for `address_street`, length must be less than or equal to `140`")
        if address_street is not None and len(address_street) < 1:
            raise ValueError("Invalid value for `address_street`, length must be greater than or equal to `1`")

        self._address_street = address_street

    @property
    def agent(self):
        """Gets the agent of this CreditorAccountWriteRequest.

        Creditor account BICFI Identifier

        :return: The agent of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this CreditorAccountWriteRequest.

        Creditor account BICFI Identifier

        :param agent: The agent of this CreditorAccountWriteRequest.
        :type agent: str
        """
        if agent is not None and len(agent) > 128:
            raise ValueError("Invalid value for `agent`, length must be less than or equal to `128`")
        if agent is not None and len(agent) < 1:
            raise ValueError("Invalid value for `agent`, length must be greater than or equal to `1`")

        self._agent = agent

    @property
    def agent_name(self):
        """Gets the agent_name of this CreditorAccountWriteRequest.

        Creditor account agent name

        :return: The agent_name of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this CreditorAccountWriteRequest.

        Creditor account agent name

        :param agent_name: The agent_name of this CreditorAccountWriteRequest.
        :type agent_name: str
        """
        if agent_name is not None and len(agent_name) > 140:
            raise ValueError("Invalid value for `agent_name`, length must be less than or equal to `140`")
        if agent_name is not None and len(agent_name) < 1:
            raise ValueError("Invalid value for `agent_name`, length must be greater than or equal to `1`")

        self._agent_name = agent_name

    @property
    def currency(self):
        """Gets the currency of this CreditorAccountWriteRequest.

        Creditor account currency

        :return: The currency of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditorAccountWriteRequest.

        Creditor account currency

        :param currency: The currency of this CreditorAccountWriteRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 1:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `1`")

        self._currency = currency

    @property
    def institution_id(self):
        """Gets the institution_id of this CreditorAccountWriteRequest.

        an Institution ID for this CreditorAccount

        :return: The institution_id of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this CreditorAccountWriteRequest.

        an Institution ID for this CreditorAccount

        :param institution_id: The institution_id of this CreditorAccountWriteRequest.
        :type institution_id: str
        """
        if institution_id is not None and len(institution_id) < 1:
            raise ValueError("Invalid value for `institution_id`, length must be greater than or equal to `1`")

        self._institution_id = institution_id

    @property
    def name(self):
        """Gets the name of this CreditorAccountWriteRequest.

        Creditor account name

        :return: The name of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreditorAccountWriteRequest.

        Creditor account name

        :param name: The name of this CreditorAccountWriteRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def post_code(self):
        """Gets the post_code of this CreditorAccountWriteRequest.

        Creditor account address post code

        :return: The post_code of this CreditorAccountWriteRequest.
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this CreditorAccountWriteRequest.

        Creditor account address post code

        :param post_code: The post_code of this CreditorAccountWriteRequest.
        :type post_code: str
        """
        if post_code is not None and len(post_code) > 30:
            raise ValueError("Invalid value for `post_code`, length must be less than or equal to `30`")
        if post_code is not None and len(post_code) < 1:
            raise ValueError("Invalid value for `post_code`, length must be greater than or equal to `1`")

        self._post_code = post_code

    @property
    def type(self):
        """Gets the type of this CreditorAccountWriteRequest.

        Creditor account type  * `IBAN` - IBAN * `SCAN` - SortCodeAccountNumber

        :return: The type of this CreditorAccountWriteRequest.
        :rtype: TypeEnum
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreditorAccountWriteRequest.

        Creditor account type  * `IBAN` - IBAN * `SCAN` - SortCodeAccountNumber

        :param type: The type of this CreditorAccountWriteRequest.
        :type type: TypeEnum
        """

        self._type = type
