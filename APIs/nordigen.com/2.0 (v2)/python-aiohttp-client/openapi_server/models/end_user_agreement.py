# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndUserAgreement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted: datetime=None, access_scope: List[List[object]]=["balances","details","transactions"], access_valid_for_days: int=90, created: datetime=None, id: str=None, institution_id: str=None, max_historical_days: int=90):
        """EndUserAgreement - a model defined in OpenAPI

        :param accepted: The accepted of this EndUserAgreement.
        :param access_scope: The access_scope of this EndUserAgreement.
        :param access_valid_for_days: The access_valid_for_days of this EndUserAgreement.
        :param created: The created of this EndUserAgreement.
        :param id: The id of this EndUserAgreement.
        :param institution_id: The institution_id of this EndUserAgreement.
        :param max_historical_days: The max_historical_days of this EndUserAgreement.
        """
        self.openapi_types = {
            'accepted': datetime,
            'access_scope': List[List[object]],
            'access_valid_for_days': int,
            'created': datetime,
            'id': str,
            'institution_id': str,
            'max_historical_days': int
        }

        self.attribute_map = {
            'accepted': 'accepted',
            'access_scope': 'access_scope',
            'access_valid_for_days': 'access_valid_for_days',
            'created': 'created',
            'id': 'id',
            'institution_id': 'institution_id',
            'max_historical_days': 'max_historical_days'
        }

        self._accepted = accepted
        self._access_scope = access_scope
        self._access_valid_for_days = access_valid_for_days
        self._created = created
        self._id = id
        self._institution_id = institution_id
        self._max_historical_days = max_historical_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndUserAgreement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndUserAgreement of this EndUserAgreement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted(self):
        """Gets the accepted of this EndUserAgreement.

        The date & time at which the end user accepted the agreement.

        :return: The accepted of this EndUserAgreement.
        :rtype: datetime
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """Sets the accepted of this EndUserAgreement.

        The date & time at which the end user accepted the agreement.

        :param accepted: The accepted of this EndUserAgreement.
        :type accepted: datetime
        """

        self._accepted = accepted

    @property
    def access_scope(self):
        """Gets the access_scope of this EndUserAgreement.

        Array containing one or several values of ['balances', 'details', 'transactions']

        :return: The access_scope of this EndUserAgreement.
        :rtype: List[List[object]]
        """
        return self._access_scope

    @access_scope.setter
    def access_scope(self, access_scope):
        """Sets the access_scope of this EndUserAgreement.

        Array containing one or several values of ['balances', 'details', 'transactions']

        :param access_scope: The access_scope of this EndUserAgreement.
        :type access_scope: List[List[object]]
        """

        self._access_scope = access_scope

    @property
    def access_valid_for_days(self):
        """Gets the access_valid_for_days of this EndUserAgreement.

        Number of days from acceptance that the access can be used.

        :return: The access_valid_for_days of this EndUserAgreement.
        :rtype: int
        """
        return self._access_valid_for_days

    @access_valid_for_days.setter
    def access_valid_for_days(self, access_valid_for_days):
        """Sets the access_valid_for_days of this EndUserAgreement.

        Number of days from acceptance that the access can be used.

        :param access_valid_for_days: The access_valid_for_days of this EndUserAgreement.
        :type access_valid_for_days: int
        """
        if access_valid_for_days is not None and access_valid_for_days > 90:
            raise ValueError("Invalid value for `access_valid_for_days`, must be a value less than or equal to `90`")
        if access_valid_for_days is not None and access_valid_for_days < 1:
            raise ValueError("Invalid value for `access_valid_for_days`, must be a value greater than or equal to `1`")

        self._access_valid_for_days = access_valid_for_days

    @property
    def created(self):
        """Gets the created of this EndUserAgreement.

        The date & time at which the end user agreement was created.

        :return: The created of this EndUserAgreement.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EndUserAgreement.

        The date & time at which the end user agreement was created.

        :param created: The created of this EndUserAgreement.
        :type created: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this EndUserAgreement.

        The ID of this End User Agreement, used to refer to this end user agreement in other API calls.

        :return: The id of this EndUserAgreement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EndUserAgreement.

        The ID of this End User Agreement, used to refer to this end user agreement in other API calls.

        :param id: The id of this EndUserAgreement.
        :type id: str
        """

        self._id = id

    @property
    def institution_id(self):
        """Gets the institution_id of this EndUserAgreement.

        an Institution ID for this EUA

        :return: The institution_id of this EndUserAgreement.
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this EndUserAgreement.

        an Institution ID for this EUA

        :param institution_id: The institution_id of this EndUserAgreement.
        :type institution_id: str
        """
        if institution_id is None:
            raise ValueError("Invalid value for `institution_id`, must not be `None`")

        self._institution_id = institution_id

    @property
    def max_historical_days(self):
        """Gets the max_historical_days of this EndUserAgreement.

        Maximum number of days of transaction data to retrieve.

        :return: The max_historical_days of this EndUserAgreement.
        :rtype: int
        """
        return self._max_historical_days

    @max_historical_days.setter
    def max_historical_days(self, max_historical_days):
        """Sets the max_historical_days of this EndUserAgreement.

        Maximum number of days of transaction data to retrieve.

        :param max_historical_days: The max_historical_days of this EndUserAgreement.
        :type max_historical_days: int
        """
        if max_historical_days is not None and max_historical_days > 730:
            raise ValueError("Invalid value for `max_historical_days`, must be a value less than or equal to `730`")
        if max_historical_days is not None and max_historical_days < 1:
            raise ValueError("Invalid value for `max_historical_days`, must be a value greater than or equal to `1`")

        self._max_historical_days = max_historical_days
