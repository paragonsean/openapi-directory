# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Integration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bic: str=None, countries: List[str]=None, id: str=None, logo: str=None, name: str=None, transaction_total_days: str='90'):
        """Integration - a model defined in OpenAPI

        :param bic: The bic of this Integration.
        :param countries: The countries of this Integration.
        :param id: The id of this Integration.
        :param logo: The logo of this Integration.
        :param name: The name of this Integration.
        :param transaction_total_days: The transaction_total_days of this Integration.
        """
        self.openapi_types = {
            'bic': str,
            'countries': List[str],
            'id': str,
            'logo': str,
            'name': str,
            'transaction_total_days': str
        }

        self.attribute_map = {
            'bic': 'bic',
            'countries': 'countries',
            'id': 'id',
            'logo': 'logo',
            'name': 'name',
            'transaction_total_days': 'transaction_total_days'
        }

        self._bic = bic
        self._countries = countries
        self._id = id
        self._logo = logo
        self._name = name
        self._transaction_total_days = transaction_total_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Integration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Integration of this Integration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bic(self):
        """Gets the bic of this Integration.


        :return: The bic of this Integration.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this Integration.


        :param bic: The bic of this Integration.
        :type bic: str
        """

        self._bic = bic

    @property
    def countries(self):
        """Gets the countries of this Integration.


        :return: The countries of this Integration.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this Integration.


        :param countries: The countries of this Integration.
        :type countries: List[str]
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")

        self._countries = countries

    @property
    def id(self):
        """Gets the id of this Integration.


        :return: The id of this Integration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Integration.


        :param id: The id of this Integration.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def logo(self):
        """Gets the logo of this Integration.


        :return: The logo of this Integration.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Integration.


        :param logo: The logo of this Integration.
        :type logo: str
        """
        if logo is None:
            raise ValueError("Invalid value for `logo`, must not be `None`")

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this Integration.


        :return: The name of this Integration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Integration.


        :param name: The name of this Integration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def transaction_total_days(self):
        """Gets the transaction_total_days of this Integration.


        :return: The transaction_total_days of this Integration.
        :rtype: str
        """
        return self._transaction_total_days

    @transaction_total_days.setter
    def transaction_total_days(self, transaction_total_days):
        """Sets the transaction_total_days of this Integration.


        :param transaction_total_days: The transaction_total_days of this Integration.
        :type transaction_total_days: str
        """

        self._transaction_total_days = transaction_total_days
