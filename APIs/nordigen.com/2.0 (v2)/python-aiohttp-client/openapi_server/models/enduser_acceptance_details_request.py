# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnduserAcceptanceDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, user_agent: str=None):
        """EnduserAcceptanceDetailsRequest - a model defined in OpenAPI

        :param ip_address: The ip_address of this EnduserAcceptanceDetailsRequest.
        :param user_agent: The user_agent of this EnduserAcceptanceDetailsRequest.
        """
        self.openapi_types = {
            'ip_address': str,
            'user_agent': str
        }

        self.attribute_map = {
            'ip_address': 'ip_address',
            'user_agent': 'user_agent'
        }

        self._ip_address = ip_address
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnduserAcceptanceDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnduserAcceptanceDetailsRequest of this EnduserAcceptanceDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this EnduserAcceptanceDetailsRequest.


        :return: The ip_address of this EnduserAcceptanceDetailsRequest.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this EnduserAcceptanceDetailsRequest.


        :param ip_address: The ip_address of this EnduserAcceptanceDetailsRequest.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")
        if ip_address is not None and len(ip_address) < 1:
            raise ValueError("Invalid value for `ip_address`, length must be greater than or equal to `1`")

        self._ip_address = ip_address

    @property
    def user_agent(self):
        """Gets the user_agent of this EnduserAcceptanceDetailsRequest.


        :return: The user_agent of this EnduserAcceptanceDetailsRequest.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this EnduserAcceptanceDetailsRequest.


        :param user_agent: The user_agent of this EnduserAcceptanceDetailsRequest.
        :type user_agent: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")
        if user_agent is not None and len(user_agent) < 1:
            raise ValueError("Invalid value for `user_agent`, length must be greater than or equal to `1`")

        self._user_agent = user_agent
