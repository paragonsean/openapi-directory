# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_status_enum import AccountStatusEnum
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, iban: str=None, id: str=None, institution_id: str=None, last_accessed: datetime=None, owner_name: str=None, status: AccountStatusEnum=None):
        """Account - a model defined in OpenAPI

        :param created: The created of this Account.
        :param iban: The iban of this Account.
        :param id: The id of this Account.
        :param institution_id: The institution_id of this Account.
        :param last_accessed: The last_accessed of this Account.
        :param owner_name: The owner_name of this Account.
        :param status: The status of this Account.
        """
        self.openapi_types = {
            'created': datetime,
            'iban': str,
            'id': str,
            'institution_id': str,
            'last_accessed': datetime,
            'owner_name': str,
            'status': AccountStatusEnum
        }

        self.attribute_map = {
            'created': 'created',
            'iban': 'iban',
            'id': 'id',
            'institution_id': 'institution_id',
            'last_accessed': 'last_accessed',
            'owner_name': 'owner_name',
            'status': 'status'
        }

        self._created = created
        self._iban = iban
        self._id = id
        self._institution_id = institution_id
        self._last_accessed = last_accessed
        self._owner_name = owner_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Account.

        The date & time at which the account object was created.

        :return: The created of this Account.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Account.

        The date & time at which the account object was created.

        :param created: The created of this Account.
        :type created: datetime
        """

        self._created = created

    @property
    def iban(self):
        """Gets the iban of this Account.

        The Account IBAN

        :return: The iban of this Account.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this Account.

        The Account IBAN

        :param iban: The iban of this Account.
        :type iban: str
        """

        self._iban = iban

    @property
    def id(self):
        """Gets the id of this Account.

        The ID of this Account, used to refer to this account in other API calls.

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The ID of this Account, used to refer to this account in other API calls.

        :param id: The id of this Account.
        :type id: str
        """

        self._id = id

    @property
    def institution_id(self):
        """Gets the institution_id of this Account.

        The ASPSP associated with this account.

        :return: The institution_id of this Account.
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this Account.

        The ASPSP associated with this account.

        :param institution_id: The institution_id of this Account.
        :type institution_id: str
        """

        self._institution_id = institution_id

    @property
    def last_accessed(self):
        """Gets the last_accessed of this Account.

        The date & time at which the account object was last accessed.

        :return: The last_accessed of this Account.
        :rtype: datetime
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this Account.

        The date & time at which the account object was last accessed.

        :param last_accessed: The last_accessed of this Account.
        :type last_accessed: datetime
        """

        self._last_accessed = last_accessed

    @property
    def owner_name(self):
        """Gets the owner_name of this Account.

        The name of the account owner.

        :return: The owner_name of this Account.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Account.

        The name of the account owner.

        :param owner_name: The owner_name of this Account.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def status(self):
        """Gets the status of this Account.

        The processing status of this account.

        :return: The status of this Account.
        :rtype: AccountStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        The processing status of this account.

        :param status: The status of this Account.
        :type status: AccountStatusEnum
        """

        self._status = status
