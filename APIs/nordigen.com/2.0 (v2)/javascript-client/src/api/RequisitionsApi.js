/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PaginatedRequisitionList from '../model/PaginatedRequisitionList';
import Requisition from '../model/Requisition';
import RequisitionRequest from '../model/RequisitionRequest';
import SpectacularRequisition from '../model/SpectacularRequisition';

/**
* Requisitions service.
* @module api/RequisitionsApi
* @version 2.0 (v2)
*/
export default class RequisitionsApi {

    /**
    * Constructs a new RequisitionsApi. 
    * @alias module:api/RequisitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteRequisitionByIdV2 operation.
     * @callback module:api/RequisitionsApi~deleteRequisitionByIdV2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete requisition and its end user agreement
     * @param {String} id A UUID string identifying this requisition.
     * @param {module:api/RequisitionsApi~deleteRequisitionByIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRequisitionByIdV2(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRequisitionByIdV2");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/requisitions/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requisitionById operation.
     * @callback module:api/RequisitionsApi~requisitionByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Requisition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a requisition by ID
     * @param {String} id A UUID string identifying this requisition.
     * @param {module:api/RequisitionsApi~requisitionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Requisition}
     */
    requisitionById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling requisitionById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Requisition;
      return this.apiClient.callApi(
        '/api/v2/requisitions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requisitionCreated operation.
     * @callback module:api/RequisitionsApi~requisitionCreatedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpectacularRequisition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new requisition
     * @param {module:model/RequisitionRequest} requisitionRequest 
     * @param {module:api/RequisitionsApi~requisitionCreatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpectacularRequisition}
     */
    requisitionCreated(requisitionRequest, callback) {
      let postBody = requisitionRequest;
      // verify the required parameter 'requisitionRequest' is set
      if (requisitionRequest === undefined || requisitionRequest === null) {
        throw new Error("Missing the required parameter 'requisitionRequest' when calling requisitionCreated");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SpectacularRequisition;
      return this.apiClient.callApi(
        '/api/v2/requisitions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAllRequisitions operation.
     * @callback module:api/RequisitionsApi~retrieveAllRequisitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedRequisitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all requisitions belonging to the company
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Number of results to return per page.
     * @param {Number} [offset = 1)] The initial index from which to return the results.
     * @param {module:api/RequisitionsApi~retrieveAllRequisitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedRequisitionList}
     */
    retrieveAllRequisitions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedRequisitionList;
      return this.apiClient.callApi(
        '/api/v2/requisitions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
