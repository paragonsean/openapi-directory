/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Integration from '../model/Integration';
import IntegrationRetrieve from '../model/IntegrationRetrieve';

/**
* Institutions service.
* @module api/InstitutionsApi
* @version 2.0 (v2)
*/
export default class InstitutionsApi {

    /**
    * Constructs a new InstitutionsApi. 
    * @alias module:api/InstitutionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the retrieveAllSupportedInstitutionsInAGivenCountry operation.
     * @callback module:api/InstitutionsApi~retrieveAllSupportedInstitutionsInAGivenCountryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Integration>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all available institutions
     * @param {Object} opts Optional parameters
     * @param {String} [country] ISO 3166 two-character country code
     * @param {String} [paymentsEnabled] Boolean value, indicating if payments are enabled
     * @param {module:api/InstitutionsApi~retrieveAllSupportedInstitutionsInAGivenCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Integration>}
     */
    retrieveAllSupportedInstitutionsInAGivenCountry(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'country': opts['country'],
        'payments_enabled': opts['paymentsEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Integration];
      return this.apiClient.callApi(
        '/api/v2/institutions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveInstitution operation.
     * @callback module:api/InstitutionsApi~retrieveInstitutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationRetrieve} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a specific Institution
     * @param {String} id 
     * @param {module:api/InstitutionsApi~retrieveInstitutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationRetrieve}
     */
    retrieveInstitution(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveInstitution");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationRetrieve;
      return this.apiClient.callApi(
        '/api/v2/institutions/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
