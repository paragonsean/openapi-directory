/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreditorAccount from '../model/CreditorAccount';
import CreditorAccountWrite from '../model/CreditorAccountWrite';
import CreditorAccountWriteRequest from '../model/CreditorAccountWriteRequest';
import PaginatedCreditorAccountList from '../model/PaginatedCreditorAccountList';
import PaginatedPaymentReadList from '../model/PaginatedPaymentReadList';
import PaymentRead from '../model/PaymentRead';
import PaymentReadRequest from '../model/PaymentReadRequest';
import PaymentWrite from '../model/PaymentWrite';
import PaymentWriteRequest from '../model/PaymentWriteRequest';

/**
* Payments service.
* @module api/PaymentsApi
* @version 2.0 (v2)
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback module:api/PaymentsApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentWrite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create payment
     * @param {module:model/PaymentWriteRequest} paymentWriteRequest 
     * @param {module:api/PaymentsApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentWrite}
     */
    createPayment(paymentWriteRequest, callback) {
      let postBody = paymentWriteRequest;
      // verify the required parameter 'paymentWriteRequest' is set
      if (paymentWriteRequest === undefined || paymentWriteRequest === null) {
        throw new Error("Missing the required parameter 'paymentWriteRequest' when calling createPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PaymentWrite;
      return this.apiClient.callApi(
        '/api/v2/payments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePeriodicPayment operation.
     * @callback module:api/PaymentsApi~deletePeriodicPaymentCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete periodic payment
     * @param {String} id 
     * @param {module:api/PaymentsApi~deletePeriodicPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    deletePeriodicPayment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePeriodicPayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v2/payments/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMinimumRequiredFieldsForInstitution operation.
     * @callback module:api/PaymentsApi~listMinimumRequiredFieldsForInstitutionCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List minimum required fields for institution
     * @param {String} institutionId 
     * @param {module:api/PaymentsApi~listMinimumRequiredFieldsForInstitutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    listMinimumRequiredFieldsForInstitution(institutionId, callback) {
      let postBody = null;
      // verify the required parameter 'institutionId' is set
      if (institutionId === undefined || institutionId === null) {
        throw new Error("Missing the required parameter 'institutionId' when calling listMinimumRequiredFieldsForInstitution");
      }

      let pathParams = {
        'institution_id': institutionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/v2/payments/fields/{institution_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPayments operation.
     * @callback module:api/PaymentsApi~listPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPaymentReadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all payments belonging to the company
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Number of results to return per page.
     * @param {Number} [offset = 1)] The initial index from which to return the results.
     * @param {module:api/PaymentsApi~listPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPaymentReadList}
     */
    listPayments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPaymentReadList;
      return this.apiClient.callApi(
        '/api/v2/payments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsCreditorsCreate operation.
     * @callback module:api/PaymentsApi~paymentsCreditorsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditorAccountWrite} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoints related to creditor accounts.
     * @param {module:model/CreditorAccountWriteRequest} creditorAccountWriteRequest 
     * @param {module:api/PaymentsApi~paymentsCreditorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditorAccountWrite}
     */
    paymentsCreditorsCreate(creditorAccountWriteRequest, callback) {
      let postBody = creditorAccountWriteRequest;
      // verify the required parameter 'creditorAccountWriteRequest' is set
      if (creditorAccountWriteRequest === undefined || creditorAccountWriteRequest === null) {
        throw new Error("Missing the required parameter 'creditorAccountWriteRequest' when calling paymentsCreditorsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreditorAccountWrite;
      return this.apiClient.callApi(
        '/api/v2/payments/creditors/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsCreditorsDestroy operation.
     * @callback module:api/PaymentsApi~paymentsCreditorsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoints related to creditor accounts.
     * @param {String} id 
     * @param {module:api/PaymentsApi~paymentsCreditorsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    paymentsCreditorsDestroy(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsCreditorsDestroy");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/payments/creditors/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsCreditorsList operation.
     * @callback module:api/PaymentsApi~paymentsCreditorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedCreditorAccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoints related to creditor accounts.
     * @param {Object} opts Optional parameters
     * @param {String} [account] 
     * @param {String} [addressCountry] 
     * @param {String} [agent] 
     * @param {String} [currency] 
     * @param {Number} [limit = 100)] Number of results to return per page.
     * @param {String} [name] 
     * @param {Number} [offset = 1)] The initial index from which to return the results.
     * @param {String} [type] 
     * @param {module:api/PaymentsApi~paymentsCreditorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedCreditorAccountList}
     */
    paymentsCreditorsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account': opts['account'],
        'address_country': opts['addressCountry'],
        'agent': opts['agent'],
        'currency': opts['currency'],
        'limit': opts['limit'],
        'name': opts['name'],
        'offset': opts['offset'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedCreditorAccountList;
      return this.apiClient.callApi(
        '/api/v2/payments/creditors/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsCreditorsRetrieve operation.
     * @callback module:api/PaymentsApi~paymentsCreditorsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditorAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API endpoints related to creditor accounts.
     * @param {String} id 
     * @param {module:api/PaymentsApi~paymentsCreditorsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditorAccount}
     */
    paymentsCreditorsRetrieve(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsCreditorsRetrieve");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreditorAccount;
      return this.apiClient.callApi(
        '/api/v2/payments/creditors/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsSubmitCreate operation.
     * @callback module:api/PaymentsApi~paymentsSubmitCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate the payment on bank's side.  Complete the payment and return payment details as a response.
     * @param {String} id 
     * @param {module:model/PaymentReadRequest} paymentReadRequest 
     * @param {module:api/PaymentsApi~paymentsSubmitCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentRead}
     */
    paymentsSubmitCreate(id, paymentReadRequest, callback) {
      let postBody = paymentReadRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling paymentsSubmitCreate");
      }
      // verify the required parameter 'paymentReadRequest' is set
      if (paymentReadRequest === undefined || paymentReadRequest === null) {
        throw new Error("Missing the required parameter 'paymentReadRequest' when calling paymentsSubmitCreate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PaymentRead;
      return this.apiClient.callApi(
        '/api/v2/payments/{id}/submit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAllPaymentCreditorAccounts operation.
     * @callback module:api/PaymentsApi~retrieveAllPaymentCreditorAccountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreditorAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all payment creditor accounts
     * @param {module:api/PaymentsApi~retrieveAllPaymentCreditorAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreditorAccount>}
     */
    retrieveAllPaymentCreditorAccounts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CreditorAccount];
      return this.apiClient.callApi(
        '/api/v2/payments/account/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrievePayment operation.
     * @callback module:api/PaymentsApi~retrievePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve payment
     * @param {String} id 
     * @param {module:api/PaymentsApi~retrievePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentRead}
     */
    retrievePayment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrievePayment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['jwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentRead;
      return this.apiClient.callApi(
        '/api/v2/payments/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
