/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TypeEnum from './TypeEnum';

/**
 * The CreditorAccount model module.
 * @module model/CreditorAccount
 * @version 2.0 (v2)
 */
class CreditorAccount {
    /**
     * Constructs a new <code>CreditorAccount</code>.
     * Creditor account read serializer.
     * @alias module:model/CreditorAccount
     * @param account {String} Creditor account type identifier
     * @param currency {String} Creditor account currency
     * @param name {String} Creditor account name
     */
    constructor(account, currency, name) { 
        
        CreditorAccount.initialize(this, account, currency, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, account, currency, name) { 
        obj['account'] = account;
        obj['currency'] = currency;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreditorAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreditorAccount} obj Optional instance to populate.
     * @return {module:model/CreditorAccount} The populated <code>CreditorAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreditorAccount();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('address_country')) {
                obj['address_country'] = ApiClient.convertToType(data['address_country'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], TypeEnum);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreditorAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreditorAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreditorAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['address_country'] && !(typeof data['address_country'] === 'string' || data['address_country'] instanceof String)) {
            throw new Error("Expected the field `address_country` to be a primitive type in the JSON string but got " + data['address_country']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CreditorAccount.RequiredProperties = ["account", "currency", "name"];

/**
 * Creditor account type identifier
 * @member {String} account
 */
CreditorAccount.prototype['account'] = undefined;

/**
 * Creditor account address country
 * @member {String} address_country
 */
CreditorAccount.prototype['address_country'] = undefined;

/**
 * Creditor account currency
 * @member {String} currency
 */
CreditorAccount.prototype['currency'] = undefined;

/**
 * Unique entry ID
 * @member {String} id
 */
CreditorAccount.prototype['id'] = undefined;

/**
 * Creditor account name
 * @member {String} name
 */
CreditorAccount.prototype['name'] = undefined;

/**
 * Creditor account type  * `IBAN` - IBAN * `SCAN` - SortCodeAccountNumber
 * @member {module:model/TypeEnum} type
 */
CreditorAccount.prototype['type'] = undefined;






export default CreditorAccount;

