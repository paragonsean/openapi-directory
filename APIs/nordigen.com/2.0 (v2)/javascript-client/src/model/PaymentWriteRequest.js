/**
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreditorAccountWriteRequest from './CreditorAccountWriteRequest';
import DebtorAccountWriteRequest from './DebtorAccountWriteRequest';
import InstructedAmountRequest from './InstructedAmountRequest';
import PaymentProductEnum from './PaymentProductEnum';
import PeriodicPaymentRequest from './PeriodicPaymentRequest';

/**
 * The PaymentWriteRequest model module.
 * @module model/PaymentWriteRequest
 * @version 2.0 (v2)
 */
class PaymentWriteRequest {
    /**
     * Constructs a new <code>PaymentWriteRequest</code>.
     * PaymentWriteSerializer.
     * @alias module:model/PaymentWriteRequest
     * @param instructedAmount {module:model/InstructedAmountRequest} Instructed amount
     * @param redirect {String} Redirect URL to your application after payment is done
     */
    constructor(instructedAmount, redirect) { 
        
        PaymentWriteRequest.initialize(this, instructedAmount, redirect);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instructedAmount, redirect) { 
        obj['description'] = 'GOCARDLESS';
        obj['institution_id'] = 'SWEDBANK_SANDBOX_SANDLV22';
        obj['instructed_amount'] = instructedAmount;
        obj['redirect'] = redirect;
        obj['submit_payment'] = false;
    }

    /**
     * Constructs a <code>PaymentWriteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentWriteRequest} obj Optional instance to populate.
     * @return {module:model/PaymentWriteRequest} The populated <code>PaymentWriteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentWriteRequest();

            if (data.hasOwnProperty('creditor_account')) {
                obj['creditor_account'] = ApiClient.convertToType(data['creditor_account'], 'String');
            }
            if (data.hasOwnProperty('creditor_object')) {
                obj['creditor_object'] = ApiClient.convertToType(data['creditor_object'], CreditorAccountWriteRequest);
            }
            if (data.hasOwnProperty('custom_payment_id')) {
                obj['custom_payment_id'] = ApiClient.convertToType(data['custom_payment_id'], 'String');
            }
            if (data.hasOwnProperty('debtor_account')) {
                obj['debtor_account'] = ApiClient.convertToType(data['debtor_account'], DebtorAccountWriteRequest);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('institution_id')) {
                obj['institution_id'] = ApiClient.convertToType(data['institution_id'], 'String');
            }
            if (data.hasOwnProperty('instructed_amount')) {
                obj['instructed_amount'] = ApiClient.convertToType(data['instructed_amount'], InstructedAmountRequest);
            }
            if (data.hasOwnProperty('payment_product')) {
                obj['payment_product'] = ApiClient.convertToType(data['payment_product'], PaymentProductEnum);
            }
            if (data.hasOwnProperty('periodic_payment')) {
                obj['periodic_payment'] = PeriodicPaymentRequest.constructFromObject(data['periodic_payment']);
            }
            if (data.hasOwnProperty('redirect')) {
                obj['redirect'] = ApiClient.convertToType(data['redirect'], 'String');
            }
            if (data.hasOwnProperty('requested_execution_date')) {
                obj['requested_execution_date'] = ApiClient.convertToType(data['requested_execution_date'], 'Date');
            }
            if (data.hasOwnProperty('submit_payment')) {
                obj['submit_payment'] = ApiClient.convertToType(data['submit_payment'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentWriteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentWriteRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentWriteRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creditor_account'] && !(typeof data['creditor_account'] === 'string' || data['creditor_account'] instanceof String)) {
            throw new Error("Expected the field `creditor_account` to be a primitive type in the JSON string but got " + data['creditor_account']);
        }
        // validate the optional field `creditor_object`
        if (data['creditor_object']) { // data not null
          CreditorAccountWriteRequest.validateJSON(data['creditor_object']);
        }
        // ensure the json data is a string
        if (data['custom_payment_id'] && !(typeof data['custom_payment_id'] === 'string' || data['custom_payment_id'] instanceof String)) {
            throw new Error("Expected the field `custom_payment_id` to be a primitive type in the JSON string but got " + data['custom_payment_id']);
        }
        // validate the optional field `debtor_account`
        if (data['debtor_account']) { // data not null
          DebtorAccountWriteRequest.validateJSON(data['debtor_account']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['institution_id'] && !(typeof data['institution_id'] === 'string' || data['institution_id'] instanceof String)) {
            throw new Error("Expected the field `institution_id` to be a primitive type in the JSON string but got " + data['institution_id']);
        }
        // validate the optional field `instructed_amount`
        if (data['instructed_amount']) { // data not null
          InstructedAmountRequest.validateJSON(data['instructed_amount']);
        }
        // validate the optional field `periodic_payment`
        if (data['periodic_payment']) { // data not null
          PeriodicPaymentRequest.validateJSON(data['periodic_payment']);
        }
        // ensure the json data is a string
        if (data['redirect'] && !(typeof data['redirect'] === 'string' || data['redirect'] instanceof String)) {
            throw new Error("Expected the field `redirect` to be a primitive type in the JSON string but got " + data['redirect']);
        }

        return true;
    }


}

PaymentWriteRequest.RequiredProperties = ["instructed_amount", "redirect"];

/**
 * Registered creditor account
 * @member {String} creditor_account
 */
PaymentWriteRequest.prototype['creditor_account'] = undefined;

/**
 * Creditor account
 * @member {module:model/CreditorAccountWriteRequest} creditor_object
 */
PaymentWriteRequest.prototype['creditor_object'] = undefined;

/**
 * Payment Custom Payment ID
 * @member {String} custom_payment_id
 */
PaymentWriteRequest.prototype['custom_payment_id'] = undefined;

/**
 * Debtor account
 * @member {module:model/DebtorAccountWriteRequest} debtor_account
 */
PaymentWriteRequest.prototype['debtor_account'] = undefined;

/**
 * Payment description
 * @member {String} description
 * @default 'GOCARDLESS'
 */
PaymentWriteRequest.prototype['description'] = 'GOCARDLESS';

/**
 * Institution ID for Payment
 * @member {String} institution_id
 * @default 'SWEDBANK_SANDBOX_SANDLV22'
 */
PaymentWriteRequest.prototype['institution_id'] = 'SWEDBANK_SANDBOX_SANDLV22';

/**
 * Instructed amount
 * @member {module:model/InstructedAmountRequest} instructed_amount
 */
PaymentWriteRequest.prototype['instructed_amount'] = undefined;

/**
 * Payment product  * `T2P` - target-2-payments * `SCT` - sepa-credit-transfers * `ISCT` - instant-sepa-credit-transfer * `CBCT` - cross-border-credit-transfers * `BACS` - Back Payment Scheme * `CHAPS` - CHAPS Payment Scheme * `FPS` - Faster Payment Scheme * `SWIFT` - Swift Payment Service * `BT` - Balance Transfer * `MT` - Money Transfer
 * @member {module:model/PaymentProductEnum} payment_product
 */
PaymentWriteRequest.prototype['payment_product'] = undefined;

/**
 * @member {module:model/PeriodicPaymentRequest} periodic_payment
 */
PaymentWriteRequest.prototype['periodic_payment'] = undefined;

/**
 * Redirect URL to your application after payment is done
 * @member {String} redirect
 */
PaymentWriteRequest.prototype['redirect'] = undefined;

/**
 * Payment Execution date (for periodic payments)
 * @member {Date} requested_execution_date
 */
PaymentWriteRequest.prototype['requested_execution_date'] = undefined;

/**
 * Indicates whether payment should be submitted separately
 * @member {Boolean} submit_payment
 * @default false
 */
PaymentWriteRequest.prototype['submit_payment'] = false;






export default PaymentWriteRequest;

