/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreditorAccount;
import org.openapitools.client.model.CreditorAccountWrite;
import org.openapitools.client.model.CreditorAccountWriteRequest;
import org.openapitools.client.model.PaginatedCreditorAccountList;
import org.openapitools.client.model.PaginatedPaymentReadList;
import org.openapitools.client.model.PaymentRead;
import org.openapitools.client.model.PaymentReadRequest;
import org.openapitools.client.model.PaymentWrite;
import org.openapitools.client.model.PaymentWriteRequest;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApi
 */
@Disabled
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    /**
     * Create payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentTest() throws ApiException {
        PaymentWriteRequest paymentWriteRequest = null;
        PaymentWrite response = api.createPayment(paymentWriteRequest);
        // TODO: test validations
    }

    /**
     * Delete periodic payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePeriodicPaymentTest() throws ApiException {
        UUID id = null;
        Map<String, Object> response = api.deletePeriodicPayment(id);
        // TODO: test validations
    }

    /**
     * List minimum required fields for institution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMinimumRequiredFieldsForInstitutionTest() throws ApiException {
        String institutionId = null;
        Map<String, Object> response = api.listMinimumRequiredFieldsForInstitution(institutionId);
        // TODO: test validations
    }

    /**
     * Retrieve all payments belonging to the company
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentsTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedPaymentReadList response = api.listPayments(limit, offset);
        // TODO: test validations
    }

    /**
     * API endpoints related to creditor accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsCreditorsCreateTest() throws ApiException {
        CreditorAccountWriteRequest creditorAccountWriteRequest = null;
        CreditorAccountWrite response = api.paymentsCreditorsCreate(creditorAccountWriteRequest);
        // TODO: test validations
    }

    /**
     * API endpoints related to creditor accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsCreditorsDestroyTest() throws ApiException {
        UUID id = null;
        api.paymentsCreditorsDestroy(id);
        // TODO: test validations
    }

    /**
     * API endpoints related to creditor accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsCreditorsListTest() throws ApiException {
        String account = null;
        String addressCountry = null;
        String agent = null;
        String currency = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        String type = null;
        PaginatedCreditorAccountList response = api.paymentsCreditorsList(account, addressCountry, agent, currency, limit, name, offset, type);
        // TODO: test validations
    }

    /**
     * API endpoints related to creditor accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsCreditorsRetrieveTest() throws ApiException {
        UUID id = null;
        CreditorAccount response = api.paymentsCreditorsRetrieve(id);
        // TODO: test validations
    }

    /**
     * Initiate the payment on bank&#39;s side.  Complete the payment and return payment details as a response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentsSubmitCreateTest() throws ApiException {
        UUID id = null;
        PaymentReadRequest paymentReadRequest = null;
        PaymentRead response = api.paymentsSubmitCreate(id, paymentReadRequest);
        // TODO: test validations
    }

    /**
     * Retrieve all payment creditor accounts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveAllPaymentCreditorAccountsTest() throws ApiException {
        List<CreditorAccount> response = api.retrieveAllPaymentCreditorAccounts();
        // TODO: test validations
    }

    /**
     * Retrieve payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievePaymentTest() throws ApiException {
        UUID id = null;
        PaymentRead response = api.retrievePayment(id);
        // TODO: test validations
    }

}
