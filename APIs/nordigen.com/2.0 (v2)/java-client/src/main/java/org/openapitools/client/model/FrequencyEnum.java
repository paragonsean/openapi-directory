/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * * &#x60;Daily&#x60; - Daily * &#x60;Weekly&#x60; - Weekly * &#x60;EveryTwoWeeks&#x60; - EveryTwoWeeks * &#x60;Monthly&#x60; - Monthly * &#x60;EveryTwoMonths&#x60; - EveryTwoMonths * &#x60;Quarterly&#x60; - Quarterly * &#x60;SemiAnnual&#x60; - SemiAnnual * &#x60;Annual&#x60; - Annual * &#x60;MonthlyVariable&#x60; - MonthlyVariable
 */
@JsonAdapter(FrequencyEnum.Adapter.class)
public enum FrequencyEnum {
  
  DAILY("Daily"),
  
  WEEKLY("Weekly"),
  
  EVERY_TWO_WEEKS("EveryTwoWeeks"),
  
  MONTHLY("Monthly"),
  
  EVERY_TWO_MONTHS("EveryTwoMonths"),
  
  QUARTERLY("Quarterly"),
  
  SEMI_ANNUAL("SemiAnnual"),
  
  ANNUAL("Annual"),
  
  MONTHLY_VARIABLE("MonthlyVariable");

  private String value;

  FrequencyEnum(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FrequencyEnum fromValue(String value) {
    for (FrequencyEnum b : FrequencyEnum.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FrequencyEnum> {
    @Override
    public void write(final JsonWriter jsonWriter, final FrequencyEnum enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FrequencyEnum read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FrequencyEnum.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FrequencyEnum.fromValue(value);
  }
}

