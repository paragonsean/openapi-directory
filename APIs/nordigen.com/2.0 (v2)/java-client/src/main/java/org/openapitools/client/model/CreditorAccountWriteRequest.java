/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddressCountryEnum;
import org.openapitools.client.model.TypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creditor account write serializer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.529199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreditorAccountWriteRequest {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ADDRESS_COUNTRY = "address_country";
  @SerializedName(SERIALIZED_NAME_ADDRESS_COUNTRY)
  private AddressCountryEnum addressCountry;

  public static final String SERIALIZED_NAME_ADDRESS_STREET = "address_street";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STREET)
  private String addressStreet;

  public static final String SERIALIZED_NAME_AGENT = "agent";
  @SerializedName(SERIALIZED_NAME_AGENT)
  private String agent;

  public static final String SERIALIZED_NAME_AGENT_NAME = "agent_name";
  @SerializedName(SERIALIZED_NAME_AGENT_NAME)
  private String agentName;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institution_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private String institutionId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POST_CODE = "post_code";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  private String postCode;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.IBAN;

  public CreditorAccountWriteRequest() {
  }

  public CreditorAccountWriteRequest account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Creditor account type identifier
   * @return account
   */
  @javax.annotation.Nonnull
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public CreditorAccountWriteRequest addressCountry(AddressCountryEnum addressCountry) {
    this.addressCountry = addressCountry;
    return this;
  }

  /**
   * Get addressCountry
   * @return addressCountry
   */
  @javax.annotation.Nullable
  public AddressCountryEnum getAddressCountry() {
    return addressCountry;
  }

  public void setAddressCountry(AddressCountryEnum addressCountry) {
    this.addressCountry = addressCountry;
  }


  public CreditorAccountWriteRequest addressStreet(String addressStreet) {
    this.addressStreet = addressStreet;
    return this;
  }

  /**
   * Creditor account address street
   * @return addressStreet
   */
  @javax.annotation.Nullable
  public String getAddressStreet() {
    return addressStreet;
  }

  public void setAddressStreet(String addressStreet) {
    this.addressStreet = addressStreet;
  }


  public CreditorAccountWriteRequest agent(String agent) {
    this.agent = agent;
    return this;
  }

  /**
   * Creditor account BICFI Identifier
   * @return agent
   */
  @javax.annotation.Nullable
  public String getAgent() {
    return agent;
  }

  public void setAgent(String agent) {
    this.agent = agent;
  }


  public CreditorAccountWriteRequest agentName(String agentName) {
    this.agentName = agentName;
    return this;
  }

  /**
   * Creditor account agent name
   * @return agentName
   */
  @javax.annotation.Nullable
  public String getAgentName() {
    return agentName;
  }

  public void setAgentName(String agentName) {
    this.agentName = agentName;
  }


  public CreditorAccountWriteRequest currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Creditor account currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CreditorAccountWriteRequest institutionId(String institutionId) {
    this.institutionId = institutionId;
    return this;
  }

  /**
   * an Institution ID for this CreditorAccount
   * @return institutionId
   */
  @javax.annotation.Nullable
  public String getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(String institutionId) {
    this.institutionId = institutionId;
  }


  public CreditorAccountWriteRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Creditor account name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreditorAccountWriteRequest postCode(String postCode) {
    this.postCode = postCode;
    return this;
  }

  /**
   * Creditor account address post code
   * @return postCode
   */
  @javax.annotation.Nullable
  public String getPostCode() {
    return postCode;
  }

  public void setPostCode(String postCode) {
    this.postCode = postCode;
  }


  public CreditorAccountWriteRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Creditor account type  * &#x60;IBAN&#x60; - IBAN * &#x60;SCAN&#x60; - SortCodeAccountNumber
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditorAccountWriteRequest creditorAccountWriteRequest = (CreditorAccountWriteRequest) o;
    return Objects.equals(this.account, creditorAccountWriteRequest.account) &&
        Objects.equals(this.addressCountry, creditorAccountWriteRequest.addressCountry) &&
        Objects.equals(this.addressStreet, creditorAccountWriteRequest.addressStreet) &&
        Objects.equals(this.agent, creditorAccountWriteRequest.agent) &&
        Objects.equals(this.agentName, creditorAccountWriteRequest.agentName) &&
        Objects.equals(this.currency, creditorAccountWriteRequest.currency) &&
        Objects.equals(this.institutionId, creditorAccountWriteRequest.institutionId) &&
        Objects.equals(this.name, creditorAccountWriteRequest.name) &&
        Objects.equals(this.postCode, creditorAccountWriteRequest.postCode) &&
        Objects.equals(this.type, creditorAccountWriteRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, addressCountry, addressStreet, agent, agentName, currency, institutionId, name, postCode, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditorAccountWriteRequest {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    addressCountry: ").append(toIndentedString(addressCountry)).append("\n");
    sb.append("    addressStreet: ").append(toIndentedString(addressStreet)).append("\n");
    sb.append("    agent: ").append(toIndentedString(agent)).append("\n");
    sb.append("    agentName: ").append(toIndentedString(agentName)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("address_country");
    openapiFields.add("address_street");
    openapiFields.add("agent");
    openapiFields.add("agent_name");
    openapiFields.add("currency");
    openapiFields.add("institution_id");
    openapiFields.add("name");
    openapiFields.add("post_code");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreditorAccountWriteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreditorAccountWriteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreditorAccountWriteRequest is not found in the empty JSON string", CreditorAccountWriteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreditorAccountWriteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreditorAccountWriteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreditorAccountWriteRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      // validate the optional field `address_country`
      if (jsonObj.get("address_country") != null && !jsonObj.get("address_country").isJsonNull()) {
        AddressCountryEnum.validateJsonElement(jsonObj.get("address_country"));
      }
      if ((jsonObj.get("address_street") != null && !jsonObj.get("address_street").isJsonNull()) && !jsonObj.get("address_street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_street").toString()));
      }
      if ((jsonObj.get("agent") != null && !jsonObj.get("agent").isJsonNull()) && !jsonObj.get("agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agent").toString()));
      }
      if ((jsonObj.get("agent_name") != null && !jsonObj.get("agent_name").isJsonNull()) && !jsonObj.get("agent_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agent_name").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("institution_id") != null && !jsonObj.get("institution_id").isJsonNull()) && !jsonObj.get("institution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("post_code") != null && !jsonObj.get("post_code").isJsonNull()) && !jsonObj.get("post_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_code").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreditorAccountWriteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreditorAccountWriteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreditorAccountWriteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreditorAccountWriteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreditorAccountWriteRequest>() {
           @Override
           public void write(JsonWriter out, CreditorAccountWriteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreditorAccountWriteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreditorAccountWriteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreditorAccountWriteRequest
   * @throws IOException if the JSON string is invalid with respect to CreditorAccountWriteRequest
   */
  public static CreditorAccountWriteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreditorAccountWriteRequest.class);
  }

  /**
   * Convert an instance of CreditorAccountWriteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

