/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * * &#x60;AT&#x60; - Austria * &#x60;BE&#x60; - Belgium * &#x60;BG&#x60; - Bulgaria * &#x60;HR&#x60; - Croatia * &#x60;CY&#x60; - Cyprus * &#x60;CZ&#x60; - Czechia * &#x60;DK&#x60; - Denmark * &#x60;EE&#x60; - Estonia * &#x60;FI&#x60; - Finland * &#x60;FR&#x60; - France * &#x60;DE&#x60; - Germany * &#x60;GR&#x60; - Greece * &#x60;HU&#x60; - Hungary * &#x60;IS&#x60; - Iceland * &#x60;IE&#x60; - Ireland * &#x60;IT&#x60; - Italy * &#x60;LV&#x60; - Latvia * &#x60;LI&#x60; - Liechtenstein * &#x60;LT&#x60; - Lithuania * &#x60;LU&#x60; - Luxembourg * &#x60;MT&#x60; - Malta * &#x60;NL&#x60; - Netherlands * &#x60;NO&#x60; - Norway * &#x60;PL&#x60; - Poland * &#x60;PT&#x60; - Portugal * &#x60;RO&#x60; - Romania * &#x60;SK&#x60; - Slovakia * &#x60;SI&#x60; - Slovenia * &#x60;ES&#x60; - Spain * &#x60;SE&#x60; - Sweden * &#x60;GB&#x60; - United Kingdom * &#x60;US&#x60; - United States of America
 */
@JsonAdapter(CountryEnum.Adapter.class)
public enum CountryEnum {
  
  AT("AT"),
  
  BE("BE"),
  
  BG("BG"),
  
  HR("HR"),
  
  CY("CY"),
  
  CZ("CZ"),
  
  DK("DK"),
  
  EE("EE"),
  
  FI("FI"),
  
  FR("FR"),
  
  DE("DE"),
  
  GR("GR"),
  
  HU("HU"),
  
  IS("IS"),
  
  IE("IE"),
  
  IT("IT"),
  
  LV("LV"),
  
  LI("LI"),
  
  LT("LT"),
  
  LU("LU"),
  
  MT("MT"),
  
  NL("NL"),
  
  FALSE("false"),
  
  PL("PL"),
  
  PT("PT"),
  
  RO("RO"),
  
  SK("SK"),
  
  SI("SI"),
  
  ES("ES"),
  
  SE("SE"),
  
  GB("GB"),
  
  US("US");

  private String value;

  CountryEnum(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CountryEnum fromValue(String value) {
    for (CountryEnum b : CountryEnum.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CountryEnum> {
    @Override
    public void write(final JsonWriter jsonWriter, final CountryEnum enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CountryEnum read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CountryEnum.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CountryEnum.fromValue(value);
  }
}

