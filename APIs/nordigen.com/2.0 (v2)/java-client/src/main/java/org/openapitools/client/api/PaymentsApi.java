/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreditorAccount;
import org.openapitools.client.model.CreditorAccountWrite;
import org.openapitools.client.model.CreditorAccountWriteRequest;
import org.openapitools.client.model.PaginatedCreditorAccountList;
import org.openapitools.client.model.PaginatedPaymentReadList;
import org.openapitools.client.model.PaymentRead;
import org.openapitools.client.model.PaymentReadRequest;
import org.openapitools.client.model.PaymentWrite;
import org.openapitools.client.model.PaymentWriteRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPayment
     * @param paymentWriteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentCall(PaymentWriteRequest paymentWriteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentWriteRequest;

        // create path and map variables
        String localVarPath = "/api/v2/payments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentValidateBeforeCall(PaymentWriteRequest paymentWriteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentWriteRequest' is set
        if (paymentWriteRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentWriteRequest' when calling createPayment(Async)");
        }

        return createPaymentCall(paymentWriteRequest, _callback);

    }

    /**
     * 
     * Create payment
     * @param paymentWriteRequest  (required)
     * @return PaymentWrite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public PaymentWrite createPayment(PaymentWriteRequest paymentWriteRequest) throws ApiException {
        ApiResponse<PaymentWrite> localVarResp = createPaymentWithHttpInfo(paymentWriteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create payment
     * @param paymentWriteRequest  (required)
     * @return ApiResponse&lt;PaymentWrite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentWrite> createPaymentWithHttpInfo(PaymentWriteRequest paymentWriteRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(paymentWriteRequest, null);
        Type localVarReturnType = new TypeToken<PaymentWrite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create payment
     * @param paymentWriteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create payment </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentAsync(PaymentWriteRequest paymentWriteRequest, final ApiCallback<PaymentWrite> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(paymentWriteRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentWrite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePeriodicPayment
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment delete error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePeriodicPaymentCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePeriodicPaymentValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePeriodicPayment(Async)");
        }

        return deletePeriodicPaymentCall(id, _callback);

    }

    /**
     * 
     * Delete periodic payment
     * @param id  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment delete error </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> deletePeriodicPayment(UUID id) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = deletePeriodicPaymentWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete periodic payment
     * @param id  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment delete error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> deletePeriodicPaymentWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deletePeriodicPaymentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete periodic payment
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payment deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Payment delete error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePeriodicPaymentAsync(UUID id, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePeriodicPaymentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMinimumRequiredFieldsForInstitution
     * @param institutionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Minimum required fields </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMinimumRequiredFieldsForInstitutionCall(String institutionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/fields/{institution_id}/"
            .replace("{" + "institution_id" + "}", localVarApiClient.escapeString(institutionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMinimumRequiredFieldsForInstitutionValidateBeforeCall(String institutionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'institutionId' is set
        if (institutionId == null) {
            throw new ApiException("Missing the required parameter 'institutionId' when calling listMinimumRequiredFieldsForInstitution(Async)");
        }

        return listMinimumRequiredFieldsForInstitutionCall(institutionId, _callback);

    }

    /**
     * 
     * List minimum required fields for institution
     * @param institutionId  (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Minimum required fields </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> listMinimumRequiredFieldsForInstitution(String institutionId) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = listMinimumRequiredFieldsForInstitutionWithHttpInfo(institutionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List minimum required fields for institution
     * @param institutionId  (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Minimum required fields </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> listMinimumRequiredFieldsForInstitutionWithHttpInfo(String institutionId) throws ApiException {
        okhttp3.Call localVarCall = listMinimumRequiredFieldsForInstitutionValidateBeforeCall(institutionId, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List minimum required fields for institution
     * @param institutionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Minimum required fields </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMinimumRequiredFieldsForInstitutionAsync(String institutionId, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMinimumRequiredFieldsForInstitutionValidateBeforeCall(institutionId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPayments
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPaymentsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaymentsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return listPaymentsCall(limit, offset, _callback);

    }

    /**
     * 
     * Retrieve all payments belonging to the company
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @return PaginatedPaymentReadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPaymentReadList listPayments(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedPaymentReadList> localVarResp = listPaymentsWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all payments belonging to the company
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @return ApiResponse&lt;PaginatedPaymentReadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPaymentReadList> listPaymentsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listPaymentsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedPaymentReadList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all payments belonging to the company
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List payments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPaymentsAsync(Integer limit, Integer offset, final ApiCallback<PaginatedPaymentReadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaymentsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPaymentReadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsCreditorsCreate
     * @param creditorAccountWriteRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsCreateCall(CreditorAccountWriteRequest creditorAccountWriteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creditorAccountWriteRequest;

        // create path and map variables
        String localVarPath = "/api/v2/payments/creditors/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsCreditorsCreateValidateBeforeCall(CreditorAccountWriteRequest creditorAccountWriteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'creditorAccountWriteRequest' is set
        if (creditorAccountWriteRequest == null) {
            throw new ApiException("Missing the required parameter 'creditorAccountWriteRequest' when calling paymentsCreditorsCreate(Async)");
        }

        return paymentsCreditorsCreateCall(creditorAccountWriteRequest, _callback);

    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param creditorAccountWriteRequest  (required)
     * @return CreditorAccountWrite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreditorAccountWrite paymentsCreditorsCreate(CreditorAccountWriteRequest creditorAccountWriteRequest) throws ApiException {
        ApiResponse<CreditorAccountWrite> localVarResp = paymentsCreditorsCreateWithHttpInfo(creditorAccountWriteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param creditorAccountWriteRequest  (required)
     * @return ApiResponse&lt;CreditorAccountWrite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditorAccountWrite> paymentsCreditorsCreateWithHttpInfo(CreditorAccountWriteRequest creditorAccountWriteRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentsCreditorsCreateValidateBeforeCall(creditorAccountWriteRequest, null);
        Type localVarReturnType = new TypeToken<CreditorAccountWrite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API endpoints related to creditor accounts.
     * @param creditorAccountWriteRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsCreateAsync(CreditorAccountWriteRequest creditorAccountWriteRequest, final ApiCallback<CreditorAccountWrite> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsCreditorsCreateValidateBeforeCall(creditorAccountWriteRequest, _callback);
        Type localVarReturnType = new TypeToken<CreditorAccountWrite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsCreditorsDestroy
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsDestroyCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/creditors/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsCreditorsDestroyValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentsCreditorsDestroy(Async)");
        }

        return paymentsCreditorsDestroyCall(id, _callback);

    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void paymentsCreditorsDestroy(UUID id) throws ApiException {
        paymentsCreditorsDestroyWithHttpInfo(id);
    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> paymentsCreditorsDestroyWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = paymentsCreditorsDestroyValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * API endpoints related to creditor accounts.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsDestroyAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsCreditorsDestroyValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsCreditorsList
     * @param account  (optional)
     * @param addressCountry  (optional)
     * @param agent  (optional)
     * @param currency  (optional)
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsListCall(String account, String addressCountry, String agent, String currency, Integer limit, String name, Integer offset, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/creditors/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (account != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account", account));
        }

        if (addressCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("address_country", addressCountry));
        }

        if (agent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("agent", agent));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsCreditorsListValidateBeforeCall(String account, String addressCountry, String agent, String currency, Integer limit, String name, Integer offset, String type, final ApiCallback _callback) throws ApiException {
        return paymentsCreditorsListCall(account, addressCountry, agent, currency, limit, name, offset, type, _callback);

    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param account  (optional)
     * @param addressCountry  (optional)
     * @param agent  (optional)
     * @param currency  (optional)
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param type  (optional)
     * @return PaginatedCreditorAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCreditorAccountList paymentsCreditorsList(String account, String addressCountry, String agent, String currency, Integer limit, String name, Integer offset, String type) throws ApiException {
        ApiResponse<PaginatedCreditorAccountList> localVarResp = paymentsCreditorsListWithHttpInfo(account, addressCountry, agent, currency, limit, name, offset, type);
        return localVarResp.getData();
    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param account  (optional)
     * @param addressCountry  (optional)
     * @param agent  (optional)
     * @param currency  (optional)
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param type  (optional)
     * @return ApiResponse&lt;PaginatedCreditorAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCreditorAccountList> paymentsCreditorsListWithHttpInfo(String account, String addressCountry, String agent, String currency, Integer limit, String name, Integer offset, String type) throws ApiException {
        okhttp3.Call localVarCall = paymentsCreditorsListValidateBeforeCall(account, addressCountry, agent, currency, limit, name, offset, type, null);
        Type localVarReturnType = new TypeToken<PaginatedCreditorAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API endpoints related to creditor accounts.
     * @param account  (optional)
     * @param addressCountry  (optional)
     * @param agent  (optional)
     * @param currency  (optional)
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsListAsync(String account, String addressCountry, String agent, String currency, Integer limit, String name, Integer offset, String type, final ApiCallback<PaginatedCreditorAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsCreditorsListValidateBeforeCall(account, addressCountry, agent, currency, limit, name, offset, type, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCreditorAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsCreditorsRetrieve
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsRetrieveCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/creditors/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsCreditorsRetrieveValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentsCreditorsRetrieve(Async)");
        }

        return paymentsCreditorsRetrieveCall(id, _callback);

    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param id  (required)
     * @return CreditorAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreditorAccount paymentsCreditorsRetrieve(UUID id) throws ApiException {
        ApiResponse<CreditorAccount> localVarResp = paymentsCreditorsRetrieveWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * API endpoints related to creditor accounts.
     * @param id  (required)
     * @return ApiResponse&lt;CreditorAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreditorAccount> paymentsCreditorsRetrieveWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = paymentsCreditorsRetrieveValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CreditorAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API endpoints related to creditor accounts.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsCreditorsRetrieveAsync(UUID id, final ApiCallback<CreditorAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsCreditorsRetrieveValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CreditorAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentsSubmitCreate
     * @param id  (required)
     * @param paymentReadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsSubmitCreateCall(UUID id, PaymentReadRequest paymentReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentReadRequest;

        // create path and map variables
        String localVarPath = "/api/v2/payments/{id}/submit/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentsSubmitCreateValidateBeforeCall(UUID id, PaymentReadRequest paymentReadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling paymentsSubmitCreate(Async)");
        }

        // verify the required parameter 'paymentReadRequest' is set
        if (paymentReadRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentReadRequest' when calling paymentsSubmitCreate(Async)");
        }

        return paymentsSubmitCreateCall(id, paymentReadRequest, _callback);

    }

    /**
     * 
     * Initiate the payment on bank&#39;s side.  Complete the payment and return payment details as a response.
     * @param id  (required)
     * @param paymentReadRequest  (required)
     * @return PaymentRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaymentRead paymentsSubmitCreate(UUID id, PaymentReadRequest paymentReadRequest) throws ApiException {
        ApiResponse<PaymentRead> localVarResp = paymentsSubmitCreateWithHttpInfo(id, paymentReadRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Initiate the payment on bank&#39;s side.  Complete the payment and return payment details as a response.
     * @param id  (required)
     * @param paymentReadRequest  (required)
     * @return ApiResponse&lt;PaymentRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentRead> paymentsSubmitCreateWithHttpInfo(UUID id, PaymentReadRequest paymentReadRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentsSubmitCreateValidateBeforeCall(id, paymentReadRequest, null);
        Type localVarReturnType = new TypeToken<PaymentRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initiate the payment on bank&#39;s side.  Complete the payment and return payment details as a response.
     * @param id  (required)
     * @param paymentReadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentsSubmitCreateAsync(UUID id, PaymentReadRequest paymentReadRequest, final ApiCallback<PaymentRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentsSubmitCreateValidateBeforeCall(id, paymentReadRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAllPaymentCreditorAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all payment creditor accounts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAllPaymentCreditorAccountsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/account/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAllPaymentCreditorAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return retrieveAllPaymentCreditorAccountsCall(_callback);

    }

    /**
     * 
     * Retrieve all payment creditor accounts
     * @return List&lt;CreditorAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all payment creditor accounts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public List<CreditorAccount> retrieveAllPaymentCreditorAccounts() throws ApiException {
        ApiResponse<List<CreditorAccount>> localVarResp = retrieveAllPaymentCreditorAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all payment creditor accounts
     * @return ApiResponse&lt;List&lt;CreditorAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all payment creditor accounts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreditorAccount>> retrieveAllPaymentCreditorAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = retrieveAllPaymentCreditorAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CreditorAccount>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all payment creditor accounts
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all payment creditor accounts </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAllPaymentCreditorAccountsAsync(final ApiCallback<List<CreditorAccount>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAllPaymentCreditorAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CreditorAccount>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrievePayment
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve payment information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePaymentCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/payments/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrievePaymentValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrievePayment(Async)");
        }

        return retrievePaymentCall(id, _callback);

    }

    /**
     * 
     * Retrieve payment
     * @param id  (required)
     * @return PaymentRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve payment information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public PaymentRead retrievePayment(UUID id) throws ApiException {
        ApiResponse<PaymentRead> localVarResp = retrievePaymentWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve payment
     * @param id  (required)
     * @return ApiResponse&lt;PaymentRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve payment information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentRead> retrievePaymentWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = retrievePaymentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PaymentRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve payment
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve payment information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievePaymentAsync(UUID id, final ApiCallback<PaymentRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrievePaymentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PaymentRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
