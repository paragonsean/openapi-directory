/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionRuleEnum;
import org.openapitools.client.model.FrequencyEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Periodic Payment Serializer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.529199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PeriodicPayment {
  public static final String SERIALIZED_NAME_DAY_OF_EXECUTION = "day_of_execution";
  @SerializedName(SERIALIZED_NAME_DAY_OF_EXECUTION)
  private String dayOfExecution;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_EXECUTION_RULE = "execution_rule";
  @SerializedName(SERIALIZED_NAME_EXECUTION_RULE)
  private ExecutionRuleEnum executionRule = ExecutionRuleEnum.FOLLOWING;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private FrequencyEnum frequency = FrequencyEnum.MONTHLY;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public PeriodicPayment() {
  }

  public PeriodicPayment dayOfExecution(String dayOfExecution) {
    this.dayOfExecution = dayOfExecution;
    return this;
  }

  /**
   * Get dayOfExecution
   * @return dayOfExecution
   */
  @javax.annotation.Nullable
  public String getDayOfExecution() {
    return dayOfExecution;
  }

  public void setDayOfExecution(String dayOfExecution) {
    this.dayOfExecution = dayOfExecution;
  }


  public PeriodicPayment endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public PeriodicPayment executionRule(ExecutionRuleEnum executionRule) {
    this.executionRule = executionRule;
    return this;
  }

  /**
   * Behavior when periodic payment dates fall on holiday.  * &#x60;following&#x60; - following * &#x60;preceding&#x60; - preceding
   * @return executionRule
   */
  @javax.annotation.Nullable
  public ExecutionRuleEnum getExecutionRule() {
    return executionRule;
  }

  public void setExecutionRule(ExecutionRuleEnum executionRule) {
    this.executionRule = executionRule;
  }


  public PeriodicPayment frequency(FrequencyEnum frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public FrequencyEnum getFrequency() {
    return frequency;
  }

  public void setFrequency(FrequencyEnum frequency) {
    this.frequency = frequency;
  }


  public PeriodicPayment startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nonnull
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodicPayment periodicPayment = (PeriodicPayment) o;
    return Objects.equals(this.dayOfExecution, periodicPayment.dayOfExecution) &&
        Objects.equals(this.endDate, periodicPayment.endDate) &&
        Objects.equals(this.executionRule, periodicPayment.executionRule) &&
        Objects.equals(this.frequency, periodicPayment.frequency) &&
        Objects.equals(this.startDate, periodicPayment.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dayOfExecution, endDate, executionRule, frequency, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodicPayment {\n");
    sb.append("    dayOfExecution: ").append(toIndentedString(dayOfExecution)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    executionRule: ").append(toIndentedString(executionRule)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("day_of_execution");
    openapiFields.add("end_date");
    openapiFields.add("execution_rule");
    openapiFields.add("frequency");
    openapiFields.add("start_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("start_date");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PeriodicPayment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PeriodicPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PeriodicPayment is not found in the empty JSON string", PeriodicPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PeriodicPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PeriodicPayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PeriodicPayment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("day_of_execution") != null && !jsonObj.get("day_of_execution").isJsonNull()) && !jsonObj.get("day_of_execution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day_of_execution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day_of_execution").toString()));
      }
      // validate the optional field `execution_rule`
      if (jsonObj.get("execution_rule") != null && !jsonObj.get("execution_rule").isJsonNull()) {
        ExecutionRuleEnum.validateJsonElement(jsonObj.get("execution_rule"));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        FrequencyEnum.validateJsonElement(jsonObj.get("frequency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PeriodicPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PeriodicPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PeriodicPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PeriodicPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<PeriodicPayment>() {
           @Override
           public void write(JsonWriter out, PeriodicPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PeriodicPayment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PeriodicPayment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PeriodicPayment
   * @throws IOException if the JSON string is invalid with respect to PeriodicPayment
   */
  public static PeriodicPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PeriodicPayment.class);
  }

  /**
   * Convert an instance of PeriodicPayment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

