/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PaginatedRequisitionList;
import org.openapitools.client.model.Requisition;
import org.openapitools.client.model.RequisitionRequest;
import org.openapitools.client.model.SpectacularRequisition;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequisitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RequisitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RequisitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteRequisitionByIdV2
     * @param id A UUID string identifying this requisition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRequisitionByIdV2Call(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/requisitions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRequisitionByIdV2ValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRequisitionByIdV2(Async)");
        }

        return deleteRequisitionByIdV2Call(id, _callback);

    }

    /**
     * 
     * Delete requisition and its end user agreement
     * @param id A UUID string identifying this requisition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRequisitionByIdV2(UUID id) throws ApiException {
        deleteRequisitionByIdV2WithHttpInfo(id);
    }

    /**
     * 
     * Delete requisition and its end user agreement
     * @param id A UUID string identifying this requisition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRequisitionByIdV2WithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteRequisitionByIdV2ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete requisition and its end user agreement
     * @param id A UUID string identifying this requisition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRequisitionByIdV2Async(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRequisitionByIdV2ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requisitionById
     * @param id A UUID string identifying this requisition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get requisition by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requisitionByIdCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/requisitions/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requisitionByIdValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requisitionById(Async)");
        }

        return requisitionByIdCall(id, _callback);

    }

    /**
     * 
     * Retrieve a requisition by ID
     * @param id A UUID string identifying this requisition. (required)
     * @return Requisition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get requisition by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public Requisition requisitionById(UUID id) throws ApiException {
        ApiResponse<Requisition> localVarResp = requisitionByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a requisition by ID
     * @param id A UUID string identifying this requisition. (required)
     * @return ApiResponse&lt;Requisition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get requisition by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Requisition> requisitionByIdWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = requisitionByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Requisition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a requisition by ID
     * @param id A UUID string identifying this requisition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get requisition by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requisitionByIdAsync(UUID id, final ApiCallback<Requisition> _callback) throws ApiException {

        okhttp3.Call localVarCall = requisitionByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Requisition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requisitionCreated
     * @param requisitionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requisition has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fields required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Agreement not found errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requisitionCreatedCall(RequisitionRequest requisitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requisitionRequest;

        // create path and map variables
        String localVarPath = "/api/v2/requisitions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requisitionCreatedValidateBeforeCall(RequisitionRequest requisitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requisitionRequest' is set
        if (requisitionRequest == null) {
            throw new ApiException("Missing the required parameter 'requisitionRequest' when calling requisitionCreated(Async)");
        }

        return requisitionCreatedCall(requisitionRequest, _callback);

    }

    /**
     * 
     * Create a new requisition
     * @param requisitionRequest  (required)
     * @return SpectacularRequisition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requisition has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fields required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Agreement not found errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public SpectacularRequisition requisitionCreated(RequisitionRequest requisitionRequest) throws ApiException {
        ApiResponse<SpectacularRequisition> localVarResp = requisitionCreatedWithHttpInfo(requisitionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new requisition
     * @param requisitionRequest  (required)
     * @return ApiResponse&lt;SpectacularRequisition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requisition has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fields required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Agreement not found errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpectacularRequisition> requisitionCreatedWithHttpInfo(RequisitionRequest requisitionRequest) throws ApiException {
        okhttp3.Call localVarCall = requisitionCreatedValidateBeforeCall(requisitionRequest, null);
        Type localVarReturnType = new TypeToken<SpectacularRequisition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new requisition
     * @param requisitionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requisition has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Fields required </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Agreement not found errors </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requisitionCreatedAsync(RequisitionRequest requisitionRequest, final ApiCallback<SpectacularRequisition> _callback) throws ApiException {

        okhttp3.Call localVarCall = requisitionCreatedValidateBeforeCall(requisitionRequest, _callback);
        Type localVarReturnType = new TypeToken<SpectacularRequisition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAllRequisitions
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all requisitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAllRequisitionsCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/requisitions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAllRequisitionsValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return retrieveAllRequisitionsCall(limit, offset, _callback);

    }

    /**
     * 
     * Retrieve all requisitions belonging to the company
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @return PaginatedRequisitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all requisitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedRequisitionList retrieveAllRequisitions(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedRequisitionList> localVarResp = retrieveAllRequisitionsWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all requisitions belonging to the company
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @return ApiResponse&lt;PaginatedRequisitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all requisitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedRequisitionList> retrieveAllRequisitionsWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = retrieveAllRequisitionsValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedRequisitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all requisitions belonging to the company
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all requisitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unknown Fields </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAllRequisitionsAsync(Integer limit, Integer offset, final ApiCallback<PaginatedRequisitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAllRequisitionsValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedRequisitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
