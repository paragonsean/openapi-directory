/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.CreditorAccountWriteRequest;
import org.openapitools.client.model.DebtorAccountWriteRequest;
import org.openapitools.client.model.InstructedAmountRequest;
import org.openapitools.client.model.PaymentProductEnum;
import org.openapitools.client.model.PeriodicPaymentRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentWriteSerializer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.529199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentWriteRequest {
  public static final String SERIALIZED_NAME_CREDITOR_ACCOUNT = "creditor_account";
  @SerializedName(SERIALIZED_NAME_CREDITOR_ACCOUNT)
  private UUID creditorAccount;

  public static final String SERIALIZED_NAME_CREDITOR_OBJECT = "creditor_object";
  @SerializedName(SERIALIZED_NAME_CREDITOR_OBJECT)
  private CreditorAccountWriteRequest creditorObject;

  public static final String SERIALIZED_NAME_CUSTOM_PAYMENT_ID = "custom_payment_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PAYMENT_ID)
  private String customPaymentId;

  public static final String SERIALIZED_NAME_DEBTOR_ACCOUNT = "debtor_account";
  @SerializedName(SERIALIZED_NAME_DEBTOR_ACCOUNT)
  private DebtorAccountWriteRequest debtorAccount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "GOCARDLESS";

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institution_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private String institutionId = "SWEDBANK_SANDBOX_SANDLV22";

  public static final String SERIALIZED_NAME_INSTRUCTED_AMOUNT = "instructed_amount";
  @SerializedName(SERIALIZED_NAME_INSTRUCTED_AMOUNT)
  private InstructedAmountRequest instructedAmount;

  public static final String SERIALIZED_NAME_PAYMENT_PRODUCT = "payment_product";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PRODUCT)
  private PaymentProductEnum paymentProduct = PaymentProductEnum.ISCT;

  public static final String SERIALIZED_NAME_PERIODIC_PAYMENT = "periodic_payment";
  @SerializedName(SERIALIZED_NAME_PERIODIC_PAYMENT)
  private PeriodicPaymentRequest periodicPayment;

  public static final String SERIALIZED_NAME_REDIRECT = "redirect";
  @SerializedName(SERIALIZED_NAME_REDIRECT)
  private URI redirect;

  public static final String SERIALIZED_NAME_REQUESTED_EXECUTION_DATE = "requested_execution_date";
  @SerializedName(SERIALIZED_NAME_REQUESTED_EXECUTION_DATE)
  private LocalDate requestedExecutionDate;

  public static final String SERIALIZED_NAME_SUBMIT_PAYMENT = "submit_payment";
  @SerializedName(SERIALIZED_NAME_SUBMIT_PAYMENT)
  private Boolean submitPayment = false;

  public PaymentWriteRequest() {
  }

  public PaymentWriteRequest creditorAccount(UUID creditorAccount) {
    this.creditorAccount = creditorAccount;
    return this;
  }

  /**
   * Registered creditor account
   * @return creditorAccount
   */
  @javax.annotation.Nullable
  public UUID getCreditorAccount() {
    return creditorAccount;
  }

  public void setCreditorAccount(UUID creditorAccount) {
    this.creditorAccount = creditorAccount;
  }


  public PaymentWriteRequest creditorObject(CreditorAccountWriteRequest creditorObject) {
    this.creditorObject = creditorObject;
    return this;
  }

  /**
   * Creditor account
   * @return creditorObject
   */
  @javax.annotation.Nullable
  public CreditorAccountWriteRequest getCreditorObject() {
    return creditorObject;
  }

  public void setCreditorObject(CreditorAccountWriteRequest creditorObject) {
    this.creditorObject = creditorObject;
  }


  public PaymentWriteRequest customPaymentId(String customPaymentId) {
    this.customPaymentId = customPaymentId;
    return this;
  }

  /**
   * Payment Custom Payment ID
   * @return customPaymentId
   */
  @javax.annotation.Nullable
  public String getCustomPaymentId() {
    return customPaymentId;
  }

  public void setCustomPaymentId(String customPaymentId) {
    this.customPaymentId = customPaymentId;
  }


  public PaymentWriteRequest debtorAccount(DebtorAccountWriteRequest debtorAccount) {
    this.debtorAccount = debtorAccount;
    return this;
  }

  /**
   * Debtor account
   * @return debtorAccount
   */
  @javax.annotation.Nullable
  public DebtorAccountWriteRequest getDebtorAccount() {
    return debtorAccount;
  }

  public void setDebtorAccount(DebtorAccountWriteRequest debtorAccount) {
    this.debtorAccount = debtorAccount;
  }


  public PaymentWriteRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Payment description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PaymentWriteRequest institutionId(String institutionId) {
    this.institutionId = institutionId;
    return this;
  }

  /**
   * Institution ID for Payment
   * @return institutionId
   */
  @javax.annotation.Nullable
  public String getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(String institutionId) {
    this.institutionId = institutionId;
  }


  public PaymentWriteRequest instructedAmount(InstructedAmountRequest instructedAmount) {
    this.instructedAmount = instructedAmount;
    return this;
  }

  /**
   * Instructed amount
   * @return instructedAmount
   */
  @javax.annotation.Nonnull
  public InstructedAmountRequest getInstructedAmount() {
    return instructedAmount;
  }

  public void setInstructedAmount(InstructedAmountRequest instructedAmount) {
    this.instructedAmount = instructedAmount;
  }


  public PaymentWriteRequest paymentProduct(PaymentProductEnum paymentProduct) {
    this.paymentProduct = paymentProduct;
    return this;
  }

  /**
   * Payment product  * &#x60;T2P&#x60; - target-2-payments * &#x60;SCT&#x60; - sepa-credit-transfers * &#x60;ISCT&#x60; - instant-sepa-credit-transfer * &#x60;CBCT&#x60; - cross-border-credit-transfers * &#x60;BACS&#x60; - Back Payment Scheme * &#x60;CHAPS&#x60; - CHAPS Payment Scheme * &#x60;FPS&#x60; - Faster Payment Scheme * &#x60;SWIFT&#x60; - Swift Payment Service * &#x60;BT&#x60; - Balance Transfer * &#x60;MT&#x60; - Money Transfer
   * @return paymentProduct
   */
  @javax.annotation.Nullable
  public PaymentProductEnum getPaymentProduct() {
    return paymentProduct;
  }

  public void setPaymentProduct(PaymentProductEnum paymentProduct) {
    this.paymentProduct = paymentProduct;
  }


  public PaymentWriteRequest periodicPayment(PeriodicPaymentRequest periodicPayment) {
    this.periodicPayment = periodicPayment;
    return this;
  }

  /**
   * Get periodicPayment
   * @return periodicPayment
   */
  @javax.annotation.Nullable
  public PeriodicPaymentRequest getPeriodicPayment() {
    return periodicPayment;
  }

  public void setPeriodicPayment(PeriodicPaymentRequest periodicPayment) {
    this.periodicPayment = periodicPayment;
  }


  public PaymentWriteRequest redirect(URI redirect) {
    this.redirect = redirect;
    return this;
  }

  /**
   * Redirect URL to your application after payment is done
   * @return redirect
   */
  @javax.annotation.Nullable
  public URI getRedirect() {
    return redirect;
  }

  public void setRedirect(URI redirect) {
    this.redirect = redirect;
  }


  public PaymentWriteRequest requestedExecutionDate(LocalDate requestedExecutionDate) {
    this.requestedExecutionDate = requestedExecutionDate;
    return this;
  }

  /**
   * Payment Execution date (for periodic payments)
   * @return requestedExecutionDate
   */
  @javax.annotation.Nullable
  public LocalDate getRequestedExecutionDate() {
    return requestedExecutionDate;
  }

  public void setRequestedExecutionDate(LocalDate requestedExecutionDate) {
    this.requestedExecutionDate = requestedExecutionDate;
  }


  public PaymentWriteRequest submitPayment(Boolean submitPayment) {
    this.submitPayment = submitPayment;
    return this;
  }

  /**
   * Indicates whether payment should be submitted separately
   * @return submitPayment
   */
  @javax.annotation.Nullable
  public Boolean getSubmitPayment() {
    return submitPayment;
  }

  public void setSubmitPayment(Boolean submitPayment) {
    this.submitPayment = submitPayment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentWriteRequest paymentWriteRequest = (PaymentWriteRequest) o;
    return Objects.equals(this.creditorAccount, paymentWriteRequest.creditorAccount) &&
        Objects.equals(this.creditorObject, paymentWriteRequest.creditorObject) &&
        Objects.equals(this.customPaymentId, paymentWriteRequest.customPaymentId) &&
        Objects.equals(this.debtorAccount, paymentWriteRequest.debtorAccount) &&
        Objects.equals(this.description, paymentWriteRequest.description) &&
        Objects.equals(this.institutionId, paymentWriteRequest.institutionId) &&
        Objects.equals(this.instructedAmount, paymentWriteRequest.instructedAmount) &&
        Objects.equals(this.paymentProduct, paymentWriteRequest.paymentProduct) &&
        Objects.equals(this.periodicPayment, paymentWriteRequest.periodicPayment) &&
        Objects.equals(this.redirect, paymentWriteRequest.redirect) &&
        Objects.equals(this.requestedExecutionDate, paymentWriteRequest.requestedExecutionDate) &&
        Objects.equals(this.submitPayment, paymentWriteRequest.submitPayment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditorAccount, creditorObject, customPaymentId, debtorAccount, description, institutionId, instructedAmount, paymentProduct, periodicPayment, redirect, requestedExecutionDate, submitPayment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentWriteRequest {\n");
    sb.append("    creditorAccount: ").append(toIndentedString(creditorAccount)).append("\n");
    sb.append("    creditorObject: ").append(toIndentedString(creditorObject)).append("\n");
    sb.append("    customPaymentId: ").append(toIndentedString(customPaymentId)).append("\n");
    sb.append("    debtorAccount: ").append(toIndentedString(debtorAccount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    instructedAmount: ").append(toIndentedString(instructedAmount)).append("\n");
    sb.append("    paymentProduct: ").append(toIndentedString(paymentProduct)).append("\n");
    sb.append("    periodicPayment: ").append(toIndentedString(periodicPayment)).append("\n");
    sb.append("    redirect: ").append(toIndentedString(redirect)).append("\n");
    sb.append("    requestedExecutionDate: ").append(toIndentedString(requestedExecutionDate)).append("\n");
    sb.append("    submitPayment: ").append(toIndentedString(submitPayment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creditor_account");
    openapiFields.add("creditor_object");
    openapiFields.add("custom_payment_id");
    openapiFields.add("debtor_account");
    openapiFields.add("description");
    openapiFields.add("institution_id");
    openapiFields.add("instructed_amount");
    openapiFields.add("payment_product");
    openapiFields.add("periodic_payment");
    openapiFields.add("redirect");
    openapiFields.add("requested_execution_date");
    openapiFields.add("submit_payment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instructed_amount");
    openapiRequiredFields.add("redirect");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentWriteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentWriteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentWriteRequest is not found in the empty JSON string", PaymentWriteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentWriteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentWriteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentWriteRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creditor_account") != null && !jsonObj.get("creditor_account").isJsonNull()) && !jsonObj.get("creditor_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditor_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditor_account").toString()));
      }
      // validate the optional field `creditor_object`
      if (jsonObj.get("creditor_object") != null && !jsonObj.get("creditor_object").isJsonNull()) {
        CreditorAccountWriteRequest.validateJsonElement(jsonObj.get("creditor_object"));
      }
      if ((jsonObj.get("custom_payment_id") != null && !jsonObj.get("custom_payment_id").isJsonNull()) && !jsonObj.get("custom_payment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_payment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_payment_id").toString()));
      }
      // validate the optional field `debtor_account`
      if (jsonObj.get("debtor_account") != null && !jsonObj.get("debtor_account").isJsonNull()) {
        DebtorAccountWriteRequest.validateJsonElement(jsonObj.get("debtor_account"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("institution_id") != null && !jsonObj.get("institution_id").isJsonNull()) && !jsonObj.get("institution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_id").toString()));
      }
      // validate the required field `instructed_amount`
      InstructedAmountRequest.validateJsonElement(jsonObj.get("instructed_amount"));
      // validate the optional field `payment_product`
      if (jsonObj.get("payment_product") != null && !jsonObj.get("payment_product").isJsonNull()) {
        PaymentProductEnum.validateJsonElement(jsonObj.get("payment_product"));
      }
      // validate the optional field `periodic_payment`
      if (jsonObj.get("periodic_payment") != null && !jsonObj.get("periodic_payment").isJsonNull()) {
        PeriodicPaymentRequest.validateJsonElement(jsonObj.get("periodic_payment"));
      }
      if ((jsonObj.get("redirect") != null && !jsonObj.get("redirect").isJsonNull()) && !jsonObj.get("redirect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentWriteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentWriteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentWriteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentWriteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentWriteRequest>() {
           @Override
           public void write(JsonWriter out, PaymentWriteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentWriteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentWriteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentWriteRequest
   * @throws IOException if the JSON string is invalid with respect to PaymentWriteRequest
   */
  public static PaymentWriteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentWriteRequest.class);
  }

  /**
   * Convert an instance of PaymentWriteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

