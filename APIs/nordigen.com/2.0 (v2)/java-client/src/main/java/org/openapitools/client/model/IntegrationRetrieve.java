/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IntegrationSerializer for Retrieve endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.529199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegrationRetrieve {
  public static final String SERIALIZED_NAME_BIC = "bic";
  @SerializedName(SERIALIZED_NAME_BIC)
  private String bic;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUPPORTED_FEATURES = "supported_features";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_FEATURES)
  private List<Object> supportedFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_PAYMENTS = "supported_payments";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PAYMENTS)
  private Map<String, Object> supportedPayments = new HashMap<>();

  public static final String SERIALIZED_NAME_TRANSACTION_TOTAL_DAYS = "transaction_total_days";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TOTAL_DAYS)
  private String transactionTotalDays = "90";

  public IntegrationRetrieve() {
  }

  public IntegrationRetrieve bic(String bic) {
    this.bic = bic;
    return this;
  }

  /**
   * Get bic
   * @return bic
   */
  @javax.annotation.Nullable
  public String getBic() {
    return bic;
  }

  public void setBic(String bic) {
    this.bic = bic;
  }


  public IntegrationRetrieve countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public IntegrationRetrieve addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * Get countries
   * @return countries
   */
  @javax.annotation.Nonnull
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }


  public IntegrationRetrieve id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public IntegrationRetrieve logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nonnull
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public IntegrationRetrieve name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public IntegrationRetrieve supportedFeatures(List<Object> supportedFeatures) {
    this.supportedFeatures = supportedFeatures;
    return this;
  }

  public IntegrationRetrieve addSupportedFeaturesItem(Object supportedFeaturesItem) {
    if (this.supportedFeatures == null) {
      this.supportedFeatures = new ArrayList<>();
    }
    this.supportedFeatures.add(supportedFeaturesItem);
    return this;
  }

  /**
   * Get supportedFeatures
   * @return supportedFeatures
   */
  @javax.annotation.Nonnull
  public List<Object> getSupportedFeatures() {
    return supportedFeatures;
  }

  public void setSupportedFeatures(List<Object> supportedFeatures) {
    this.supportedFeatures = supportedFeatures;
  }


  public IntegrationRetrieve supportedPayments(Map<String, Object> supportedPayments) {
    this.supportedPayments = supportedPayments;
    return this;
  }

  public IntegrationRetrieve putSupportedPaymentsItem(String key, Object supportedPaymentsItem) {
    if (this.supportedPayments == null) {
      this.supportedPayments = new HashMap<>();
    }
    this.supportedPayments.put(key, supportedPaymentsItem);
    return this;
  }

  /**
   * Get supportedPayments
   * @return supportedPayments
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getSupportedPayments() {
    return supportedPayments;
  }

  public void setSupportedPayments(Map<String, Object> supportedPayments) {
    this.supportedPayments = supportedPayments;
  }


  public IntegrationRetrieve transactionTotalDays(String transactionTotalDays) {
    this.transactionTotalDays = transactionTotalDays;
    return this;
  }

  /**
   * Get transactionTotalDays
   * @return transactionTotalDays
   */
  @javax.annotation.Nullable
  public String getTransactionTotalDays() {
    return transactionTotalDays;
  }

  public void setTransactionTotalDays(String transactionTotalDays) {
    this.transactionTotalDays = transactionTotalDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationRetrieve integrationRetrieve = (IntegrationRetrieve) o;
    return Objects.equals(this.bic, integrationRetrieve.bic) &&
        Objects.equals(this.countries, integrationRetrieve.countries) &&
        Objects.equals(this.id, integrationRetrieve.id) &&
        Objects.equals(this.logo, integrationRetrieve.logo) &&
        Objects.equals(this.name, integrationRetrieve.name) &&
        Objects.equals(this.supportedFeatures, integrationRetrieve.supportedFeatures) &&
        Objects.equals(this.supportedPayments, integrationRetrieve.supportedPayments) &&
        Objects.equals(this.transactionTotalDays, integrationRetrieve.transactionTotalDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bic, countries, id, logo, name, supportedFeatures, supportedPayments, transactionTotalDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationRetrieve {\n");
    sb.append("    bic: ").append(toIndentedString(bic)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    supportedFeatures: ").append(toIndentedString(supportedFeatures)).append("\n");
    sb.append("    supportedPayments: ").append(toIndentedString(supportedPayments)).append("\n");
    sb.append("    transactionTotalDays: ").append(toIndentedString(transactionTotalDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bic");
    openapiFields.add("countries");
    openapiFields.add("id");
    openapiFields.add("logo");
    openapiFields.add("name");
    openapiFields.add("supported_features");
    openapiFields.add("supported_payments");
    openapiFields.add("transaction_total_days");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("countries");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("logo");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("supported_features");
    openapiRequiredFields.add("supported_payments");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationRetrieve
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationRetrieve.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationRetrieve is not found in the empty JSON string", IntegrationRetrieve.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegrationRetrieve.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationRetrieve` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegrationRetrieve.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bic") != null && !jsonObj.get("bic").isJsonNull()) && !jsonObj.get("bic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bic").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("countries") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("supported_features") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supported_features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_features` to be an array in the JSON string but got `%s`", jsonObj.get("supported_features").toString()));
      }
      if ((jsonObj.get("transaction_total_days") != null && !jsonObj.get("transaction_total_days").isJsonNull()) && !jsonObj.get("transaction_total_days").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_total_days` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_total_days").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationRetrieve.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationRetrieve' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationRetrieve> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationRetrieve.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationRetrieve>() {
           @Override
           public void write(JsonWriter out, IntegrationRetrieve value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationRetrieve read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationRetrieve given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationRetrieve
   * @throws IOException if the JSON string is invalid with respect to IntegrationRetrieve
   */
  public static IntegrationRetrieve fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationRetrieve.class);
  }

  /**
   * Convert an instance of IntegrationRetrieve to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

