/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EndUserAgreement;
import org.openapitools.client.model.EndUserAgreementRequest;
import org.openapitools.client.model.EnduserAcceptanceDetailsRequest;
import org.openapitools.client.model.PaginatedEndUserAgreementList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AgreementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgreementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AgreementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptEUA
     * @param id A UUID string identifying this end user agreement. (required)
     * @param enduserAcceptanceDetailsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accept end user agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> EUA accepted </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptEUACall(UUID id, EnduserAcceptanceDetailsRequest enduserAcceptanceDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enduserAcceptanceDetailsRequest;

        // create path and map variables
        String localVarPath = "/api/v2/agreements/enduser/{id}/accept/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptEUAValidateBeforeCall(UUID id, EnduserAcceptanceDetailsRequest enduserAcceptanceDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling acceptEUA(Async)");
        }

        // verify the required parameter 'enduserAcceptanceDetailsRequest' is set
        if (enduserAcceptanceDetailsRequest == null) {
            throw new ApiException("Missing the required parameter 'enduserAcceptanceDetailsRequest' when calling acceptEUA(Async)");
        }

        return acceptEUACall(id, enduserAcceptanceDetailsRequest, _callback);

    }

    /**
     * 
     * Accept an end-user agreement via the API
     * @param id A UUID string identifying this end user agreement. (required)
     * @param enduserAcceptanceDetailsRequest  (required)
     * @return EndUserAgreement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accept end user agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> EUA accepted </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public EndUserAgreement acceptEUA(UUID id, EnduserAcceptanceDetailsRequest enduserAcceptanceDetailsRequest) throws ApiException {
        ApiResponse<EndUserAgreement> localVarResp = acceptEUAWithHttpInfo(id, enduserAcceptanceDetailsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Accept an end-user agreement via the API
     * @param id A UUID string identifying this end user agreement. (required)
     * @param enduserAcceptanceDetailsRequest  (required)
     * @return ApiResponse&lt;EndUserAgreement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accept end user agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> EUA accepted </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndUserAgreement> acceptEUAWithHttpInfo(UUID id, EnduserAcceptanceDetailsRequest enduserAcceptanceDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptEUAValidateBeforeCall(id, enduserAcceptanceDetailsRequest, null);
        Type localVarReturnType = new TypeToken<EndUserAgreement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accept an end-user agreement via the API
     * @param id A UUID string identifying this end user agreement. (required)
     * @param enduserAcceptanceDetailsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Accept end user agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> EUA accepted </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptEUAAsync(UUID id, EnduserAcceptanceDetailsRequest enduserAcceptanceDetailsRequest, final ApiCallback<EndUserAgreement> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptEUAValidateBeforeCall(id, enduserAcceptanceDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<EndUserAgreement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEUAV2
     * @param endUserAgreementRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create enduser agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Agreement field errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEUAV2Call(EndUserAgreementRequest endUserAgreementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endUserAgreementRequest;

        // create path and map variables
        String localVarPath = "/api/v2/agreements/enduser/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEUAV2ValidateBeforeCall(EndUserAgreementRequest endUserAgreementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endUserAgreementRequest' is set
        if (endUserAgreementRequest == null) {
            throw new ApiException("Missing the required parameter 'endUserAgreementRequest' when calling createEUAV2(Async)");
        }

        return createEUAV2Call(endUserAgreementRequest, _callback);

    }

    /**
     * 
     * API endpoints related to end-user agreements.
     * @param endUserAgreementRequest  (required)
     * @return EndUserAgreement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create enduser agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Agreement field errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public EndUserAgreement createEUAV2(EndUserAgreementRequest endUserAgreementRequest) throws ApiException {
        ApiResponse<EndUserAgreement> localVarResp = createEUAV2WithHttpInfo(endUserAgreementRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * API endpoints related to end-user agreements.
     * @param endUserAgreementRequest  (required)
     * @return ApiResponse&lt;EndUserAgreement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create enduser agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Agreement field errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndUserAgreement> createEUAV2WithHttpInfo(EndUserAgreementRequest endUserAgreementRequest) throws ApiException {
        okhttp3.Call localVarCall = createEUAV2ValidateBeforeCall(endUserAgreementRequest, null);
        Type localVarReturnType = new TypeToken<EndUserAgreement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API endpoints related to end-user agreements.
     * @param endUserAgreementRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create enduser agreement </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Agreement field errors </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEUAV2Async(EndUserAgreementRequest endUserAgreementRequest, final ApiCallback<EndUserAgreement> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEUAV2ValidateBeforeCall(endUserAgreementRequest, _callback);
        Type localVarReturnType = new TypeToken<EndUserAgreement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEUAByIdV2
     * @param id A UUID string identifying this end user agreement. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEUAByIdV2Call(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agreements/enduser/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEUAByIdV2ValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEUAByIdV2(Async)");
        }

        return deleteEUAByIdV2Call(id, _callback);

    }

    /**
     * 
     * Delete an end user agreement
     * @param id A UUID string identifying this end user agreement. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEUAByIdV2(UUID id) throws ApiException {
        deleteEUAByIdV2WithHttpInfo(id);
    }

    /**
     * 
     * Delete an end user agreement
     * @param id A UUID string identifying this end user agreement. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEUAByIdV2WithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteEUAByIdV2ValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an end user agreement
     * @param id A UUID string identifying this end user agreement. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEUAByIdV2Async(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEUAByIdV2ValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveAllEUAsForAnEndUserV2
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all end user agreements </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAllEUAsForAnEndUserV2Call(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agreements/enduser/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveAllEUAsForAnEndUserV2ValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return retrieveAllEUAsForAnEndUserV2Call(limit, offset, _callback);

    }

    /**
     * 
     * API endpoints related to end-user agreements.
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @return PaginatedEndUserAgreementList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all end user agreements </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedEndUserAgreementList retrieveAllEUAsForAnEndUserV2(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedEndUserAgreementList> localVarResp = retrieveAllEUAsForAnEndUserV2WithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * API endpoints related to end-user agreements.
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @return ApiResponse&lt;PaginatedEndUserAgreementList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all end user agreements </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedEndUserAgreementList> retrieveAllEUAsForAnEndUserV2WithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = retrieveAllEUAsForAnEndUserV2ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedEndUserAgreementList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API endpoints related to end-user agreements.
     * @param limit Number of results to return per page. (optional, default to 100)
     * @param offset The initial index from which to return the results. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all end user agreements </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveAllEUAsForAnEndUserV2Async(Integer limit, Integer offset, final ApiCallback<PaginatedEndUserAgreementList> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveAllEUAsForAnEndUserV2ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedEndUserAgreementList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveEUAByIdV2
     * @param id A UUID string identifying this end user agreement. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve end user agreement by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEUAByIdV2Call(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/agreements/enduser/{id}/"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jwtAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveEUAByIdV2ValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrieveEUAByIdV2(Async)");
        }

        return retrieveEUAByIdV2Call(id, _callback);

    }

    /**
     * 
     * Retrieve end user agreement by ID
     * @param id A UUID string identifying this end user agreement. (required)
     * @return EndUserAgreement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve end user agreement by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public EndUserAgreement retrieveEUAByIdV2(UUID id) throws ApiException {
        ApiResponse<EndUserAgreement> localVarResp = retrieveEUAByIdV2WithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve end user agreement by ID
     * @param id A UUID string identifying this end user agreement. (required)
     * @return ApiResponse&lt;EndUserAgreement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve end user agreement by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndUserAgreement> retrieveEUAByIdV2WithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = retrieveEUAByIdV2ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EndUserAgreement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve end user agreement by ID
     * @param id A UUID string identifying this end user agreement. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve end user agreement by ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid token </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> IP Access denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Nordigen rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveEUAByIdV2Async(UUID id, final ApiCallback<EndUserAgreement> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveEUAByIdV2ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EndUserAgreement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
