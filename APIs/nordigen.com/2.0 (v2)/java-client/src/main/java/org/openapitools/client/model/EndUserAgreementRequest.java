/*
 * Nordigen Account Information Services API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an end-user agreement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:06.529199-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndUserAgreementRequest {
  public static final String SERIALIZED_NAME_ACCESS_SCOPE = "access_scope";
  @SerializedName(SERIALIZED_NAME_ACCESS_SCOPE)
  private List<List<Object>> accessScope = new ArrayList<>(Arrays.asList(balances, details, transactions));

  public static final String SERIALIZED_NAME_ACCESS_VALID_FOR_DAYS = "access_valid_for_days";
  @SerializedName(SERIALIZED_NAME_ACCESS_VALID_FOR_DAYS)
  private Integer accessValidForDays = 90;

  public static final String SERIALIZED_NAME_INSTITUTION_ID = "institution_id";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_ID)
  private String institutionId;

  public static final String SERIALIZED_NAME_MAX_HISTORICAL_DAYS = "max_historical_days";
  @SerializedName(SERIALIZED_NAME_MAX_HISTORICAL_DAYS)
  private Integer maxHistoricalDays = 90;

  public EndUserAgreementRequest() {
  }

  public EndUserAgreementRequest accessScope(List<List<Object>> accessScope) {
    this.accessScope = accessScope;
    return this;
  }

  public EndUserAgreementRequest addAccessScopeItem(List<Object> accessScopeItem) {
    if (this.accessScope == null) {
      this.accessScope = new ArrayList<>(Arrays.asList(balances, details, transactions));
    }
    this.accessScope.add(accessScopeItem);
    return this;
  }

  /**
   * Array containing one or several values of [&#39;balances&#39;, &#39;details&#39;, &#39;transactions&#39;]
   * @return accessScope
   */
  @javax.annotation.Nullable
  public List<List<Object>> getAccessScope() {
    return accessScope;
  }

  public void setAccessScope(List<List<Object>> accessScope) {
    this.accessScope = accessScope;
  }


  public EndUserAgreementRequest accessValidForDays(Integer accessValidForDays) {
    this.accessValidForDays = accessValidForDays;
    return this;
  }

  /**
   * Number of days from acceptance that the access can be used.
   * minimum: 1
   * maximum: 90
   * @return accessValidForDays
   */
  @javax.annotation.Nullable
  public Integer getAccessValidForDays() {
    return accessValidForDays;
  }

  public void setAccessValidForDays(Integer accessValidForDays) {
    this.accessValidForDays = accessValidForDays;
  }


  public EndUserAgreementRequest institutionId(String institutionId) {
    this.institutionId = institutionId;
    return this;
  }

  /**
   * an Institution ID for this EUA
   * @return institutionId
   */
  @javax.annotation.Nonnull
  public String getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(String institutionId) {
    this.institutionId = institutionId;
  }


  public EndUserAgreementRequest maxHistoricalDays(Integer maxHistoricalDays) {
    this.maxHistoricalDays = maxHistoricalDays;
    return this;
  }

  /**
   * Maximum number of days of transaction data to retrieve.
   * minimum: 1
   * maximum: 730
   * @return maxHistoricalDays
   */
  @javax.annotation.Nullable
  public Integer getMaxHistoricalDays() {
    return maxHistoricalDays;
  }

  public void setMaxHistoricalDays(Integer maxHistoricalDays) {
    this.maxHistoricalDays = maxHistoricalDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndUserAgreementRequest endUserAgreementRequest = (EndUserAgreementRequest) o;
    return Objects.equals(this.accessScope, endUserAgreementRequest.accessScope) &&
        Objects.equals(this.accessValidForDays, endUserAgreementRequest.accessValidForDays) &&
        Objects.equals(this.institutionId, endUserAgreementRequest.institutionId) &&
        Objects.equals(this.maxHistoricalDays, endUserAgreementRequest.maxHistoricalDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessScope, accessValidForDays, institutionId, maxHistoricalDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndUserAgreementRequest {\n");
    sb.append("    accessScope: ").append(toIndentedString(accessScope)).append("\n");
    sb.append("    accessValidForDays: ").append(toIndentedString(accessValidForDays)).append("\n");
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    maxHistoricalDays: ").append(toIndentedString(maxHistoricalDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_scope");
    openapiFields.add("access_valid_for_days");
    openapiFields.add("institution_id");
    openapiFields.add("max_historical_days");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("institution_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndUserAgreementRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndUserAgreementRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndUserAgreementRequest is not found in the empty JSON string", EndUserAgreementRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndUserAgreementRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndUserAgreementRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EndUserAgreementRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("access_scope") != null && !jsonObj.get("access_scope").isJsonNull() && !jsonObj.get("access_scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_scope` to be an array in the JSON string but got `%s`", jsonObj.get("access_scope").toString()));
      }
      if (!jsonObj.get("institution_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndUserAgreementRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndUserAgreementRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndUserAgreementRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndUserAgreementRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EndUserAgreementRequest>() {
           @Override
           public void write(JsonWriter out, EndUserAgreementRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndUserAgreementRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndUserAgreementRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndUserAgreementRequest
   * @throws IOException if the JSON string is invalid with respect to EndUserAgreementRequest
   */
  public static EndUserAgreementRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndUserAgreementRequest.class);
  }

  /**
   * Convert an instance of EndUserAgreementRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

