/*
 * Go-UPC Barcode-Lookup API
 * Find information on products from around the globe. The API supports UPC, EAN, and ISBN barcode numbers, and info returned includes product name, description, brand, image URL, and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * all matching product details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:43:14.147316-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetProductInfo200ResponseProduct {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private Integer ean;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private URI imageUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SPECS = "specs";
  @SerializedName(SERIALIZED_NAME_SPECS)
  private List<List<String>> specs = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPC = "upc";
  @SerializedName(SERIALIZED_NAME_UPC)
  private Integer upc;

  public GetProductInfo200ResponseProduct() {
  }

  public GetProductInfo200ResponseProduct brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * The brand of the product (if available).
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public GetProductInfo200ResponseProduct category(String category) {
    this.category = category;
    return this;
  }

  /**
   * The category of the product (if available).
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public GetProductInfo200ResponseProduct description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the product (if available).
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetProductInfo200ResponseProduct ean(Integer ean) {
    this.ean = ean;
    return this;
  }

  /**
   * The EAN code of the product.
   * @return ean
   */
  @javax.annotation.Nullable
  public Integer getEan() {
    return ean;
  }

  public void setEan(Integer ean) {
    this.ean = ean;
  }


  public GetProductInfo200ResponseProduct imageUrl(URI imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The URL for the product image.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public URI getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(URI imageUrl) {
    this.imageUrl = imageUrl;
  }


  public GetProductInfo200ResponseProduct name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the product.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetProductInfo200ResponseProduct region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The region of the product.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public GetProductInfo200ResponseProduct specs(List<List<String>> specs) {
    this.specs = specs;
    return this;
  }

  public GetProductInfo200ResponseProduct addSpecsItem(List<String> specsItem) {
    if (this.specs == null) {
      this.specs = new ArrayList<>();
    }
    this.specs.add(specsItem);
    return this;
  }

  /**
   * A list of additional item specifications (if available).
   * @return specs
   */
  @javax.annotation.Nullable
  public List<List<String>> getSpecs() {
    return specs;
  }

  public void setSpecs(List<List<String>> specs) {
    this.specs = specs;
  }


  public GetProductInfo200ResponseProduct upc(Integer upc) {
    this.upc = upc;
    return this;
  }

  /**
   * The UPC code of the product.
   * @return upc
   */
  @javax.annotation.Nullable
  public Integer getUpc() {
    return upc;
  }

  public void setUpc(Integer upc) {
    this.upc = upc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetProductInfo200ResponseProduct getProductInfo200ResponseProduct = (GetProductInfo200ResponseProduct) o;
    return Objects.equals(this.brand, getProductInfo200ResponseProduct.brand) &&
        Objects.equals(this.category, getProductInfo200ResponseProduct.category) &&
        Objects.equals(this.description, getProductInfo200ResponseProduct.description) &&
        Objects.equals(this.ean, getProductInfo200ResponseProduct.ean) &&
        Objects.equals(this.imageUrl, getProductInfo200ResponseProduct.imageUrl) &&
        Objects.equals(this.name, getProductInfo200ResponseProduct.name) &&
        Objects.equals(this.region, getProductInfo200ResponseProduct.region) &&
        Objects.equals(this.specs, getProductInfo200ResponseProduct.specs) &&
        Objects.equals(this.upc, getProductInfo200ResponseProduct.upc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, category, description, ean, imageUrl, name, region, specs, upc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetProductInfo200ResponseProduct {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    specs: ").append(toIndentedString(specs)).append("\n");
    sb.append("    upc: ").append(toIndentedString(upc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("ean");
    openapiFields.add("imageUrl");
    openapiFields.add("name");
    openapiFields.add("region");
    openapiFields.add("specs");
    openapiFields.add("upc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetProductInfo200ResponseProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetProductInfo200ResponseProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetProductInfo200ResponseProduct is not found in the empty JSON string", GetProductInfo200ResponseProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetProductInfo200ResponseProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetProductInfo200ResponseProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("specs") != null && !jsonObj.get("specs").isJsonNull() && !jsonObj.get("specs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `specs` to be an array in the JSON string but got `%s`", jsonObj.get("specs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetProductInfo200ResponseProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetProductInfo200ResponseProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetProductInfo200ResponseProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetProductInfo200ResponseProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<GetProductInfo200ResponseProduct>() {
           @Override
           public void write(JsonWriter out, GetProductInfo200ResponseProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetProductInfo200ResponseProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetProductInfo200ResponseProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetProductInfo200ResponseProduct
   * @throws IOException if the JSON string is invalid with respect to GetProductInfo200ResponseProduct
   */
  public static GetProductInfo200ResponseProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetProductInfo200ResponseProduct.class);
  }

  /**
   * Convert an instance of GetProductInfo200ResponseProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

