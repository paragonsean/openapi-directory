# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_product_info200_response_product import GetProductInfo200ResponseProduct
from openapi_server import util


class GetProductInfo200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode_url: str=None, code_type: str=None, product: GetProductInfo200ResponseProduct=None):
        """GetProductInfo200Response - a model defined in OpenAPI

        :param barcode_url: The barcode_url of this GetProductInfo200Response.
        :param code_type: The code_type of this GetProductInfo200Response.
        :param product: The product of this GetProductInfo200Response.
        """
        self.openapi_types = {
            'barcode_url': str,
            'code_type': str,
            'product': GetProductInfo200ResponseProduct
        }

        self.attribute_map = {
            'barcode_url': 'barcodeUrl',
            'code_type': 'codeType',
            'product': 'product'
        }

        self._barcode_url = barcode_url
        self._code_type = code_type
        self._product = product

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProductInfo200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getProductInfo_200_response of this GetProductInfo200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode_url(self):
        """Gets the barcode_url of this GetProductInfo200Response.

        The URL to the scannable barcode image.

        :return: The barcode_url of this GetProductInfo200Response.
        :rtype: str
        """
        return self._barcode_url

    @barcode_url.setter
    def barcode_url(self, barcode_url):
        """Sets the barcode_url of this GetProductInfo200Response.

        The URL to the scannable barcode image.

        :param barcode_url: The barcode_url of this GetProductInfo200Response.
        :type barcode_url: str
        """

        self._barcode_url = barcode_url

    @property
    def code_type(self):
        """Gets the code_type of this GetProductInfo200Response.

        The type of product code (UPC/EAN/ISBN).

        :return: The code_type of this GetProductInfo200Response.
        :rtype: str
        """
        return self._code_type

    @code_type.setter
    def code_type(self, code_type):
        """Sets the code_type of this GetProductInfo200Response.

        The type of product code (UPC/EAN/ISBN).

        :param code_type: The code_type of this GetProductInfo200Response.
        :type code_type: str
        """
        allowed_values = ["UPC", "EAN", "ISBN"]  # noqa: E501
        if code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `code_type` ({0}), must be one of {1}"
                .format(code_type, allowed_values)
            )

        self._code_type = code_type

    @property
    def product(self):
        """Gets the product of this GetProductInfo200Response.


        :return: The product of this GetProductInfo200Response.
        :rtype: GetProductInfo200ResponseProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GetProductInfo200Response.


        :param product: The product of this GetProductInfo200Response.
        :type product: GetProductInfo200ResponseProduct
        """

        self._product = product
