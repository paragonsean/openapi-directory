/**
 * Go-UPC Barcode-Lookup API
 * Find information on products from around the globe. The API supports UPC, EAN, and ISBN barcode numbers, and info returned includes product name, description, brand, image URL, and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetProductInfo_200_response_product.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetProductInfo_200_response_product::OAIGetProductInfo_200_response_product(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetProductInfo_200_response_product::OAIGetProductInfo_200_response_product() {
    this->initializeModel();
}

OAIGetProductInfo_200_response_product::~OAIGetProductInfo_200_response_product() {}

void OAIGetProductInfo_200_response_product::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_specs_isSet = false;
    m_specs_isValid = false;

    m_upc_isSet = false;
    m_upc_isValid = false;
}

void OAIGetProductInfo_200_response_product::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetProductInfo_200_response_product::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    if(json["specs"].isArray()){
        auto arr = json["specs"].toArray();
        m_specs_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_specs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_specs_isSet = !jval.isNull() && m_specs_isValid;
                m_specs.push_back(item);
            }
        }
    }

    m_upc_isValid = ::OpenAPI::fromJsonValue(m_upc, json[QString("upc")]);
    m_upc_isSet = !json[QString("upc")].isNull() && m_upc_isValid;
}

QString OAIGetProductInfo_200_response_product::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetProductInfo_200_response_product::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_specs.size() > 0) {
        
        obj.insert(QString("specs"), toJsonValue(m_specs));
    }
    if (m_upc_isSet) {
        obj.insert(QString("upc"), ::OpenAPI::toJsonValue(m_upc));
    }
    return obj;
}

QString OAIGetProductInfo_200_response_product::getBrand() const {
    return m_brand;
}
void OAIGetProductInfo_200_response_product::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIGetProductInfo_200_response_product::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIGetProductInfo_200_response_product::getCategory() const {
    return m_category;
}
void OAIGetProductInfo_200_response_product::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_category_Set() const{
    return m_category_isSet;
}

bool OAIGetProductInfo_200_response_product::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIGetProductInfo_200_response_product::getDescription() const {
    return m_description;
}
void OAIGetProductInfo_200_response_product::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetProductInfo_200_response_product::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGetProductInfo_200_response_product::getEan() const {
    return m_ean;
}
void OAIGetProductInfo_200_response_product::setEan(const qint32 &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIGetProductInfo_200_response_product::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIGetProductInfo_200_response_product::getImageUrl() const {
    return m_image_url;
}
void OAIGetProductInfo_200_response_product::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGetProductInfo_200_response_product::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIGetProductInfo_200_response_product::getName() const {
    return m_name;
}
void OAIGetProductInfo_200_response_product::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetProductInfo_200_response_product::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetProductInfo_200_response_product::getRegion() const {
    return m_region;
}
void OAIGetProductInfo_200_response_product::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_region_Set() const{
    return m_region_isSet;
}

bool OAIGetProductInfo_200_response_product::is_region_Valid() const{
    return m_region_isValid;
}

QList<QList<QString>> OAIGetProductInfo_200_response_product::getSpecs() const {
    return m_specs;
}
void OAIGetProductInfo_200_response_product::setSpecs(const QList<QList<QString>> &specs) {
    m_specs = specs;
    m_specs_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_specs_Set() const{
    return m_specs_isSet;
}

bool OAIGetProductInfo_200_response_product::is_specs_Valid() const{
    return m_specs_isValid;
}

qint32 OAIGetProductInfo_200_response_product::getUpc() const {
    return m_upc;
}
void OAIGetProductInfo_200_response_product::setUpc(const qint32 &upc) {
    m_upc = upc;
    m_upc_isSet = true;
}

bool OAIGetProductInfo_200_response_product::is_upc_Set() const{
    return m_upc_isSet;
}

bool OAIGetProductInfo_200_response_product::is_upc_Valid() const{
    return m_upc_isValid;
}

bool OAIGetProductInfo_200_response_product::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetProductInfo_200_response_product::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
