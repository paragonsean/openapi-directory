/**
 * Go-UPC Barcode-Lookup API
 * Find information on products from around the globe. The API supports UPC, EAN, and ISBN barcode numbers, and info returned includes product name, description, brand, image URL, and more.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetProductInfo_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetProductInfo_200_response::OAIGetProductInfo_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetProductInfo_200_response::OAIGetProductInfo_200_response() {
    this->initializeModel();
}

OAIGetProductInfo_200_response::~OAIGetProductInfo_200_response() {}

void OAIGetProductInfo_200_response::initializeModel() {

    m_barcode_url_isSet = false;
    m_barcode_url_isValid = false;

    m_code_type_isSet = false;
    m_code_type_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;
}

void OAIGetProductInfo_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetProductInfo_200_response::fromJsonObject(QJsonObject json) {

    m_barcode_url_isValid = ::OpenAPI::fromJsonValue(m_barcode_url, json[QString("barcodeUrl")]);
    m_barcode_url_isSet = !json[QString("barcodeUrl")].isNull() && m_barcode_url_isValid;

    m_code_type_isValid = ::OpenAPI::fromJsonValue(m_code_type, json[QString("codeType")]);
    m_code_type_isSet = !json[QString("codeType")].isNull() && m_code_type_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;
}

QString OAIGetProductInfo_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetProductInfo_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_barcode_url_isSet) {
        obj.insert(QString("barcodeUrl"), ::OpenAPI::toJsonValue(m_barcode_url));
    }
    if (m_code_type_isSet) {
        obj.insert(QString("codeType"), ::OpenAPI::toJsonValue(m_code_type));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    return obj;
}

QString OAIGetProductInfo_200_response::getBarcodeUrl() const {
    return m_barcode_url;
}
void OAIGetProductInfo_200_response::setBarcodeUrl(const QString &barcode_url) {
    m_barcode_url = barcode_url;
    m_barcode_url_isSet = true;
}

bool OAIGetProductInfo_200_response::is_barcode_url_Set() const{
    return m_barcode_url_isSet;
}

bool OAIGetProductInfo_200_response::is_barcode_url_Valid() const{
    return m_barcode_url_isValid;
}

QString OAIGetProductInfo_200_response::getCodeType() const {
    return m_code_type;
}
void OAIGetProductInfo_200_response::setCodeType(const QString &code_type) {
    m_code_type = code_type;
    m_code_type_isSet = true;
}

bool OAIGetProductInfo_200_response::is_code_type_Set() const{
    return m_code_type_isSet;
}

bool OAIGetProductInfo_200_response::is_code_type_Valid() const{
    return m_code_type_isValid;
}

OAIGetProductInfo_200_response_product OAIGetProductInfo_200_response::getProduct() const {
    return m_product;
}
void OAIGetProductInfo_200_response::setProduct(const OAIGetProductInfo_200_response_product &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIGetProductInfo_200_response::is_product_Set() const{
    return m_product_isSet;
}

bool OAIGetProductInfo_200_response::is_product_Valid() const{
    return m_product_isValid;
}

bool OAIGetProductInfo_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_barcode_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetProductInfo_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
