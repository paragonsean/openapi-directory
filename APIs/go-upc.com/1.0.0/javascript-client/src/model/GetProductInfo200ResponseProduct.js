/**
 * Go-UPC Barcode-Lookup API
 * Find information on products from around the globe. The API supports UPC, EAN, and ISBN barcode numbers, and info returned includes product name, description, brand, image URL, and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetProductInfo200ResponseProduct model module.
 * @module model/GetProductInfo200ResponseProduct
 * @version 1.0.0
 */
class GetProductInfo200ResponseProduct {
    /**
     * Constructs a new <code>GetProductInfo200ResponseProduct</code>.
     * all matching product details.
     * @alias module:model/GetProductInfo200ResponseProduct
     */
    constructor() { 
        
        GetProductInfo200ResponseProduct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetProductInfo200ResponseProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetProductInfo200ResponseProduct} obj Optional instance to populate.
     * @return {module:model/GetProductInfo200ResponseProduct} The populated <code>GetProductInfo200ResponseProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetProductInfo200ResponseProduct();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ean')) {
                obj['ean'] = ApiClient.convertToType(data['ean'], 'Number');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('specs')) {
                obj['specs'] = ApiClient.convertToType(data['specs'], [['String']]);
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetProductInfo200ResponseProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetProductInfo200ResponseProduct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['specs'])) {
            throw new Error("Expected the field `specs` to be an array in the JSON data but got " + data['specs']);
        }

        return true;
    }


}



/**
 * The brand of the product (if available).
 * @member {String} brand
 */
GetProductInfo200ResponseProduct.prototype['brand'] = undefined;

/**
 * The category of the product (if available).
 * @member {String} category
 */
GetProductInfo200ResponseProduct.prototype['category'] = undefined;

/**
 * A description of the product (if available).
 * @member {String} description
 */
GetProductInfo200ResponseProduct.prototype['description'] = undefined;

/**
 * The EAN code of the product.
 * @member {Number} ean
 */
GetProductInfo200ResponseProduct.prototype['ean'] = undefined;

/**
 * The URL for the product image.
 * @member {String} imageUrl
 */
GetProductInfo200ResponseProduct.prototype['imageUrl'] = undefined;

/**
 * The name of the product.
 * @member {String} name
 */
GetProductInfo200ResponseProduct.prototype['name'] = undefined;

/**
 * The region of the product.
 * @member {String} region
 */
GetProductInfo200ResponseProduct.prototype['region'] = undefined;

/**
 * A list of additional item specifications (if available).
 * @member {Array.<Array.<String>>} specs
 */
GetProductInfo200ResponseProduct.prototype['specs'] = undefined;

/**
 * The UPC code of the product.
 * @member {Number} upc
 */
GetProductInfo200ResponseProduct.prototype['upc'] = undefined;






export default GetProductInfo200ResponseProduct;

