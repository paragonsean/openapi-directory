/**
 * Go-UPC Barcode-Lookup API
 * Find information on products from around the globe. The API supports UPC, EAN, and ISBN barcode numbers, and info returned includes product name, description, brand, image URL, and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GetProductInfo200ResponseProduct from './GetProductInfo200ResponseProduct';

/**
 * The GetProductInfo200Response model module.
 * @module model/GetProductInfo200Response
 * @version 1.0.0
 */
class GetProductInfo200Response {
    /**
     * Constructs a new <code>GetProductInfo200Response</code>.
     * @alias module:model/GetProductInfo200Response
     */
    constructor() { 
        
        GetProductInfo200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetProductInfo200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetProductInfo200Response} obj Optional instance to populate.
     * @return {module:model/GetProductInfo200Response} The populated <code>GetProductInfo200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetProductInfo200Response();

            if (data.hasOwnProperty('barcodeUrl')) {
                obj['barcodeUrl'] = ApiClient.convertToType(data['barcodeUrl'], 'String');
            }
            if (data.hasOwnProperty('codeType')) {
                obj['codeType'] = ApiClient.convertToType(data['codeType'], 'String');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = GetProductInfo200ResponseProduct.constructFromObject(data['product']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetProductInfo200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetProductInfo200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['barcodeUrl'] && !(typeof data['barcodeUrl'] === 'string' || data['barcodeUrl'] instanceof String)) {
            throw new Error("Expected the field `barcodeUrl` to be a primitive type in the JSON string but got " + data['barcodeUrl']);
        }
        // ensure the json data is a string
        if (data['codeType'] && !(typeof data['codeType'] === 'string' || data['codeType'] instanceof String)) {
            throw new Error("Expected the field `codeType` to be a primitive type in the JSON string but got " + data['codeType']);
        }
        // validate the optional field `product`
        if (data['product']) { // data not null
          GetProductInfo200ResponseProduct.validateJSON(data['product']);
        }

        return true;
    }


}



/**
 * The URL to the scannable barcode image.
 * @member {String} barcodeUrl
 */
GetProductInfo200Response.prototype['barcodeUrl'] = undefined;

/**
 * The type of product code (UPC/EAN/ISBN).
 * @member {module:model/GetProductInfo200Response.CodeTypeEnum} codeType
 */
GetProductInfo200Response.prototype['codeType'] = undefined;

/**
 * @member {module:model/GetProductInfo200ResponseProduct} product
 */
GetProductInfo200Response.prototype['product'] = undefined;





/**
 * Allowed values for the <code>codeType</code> property.
 * @enum {String}
 * @readonly
 */
GetProductInfo200Response['CodeTypeEnum'] = {

    /**
     * value: "UPC"
     * @const
     */
    "UPC": "UPC",

    /**
     * value: "EAN"
     * @const
     */
    "EAN": "EAN",

    /**
     * value: "ISBN"
     * @const
     */
    "ISBN": "ISBN"
};



export default GetProductInfo200Response;

