/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoragePayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoragePayload::OAIStoragePayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoragePayload::OAIStoragePayload() {
    this->initializeModel();
}

OAIStoragePayload::~OAIStoragePayload() {}

void OAIStoragePayload::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_extract_time_isSet = false;
    m_extract_time_isValid = false;

    m_ignore_merchant_name_isSet = false;
    m_ignore_merchant_name_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_md5_isSet = false;
    m_md5_isValid = false;

    m_near_isSet = false;
    m_near_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_refresh_isSet = false;
    m_refresh_isValid = false;

    m_sub_account_id_isSet = false;
    m_sub_account_id_isValid = false;
}

void OAIStoragePayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoragePayload::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_extract_time_isValid = ::OpenAPI::fromJsonValue(m_extract_time, json[QString("extractTime")]);
    m_extract_time_isSet = !json[QString("extractTime")].isNull() && m_extract_time_isValid;

    m_ignore_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_ignore_merchant_name, json[QString("ignoreMerchantName")]);
    m_ignore_merchant_name_isSet = !json[QString("ignoreMerchantName")].isNull() && m_ignore_merchant_name_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_md5_isValid = ::OpenAPI::fromJsonValue(m_md5, json[QString("md5")]);
    m_md5_isSet = !json[QString("md5")].isNull() && m_md5_isValid;

    m_near_isValid = ::OpenAPI::fromJsonValue(m_near, json[QString("near")]);
    m_near_isSet = !json[QString("near")].isNull() && m_near_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_refresh_isValid = ::OpenAPI::fromJsonValue(m_refresh, json[QString("refresh")]);
    m_refresh_isSet = !json[QString("refresh")].isNull() && m_refresh_isValid;

    m_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_sub_account_id, json[QString("subAccountId")]);
    m_sub_account_id_isSet = !json[QString("subAccountId")].isNull() && m_sub_account_id_isValid;
}

QString OAIStoragePayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoragePayload::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_extract_time_isSet) {
        obj.insert(QString("extractTime"), ::OpenAPI::toJsonValue(m_extract_time));
    }
    if (m_ignore_merchant_name_isSet) {
        obj.insert(QString("ignoreMerchantName"), ::OpenAPI::toJsonValue(m_ignore_merchant_name));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_md5_isSet) {
        obj.insert(QString("md5"), ::OpenAPI::toJsonValue(m_md5));
    }
    if (m_near_isSet) {
        obj.insert(QString("near"), ::OpenAPI::toJsonValue(m_near));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_refresh_isSet) {
        obj.insert(QString("refresh"), ::OpenAPI::toJsonValue(m_refresh));
    }
    if (m_sub_account_id_isSet) {
        obj.insert(QString("subAccountId"), ::OpenAPI::toJsonValue(m_sub_account_id));
    }
    return obj;
}

QString OAIStoragePayload::getContentType() const {
    return m_content_type;
}
void OAIStoragePayload::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIStoragePayload::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIStoragePayload::is_content_type_Valid() const{
    return m_content_type_isValid;
}

bool OAIStoragePayload::isExtractTime() const {
    return m_extract_time;
}
void OAIStoragePayload::setExtractTime(const bool &extract_time) {
    m_extract_time = extract_time;
    m_extract_time_isSet = true;
}

bool OAIStoragePayload::is_extract_time_Set() const{
    return m_extract_time_isSet;
}

bool OAIStoragePayload::is_extract_time_Valid() const{
    return m_extract_time_isValid;
}

QString OAIStoragePayload::getIgnoreMerchantName() const {
    return m_ignore_merchant_name;
}
void OAIStoragePayload::setIgnoreMerchantName(const QString &ignore_merchant_name) {
    m_ignore_merchant_name = ignore_merchant_name;
    m_ignore_merchant_name_isSet = true;
}

bool OAIStoragePayload::is_ignore_merchant_name_Set() const{
    return m_ignore_merchant_name_isSet;
}

bool OAIStoragePayload::is_ignore_merchant_name_Valid() const{
    return m_ignore_merchant_name_isValid;
}

QString OAIStoragePayload::getIpAddress() const {
    return m_ip_address;
}
void OAIStoragePayload::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIStoragePayload::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIStoragePayload::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIStoragePayload::getLanguage() const {
    return m_language;
}
void OAIStoragePayload::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIStoragePayload::is_language_Set() const{
    return m_language_isSet;
}

bool OAIStoragePayload::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIStoragePayload::getMd5() const {
    return m_md5;
}
void OAIStoragePayload::setMd5(const QString &md5) {
    m_md5 = md5;
    m_md5_isSet = true;
}

bool OAIStoragePayload::is_md5_Set() const{
    return m_md5_isSet;
}

bool OAIStoragePayload::is_md5_Valid() const{
    return m_md5_isValid;
}

QString OAIStoragePayload::getNear() const {
    return m_near;
}
void OAIStoragePayload::setNear(const QString &near) {
    m_near = near;
    m_near_isSet = true;
}

bool OAIStoragePayload::is_near_Set() const{
    return m_near_isSet;
}

bool OAIStoragePayload::is_near_Valid() const{
    return m_near_isValid;
}

QString OAIStoragePayload::getReferenceId() const {
    return m_reference_id;
}
void OAIStoragePayload::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIStoragePayload::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIStoragePayload::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

bool OAIStoragePayload::isRefresh() const {
    return m_refresh;
}
void OAIStoragePayload::setRefresh(const bool &refresh) {
    m_refresh = refresh;
    m_refresh_isSet = true;
}

bool OAIStoragePayload::is_refresh_Set() const{
    return m_refresh_isSet;
}

bool OAIStoragePayload::is_refresh_Valid() const{
    return m_refresh_isValid;
}

QString OAIStoragePayload::getSubAccountId() const {
    return m_sub_account_id;
}
void OAIStoragePayload::setSubAccountId(const QString &sub_account_id) {
    m_sub_account_id = sub_account_id;
    m_sub_account_id_isSet = true;
}

bool OAIStoragePayload::is_sub_account_id_Set() const{
    return m_sub_account_id_isSet;
}

bool OAIStoragePayload::is_sub_account_id_Valid() const{
    return m_sub_account_id_isValid;
}

bool OAIStoragePayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_near_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoragePayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_type_isValid && m_md5_isValid && true;
}

} // namespace OpenAPI
