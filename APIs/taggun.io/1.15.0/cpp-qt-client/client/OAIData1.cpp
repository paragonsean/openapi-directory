/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIData1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIData1::OAIData1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIData1::OAIData1() {
    this->initializeModel();
}

OAIData1::~OAIData1() {}

void OAIData1::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIData1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIData1::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("totalPrice")]);
    m_total_price_isSet = !json[QString("totalPrice")].isNull() && m_total_price_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;
}

QString OAIData1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIData1::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_total_price.isSet()) {
        obj.insert(QString("totalPrice"), ::OpenAPI::toJsonValue(m_total_price));
    }
    if (m_unit_price.isSet()) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

OAIName OAIData1::getName() const {
    return m_name;
}
void OAIData1::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIData1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIData1::is_name_Valid() const{
    return m_name_isValid;
}

OAIQuantity1 OAIData1::getQuantity() const {
    return m_quantity;
}
void OAIData1::setQuantity(const OAIQuantity1 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIData1::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIData1::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAITotalPrice OAIData1::getTotalPrice() const {
    return m_total_price;
}
void OAIData1::setTotalPrice(const OAITotalPrice &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAIData1::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAIData1::is_total_price_Valid() const{
    return m_total_price_isValid;
}

OAIUnitPrice1 OAIData1::getUnitPrice() const {
    return m_unit_price;
}
void OAIData1::setUnitPrice(const OAIUnitPrice1 &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIData1::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIData1::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIData1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIData1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
