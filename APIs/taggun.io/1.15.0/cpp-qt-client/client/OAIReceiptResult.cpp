/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiptResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiptResult::OAIReceiptResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiptResult::OAIReceiptResult() {
    this->initializeModel();
}

OAIReceiptResult::~OAIReceiptResult() {}

void OAIReceiptResult::initializeModel() {

    m_confidence_level_isSet = false;
    m_confidence_level_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_merchant_address_isSet = false;
    m_merchant_address_isValid = false;

    m_merchant_city_isSet = false;
    m_merchant_city_isValid = false;

    m_merchant_country_code_isSet = false;
    m_merchant_country_code_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_merchant_postal_code_isSet = false;
    m_merchant_postal_code_isValid = false;

    m_merchant_state_isSet = false;
    m_merchant_state_isValid = false;

    m_merchant_types_isSet = false;
    m_merchant_types_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIReceiptResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiptResult::fromJsonObject(QJsonObject json) {

    m_confidence_level_isValid = ::OpenAPI::fromJsonValue(m_confidence_level, json[QString("confidenceLevel")]);
    m_confidence_level_isSet = !json[QString("confidenceLevel")].isNull() && m_confidence_level_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_merchant_address_isValid = ::OpenAPI::fromJsonValue(m_merchant_address, json[QString("merchantAddress")]);
    m_merchant_address_isSet = !json[QString("merchantAddress")].isNull() && m_merchant_address_isValid;

    m_merchant_city_isValid = ::OpenAPI::fromJsonValue(m_merchant_city, json[QString("merchantCity")]);
    m_merchant_city_isSet = !json[QString("merchantCity")].isNull() && m_merchant_city_isValid;

    m_merchant_country_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_country_code, json[QString("merchantCountryCode")]);
    m_merchant_country_code_isSet = !json[QString("merchantCountryCode")].isNull() && m_merchant_country_code_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_merchant_postal_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_postal_code, json[QString("merchantPostalCode")]);
    m_merchant_postal_code_isSet = !json[QString("merchantPostalCode")].isNull() && m_merchant_postal_code_isValid;

    m_merchant_state_isValid = ::OpenAPI::fromJsonValue(m_merchant_state, json[QString("merchantState")]);
    m_merchant_state_isSet = !json[QString("merchantState")].isNull() && m_merchant_state_isValid;

    m_merchant_types_isValid = ::OpenAPI::fromJsonValue(m_merchant_types, json[QString("merchantTypes")]);
    m_merchant_types_isSet = !json[QString("merchantTypes")].isNull() && m_merchant_types_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;
}

QString OAIReceiptResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiptResult::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_level_isSet) {
        obj.insert(QString("confidenceLevel"), ::OpenAPI::toJsonValue(m_confidence_level));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_merchant_address.isSet()) {
        obj.insert(QString("merchantAddress"), ::OpenAPI::toJsonValue(m_merchant_address));
    }
    if (m_merchant_city.isSet()) {
        obj.insert(QString("merchantCity"), ::OpenAPI::toJsonValue(m_merchant_city));
    }
    if (m_merchant_country_code.isSet()) {
        obj.insert(QString("merchantCountryCode"), ::OpenAPI::toJsonValue(m_merchant_country_code));
    }
    if (m_merchant_name.isSet()) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_merchant_postal_code.isSet()) {
        obj.insert(QString("merchantPostalCode"), ::OpenAPI::toJsonValue(m_merchant_postal_code));
    }
    if (m_merchant_state.isSet()) {
        obj.insert(QString("merchantState"), ::OpenAPI::toJsonValue(m_merchant_state));
    }
    if (m_merchant_types.isSet()) {
        obj.insert(QString("merchantTypes"), ::OpenAPI::toJsonValue(m_merchant_types));
    }
    if (m_tax_amount.isSet()) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_total_amount.isSet()) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

double OAIReceiptResult::getConfidenceLevel() const {
    return m_confidence_level;
}
void OAIReceiptResult::setConfidenceLevel(const double &confidence_level) {
    m_confidence_level = confidence_level;
    m_confidence_level_isSet = true;
}

bool OAIReceiptResult::is_confidence_level_Set() const{
    return m_confidence_level_isSet;
}

bool OAIReceiptResult::is_confidence_level_Valid() const{
    return m_confidence_level_isValid;
}

OAIDate1 OAIReceiptResult::getDate() const {
    return m_date;
}
void OAIReceiptResult::setDate(const OAIDate1 &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReceiptResult::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReceiptResult::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIReceiptResult::getError() const {
    return m_error;
}
void OAIReceiptResult::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIReceiptResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIReceiptResult::is_error_Valid() const{
    return m_error_isValid;
}

OAIMerchantAddress OAIReceiptResult::getMerchantAddress() const {
    return m_merchant_address;
}
void OAIReceiptResult::setMerchantAddress(const OAIMerchantAddress &merchant_address) {
    m_merchant_address = merchant_address;
    m_merchant_address_isSet = true;
}

bool OAIReceiptResult::is_merchant_address_Set() const{
    return m_merchant_address_isSet;
}

bool OAIReceiptResult::is_merchant_address_Valid() const{
    return m_merchant_address_isValid;
}

OAIMerchantCity OAIReceiptResult::getMerchantCity() const {
    return m_merchant_city;
}
void OAIReceiptResult::setMerchantCity(const OAIMerchantCity &merchant_city) {
    m_merchant_city = merchant_city;
    m_merchant_city_isSet = true;
}

bool OAIReceiptResult::is_merchant_city_Set() const{
    return m_merchant_city_isSet;
}

bool OAIReceiptResult::is_merchant_city_Valid() const{
    return m_merchant_city_isValid;
}

OAIMerchantCountryCode OAIReceiptResult::getMerchantCountryCode() const {
    return m_merchant_country_code;
}
void OAIReceiptResult::setMerchantCountryCode(const OAIMerchantCountryCode &merchant_country_code) {
    m_merchant_country_code = merchant_country_code;
    m_merchant_country_code_isSet = true;
}

bool OAIReceiptResult::is_merchant_country_code_Set() const{
    return m_merchant_country_code_isSet;
}

bool OAIReceiptResult::is_merchant_country_code_Valid() const{
    return m_merchant_country_code_isValid;
}

OAIMerchantName OAIReceiptResult::getMerchantName() const {
    return m_merchant_name;
}
void OAIReceiptResult::setMerchantName(const OAIMerchantName &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIReceiptResult::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIReceiptResult::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

OAIMerchantPostalCode OAIReceiptResult::getMerchantPostalCode() const {
    return m_merchant_postal_code;
}
void OAIReceiptResult::setMerchantPostalCode(const OAIMerchantPostalCode &merchant_postal_code) {
    m_merchant_postal_code = merchant_postal_code;
    m_merchant_postal_code_isSet = true;
}

bool OAIReceiptResult::is_merchant_postal_code_Set() const{
    return m_merchant_postal_code_isSet;
}

bool OAIReceiptResult::is_merchant_postal_code_Valid() const{
    return m_merchant_postal_code_isValid;
}

OAIMerchantCity OAIReceiptResult::getMerchantState() const {
    return m_merchant_state;
}
void OAIReceiptResult::setMerchantState(const OAIMerchantCity &merchant_state) {
    m_merchant_state = merchant_state;
    m_merchant_state_isSet = true;
}

bool OAIReceiptResult::is_merchant_state_Set() const{
    return m_merchant_state_isSet;
}

bool OAIReceiptResult::is_merchant_state_Valid() const{
    return m_merchant_state_isValid;
}

OAIMerchantTypes OAIReceiptResult::getMerchantTypes() const {
    return m_merchant_types;
}
void OAIReceiptResult::setMerchantTypes(const OAIMerchantTypes &merchant_types) {
    m_merchant_types = merchant_types;
    m_merchant_types_isSet = true;
}

bool OAIReceiptResult::is_merchant_types_Set() const{
    return m_merchant_types_isSet;
}

bool OAIReceiptResult::is_merchant_types_Valid() const{
    return m_merchant_types_isValid;
}

OAITaxAmount OAIReceiptResult::getTaxAmount() const {
    return m_tax_amount;
}
void OAIReceiptResult::setTaxAmount(const OAITaxAmount &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIReceiptResult::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIReceiptResult::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

OAITotalAmount OAIReceiptResult::getTotalAmount() const {
    return m_total_amount;
}
void OAIReceiptResult::setTotalAmount(const OAITotalAmount &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIReceiptResult::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIReceiptResult::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIReceiptResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_city.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_country_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_postal_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiptResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
