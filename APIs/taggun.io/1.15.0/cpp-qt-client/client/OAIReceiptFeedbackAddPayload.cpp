/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiptFeedbackAddPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiptFeedbackAddPayload::OAIReceiptFeedbackAddPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiptFeedbackAddPayload::OAIReceiptFeedbackAddPayload() {
    this->initializeModel();
}

OAIReceiptFeedbackAddPayload::~OAIReceiptFeedbackAddPayload() {}

void OAIReceiptFeedbackAddPayload::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_master_category_isSet = false;
    m_master_category_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIReceiptFeedbackAddPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiptFeedbackAddPayload::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_master_category_isValid = ::OpenAPI::fromJsonValue(m_master_category, json[QString("masterCategory")]);
    m_master_category_isSet = !json[QString("masterCategory")].isNull() && m_master_category_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;
}

QString OAIReceiptFeedbackAddPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiptFeedbackAddPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_master_category_isSet) {
        obj.insert(QString("masterCategory"), ::OpenAPI::toJsonValue(m_master_category));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

QString OAIReceiptFeedbackAddPayload::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReceiptFeedbackAddPayload::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReceiptFeedbackAddPayload::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReceiptFeedbackAddPayload::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QDateTime OAIReceiptFeedbackAddPayload::getDate() const {
    return m_date;
}
void OAIReceiptFeedbackAddPayload::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReceiptFeedbackAddPayload::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReceiptFeedbackAddPayload::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIReceiptFeedbackAddPayload::getMasterCategory() const {
    return m_master_category;
}
void OAIReceiptFeedbackAddPayload::setMasterCategory(const QString &master_category) {
    m_master_category = master_category;
    m_master_category_isSet = true;
}

bool OAIReceiptFeedbackAddPayload::is_master_category_Set() const{
    return m_master_category_isSet;
}

bool OAIReceiptFeedbackAddPayload::is_master_category_Valid() const{
    return m_master_category_isValid;
}

QString OAIReceiptFeedbackAddPayload::getMerchantName() const {
    return m_merchant_name;
}
void OAIReceiptFeedbackAddPayload::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIReceiptFeedbackAddPayload::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIReceiptFeedbackAddPayload::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAIReceiptFeedbackAddPayload::getReferenceId() const {
    return m_reference_id;
}
void OAIReceiptFeedbackAddPayload::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIReceiptFeedbackAddPayload::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIReceiptFeedbackAddPayload::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

double OAIReceiptFeedbackAddPayload::getTaxAmount() const {
    return m_tax_amount;
}
void OAIReceiptFeedbackAddPayload::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIReceiptFeedbackAddPayload::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIReceiptFeedbackAddPayload::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAIReceiptFeedbackAddPayload::getTotalAmount() const {
    return m_total_amount;
}
void OAIReceiptFeedbackAddPayload::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIReceiptFeedbackAddPayload::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIReceiptFeedbackAddPayload::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIReceiptFeedbackAddPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiptFeedbackAddPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_id_isValid && true;
}

} // namespace OpenAPI
