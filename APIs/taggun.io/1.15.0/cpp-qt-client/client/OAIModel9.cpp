/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel9.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel9::OAIModel9(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel9::OAIModel9() {
    this->initializeModel();
}

OAIModel9::~OAIModel9() {}

void OAIModel9::initializeModel() {

    m_balance_owing_isSet = false;
    m_balance_owing_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_merchant_names_isSet = false;
    m_merchant_names_isValid = false;

    m_product_codes_isSet = false;
    m_product_codes_isValid = false;

    m_product_line_items_isSet = false;
    m_product_line_items_isValid = false;
}

void OAIModel9::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel9::fromJsonObject(QJsonObject json) {

    m_balance_owing_isValid = ::OpenAPI::fromJsonValue(m_balance_owing, json[QString("balanceOwing")]);
    m_balance_owing_isSet = !json[QString("balanceOwing")].isNull() && m_balance_owing_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_merchant_names_isValid = ::OpenAPI::fromJsonValue(m_merchant_names, json[QString("merchantNames")]);
    m_merchant_names_isSet = !json[QString("merchantNames")].isNull() && m_merchant_names_isValid;

    m_product_codes_isValid = ::OpenAPI::fromJsonValue(m_product_codes, json[QString("productCodes")]);
    m_product_codes_isSet = !json[QString("productCodes")].isNull() && m_product_codes_isValid;

    m_product_line_items_isValid = ::OpenAPI::fromJsonValue(m_product_line_items, json[QString("productLineItems")]);
    m_product_line_items_isSet = !json[QString("productLineItems")].isNull() && m_product_line_items_isValid;
}

QString OAIModel9::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel9::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_owing.isSet()) {
        obj.insert(QString("balanceOwing"), ::OpenAPI::toJsonValue(m_balance_owing));
    }
    if (m_date.isSet()) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_merchant_names.isSet()) {
        obj.insert(QString("merchantNames"), ::OpenAPI::toJsonValue(m_merchant_names));
    }
    if (m_product_codes.isSet()) {
        obj.insert(QString("productCodes"), ::OpenAPI::toJsonValue(m_product_codes));
    }
    if (m_product_line_items.isSet()) {
        obj.insert(QString("productLineItems"), ::OpenAPI::toJsonValue(m_product_line_items));
    }
    return obj;
}

OAIBalanceOwing OAIModel9::getBalanceOwing() const {
    return m_balance_owing;
}
void OAIModel9::setBalanceOwing(const OAIBalanceOwing &balance_owing) {
    m_balance_owing = balance_owing;
    m_balance_owing_isSet = true;
}

bool OAIModel9::is_balance_owing_Set() const{
    return m_balance_owing_isSet;
}

bool OAIModel9::is_balance_owing_Valid() const{
    return m_balance_owing_isValid;
}

OAIDate2 OAIModel9::getDate() const {
    return m_date;
}
void OAIModel9::setDate(const OAIDate2 &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIModel9::is_date_Set() const{
    return m_date_isSet;
}

bool OAIModel9::is_date_Valid() const{
    return m_date_isValid;
}

OAIMerchantNames OAIModel9::getMerchantNames() const {
    return m_merchant_names;
}
void OAIModel9::setMerchantNames(const OAIMerchantNames &merchant_names) {
    m_merchant_names = merchant_names;
    m_merchant_names_isSet = true;
}

bool OAIModel9::is_merchant_names_Set() const{
    return m_merchant_names_isSet;
}

bool OAIModel9::is_merchant_names_Valid() const{
    return m_merchant_names_isValid;
}

OAIProductCodes OAIModel9::getProductCodes() const {
    return m_product_codes;
}
void OAIModel9::setProductCodes(const OAIProductCodes &product_codes) {
    m_product_codes = product_codes;
    m_product_codes_isSet = true;
}

bool OAIModel9::is_product_codes_Set() const{
    return m_product_codes_isSet;
}

bool OAIModel9::is_product_codes_Valid() const{
    return m_product_codes_isValid;
}

OAIProductLineItems1 OAIModel9::getProductLineItems() const {
    return m_product_line_items;
}
void OAIModel9::setProductLineItems(const OAIProductLineItems1 &product_line_items) {
    m_product_line_items = product_line_items;
    m_product_line_items_isSet = true;
}

bool OAIModel9::is_product_line_items_Set() const{
    return m_product_line_items_isSet;
}

bool OAIModel9::is_product_line_items_Valid() const{
    return m_product_line_items_isValid;
}

bool OAIModel9::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_owing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_line_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel9::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
