/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductLineItems1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductLineItems1::OAIProductLineItems1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductLineItems1::OAIProductLineItems1() {
    this->initializeModel();
}

OAIProductLineItems1::~OAIProductLineItems1() {}

void OAIProductLineItems1::initializeModel() {

    m_names_isSet = false;
    m_names_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_total_price_isSet = false;
    m_total_price_isValid = false;
}

void OAIProductLineItems1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductLineItems1::fromJsonObject(QJsonObject json) {

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;

    m_total_price_isValid = ::OpenAPI::fromJsonValue(m_total_price, json[QString("totalPrice")]);
    m_total_price_isSet = !json[QString("totalPrice")].isNull() && m_total_price_isValid;
}

QString OAIProductLineItems1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductLineItems1::asJsonObject() const {
    QJsonObject obj;
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    if (m_quantity.isSet()) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_total_price.isSet()) {
        obj.insert(QString("totalPrice"), ::OpenAPI::toJsonValue(m_total_price));
    }
    return obj;
}

QList<QString> OAIProductLineItems1::getNames() const {
    return m_names;
}
void OAIProductLineItems1::setNames(const QList<QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIProductLineItems1::is_names_Set() const{
    return m_names_isSet;
}

bool OAIProductLineItems1::is_names_Valid() const{
    return m_names_isValid;
}

OAITotalPrice1 OAIProductLineItems1::getQuantity() const {
    return m_quantity;
}
void OAIProductLineItems1::setQuantity(const OAITotalPrice1 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProductLineItems1::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProductLineItems1::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIProductLineItems1::isSkip() const {
    return m_skip;
}
void OAIProductLineItems1::setSkip(const bool &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIProductLineItems1::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIProductLineItems1::is_skip_Valid() const{
    return m_skip_isValid;
}

OAITotalPrice1 OAIProductLineItems1::getTotalPrice() const {
    return m_total_price;
}
void OAIProductLineItems1::setTotalPrice(const OAITotalPrice1 &total_price) {
    m_total_price = total_price;
    m_total_price_isSet = true;
}

bool OAIProductLineItems1::is_total_price_Set() const{
    return m_total_price_isSet;
}

bool OAIProductLineItems1::is_total_price_Valid() const{
    return m_total_price_isValid;
}

bool OAIProductLineItems1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductLineItems1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
