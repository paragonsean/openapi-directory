/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIData2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIData2::OAIData2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIData2::OAIData2() {
    this->initializeModel();
}

OAIData2::~OAIData2() {}

void OAIData2::initializeModel() {

    m_gross_amount_isSet = false;
    m_gross_amount_isValid = false;

    m_net_amount_isSet = false;
    m_net_amount_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_tax_type_isSet = false;
    m_tax_type_isValid = false;
}

void OAIData2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIData2::fromJsonObject(QJsonObject json) {

    m_gross_amount_isValid = ::OpenAPI::fromJsonValue(m_gross_amount, json[QString("grossAmount")]);
    m_gross_amount_isSet = !json[QString("grossAmount")].isNull() && m_gross_amount_isValid;

    m_net_amount_isValid = ::OpenAPI::fromJsonValue(m_net_amount, json[QString("netAmount")]);
    m_net_amount_isSet = !json[QString("netAmount")].isNull() && m_net_amount_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("taxRate")]);
    m_tax_rate_isSet = !json[QString("taxRate")].isNull() && m_tax_rate_isValid;

    m_tax_type_isValid = ::OpenAPI::fromJsonValue(m_tax_type, json[QString("taxType")]);
    m_tax_type_isSet = !json[QString("taxType")].isNull() && m_tax_type_isValid;
}

QString OAIData2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIData2::asJsonObject() const {
    QJsonObject obj;
    if (m_gross_amount.isSet()) {
        obj.insert(QString("grossAmount"), ::OpenAPI::toJsonValue(m_gross_amount));
    }
    if (m_net_amount.isSet()) {
        obj.insert(QString("netAmount"), ::OpenAPI::toJsonValue(m_net_amount));
    }
    if (m_tax_amount.isSet()) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_rate.isSet()) {
        obj.insert(QString("taxRate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_tax_type.isSet()) {
        obj.insert(QString("taxType"), ::OpenAPI::toJsonValue(m_tax_type));
    }
    return obj;
}

OAIGrossAmount OAIData2::getGrossAmount() const {
    return m_gross_amount;
}
void OAIData2::setGrossAmount(const OAIGrossAmount &gross_amount) {
    m_gross_amount = gross_amount;
    m_gross_amount_isSet = true;
}

bool OAIData2::is_gross_amount_Set() const{
    return m_gross_amount_isSet;
}

bool OAIData2::is_gross_amount_Valid() const{
    return m_gross_amount_isValid;
}

OAINetAmount OAIData2::getNetAmount() const {
    return m_net_amount;
}
void OAIData2::setNetAmount(const OAINetAmount &net_amount) {
    m_net_amount = net_amount;
    m_net_amount_isSet = true;
}

bool OAIData2::is_net_amount_Set() const{
    return m_net_amount_isSet;
}

bool OAIData2::is_net_amount_Valid() const{
    return m_net_amount_isValid;
}

OAITaxAmount2 OAIData2::getTaxAmount() const {
    return m_tax_amount;
}
void OAIData2::setTaxAmount(const OAITaxAmount2 &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIData2::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIData2::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

OAITaxRate OAIData2::getTaxRate() const {
    return m_tax_rate;
}
void OAIData2::setTaxRate(const OAITaxRate &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAIData2::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAIData2::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

OAITaxType OAIData2::getTaxType() const {
    return m_tax_type;
}
void OAIData2::setTaxType(const OAITaxType &tax_type) {
    m_tax_type = tax_type;
    m_tax_type_isSet = true;
}

bool OAIData2::is_tax_type_Set() const{
    return m_tax_type_isSet;
}

bool OAIData2::is_tax_type_Valid() const{
    return m_tax_type_isValid;
}

bool OAIData2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gross_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIData2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
