/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIData3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIData3::OAIData3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIData3::OAIData3() {
    this->initializeModel();
}

OAIData3::~OAIData3() {}

void OAIData3::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_vat_no_isSet = false;
    m_vat_no_isValid = false;

    m_verification_id_isSet = false;
    m_verification_id_isValid = false;

    m_vies_isSet = false;
    m_vies_isValid = false;
}

void OAIData3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIData3::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_vat_no_isValid = ::OpenAPI::fromJsonValue(m_vat_no, json[QString("vatNo")]);
    m_vat_no_isSet = !json[QString("vatNo")].isNull() && m_vat_no_isValid;

    m_verification_id_isValid = ::OpenAPI::fromJsonValue(m_verification_id, json[QString("verificationId")]);
    m_verification_id_isSet = !json[QString("verificationId")].isNull() && m_verification_id_isValid;

    m_vies_isValid = ::OpenAPI::fromJsonValue(m_vies, json[QString("vies")]);
    m_vies_isSet = !json[QString("vies")].isNull() && m_vies_isValid;
}

QString OAIData3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIData3::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_vat_no_isSet) {
        obj.insert(QString("vatNo"), ::OpenAPI::toJsonValue(m_vat_no));
    }
    if (m_verification_id_isSet) {
        obj.insert(QString("verificationId"), ::OpenAPI::toJsonValue(m_verification_id));
    }
    if (m_vies.isSet()) {
        obj.insert(QString("vies"), ::OpenAPI::toJsonValue(m_vies));
    }
    return obj;
}

QString OAIData3::getCountryCode() const {
    return m_country_code;
}
void OAIData3::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIData3::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIData3::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIData3::getVatNo() const {
    return m_vat_no;
}
void OAIData3::setVatNo(const QString &vat_no) {
    m_vat_no = vat_no;
    m_vat_no_isSet = true;
}

bool OAIData3::is_vat_no_Set() const{
    return m_vat_no_isSet;
}

bool OAIData3::is_vat_no_Valid() const{
    return m_vat_no_isValid;
}

QString OAIData3::getVerificationId() const {
    return m_verification_id;
}
void OAIData3::setVerificationId(const QString &verification_id) {
    m_verification_id = verification_id;
    m_verification_id_isSet = true;
}

bool OAIData3::is_verification_id_Set() const{
    return m_verification_id_isSet;
}

bool OAIData3::is_verification_id_Valid() const{
    return m_verification_id_isValid;
}

OAIVies OAIData3::getVies() const {
    return m_vies;
}
void OAIData3::setVies(const OAIVies &vies) {
    m_vies = vies;
    m_vies_isSet = true;
}

bool OAIData3::is_vies_Set() const{
    return m_vies_isSet;
}

bool OAIData3::is_vies_Valid() const{
    return m_vies_isValid;
}

bool OAIData3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIData3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
