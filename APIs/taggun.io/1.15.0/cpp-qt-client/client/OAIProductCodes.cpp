/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductCodes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductCodes::OAIProductCodes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductCodes::OAIProductCodes() {
    this->initializeModel();
}

OAIProductCodes::~OAIProductCodes() {}

void OAIProductCodes::initializeModel() {

    m_list_isSet = false;
    m_list_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;
}

void OAIProductCodes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductCodes::fromJsonObject(QJsonObject json) {

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;
}

QString OAIProductCodes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductCodes::asJsonObject() const {
    QJsonObject obj;
    if (m_list.size() > 0) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    return obj;
}

QList<QString> OAIProductCodes::getList() const {
    return m_list;
}
void OAIProductCodes::setList(const QList<QString> &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIProductCodes::is_list_Set() const{
    return m_list_isSet;
}

bool OAIProductCodes::is_list_Valid() const{
    return m_list_isValid;
}

bool OAIProductCodes::isSkip() const {
    return m_skip;
}
void OAIProductCodes::setSkip(const bool &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIProductCodes::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIProductCodes::is_skip_Valid() const{
    return m_skip_isValid;
}

bool OAIProductCodes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductCodes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
