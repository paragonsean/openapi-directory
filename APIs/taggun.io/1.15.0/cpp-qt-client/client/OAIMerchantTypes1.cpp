/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchantTypes1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchantTypes1::OAIMerchantTypes1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchantTypes1::OAIMerchantTypes1() {
    this->initializeModel();
}

OAIMerchantTypes1::~OAIMerchantTypes1() {}

void OAIMerchantTypes1::initializeModel() {

    m_confidence_level_isSet = false;
    m_confidence_level_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIMerchantTypes1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchantTypes1::fromJsonObject(QJsonObject json) {

    m_confidence_level_isValid = ::OpenAPI::fromJsonValue(m_confidence_level, json[QString("confidenceLevel")]);
    m_confidence_level_isSet = !json[QString("confidenceLevel")].isNull() && m_confidence_level_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    if(json["regions"].isArray()){
        auto arr = json["regions"].toArray();
        m_regions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAIModel1> item;
                m_regions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_regions_isSet = !jval.isNull() && m_regions_isValid;
                m_regions.push_back(item);
            }
        }
    }

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIMerchantTypes1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchantTypes1::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_level_isSet) {
        obj.insert(QString("confidenceLevel"), ::OpenAPI::toJsonValue(m_confidence_level));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_regions.size() > 0) {
        
        obj.insert(QString("regions"), toJsonValue(m_regions));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

double OAIMerchantTypes1::getConfidenceLevel() const {
    return m_confidence_level;
}
void OAIMerchantTypes1::setConfidenceLevel(const double &confidence_level) {
    m_confidence_level = confidence_level;
    m_confidence_level_isSet = true;
}

bool OAIMerchantTypes1::is_confidence_level_Set() const{
    return m_confidence_level_isSet;
}

bool OAIMerchantTypes1::is_confidence_level_Valid() const{
    return m_confidence_level_isValid;
}

QList<QString> OAIMerchantTypes1::getData() const {
    return m_data;
}
void OAIMerchantTypes1::setData(const QList<QString> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIMerchantTypes1::is_data_Set() const{
    return m_data_isSet;
}

bool OAIMerchantTypes1::is_data_Valid() const{
    return m_data_isValid;
}

double OAIMerchantTypes1::getIndex() const {
    return m_index;
}
void OAIMerchantTypes1::setIndex(const double &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIMerchantTypes1::is_index_Set() const{
    return m_index_isSet;
}

bool OAIMerchantTypes1::is_index_Valid() const{
    return m_index_isValid;
}

QList<QList> OAIMerchantTypes1::getRegions() const {
    return m_regions;
}
void OAIMerchantTypes1::setRegions(const QList<QList> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIMerchantTypes1::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIMerchantTypes1::is_regions_Valid() const{
    return m_regions_isValid;
}

QString OAIMerchantTypes1::getText() const {
    return m_text;
}
void OAIMerchantTypes1::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMerchantTypes1::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMerchantTypes1::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIMerchantTypes1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchantTypes1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
