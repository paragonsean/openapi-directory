/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClass4DeprecatedEndpointsApi_H
#define OAI_OAIClass4DeprecatedEndpointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBadRequestError.h"
#include "OAIHttpFileElement.h"
#include "OAIReceiptMatchResult.h"
#include "OAIReceiptResult.h"
#include "OAIReceiptVerboseResult.h"
#include "OAIStoragePayload.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClass4DeprecatedEndpointsApi : public QObject {
    Q_OBJECT

public:
    OAIClass4DeprecatedEndpointsApi(const int timeOut = 0);
    ~OAIClass4DeprecatedEndpointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  refresh bool [optional]
    * @param[in]  incognito bool [optional]
    * @param[in]  ip_address QString [optional]
    * @param[in]  primary_keywords QList<QString> [optional]
    * @param[in]  secondary_keywords QList<QString> [optional]
    * @param[in]  stop_words QList<QString> [optional]
    * @param[in]  language QString [optional]
    */
    Q_DECL_DEPRECATED virtual void postApiReceiptV1MatchFile(const QString &apikey, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &refresh = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &incognito = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &primary_keywords = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &secondary_keywords = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &stop_words = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  body OAIStoragePayload [optional]
    */
    Q_DECL_DEPRECATED virtual void postApiReceiptV1SimpleStorage(const QString &apikey, const ::OpenAPI::OptionalParam<OAIStoragePayload> &body = ::OpenAPI::OptionalParam<OAIStoragePayload>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  body OAIStoragePayload [optional]
    */
    Q_DECL_DEPRECATED virtual void postApiReceiptV1VerboseStorage(const QString &apikey, const ::OpenAPI::OptionalParam<OAIStoragePayload> &body = ::OpenAPI::OptionalParam<OAIStoragePayload>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postApiReceiptV1MatchFileCallback(OAIHttpRequestWorker *worker);
    void postApiReceiptV1SimpleStorageCallback(OAIHttpRequestWorker *worker);
    void postApiReceiptV1VerboseStorageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postApiReceiptV1MatchFileSignal(OAIReceiptMatchResult summary);
    void postApiReceiptV1SimpleStorageSignal(OAIReceiptResult summary);
    void postApiReceiptV1VerboseStorageSignal(OAIReceiptVerboseResult summary);


    void postApiReceiptV1MatchFileSignalFull(OAIHttpRequestWorker *worker, OAIReceiptMatchResult summary);
    void postApiReceiptV1SimpleStorageSignalFull(OAIHttpRequestWorker *worker, OAIReceiptResult summary);
    void postApiReceiptV1VerboseStorageSignalFull(OAIHttpRequestWorker *worker, OAIReceiptVerboseResult summary);

    Q_DECL_DEPRECATED_X("Use postApiReceiptV1MatchFileSignalError() instead")
    void postApiReceiptV1MatchFileSignalE(OAIReceiptMatchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiReceiptV1MatchFileSignalError(OAIReceiptMatchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiReceiptV1SimpleStorageSignalError() instead")
    void postApiReceiptV1SimpleStorageSignalE(OAIReceiptResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiReceiptV1SimpleStorageSignalError(OAIReceiptResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiReceiptV1VerboseStorageSignalError() instead")
    void postApiReceiptV1VerboseStorageSignalE(OAIReceiptVerboseResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiReceiptV1VerboseStorageSignalError(OAIReceiptVerboseResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postApiReceiptV1MatchFileSignalErrorFull() instead")
    void postApiReceiptV1MatchFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiReceiptV1MatchFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiReceiptV1SimpleStorageSignalErrorFull() instead")
    void postApiReceiptV1SimpleStorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiReceiptV1SimpleStorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiReceiptV1VerboseStorageSignalErrorFull() instead")
    void postApiReceiptV1VerboseStorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiReceiptV1VerboseStorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
