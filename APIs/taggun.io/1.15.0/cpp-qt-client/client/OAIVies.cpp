/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVies::OAIVies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVies::OAIVies() {
    this->initializeModel();
}

OAIVies::~OAIVies() {}

void OAIVies::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_vat_number_isSet = false;
    m_vat_number_isValid = false;
}

void OAIVies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVies::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_vat_number_isValid = ::OpenAPI::fromJsonValue(m_vat_number, json[QString("vatNumber")]);
    m_vat_number_isSet = !json[QString("vatNumber")].isNull() && m_vat_number_isValid;
}

QString OAIVies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVies::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_vat_number_isSet) {
        obj.insert(QString("vatNumber"), ::OpenAPI::toJsonValue(m_vat_number));
    }
    return obj;
}

QString OAIVies::getAddress() const {
    return m_address;
}
void OAIVies::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIVies::is_address_Set() const{
    return m_address_isSet;
}

bool OAIVies::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIVies::getCountryCode() const {
    return m_country_code;
}
void OAIVies::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIVies::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIVies::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIVies::getError() const {
    return m_error;
}
void OAIVies::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIVies::is_error_Set() const{
    return m_error_isSet;
}

bool OAIVies::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIVies::getName() const {
    return m_name;
}
void OAIVies::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVies::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVies::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIVies::isRValid() const {
    return m_r_valid;
}
void OAIVies::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIVies::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIVies::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

QString OAIVies::getVatNumber() const {
    return m_vat_number;
}
void OAIVies::setVatNumber(const QString &vat_number) {
    m_vat_number = vat_number;
    m_vat_number_isSet = true;
}

bool OAIVies::is_vat_number_Set() const{
    return m_vat_number_isSet;
}

bool OAIVies::is_vat_number_Valid() const{
    return m_vat_number_isValid;
}

bool OAIVies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
