/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClass4CampaignValidationApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIClass4CampaignValidationApi::OAIClass4CampaignValidationApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIClass4CampaignValidationApi::~OAIClass4CampaignValidationApi() {
}

void OAIClass4CampaignValidationApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.taggun.io/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteApiValidationV1CampaignSettingsDeleteCampaignid", defaultConf);
    _serverIndices.insert("deleteApiValidationV1CampaignSettingsDeleteCampaignid", 0);
    _serverConfigs.insert("getApiValidationV1CampaignSettingsCampaignid", defaultConf);
    _serverIndices.insert("getApiValidationV1CampaignSettingsCampaignid", 0);
    _serverConfigs.insert("getApiValidationV1CampaignSettingsList", defaultConf);
    _serverIndices.insert("getApiValidationV1CampaignSettingsList", 0);
    _serverConfigs.insert("postApiValidationV1CampaignFile", defaultConf);
    _serverIndices.insert("postApiValidationV1CampaignFile", 0);
    _serverConfigs.insert("postApiValidationV1CampaignProductvalidationFile", defaultConf);
    _serverIndices.insert("postApiValidationV1CampaignProductvalidationFile", 0);
    _serverConfigs.insert("postApiValidationV1CampaignSettingsCreateCampaignid", defaultConf);
    _serverIndices.insert("postApiValidationV1CampaignSettingsCreateCampaignid", 0);
    _serverConfigs.insert("putApiValidationV1CampaignSettingsUpdateCampaignid", defaultConf);
    _serverIndices.insert("putApiValidationV1CampaignSettingsUpdateCampaignid", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIClass4CampaignValidationApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIClass4CampaignValidationApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIClass4CampaignValidationApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIClass4CampaignValidationApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIClass4CampaignValidationApi::setUsername(const QString &username) {
    _username = username;
}

void OAIClass4CampaignValidationApi::setPassword(const QString &password) {
    _password = password;
}


void OAIClass4CampaignValidationApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIClass4CampaignValidationApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIClass4CampaignValidationApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIClass4CampaignValidationApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClass4CampaignValidationApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClass4CampaignValidationApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIClass4CampaignValidationApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIClass4CampaignValidationApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIClass4CampaignValidationApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIClass4CampaignValidationApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIClass4CampaignValidationApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIClass4CampaignValidationApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIClass4CampaignValidationApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIClass4CampaignValidationApi::deleteApiValidationV1CampaignSettingsDeleteCampaignid(const QString &apikey, const QString &campaign_id) {
    QString fullPath = QString(_serverConfigs["deleteApiValidationV1CampaignSettingsDeleteCampaignid"][_serverIndices.value("deleteApiValidationV1CampaignSettingsDeleteCampaignid")].URL()+"/api/validation/v1/campaign/settings/delete/{campaignId}");
    
    
    {
        QString campaign_idPathParam("{");
        campaign_idPathParam.append("campaignId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "campaignId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"campaignId"+pathSuffix : pathPrefix;
        fullPath.replace(campaign_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(campaign_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(apikey).isEmpty()) {
            input.headers.insert("apikey", ::OpenAPI::toStringValue(apikey));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClass4CampaignValidationApi::deleteApiValidationV1CampaignSettingsDeleteCampaignidCallback);
    connect(this, &OAIClass4CampaignValidationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClass4CampaignValidationApi::deleteApiValidationV1CampaignSettingsDeleteCampaignidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteApiValidationV1CampaignSettingsDeleteCampaignidSignal();
        Q_EMIT deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalE(error_type, error_str);
        Q_EMIT deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalError(error_type, error_str);
        Q_EMIT deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClass4CampaignValidationApi::getApiValidationV1CampaignSettingsCampaignid(const QString &apikey, const QString &campaign_id) {
    QString fullPath = QString(_serverConfigs["getApiValidationV1CampaignSettingsCampaignid"][_serverIndices.value("getApiValidationV1CampaignSettingsCampaignid")].URL()+"/api/validation/v1/campaign/settings/{campaignId}");
    
    
    {
        QString campaign_idPathParam("{");
        campaign_idPathParam.append("campaignId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "campaignId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"campaignId"+pathSuffix : pathPrefix;
        fullPath.replace(campaign_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(campaign_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(apikey).isEmpty()) {
            input.headers.insert("apikey", ::OpenAPI::toStringValue(apikey));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClass4CampaignValidationApi::getApiValidationV1CampaignSettingsCampaignidCallback);
    connect(this, &OAIClass4CampaignValidationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClass4CampaignValidationApi::getApiValidationV1CampaignSettingsCampaignidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getApiValidationV1CampaignSettingsCampaignidSignal();
        Q_EMIT getApiValidationV1CampaignSettingsCampaignidSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getApiValidationV1CampaignSettingsCampaignidSignalE(error_type, error_str);
        Q_EMIT getApiValidationV1CampaignSettingsCampaignidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getApiValidationV1CampaignSettingsCampaignidSignalError(error_type, error_str);
        Q_EMIT getApiValidationV1CampaignSettingsCampaignidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClass4CampaignValidationApi::getApiValidationV1CampaignSettingsList(const QString &apikey) {
    QString fullPath = QString(_serverConfigs["getApiValidationV1CampaignSettingsList"][_serverIndices.value("getApiValidationV1CampaignSettingsList")].URL()+"/api/validation/v1/campaign/settings/list");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(apikey).isEmpty()) {
            input.headers.insert("apikey", ::OpenAPI::toStringValue(apikey));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClass4CampaignValidationApi::getApiValidationV1CampaignSettingsListCallback);
    connect(this, &OAIClass4CampaignValidationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClass4CampaignValidationApi::getApiValidationV1CampaignSettingsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getApiValidationV1CampaignSettingsListSignal();
        Q_EMIT getApiValidationV1CampaignSettingsListSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getApiValidationV1CampaignSettingsListSignalE(error_type, error_str);
        Q_EMIT getApiValidationV1CampaignSettingsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getApiValidationV1CampaignSettingsListSignalError(error_type, error_str);
        Q_EMIT getApiValidationV1CampaignSettingsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClass4CampaignValidationApi::postApiValidationV1CampaignFile(const QString &apikey, const QString &campaign_id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file, const ::OpenAPI::OptionalParam<bool> &incognito, const ::OpenAPI::OptionalParam<QString> &ip_address, const ::OpenAPI::OptionalParam<QString> &near, const ::OpenAPI::OptionalParam<QString> &reference_id) {
    QString fullPath = QString(_serverConfigs["postApiValidationV1CampaignFile"][_serverIndices.value("postApiValidationV1CampaignFile")].URL()+"/api/validation/v1/campaign/file");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (file.hasValue())
    {
        input.add_file("file", file.value().local_filename, file.value().request_filename, file.value().mime_type);
    }
    if (incognito.hasValue())
    {
        input.add_var("incognito", ::OpenAPI::toStringValue(incognito.value()));
    }
    if (ip_address.hasValue())
    {
        input.add_var("ipAddress", ::OpenAPI::toStringValue(ip_address.value()));
    }
    if (near.hasValue())
    {
        input.add_var("near", ::OpenAPI::toStringValue(near.value()));
    }
    
    {
        input.add_var("campaignId", ::OpenAPI::toStringValue(campaign_id));
    }
    if (reference_id.hasValue())
    {
        input.add_var("referenceId", ::OpenAPI::toStringValue(reference_id.value()));
    }

    
    {
        if (!::OpenAPI::toStringValue(apikey).isEmpty()) {
            input.headers.insert("apikey", ::OpenAPI::toStringValue(apikey));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClass4CampaignValidationApi::postApiValidationV1CampaignFileCallback);
    connect(this, &OAIClass4CampaignValidationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClass4CampaignValidationApi::postApiValidationV1CampaignFileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postApiValidationV1CampaignFileSignal(output);
        Q_EMIT postApiValidationV1CampaignFileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postApiValidationV1CampaignFileSignalE(output, error_type, error_str);
        Q_EMIT postApiValidationV1CampaignFileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postApiValidationV1CampaignFileSignalError(output, error_type, error_str);
        Q_EMIT postApiValidationV1CampaignFileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClass4CampaignValidationApi::postApiValidationV1CampaignProductvalidationFile(const QString &apikey, const QString &product_verification_number, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file, const ::OpenAPI::OptionalParam<bool> &incognito, const ::OpenAPI::OptionalParam<QString> &sub_account_id, const ::OpenAPI::OptionalParam<QString> &reference_id) {
    QString fullPath = QString(_serverConfigs["postApiValidationV1CampaignProductvalidationFile"][_serverIndices.value("postApiValidationV1CampaignProductvalidationFile")].URL()+"/api/validation/v1/campaign/product-validation/file");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (file.hasValue())
    {
        input.add_file("file", file.value().local_filename, file.value().request_filename, file.value().mime_type);
    }
    
    {
        input.add_var("productVerificationNumber", ::OpenAPI::toStringValue(product_verification_number));
    }
    if (incognito.hasValue())
    {
        input.add_var("incognito", ::OpenAPI::toStringValue(incognito.value()));
    }
    if (sub_account_id.hasValue())
    {
        input.add_var("subAccountId", ::OpenAPI::toStringValue(sub_account_id.value()));
    }
    if (reference_id.hasValue())
    {
        input.add_var("referenceId", ::OpenAPI::toStringValue(reference_id.value()));
    }

    
    {
        if (!::OpenAPI::toStringValue(apikey).isEmpty()) {
            input.headers.insert("apikey", ::OpenAPI::toStringValue(apikey));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClass4CampaignValidationApi::postApiValidationV1CampaignProductvalidationFileCallback);
    connect(this, &OAIClass4CampaignValidationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClass4CampaignValidationApi::postApiValidationV1CampaignProductvalidationFileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postApiValidationV1CampaignProductvalidationFileSignal(output);
        Q_EMIT postApiValidationV1CampaignProductvalidationFileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postApiValidationV1CampaignProductvalidationFileSignalE(output, error_type, error_str);
        Q_EMIT postApiValidationV1CampaignProductvalidationFileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postApiValidationV1CampaignProductvalidationFileSignalError(output, error_type, error_str);
        Q_EMIT postApiValidationV1CampaignProductvalidationFileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClass4CampaignValidationApi::postApiValidationV1CampaignSettingsCreateCampaignid(const QString &apikey, const QString &campaign_id, const ::OpenAPI::OptionalParam<OAIModel9> &body) {
    QString fullPath = QString(_serverConfigs["postApiValidationV1CampaignSettingsCreateCampaignid"][_serverIndices.value("postApiValidationV1CampaignSettingsCreateCampaignid")].URL()+"/api/validation/v1/campaign/settings/create/{campaignId}");
    
    
    {
        QString campaign_idPathParam("{");
        campaign_idPathParam.append("campaignId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "campaignId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"campaignId"+pathSuffix : pathPrefix;
        fullPath.replace(campaign_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(campaign_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(apikey).isEmpty()) {
            input.headers.insert("apikey", ::OpenAPI::toStringValue(apikey));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClass4CampaignValidationApi::postApiValidationV1CampaignSettingsCreateCampaignidCallback);
    connect(this, &OAIClass4CampaignValidationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClass4CampaignValidationApi::postApiValidationV1CampaignSettingsCreateCampaignidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postApiValidationV1CampaignSettingsCreateCampaignidSignal();
        Q_EMIT postApiValidationV1CampaignSettingsCreateCampaignidSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postApiValidationV1CampaignSettingsCreateCampaignidSignalE(error_type, error_str);
        Q_EMIT postApiValidationV1CampaignSettingsCreateCampaignidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postApiValidationV1CampaignSettingsCreateCampaignidSignalError(error_type, error_str);
        Q_EMIT postApiValidationV1CampaignSettingsCreateCampaignidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClass4CampaignValidationApi::putApiValidationV1CampaignSettingsUpdateCampaignid(const QString &apikey, const QString &campaign_id, const ::OpenAPI::OptionalParam<OAIModel9> &body) {
    QString fullPath = QString(_serverConfigs["putApiValidationV1CampaignSettingsUpdateCampaignid"][_serverIndices.value("putApiValidationV1CampaignSettingsUpdateCampaignid")].URL()+"/api/validation/v1/campaign/settings/update/{campaignId}");
    
    
    {
        QString campaign_idPathParam("{");
        campaign_idPathParam.append("campaignId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "campaignId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"campaignId"+pathSuffix : pathPrefix;
        fullPath.replace(campaign_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(campaign_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(apikey).isEmpty()) {
            input.headers.insert("apikey", ::OpenAPI::toStringValue(apikey));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClass4CampaignValidationApi::putApiValidationV1CampaignSettingsUpdateCampaignidCallback);
    connect(this, &OAIClass4CampaignValidationApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClass4CampaignValidationApi::putApiValidationV1CampaignSettingsUpdateCampaignidCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putApiValidationV1CampaignSettingsUpdateCampaignidSignal();
        Q_EMIT putApiValidationV1CampaignSettingsUpdateCampaignidSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putApiValidationV1CampaignSettingsUpdateCampaignidSignalE(error_type, error_str);
        Q_EMIT putApiValidationV1CampaignSettingsUpdateCampaignidSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putApiValidationV1CampaignSettingsUpdateCampaignidSignalError(error_type, error_str);
        Q_EMIT putApiValidationV1CampaignSettingsUpdateCampaignidSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClass4CampaignValidationApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
