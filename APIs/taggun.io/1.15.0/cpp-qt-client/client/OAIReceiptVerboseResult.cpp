/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiptVerboseResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiptVerboseResult::OAIReceiptVerboseResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiptVerboseResult::OAIReceiptVerboseResult() {
    this->initializeModel();
}

OAIReceiptVerboseResult::~OAIReceiptVerboseResult() {}

void OAIReceiptVerboseResult::initializeModel() {

    m_amounts_isSet = false;
    m_amounts_isValid = false;

    m_confidence_level_isSet = false;
    m_confidence_level_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_elapsed_isSet = false;
    m_elapsed_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_items_count_isSet = false;
    m_items_count_isValid = false;

    m_line_amounts_isSet = false;
    m_line_amounts_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_merchant_address_isSet = false;
    m_merchant_address_isValid = false;

    m_merchant_city_isSet = false;
    m_merchant_city_isValid = false;

    m_merchant_country_code_isSet = false;
    m_merchant_country_code_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_merchant_postal_code_isSet = false;
    m_merchant_postal_code_isValid = false;

    m_merchant_state_isSet = false;
    m_merchant_state_isValid = false;

    m_merchant_types_isSet = false;
    m_merchant_types_isValid = false;

    m_numbers_isSet = false;
    m_numbers_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIReceiptVerboseResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiptVerboseResult::fromJsonObject(QJsonObject json) {

    m_amounts_isValid = ::OpenAPI::fromJsonValue(m_amounts, json[QString("amounts")]);
    m_amounts_isSet = !json[QString("amounts")].isNull() && m_amounts_isValid;

    m_confidence_level_isValid = ::OpenAPI::fromJsonValue(m_confidence_level, json[QString("confidenceLevel")]);
    m_confidence_level_isSet = !json[QString("confidenceLevel")].isNull() && m_confidence_level_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_elapsed_isValid = ::OpenAPI::fromJsonValue(m_elapsed, json[QString("elapsed")]);
    m_elapsed_isSet = !json[QString("elapsed")].isNull() && m_elapsed_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_items_count_isValid = ::OpenAPI::fromJsonValue(m_items_count, json[QString("itemsCount")]);
    m_items_count_isSet = !json[QString("itemsCount")].isNull() && m_items_count_isValid;

    m_line_amounts_isValid = ::OpenAPI::fromJsonValue(m_line_amounts, json[QString("lineAmounts")]);
    m_line_amounts_isSet = !json[QString("lineAmounts")].isNull() && m_line_amounts_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_merchant_address_isValid = ::OpenAPI::fromJsonValue(m_merchant_address, json[QString("merchantAddress")]);
    m_merchant_address_isSet = !json[QString("merchantAddress")].isNull() && m_merchant_address_isValid;

    m_merchant_city_isValid = ::OpenAPI::fromJsonValue(m_merchant_city, json[QString("merchantCity")]);
    m_merchant_city_isSet = !json[QString("merchantCity")].isNull() && m_merchant_city_isValid;

    m_merchant_country_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_country_code, json[QString("merchantCountryCode")]);
    m_merchant_country_code_isSet = !json[QString("merchantCountryCode")].isNull() && m_merchant_country_code_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_merchant_postal_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_postal_code, json[QString("merchantPostalCode")]);
    m_merchant_postal_code_isSet = !json[QString("merchantPostalCode")].isNull() && m_merchant_postal_code_isValid;

    m_merchant_state_isValid = ::OpenAPI::fromJsonValue(m_merchant_state, json[QString("merchantState")]);
    m_merchant_state_isSet = !json[QString("merchantState")].isNull() && m_merchant_state_isValid;

    m_merchant_types_isValid = ::OpenAPI::fromJsonValue(m_merchant_types, json[QString("merchantTypes")]);
    m_merchant_types_isSet = !json[QString("merchantTypes")].isNull() && m_merchant_types_isValid;

    m_numbers_isValid = ::OpenAPI::fromJsonValue(m_numbers, json[QString("numbers")]);
    m_numbers_isSet = !json[QString("numbers")].isNull() && m_numbers_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;
}

QString OAIReceiptVerboseResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiptVerboseResult::asJsonObject() const {
    QJsonObject obj;
    if (m_amounts.size() > 0) {
        obj.insert(QString("amounts"), ::OpenAPI::toJsonValue(m_amounts));
    }
    if (m_confidence_level_isSet) {
        obj.insert(QString("confidenceLevel"), ::OpenAPI::toJsonValue(m_confidence_level));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_due_date.isSet()) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_elapsed_isSet) {
        obj.insert(QString("elapsed"), ::OpenAPI::toJsonValue(m_elapsed));
    }
    if (m_entities.isSet()) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_items_count.isSet()) {
        obj.insert(QString("itemsCount"), ::OpenAPI::toJsonValue(m_items_count));
    }
    if (m_line_amounts.size() > 0) {
        obj.insert(QString("lineAmounts"), ::OpenAPI::toJsonValue(m_line_amounts));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_merchant_address.isSet()) {
        obj.insert(QString("merchantAddress"), ::OpenAPI::toJsonValue(m_merchant_address));
    }
    if (m_merchant_city.isSet()) {
        obj.insert(QString("merchantCity"), ::OpenAPI::toJsonValue(m_merchant_city));
    }
    if (m_merchant_country_code.isSet()) {
        obj.insert(QString("merchantCountryCode"), ::OpenAPI::toJsonValue(m_merchant_country_code));
    }
    if (m_merchant_name.isSet()) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_merchant_postal_code.isSet()) {
        obj.insert(QString("merchantPostalCode"), ::OpenAPI::toJsonValue(m_merchant_postal_code));
    }
    if (m_merchant_state.isSet()) {
        obj.insert(QString("merchantState"), ::OpenAPI::toJsonValue(m_merchant_state));
    }
    if (m_merchant_types.isSet()) {
        obj.insert(QString("merchantTypes"), ::OpenAPI::toJsonValue(m_merchant_types));
    }
    if (m_numbers.size() > 0) {
        obj.insert(QString("numbers"), ::OpenAPI::toJsonValue(m_numbers));
    }
    if (m_payment_type.isSet()) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_tax_amount.isSet()) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_total_amount.isSet()) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

QList<QString> OAIReceiptVerboseResult::getAmounts() const {
    return m_amounts;
}
void OAIReceiptVerboseResult::setAmounts(const QList<QString> &amounts) {
    m_amounts = amounts;
    m_amounts_isSet = true;
}

bool OAIReceiptVerboseResult::is_amounts_Set() const{
    return m_amounts_isSet;
}

bool OAIReceiptVerboseResult::is_amounts_Valid() const{
    return m_amounts_isValid;
}

double OAIReceiptVerboseResult::getConfidenceLevel() const {
    return m_confidence_level;
}
void OAIReceiptVerboseResult::setConfidenceLevel(const double &confidence_level) {
    m_confidence_level = confidence_level;
    m_confidence_level_isSet = true;
}

bool OAIReceiptVerboseResult::is_confidence_level_Set() const{
    return m_confidence_level_isSet;
}

bool OAIReceiptVerboseResult::is_confidence_level_Valid() const{
    return m_confidence_level_isValid;
}

QDate OAIReceiptVerboseResult::getDate() const {
    return m_date;
}
void OAIReceiptVerboseResult::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReceiptVerboseResult::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReceiptVerboseResult::is_date_Valid() const{
    return m_date_isValid;
}

OAIDueDate OAIReceiptVerboseResult::getDueDate() const {
    return m_due_date;
}
void OAIReceiptVerboseResult::setDueDate(const OAIDueDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIReceiptVerboseResult::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIReceiptVerboseResult::is_due_date_Valid() const{
    return m_due_date_isValid;
}

double OAIReceiptVerboseResult::getElapsed() const {
    return m_elapsed;
}
void OAIReceiptVerboseResult::setElapsed(const double &elapsed) {
    m_elapsed = elapsed;
    m_elapsed_isSet = true;
}

bool OAIReceiptVerboseResult::is_elapsed_Set() const{
    return m_elapsed_isSet;
}

bool OAIReceiptVerboseResult::is_elapsed_Valid() const{
    return m_elapsed_isValid;
}

OAIEntities OAIReceiptVerboseResult::getEntities() const {
    return m_entities;
}
void OAIReceiptVerboseResult::setEntities(const OAIEntities &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIReceiptVerboseResult::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIReceiptVerboseResult::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIReceiptVerboseResult::getError() const {
    return m_error;
}
void OAIReceiptVerboseResult::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIReceiptVerboseResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIReceiptVerboseResult::is_error_Valid() const{
    return m_error_isValid;
}

OAIItemsCount OAIReceiptVerboseResult::getItemsCount() const {
    return m_items_count;
}
void OAIReceiptVerboseResult::setItemsCount(const OAIItemsCount &items_count) {
    m_items_count = items_count;
    m_items_count_isSet = true;
}

bool OAIReceiptVerboseResult::is_items_count_Set() const{
    return m_items_count_isSet;
}

bool OAIReceiptVerboseResult::is_items_count_Valid() const{
    return m_items_count_isValid;
}

QList<QString> OAIReceiptVerboseResult::getLineAmounts() const {
    return m_line_amounts;
}
void OAIReceiptVerboseResult::setLineAmounts(const QList<QString> &line_amounts) {
    m_line_amounts = line_amounts;
    m_line_amounts_isSet = true;
}

bool OAIReceiptVerboseResult::is_line_amounts_Set() const{
    return m_line_amounts_isSet;
}

bool OAIReceiptVerboseResult::is_line_amounts_Valid() const{
    return m_line_amounts_isValid;
}

OAILocationResult OAIReceiptVerboseResult::getLocation() const {
    return m_location;
}
void OAIReceiptVerboseResult::setLocation(const OAILocationResult &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIReceiptVerboseResult::is_location_Set() const{
    return m_location_isSet;
}

bool OAIReceiptVerboseResult::is_location_Valid() const{
    return m_location_isValid;
}

OAIMerchantAddress1 OAIReceiptVerboseResult::getMerchantAddress() const {
    return m_merchant_address;
}
void OAIReceiptVerboseResult::setMerchantAddress(const OAIMerchantAddress1 &merchant_address) {
    m_merchant_address = merchant_address;
    m_merchant_address_isSet = true;
}

bool OAIReceiptVerboseResult::is_merchant_address_Set() const{
    return m_merchant_address_isSet;
}

bool OAIReceiptVerboseResult::is_merchant_address_Valid() const{
    return m_merchant_address_isValid;
}

OAIMerchantCity1 OAIReceiptVerboseResult::getMerchantCity() const {
    return m_merchant_city;
}
void OAIReceiptVerboseResult::setMerchantCity(const OAIMerchantCity1 &merchant_city) {
    m_merchant_city = merchant_city;
    m_merchant_city_isSet = true;
}

bool OAIReceiptVerboseResult::is_merchant_city_Set() const{
    return m_merchant_city_isSet;
}

bool OAIReceiptVerboseResult::is_merchant_city_Valid() const{
    return m_merchant_city_isValid;
}

OAIMerchantCountryCode1 OAIReceiptVerboseResult::getMerchantCountryCode() const {
    return m_merchant_country_code;
}
void OAIReceiptVerboseResult::setMerchantCountryCode(const OAIMerchantCountryCode1 &merchant_country_code) {
    m_merchant_country_code = merchant_country_code;
    m_merchant_country_code_isSet = true;
}

bool OAIReceiptVerboseResult::is_merchant_country_code_Set() const{
    return m_merchant_country_code_isSet;
}

bool OAIReceiptVerboseResult::is_merchant_country_code_Valid() const{
    return m_merchant_country_code_isValid;
}

OAIMerchantName1 OAIReceiptVerboseResult::getMerchantName() const {
    return m_merchant_name;
}
void OAIReceiptVerboseResult::setMerchantName(const OAIMerchantName1 &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIReceiptVerboseResult::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIReceiptVerboseResult::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

OAIMerchantPostalCode1 OAIReceiptVerboseResult::getMerchantPostalCode() const {
    return m_merchant_postal_code;
}
void OAIReceiptVerboseResult::setMerchantPostalCode(const OAIMerchantPostalCode1 &merchant_postal_code) {
    m_merchant_postal_code = merchant_postal_code;
    m_merchant_postal_code_isSet = true;
}

bool OAIReceiptVerboseResult::is_merchant_postal_code_Set() const{
    return m_merchant_postal_code_isSet;
}

bool OAIReceiptVerboseResult::is_merchant_postal_code_Valid() const{
    return m_merchant_postal_code_isValid;
}

OAIMerchantState OAIReceiptVerboseResult::getMerchantState() const {
    return m_merchant_state;
}
void OAIReceiptVerboseResult::setMerchantState(const OAIMerchantState &merchant_state) {
    m_merchant_state = merchant_state;
    m_merchant_state_isSet = true;
}

bool OAIReceiptVerboseResult::is_merchant_state_Set() const{
    return m_merchant_state_isSet;
}

bool OAIReceiptVerboseResult::is_merchant_state_Valid() const{
    return m_merchant_state_isValid;
}

OAIMerchantTypes1 OAIReceiptVerboseResult::getMerchantTypes() const {
    return m_merchant_types;
}
void OAIReceiptVerboseResult::setMerchantTypes(const OAIMerchantTypes1 &merchant_types) {
    m_merchant_types = merchant_types;
    m_merchant_types_isSet = true;
}

bool OAIReceiptVerboseResult::is_merchant_types_Set() const{
    return m_merchant_types_isSet;
}

bool OAIReceiptVerboseResult::is_merchant_types_Valid() const{
    return m_merchant_types_isValid;
}

QList<QString> OAIReceiptVerboseResult::getNumbers() const {
    return m_numbers;
}
void OAIReceiptVerboseResult::setNumbers(const QList<QString> &numbers) {
    m_numbers = numbers;
    m_numbers_isSet = true;
}

bool OAIReceiptVerboseResult::is_numbers_Set() const{
    return m_numbers_isSet;
}

bool OAIReceiptVerboseResult::is_numbers_Valid() const{
    return m_numbers_isValid;
}

OAIPaymentType OAIReceiptVerboseResult::getPaymentType() const {
    return m_payment_type;
}
void OAIReceiptVerboseResult::setPaymentType(const OAIPaymentType &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIReceiptVerboseResult::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIReceiptVerboseResult::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

OAITaxAmount1 OAIReceiptVerboseResult::getTaxAmount() const {
    return m_tax_amount;
}
void OAIReceiptVerboseResult::setTaxAmount(const OAITaxAmount1 &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIReceiptVerboseResult::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIReceiptVerboseResult::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

OAIText OAIReceiptVerboseResult::getText() const {
    return m_text;
}
void OAIReceiptVerboseResult::setText(const OAIText &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIReceiptVerboseResult::is_text_Set() const{
    return m_text_isSet;
}

bool OAIReceiptVerboseResult::is_text_Valid() const{
    return m_text_isValid;
}

OAITotalAmount1 OAIReceiptVerboseResult::getTotalAmount() const {
    return m_total_amount;
}
void OAIReceiptVerboseResult::setTotalAmount(const OAITotalAmount1 &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIReceiptVerboseResult::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIReceiptVerboseResult::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIReceiptVerboseResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_count.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_amounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_city.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_country_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_postal_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiptVerboseResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
