/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalanceOwing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalanceOwing::OAIBalanceOwing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalanceOwing::OAIBalanceOwing() {
    this->initializeModel();
}

OAIBalanceOwing::~OAIBalanceOwing() {}

void OAIBalanceOwing::initializeModel() {

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;
}

void OAIBalanceOwing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalanceOwing::fromJsonObject(QJsonObject json) {

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;
}

QString OAIBalanceOwing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalanceOwing::asJsonObject() const {
    QJsonObject obj;
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    return obj;
}

double OAIBalanceOwing::getMax() const {
    return m_max;
}
void OAIBalanceOwing::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIBalanceOwing::is_max_Set() const{
    return m_max_isSet;
}

bool OAIBalanceOwing::is_max_Valid() const{
    return m_max_isValid;
}

double OAIBalanceOwing::getMin() const {
    return m_min;
}
void OAIBalanceOwing::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIBalanceOwing::is_min_Set() const{
    return m_min_isSet;
}

bool OAIBalanceOwing::is_min_Valid() const{
    return m_min_isValid;
}

bool OAIBalanceOwing::isSkip() const {
    return m_skip;
}
void OAIBalanceOwing::setSkip(const bool &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAIBalanceOwing::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAIBalanceOwing::is_skip_Valid() const{
    return m_skip_isValid;
}

bool OAIBalanceOwing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalanceOwing::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_isValid && m_min_isValid && true;
}

} // namespace OpenAPI
