/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiptMatchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiptMatchResult::OAIReceiptMatchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiptMatchResult::OAIReceiptMatchResult() {
    this->initializeModel();
}

OAIReceiptMatchResult::~OAIReceiptMatchResult() {}

void OAIReceiptMatchResult::initializeModel() {

    m_confidence_level_isSet = false;
    m_confidence_level_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;
}

void OAIReceiptMatchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiptMatchResult::fromJsonObject(QJsonObject json) {

    m_confidence_level_isValid = ::OpenAPI::fromJsonValue(m_confidence_level, json[QString("confidenceLevel")]);
    m_confidence_level_isSet = !json[QString("confidenceLevel")].isNull() && m_confidence_level_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;
}

QString OAIReceiptMatchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiptMatchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_level_isSet) {
        obj.insert(QString("confidenceLevel"), ::OpenAPI::toJsonValue(m_confidence_level));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    return obj;
}

double OAIReceiptMatchResult::getConfidenceLevel() const {
    return m_confidence_level;
}
void OAIReceiptMatchResult::setConfidenceLevel(const double &confidence_level) {
    m_confidence_level = confidence_level;
    m_confidence_level_isSet = true;
}

bool OAIReceiptMatchResult::is_confidence_level_Set() const{
    return m_confidence_level_isSet;
}

bool OAIReceiptMatchResult::is_confidence_level_Valid() const{
    return m_confidence_level_isValid;
}

QDate OAIReceiptMatchResult::getDate() const {
    return m_date;
}
void OAIReceiptMatchResult::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReceiptMatchResult::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReceiptMatchResult::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIReceiptMatchResult::getError() const {
    return m_error;
}
void OAIReceiptMatchResult::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIReceiptMatchResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAIReceiptMatchResult::is_error_Valid() const{
    return m_error_isValid;
}

OAIMatch OAIReceiptMatchResult::getMatch() const {
    return m_match;
}
void OAIReceiptMatchResult::setMatch(const OAIMatch &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIReceiptMatchResult::is_match_Set() const{
    return m_match_isSet;
}

bool OAIReceiptMatchResult::is_match_Valid() const{
    return m_match_isValid;
}

bool OAIReceiptMatchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiptMatchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
