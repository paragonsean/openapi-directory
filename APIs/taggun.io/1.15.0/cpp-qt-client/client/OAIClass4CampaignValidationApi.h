/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClass4CampaignValidationApi_H
#define OAI_OAIClass4CampaignValidationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBadRequestError.h"
#include "OAIHttpFileElement.h"
#include "OAIModel9.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClass4CampaignValidationApi : public QObject {
    Q_OBJECT

public:
    OAIClass4CampaignValidationApi(const int timeOut = 0);
    ~OAIClass4CampaignValidationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  campaign_id QString [required]
    */
    virtual void deleteApiValidationV1CampaignSettingsDeleteCampaignid(const QString &apikey, const QString &campaign_id);

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  campaign_id QString [required]
    */
    virtual void getApiValidationV1CampaignSettingsCampaignid(const QString &apikey, const QString &campaign_id);

    /**
    * @param[in]  apikey QString [required]
    */
    virtual void getApiValidationV1CampaignSettingsList(const QString &apikey);

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  incognito bool [optional]
    * @param[in]  ip_address QString [optional]
    * @param[in]  near QString [optional]
    * @param[in]  reference_id QString [optional]
    */
    virtual void postApiValidationV1CampaignFile(const QString &apikey, const QString &campaign_id, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &incognito = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ip_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &near = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reference_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  product_verification_number QString [required]
    * @param[in]  file OAIHttpFileElement [optional]
    * @param[in]  incognito bool [optional]
    * @param[in]  sub_account_id QString [optional]
    * @param[in]  reference_id QString [optional]
    */
    virtual void postApiValidationV1CampaignProductvalidationFile(const QString &apikey, const QString &product_verification_number, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &incognito = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sub_account_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reference_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  body OAIModel9 [optional]
    */
    virtual void postApiValidationV1CampaignSettingsCreateCampaignid(const QString &apikey, const QString &campaign_id, const ::OpenAPI::OptionalParam<OAIModel9> &body = ::OpenAPI::OptionalParam<OAIModel9>());

    /**
    * @param[in]  apikey QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  body OAIModel9 [optional]
    */
    virtual void putApiValidationV1CampaignSettingsUpdateCampaignid(const QString &apikey, const QString &campaign_id, const ::OpenAPI::OptionalParam<OAIModel9> &body = ::OpenAPI::OptionalParam<OAIModel9>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteApiValidationV1CampaignSettingsDeleteCampaignidCallback(OAIHttpRequestWorker *worker);
    void getApiValidationV1CampaignSettingsCampaignidCallback(OAIHttpRequestWorker *worker);
    void getApiValidationV1CampaignSettingsListCallback(OAIHttpRequestWorker *worker);
    void postApiValidationV1CampaignFileCallback(OAIHttpRequestWorker *worker);
    void postApiValidationV1CampaignProductvalidationFileCallback(OAIHttpRequestWorker *worker);
    void postApiValidationV1CampaignSettingsCreateCampaignidCallback(OAIHttpRequestWorker *worker);
    void putApiValidationV1CampaignSettingsUpdateCampaignidCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteApiValidationV1CampaignSettingsDeleteCampaignidSignal();
    void getApiValidationV1CampaignSettingsCampaignidSignal();
    void getApiValidationV1CampaignSettingsListSignal();
    void postApiValidationV1CampaignFileSignal(QString summary);
    void postApiValidationV1CampaignProductvalidationFileSignal(QString summary);
    void postApiValidationV1CampaignSettingsCreateCampaignidSignal();
    void putApiValidationV1CampaignSettingsUpdateCampaignidSignal();


    void deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalFull(OAIHttpRequestWorker *worker);
    void getApiValidationV1CampaignSettingsCampaignidSignalFull(OAIHttpRequestWorker *worker);
    void getApiValidationV1CampaignSettingsListSignalFull(OAIHttpRequestWorker *worker);
    void postApiValidationV1CampaignFileSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postApiValidationV1CampaignProductvalidationFileSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postApiValidationV1CampaignSettingsCreateCampaignidSignalFull(OAIHttpRequestWorker *worker);
    void putApiValidationV1CampaignSettingsUpdateCampaignidSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalError() instead")
    void deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiValidationV1CampaignSettingsCampaignidSignalError() instead")
    void getApiValidationV1CampaignSettingsCampaignidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getApiValidationV1CampaignSettingsCampaignidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiValidationV1CampaignSettingsListSignalError() instead")
    void getApiValidationV1CampaignSettingsListSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getApiValidationV1CampaignSettingsListSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiValidationV1CampaignFileSignalError() instead")
    void postApiValidationV1CampaignFileSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiValidationV1CampaignFileSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiValidationV1CampaignProductvalidationFileSignalError() instead")
    void postApiValidationV1CampaignProductvalidationFileSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiValidationV1CampaignProductvalidationFileSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiValidationV1CampaignSettingsCreateCampaignidSignalError() instead")
    void postApiValidationV1CampaignSettingsCreateCampaignidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postApiValidationV1CampaignSettingsCreateCampaignidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putApiValidationV1CampaignSettingsUpdateCampaignidSignalError() instead")
    void putApiValidationV1CampaignSettingsUpdateCampaignidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putApiValidationV1CampaignSettingsUpdateCampaignidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalErrorFull() instead")
    void deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiValidationV1CampaignSettingsDeleteCampaignidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiValidationV1CampaignSettingsCampaignidSignalErrorFull() instead")
    void getApiValidationV1CampaignSettingsCampaignidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiValidationV1CampaignSettingsCampaignidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiValidationV1CampaignSettingsListSignalErrorFull() instead")
    void getApiValidationV1CampaignSettingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiValidationV1CampaignSettingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiValidationV1CampaignFileSignalErrorFull() instead")
    void postApiValidationV1CampaignFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiValidationV1CampaignFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiValidationV1CampaignProductvalidationFileSignalErrorFull() instead")
    void postApiValidationV1CampaignProductvalidationFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiValidationV1CampaignProductvalidationFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiValidationV1CampaignSettingsCreateCampaignidSignalErrorFull() instead")
    void postApiValidationV1CampaignSettingsCreateCampaignidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiValidationV1CampaignSettingsCreateCampaignidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putApiValidationV1CampaignSettingsUpdateCampaignidSignalErrorFull() instead")
    void putApiValidationV1CampaignSettingsUpdateCampaignidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putApiValidationV1CampaignSettingsUpdateCampaignidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
