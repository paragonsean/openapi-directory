/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GrossAmount;
import org.openapitools.client.model.NetAmount;
import org.openapitools.client.model.TaxAmount2;
import org.openapitools.client.model.TaxRate;
import org.openapitools.client.model.TaxType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:13.543030-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Data2 {
  public static final String SERIALIZED_NAME_GROSS_AMOUNT = "grossAmount";
  @SerializedName(SERIALIZED_NAME_GROSS_AMOUNT)
  private GrossAmount grossAmount;

  public static final String SERIALIZED_NAME_NET_AMOUNT = "netAmount";
  @SerializedName(SERIALIZED_NAME_NET_AMOUNT)
  private NetAmount netAmount;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "taxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private TaxAmount2 taxAmount;

  public static final String SERIALIZED_NAME_TAX_RATE = "taxRate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private TaxRate taxRate;

  public static final String SERIALIZED_NAME_TAX_TYPE = "taxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private TaxType taxType;

  public Data2() {
  }

  public Data2 grossAmount(GrossAmount grossAmount) {
    this.grossAmount = grossAmount;
    return this;
  }

  /**
   * Get grossAmount
   * @return grossAmount
   */
  @javax.annotation.Nullable
  public GrossAmount getGrossAmount() {
    return grossAmount;
  }

  public void setGrossAmount(GrossAmount grossAmount) {
    this.grossAmount = grossAmount;
  }


  public Data2 netAmount(NetAmount netAmount) {
    this.netAmount = netAmount;
    return this;
  }

  /**
   * Get netAmount
   * @return netAmount
   */
  @javax.annotation.Nullable
  public NetAmount getNetAmount() {
    return netAmount;
  }

  public void setNetAmount(NetAmount netAmount) {
    this.netAmount = netAmount;
  }


  public Data2 taxAmount(TaxAmount2 taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Get taxAmount
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public TaxAmount2 getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(TaxAmount2 taxAmount) {
    this.taxAmount = taxAmount;
  }


  public Data2 taxRate(TaxRate taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * Get taxRate
   * @return taxRate
   */
  @javax.annotation.Nullable
  public TaxRate getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(TaxRate taxRate) {
    this.taxRate = taxRate;
  }


  public Data2 taxType(TaxType taxType) {
    this.taxType = taxType;
    return this;
  }

  /**
   * Get taxType
   * @return taxType
   */
  @javax.annotation.Nullable
  public TaxType getTaxType() {
    return taxType;
  }

  public void setTaxType(TaxType taxType) {
    this.taxType = taxType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Data2 data2 = (Data2) o;
    return Objects.equals(this.grossAmount, data2.grossAmount) &&
        Objects.equals(this.netAmount, data2.netAmount) &&
        Objects.equals(this.taxAmount, data2.taxAmount) &&
        Objects.equals(this.taxRate, data2.taxRate) &&
        Objects.equals(this.taxType, data2.taxType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grossAmount, netAmount, taxAmount, taxRate, taxType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Data2 {\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("grossAmount");
    openapiFields.add("netAmount");
    openapiFields.add("taxAmount");
    openapiFields.add("taxRate");
    openapiFields.add("taxType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Data2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Data2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Data2 is not found in the empty JSON string", Data2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Data2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Data2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `grossAmount`
      if (jsonObj.get("grossAmount") != null && !jsonObj.get("grossAmount").isJsonNull()) {
        GrossAmount.validateJsonElement(jsonObj.get("grossAmount"));
      }
      // validate the optional field `netAmount`
      if (jsonObj.get("netAmount") != null && !jsonObj.get("netAmount").isJsonNull()) {
        NetAmount.validateJsonElement(jsonObj.get("netAmount"));
      }
      // validate the optional field `taxAmount`
      if (jsonObj.get("taxAmount") != null && !jsonObj.get("taxAmount").isJsonNull()) {
        TaxAmount2.validateJsonElement(jsonObj.get("taxAmount"));
      }
      // validate the optional field `taxRate`
      if (jsonObj.get("taxRate") != null && !jsonObj.get("taxRate").isJsonNull()) {
        TaxRate.validateJsonElement(jsonObj.get("taxRate"));
      }
      // validate the optional field `taxType`
      if (jsonObj.get("taxType") != null && !jsonObj.get("taxType").isJsonNull()) {
        TaxType.validateJsonElement(jsonObj.get("taxType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Data2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Data2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Data2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Data2.class));

       return (TypeAdapter<T>) new TypeAdapter<Data2>() {
           @Override
           public void write(JsonWriter out, Data2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Data2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Data2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Data2
   * @throws IOException if the JSON string is invalid with respect to Data2
   */
  public static Data2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Data2.class);
  }

  /**
   * Convert an instance of Data2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

