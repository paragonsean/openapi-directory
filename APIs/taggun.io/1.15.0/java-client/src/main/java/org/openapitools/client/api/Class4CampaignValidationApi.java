/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequestError;
import java.io.File;
import org.openapitools.client.model.Model9;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class4CampaignValidationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Class4CampaignValidationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class4CampaignValidationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteApiValidationV1CampaignSettingsDeleteCampaignid
     * @param apikey API authentication key. (required)
     * @param campaignId Remove campaign settings with a campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiValidationV1CampaignSettingsDeleteCampaignidCall(String apikey, String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/validation/v1/campaign/settings/delete/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiValidationV1CampaignSettingsDeleteCampaignidValidateBeforeCall(String apikey, String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling deleteApiValidationV1CampaignSettingsDeleteCampaignid(Async)");
        }

        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteApiValidationV1CampaignSettingsDeleteCampaignid(Async)");
        }

        return deleteApiValidationV1CampaignSettingsDeleteCampaignidCall(apikey, campaignId, _callback);

    }

    /**
     * delete campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId Remove campaign settings with a campaign ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApiValidationV1CampaignSettingsDeleteCampaignid(String apikey, String campaignId) throws ApiException {
        deleteApiValidationV1CampaignSettingsDeleteCampaignidWithHttpInfo(apikey, campaignId);
    }

    /**
     * delete campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId Remove campaign settings with a campaign ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiValidationV1CampaignSettingsDeleteCampaignidWithHttpInfo(String apikey, String campaignId) throws ApiException {
        okhttp3.Call localVarCall = deleteApiValidationV1CampaignSettingsDeleteCampaignidValidateBeforeCall(apikey, campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * delete campaign settings for a client (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId Remove campaign settings with a campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiValidationV1CampaignSettingsDeleteCampaignidAsync(String apikey, String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiValidationV1CampaignSettingsDeleteCampaignidValidateBeforeCall(apikey, campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiValidationV1CampaignSettingsCampaignid
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiValidationV1CampaignSettingsCampaignidCall(String apikey, String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/validation/v1/campaign/settings/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiValidationV1CampaignSettingsCampaignidValidateBeforeCall(String apikey, String campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getApiValidationV1CampaignSettingsCampaignid(Async)");
        }

        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getApiValidationV1CampaignSettingsCampaignid(Async)");
        }

        return getApiValidationV1CampaignSettingsCampaignidCall(apikey, campaignId, _callback);

    }

    /**
     * get campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void getApiValidationV1CampaignSettingsCampaignid(String apikey, String campaignId) throws ApiException {
        getApiValidationV1CampaignSettingsCampaignidWithHttpInfo(apikey, campaignId);
    }

    /**
     * get campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiValidationV1CampaignSettingsCampaignidWithHttpInfo(String apikey, String campaignId) throws ApiException {
        okhttp3.Call localVarCall = getApiValidationV1CampaignSettingsCampaignidValidateBeforeCall(apikey, campaignId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * get campaign settings for a client (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiValidationV1CampaignSettingsCampaignidAsync(String apikey, String campaignId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiValidationV1CampaignSettingsCampaignidValidateBeforeCall(apikey, campaignId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiValidationV1CampaignSettingsList
     * @param apikey API authentication key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiValidationV1CampaignSettingsListCall(String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/validation/v1/campaign/settings/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiValidationV1CampaignSettingsListValidateBeforeCall(String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling getApiValidationV1CampaignSettingsList(Async)");
        }

        return getApiValidationV1CampaignSettingsListCall(apikey, _callback);

    }

    /**
     * list all campaign setting IDs for a client
     * 
     * @param apikey API authentication key. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void getApiValidationV1CampaignSettingsList(String apikey) throws ApiException {
        getApiValidationV1CampaignSettingsListWithHttpInfo(apikey);
    }

    /**
     * list all campaign setting IDs for a client
     * 
     * @param apikey API authentication key. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getApiValidationV1CampaignSettingsListWithHttpInfo(String apikey) throws ApiException {
        okhttp3.Call localVarCall = getApiValidationV1CampaignSettingsListValidateBeforeCall(apikey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * list all campaign setting IDs for a client (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiValidationV1CampaignSettingsListAsync(String apikey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiValidationV1CampaignSettingsListValidateBeforeCall(apikey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiValidationV1CampaignFile
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiValidationV1CampaignFileCall(String apikey, String campaignId, File _file, Boolean incognito, String ipAddress, String near, String referenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/validation/v1/campaign/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (incognito != null) {
            localVarFormParams.put("incognito", incognito);
        }

        if (ipAddress != null) {
            localVarFormParams.put("ipAddress", ipAddress);
        }

        if (near != null) {
            localVarFormParams.put("near", near);
        }

        if (campaignId != null) {
            localVarFormParams.put("campaignId", campaignId);
        }

        if (referenceId != null) {
            localVarFormParams.put("referenceId", referenceId);
        }

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiValidationV1CampaignFileValidateBeforeCall(String apikey, String campaignId, File _file, Boolean incognito, String ipAddress, String near, String referenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling postApiValidationV1CampaignFile(Async)");
        }

        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postApiValidationV1CampaignFile(Async)");
        }

        return postApiValidationV1CampaignFileCall(apikey, campaignId, _file, incognito, ipAddress, near, referenceId, _callback);

    }

    /**
     * validate and match a receipt against a campaign validation settings by uploading an image file
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public String postApiValidationV1CampaignFile(String apikey, String campaignId, File _file, Boolean incognito, String ipAddress, String near, String referenceId) throws ApiException {
        ApiResponse<String> localVarResp = postApiValidationV1CampaignFileWithHttpInfo(apikey, campaignId, _file, incognito, ipAddress, near, referenceId);
        return localVarResp.getData();
    }

    /**
     * validate and match a receipt against a campaign validation settings by uploading an image file
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postApiValidationV1CampaignFileWithHttpInfo(String apikey, String campaignId, File _file, Boolean incognito, String ipAddress, String near, String referenceId) throws ApiException {
        okhttp3.Call localVarCall = postApiValidationV1CampaignFileValidateBeforeCall(apikey, campaignId, _file, incognito, ipAddress, near, referenceId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * validate and match a receipt against a campaign validation settings by uploading an image file (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiValidationV1CampaignFileAsync(String apikey, String campaignId, File _file, Boolean incognito, String ipAddress, String near, String referenceId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiValidationV1CampaignFileValidateBeforeCall(apikey, campaignId, _file, incognito, ipAddress, near, referenceId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiValidationV1CampaignProductvalidationFile
     * @param apikey API authentication key. (required)
     * @param productVerificationNumber The number of the product to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiValidationV1CampaignProductvalidationFileCall(String apikey, String productVerificationNumber, File _file, Boolean incognito, String subAccountId, String referenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/validation/v1/campaign/product-validation/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (productVerificationNumber != null) {
            localVarFormParams.put("productVerificationNumber", productVerificationNumber);
        }

        if (incognito != null) {
            localVarFormParams.put("incognito", incognito);
        }

        if (subAccountId != null) {
            localVarFormParams.put("subAccountId", subAccountId);
        }

        if (referenceId != null) {
            localVarFormParams.put("referenceId", referenceId);
        }

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiValidationV1CampaignProductvalidationFileValidateBeforeCall(String apikey, String productVerificationNumber, File _file, Boolean incognito, String subAccountId, String referenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling postApiValidationV1CampaignProductvalidationFile(Async)");
        }

        // verify the required parameter 'productVerificationNumber' is set
        if (productVerificationNumber == null) {
            throw new ApiException("Missing the required parameter 'productVerificationNumber' when calling postApiValidationV1CampaignProductvalidationFile(Async)");
        }

        return postApiValidationV1CampaignProductvalidationFileCall(apikey, productVerificationNumber, _file, incognito, subAccountId, referenceId, _callback);

    }

    /**
     * validate if user-submitted info like serial number are detected an image file
     * 
     * @param apikey API authentication key. (required)
     * @param productVerificationNumber The number of the product to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public String postApiValidationV1CampaignProductvalidationFile(String apikey, String productVerificationNumber, File _file, Boolean incognito, String subAccountId, String referenceId) throws ApiException {
        ApiResponse<String> localVarResp = postApiValidationV1CampaignProductvalidationFileWithHttpInfo(apikey, productVerificationNumber, _file, incognito, subAccountId, referenceId);
        return localVarResp.getData();
    }

    /**
     * validate if user-submitted info like serial number are detected an image file
     * 
     * @param apikey API authentication key. (required)
     * @param productVerificationNumber The number of the product to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> postApiValidationV1CampaignProductvalidationFileWithHttpInfo(String apikey, String productVerificationNumber, File _file, Boolean incognito, String subAccountId, String referenceId) throws ApiException {
        okhttp3.Call localVarCall = postApiValidationV1CampaignProductvalidationFileValidateBeforeCall(apikey, productVerificationNumber, _file, incognito, subAccountId, referenceId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * validate if user-submitted info like serial number are detected an image file (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param productVerificationNumber The number of the product to validate the receipt (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiValidationV1CampaignProductvalidationFileAsync(String apikey, String productVerificationNumber, File _file, Boolean incognito, String subAccountId, String referenceId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiValidationV1CampaignProductvalidationFileValidateBeforeCall(apikey, productVerificationNumber, _file, incognito, subAccountId, referenceId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiValidationV1CampaignSettingsCreateCampaignid
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiValidationV1CampaignSettingsCreateCampaignidCall(String apikey, String campaignId, Model9 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/validation/v1/campaign/settings/create/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiValidationV1CampaignSettingsCreateCampaignidValidateBeforeCall(String apikey, String campaignId, Model9 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling postApiValidationV1CampaignSettingsCreateCampaignid(Async)");
        }

        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling postApiValidationV1CampaignSettingsCreateCampaignid(Async)");
        }

        return postApiValidationV1CampaignSettingsCreateCampaignidCall(apikey, campaignId, body, _callback);

    }

    /**
     * create campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void postApiValidationV1CampaignSettingsCreateCampaignid(String apikey, String campaignId, Model9 body) throws ApiException {
        postApiValidationV1CampaignSettingsCreateCampaignidWithHttpInfo(apikey, campaignId, body);
    }

    /**
     * create campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postApiValidationV1CampaignSettingsCreateCampaignidWithHttpInfo(String apikey, String campaignId, Model9 body) throws ApiException {
        okhttp3.Call localVarCall = postApiValidationV1CampaignSettingsCreateCampaignidValidateBeforeCall(apikey, campaignId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * create campaign settings for a client (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiValidationV1CampaignSettingsCreateCampaignidAsync(String apikey, String campaignId, Model9 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiValidationV1CampaignSettingsCreateCampaignidValidateBeforeCall(apikey, campaignId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putApiValidationV1CampaignSettingsUpdateCampaignid
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiValidationV1CampaignSettingsUpdateCampaignidCall(String apikey, String campaignId, Model9 body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/validation/v1/campaign/settings/update/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putApiValidationV1CampaignSettingsUpdateCampaignidValidateBeforeCall(String apikey, String campaignId, Model9 body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling putApiValidationV1CampaignSettingsUpdateCampaignid(Async)");
        }

        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling putApiValidationV1CampaignSettingsUpdateCampaignid(Async)");
        }

        return putApiValidationV1CampaignSettingsUpdateCampaignidCall(apikey, campaignId, body, _callback);

    }

    /**
     * update campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void putApiValidationV1CampaignSettingsUpdateCampaignid(String apikey, String campaignId, Model9 body) throws ApiException {
        putApiValidationV1CampaignSettingsUpdateCampaignidWithHttpInfo(apikey, campaignId, body);
    }

    /**
     * update campaign settings for a client
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putApiValidationV1CampaignSettingsUpdateCampaignidWithHttpInfo(String apikey, String campaignId, Model9 body) throws ApiException {
        okhttp3.Call localVarCall = putApiValidationV1CampaignSettingsUpdateCampaignidValidateBeforeCall(apikey, campaignId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * update campaign settings for a client (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param campaignId The ID of the campaign to validate the receipt (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putApiValidationV1CampaignSettingsUpdateCampaignidAsync(String apikey, String campaignId, Model9 body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putApiValidationV1CampaignSettingsUpdateCampaignidValidateBeforeCall(apikey, campaignId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
