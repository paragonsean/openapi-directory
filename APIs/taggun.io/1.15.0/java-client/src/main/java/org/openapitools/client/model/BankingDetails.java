/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountNumber;
import org.openapitools.client.model.BankName;
import org.openapitools.client.model.BranchName;
import org.openapitools.client.model.BranchNumber;
import org.openapitools.client.model.Recipient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BankingDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:13.543030-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BankingDetails {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private AccountNumber accountNumber;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private BankName bankName;

  public static final String SERIALIZED_NAME_BRANCH_NAME = "branchName";
  @SerializedName(SERIALIZED_NAME_BRANCH_NAME)
  private BranchName branchName;

  public static final String SERIALIZED_NAME_BRANCH_NUMBER = "branchNumber";
  @SerializedName(SERIALIZED_NAME_BRANCH_NUMBER)
  private BranchNumber branchNumber;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Recipient recipient;

  public BankingDetails() {
  }

  public BankingDetails accountNumber(AccountNumber accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Get accountNumber
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public AccountNumber getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(AccountNumber accountNumber) {
    this.accountNumber = accountNumber;
  }


  public BankingDetails bankName(BankName bankName) {
    this.bankName = bankName;
    return this;
  }

  /**
   * Get bankName
   * @return bankName
   */
  @javax.annotation.Nullable
  public BankName getBankName() {
    return bankName;
  }

  public void setBankName(BankName bankName) {
    this.bankName = bankName;
  }


  public BankingDetails branchName(BranchName branchName) {
    this.branchName = branchName;
    return this;
  }

  /**
   * Get branchName
   * @return branchName
   */
  @javax.annotation.Nullable
  public BranchName getBranchName() {
    return branchName;
  }

  public void setBranchName(BranchName branchName) {
    this.branchName = branchName;
  }


  public BankingDetails branchNumber(BranchNumber branchNumber) {
    this.branchNumber = branchNumber;
    return this;
  }

  /**
   * Get branchNumber
   * @return branchNumber
   */
  @javax.annotation.Nullable
  public BranchNumber getBranchNumber() {
    return branchNumber;
  }

  public void setBranchNumber(BranchNumber branchNumber) {
    this.branchNumber = branchNumber;
  }


  public BankingDetails recipient(Recipient recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Get recipient
   * @return recipient
   */
  @javax.annotation.Nullable
  public Recipient getRecipient() {
    return recipient;
  }

  public void setRecipient(Recipient recipient) {
    this.recipient = recipient;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BankingDetails bankingDetails = (BankingDetails) o;
    return Objects.equals(this.accountNumber, bankingDetails.accountNumber) &&
        Objects.equals(this.bankName, bankingDetails.bankName) &&
        Objects.equals(this.branchName, bankingDetails.branchName) &&
        Objects.equals(this.branchNumber, bankingDetails.branchNumber) &&
        Objects.equals(this.recipient, bankingDetails.recipient);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, bankName, branchName, branchNumber, recipient);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BankingDetails {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    branchNumber: ").append(toIndentedString(branchNumber)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountNumber");
    openapiFields.add("bankName");
    openapiFields.add("branchName");
    openapiFields.add("branchNumber");
    openapiFields.add("recipient");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BankingDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BankingDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BankingDetails is not found in the empty JSON string", BankingDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BankingDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BankingDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountNumber`
      if (jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) {
        AccountNumber.validateJsonElement(jsonObj.get("accountNumber"));
      }
      // validate the optional field `bankName`
      if (jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) {
        BankName.validateJsonElement(jsonObj.get("bankName"));
      }
      // validate the optional field `branchName`
      if (jsonObj.get("branchName") != null && !jsonObj.get("branchName").isJsonNull()) {
        BranchName.validateJsonElement(jsonObj.get("branchName"));
      }
      // validate the optional field `branchNumber`
      if (jsonObj.get("branchNumber") != null && !jsonObj.get("branchNumber").isJsonNull()) {
        BranchNumber.validateJsonElement(jsonObj.get("branchNumber"));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        Recipient.validateJsonElement(jsonObj.get("recipient"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BankingDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BankingDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BankingDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BankingDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BankingDetails>() {
           @Override
           public void write(JsonWriter out, BankingDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BankingDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BankingDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BankingDetails
   * @throws IOException if the JSON string is invalid with respect to BankingDetails
   */
  public static BankingDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BankingDetails.class);
  }

  /**
   * Convert an instance of BankingDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

