/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StoragePayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:13.543030-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoragePayload {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_EXTRACT_TIME = "extractTime";
  @SerializedName(SERIALIZED_NAME_EXTRACT_TIME)
  private Boolean extractTime = false;

  public static final String SERIALIZED_NAME_IGNORE_MERCHANT_NAME = "ignoreMerchantName";
  @SerializedName(SERIALIZED_NAME_IGNORE_MERCHANT_NAME)
  private String ignoreMerchantName;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  /**
   * Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    EN("en"),
    
    ES("es"),
    
    FR("fr"),
    
    JP("jp"),
    
    HE("he"),
    
    IW("iw"),
    
    ET("et"),
    
    LV("lv"),
    
    LT("lt"),
    
    FI("fi"),
    
    EL("el"),
    
    ZH("zh");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_MD5 = "md5";
  @SerializedName(SERIALIZED_NAME_MD5)
  private String md5;

  public static final String SERIALIZED_NAME_NEAR = "near";
  @SerializedName(SERIALIZED_NAME_NEAR)
  private String near;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private String referenceId;

  public static final String SERIALIZED_NAME_REFRESH = "refresh";
  @SerializedName(SERIALIZED_NAME_REFRESH)
  private Boolean refresh = false;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_ID = "subAccountId";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_ID)
  private String subAccountId;

  public StoragePayload() {
  }

  public StoragePayload contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public StoragePayload extractTime(Boolean extractTime) {
    this.extractTime = extractTime;
    return this;
  }

  /**
   * Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000.
   * @return extractTime
   */
  @javax.annotation.Nullable
  public Boolean getExtractTime() {
    return extractTime;
  }

  public void setExtractTime(Boolean extractTime) {
    this.extractTime = extractTime;
  }


  public StoragePayload ignoreMerchantName(String ignoreMerchantName) {
    this.ignoreMerchantName = ignoreMerchantName;
    return this;
  }

  /**
   * Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name.
   * @return ignoreMerchantName
   */
  @javax.annotation.Nullable
  public String getIgnoreMerchantName() {
    return ignoreMerchantName;
  }

  public void setIgnoreMerchantName(String ignoreMerchantName) {
    this.ignoreMerchantName = ignoreMerchantName;
  }


  public StoragePayload ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * IP Address of the end user
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public StoragePayload language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public StoragePayload md5(String md5) {
    this.md5 = md5;
    return this;
  }

  /**
   * MD5 hash of the receipt
   * @return md5
   */
  @javax.annotation.Nonnull
  public String getMd5() {
    return md5;
  }

  public void setMd5(String md5) {
    this.md5 = md5;
  }


  public StoragePayload near(String near) {
    this.near = near;
    return this;
  }

  /**
   * A geo location to search for merchant. Typically in the format of city, state, country.
   * @return near
   */
  @javax.annotation.Nullable
  public String getNear() {
    return near;
  }

  public void setNear(String near) {
    this.near = near;
  }


  public StoragePayload referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Tag a request with a unique reference ID for feedback and training purposes
   * @return referenceId
   */
  @javax.annotation.Nullable
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }


  public StoragePayload refresh(Boolean refresh) {
    this.refresh = refresh;
    return this;
  }

  /**
   * Refresh cache if exists
   * @return refresh
   */
  @javax.annotation.Nullable
  public Boolean getRefresh() {
    return refresh;
  }

  public void setRefresh(Boolean refresh) {
    this.refresh = refresh;
  }


  public StoragePayload subAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
    return this;
  }

  /**
   * Tag a request with sub-account ID for billing purposes
   * @return subAccountId
   */
  @javax.annotation.Nullable
  public String getSubAccountId() {
    return subAccountId;
  }

  public void setSubAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoragePayload storagePayload = (StoragePayload) o;
    return Objects.equals(this.contentType, storagePayload.contentType) &&
        Objects.equals(this.extractTime, storagePayload.extractTime) &&
        Objects.equals(this.ignoreMerchantName, storagePayload.ignoreMerchantName) &&
        Objects.equals(this.ipAddress, storagePayload.ipAddress) &&
        Objects.equals(this.language, storagePayload.language) &&
        Objects.equals(this.md5, storagePayload.md5) &&
        Objects.equals(this.near, storagePayload.near) &&
        Objects.equals(this.referenceId, storagePayload.referenceId) &&
        Objects.equals(this.refresh, storagePayload.refresh) &&
        Objects.equals(this.subAccountId, storagePayload.subAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, extractTime, ignoreMerchantName, ipAddress, language, md5, near, referenceId, refresh, subAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoragePayload {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    extractTime: ").append(toIndentedString(extractTime)).append("\n");
    sb.append("    ignoreMerchantName: ").append(toIndentedString(ignoreMerchantName)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    near: ").append(toIndentedString(near)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    subAccountId: ").append(toIndentedString(subAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentType");
    openapiFields.add("extractTime");
    openapiFields.add("ignoreMerchantName");
    openapiFields.add("ipAddress");
    openapiFields.add("language");
    openapiFields.add("md5");
    openapiFields.add("near");
    openapiFields.add("referenceId");
    openapiFields.add("refresh");
    openapiFields.add("subAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contentType");
    openapiRequiredFields.add("md5");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoragePayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoragePayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoragePayload is not found in the empty JSON string", StoragePayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoragePayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoragePayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoragePayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("ignoreMerchantName") != null && !jsonObj.get("ignoreMerchantName").isJsonNull()) && !jsonObj.get("ignoreMerchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreMerchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ignoreMerchantName").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if (!jsonObj.get("md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5").toString()));
      }
      if ((jsonObj.get("near") != null && !jsonObj.get("near").isJsonNull()) && !jsonObj.get("near").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `near` to be a primitive type in the JSON string but got `%s`", jsonObj.get("near").toString()));
      }
      if ((jsonObj.get("referenceId") != null && !jsonObj.get("referenceId").isJsonNull()) && !jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if ((jsonObj.get("subAccountId") != null && !jsonObj.get("subAccountId").isJsonNull()) && !jsonObj.get("subAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoragePayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoragePayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoragePayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoragePayload.class));

       return (TypeAdapter<T>) new TypeAdapter<StoragePayload>() {
           @Override
           public void write(JsonWriter out, StoragePayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoragePayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoragePayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoragePayload
   * @throws IOException if the JSON string is invalid with respect to StoragePayload
   */
  public static StoragePayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoragePayload.class);
  }

  /**
   * Convert an instance of StoragePayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

