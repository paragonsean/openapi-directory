/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Date1;
import org.openapitools.client.model.MerchantAddress;
import org.openapitools.client.model.MerchantCity;
import org.openapitools.client.model.MerchantCountryCode;
import org.openapitools.client.model.MerchantName;
import org.openapitools.client.model.MerchantPostalCode;
import org.openapitools.client.model.MerchantTypes;
import org.openapitools.client.model.TaxAmount;
import org.openapitools.client.model.TotalAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReceiptResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:13.543030-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReceiptResult {
  public static final String SERIALIZED_NAME_CONFIDENCE_LEVEL = "confidenceLevel";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVEL)
  private BigDecimal confidenceLevel;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Date1 date;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_MERCHANT_ADDRESS = "merchantAddress";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ADDRESS)
  private MerchantAddress merchantAddress;

  public static final String SERIALIZED_NAME_MERCHANT_CITY = "merchantCity";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CITY)
  private MerchantCity merchantCity;

  public static final String SERIALIZED_NAME_MERCHANT_COUNTRY_CODE = "merchantCountryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COUNTRY_CODE)
  private MerchantCountryCode merchantCountryCode;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private MerchantName merchantName;

  public static final String SERIALIZED_NAME_MERCHANT_POSTAL_CODE = "merchantPostalCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_POSTAL_CODE)
  private MerchantPostalCode merchantPostalCode;

  public static final String SERIALIZED_NAME_MERCHANT_STATE = "merchantState";
  @SerializedName(SERIALIZED_NAME_MERCHANT_STATE)
  private MerchantCity merchantState;

  public static final String SERIALIZED_NAME_MERCHANT_TYPES = "merchantTypes";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TYPES)
  private MerchantTypes merchantTypes;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "taxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private TaxAmount taxAmount;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private TotalAmount totalAmount;

  public ReceiptResult() {
  }

  public ReceiptResult confidenceLevel(BigDecimal confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
    return this;
  }

  /**
   * Overall confidence level
   * @return confidenceLevel
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidenceLevel() {
    return confidenceLevel;
  }

  public void setConfidenceLevel(BigDecimal confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
  }


  public ReceiptResult date(Date1 date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public Date1 getDate() {
    return date;
  }

  public void setDate(Date1 date) {
    this.date = date;
  }


  public ReceiptResult error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public ReceiptResult merchantAddress(MerchantAddress merchantAddress) {
    this.merchantAddress = merchantAddress;
    return this;
  }

  /**
   * Get merchantAddress
   * @return merchantAddress
   */
  @javax.annotation.Nullable
  public MerchantAddress getMerchantAddress() {
    return merchantAddress;
  }

  public void setMerchantAddress(MerchantAddress merchantAddress) {
    this.merchantAddress = merchantAddress;
  }


  public ReceiptResult merchantCity(MerchantCity merchantCity) {
    this.merchantCity = merchantCity;
    return this;
  }

  /**
   * Get merchantCity
   * @return merchantCity
   */
  @javax.annotation.Nullable
  public MerchantCity getMerchantCity() {
    return merchantCity;
  }

  public void setMerchantCity(MerchantCity merchantCity) {
    this.merchantCity = merchantCity;
  }


  public ReceiptResult merchantCountryCode(MerchantCountryCode merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
    return this;
  }

  /**
   * Get merchantCountryCode
   * @return merchantCountryCode
   */
  @javax.annotation.Nullable
  public MerchantCountryCode getMerchantCountryCode() {
    return merchantCountryCode;
  }

  public void setMerchantCountryCode(MerchantCountryCode merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
  }


  public ReceiptResult merchantName(MerchantName merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  /**
   * Get merchantName
   * @return merchantName
   */
  @javax.annotation.Nullable
  public MerchantName getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(MerchantName merchantName) {
    this.merchantName = merchantName;
  }


  public ReceiptResult merchantPostalCode(MerchantPostalCode merchantPostalCode) {
    this.merchantPostalCode = merchantPostalCode;
    return this;
  }

  /**
   * Get merchantPostalCode
   * @return merchantPostalCode
   */
  @javax.annotation.Nullable
  public MerchantPostalCode getMerchantPostalCode() {
    return merchantPostalCode;
  }

  public void setMerchantPostalCode(MerchantPostalCode merchantPostalCode) {
    this.merchantPostalCode = merchantPostalCode;
  }


  public ReceiptResult merchantState(MerchantCity merchantState) {
    this.merchantState = merchantState;
    return this;
  }

  /**
   * Get merchantState
   * @return merchantState
   */
  @javax.annotation.Nullable
  public MerchantCity getMerchantState() {
    return merchantState;
  }

  public void setMerchantState(MerchantCity merchantState) {
    this.merchantState = merchantState;
  }


  public ReceiptResult merchantTypes(MerchantTypes merchantTypes) {
    this.merchantTypes = merchantTypes;
    return this;
  }

  /**
   * Get merchantTypes
   * @return merchantTypes
   */
  @javax.annotation.Nullable
  public MerchantTypes getMerchantTypes() {
    return merchantTypes;
  }

  public void setMerchantTypes(MerchantTypes merchantTypes) {
    this.merchantTypes = merchantTypes;
  }


  public ReceiptResult taxAmount(TaxAmount taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Get taxAmount
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public TaxAmount getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(TaxAmount taxAmount) {
    this.taxAmount = taxAmount;
  }


  public ReceiptResult totalAmount(TotalAmount totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public TotalAmount getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(TotalAmount totalAmount) {
    this.totalAmount = totalAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptResult receiptResult = (ReceiptResult) o;
    return Objects.equals(this.confidenceLevel, receiptResult.confidenceLevel) &&
        Objects.equals(this.date, receiptResult.date) &&
        Objects.equals(this.error, receiptResult.error) &&
        Objects.equals(this.merchantAddress, receiptResult.merchantAddress) &&
        Objects.equals(this.merchantCity, receiptResult.merchantCity) &&
        Objects.equals(this.merchantCountryCode, receiptResult.merchantCountryCode) &&
        Objects.equals(this.merchantName, receiptResult.merchantName) &&
        Objects.equals(this.merchantPostalCode, receiptResult.merchantPostalCode) &&
        Objects.equals(this.merchantState, receiptResult.merchantState) &&
        Objects.equals(this.merchantTypes, receiptResult.merchantTypes) &&
        Objects.equals(this.taxAmount, receiptResult.taxAmount) &&
        Objects.equals(this.totalAmount, receiptResult.totalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidenceLevel, date, error, merchantAddress, merchantCity, merchantCountryCode, merchantName, merchantPostalCode, merchantState, merchantTypes, taxAmount, totalAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptResult {\n");
    sb.append("    confidenceLevel: ").append(toIndentedString(confidenceLevel)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    merchantAddress: ").append(toIndentedString(merchantAddress)).append("\n");
    sb.append("    merchantCity: ").append(toIndentedString(merchantCity)).append("\n");
    sb.append("    merchantCountryCode: ").append(toIndentedString(merchantCountryCode)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantPostalCode: ").append(toIndentedString(merchantPostalCode)).append("\n");
    sb.append("    merchantState: ").append(toIndentedString(merchantState)).append("\n");
    sb.append("    merchantTypes: ").append(toIndentedString(merchantTypes)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidenceLevel");
    openapiFields.add("date");
    openapiFields.add("error");
    openapiFields.add("merchantAddress");
    openapiFields.add("merchantCity");
    openapiFields.add("merchantCountryCode");
    openapiFields.add("merchantName");
    openapiFields.add("merchantPostalCode");
    openapiFields.add("merchantState");
    openapiFields.add("merchantTypes");
    openapiFields.add("taxAmount");
    openapiFields.add("totalAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceiptResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceiptResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiptResult is not found in the empty JSON string", ReceiptResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceiptResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceiptResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        Date1.validateJsonElement(jsonObj.get("date"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // validate the optional field `merchantAddress`
      if (jsonObj.get("merchantAddress") != null && !jsonObj.get("merchantAddress").isJsonNull()) {
        MerchantAddress.validateJsonElement(jsonObj.get("merchantAddress"));
      }
      // validate the optional field `merchantCity`
      if (jsonObj.get("merchantCity") != null && !jsonObj.get("merchantCity").isJsonNull()) {
        MerchantCity.validateJsonElement(jsonObj.get("merchantCity"));
      }
      // validate the optional field `merchantCountryCode`
      if (jsonObj.get("merchantCountryCode") != null && !jsonObj.get("merchantCountryCode").isJsonNull()) {
        MerchantCountryCode.validateJsonElement(jsonObj.get("merchantCountryCode"));
      }
      // validate the optional field `merchantName`
      if (jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) {
        MerchantName.validateJsonElement(jsonObj.get("merchantName"));
      }
      // validate the optional field `merchantPostalCode`
      if (jsonObj.get("merchantPostalCode") != null && !jsonObj.get("merchantPostalCode").isJsonNull()) {
        MerchantPostalCode.validateJsonElement(jsonObj.get("merchantPostalCode"));
      }
      // validate the optional field `merchantState`
      if (jsonObj.get("merchantState") != null && !jsonObj.get("merchantState").isJsonNull()) {
        MerchantCity.validateJsonElement(jsonObj.get("merchantState"));
      }
      // validate the optional field `merchantTypes`
      if (jsonObj.get("merchantTypes") != null && !jsonObj.get("merchantTypes").isJsonNull()) {
        MerchantTypes.validateJsonElement(jsonObj.get("merchantTypes"));
      }
      // validate the optional field `taxAmount`
      if (jsonObj.get("taxAmount") != null && !jsonObj.get("taxAmount").isJsonNull()) {
        TaxAmount.validateJsonElement(jsonObj.get("taxAmount"));
      }
      // validate the optional field `totalAmount`
      if (jsonObj.get("totalAmount") != null && !jsonObj.get("totalAmount").isJsonNull()) {
        TotalAmount.validateJsonElement(jsonObj.get("totalAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiptResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiptResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiptResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiptResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiptResult>() {
           @Override
           public void write(JsonWriter out, ReceiptResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiptResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceiptResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceiptResult
   * @throws IOException if the JSON string is invalid with respect to ReceiptResult
   */
  public static ReceiptResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiptResult.class);
  }

  /**
   * Convert an instance of ReceiptResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

