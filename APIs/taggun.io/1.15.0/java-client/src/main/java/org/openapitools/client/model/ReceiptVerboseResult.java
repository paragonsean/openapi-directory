/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DueDate;
import org.openapitools.client.model.Entities;
import org.openapitools.client.model.ItemsCount;
import org.openapitools.client.model.LocationResult;
import org.openapitools.client.model.MerchantAddress1;
import org.openapitools.client.model.MerchantCity1;
import org.openapitools.client.model.MerchantCountryCode1;
import org.openapitools.client.model.MerchantName1;
import org.openapitools.client.model.MerchantPostalCode1;
import org.openapitools.client.model.MerchantState;
import org.openapitools.client.model.MerchantTypes1;
import org.openapitools.client.model.PaymentType;
import org.openapitools.client.model.TaxAmount1;
import org.openapitools.client.model.Text;
import org.openapitools.client.model.TotalAmount1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReceiptVerboseResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:13.543030-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReceiptVerboseResult {
  public static final String SERIALIZED_NAME_AMOUNTS = "amounts";
  @SerializedName(SERIALIZED_NAME_AMOUNTS)
  private List<String> amounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIDENCE_LEVEL = "confidenceLevel";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_LEVEL)
  private BigDecimal confidenceLevel;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private DueDate dueDate;

  public static final String SERIALIZED_NAME_ELAPSED = "elapsed";
  @SerializedName(SERIALIZED_NAME_ELAPSED)
  private BigDecimal elapsed;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private Entities entities;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_ITEMS_COUNT = "itemsCount";
  @SerializedName(SERIALIZED_NAME_ITEMS_COUNT)
  private ItemsCount itemsCount;

  public static final String SERIALIZED_NAME_LINE_AMOUNTS = "lineAmounts";
  @SerializedName(SERIALIZED_NAME_LINE_AMOUNTS)
  private List<String> lineAmounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LocationResult location;

  public static final String SERIALIZED_NAME_MERCHANT_ADDRESS = "merchantAddress";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ADDRESS)
  private MerchantAddress1 merchantAddress;

  public static final String SERIALIZED_NAME_MERCHANT_CITY = "merchantCity";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CITY)
  private MerchantCity1 merchantCity;

  public static final String SERIALIZED_NAME_MERCHANT_COUNTRY_CODE = "merchantCountryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_COUNTRY_CODE)
  private MerchantCountryCode1 merchantCountryCode;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private MerchantName1 merchantName;

  public static final String SERIALIZED_NAME_MERCHANT_POSTAL_CODE = "merchantPostalCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_POSTAL_CODE)
  private MerchantPostalCode1 merchantPostalCode;

  public static final String SERIALIZED_NAME_MERCHANT_STATE = "merchantState";
  @SerializedName(SERIALIZED_NAME_MERCHANT_STATE)
  private MerchantState merchantState;

  public static final String SERIALIZED_NAME_MERCHANT_TYPES = "merchantTypes";
  @SerializedName(SERIALIZED_NAME_MERCHANT_TYPES)
  private MerchantTypes1 merchantTypes;

  public static final String SERIALIZED_NAME_NUMBERS = "numbers";
  @SerializedName(SERIALIZED_NAME_NUMBERS)
  private List<String> numbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentType paymentType;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "taxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private TaxAmount1 taxAmount;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private Text text;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private TotalAmount1 totalAmount;

  public ReceiptVerboseResult() {
  }

  public ReceiptVerboseResult amounts(List<String> amounts) {
    this.amounts = amounts;
    return this;
  }

  public ReceiptVerboseResult addAmountsItem(String amountsItem) {
    if (this.amounts == null) {
      this.amounts = new ArrayList<>();
    }
    this.amounts.add(amountsItem);
    return this;
  }

  /**
   * Get amounts
   * @return amounts
   */
  @javax.annotation.Nullable
  public List<String> getAmounts() {
    return amounts;
  }

  public void setAmounts(List<String> amounts) {
    this.amounts = amounts;
  }


  public ReceiptVerboseResult confidenceLevel(BigDecimal confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
    return this;
  }

  /**
   * Get confidenceLevel
   * @return confidenceLevel
   */
  @javax.annotation.Nullable
  public BigDecimal getConfidenceLevel() {
    return confidenceLevel;
  }

  public void setConfidenceLevel(BigDecimal confidenceLevel) {
    this.confidenceLevel = confidenceLevel;
  }


  public ReceiptVerboseResult date(LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }


  public ReceiptVerboseResult dueDate(DueDate dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nullable
  public DueDate getDueDate() {
    return dueDate;
  }

  public void setDueDate(DueDate dueDate) {
    this.dueDate = dueDate;
  }


  public ReceiptVerboseResult elapsed(BigDecimal elapsed) {
    this.elapsed = elapsed;
    return this;
  }

  /**
   * Get elapsed
   * @return elapsed
   */
  @javax.annotation.Nullable
  public BigDecimal getElapsed() {
    return elapsed;
  }

  public void setElapsed(BigDecimal elapsed) {
    this.elapsed = elapsed;
  }


  public ReceiptVerboseResult entities(Entities entities) {
    this.entities = entities;
    return this;
  }

  /**
   * Get entities
   * @return entities
   */
  @javax.annotation.Nullable
  public Entities getEntities() {
    return entities;
  }

  public void setEntities(Entities entities) {
    this.entities = entities;
  }


  public ReceiptVerboseResult error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public ReceiptVerboseResult itemsCount(ItemsCount itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

  /**
   * Get itemsCount
   * @return itemsCount
   */
  @javax.annotation.Nullable
  public ItemsCount getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(ItemsCount itemsCount) {
    this.itemsCount = itemsCount;
  }


  public ReceiptVerboseResult lineAmounts(List<String> lineAmounts) {
    this.lineAmounts = lineAmounts;
    return this;
  }

  public ReceiptVerboseResult addLineAmountsItem(String lineAmountsItem) {
    if (this.lineAmounts == null) {
      this.lineAmounts = new ArrayList<>();
    }
    this.lineAmounts.add(lineAmountsItem);
    return this;
  }

  /**
   * Get lineAmounts
   * @return lineAmounts
   */
  @javax.annotation.Nullable
  public List<String> getLineAmounts() {
    return lineAmounts;
  }

  public void setLineAmounts(List<String> lineAmounts) {
    this.lineAmounts = lineAmounts;
  }


  public ReceiptVerboseResult location(LocationResult location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public LocationResult getLocation() {
    return location;
  }

  public void setLocation(LocationResult location) {
    this.location = location;
  }


  public ReceiptVerboseResult merchantAddress(MerchantAddress1 merchantAddress) {
    this.merchantAddress = merchantAddress;
    return this;
  }

  /**
   * Get merchantAddress
   * @return merchantAddress
   */
  @javax.annotation.Nullable
  public MerchantAddress1 getMerchantAddress() {
    return merchantAddress;
  }

  public void setMerchantAddress(MerchantAddress1 merchantAddress) {
    this.merchantAddress = merchantAddress;
  }


  public ReceiptVerboseResult merchantCity(MerchantCity1 merchantCity) {
    this.merchantCity = merchantCity;
    return this;
  }

  /**
   * Get merchantCity
   * @return merchantCity
   */
  @javax.annotation.Nullable
  public MerchantCity1 getMerchantCity() {
    return merchantCity;
  }

  public void setMerchantCity(MerchantCity1 merchantCity) {
    this.merchantCity = merchantCity;
  }


  public ReceiptVerboseResult merchantCountryCode(MerchantCountryCode1 merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
    return this;
  }

  /**
   * Get merchantCountryCode
   * @return merchantCountryCode
   */
  @javax.annotation.Nullable
  public MerchantCountryCode1 getMerchantCountryCode() {
    return merchantCountryCode;
  }

  public void setMerchantCountryCode(MerchantCountryCode1 merchantCountryCode) {
    this.merchantCountryCode = merchantCountryCode;
  }


  public ReceiptVerboseResult merchantName(MerchantName1 merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  /**
   * Get merchantName
   * @return merchantName
   */
  @javax.annotation.Nullable
  public MerchantName1 getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(MerchantName1 merchantName) {
    this.merchantName = merchantName;
  }


  public ReceiptVerboseResult merchantPostalCode(MerchantPostalCode1 merchantPostalCode) {
    this.merchantPostalCode = merchantPostalCode;
    return this;
  }

  /**
   * Get merchantPostalCode
   * @return merchantPostalCode
   */
  @javax.annotation.Nullable
  public MerchantPostalCode1 getMerchantPostalCode() {
    return merchantPostalCode;
  }

  public void setMerchantPostalCode(MerchantPostalCode1 merchantPostalCode) {
    this.merchantPostalCode = merchantPostalCode;
  }


  public ReceiptVerboseResult merchantState(MerchantState merchantState) {
    this.merchantState = merchantState;
    return this;
  }

  /**
   * Get merchantState
   * @return merchantState
   */
  @javax.annotation.Nullable
  public MerchantState getMerchantState() {
    return merchantState;
  }

  public void setMerchantState(MerchantState merchantState) {
    this.merchantState = merchantState;
  }


  public ReceiptVerboseResult merchantTypes(MerchantTypes1 merchantTypes) {
    this.merchantTypes = merchantTypes;
    return this;
  }

  /**
   * Get merchantTypes
   * @return merchantTypes
   */
  @javax.annotation.Nullable
  public MerchantTypes1 getMerchantTypes() {
    return merchantTypes;
  }

  public void setMerchantTypes(MerchantTypes1 merchantTypes) {
    this.merchantTypes = merchantTypes;
  }


  public ReceiptVerboseResult numbers(List<String> numbers) {
    this.numbers = numbers;
    return this;
  }

  public ReceiptVerboseResult addNumbersItem(String numbersItem) {
    if (this.numbers == null) {
      this.numbers = new ArrayList<>();
    }
    this.numbers.add(numbersItem);
    return this;
  }

  /**
   * Get numbers
   * @return numbers
   */
  @javax.annotation.Nullable
  public List<String> getNumbers() {
    return numbers;
  }

  public void setNumbers(List<String> numbers) {
    this.numbers = numbers;
  }


  public ReceiptVerboseResult paymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
  }


  public ReceiptVerboseResult taxAmount(TaxAmount1 taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Get taxAmount
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public TaxAmount1 getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(TaxAmount1 taxAmount) {
    this.taxAmount = taxAmount;
  }


  public ReceiptVerboseResult text(Text text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public Text getText() {
    return text;
  }

  public void setText(Text text) {
    this.text = text;
  }


  public ReceiptVerboseResult totalAmount(TotalAmount1 totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public TotalAmount1 getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(TotalAmount1 totalAmount) {
    this.totalAmount = totalAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptVerboseResult receiptVerboseResult = (ReceiptVerboseResult) o;
    return Objects.equals(this.amounts, receiptVerboseResult.amounts) &&
        Objects.equals(this.confidenceLevel, receiptVerboseResult.confidenceLevel) &&
        Objects.equals(this.date, receiptVerboseResult.date) &&
        Objects.equals(this.dueDate, receiptVerboseResult.dueDate) &&
        Objects.equals(this.elapsed, receiptVerboseResult.elapsed) &&
        Objects.equals(this.entities, receiptVerboseResult.entities) &&
        Objects.equals(this.error, receiptVerboseResult.error) &&
        Objects.equals(this.itemsCount, receiptVerboseResult.itemsCount) &&
        Objects.equals(this.lineAmounts, receiptVerboseResult.lineAmounts) &&
        Objects.equals(this.location, receiptVerboseResult.location) &&
        Objects.equals(this.merchantAddress, receiptVerboseResult.merchantAddress) &&
        Objects.equals(this.merchantCity, receiptVerboseResult.merchantCity) &&
        Objects.equals(this.merchantCountryCode, receiptVerboseResult.merchantCountryCode) &&
        Objects.equals(this.merchantName, receiptVerboseResult.merchantName) &&
        Objects.equals(this.merchantPostalCode, receiptVerboseResult.merchantPostalCode) &&
        Objects.equals(this.merchantState, receiptVerboseResult.merchantState) &&
        Objects.equals(this.merchantTypes, receiptVerboseResult.merchantTypes) &&
        Objects.equals(this.numbers, receiptVerboseResult.numbers) &&
        Objects.equals(this.paymentType, receiptVerboseResult.paymentType) &&
        Objects.equals(this.taxAmount, receiptVerboseResult.taxAmount) &&
        Objects.equals(this.text, receiptVerboseResult.text) &&
        Objects.equals(this.totalAmount, receiptVerboseResult.totalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amounts, confidenceLevel, date, dueDate, elapsed, entities, error, itemsCount, lineAmounts, location, merchantAddress, merchantCity, merchantCountryCode, merchantName, merchantPostalCode, merchantState, merchantTypes, numbers, paymentType, taxAmount, text, totalAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptVerboseResult {\n");
    sb.append("    amounts: ").append(toIndentedString(amounts)).append("\n");
    sb.append("    confidenceLevel: ").append(toIndentedString(confidenceLevel)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    elapsed: ").append(toIndentedString(elapsed)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    lineAmounts: ").append(toIndentedString(lineAmounts)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    merchantAddress: ").append(toIndentedString(merchantAddress)).append("\n");
    sb.append("    merchantCity: ").append(toIndentedString(merchantCity)).append("\n");
    sb.append("    merchantCountryCode: ").append(toIndentedString(merchantCountryCode)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantPostalCode: ").append(toIndentedString(merchantPostalCode)).append("\n");
    sb.append("    merchantState: ").append(toIndentedString(merchantState)).append("\n");
    sb.append("    merchantTypes: ").append(toIndentedString(merchantTypes)).append("\n");
    sb.append("    numbers: ").append(toIndentedString(numbers)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amounts");
    openapiFields.add("confidenceLevel");
    openapiFields.add("date");
    openapiFields.add("dueDate");
    openapiFields.add("elapsed");
    openapiFields.add("entities");
    openapiFields.add("error");
    openapiFields.add("itemsCount");
    openapiFields.add("lineAmounts");
    openapiFields.add("location");
    openapiFields.add("merchantAddress");
    openapiFields.add("merchantCity");
    openapiFields.add("merchantCountryCode");
    openapiFields.add("merchantName");
    openapiFields.add("merchantPostalCode");
    openapiFields.add("merchantState");
    openapiFields.add("merchantTypes");
    openapiFields.add("numbers");
    openapiFields.add("paymentType");
    openapiFields.add("taxAmount");
    openapiFields.add("text");
    openapiFields.add("totalAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceiptVerboseResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceiptVerboseResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiptVerboseResult is not found in the empty JSON string", ReceiptVerboseResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceiptVerboseResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceiptVerboseResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("amounts") != null && !jsonObj.get("amounts").isJsonNull() && !jsonObj.get("amounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amounts` to be an array in the JSON string but got `%s`", jsonObj.get("amounts").toString()));
      }
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        LocalDate.validateJsonElement(jsonObj.get("date"));
      }
      // validate the optional field `dueDate`
      if (jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) {
        DueDate.validateJsonElement(jsonObj.get("dueDate"));
      }
      // validate the optional field `entities`
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull()) {
        Entities.validateJsonElement(jsonObj.get("entities"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // validate the optional field `itemsCount`
      if (jsonObj.get("itemsCount") != null && !jsonObj.get("itemsCount").isJsonNull()) {
        ItemsCount.validateJsonElement(jsonObj.get("itemsCount"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lineAmounts") != null && !jsonObj.get("lineAmounts").isJsonNull() && !jsonObj.get("lineAmounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lineAmounts` to be an array in the JSON string but got `%s`", jsonObj.get("lineAmounts").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        LocationResult.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `merchantAddress`
      if (jsonObj.get("merchantAddress") != null && !jsonObj.get("merchantAddress").isJsonNull()) {
        MerchantAddress1.validateJsonElement(jsonObj.get("merchantAddress"));
      }
      // validate the optional field `merchantCity`
      if (jsonObj.get("merchantCity") != null && !jsonObj.get("merchantCity").isJsonNull()) {
        MerchantCity1.validateJsonElement(jsonObj.get("merchantCity"));
      }
      // validate the optional field `merchantCountryCode`
      if (jsonObj.get("merchantCountryCode") != null && !jsonObj.get("merchantCountryCode").isJsonNull()) {
        MerchantCountryCode1.validateJsonElement(jsonObj.get("merchantCountryCode"));
      }
      // validate the optional field `merchantName`
      if (jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) {
        MerchantName1.validateJsonElement(jsonObj.get("merchantName"));
      }
      // validate the optional field `merchantPostalCode`
      if (jsonObj.get("merchantPostalCode") != null && !jsonObj.get("merchantPostalCode").isJsonNull()) {
        MerchantPostalCode1.validateJsonElement(jsonObj.get("merchantPostalCode"));
      }
      // validate the optional field `merchantState`
      if (jsonObj.get("merchantState") != null && !jsonObj.get("merchantState").isJsonNull()) {
        MerchantState.validateJsonElement(jsonObj.get("merchantState"));
      }
      // validate the optional field `merchantTypes`
      if (jsonObj.get("merchantTypes") != null && !jsonObj.get("merchantTypes").isJsonNull()) {
        MerchantTypes1.validateJsonElement(jsonObj.get("merchantTypes"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("numbers") != null && !jsonObj.get("numbers").isJsonNull() && !jsonObj.get("numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `numbers` to be an array in the JSON string but got `%s`", jsonObj.get("numbers").toString()));
      }
      // validate the optional field `paymentType`
      if (jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) {
        PaymentType.validateJsonElement(jsonObj.get("paymentType"));
      }
      // validate the optional field `taxAmount`
      if (jsonObj.get("taxAmount") != null && !jsonObj.get("taxAmount").isJsonNull()) {
        TaxAmount1.validateJsonElement(jsonObj.get("taxAmount"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        Text.validateJsonElement(jsonObj.get("text"));
      }
      // validate the optional field `totalAmount`
      if (jsonObj.get("totalAmount") != null && !jsonObj.get("totalAmount").isJsonNull()) {
        TotalAmount1.validateJsonElement(jsonObj.get("totalAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiptVerboseResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiptVerboseResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiptVerboseResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiptVerboseResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiptVerboseResult>() {
           @Override
           public void write(JsonWriter out, ReceiptVerboseResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiptVerboseResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceiptVerboseResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceiptVerboseResult
   * @throws IOException if the JSON string is invalid with respect to ReceiptVerboseResult
   */
  public static ReceiptVerboseResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiptVerboseResult.class);
  }

  /**
   * Convert an instance of ReceiptVerboseResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

