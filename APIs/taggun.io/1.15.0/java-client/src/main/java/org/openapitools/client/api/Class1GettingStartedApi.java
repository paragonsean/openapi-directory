/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BadRequestError;
import java.io.File;
import org.openapitools.client.model.ReceiptResult;
import org.openapitools.client.model.ReceiptVerboseResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class1GettingStartedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Class1GettingStartedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class1GettingStartedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postApiReceiptV1SimpleFile
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiReceiptV1SimpleFileCall(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/receipt/v1/simple/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (refresh != null) {
            localVarFormParams.put("refresh", refresh);
        }

        if (incognito != null) {
            localVarFormParams.put("incognito", incognito);
        }

        if (ipAddress != null) {
            localVarFormParams.put("ipAddress", ipAddress);
        }

        if (near != null) {
            localVarFormParams.put("near", near);
        }

        if (ignoreMerchantName != null) {
            localVarFormParams.put("ignoreMerchantName", ignoreMerchantName);
        }

        if (language != null) {
            localVarFormParams.put("language", language);
        }

        if (extractTime != null) {
            localVarFormParams.put("extractTime", extractTime);
        }

        if (subAccountId != null) {
            localVarFormParams.put("subAccountId", subAccountId);
        }

        if (referenceId != null) {
            localVarFormParams.put("referenceId", referenceId);
        }

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiReceiptV1SimpleFileValidateBeforeCall(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling postApiReceiptV1SimpleFile(Async)");
        }

        return postApiReceiptV1SimpleFileCall(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId, _callback);

    }

    /**
     * transcribe a receipt by uploading an image file
     * 
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return ReceiptResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ReceiptResult postApiReceiptV1SimpleFile(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId) throws ApiException {
        ApiResponse<ReceiptResult> localVarResp = postApiReceiptV1SimpleFileWithHttpInfo(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId);
        return localVarResp.getData();
    }

    /**
     * transcribe a receipt by uploading an image file
     * 
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return ApiResponse&lt;ReceiptResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceiptResult> postApiReceiptV1SimpleFileWithHttpInfo(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId) throws ApiException {
        okhttp3.Call localVarCall = postApiReceiptV1SimpleFileValidateBeforeCall(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId, null);
        Type localVarReturnType = new TypeToken<ReceiptResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * transcribe a receipt by uploading an image file (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiReceiptV1SimpleFileAsync(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId, final ApiCallback<ReceiptResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiReceiptV1SimpleFileValidateBeforeCall(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId, _callback);
        Type localVarReturnType = new TypeToken<ReceiptResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postApiReceiptV1VerboseFile
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiReceiptV1VerboseFileCall(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/receipt/v1/verbose/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (refresh != null) {
            localVarFormParams.put("refresh", refresh);
        }

        if (incognito != null) {
            localVarFormParams.put("incognito", incognito);
        }

        if (ipAddress != null) {
            localVarFormParams.put("ipAddress", ipAddress);
        }

        if (near != null) {
            localVarFormParams.put("near", near);
        }

        if (ignoreMerchantName != null) {
            localVarFormParams.put("ignoreMerchantName", ignoreMerchantName);
        }

        if (language != null) {
            localVarFormParams.put("language", language);
        }

        if (extractTime != null) {
            localVarFormParams.put("extractTime", extractTime);
        }

        if (subAccountId != null) {
            localVarFormParams.put("subAccountId", subAccountId);
        }

        if (referenceId != null) {
            localVarFormParams.put("referenceId", referenceId);
        }

        if (apikey != null) {
            localVarHeaderParams.put("apikey", localVarApiClient.parameterToString(apikey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postApiReceiptV1VerboseFileValidateBeforeCall(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling postApiReceiptV1VerboseFile(Async)");
        }

        return postApiReceiptV1VerboseFileCall(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId, _callback);

    }

    /**
     * transcribe a receipt by uploading an image file and return detailed result
     * 
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return ReceiptVerboseResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ReceiptVerboseResult postApiReceiptV1VerboseFile(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId) throws ApiException {
        ApiResponse<ReceiptVerboseResult> localVarResp = postApiReceiptV1VerboseFileWithHttpInfo(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId);
        return localVarResp.getData();
    }

    /**
     * transcribe a receipt by uploading an image file and return detailed result
     * 
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @return ApiResponse&lt;ReceiptVerboseResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReceiptVerboseResult> postApiReceiptV1VerboseFileWithHttpInfo(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId) throws ApiException {
        okhttp3.Call localVarCall = postApiReceiptV1VerboseFileValidateBeforeCall(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId, null);
        Type localVarReturnType = new TypeToken<ReceiptVerboseResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * transcribe a receipt by uploading an image file and return detailed result (asynchronously)
     * 
     * @param apikey API authentication key. (required)
     * @param _file file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC (optional)
     * @param refresh Set true to force re-process image transcription if the receipt is already in storage (optional, default to false)
     * @param incognito Set true to avoid saving the receipt in storage (optional, default to false)
     * @param ipAddress IP Address of the end user (optional)
     * @param near A geo location to search for merchant. Typically in the format of city, state, country. (optional)
     * @param ignoreMerchantName Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name. (optional)
     * @param language Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh  (optional)
     * @param extractTime Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000. (optional, default to false)
     * @param subAccountId Tag a request with sub-account ID for billing purposes (optional)
     * @param referenceId Tag a request with a unique reference ID for feedback and training purposes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postApiReceiptV1VerboseFileAsync(String apikey, File _file, Boolean refresh, Boolean incognito, String ipAddress, String near, String ignoreMerchantName, String language, Boolean extractTime, String subAccountId, String referenceId, final ApiCallback<ReceiptVerboseResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = postApiReceiptV1VerboseFileValidateBeforeCall(apikey, _file, refresh, incognito, ipAddress, near, ignoreMerchantName, language, extractTime, subAccountId, referenceId, _callback);
        Type localVarReturnType = new TypeToken<ReceiptVerboseResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
