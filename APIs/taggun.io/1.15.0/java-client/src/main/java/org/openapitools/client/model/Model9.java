/*
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BalanceOwing;
import org.openapitools.client.model.Date2;
import org.openapitools.client.model.MerchantNames;
import org.openapitools.client.model.ProductCodes;
import org.openapitools.client.model.ProductLineItems1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model9
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:10:13.543030-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Model9 {
  public static final String SERIALIZED_NAME_BALANCE_OWING = "balanceOwing";
  @SerializedName(SERIALIZED_NAME_BALANCE_OWING)
  private BalanceOwing balanceOwing;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private Date2 date;

  public static final String SERIALIZED_NAME_MERCHANT_NAMES = "merchantNames";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAMES)
  private MerchantNames merchantNames;

  public static final String SERIALIZED_NAME_PRODUCT_CODES = "productCodes";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODES)
  private ProductCodes productCodes;

  public static final String SERIALIZED_NAME_PRODUCT_LINE_ITEMS = "productLineItems";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LINE_ITEMS)
  private ProductLineItems1 productLineItems;

  public Model9() {
  }

  public Model9 balanceOwing(BalanceOwing balanceOwing) {
    this.balanceOwing = balanceOwing;
    return this;
  }

  /**
   * Get balanceOwing
   * @return balanceOwing
   */
  @javax.annotation.Nullable
  public BalanceOwing getBalanceOwing() {
    return balanceOwing;
  }

  public void setBalanceOwing(BalanceOwing balanceOwing) {
    this.balanceOwing = balanceOwing;
  }


  public Model9 date(Date2 date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public Date2 getDate() {
    return date;
  }

  public void setDate(Date2 date) {
    this.date = date;
  }


  public Model9 merchantNames(MerchantNames merchantNames) {
    this.merchantNames = merchantNames;
    return this;
  }

  /**
   * Get merchantNames
   * @return merchantNames
   */
  @javax.annotation.Nullable
  public MerchantNames getMerchantNames() {
    return merchantNames;
  }

  public void setMerchantNames(MerchantNames merchantNames) {
    this.merchantNames = merchantNames;
  }


  public Model9 productCodes(ProductCodes productCodes) {
    this.productCodes = productCodes;
    return this;
  }

  /**
   * Get productCodes
   * @return productCodes
   */
  @javax.annotation.Nullable
  public ProductCodes getProductCodes() {
    return productCodes;
  }

  public void setProductCodes(ProductCodes productCodes) {
    this.productCodes = productCodes;
  }


  public Model9 productLineItems(ProductLineItems1 productLineItems) {
    this.productLineItems = productLineItems;
    return this;
  }

  /**
   * Get productLineItems
   * @return productLineItems
   */
  @javax.annotation.Nullable
  public ProductLineItems1 getProductLineItems() {
    return productLineItems;
  }

  public void setProductLineItems(ProductLineItems1 productLineItems) {
    this.productLineItems = productLineItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model9 model9 = (Model9) o;
    return Objects.equals(this.balanceOwing, model9.balanceOwing) &&
        Objects.equals(this.date, model9.date) &&
        Objects.equals(this.merchantNames, model9.merchantNames) &&
        Objects.equals(this.productCodes, model9.productCodes) &&
        Objects.equals(this.productLineItems, model9.productLineItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceOwing, date, merchantNames, productCodes, productLineItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model9 {\n");
    sb.append("    balanceOwing: ").append(toIndentedString(balanceOwing)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    merchantNames: ").append(toIndentedString(merchantNames)).append("\n");
    sb.append("    productCodes: ").append(toIndentedString(productCodes)).append("\n");
    sb.append("    productLineItems: ").append(toIndentedString(productLineItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balanceOwing");
    openapiFields.add("date");
    openapiFields.add("merchantNames");
    openapiFields.add("productCodes");
    openapiFields.add("productLineItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Model9
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model9.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model9 is not found in the empty JSON string", Model9.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model9.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model9` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `balanceOwing`
      if (jsonObj.get("balanceOwing") != null && !jsonObj.get("balanceOwing").isJsonNull()) {
        BalanceOwing.validateJsonElement(jsonObj.get("balanceOwing"));
      }
      // validate the optional field `date`
      if (jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) {
        Date2.validateJsonElement(jsonObj.get("date"));
      }
      // validate the optional field `merchantNames`
      if (jsonObj.get("merchantNames") != null && !jsonObj.get("merchantNames").isJsonNull()) {
        MerchantNames.validateJsonElement(jsonObj.get("merchantNames"));
      }
      // validate the optional field `productCodes`
      if (jsonObj.get("productCodes") != null && !jsonObj.get("productCodes").isJsonNull()) {
        ProductCodes.validateJsonElement(jsonObj.get("productCodes"));
      }
      // validate the optional field `productLineItems`
      if (jsonObj.get("productLineItems") != null && !jsonObj.get("productLineItems").isJsonNull()) {
        ProductLineItems1.validateJsonElement(jsonObj.get("productLineItems"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model9.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model9' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model9> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model9.class));

       return (TypeAdapter<T>) new TypeAdapter<Model9>() {
           @Override
           public void write(JsonWriter out, Model9 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model9 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Model9 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Model9
   * @throws IOException if the JSON string is invalid with respect to Model9
   */
  public static Model9 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model9.class);
  }

  /**
   * Convert an instance of Model9 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

