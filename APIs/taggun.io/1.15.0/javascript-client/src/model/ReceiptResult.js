/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Date1 from './Date1';
import MerchantAddress from './MerchantAddress';
import MerchantCity from './MerchantCity';
import MerchantCountryCode from './MerchantCountryCode';
import MerchantName from './MerchantName';
import MerchantPostalCode from './MerchantPostalCode';
import MerchantTypes from './MerchantTypes';
import TaxAmount from './TaxAmount';
import TotalAmount from './TotalAmount';

/**
 * The ReceiptResult model module.
 * @module model/ReceiptResult
 * @version 1.15.0
 */
class ReceiptResult {
    /**
     * Constructs a new <code>ReceiptResult</code>.
     * @alias module:model/ReceiptResult
     */
    constructor() { 
        
        ReceiptResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReceiptResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceiptResult} obj Optional instance to populate.
     * @return {module:model/ReceiptResult} The populated <code>ReceiptResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceiptResult();

            if (data.hasOwnProperty('confidenceLevel')) {
                obj['confidenceLevel'] = ApiClient.convertToType(data['confidenceLevel'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = Date1.constructFromObject(data['date']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('merchantAddress')) {
                obj['merchantAddress'] = MerchantAddress.constructFromObject(data['merchantAddress']);
            }
            if (data.hasOwnProperty('merchantCity')) {
                obj['merchantCity'] = MerchantCity.constructFromObject(data['merchantCity']);
            }
            if (data.hasOwnProperty('merchantCountryCode')) {
                obj['merchantCountryCode'] = MerchantCountryCode.constructFromObject(data['merchantCountryCode']);
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = MerchantName.constructFromObject(data['merchantName']);
            }
            if (data.hasOwnProperty('merchantPostalCode')) {
                obj['merchantPostalCode'] = MerchantPostalCode.constructFromObject(data['merchantPostalCode']);
            }
            if (data.hasOwnProperty('merchantState')) {
                obj['merchantState'] = MerchantCity.constructFromObject(data['merchantState']);
            }
            if (data.hasOwnProperty('merchantTypes')) {
                obj['merchantTypes'] = MerchantTypes.constructFromObject(data['merchantTypes']);
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = TaxAmount.constructFromObject(data['taxAmount']);
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = TotalAmount.constructFromObject(data['totalAmount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReceiptResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReceiptResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `date`
        if (data['date']) { // data not null
          Date1.validateJSON(data['date']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // validate the optional field `merchantAddress`
        if (data['merchantAddress']) { // data not null
          MerchantAddress.validateJSON(data['merchantAddress']);
        }
        // validate the optional field `merchantCity`
        if (data['merchantCity']) { // data not null
          MerchantCity.validateJSON(data['merchantCity']);
        }
        // validate the optional field `merchantCountryCode`
        if (data['merchantCountryCode']) { // data not null
          MerchantCountryCode.validateJSON(data['merchantCountryCode']);
        }
        // validate the optional field `merchantName`
        if (data['merchantName']) { // data not null
          MerchantName.validateJSON(data['merchantName']);
        }
        // validate the optional field `merchantPostalCode`
        if (data['merchantPostalCode']) { // data not null
          MerchantPostalCode.validateJSON(data['merchantPostalCode']);
        }
        // validate the optional field `merchantState`
        if (data['merchantState']) { // data not null
          MerchantCity.validateJSON(data['merchantState']);
        }
        // validate the optional field `merchantTypes`
        if (data['merchantTypes']) { // data not null
          MerchantTypes.validateJSON(data['merchantTypes']);
        }
        // validate the optional field `taxAmount`
        if (data['taxAmount']) { // data not null
          TaxAmount.validateJSON(data['taxAmount']);
        }
        // validate the optional field `totalAmount`
        if (data['totalAmount']) { // data not null
          TotalAmount.validateJSON(data['totalAmount']);
        }

        return true;
    }


}



/**
 * Overall confidence level
 * @member {Number} confidenceLevel
 */
ReceiptResult.prototype['confidenceLevel'] = undefined;

/**
 * @member {module:model/Date1} date
 */
ReceiptResult.prototype['date'] = undefined;

/**
 * @member {String} error
 */
ReceiptResult.prototype['error'] = undefined;

/**
 * @member {module:model/MerchantAddress} merchantAddress
 */
ReceiptResult.prototype['merchantAddress'] = undefined;

/**
 * @member {module:model/MerchantCity} merchantCity
 */
ReceiptResult.prototype['merchantCity'] = undefined;

/**
 * @member {module:model/MerchantCountryCode} merchantCountryCode
 */
ReceiptResult.prototype['merchantCountryCode'] = undefined;

/**
 * @member {module:model/MerchantName} merchantName
 */
ReceiptResult.prototype['merchantName'] = undefined;

/**
 * @member {module:model/MerchantPostalCode} merchantPostalCode
 */
ReceiptResult.prototype['merchantPostalCode'] = undefined;

/**
 * @member {module:model/MerchantCity} merchantState
 */
ReceiptResult.prototype['merchantState'] = undefined;

/**
 * @member {module:model/MerchantTypes} merchantTypes
 */
ReceiptResult.prototype['merchantTypes'] = undefined;

/**
 * @member {module:model/TaxAmount} taxAmount
 */
ReceiptResult.prototype['taxAmount'] = undefined;

/**
 * @member {module:model/TotalAmount} totalAmount
 */
ReceiptResult.prototype['totalAmount'] = undefined;






export default ReceiptResult;

