/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GrossAmount from './GrossAmount';
import NetAmount from './NetAmount';
import TaxAmount2 from './TaxAmount2';
import TaxRate from './TaxRate';
import TaxType from './TaxType';

/**
 * The Data2 model module.
 * @module model/Data2
 * @version 1.15.0
 */
class Data2 {
    /**
     * Constructs a new <code>Data2</code>.
     * @alias module:model/Data2
     */
    constructor() { 
        
        Data2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Data2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Data2} obj Optional instance to populate.
     * @return {module:model/Data2} The populated <code>Data2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Data2();

            if (data.hasOwnProperty('grossAmount')) {
                obj['grossAmount'] = GrossAmount.constructFromObject(data['grossAmount']);
            }
            if (data.hasOwnProperty('netAmount')) {
                obj['netAmount'] = NetAmount.constructFromObject(data['netAmount']);
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = TaxAmount2.constructFromObject(data['taxAmount']);
            }
            if (data.hasOwnProperty('taxRate')) {
                obj['taxRate'] = TaxRate.constructFromObject(data['taxRate']);
            }
            if (data.hasOwnProperty('taxType')) {
                obj['taxType'] = TaxType.constructFromObject(data['taxType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Data2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Data2</code>.
     */
    static validateJSON(data) {
        // validate the optional field `grossAmount`
        if (data['grossAmount']) { // data not null
          GrossAmount.validateJSON(data['grossAmount']);
        }
        // validate the optional field `netAmount`
        if (data['netAmount']) { // data not null
          NetAmount.validateJSON(data['netAmount']);
        }
        // validate the optional field `taxAmount`
        if (data['taxAmount']) { // data not null
          TaxAmount2.validateJSON(data['taxAmount']);
        }
        // validate the optional field `taxRate`
        if (data['taxRate']) { // data not null
          TaxRate.validateJSON(data['taxRate']);
        }
        // validate the optional field `taxType`
        if (data['taxType']) { // data not null
          TaxType.validateJSON(data['taxType']);
        }

        return true;
    }


}



/**
 * @member {module:model/GrossAmount} grossAmount
 */
Data2.prototype['grossAmount'] = undefined;

/**
 * @member {module:model/NetAmount} netAmount
 */
Data2.prototype['netAmount'] = undefined;

/**
 * @member {module:model/TaxAmount2} taxAmount
 */
Data2.prototype['taxAmount'] = undefined;

/**
 * @member {module:model/TaxRate} taxRate
 */
Data2.prototype['taxRate'] = undefined;

/**
 * @member {module:model/TaxType} taxType
 */
Data2.prototype['taxType'] = undefined;






export default Data2;

