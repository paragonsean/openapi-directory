/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ABN from './ABN';
import BankingDetails from './BankingDetails';
import ExpenseType from './ExpenseType';
import FapiaoInvoice from './FapiaoInvoice';
import FapiaoInvoiceCode from './FapiaoInvoiceCode';
import FapiaoInvoiceNumber from './FapiaoInvoiceNumber';
import FapiaoMerchantTaxId from './FapiaoMerchantTaxId';
import IBAN from './IBAN';
import InvoiceNumber from './InvoiceNumber';
import MasterCategory from './MasterCategory';
import MerchantVerification from './MerchantVerification';
import Model3 from './Model3';
import Model4 from './Model4';
import Model5 from './Model5';
import Model6 from './Model6';
import Model7 from './Model7';
import Model8 from './Model8';
import QrCodeData from './QrCodeData';
import ReceiptNumber from './ReceiptNumber';
import ShoppingMallName from './ShoppingMallName';

/**
 * The Entities model module.
 * @module model/Entities
 * @version 1.15.0
 */
class Entities {
    /**
     * Constructs a new <code>Entities</code>.
     * @alias module:model/Entities
     */
    constructor() { 
        
        Entities.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Entities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entities} obj Optional instance to populate.
     * @return {module:model/Entities} The populated <code>Entities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entities();

            if (data.hasOwnProperty('ABN')) {
                obj['ABN'] = ABN.constructFromObject(data['ABN']);
            }
            if (data.hasOwnProperty('IBAN')) {
                obj['IBAN'] = IBAN.constructFromObject(data['IBAN']);
            }
            if (data.hasOwnProperty('bankingDetails')) {
                obj['bankingDetails'] = BankingDetails.constructFromObject(data['bankingDetails']);
            }
            if (data.hasOwnProperty('belgiumVATNumbers')) {
                obj['belgiumVATNumbers'] = ApiClient.convertToType(data['belgiumVATNumbers'], [Model3]);
            }
            if (data.hasOwnProperty('excludeItems')) {
                obj['excludeItems'] = ApiClient.convertToType(data['excludeItems'], [Model4]);
            }
            if (data.hasOwnProperty('expenseType')) {
                obj['expenseType'] = ExpenseType.constructFromObject(data['expenseType']);
            }
            if (data.hasOwnProperty('fapiaoInvoice')) {
                obj['fapiaoInvoice'] = FapiaoInvoice.constructFromObject(data['fapiaoInvoice']);
            }
            if (data.hasOwnProperty('fapiaoInvoiceCode')) {
                obj['fapiaoInvoiceCode'] = FapiaoInvoiceCode.constructFromObject(data['fapiaoInvoiceCode']);
            }
            if (data.hasOwnProperty('fapiaoInvoiceNumber')) {
                obj['fapiaoInvoiceNumber'] = FapiaoInvoiceNumber.constructFromObject(data['fapiaoInvoiceNumber']);
            }
            if (data.hasOwnProperty('fapiaoMerchantTaxId')) {
                obj['fapiaoMerchantTaxId'] = FapiaoMerchantTaxId.constructFromObject(data['fapiaoMerchantTaxId']);
            }
            if (data.hasOwnProperty('geoNames')) {
                obj['geoNames'] = ApiClient.convertToType(data['geoNames'], [Model8]);
            }
            if (data.hasOwnProperty('invoiceNumber')) {
                obj['invoiceNumber'] = InvoiceNumber.constructFromObject(data['invoiceNumber']);
            }
            if (data.hasOwnProperty('masterCategory')) {
                obj['masterCategory'] = MasterCategory.constructFromObject(data['masterCategory']);
            }
            if (data.hasOwnProperty('merchantVerification')) {
                obj['merchantVerification'] = MerchantVerification.constructFromObject(data['merchantVerification']);
            }
            if (data.hasOwnProperty('multiTaxLineItems')) {
                obj['multiTaxLineItems'] = ApiClient.convertToType(data['multiTaxLineItems'], [Model7]);
            }
            if (data.hasOwnProperty('productLineItems')) {
                obj['productLineItems'] = ApiClient.convertToType(data['productLineItems'], [Model6]);
            }
            if (data.hasOwnProperty('qrCodeData')) {
                obj['qrCodeData'] = QrCodeData.constructFromObject(data['qrCodeData']);
            }
            if (data.hasOwnProperty('receiptNumber')) {
                obj['receiptNumber'] = ReceiptNumber.constructFromObject(data['receiptNumber']);
            }
            if (data.hasOwnProperty('shoppingMallName')) {
                obj['shoppingMallName'] = ShoppingMallName.constructFromObject(data['shoppingMallName']);
            }
            if (data.hasOwnProperty('wineListItems')) {
                obj['wineListItems'] = ApiClient.convertToType(data['wineListItems'], [Model5]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entities</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entities</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ABN`
        if (data['ABN']) { // data not null
          ABN.validateJSON(data['ABN']);
        }
        // validate the optional field `IBAN`
        if (data['IBAN']) { // data not null
          IBAN.validateJSON(data['IBAN']);
        }
        // validate the optional field `bankingDetails`
        if (data['bankingDetails']) { // data not null
          BankingDetails.validateJSON(data['bankingDetails']);
        }
        if (data['belgiumVATNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['belgiumVATNumbers'])) {
                throw new Error("Expected the field `belgiumVATNumbers` to be an array in the JSON data but got " + data['belgiumVATNumbers']);
            }
            // validate the optional field `belgiumVATNumbers` (array)
            for (const item of data['belgiumVATNumbers']) {
                Model3.validateJSON(item);
            };
        }
        if (data['excludeItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['excludeItems'])) {
                throw new Error("Expected the field `excludeItems` to be an array in the JSON data but got " + data['excludeItems']);
            }
            // validate the optional field `excludeItems` (array)
            for (const item of data['excludeItems']) {
                Model4.validateJSON(item);
            };
        }
        // validate the optional field `expenseType`
        if (data['expenseType']) { // data not null
          ExpenseType.validateJSON(data['expenseType']);
        }
        // validate the optional field `fapiaoInvoice`
        if (data['fapiaoInvoice']) { // data not null
          FapiaoInvoice.validateJSON(data['fapiaoInvoice']);
        }
        // validate the optional field `fapiaoInvoiceCode`
        if (data['fapiaoInvoiceCode']) { // data not null
          FapiaoInvoiceCode.validateJSON(data['fapiaoInvoiceCode']);
        }
        // validate the optional field `fapiaoInvoiceNumber`
        if (data['fapiaoInvoiceNumber']) { // data not null
          FapiaoInvoiceNumber.validateJSON(data['fapiaoInvoiceNumber']);
        }
        // validate the optional field `fapiaoMerchantTaxId`
        if (data['fapiaoMerchantTaxId']) { // data not null
          FapiaoMerchantTaxId.validateJSON(data['fapiaoMerchantTaxId']);
        }
        if (data['geoNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['geoNames'])) {
                throw new Error("Expected the field `geoNames` to be an array in the JSON data but got " + data['geoNames']);
            }
            // validate the optional field `geoNames` (array)
            for (const item of data['geoNames']) {
                Model8.validateJSON(item);
            };
        }
        // validate the optional field `invoiceNumber`
        if (data['invoiceNumber']) { // data not null
          InvoiceNumber.validateJSON(data['invoiceNumber']);
        }
        // validate the optional field `masterCategory`
        if (data['masterCategory']) { // data not null
          MasterCategory.validateJSON(data['masterCategory']);
        }
        // validate the optional field `merchantVerification`
        if (data['merchantVerification']) { // data not null
          MerchantVerification.validateJSON(data['merchantVerification']);
        }
        if (data['multiTaxLineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['multiTaxLineItems'])) {
                throw new Error("Expected the field `multiTaxLineItems` to be an array in the JSON data but got " + data['multiTaxLineItems']);
            }
            // validate the optional field `multiTaxLineItems` (array)
            for (const item of data['multiTaxLineItems']) {
                Model7.validateJSON(item);
            };
        }
        if (data['productLineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productLineItems'])) {
                throw new Error("Expected the field `productLineItems` to be an array in the JSON data but got " + data['productLineItems']);
            }
            // validate the optional field `productLineItems` (array)
            for (const item of data['productLineItems']) {
                Model6.validateJSON(item);
            };
        }
        // validate the optional field `qrCodeData`
        if (data['qrCodeData']) { // data not null
          QrCodeData.validateJSON(data['qrCodeData']);
        }
        // validate the optional field `receiptNumber`
        if (data['receiptNumber']) { // data not null
          ReceiptNumber.validateJSON(data['receiptNumber']);
        }
        // validate the optional field `shoppingMallName`
        if (data['shoppingMallName']) { // data not null
          ShoppingMallName.validateJSON(data['shoppingMallName']);
        }
        if (data['wineListItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['wineListItems'])) {
                throw new Error("Expected the field `wineListItems` to be an array in the JSON data but got " + data['wineListItems']);
            }
            // validate the optional field `wineListItems` (array)
            for (const item of data['wineListItems']) {
                Model5.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/ABN} ABN
 */
Entities.prototype['ABN'] = undefined;

/**
 * @member {module:model/IBAN} IBAN
 */
Entities.prototype['IBAN'] = undefined;

/**
 * @member {module:model/BankingDetails} bankingDetails
 */
Entities.prototype['bankingDetails'] = undefined;

/**
 * @member {Array.<module:model/Model3>} belgiumVATNumbers
 */
Entities.prototype['belgiumVATNumbers'] = undefined;

/**
 * @member {Array.<module:model/Model4>} excludeItems
 */
Entities.prototype['excludeItems'] = undefined;

/**
 * @member {module:model/ExpenseType} expenseType
 */
Entities.prototype['expenseType'] = undefined;

/**
 * @member {module:model/FapiaoInvoice} fapiaoInvoice
 */
Entities.prototype['fapiaoInvoice'] = undefined;

/**
 * @member {module:model/FapiaoInvoiceCode} fapiaoInvoiceCode
 */
Entities.prototype['fapiaoInvoiceCode'] = undefined;

/**
 * @member {module:model/FapiaoInvoiceNumber} fapiaoInvoiceNumber
 */
Entities.prototype['fapiaoInvoiceNumber'] = undefined;

/**
 * @member {module:model/FapiaoMerchantTaxId} fapiaoMerchantTaxId
 */
Entities.prototype['fapiaoMerchantTaxId'] = undefined;

/**
 * @member {Array.<module:model/Model8>} geoNames
 */
Entities.prototype['geoNames'] = undefined;

/**
 * @member {module:model/InvoiceNumber} invoiceNumber
 */
Entities.prototype['invoiceNumber'] = undefined;

/**
 * @member {module:model/MasterCategory} masterCategory
 */
Entities.prototype['masterCategory'] = undefined;

/**
 * @member {module:model/MerchantVerification} merchantVerification
 */
Entities.prototype['merchantVerification'] = undefined;

/**
 * @member {Array.<module:model/Model7>} multiTaxLineItems
 */
Entities.prototype['multiTaxLineItems'] = undefined;

/**
 * @member {Array.<module:model/Model6>} productLineItems
 */
Entities.prototype['productLineItems'] = undefined;

/**
 * @member {module:model/QrCodeData} qrCodeData
 */
Entities.prototype['qrCodeData'] = undefined;

/**
 * @member {module:model/ReceiptNumber} receiptNumber
 */
Entities.prototype['receiptNumber'] = undefined;

/**
 * @member {module:model/ShoppingMallName} shoppingMallName
 */
Entities.prototype['shoppingMallName'] = undefined;

/**
 * @member {Array.<module:model/Model5>} wineListItems
 */
Entities.prototype['wineListItems'] = undefined;






export default Entities;

