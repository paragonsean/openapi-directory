/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Name from './Name';
import Quantity1 from './Quantity1';
import TotalPrice from './TotalPrice';
import UnitPrice1 from './UnitPrice1';

/**
 * The Data1 model module.
 * @module model/Data1
 * @version 1.15.0
 */
class Data1 {
    /**
     * Constructs a new <code>Data1</code>.
     * @alias module:model/Data1
     */
    constructor() { 
        
        Data1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Data1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Data1} obj Optional instance to populate.
     * @return {module:model/Data1} The populated <code>Data1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Data1();

            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = Quantity1.constructFromObject(data['quantity']);
            }
            if (data.hasOwnProperty('totalPrice')) {
                obj['totalPrice'] = TotalPrice.constructFromObject(data['totalPrice']);
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = UnitPrice1.constructFromObject(data['unitPrice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Data1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Data1</code>.
     */
    static validateJSON(data) {
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // validate the optional field `quantity`
        if (data['quantity']) { // data not null
          Quantity1.validateJSON(data['quantity']);
        }
        // validate the optional field `totalPrice`
        if (data['totalPrice']) { // data not null
          TotalPrice.validateJSON(data['totalPrice']);
        }
        // validate the optional field `unitPrice`
        if (data['unitPrice']) { // data not null
          UnitPrice1.validateJSON(data['unitPrice']);
        }

        return true;
    }


}



/**
 * @member {module:model/Name} name
 */
Data1.prototype['name'] = undefined;

/**
 * @member {module:model/Quantity1} quantity
 */
Data1.prototype['quantity'] = undefined;

/**
 * @member {module:model/TotalPrice} totalPrice
 */
Data1.prototype['totalPrice'] = undefined;

/**
 * @member {module:model/UnitPrice1} unitPrice
 */
Data1.prototype['unitPrice'] = undefined;






export default Data1;

