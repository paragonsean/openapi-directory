/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReceiptFeedbackAddPayload model module.
 * @module model/ReceiptFeedbackAddPayload
 * @version 1.15.0
 */
class ReceiptFeedbackAddPayload {
    /**
     * Constructs a new <code>ReceiptFeedbackAddPayload</code>.
     * @alias module:model/ReceiptFeedbackAddPayload
     * @param referenceId {String} 
     */
    constructor(referenceId) { 
        
        ReceiptFeedbackAddPayload.initialize(this, referenceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, referenceId) { 
        obj['referenceId'] = referenceId;
    }

    /**
     * Constructs a <code>ReceiptFeedbackAddPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceiptFeedbackAddPayload} obj Optional instance to populate.
     * @return {module:model/ReceiptFeedbackAddPayload} The populated <code>ReceiptFeedbackAddPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceiptFeedbackAddPayload();

            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('masterCategory')) {
                obj['masterCategory'] = ApiClient.convertToType(data['masterCategory'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('referenceId')) {
                obj['referenceId'] = ApiClient.convertToType(data['referenceId'], 'String');
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = ApiClient.convertToType(data['taxAmount'], 'Number');
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReceiptFeedbackAddPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReceiptFeedbackAddPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReceiptFeedbackAddPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['masterCategory'] && !(typeof data['masterCategory'] === 'string' || data['masterCategory'] instanceof String)) {
            throw new Error("Expected the field `masterCategory` to be a primitive type in the JSON string but got " + data['masterCategory']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['referenceId'] && !(typeof data['referenceId'] === 'string' || data['referenceId'] instanceof String)) {
            throw new Error("Expected the field `referenceId` to be a primitive type in the JSON string but got " + data['referenceId']);
        }

        return true;
    }


}

ReceiptFeedbackAddPayload.RequiredProperties = ["referenceId"];

/**
 * @member {String} currencyCode
 */
ReceiptFeedbackAddPayload.prototype['currencyCode'] = undefined;

/**
 * @member {Date} date
 */
ReceiptFeedbackAddPayload.prototype['date'] = undefined;

/**
 * @member {String} masterCategory
 */
ReceiptFeedbackAddPayload.prototype['masterCategory'] = undefined;

/**
 * @member {String} merchantName
 */
ReceiptFeedbackAddPayload.prototype['merchantName'] = undefined;

/**
 * @member {String} referenceId
 */
ReceiptFeedbackAddPayload.prototype['referenceId'] = undefined;

/**
 * @member {Number} taxAmount
 */
ReceiptFeedbackAddPayload.prototype['taxAmount'] = undefined;

/**
 * @member {Number} totalAmount
 */
ReceiptFeedbackAddPayload.prototype['totalAmount'] = undefined;






export default ReceiptFeedbackAddPayload;

