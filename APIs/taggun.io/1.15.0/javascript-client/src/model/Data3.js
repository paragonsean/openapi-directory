/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Vies from './Vies';

/**
 * The Data3 model module.
 * @module model/Data3
 * @version 1.15.0
 */
class Data3 {
    /**
     * Constructs a new <code>Data3</code>.
     * @alias module:model/Data3
     */
    constructor() { 
        
        Data3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Data3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Data3} obj Optional instance to populate.
     * @return {module:model/Data3} The populated <code>Data3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Data3();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('vatNo')) {
                obj['vatNo'] = ApiClient.convertToType(data['vatNo'], 'String');
            }
            if (data.hasOwnProperty('verificationId')) {
                obj['verificationId'] = ApiClient.convertToType(data['verificationId'], 'String');
            }
            if (data.hasOwnProperty('vies')) {
                obj['vies'] = Vies.constructFromObject(data['vies']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Data3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Data3</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['vatNo'] && !(typeof data['vatNo'] === 'string' || data['vatNo'] instanceof String)) {
            throw new Error("Expected the field `vatNo` to be a primitive type in the JSON string but got " + data['vatNo']);
        }
        // ensure the json data is a string
        if (data['verificationId'] && !(typeof data['verificationId'] === 'string' || data['verificationId'] instanceof String)) {
            throw new Error("Expected the field `verificationId` to be a primitive type in the JSON string but got " + data['verificationId']);
        }
        // validate the optional field `vies`
        if (data['vies']) { // data not null
          Vies.validateJSON(data['vies']);
        }

        return true;
    }


}



/**
 * @member {String} countryCode
 */
Data3.prototype['countryCode'] = undefined;

/**
 * @member {String} vatNo
 */
Data3.prototype['vatNo'] = undefined;

/**
 * @member {String} verificationId
 */
Data3.prototype['verificationId'] = undefined;

/**
 * @member {module:model/Vies} vies
 */
Data3.prototype['vies'] = undefined;






export default Data3;

