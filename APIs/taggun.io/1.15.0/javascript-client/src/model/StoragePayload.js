/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StoragePayload model module.
 * @module model/StoragePayload
 * @version 1.15.0
 */
class StoragePayload {
    /**
     * Constructs a new <code>StoragePayload</code>.
     * @alias module:model/StoragePayload
     * @param contentType {String} 
     * @param md5 {String} MD5 hash of the receipt
     */
    constructor(contentType, md5) { 
        
        StoragePayload.initialize(this, contentType, md5);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentType, md5) { 
        obj['contentType'] = contentType;
        obj['extractTime'] = false;
        obj['md5'] = md5;
        obj['refresh'] = false;
    }

    /**
     * Constructs a <code>StoragePayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoragePayload} obj Optional instance to populate.
     * @return {module:model/StoragePayload} The populated <code>StoragePayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoragePayload();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('extractTime')) {
                obj['extractTime'] = ApiClient.convertToType(data['extractTime'], 'Boolean');
            }
            if (data.hasOwnProperty('ignoreMerchantName')) {
                obj['ignoreMerchantName'] = ApiClient.convertToType(data['ignoreMerchantName'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('md5')) {
                obj['md5'] = ApiClient.convertToType(data['md5'], 'String');
            }
            if (data.hasOwnProperty('near')) {
                obj['near'] = ApiClient.convertToType(data['near'], 'String');
            }
            if (data.hasOwnProperty('referenceId')) {
                obj['referenceId'] = ApiClient.convertToType(data['referenceId'], 'String');
            }
            if (data.hasOwnProperty('refresh')) {
                obj['refresh'] = ApiClient.convertToType(data['refresh'], 'Boolean');
            }
            if (data.hasOwnProperty('subAccountId')) {
                obj['subAccountId'] = ApiClient.convertToType(data['subAccountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoragePayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoragePayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StoragePayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['ignoreMerchantName'] && !(typeof data['ignoreMerchantName'] === 'string' || data['ignoreMerchantName'] instanceof String)) {
            throw new Error("Expected the field `ignoreMerchantName` to be a primitive type in the JSON string but got " + data['ignoreMerchantName']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['md5'] && !(typeof data['md5'] === 'string' || data['md5'] instanceof String)) {
            throw new Error("Expected the field `md5` to be a primitive type in the JSON string but got " + data['md5']);
        }
        // ensure the json data is a string
        if (data['near'] && !(typeof data['near'] === 'string' || data['near'] instanceof String)) {
            throw new Error("Expected the field `near` to be a primitive type in the JSON string but got " + data['near']);
        }
        // ensure the json data is a string
        if (data['referenceId'] && !(typeof data['referenceId'] === 'string' || data['referenceId'] instanceof String)) {
            throw new Error("Expected the field `referenceId` to be a primitive type in the JSON string but got " + data['referenceId']);
        }
        // ensure the json data is a string
        if (data['subAccountId'] && !(typeof data['subAccountId'] === 'string' || data['subAccountId'] instanceof String)) {
            throw new Error("Expected the field `subAccountId` to be a primitive type in the JSON string but got " + data['subAccountId']);
        }

        return true;
    }


}

StoragePayload.RequiredProperties = ["contentType", "md5"];

/**
 * @member {String} contentType
 */
StoragePayload.prototype['contentType'] = undefined;

/**
 * Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000.
 * @member {Boolean} extractTime
 * @default false
 */
StoragePayload.prototype['extractTime'] = false;

/**
 * Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name.
 * @member {String} ignoreMerchantName
 */
StoragePayload.prototype['ignoreMerchantName'] = undefined;

/**
 * IP Address of the end user
 * @member {String} ipAddress
 */
StoragePayload.prototype['ipAddress'] = undefined;

/**
 * Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 
 * @member {module:model/StoragePayload.LanguageEnum} language
 */
StoragePayload.prototype['language'] = undefined;

/**
 * MD5 hash of the receipt
 * @member {String} md5
 */
StoragePayload.prototype['md5'] = undefined;

/**
 * A geo location to search for merchant. Typically in the format of city, state, country.
 * @member {String} near
 */
StoragePayload.prototype['near'] = undefined;

/**
 * Tag a request with a unique reference ID for feedback and training purposes
 * @member {String} referenceId
 */
StoragePayload.prototype['referenceId'] = undefined;

/**
 * Refresh cache if exists
 * @member {Boolean} refresh
 * @default false
 */
StoragePayload.prototype['refresh'] = false;

/**
 * Tag a request with sub-account ID for billing purposes
 * @member {String} subAccountId
 */
StoragePayload.prototype['subAccountId'] = undefined;





/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
StoragePayload['LanguageEnum'] = {

    /**
     * value: "en"
     * @const
     */
    "en": "en",

    /**
     * value: "es"
     * @const
     */
    "es": "es",

    /**
     * value: "fr"
     * @const
     */
    "fr": "fr",

    /**
     * value: "jp"
     * @const
     */
    "jp": "jp",

    /**
     * value: "he"
     * @const
     */
    "he": "he",

    /**
     * value: "iw"
     * @const
     */
    "iw": "iw",

    /**
     * value: "et"
     * @const
     */
    "et": "et",

    /**
     * value: "lv"
     * @const
     */
    "lv": "lv",

    /**
     * value: "lt"
     * @const
     */
    "lt": "lt",

    /**
     * value: "fi"
     * @const
     */
    "fi": "fi",

    /**
     * value: "el"
     * @const
     */
    "el": "el",

    /**
     * value: "zh"
     * @const
     */
    "zh": "zh"
};



export default StoragePayload;

