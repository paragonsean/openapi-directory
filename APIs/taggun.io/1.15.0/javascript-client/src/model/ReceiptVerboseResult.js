/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DueDate from './DueDate';
import Entities from './Entities';
import ItemsCount from './ItemsCount';
import LocationResult from './LocationResult';
import MerchantAddress1 from './MerchantAddress1';
import MerchantCity1 from './MerchantCity1';
import MerchantCountryCode1 from './MerchantCountryCode1';
import MerchantName1 from './MerchantName1';
import MerchantPostalCode1 from './MerchantPostalCode1';
import MerchantState from './MerchantState';
import MerchantTypes1 from './MerchantTypes1';
import PaymentType from './PaymentType';
import TaxAmount1 from './TaxAmount1';
import Text from './Text';
import TotalAmount1 from './TotalAmount1';

/**
 * The ReceiptVerboseResult model module.
 * @module model/ReceiptVerboseResult
 * @version 1.15.0
 */
class ReceiptVerboseResult {
    /**
     * Constructs a new <code>ReceiptVerboseResult</code>.
     * @alias module:model/ReceiptVerboseResult
     */
    constructor() { 
        
        ReceiptVerboseResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReceiptVerboseResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReceiptVerboseResult} obj Optional instance to populate.
     * @return {module:model/ReceiptVerboseResult} The populated <code>ReceiptVerboseResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReceiptVerboseResult();

            if (data.hasOwnProperty('amounts')) {
                obj['amounts'] = ApiClient.convertToType(data['amounts'], ['String']);
            }
            if (data.hasOwnProperty('confidenceLevel')) {
                obj['confidenceLevel'] = ApiClient.convertToType(data['confidenceLevel'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = 'Date'.constructFromObject(data['date']);
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = DueDate.constructFromObject(data['dueDate']);
            }
            if (data.hasOwnProperty('elapsed')) {
                obj['elapsed'] = ApiClient.convertToType(data['elapsed'], 'Number');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = Entities.constructFromObject(data['entities']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('itemsCount')) {
                obj['itemsCount'] = ItemsCount.constructFromObject(data['itemsCount']);
            }
            if (data.hasOwnProperty('lineAmounts')) {
                obj['lineAmounts'] = ApiClient.convertToType(data['lineAmounts'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = LocationResult.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('merchantAddress')) {
                obj['merchantAddress'] = MerchantAddress1.constructFromObject(data['merchantAddress']);
            }
            if (data.hasOwnProperty('merchantCity')) {
                obj['merchantCity'] = MerchantCity1.constructFromObject(data['merchantCity']);
            }
            if (data.hasOwnProperty('merchantCountryCode')) {
                obj['merchantCountryCode'] = MerchantCountryCode1.constructFromObject(data['merchantCountryCode']);
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = MerchantName1.constructFromObject(data['merchantName']);
            }
            if (data.hasOwnProperty('merchantPostalCode')) {
                obj['merchantPostalCode'] = MerchantPostalCode1.constructFromObject(data['merchantPostalCode']);
            }
            if (data.hasOwnProperty('merchantState')) {
                obj['merchantState'] = MerchantState.constructFromObject(data['merchantState']);
            }
            if (data.hasOwnProperty('merchantTypes')) {
                obj['merchantTypes'] = MerchantTypes1.constructFromObject(data['merchantTypes']);
            }
            if (data.hasOwnProperty('numbers')) {
                obj['numbers'] = ApiClient.convertToType(data['numbers'], ['String']);
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = PaymentType.constructFromObject(data['paymentType']);
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = TaxAmount1.constructFromObject(data['taxAmount']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = Text.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = TotalAmount1.constructFromObject(data['totalAmount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReceiptVerboseResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReceiptVerboseResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['amounts'])) {
            throw new Error("Expected the field `amounts` to be an array in the JSON data but got " + data['amounts']);
        }
        // validate the optional field `date`
        if (data['date']) { // data not null
          Date.validateJSON(data['date']);
        }
        // validate the optional field `dueDate`
        if (data['dueDate']) { // data not null
          DueDate.validateJSON(data['dueDate']);
        }
        // validate the optional field `entities`
        if (data['entities']) { // data not null
          Entities.validateJSON(data['entities']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // validate the optional field `itemsCount`
        if (data['itemsCount']) { // data not null
          ItemsCount.validateJSON(data['itemsCount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lineAmounts'])) {
            throw new Error("Expected the field `lineAmounts` to be an array in the JSON data but got " + data['lineAmounts']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          LocationResult.validateJSON(data['location']);
        }
        // validate the optional field `merchantAddress`
        if (data['merchantAddress']) { // data not null
          MerchantAddress1.validateJSON(data['merchantAddress']);
        }
        // validate the optional field `merchantCity`
        if (data['merchantCity']) { // data not null
          MerchantCity1.validateJSON(data['merchantCity']);
        }
        // validate the optional field `merchantCountryCode`
        if (data['merchantCountryCode']) { // data not null
          MerchantCountryCode1.validateJSON(data['merchantCountryCode']);
        }
        // validate the optional field `merchantName`
        if (data['merchantName']) { // data not null
          MerchantName1.validateJSON(data['merchantName']);
        }
        // validate the optional field `merchantPostalCode`
        if (data['merchantPostalCode']) { // data not null
          MerchantPostalCode1.validateJSON(data['merchantPostalCode']);
        }
        // validate the optional field `merchantState`
        if (data['merchantState']) { // data not null
          MerchantState.validateJSON(data['merchantState']);
        }
        // validate the optional field `merchantTypes`
        if (data['merchantTypes']) { // data not null
          MerchantTypes1.validateJSON(data['merchantTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['numbers'])) {
            throw new Error("Expected the field `numbers` to be an array in the JSON data but got " + data['numbers']);
        }
        // validate the optional field `paymentType`
        if (data['paymentType']) { // data not null
          PaymentType.validateJSON(data['paymentType']);
        }
        // validate the optional field `taxAmount`
        if (data['taxAmount']) { // data not null
          TaxAmount1.validateJSON(data['taxAmount']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          Text.validateJSON(data['text']);
        }
        // validate the optional field `totalAmount`
        if (data['totalAmount']) { // data not null
          TotalAmount1.validateJSON(data['totalAmount']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} amounts
 */
ReceiptVerboseResult.prototype['amounts'] = undefined;

/**
 * @member {Number} confidenceLevel
 */
ReceiptVerboseResult.prototype['confidenceLevel'] = undefined;

/**
 * @member {Date} date
 */
ReceiptVerboseResult.prototype['date'] = undefined;

/**
 * @member {module:model/DueDate} dueDate
 */
ReceiptVerboseResult.prototype['dueDate'] = undefined;

/**
 * @member {Number} elapsed
 */
ReceiptVerboseResult.prototype['elapsed'] = undefined;

/**
 * @member {module:model/Entities} entities
 */
ReceiptVerboseResult.prototype['entities'] = undefined;

/**
 * @member {String} error
 */
ReceiptVerboseResult.prototype['error'] = undefined;

/**
 * @member {module:model/ItemsCount} itemsCount
 */
ReceiptVerboseResult.prototype['itemsCount'] = undefined;

/**
 * @member {Array.<String>} lineAmounts
 */
ReceiptVerboseResult.prototype['lineAmounts'] = undefined;

/**
 * @member {module:model/LocationResult} location
 */
ReceiptVerboseResult.prototype['location'] = undefined;

/**
 * @member {module:model/MerchantAddress1} merchantAddress
 */
ReceiptVerboseResult.prototype['merchantAddress'] = undefined;

/**
 * @member {module:model/MerchantCity1} merchantCity
 */
ReceiptVerboseResult.prototype['merchantCity'] = undefined;

/**
 * @member {module:model/MerchantCountryCode1} merchantCountryCode
 */
ReceiptVerboseResult.prototype['merchantCountryCode'] = undefined;

/**
 * @member {module:model/MerchantName1} merchantName
 */
ReceiptVerboseResult.prototype['merchantName'] = undefined;

/**
 * @member {module:model/MerchantPostalCode1} merchantPostalCode
 */
ReceiptVerboseResult.prototype['merchantPostalCode'] = undefined;

/**
 * @member {module:model/MerchantState} merchantState
 */
ReceiptVerboseResult.prototype['merchantState'] = undefined;

/**
 * @member {module:model/MerchantTypes1} merchantTypes
 */
ReceiptVerboseResult.prototype['merchantTypes'] = undefined;

/**
 * @member {Array.<String>} numbers
 */
ReceiptVerboseResult.prototype['numbers'] = undefined;

/**
 * @member {module:model/PaymentType} paymentType
 */
ReceiptVerboseResult.prototype['paymentType'] = undefined;

/**
 * @member {module:model/TaxAmount1} taxAmount
 */
ReceiptVerboseResult.prototype['taxAmount'] = undefined;

/**
 * @member {module:model/Text} text
 */
ReceiptVerboseResult.prototype['text'] = undefined;

/**
 * @member {module:model/TotalAmount1} totalAmount
 */
ReceiptVerboseResult.prototype['totalAmount'] = undefined;






export default ReceiptVerboseResult;

