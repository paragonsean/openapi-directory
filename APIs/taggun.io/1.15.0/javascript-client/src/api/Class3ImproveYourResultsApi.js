/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import MerchantNameAddPayload from '../model/MerchantNameAddPayload';
import ReceiptFeedbackAddPayload from '../model/ReceiptFeedbackAddPayload';
import Result from '../model/Result';

/**
* Class3ImproveYourResults service.
* @module api/Class3ImproveYourResultsApi
* @version 1.15.0
*/
export default class Class3ImproveYourResultsApi {

    /**
    * Constructs a new Class3ImproveYourResultsApi. 
    * @alias module:api/Class3ImproveYourResultsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postApiAccountV1Feedback operation.
     * @callback module:api/Class3ImproveYourResultsApi~postApiAccountV1FeedbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add manually verified receipt data to a given receipt for feedback and training purposes
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReceiptFeedbackAddPayload} [body] 
     * @param {module:api/Class3ImproveYourResultsApi~postApiAccountV1FeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    postApiAccountV1Feedback(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiAccountV1Feedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/api/account/v1/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiAccountV1MerchantnameAdd operation.
     * @callback module:api/Class3ImproveYourResultsApi~postApiAccountV1MerchantnameAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a keyword to your account's model to predict merchant name. Changes in your account's model are updated daily.
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/MerchantNameAddPayload} [body] 
     * @param {module:api/Class3ImproveYourResultsApi~postApiAccountV1MerchantnameAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    postApiAccountV1MerchantnameAdd(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiAccountV1MerchantnameAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/api/account/v1/merchantname/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
