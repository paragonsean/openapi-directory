/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import ReceiptResult from '../model/ReceiptResult';
import ReceiptVerboseResult from '../model/ReceiptVerboseResult';

/**
* Class1GettingStarted service.
* @module api/Class1GettingStartedApi
* @version 1.15.0
*/
export default class Class1GettingStartedApi {

    /**
    * Constructs a new Class1GettingStartedApi. 
    * @alias module:api/Class1GettingStartedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postApiReceiptV1SimpleFile operation.
     * @callback module:api/Class1GettingStartedApi~postApiReceiptV1SimpleFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt by uploading an image file
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {File} [file] file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC
     * @param {Boolean} [refresh = false)] Set true to force re-process image transcription if the receipt is already in storage
     * @param {Boolean} [incognito = false)] Set true to avoid saving the receipt in storage
     * @param {String} [ipAddress] IP Address of the end user
     * @param {String} [near] A geo location to search for merchant. Typically in the format of city, state, country.
     * @param {String} [ignoreMerchantName] Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name.
     * @param {module:model/String} [language] Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 
     * @param {Boolean} [extractTime = false)] Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000.
     * @param {String} [subAccountId] Tag a request with sub-account ID for billing purposes
     * @param {String} [referenceId] Tag a request with a unique reference ID for feedback and training purposes
     * @param {module:api/Class1GettingStartedApi~postApiReceiptV1SimpleFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptResult}
     */
    postApiReceiptV1SimpleFile(apikey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1SimpleFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
        'file': opts['file'],
        'refresh': opts['refresh'],
        'incognito': opts['incognito'],
        'ipAddress': opts['ipAddress'],
        'near': opts['near'],
        'ignoreMerchantName': opts['ignoreMerchantName'],
        'language': opts['language'],
        'extractTime': opts['extractTime'],
        'subAccountId': opts['subAccountId'],
        'referenceId': opts['referenceId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = ReceiptResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/simple/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiReceiptV1VerboseFile operation.
     * @callback module:api/Class1GettingStartedApi~postApiReceiptV1VerboseFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptVerboseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt by uploading an image file and return detailed result
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {File} [file] file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC
     * @param {Boolean} [refresh = false)] Set true to force re-process image transcription if the receipt is already in storage
     * @param {Boolean} [incognito = false)] Set true to avoid saving the receipt in storage
     * @param {String} [ipAddress] IP Address of the end user
     * @param {String} [near] A geo location to search for merchant. Typically in the format of city, state, country.
     * @param {String} [ignoreMerchantName] Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name.
     * @param {module:model/String} [language] Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 
     * @param {Boolean} [extractTime = false)] Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000.
     * @param {String} [subAccountId] Tag a request with sub-account ID for billing purposes
     * @param {String} [referenceId] Tag a request with a unique reference ID for feedback and training purposes
     * @param {module:api/Class1GettingStartedApi~postApiReceiptV1VerboseFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptVerboseResult}
     */
    postApiReceiptV1VerboseFile(apikey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1VerboseFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
        'file': opts['file'],
        'refresh': opts['refresh'],
        'incognito': opts['incognito'],
        'ipAddress': opts['ipAddress'],
        'near': opts['near'],
        'ignoreMerchantName': opts['ignoreMerchantName'],
        'language': opts['language'],
        'extractTime': opts['extractTime'],
        'subAccountId': opts['subAccountId'],
        'referenceId': opts['referenceId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = ReceiptVerboseResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/verbose/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
