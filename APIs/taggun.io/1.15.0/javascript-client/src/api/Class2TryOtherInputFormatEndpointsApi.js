/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import JsonPayload from '../model/JsonPayload';
import ReceiptResult from '../model/ReceiptResult';
import ReceiptVerboseResult from '../model/ReceiptVerboseResult';
import UrlPayload from '../model/UrlPayload';

/**
* Class2TryOtherInputFormatEndpoints service.
* @module api/Class2TryOtherInputFormatEndpointsApi
* @version 1.15.0
*/
export default class Class2TryOtherInputFormatEndpointsApi {

    /**
    * Constructs a new Class2TryOtherInputFormatEndpointsApi. 
    * @alias module:api/Class2TryOtherInputFormatEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postApiReceiptV1SimpleEncoded operation.
     * @callback module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1SimpleEncodedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt using base64 encoded image in json payload
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/JsonPayload} [body] 
     * @param {module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1SimpleEncodedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptResult}
     */
    postApiReceiptV1SimpleEncoded(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1SimpleEncoded");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReceiptResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/simple/encoded', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiReceiptV1SimpleUrl operation.
     * @callback module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1SimpleUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt from URL
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/UrlPayload} [body] 
     * @param {module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1SimpleUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptResult}
     */
    postApiReceiptV1SimpleUrl(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1SimpleUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReceiptResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/simple/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiReceiptV1VerboseEncoded operation.
     * @callback module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1VerboseEncodedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptVerboseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt using base64 encoded image in json payload and return detailed result
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/JsonPayload} [body] 
     * @param {module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1VerboseEncodedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptVerboseResult}
     */
    postApiReceiptV1VerboseEncoded(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1VerboseEncoded");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReceiptVerboseResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/verbose/encoded', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiReceiptV1VerboseUrl operation.
     * @callback module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1VerboseUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptVerboseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt from URL and return detailed result
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/UrlPayload} [body] 
     * @param {module:api/Class2TryOtherInputFormatEndpointsApi~postApiReceiptV1VerboseUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptVerboseResult}
     */
    postApiReceiptV1VerboseUrl(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1VerboseUrl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReceiptVerboseResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/verbose/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
