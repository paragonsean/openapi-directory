/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import Model9 from '../model/Model9';

/**
* Class4CampaignValidation service.
* @module api/Class4CampaignValidationApi
* @version 1.15.0
*/
export default class Class4CampaignValidationApi {

    /**
    * Constructs a new Class4CampaignValidationApi. 
    * @alias module:api/Class4CampaignValidationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteApiValidationV1CampaignSettingsDeleteCampaignid operation.
     * @callback module:api/Class4CampaignValidationApi~deleteApiValidationV1CampaignSettingsDeleteCampaignidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete campaign settings for a client
     * @param {String} apikey API authentication key.
     * @param {String} campaignId Remove campaign settings with a campaign ID
     * @param {module:api/Class4CampaignValidationApi~deleteApiValidationV1CampaignSettingsDeleteCampaignidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiValidationV1CampaignSettingsDeleteCampaignid(apikey, campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling deleteApiValidationV1CampaignSettingsDeleteCampaignid");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteApiValidationV1CampaignSettingsDeleteCampaignid");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/validation/v1/campaign/settings/delete/{campaignId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiValidationV1CampaignSettingsCampaignid operation.
     * @callback module:api/Class4CampaignValidationApi~getApiValidationV1CampaignSettingsCampaignidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get campaign settings for a client
     * @param {String} apikey API authentication key.
     * @param {String} campaignId The ID of the campaign to validate the receipt
     * @param {module:api/Class4CampaignValidationApi~getApiValidationV1CampaignSettingsCampaignidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApiValidationV1CampaignSettingsCampaignid(apikey, campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getApiValidationV1CampaignSettingsCampaignid");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getApiValidationV1CampaignSettingsCampaignid");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/validation/v1/campaign/settings/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiValidationV1CampaignSettingsList operation.
     * @callback module:api/Class4CampaignValidationApi~getApiValidationV1CampaignSettingsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list all campaign setting IDs for a client
     * @param {String} apikey API authentication key.
     * @param {module:api/Class4CampaignValidationApi~getApiValidationV1CampaignSettingsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getApiValidationV1CampaignSettingsList(apikey, callback) {
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling getApiValidationV1CampaignSettingsList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/validation/v1/campaign/settings/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiValidationV1CampaignFile operation.
     * @callback module:api/Class4CampaignValidationApi~postApiValidationV1CampaignFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate and match a receipt against a campaign validation settings by uploading an image file
     * @param {String} apikey API authentication key.
     * @param {String} campaignId The ID of the campaign to validate the receipt
     * @param {Object} opts Optional parameters
     * @param {File} [file] file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC
     * @param {Boolean} [incognito = false)] Set true to avoid saving the receipt in storage
     * @param {String} [ipAddress] IP Address of the end user
     * @param {String} [near] A geo location to search for merchant. Typically in the format of city, state, country.
     * @param {String} [referenceId] Tag a request with a unique reference ID for feedback and training purposes
     * @param {module:api/Class4CampaignValidationApi~postApiValidationV1CampaignFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postApiValidationV1CampaignFile(apikey, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiValidationV1CampaignFile");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling postApiValidationV1CampaignFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
        'file': opts['file'],
        'incognito': opts['incognito'],
        'ipAddress': opts['ipAddress'],
        'near': opts['near'],
        'campaignId': campaignId,
        'referenceId': opts['referenceId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/validation/v1/campaign/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiValidationV1CampaignProductvalidationFile operation.
     * @callback module:api/Class4CampaignValidationApi~postApiValidationV1CampaignProductvalidationFileCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate if user-submitted info like serial number are detected an image file
     * @param {String} apikey API authentication key.
     * @param {String} productVerificationNumber The number of the product to validate the receipt
     * @param {Object} opts Optional parameters
     * @param {File} [file] file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF, HEIC
     * @param {Boolean} [incognito = false)] Set true to avoid saving the receipt in storage
     * @param {String} [subAccountId] Tag a request with sub-account ID for billing purposes
     * @param {String} [referenceId] Tag a request with a unique reference ID for feedback and training purposes
     * @param {module:api/Class4CampaignValidationApi~postApiValidationV1CampaignProductvalidationFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postApiValidationV1CampaignProductvalidationFile(apikey, productVerificationNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiValidationV1CampaignProductvalidationFile");
      }
      // verify the required parameter 'productVerificationNumber' is set
      if (productVerificationNumber === undefined || productVerificationNumber === null) {
        throw new Error("Missing the required parameter 'productVerificationNumber' when calling postApiValidationV1CampaignProductvalidationFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
        'file': opts['file'],
        'productVerificationNumber': productVerificationNumber,
        'incognito': opts['incognito'],
        'subAccountId': opts['subAccountId'],
        'referenceId': opts['referenceId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/validation/v1/campaign/product-validation/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiValidationV1CampaignSettingsCreateCampaignid operation.
     * @callback module:api/Class4CampaignValidationApi~postApiValidationV1CampaignSettingsCreateCampaignidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create campaign settings for a client
     * @param {String} apikey API authentication key.
     * @param {String} campaignId The ID of the campaign to validate the receipt
     * @param {Object} opts Optional parameters
     * @param {module:model/Model9} [body] 
     * @param {module:api/Class4CampaignValidationApi~postApiValidationV1CampaignSettingsCreateCampaignidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postApiValidationV1CampaignSettingsCreateCampaignid(apikey, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiValidationV1CampaignSettingsCreateCampaignid");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling postApiValidationV1CampaignSettingsCreateCampaignid");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/validation/v1/campaign/settings/create/{campaignId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putApiValidationV1CampaignSettingsUpdateCampaignid operation.
     * @callback module:api/Class4CampaignValidationApi~putApiValidationV1CampaignSettingsUpdateCampaignidCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update campaign settings for a client
     * @param {String} apikey API authentication key.
     * @param {String} campaignId The ID of the campaign to validate the receipt
     * @param {Object} opts Optional parameters
     * @param {module:model/Model9} [body] 
     * @param {module:api/Class4CampaignValidationApi~putApiValidationV1CampaignSettingsUpdateCampaignidCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putApiValidationV1CampaignSettingsUpdateCampaignid(apikey, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling putApiValidationV1CampaignSettingsUpdateCampaignid");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling putApiValidationV1CampaignSettingsUpdateCampaignid");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/validation/v1/campaign/settings/update/{campaignId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
