/**
 * TAGGUN Receipt OCR Scanning API
 * Expects only running software, real reactions, and beautifully crafted APIs to serve your every desire to transcribe a piece of paper to digital form.
 *
 * The version of the OpenAPI document: 1.15.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BadRequestError from '../model/BadRequestError';
import ReceiptMatchResult from '../model/ReceiptMatchResult';
import ReceiptResult from '../model/ReceiptResult';
import ReceiptVerboseResult from '../model/ReceiptVerboseResult';
import StoragePayload from '../model/StoragePayload';

/**
* Class4DeprecatedEndpoints service.
* @module api/Class4DeprecatedEndpointsApi
* @version 1.15.0
*/
export default class Class4DeprecatedEndpointsApi {

    /**
    * Constructs a new Class4DeprecatedEndpointsApi. 
    * @alias module:api/Class4DeprecatedEndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postApiReceiptV1MatchFile operation.
     * @callback module:api/Class4DeprecatedEndpointsApi~postApiReceiptV1MatchFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptMatchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * detect and match a receipt against keywords and metadata by uploading an image file
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {File} [file] file less than 20MB. Accepted file types: PDF, JPG, PNG, GIF
     * @param {Boolean} [refresh = false)] Set true to force re-process image transcription if the receipt is already in storage
     * @param {Boolean} [incognito = false)] Set true to avoid saving the receipt in storage
     * @param {String} [ipAddress] IP Address of the end user
     * @param {Array.<String>} [primaryKeywords] An array of primary keywords to match
     * @param {Array.<String>} [secondaryKeywords] An array of secondary keywords to match (lower confidence level than primaryKeywords)
     * @param {Array.<String>} [stopWords] An array of stop words that negate the result to be UNLIKELY
     * @param {module:model/String} [language] Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 
     * @param {module:api/Class4DeprecatedEndpointsApi~postApiReceiptV1MatchFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptMatchResult}
     */
    postApiReceiptV1MatchFile(apikey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1MatchFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
        'file': opts['file'],
        'refresh': opts['refresh'],
        'incognito': opts['incognito'],
        'ipAddress': opts['ipAddress'],
        'primaryKeywords': this.apiClient.buildCollectionParam(opts['primaryKeywords'], 'csv'),
        'secondaryKeywords': this.apiClient.buildCollectionParam(opts['secondaryKeywords'], 'csv'),
        'stopWords': this.apiClient.buildCollectionParam(opts['stopWords'], 'csv'),
        'language': opts['language']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = ReceiptMatchResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/match/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiReceiptV1SimpleStorage operation.
     * @callback module:api/Class4DeprecatedEndpointsApi~postApiReceiptV1SimpleStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt in storage
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoragePayload} [body] 
     * @param {module:api/Class4DeprecatedEndpointsApi~postApiReceiptV1SimpleStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptResult}
     */
    postApiReceiptV1SimpleStorage(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1SimpleStorage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReceiptResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/simple/storage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiReceiptV1VerboseStorage operation.
     * @callback module:api/Class4DeprecatedEndpointsApi~postApiReceiptV1VerboseStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReceiptVerboseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * transcribe a receipt in storage and return detailed result
     * @param {String} apikey API authentication key.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoragePayload} [body] 
     * @param {module:api/Class4DeprecatedEndpointsApi~postApiReceiptV1VerboseStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReceiptVerboseResult}
     */
    postApiReceiptV1VerboseStorage(apikey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling postApiReceiptV1VerboseStorage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'apikey': apikey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ReceiptVerboseResult;
      return this.apiClient.callApi(
        '/api/receipt/v1/verbose/storage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
