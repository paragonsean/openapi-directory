# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model1 import Model1
from openapi_server import util


class MerchantState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence_level: float=None, data: str=None, index: float=None, regions: List[List[Model1]]=None, text: str=None):
        """MerchantState - a model defined in OpenAPI

        :param confidence_level: The confidence_level of this MerchantState.
        :param data: The data of this MerchantState.
        :param index: The index of this MerchantState.
        :param regions: The regions of this MerchantState.
        :param text: The text of this MerchantState.
        """
        self.openapi_types = {
            'confidence_level': float,
            'data': str,
            'index': float,
            'regions': List[List[Model1]],
            'text': str
        }

        self.attribute_map = {
            'confidence_level': 'confidenceLevel',
            'data': 'data',
            'index': 'index',
            'regions': 'regions',
            'text': 'text'
        }

        self._confidence_level = confidence_level
        self._data = data
        self._index = index
        self._regions = regions
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The merchantState of this MerchantState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence_level(self):
        """Gets the confidence_level of this MerchantState.


        :return: The confidence_level of this MerchantState.
        :rtype: float
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level):
        """Sets the confidence_level of this MerchantState.


        :param confidence_level: The confidence_level of this MerchantState.
        :type confidence_level: float
        """

        self._confidence_level = confidence_level

    @property
    def data(self):
        """Gets the data of this MerchantState.


        :return: The data of this MerchantState.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this MerchantState.


        :param data: The data of this MerchantState.
        :type data: str
        """

        self._data = data

    @property
    def index(self):
        """Gets the index of this MerchantState.


        :return: The index of this MerchantState.
        :rtype: float
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this MerchantState.


        :param index: The index of this MerchantState.
        :type index: float
        """

        self._index = index

    @property
    def regions(self):
        """Gets the regions of this MerchantState.


        :return: The regions of this MerchantState.
        :rtype: List[List[Model1]]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this MerchantState.


        :param regions: The regions of this MerchantState.
        :type regions: List[List[Model1]]
        """

        self._regions = regions

    @property
    def text(self):
        """Gets the text of this MerchantState.


        :return: The text of this MerchantState.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MerchantState.


        :param text: The text of this MerchantState.
        :type text: str
        """

        self._text = text
