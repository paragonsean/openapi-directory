# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.total_price1 import TotalPrice1
from openapi_server import util


class ProductLineItems1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, names: List[str]=None, quantity: TotalPrice1=None, skip: bool=False, total_price: TotalPrice1=None):
        """ProductLineItems1 - a model defined in OpenAPI

        :param names: The names of this ProductLineItems1.
        :param quantity: The quantity of this ProductLineItems1.
        :param skip: The skip of this ProductLineItems1.
        :param total_price: The total_price of this ProductLineItems1.
        """
        self.openapi_types = {
            'names': List[str],
            'quantity': TotalPrice1,
            'skip': bool,
            'total_price': TotalPrice1
        }

        self.attribute_map = {
            'names': 'names',
            'quantity': 'quantity',
            'skip': 'skip',
            'total_price': 'totalPrice'
        }

        self._names = names
        self._quantity = quantity
        self._skip = skip
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductLineItems1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The productLineItems1 of this ProductLineItems1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def names(self):
        """Gets the names of this ProductLineItems1.

        An array of product names to match

        :return: The names of this ProductLineItems1.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this ProductLineItems1.

        An array of product names to match

        :param names: The names of this ProductLineItems1.
        :type names: List[str]
        """

        self._names = names

    @property
    def quantity(self):
        """Gets the quantity of this ProductLineItems1.


        :return: The quantity of this ProductLineItems1.
        :rtype: TotalPrice1
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductLineItems1.


        :param quantity: The quantity of this ProductLineItems1.
        :type quantity: TotalPrice1
        """

        self._quantity = quantity

    @property
    def skip(self):
        """Gets the skip of this ProductLineItems1.


        :return: The skip of this ProductLineItems1.
        :rtype: bool
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this ProductLineItems1.


        :param skip: The skip of this ProductLineItems1.
        :type skip: bool
        """

        self._skip = skip

    @property
    def total_price(self):
        """Gets the total_price of this ProductLineItems1.


        :return: The total_price of this ProductLineItems1.
        :rtype: TotalPrice1
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this ProductLineItems1.


        :param total_price: The total_price of this ProductLineItems1.
        :type total_price: TotalPrice1
        """

        self._total_price = total_price
