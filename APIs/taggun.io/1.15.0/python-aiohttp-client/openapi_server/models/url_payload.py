# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.headers import Headers
from openapi_server import util


class UrlPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extract_time: bool=False, headers: Headers=None, ignore_merchant_name: str=None, incognito: bool=False, ip_address: str=None, language: str=None, near: str=None, reference_id: str=None, refresh: bool=False, sub_account_id: str=None, url: str=None):
        """UrlPayload - a model defined in OpenAPI

        :param extract_time: The extract_time of this UrlPayload.
        :param headers: The headers of this UrlPayload.
        :param ignore_merchant_name: The ignore_merchant_name of this UrlPayload.
        :param incognito: The incognito of this UrlPayload.
        :param ip_address: The ip_address of this UrlPayload.
        :param language: The language of this UrlPayload.
        :param near: The near of this UrlPayload.
        :param reference_id: The reference_id of this UrlPayload.
        :param refresh: The refresh of this UrlPayload.
        :param sub_account_id: The sub_account_id of this UrlPayload.
        :param url: The url of this UrlPayload.
        """
        self.openapi_types = {
            'extract_time': bool,
            'headers': Headers,
            'ignore_merchant_name': str,
            'incognito': bool,
            'ip_address': str,
            'language': str,
            'near': str,
            'reference_id': str,
            'refresh': bool,
            'sub_account_id': str,
            'url': str
        }

        self.attribute_map = {
            'extract_time': 'extractTime',
            'headers': 'headers',
            'ignore_merchant_name': 'ignoreMerchantName',
            'incognito': 'incognito',
            'ip_address': 'ipAddress',
            'language': 'language',
            'near': 'near',
            'reference_id': 'referenceId',
            'refresh': 'refresh',
            'sub_account_id': 'subAccountId',
            'url': 'url'
        }

        self._extract_time = extract_time
        self._headers = headers
        self._ignore_merchant_name = ignore_merchant_name
        self._incognito = incognito
        self._ip_address = ip_address
        self._language = language
        self._near = near
        self._reference_id = reference_id
        self._refresh = refresh
        self._sub_account_id = sub_account_id
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UrlPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The urlPayload of this UrlPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extract_time(self):
        """Gets the extract_time of this UrlPayload.

        Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000.

        :return: The extract_time of this UrlPayload.
        :rtype: bool
        """
        return self._extract_time

    @extract_time.setter
    def extract_time(self, extract_time):
        """Sets the extract_time of this UrlPayload.

        Set true to return time if found on the receipt. Otherwise, the time is always set to 12:00:00.000.

        :param extract_time: The extract_time of this UrlPayload.
        :type extract_time: bool
        """

        self._extract_time = extract_time

    @property
    def headers(self):
        """Gets the headers of this UrlPayload.


        :return: The headers of this UrlPayload.
        :rtype: Headers
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this UrlPayload.


        :param headers: The headers of this UrlPayload.
        :type headers: Headers
        """

        self._headers = headers

    @property
    def ignore_merchant_name(self):
        """Gets the ignore_merchant_name of this UrlPayload.

        Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name.

        :return: The ignore_merchant_name of this UrlPayload.
        :rtype: str
        """
        return self._ignore_merchant_name

    @ignore_merchant_name.setter
    def ignore_merchant_name(self, ignore_merchant_name):
        """Sets the ignore_merchant_name of this UrlPayload.

        Ignore this merchant name if detected on the receipt. Use this field to avoid detecting the customer name as the merchant name.

        :param ignore_merchant_name: The ignore_merchant_name of this UrlPayload.
        :type ignore_merchant_name: str
        """

        self._ignore_merchant_name = ignore_merchant_name

    @property
    def incognito(self):
        """Gets the incognito of this UrlPayload.

        Set true to avoid saving the receipt in storage

        :return: The incognito of this UrlPayload.
        :rtype: bool
        """
        return self._incognito

    @incognito.setter
    def incognito(self, incognito):
        """Sets the incognito of this UrlPayload.

        Set true to avoid saving the receipt in storage

        :param incognito: The incognito of this UrlPayload.
        :type incognito: bool
        """

        self._incognito = incognito

    @property
    def ip_address(self):
        """Gets the ip_address of this UrlPayload.

        IP Address of the end user

        :return: The ip_address of this UrlPayload.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this UrlPayload.

        IP Address of the end user

        :param ip_address: The ip_address of this UrlPayload.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def language(self):
        """Gets the language of this UrlPayload.

        Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 

        :return: The language of this UrlPayload.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UrlPayload.

        Set language as a hint. Leave empty for auto detect. Supported languages: , en, es, fr, jp, he, iw, et, lv, lt, fi, el, zh 

        :param language: The language of this UrlPayload.
        :type language: str
        """
        allowed_values = ["en", "es", "fr", "jp", "he", "iw", "et", "lv", "lt", "fi", "el", "zh"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def near(self):
        """Gets the near of this UrlPayload.

        A geo location to search for merchant. Typically in the format of city, state, country.

        :return: The near of this UrlPayload.
        :rtype: str
        """
        return self._near

    @near.setter
    def near(self, near):
        """Sets the near of this UrlPayload.

        A geo location to search for merchant. Typically in the format of city, state, country.

        :param near: The near of this UrlPayload.
        :type near: str
        """

        self._near = near

    @property
    def reference_id(self):
        """Gets the reference_id of this UrlPayload.

        Tag a request with a unique reference ID for feedback and training purposes

        :return: The reference_id of this UrlPayload.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this UrlPayload.

        Tag a request with a unique reference ID for feedback and training purposes

        :param reference_id: The reference_id of this UrlPayload.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 50:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `50`")

        self._reference_id = reference_id

    @property
    def refresh(self):
        """Gets the refresh of this UrlPayload.

        Set true to force re-process image transcription if the receipt is already in storage

        :return: The refresh of this UrlPayload.
        :rtype: bool
        """
        return self._refresh

    @refresh.setter
    def refresh(self, refresh):
        """Sets the refresh of this UrlPayload.

        Set true to force re-process image transcription if the receipt is already in storage

        :param refresh: The refresh of this UrlPayload.
        :type refresh: bool
        """

        self._refresh = refresh

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this UrlPayload.

        Tag a request with sub-account ID for billing purposes

        :return: The sub_account_id of this UrlPayload.
        :rtype: str
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this UrlPayload.

        Tag a request with sub-account ID for billing purposes

        :param sub_account_id: The sub_account_id of this UrlPayload.
        :type sub_account_id: str
        """
        if sub_account_id is not None and len(sub_account_id) > 50:
            raise ValueError("Invalid value for `sub_account_id`, length must be less than or equal to `50`")

        self._sub_account_id = sub_account_id

    @property
    def url(self):
        """Gets the url of this UrlPayload.

        The target URL that contains a receipt file. Only https protocol is accepted.

        :return: The url of this UrlPayload.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UrlPayload.

        The target URL that contains a receipt file. Only https protocol is accepted.

        :param url: The url of this UrlPayload.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
