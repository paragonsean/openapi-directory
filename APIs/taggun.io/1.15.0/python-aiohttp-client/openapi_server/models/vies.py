# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Vies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, country_code: str=None, error: str=None, name: str=None, valid: bool=None, vat_number: str=None):
        """Vies - a model defined in OpenAPI

        :param address: The address of this Vies.
        :param country_code: The country_code of this Vies.
        :param error: The error of this Vies.
        :param name: The name of this Vies.
        :param valid: The valid of this Vies.
        :param vat_number: The vat_number of this Vies.
        """
        self.openapi_types = {
            'address': str,
            'country_code': str,
            'error': str,
            'name': str,
            'valid': bool,
            'vat_number': str
        }

        self.attribute_map = {
            'address': 'address',
            'country_code': 'countryCode',
            'error': 'error',
            'name': 'name',
            'valid': 'valid',
            'vat_number': 'vatNumber'
        }

        self._address = address
        self._country_code = country_code
        self._error = error
        self._name = name
        self._valid = valid
        self._vat_number = vat_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The vies of this Vies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Vies.


        :return: The address of this Vies.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Vies.


        :param address: The address of this Vies.
        :type address: str
        """

        self._address = address

    @property
    def country_code(self):
        """Gets the country_code of this Vies.


        :return: The country_code of this Vies.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Vies.


        :param country_code: The country_code of this Vies.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def error(self):
        """Gets the error of this Vies.


        :return: The error of this Vies.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Vies.


        :param error: The error of this Vies.
        :type error: str
        """

        self._error = error

    @property
    def name(self):
        """Gets the name of this Vies.


        :return: The name of this Vies.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vies.


        :param name: The name of this Vies.
        :type name: str
        """

        self._name = name

    @property
    def valid(self):
        """Gets the valid of this Vies.


        :return: The valid of this Vies.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this Vies.


        :param valid: The valid of this Vies.
        :type valid: bool
        """

        self._valid = valid

    @property
    def vat_number(self):
        """Gets the vat_number of this Vies.


        :return: The vat_number of this Vies.
        :rtype: str
        """
        return self._vat_number

    @vat_number.setter
    def vat_number(self, vat_number):
        """Sets the vat_number of this Vies.


        :param vat_number: The vat_number of this Vies.
        :type vat_number: str
        """

        self._vat_number = vat_number
