/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateContactInMailingList from '../model/CreateContactInMailingList';
import CreateDistributionLinks from '../model/CreateDistributionLinks';
import DistributionsResponse from '../model/DistributionsResponse';
import EventSubscriptionsResponse from '../model/EventSubscriptionsResponse';
import RetrieveDistributionLinksResponse from '../model/RetrieveDistributionLinksResponse';
import SubscribeToEventBody from '../model/SubscribeToEventBody';

/**
* Default service.
* @module api/DefaultApi
* @version 0.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createContactInMailinglist operation.
     * @callback module:api/DefaultApi~createContactInMailinglistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create contact in mailing list
     * Creates a contact in a given mailing list
     * @param {String} directoryId ID of the qualtrics directory to create the contact to
     * @param {String} mailingListId ID of the mailing list
     * @param {module:model/CreateContactInMailingList} createContactInMailingList Contact data
     * @param {module:api/DefaultApi~createContactInMailinglistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createContactInMailinglist(directoryId, mailingListId, createContactInMailingList, callback) {
      let postBody = createContactInMailingList;
      // verify the required parameter 'directoryId' is set
      if (directoryId === undefined || directoryId === null) {
        throw new Error("Missing the required parameter 'directoryId' when calling createContactInMailinglist");
      }
      // verify the required parameter 'mailingListId' is set
      if (mailingListId === undefined || mailingListId === null) {
        throw new Error("Missing the required parameter 'mailingListId' when calling createContactInMailinglist");
      }
      // verify the required parameter 'createContactInMailingList' is set
      if (createContactInMailingList === undefined || createContactInMailingList === null) {
        throw new Error("Missing the required parameter 'createContactInMailingList' when calling createContactInMailinglist");
      }

      let pathParams = {
        'DirectoryId': directoryId,
        'MailingListId': mailingListId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/directories/{DirectoryId}/mailinglists/{MailingListId}/contacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateDistributionLinks operation.
     * @callback module:api/DefaultApi~generateDistributionLinksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate distribution links
     * Geneates links for individual distribution
     * @param {module:model/CreateDistributionLinks} createDistributionLinks Parameters for the link generation
     * @param {module:api/DefaultApi~generateDistributionLinksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    generateDistributionLinks(createDistributionLinks, callback) {
      let postBody = createDistributionLinks;
      // verify the required parameter 'createDistributionLinks' is set
      if (createDistributionLinks === undefined || createDistributionLinks === null) {
        throw new Error("Missing the required parameter 'createDistributionLinks' when calling generateDistributionLinks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/distributions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDistributions operation.
     * @callback module:api/DefaultApi~getDistributionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DistributionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get distributions for survey
     * Gets all distributions for a given survey
     * @param {String} surveyId The survey for which to load the distributions
     * @param {module:api/DefaultApi~getDistributionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DistributionsResponse}
     */
    getDistributions(surveyId, callback) {
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling getDistributions");
      }

      let pathParams = {
      };
      let queryParams = {
        'surveyId': surveyId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DistributionsResponse;
      return this.apiClient.callApi(
        '/distributions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventSubscriptions operation.
     * @callback module:api/DefaultApi~getEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event subscriptions
     * Get event subscriptions
     * @param {String} subscriptionId ID of event subscription - can be obtained from web hook response
     * @param {module:api/DefaultApi~getEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsResponse}
     */
    getEventSubscriptions(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getEventSubscriptions");
      }

      let pathParams = {
        'SubscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsResponse;
      return this.apiClient.callApi(
        '/eventsubscriptions/{SubscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSurvey operation.
     * @callback module:api/DefaultApi~getSurveyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get survey
     * Gets a single Qualtrics survey speficied by its ID
     * @param {String} surveyId ID of survey (eg. SV_123)
     * @param {module:api/DefaultApi~getSurveyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSurvey(surveyId, callback) {
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling getSurvey");
      }

      let pathParams = {
        'SurveyId': surveyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/survey-definitions/{SurveyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrievedistributionlinks operation.
     * @callback module:api/DefaultApi~retrievedistributionlinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveDistributionLinksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve distribution links
     * Retrieves all the individual links for a given distribution
     * @param {String} surveyId ID of the survey (eg: SV_123)
     * @param {String} distributionId ID of the distribution list
     * @param {module:api/DefaultApi~retrievedistributionlinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveDistributionLinksResponse}
     */
    retrievedistributionlinks(surveyId, distributionId, callback) {
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling retrievedistributionlinks");
      }
      // verify the required parameter 'distributionId' is set
      if (distributionId === undefined || distributionId === null) {
        throw new Error("Missing the required parameter 'distributionId' when calling retrievedistributionlinks");
      }

      let pathParams = {
        'DistributionId': distributionId
      };
      let queryParams = {
        'surveyId': surveyId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RetrieveDistributionLinksResponse;
      return this.apiClient.callApi(
        '/distributions/{DistributionId}/links', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookDelete operation.
     * @callback module:api/DefaultApi~webhookDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove subscription to response event
     * Remove event subscription
     * @param {module:model/SubscribeToEventBody} subscribeToEventBody This is the request body of the webhook
     * @param {module:api/DefaultApi~webhookDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsResponse}
     */
    webhookDelete(subscribeToEventBody, callback) {
      let postBody = subscribeToEventBody;
      // verify the required parameter 'subscribeToEventBody' is set
      if (subscribeToEventBody === undefined || subscribeToEventBody === null) {
        throw new Error("Missing the required parameter 'subscribeToEventBody' when calling webhookDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsResponse;
      return this.apiClient.callApi(
        '/eventsubscriptions/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the whenAResponseIsReceived operation.
     * @callback module:api/DefaultApi~whenAResponseIsReceivedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Triggers when a response is submitted to a qualtrics survey
     * Subscribe to response event
     * @param {module:model/SubscribeToEventBody} subscribeToEventBody This is the request body of the webhook
     * @param {module:api/DefaultApi~whenAResponseIsReceivedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsResponse}
     */
    whenAResponseIsReceived(subscribeToEventBody, callback) {
      let postBody = subscribeToEventBody;
      // verify the required parameter 'subscribeToEventBody' is set
      if (subscribeToEventBody === undefined || subscribeToEventBody === null) {
        throw new Error("Missing the required parameter 'subscribeToEventBody' when calling whenAResponseIsReceived");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsResponse;
      return this.apiClient.callApi(
        '/eventsubscriptions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
