/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DistributionsResponseResultElementsInnerRecipients model module.
 * @module model/DistributionsResponseResultElementsInnerRecipients
 * @version 0.2
 */
class DistributionsResponseResultElementsInnerRecipients {
    /**
     * Constructs a new <code>DistributionsResponseResultElementsInnerRecipients</code>.
     * @alias module:model/DistributionsResponseResultElementsInnerRecipients
     */
    constructor() { 
        
        DistributionsResponseResultElementsInnerRecipients.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DistributionsResponseResultElementsInnerRecipients</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DistributionsResponseResultElementsInnerRecipients} obj Optional instance to populate.
     * @return {module:model/DistributionsResponseResultElementsInnerRecipients} The populated <code>DistributionsResponseResultElementsInnerRecipients</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DistributionsResponseResultElementsInnerRecipients();

            if (data.hasOwnProperty('contactId')) {
                obj['contactId'] = ApiClient.convertToType(data['contactId'], Object);
            }
            if (data.hasOwnProperty('libraryId')) {
                obj['libraryId'] = ApiClient.convertToType(data['libraryId'], 'String');
            }
            if (data.hasOwnProperty('mailingListId')) {
                obj['mailingListId'] = ApiClient.convertToType(data['mailingListId'], 'String');
            }
            if (data.hasOwnProperty('sampleId')) {
                obj['sampleId'] = ApiClient.convertToType(data['sampleId'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DistributionsResponseResultElementsInnerRecipients</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DistributionsResponseResultElementsInnerRecipients</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['libraryId'] && !(typeof data['libraryId'] === 'string' || data['libraryId'] instanceof String)) {
            throw new Error("Expected the field `libraryId` to be a primitive type in the JSON string but got " + data['libraryId']);
        }
        // ensure the json data is a string
        if (data['mailingListId'] && !(typeof data['mailingListId'] === 'string' || data['mailingListId'] instanceof String)) {
            throw new Error("Expected the field `mailingListId` to be a primitive type in the JSON string but got " + data['mailingListId']);
        }

        return true;
    }


}



/**
 * @member {Object} contactId
 */
DistributionsResponseResultElementsInnerRecipients.prototype['contactId'] = undefined;

/**
 * @member {String} libraryId
 */
DistributionsResponseResultElementsInnerRecipients.prototype['libraryId'] = undefined;

/**
 * @member {String} mailingListId
 */
DistributionsResponseResultElementsInnerRecipients.prototype['mailingListId'] = undefined;

/**
 * @member {Object} sampleId
 */
DistributionsResponseResultElementsInnerRecipients.prototype['sampleId'] = undefined;






export default DistributionsResponseResultElementsInnerRecipients;

