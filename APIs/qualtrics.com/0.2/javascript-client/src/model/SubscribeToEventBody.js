/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscribeToEventBody model module.
 * @module model/SubscribeToEventBody
 * @version 0.2
 */
class SubscribeToEventBody {
    /**
     * Constructs a new <code>SubscribeToEventBody</code>.
     * @alias module:model/SubscribeToEventBody
     * @param publicationUrl {String} The internal publication URL - will be generated by PowerAutomate
     * @param topics {String} The topics to subscribe to. Must follow the format surveyengine.completedResponse.[SurveyID]
     */
    constructor(publicationUrl, topics) { 
        
        SubscribeToEventBody.initialize(this, publicationUrl, topics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, publicationUrl, topics) { 
        obj['publicationUrl'] = publicationUrl;
        obj['topics'] = topics || 'surveyengine.completedResponse.<Insert SurveyID>';
    }

    /**
     * Constructs a <code>SubscribeToEventBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscribeToEventBody} obj Optional instance to populate.
     * @return {module:model/SubscribeToEventBody} The populated <code>SubscribeToEventBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscribeToEventBody();

            if (data.hasOwnProperty('encrypt')) {
                obj['encrypt'] = ApiClient.convertToType(data['encrypt'], 'Boolean');
            }
            if (data.hasOwnProperty('publicationUrl')) {
                obj['publicationUrl'] = ApiClient.convertToType(data['publicationUrl'], 'String');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscribeToEventBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscribeToEventBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscribeToEventBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['publicationUrl'] && !(typeof data['publicationUrl'] === 'string' || data['publicationUrl'] instanceof String)) {
            throw new Error("Expected the field `publicationUrl` to be a primitive type in the JSON string but got " + data['publicationUrl']);
        }
        // ensure the json data is a string
        if (data['topics'] && !(typeof data['topics'] === 'string' || data['topics'] instanceof String)) {
            throw new Error("Expected the field `topics` to be a primitive type in the JSON string but got " + data['topics']);
        }

        return true;
    }


}

SubscribeToEventBody.RequiredProperties = ["publicationUrl", "topics"];

/**
 * @member {Boolean} encrypt
 */
SubscribeToEventBody.prototype['encrypt'] = undefined;

/**
 * The internal publication URL - will be generated by PowerAutomate
 * @member {String} publicationUrl
 */
SubscribeToEventBody.prototype['publicationUrl'] = undefined;

/**
 * The topics to subscribe to. Must follow the format surveyengine.completedResponse.[SurveyID]
 * @member {String} topics
 * @default 'surveyengine.completedResponse.<Insert SurveyID>'
 */
SubscribeToEventBody.prototype['topics'] = 'surveyengine.completedResponse.<Insert SurveyID>';






export default SubscribeToEventBody;

