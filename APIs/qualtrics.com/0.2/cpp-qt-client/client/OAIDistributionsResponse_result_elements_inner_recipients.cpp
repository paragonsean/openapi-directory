/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionsResponse_result_elements_inner_recipients.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionsResponse_result_elements_inner_recipients::OAIDistributionsResponse_result_elements_inner_recipients(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionsResponse_result_elements_inner_recipients::OAIDistributionsResponse_result_elements_inner_recipients() {
    this->initializeModel();
}

OAIDistributionsResponse_result_elements_inner_recipients::~OAIDistributionsResponse_result_elements_inner_recipients() {}

void OAIDistributionsResponse_result_elements_inner_recipients::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_library_id_isSet = false;
    m_library_id_isValid = false;

    m_mailing_list_id_isSet = false;
    m_mailing_list_id_isValid = false;

    m_sample_id_isSet = false;
    m_sample_id_isValid = false;
}

void OAIDistributionsResponse_result_elements_inner_recipients::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionsResponse_result_elements_inner_recipients::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("contactId")]);
    m_contact_id_isSet = !json[QString("contactId")].isNull() && m_contact_id_isValid;

    m_library_id_isValid = ::OpenAPI::fromJsonValue(m_library_id, json[QString("libraryId")]);
    m_library_id_isSet = !json[QString("libraryId")].isNull() && m_library_id_isValid;

    m_mailing_list_id_isValid = ::OpenAPI::fromJsonValue(m_mailing_list_id, json[QString("mailingListId")]);
    m_mailing_list_id_isSet = !json[QString("mailingListId")].isNull() && m_mailing_list_id_isValid;

    m_sample_id_isValid = ::OpenAPI::fromJsonValue(m_sample_id, json[QString("sampleId")]);
    m_sample_id_isSet = !json[QString("sampleId")].isNull() && m_sample_id_isValid;
}

QString OAIDistributionsResponse_result_elements_inner_recipients::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionsResponse_result_elements_inner_recipients::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("contactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_library_id_isSet) {
        obj.insert(QString("libraryId"), ::OpenAPI::toJsonValue(m_library_id));
    }
    if (m_mailing_list_id_isSet) {
        obj.insert(QString("mailingListId"), ::OpenAPI::toJsonValue(m_mailing_list_id));
    }
    if (m_sample_id_isSet) {
        obj.insert(QString("sampleId"), ::OpenAPI::toJsonValue(m_sample_id));
    }
    return obj;
}

QJsonValue OAIDistributionsResponse_result_elements_inner_recipients::getContactId() const {
    return m_contact_id;
}
void OAIDistributionsResponse_result_elements_inner_recipients::setContactId(const QJsonValue &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAIDistributionsResponse_result_elements_inner_recipients::getLibraryId() const {
    return m_library_id;
}
void OAIDistributionsResponse_result_elements_inner_recipients::setLibraryId(const QString &library_id) {
    m_library_id = library_id;
    m_library_id_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_library_id_Set() const{
    return m_library_id_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_library_id_Valid() const{
    return m_library_id_isValid;
}

QString OAIDistributionsResponse_result_elements_inner_recipients::getMailingListId() const {
    return m_mailing_list_id;
}
void OAIDistributionsResponse_result_elements_inner_recipients::setMailingListId(const QString &mailing_list_id) {
    m_mailing_list_id = mailing_list_id;
    m_mailing_list_id_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_mailing_list_id_Set() const{
    return m_mailing_list_id_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_mailing_list_id_Valid() const{
    return m_mailing_list_id_isValid;
}

QJsonValue OAIDistributionsResponse_result_elements_inner_recipients::getSampleId() const {
    return m_sample_id;
}
void OAIDistributionsResponse_result_elements_inner_recipients::setSampleId(const QJsonValue &sample_id) {
    m_sample_id = sample_id;
    m_sample_id_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_sample_id_Set() const{
    return m_sample_id_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::is_sample_id_Valid() const{
    return m_sample_id_isValid;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_library_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailing_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionsResponse_result_elements_inner_recipients::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
