/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscriptionHookSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscriptionHookSchema::OAIEventSubscriptionHookSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscriptionHookSchema::OAIEventSubscriptionHookSchema() {
    this->initializeModel();
}

OAIEventSubscriptionHookSchema::~OAIEventSubscriptionHookSchema() {}

void OAIEventSubscriptionHookSchema::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_formdata_isSet = false;
    m_formdata_isValid = false;
}

void OAIEventSubscriptionHookSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscriptionHookSchema::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("$content")]);
    m_content_isSet = !json[QString("$content")].isNull() && m_content_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("$content-type")]);
    m_content_type_isSet = !json[QString("$content-type")].isNull() && m_content_type_isValid;

    m_formdata_isValid = ::OpenAPI::fromJsonValue(m_formdata, json[QString("$formdata")]);
    m_formdata_isSet = !json[QString("$formdata")].isNull() && m_formdata_isValid;
}

QString OAIEventSubscriptionHookSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscriptionHookSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("$content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("$content-type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_formdata.size() > 0) {
        obj.insert(QString("$formdata"), ::OpenAPI::toJsonValue(m_formdata));
    }
    return obj;
}

QString OAIEventSubscriptionHookSchema::getContent() const {
    return m_content;
}
void OAIEventSubscriptionHookSchema::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIEventSubscriptionHookSchema::is_content_Set() const{
    return m_content_isSet;
}

bool OAIEventSubscriptionHookSchema::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIEventSubscriptionHookSchema::getContentType() const {
    return m_content_type;
}
void OAIEventSubscriptionHookSchema::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIEventSubscriptionHookSchema::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIEventSubscriptionHookSchema::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList<OAIEventSubscriptionHookSchema__formdata_inner> OAIEventSubscriptionHookSchema::getFormdata() const {
    return m_formdata;
}
void OAIEventSubscriptionHookSchema::setFormdata(const QList<OAIEventSubscriptionHookSchema__formdata_inner> &formdata) {
    m_formdata = formdata;
    m_formdata_isSet = true;
}

bool OAIEventSubscriptionHookSchema::is_formdata_Set() const{
    return m_formdata_isSet;
}

bool OAIEventSubscriptionHookSchema::is_formdata_Valid() const{
    return m_formdata_isValid;
}

bool OAIEventSubscriptionHookSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formdata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscriptionHookSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_content_type_isValid && true;
}

} // namespace OpenAPI
