/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionsResponse_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionsResponse_result::OAIDistributionsResponse_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionsResponse_result::OAIDistributionsResponse_result() {
    this->initializeModel();
}

OAIDistributionsResponse_result::~OAIDistributionsResponse_result() {}

void OAIDistributionsResponse_result::initializeModel() {

    m_elements_isSet = false;
    m_elements_isValid = false;

    m_next_page_isSet = false;
    m_next_page_isValid = false;
}

void OAIDistributionsResponse_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionsResponse_result::fromJsonObject(QJsonObject json) {

    m_elements_isValid = ::OpenAPI::fromJsonValue(m_elements, json[QString("elements")]);
    m_elements_isSet = !json[QString("elements")].isNull() && m_elements_isValid;

    m_next_page_isValid = ::OpenAPI::fromJsonValue(m_next_page, json[QString("nextPage")]);
    m_next_page_isSet = !json[QString("nextPage")].isNull() && m_next_page_isValid;
}

QString OAIDistributionsResponse_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionsResponse_result::asJsonObject() const {
    QJsonObject obj;
    if (m_elements.size() > 0) {
        obj.insert(QString("elements"), ::OpenAPI::toJsonValue(m_elements));
    }
    if (m_next_page_isSet) {
        obj.insert(QString("nextPage"), ::OpenAPI::toJsonValue(m_next_page));
    }
    return obj;
}

QList<OAIDistributionsResponse_result_elements_inner> OAIDistributionsResponse_result::getElements() const {
    return m_elements;
}
void OAIDistributionsResponse_result::setElements(const QList<OAIDistributionsResponse_result_elements_inner> &elements) {
    m_elements = elements;
    m_elements_isSet = true;
}

bool OAIDistributionsResponse_result::is_elements_Set() const{
    return m_elements_isSet;
}

bool OAIDistributionsResponse_result::is_elements_Valid() const{
    return m_elements_isValid;
}

QJsonValue OAIDistributionsResponse_result::getNextPage() const {
    return m_next_page;
}
void OAIDistributionsResponse_result::setNextPage(const QJsonValue &next_page) {
    m_next_page = next_page;
    m_next_page_isSet = true;
}

bool OAIDistributionsResponse_result::is_next_page_Set() const{
    return m_next_page_isSet;
}

bool OAIDistributionsResponse_result::is_next_page_Valid() const{
    return m_next_page_isValid;
}

bool OAIDistributionsResponse_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionsResponse_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
