/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscribeToEventBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscribeToEventBody::OAISubscribeToEventBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscribeToEventBody::OAISubscribeToEventBody() {
    this->initializeModel();
}

OAISubscribeToEventBody::~OAISubscribeToEventBody() {}

void OAISubscribeToEventBody::initializeModel() {

    m_encrypt_isSet = false;
    m_encrypt_isValid = false;

    m_publication_url_isSet = false;
    m_publication_url_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;
}

void OAISubscribeToEventBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscribeToEventBody::fromJsonObject(QJsonObject json) {

    m_encrypt_isValid = ::OpenAPI::fromJsonValue(m_encrypt, json[QString("encrypt")]);
    m_encrypt_isSet = !json[QString("encrypt")].isNull() && m_encrypt_isValid;

    m_publication_url_isValid = ::OpenAPI::fromJsonValue(m_publication_url, json[QString("publicationUrl")]);
    m_publication_url_isSet = !json[QString("publicationUrl")].isNull() && m_publication_url_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;
}

QString OAISubscribeToEventBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscribeToEventBody::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypt_isSet) {
        obj.insert(QString("encrypt"), ::OpenAPI::toJsonValue(m_encrypt));
    }
    if (m_publication_url_isSet) {
        obj.insert(QString("publicationUrl"), ::OpenAPI::toJsonValue(m_publication_url));
    }
    if (m_topics_isSet) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    return obj;
}

bool OAISubscribeToEventBody::isEncrypt() const {
    return m_encrypt;
}
void OAISubscribeToEventBody::setEncrypt(const bool &encrypt) {
    m_encrypt = encrypt;
    m_encrypt_isSet = true;
}

bool OAISubscribeToEventBody::is_encrypt_Set() const{
    return m_encrypt_isSet;
}

bool OAISubscribeToEventBody::is_encrypt_Valid() const{
    return m_encrypt_isValid;
}

QString OAISubscribeToEventBody::getPublicationUrl() const {
    return m_publication_url;
}
void OAISubscribeToEventBody::setPublicationUrl(const QString &publication_url) {
    m_publication_url = publication_url;
    m_publication_url_isSet = true;
}

bool OAISubscribeToEventBody::is_publication_url_Set() const{
    return m_publication_url_isSet;
}

bool OAISubscribeToEventBody::is_publication_url_Valid() const{
    return m_publication_url_isValid;
}

QString OAISubscribeToEventBody::getTopics() const {
    return m_topics;
}
void OAISubscribeToEventBody::setTopics(const QString &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAISubscribeToEventBody::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAISubscribeToEventBody::is_topics_Valid() const{
    return m_topics_isValid;
}

bool OAISubscribeToEventBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publication_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscribeToEventBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_publication_url_isValid && m_topics_isValid && true;
}

} // namespace OpenAPI
