/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateContactInMailingList.h"
#include "OAICreateDistributionLinks.h"
#include "OAIDistributionsResponse.h"
#include "OAIEventSubscriptionsResponse.h"
#include "OAIObject.h"
#include "OAIRetrieveDistributionLinksResponse.h"
#include "OAISubscribeToEventBody.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  directory_id QString [required]
    * @param[in]  mailing_list_id QString [required]
    * @param[in]  oai_create_contact_in_mailing_list OAICreateContactInMailingList [required]
    */
    virtual void createContactInMailinglist(const QString &directory_id, const QString &mailing_list_id, const OAICreateContactInMailingList &oai_create_contact_in_mailing_list);

    /**
    * @param[in]  oai_create_distribution_links OAICreateDistributionLinks [required]
    */
    virtual void generateDistributionLinks(const OAICreateDistributionLinks &oai_create_distribution_links);

    /**
    * @param[in]  survey_id QString [required]
    */
    virtual void getDistributions(const QString &survey_id);

    /**
    * @param[in]  subscription_id QString [required]
    */
    virtual void getEventSubscriptions(const QString &subscription_id);

    /**
    * @param[in]  survey_id QString [required]
    */
    virtual void getSurvey(const QString &survey_id);

    /**
    * @param[in]  survey_id QString [required]
    * @param[in]  distribution_id QString [required]
    */
    virtual void retrievedistributionlinks(const QString &survey_id, const QString &distribution_id);

    /**
    * @param[in]  oai_subscribe_to_event_body OAISubscribeToEventBody [required]
    */
    virtual void webhookDelete(const OAISubscribeToEventBody &oai_subscribe_to_event_body);

    /**
    * @param[in]  oai_subscribe_to_event_body OAISubscribeToEventBody [required]
    */
    virtual void whenAResponseIsReceived(const OAISubscribeToEventBody &oai_subscribe_to_event_body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createContactInMailinglistCallback(OAIHttpRequestWorker *worker);
    void generateDistributionLinksCallback(OAIHttpRequestWorker *worker);
    void getDistributionsCallback(OAIHttpRequestWorker *worker);
    void getEventSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void getSurveyCallback(OAIHttpRequestWorker *worker);
    void retrievedistributionlinksCallback(OAIHttpRequestWorker *worker);
    void webhookDeleteCallback(OAIHttpRequestWorker *worker);
    void whenAResponseIsReceivedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createContactInMailinglistSignal();
    void generateDistributionLinksSignal();
    void getDistributionsSignal(OAIDistributionsResponse summary);
    void getEventSubscriptionsSignal(OAIEventSubscriptionsResponse summary);
    void getSurveySignal(OAIObject summary);
    void retrievedistributionlinksSignal(OAIRetrieveDistributionLinksResponse summary);
    void webhookDeleteSignal(OAIEventSubscriptionsResponse summary);
    void whenAResponseIsReceivedSignal(OAIEventSubscriptionsResponse summary);


    void createContactInMailinglistSignalFull(OAIHttpRequestWorker *worker);
    void generateDistributionLinksSignalFull(OAIHttpRequestWorker *worker);
    void getDistributionsSignalFull(OAIHttpRequestWorker *worker, OAIDistributionsResponse summary);
    void getEventSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsResponse summary);
    void getSurveySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void retrievedistributionlinksSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveDistributionLinksResponse summary);
    void webhookDeleteSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsResponse summary);
    void whenAResponseIsReceivedSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsResponse summary);

    Q_DECL_DEPRECATED_X("Use createContactInMailinglistSignalError() instead")
    void createContactInMailinglistSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createContactInMailinglistSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDistributionLinksSignalError() instead")
    void generateDistributionLinksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void generateDistributionLinksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionsSignalError() instead")
    void getDistributionsSignalE(OAIDistributionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionsSignalError(OAIDistributionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSubscriptionsSignalError() instead")
    void getEventSubscriptionsSignalE(OAIEventSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSubscriptionsSignalError(OAIEventSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSurveySignalError() instead")
    void getSurveySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSurveySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievedistributionlinksSignalError() instead")
    void retrievedistributionlinksSignalE(OAIRetrieveDistributionLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievedistributionlinksSignalError(OAIRetrieveDistributionLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhookDeleteSignalError() instead")
    void webhookDeleteSignalE(OAIEventSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhookDeleteSignalError(OAIEventSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whenAResponseIsReceivedSignalError() instead")
    void whenAResponseIsReceivedSignalE(OAIEventSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void whenAResponseIsReceivedSignalError(OAIEventSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createContactInMailinglistSignalErrorFull() instead")
    void createContactInMailinglistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createContactInMailinglistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDistributionLinksSignalErrorFull() instead")
    void generateDistributionLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDistributionLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDistributionsSignalErrorFull() instead")
    void getDistributionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDistributionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventSubscriptionsSignalErrorFull() instead")
    void getEventSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSurveySignalErrorFull() instead")
    void getSurveySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSurveySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievedistributionlinksSignalErrorFull() instead")
    void retrievedistributionlinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievedistributionlinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhookDeleteSignalErrorFull() instead")
    void webhookDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhookDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use whenAResponseIsReceivedSignalErrorFull() instead")
    void whenAResponseIsReceivedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void whenAResponseIsReceivedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
