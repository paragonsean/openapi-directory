/**
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionsResponse_result_elements_inner_stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionsResponse_result_elements_inner_stats::OAIDistributionsResponse_result_elements_inner_stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionsResponse_result_elements_inner_stats::OAIDistributionsResponse_result_elements_inner_stats() {
    this->initializeModel();
}

OAIDistributionsResponse_result_elements_inner_stats::~OAIDistributionsResponse_result_elements_inner_stats() {}

void OAIDistributionsResponse_result_elements_inner_stats::initializeModel() {

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_bounced_isSet = false;
    m_bounced_isValid = false;

    m_complaints_isSet = false;
    m_complaints_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_opened_isSet = false;
    m_opened_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_skipped_isSet = false;
    m_skipped_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;
}

void OAIDistributionsResponse_result_elements_inner_stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionsResponse_result_elements_inner_stats::fromJsonObject(QJsonObject json) {

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_bounced_isValid = ::OpenAPI::fromJsonValue(m_bounced, json[QString("bounced")]);
    m_bounced_isSet = !json[QString("bounced")].isNull() && m_bounced_isValid;

    m_complaints_isValid = ::OpenAPI::fromJsonValue(m_complaints, json[QString("complaints")]);
    m_complaints_isSet = !json[QString("complaints")].isNull() && m_complaints_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_opened_isValid = ::OpenAPI::fromJsonValue(m_opened, json[QString("opened")]);
    m_opened_isSet = !json[QString("opened")].isNull() && m_opened_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_skipped_isValid = ::OpenAPI::fromJsonValue(m_skipped, json[QString("skipped")]);
    m_skipped_isSet = !json[QString("skipped")].isNull() && m_skipped_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;
}

QString OAIDistributionsResponse_result_elements_inner_stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionsResponse_result_elements_inner_stats::asJsonObject() const {
    QJsonObject obj;
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_bounced_isSet) {
        obj.insert(QString("bounced"), ::OpenAPI::toJsonValue(m_bounced));
    }
    if (m_complaints_isSet) {
        obj.insert(QString("complaints"), ::OpenAPI::toJsonValue(m_complaints));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_opened_isSet) {
        obj.insert(QString("opened"), ::OpenAPI::toJsonValue(m_opened));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_skipped_isSet) {
        obj.insert(QString("skipped"), ::OpenAPI::toJsonValue(m_skipped));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    return obj;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getBlocked() const {
    return m_blocked;
}
void OAIDistributionsResponse_result_elements_inner_stats::setBlocked(const qint32 &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_blocked_Valid() const{
    return m_blocked_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getBounced() const {
    return m_bounced;
}
void OAIDistributionsResponse_result_elements_inner_stats::setBounced(const qint32 &bounced) {
    m_bounced = bounced;
    m_bounced_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_bounced_Set() const{
    return m_bounced_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_bounced_Valid() const{
    return m_bounced_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getComplaints() const {
    return m_complaints;
}
void OAIDistributionsResponse_result_elements_inner_stats::setComplaints(const qint32 &complaints) {
    m_complaints = complaints;
    m_complaints_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_complaints_Set() const{
    return m_complaints_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_complaints_Valid() const{
    return m_complaints_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getFailed() const {
    return m_failed;
}
void OAIDistributionsResponse_result_elements_inner_stats::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getFinished() const {
    return m_finished;
}
void OAIDistributionsResponse_result_elements_inner_stats::setFinished(const qint32 &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_finished_Valid() const{
    return m_finished_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getOpened() const {
    return m_opened;
}
void OAIDistributionsResponse_result_elements_inner_stats::setOpened(const qint32 &opened) {
    m_opened = opened;
    m_opened_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_opened_Set() const{
    return m_opened_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_opened_Valid() const{
    return m_opened_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getSent() const {
    return m_sent;
}
void OAIDistributionsResponse_result_elements_inner_stats::setSent(const qint32 &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_sent_Valid() const{
    return m_sent_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getSkipped() const {
    return m_skipped;
}
void OAIDistributionsResponse_result_elements_inner_stats::setSkipped(const qint32 &skipped) {
    m_skipped = skipped;
    m_skipped_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_skipped_Set() const{
    return m_skipped_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_skipped_Valid() const{
    return m_skipped_isValid;
}

qint32 OAIDistributionsResponse_result_elements_inner_stats::getStarted() const {
    return m_started;
}
void OAIDistributionsResponse_result_elements_inner_stats::setStarted(const qint32 &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_started_Set() const{
    return m_started_isSet;
}

bool OAIDistributionsResponse_result_elements_inner_stats::is_started_Valid() const{
    return m_started_isValid;
}

bool OAIDistributionsResponse_result_elements_inner_stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complaints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opened_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionsResponse_result_elements_inner_stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
