/*
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateContactInMailingList;
import org.openapitools.client.model.CreateDistributionLinks;
import org.openapitools.client.model.DistributionsResponse;
import org.openapitools.client.model.EventSubscriptionsResponse;
import org.openapitools.client.model.RetrieveDistributionLinksResponse;
import org.openapitools.client.model.SubscribeToEventBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create contact in mailing list
     *
     * Creates a contact in a given mailing list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactInMailinglistTest() throws ApiException {
        String directoryId = null;
        String mailingListId = null;
        CreateContactInMailingList createContactInMailingList = null;
        api.createContactInMailinglist(directoryId, mailingListId, createContactInMailingList);
        // TODO: test validations
    }

    /**
     * Generate distribution links
     *
     * Geneates links for individual distribution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateDistributionLinksTest() throws ApiException {
        CreateDistributionLinks createDistributionLinks = null;
        api.generateDistributionLinks(createDistributionLinks);
        // TODO: test validations
    }

    /**
     * Get distributions for survey
     *
     * Gets all distributions for a given survey
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDistributionsTest() throws ApiException {
        String surveyId = null;
        DistributionsResponse response = api.getDistributions(surveyId);
        // TODO: test validations
    }

    /**
     * Get event subscriptions
     *
     * Get event subscriptions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventSubscriptionsTest() throws ApiException {
        String subscriptionId = null;
        EventSubscriptionsResponse response = api.getEventSubscriptions(subscriptionId);
        // TODO: test validations
    }

    /**
     * Get survey
     *
     * Gets a single Qualtrics survey speficied by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSurveyTest() throws ApiException {
        String surveyId = null;
        Object response = api.getSurvey(surveyId);
        // TODO: test validations
    }

    /**
     * Retrieve distribution links
     *
     * Retrieves all the individual links for a given distribution
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrievedistributionlinksTest() throws ApiException {
        String surveyId = null;
        String distributionId = null;
        RetrieveDistributionLinksResponse response = api.retrievedistributionlinks(surveyId, distributionId);
        // TODO: test validations
    }

    /**
     * Remove subscription to response event
     *
     * Remove event subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookDeleteTest() throws ApiException {
        SubscribeToEventBody subscribeToEventBody = null;
        EventSubscriptionsResponse response = api.webhookDelete(subscribeToEventBody);
        // TODO: test validations
    }

    /**
     * Triggers when a response is submitted to a qualtrics survey
     *
     * Subscribe to response event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void whenAResponseIsReceivedTest() throws ApiException {
        SubscribeToEventBody subscribeToEventBody = null;
        EventSubscriptionsResponse response = api.whenAResponseIsReceived(subscribeToEventBody);
        // TODO: test validations
    }

}
