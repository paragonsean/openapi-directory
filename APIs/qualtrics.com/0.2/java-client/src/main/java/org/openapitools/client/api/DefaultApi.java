/*
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateContactInMailingList;
import org.openapitools.client.model.CreateDistributionLinks;
import org.openapitools.client.model.DistributionsResponse;
import org.openapitools.client.model.EventSubscriptionsResponse;
import org.openapitools.client.model.RetrieveDistributionLinksResponse;
import org.openapitools.client.model.SubscribeToEventBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createContactInMailinglist
     * @param directoryId ID of the qualtrics directory to create the contact to (required)
     * @param mailingListId ID of the mailing list (required)
     * @param createContactInMailingList Contact data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Contact created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactInMailinglistCall(String directoryId, String mailingListId, CreateContactInMailingList createContactInMailingList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContactInMailingList;

        // create path and map variables
        String localVarPath = "/directories/{DirectoryId}/mailinglists/{MailingListId}/contacts"
            .replace("{" + "DirectoryId" + "}", localVarApiClient.escapeString(directoryId.toString()))
            .replace("{" + "MailingListId" + "}", localVarApiClient.escapeString(mailingListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createContactInMailinglistValidateBeforeCall(String directoryId, String mailingListId, CreateContactInMailingList createContactInMailingList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directoryId' is set
        if (directoryId == null) {
            throw new ApiException("Missing the required parameter 'directoryId' when calling createContactInMailinglist(Async)");
        }

        // verify the required parameter 'mailingListId' is set
        if (mailingListId == null) {
            throw new ApiException("Missing the required parameter 'mailingListId' when calling createContactInMailinglist(Async)");
        }

        // verify the required parameter 'createContactInMailingList' is set
        if (createContactInMailingList == null) {
            throw new ApiException("Missing the required parameter 'createContactInMailingList' when calling createContactInMailinglist(Async)");
        }

        return createContactInMailinglistCall(directoryId, mailingListId, createContactInMailingList, _callback);

    }

    /**
     * Create contact in mailing list
     * Creates a contact in a given mailing list
     * @param directoryId ID of the qualtrics directory to create the contact to (required)
     * @param mailingListId ID of the mailing list (required)
     * @param createContactInMailingList Contact data (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Contact created </td><td>  -  </td></tr>
     </table>
     */
    public void createContactInMailinglist(String directoryId, String mailingListId, CreateContactInMailingList createContactInMailingList) throws ApiException {
        createContactInMailinglistWithHttpInfo(directoryId, mailingListId, createContactInMailingList);
    }

    /**
     * Create contact in mailing list
     * Creates a contact in a given mailing list
     * @param directoryId ID of the qualtrics directory to create the contact to (required)
     * @param mailingListId ID of the mailing list (required)
     * @param createContactInMailingList Contact data (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Contact created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createContactInMailinglistWithHttpInfo(String directoryId, String mailingListId, CreateContactInMailingList createContactInMailingList) throws ApiException {
        okhttp3.Call localVarCall = createContactInMailinglistValidateBeforeCall(directoryId, mailingListId, createContactInMailingList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create contact in mailing list (asynchronously)
     * Creates a contact in a given mailing list
     * @param directoryId ID of the qualtrics directory to create the contact to (required)
     * @param mailingListId ID of the mailing list (required)
     * @param createContactInMailingList Contact data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Contact created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createContactInMailinglistAsync(String directoryId, String mailingListId, CreateContactInMailingList createContactInMailingList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createContactInMailinglistValidateBeforeCall(directoryId, mailingListId, createContactInMailingList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateDistributionLinks
     * @param createDistributionLinks Parameters for the link generation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateDistributionLinksCall(CreateDistributionLinks createDistributionLinks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDistributionLinks;

        // create path and map variables
        String localVarPath = "/distributions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateDistributionLinksValidateBeforeCall(CreateDistributionLinks createDistributionLinks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDistributionLinks' is set
        if (createDistributionLinks == null) {
            throw new ApiException("Missing the required parameter 'createDistributionLinks' when calling generateDistributionLinks(Async)");
        }

        return generateDistributionLinksCall(createDistributionLinks, _callback);

    }

    /**
     * Generate distribution links
     * Geneates links for individual distribution
     * @param createDistributionLinks Parameters for the link generation (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void generateDistributionLinks(CreateDistributionLinks createDistributionLinks) throws ApiException {
        generateDistributionLinksWithHttpInfo(createDistributionLinks);
    }

    /**
     * Generate distribution links
     * Geneates links for individual distribution
     * @param createDistributionLinks Parameters for the link generation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> generateDistributionLinksWithHttpInfo(CreateDistributionLinks createDistributionLinks) throws ApiException {
        okhttp3.Call localVarCall = generateDistributionLinksValidateBeforeCall(createDistributionLinks, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Generate distribution links (asynchronously)
     * Geneates links for individual distribution
     * @param createDistributionLinks Parameters for the link generation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateDistributionLinksAsync(CreateDistributionLinks createDistributionLinks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateDistributionLinksValidateBeforeCall(createDistributionLinks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDistributions
     * @param surveyId The survey for which to load the distributions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distributions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionsCall(String surveyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/distributions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (surveyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surveyId", surveyId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDistributionsValidateBeforeCall(String surveyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling getDistributions(Async)");
        }

        return getDistributionsCall(surveyId, _callback);

    }

    /**
     * Get distributions for survey
     * Gets all distributions for a given survey
     * @param surveyId The survey for which to load the distributions (required)
     * @return DistributionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distributions </td><td>  -  </td></tr>
     </table>
     */
    public DistributionsResponse getDistributions(String surveyId) throws ApiException {
        ApiResponse<DistributionsResponse> localVarResp = getDistributionsWithHttpInfo(surveyId);
        return localVarResp.getData();
    }

    /**
     * Get distributions for survey
     * Gets all distributions for a given survey
     * @param surveyId The survey for which to load the distributions (required)
     * @return ApiResponse&lt;DistributionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distributions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistributionsResponse> getDistributionsWithHttpInfo(String surveyId) throws ApiException {
        okhttp3.Call localVarCall = getDistributionsValidateBeforeCall(surveyId, null);
        Type localVarReturnType = new TypeToken<DistributionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get distributions for survey (asynchronously)
     * Gets all distributions for a given survey
     * @param surveyId The survey for which to load the distributions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Distributions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDistributionsAsync(String surveyId, final ApiCallback<DistributionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDistributionsValidateBeforeCall(surveyId, _callback);
        Type localVarReturnType = new TypeToken<DistributionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventSubscriptions
     * @param subscriptionId ID of event subscription - can be obtained from web hook response (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventSubscriptionsCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eventsubscriptions/{SubscriptionId}"
            .replace("{" + "SubscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventSubscriptionsValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getEventSubscriptions(Async)");
        }

        return getEventSubscriptionsCall(subscriptionId, _callback);

    }

    /**
     * Get event subscriptions
     * Get event subscriptions
     * @param subscriptionId ID of event subscription - can be obtained from web hook response (required)
     * @return EventSubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsResponse getEventSubscriptions(String subscriptionId) throws ApiException {
        ApiResponse<EventSubscriptionsResponse> localVarResp = getEventSubscriptionsWithHttpInfo(subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Get event subscriptions
     * Get event subscriptions
     * @param subscriptionId ID of event subscription - can be obtained from web hook response (required)
     * @return ApiResponse&lt;EventSubscriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsResponse> getEventSubscriptionsWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = getEventSubscriptionsValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get event subscriptions (asynchronously)
     * Get event subscriptions
     * @param subscriptionId ID of event subscription - can be obtained from web hook response (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventSubscriptionsAsync(String subscriptionId, final ApiCallback<EventSubscriptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventSubscriptionsValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSurvey
     * @param surveyId ID of survey (eg. SV_123) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey data </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Operation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSurveyCall(String surveyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/survey-definitions/{SurveyId}"
            .replace("{" + "SurveyId" + "}", localVarApiClient.escapeString(surveyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSurveyValidateBeforeCall(String surveyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling getSurvey(Async)");
        }

        return getSurveyCall(surveyId, _callback);

    }

    /**
     * Get survey
     * Gets a single Qualtrics survey speficied by its ID
     * @param surveyId ID of survey (eg. SV_123) (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey data </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Operation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public Object getSurvey(String surveyId) throws ApiException {
        ApiResponse<Object> localVarResp = getSurveyWithHttpInfo(surveyId);
        return localVarResp.getData();
    }

    /**
     * Get survey
     * Gets a single Qualtrics survey speficied by its ID
     * @param surveyId ID of survey (eg. SV_123) (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey data </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Operation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSurveyWithHttpInfo(String surveyId) throws ApiException {
        okhttp3.Call localVarCall = getSurveyValidateBeforeCall(surveyId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get survey (asynchronously)
     * Gets a single Qualtrics survey speficied by its ID
     * @param surveyId ID of survey (eg. SV_123) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Survey data </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Operation Failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSurveyAsync(String surveyId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSurveyValidateBeforeCall(surveyId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrievedistributionlinks
     * @param surveyId ID of the survey (eg: SV_123) (required)
     * @param distributionId ID of the distribution list (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated list of links </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievedistributionlinksCall(String surveyId, String distributionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/distributions/{DistributionId}/links"
            .replace("{" + "DistributionId" + "}", localVarApiClient.escapeString(distributionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (surveyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("surveyId", surveyId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrievedistributionlinksValidateBeforeCall(String surveyId, String distributionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'surveyId' is set
        if (surveyId == null) {
            throw new ApiException("Missing the required parameter 'surveyId' when calling retrievedistributionlinks(Async)");
        }

        // verify the required parameter 'distributionId' is set
        if (distributionId == null) {
            throw new ApiException("Missing the required parameter 'distributionId' when calling retrievedistributionlinks(Async)");
        }

        return retrievedistributionlinksCall(surveyId, distributionId, _callback);

    }

    /**
     * Retrieve distribution links
     * Retrieves all the individual links for a given distribution
     * @param surveyId ID of the survey (eg: SV_123) (required)
     * @param distributionId ID of the distribution list (required)
     * @return RetrieveDistributionLinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated list of links </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveDistributionLinksResponse retrievedistributionlinks(String surveyId, String distributionId) throws ApiException {
        ApiResponse<RetrieveDistributionLinksResponse> localVarResp = retrievedistributionlinksWithHttpInfo(surveyId, distributionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve distribution links
     * Retrieves all the individual links for a given distribution
     * @param surveyId ID of the survey (eg: SV_123) (required)
     * @param distributionId ID of the distribution list (required)
     * @return ApiResponse&lt;RetrieveDistributionLinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated list of links </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveDistributionLinksResponse> retrievedistributionlinksWithHttpInfo(String surveyId, String distributionId) throws ApiException {
        okhttp3.Call localVarCall = retrievedistributionlinksValidateBeforeCall(surveyId, distributionId, null);
        Type localVarReturnType = new TypeToken<RetrieveDistributionLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve distribution links (asynchronously)
     * Retrieves all the individual links for a given distribution
     * @param surveyId ID of the survey (eg: SV_123) (required)
     * @param distributionId ID of the distribution list (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated list of links </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrievedistributionlinksAsync(String surveyId, String distributionId, final ApiCallback<RetrieveDistributionLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrievedistributionlinksValidateBeforeCall(surveyId, distributionId, _callback);
        Type localVarReturnType = new TypeToken<RetrieveDistributionLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookDelete
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookDeleteCall(SubscribeToEventBody subscribeToEventBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscribeToEventBody;

        // create path and map variables
        String localVarPath = "/eventsubscriptions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookDeleteValidateBeforeCall(SubscribeToEventBody subscribeToEventBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscribeToEventBody' is set
        if (subscribeToEventBody == null) {
            throw new ApiException("Missing the required parameter 'subscribeToEventBody' when calling webhookDelete(Async)");
        }

        return webhookDeleteCall(subscribeToEventBody, _callback);

    }

    /**
     * Remove subscription to response event
     * Remove event subscription
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @return EventSubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsResponse webhookDelete(SubscribeToEventBody subscribeToEventBody) throws ApiException {
        ApiResponse<EventSubscriptionsResponse> localVarResp = webhookDeleteWithHttpInfo(subscribeToEventBody);
        return localVarResp.getData();
    }

    /**
     * Remove subscription to response event
     * Remove event subscription
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @return ApiResponse&lt;EventSubscriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsResponse> webhookDeleteWithHttpInfo(SubscribeToEventBody subscribeToEventBody) throws ApiException {
        okhttp3.Call localVarCall = webhookDeleteValidateBeforeCall(subscribeToEventBody, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove subscription to response event (asynchronously)
     * Remove event subscription
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookDeleteAsync(SubscribeToEventBody subscribeToEventBody, final ApiCallback<EventSubscriptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookDeleteValidateBeforeCall(subscribeToEventBody, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for whenAResponseIsReceived
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - web hook registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whenAResponseIsReceivedCall(SubscribeToEventBody subscribeToEventBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscribeToEventBody;

        // create path and map variables
        String localVarPath = "/eventsubscriptions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call whenAResponseIsReceivedValidateBeforeCall(SubscribeToEventBody subscribeToEventBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscribeToEventBody' is set
        if (subscribeToEventBody == null) {
            throw new ApiException("Missing the required parameter 'subscribeToEventBody' when calling whenAResponseIsReceived(Async)");
        }

        return whenAResponseIsReceivedCall(subscribeToEventBody, _callback);

    }

    /**
     * Triggers when a response is submitted to a qualtrics survey
     * Subscribe to response event
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @return EventSubscriptionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - web hook registered </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsResponse whenAResponseIsReceived(SubscribeToEventBody subscribeToEventBody) throws ApiException {
        ApiResponse<EventSubscriptionsResponse> localVarResp = whenAResponseIsReceivedWithHttpInfo(subscribeToEventBody);
        return localVarResp.getData();
    }

    /**
     * Triggers when a response is submitted to a qualtrics survey
     * Subscribe to response event
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @return ApiResponse&lt;EventSubscriptionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - web hook registered </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsResponse> whenAResponseIsReceivedWithHttpInfo(SubscribeToEventBody subscribeToEventBody) throws ApiException {
        okhttp3.Call localVarCall = whenAResponseIsReceivedValidateBeforeCall(subscribeToEventBody, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Triggers when a response is submitted to a qualtrics survey (asynchronously)
     * Subscribe to response event
     * @param subscribeToEventBody This is the request body of the webhook (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - web hook registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whenAResponseIsReceivedAsync(SubscribeToEventBody subscribeToEventBody, final ApiCallback<EventSubscriptionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = whenAResponseIsReceivedValidateBeforeCall(subscribeToEventBody, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
