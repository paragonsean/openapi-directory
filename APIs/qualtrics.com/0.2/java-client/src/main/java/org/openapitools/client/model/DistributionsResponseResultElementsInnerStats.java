/*
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DistributionsResponseResultElementsInnerStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:42.420677-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DistributionsResponseResultElementsInnerStats {
  public static final String SERIALIZED_NAME_BLOCKED = "blocked";
  @SerializedName(SERIALIZED_NAME_BLOCKED)
  private Integer blocked;

  public static final String SERIALIZED_NAME_BOUNCED = "bounced";
  @SerializedName(SERIALIZED_NAME_BOUNCED)
  private Integer bounced;

  public static final String SERIALIZED_NAME_COMPLAINTS = "complaints";
  @SerializedName(SERIALIZED_NAME_COMPLAINTS)
  private Integer complaints;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private Integer finished;

  public static final String SERIALIZED_NAME_OPENED = "opened";
  @SerializedName(SERIALIZED_NAME_OPENED)
  private Integer opened;

  public static final String SERIALIZED_NAME_SENT = "sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private Integer sent;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  private Integer skipped;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private Integer started;

  public DistributionsResponseResultElementsInnerStats() {
  }

  public DistributionsResponseResultElementsInnerStats blocked(Integer blocked) {
    this.blocked = blocked;
    return this;
  }

  /**
   * Get blocked
   * @return blocked
   */
  @javax.annotation.Nullable
  public Integer getBlocked() {
    return blocked;
  }

  public void setBlocked(Integer blocked) {
    this.blocked = blocked;
  }


  public DistributionsResponseResultElementsInnerStats bounced(Integer bounced) {
    this.bounced = bounced;
    return this;
  }

  /**
   * Get bounced
   * @return bounced
   */
  @javax.annotation.Nullable
  public Integer getBounced() {
    return bounced;
  }

  public void setBounced(Integer bounced) {
    this.bounced = bounced;
  }


  public DistributionsResponseResultElementsInnerStats complaints(Integer complaints) {
    this.complaints = complaints;
    return this;
  }

  /**
   * Get complaints
   * @return complaints
   */
  @javax.annotation.Nullable
  public Integer getComplaints() {
    return complaints;
  }

  public void setComplaints(Integer complaints) {
    this.complaints = complaints;
  }


  public DistributionsResponseResultElementsInnerStats failed(Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public DistributionsResponseResultElementsInnerStats finished(Integer finished) {
    this.finished = finished;
    return this;
  }

  /**
   * Get finished
   * @return finished
   */
  @javax.annotation.Nullable
  public Integer getFinished() {
    return finished;
  }

  public void setFinished(Integer finished) {
    this.finished = finished;
  }


  public DistributionsResponseResultElementsInnerStats opened(Integer opened) {
    this.opened = opened;
    return this;
  }

  /**
   * Get opened
   * @return opened
   */
  @javax.annotation.Nullable
  public Integer getOpened() {
    return opened;
  }

  public void setOpened(Integer opened) {
    this.opened = opened;
  }


  public DistributionsResponseResultElementsInnerStats sent(Integer sent) {
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @javax.annotation.Nullable
  public Integer getSent() {
    return sent;
  }

  public void setSent(Integer sent) {
    this.sent = sent;
  }


  public DistributionsResponseResultElementsInnerStats skipped(Integer skipped) {
    this.skipped = skipped;
    return this;
  }

  /**
   * Get skipped
   * @return skipped
   */
  @javax.annotation.Nullable
  public Integer getSkipped() {
    return skipped;
  }

  public void setSkipped(Integer skipped) {
    this.skipped = skipped;
  }


  public DistributionsResponseResultElementsInnerStats started(Integer started) {
    this.started = started;
    return this;
  }

  /**
   * Get started
   * @return started
   */
  @javax.annotation.Nullable
  public Integer getStarted() {
    return started;
  }

  public void setStarted(Integer started) {
    this.started = started;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistributionsResponseResultElementsInnerStats distributionsResponseResultElementsInnerStats = (DistributionsResponseResultElementsInnerStats) o;
    return Objects.equals(this.blocked, distributionsResponseResultElementsInnerStats.blocked) &&
        Objects.equals(this.bounced, distributionsResponseResultElementsInnerStats.bounced) &&
        Objects.equals(this.complaints, distributionsResponseResultElementsInnerStats.complaints) &&
        Objects.equals(this.failed, distributionsResponseResultElementsInnerStats.failed) &&
        Objects.equals(this.finished, distributionsResponseResultElementsInnerStats.finished) &&
        Objects.equals(this.opened, distributionsResponseResultElementsInnerStats.opened) &&
        Objects.equals(this.sent, distributionsResponseResultElementsInnerStats.sent) &&
        Objects.equals(this.skipped, distributionsResponseResultElementsInnerStats.skipped) &&
        Objects.equals(this.started, distributionsResponseResultElementsInnerStats.started);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocked, bounced, complaints, failed, finished, opened, sent, skipped, started);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistributionsResponseResultElementsInnerStats {\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    bounced: ").append(toIndentedString(bounced)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    opened: ").append(toIndentedString(opened)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blocked");
    openapiFields.add("bounced");
    openapiFields.add("complaints");
    openapiFields.add("failed");
    openapiFields.add("finished");
    openapiFields.add("opened");
    openapiFields.add("sent");
    openapiFields.add("skipped");
    openapiFields.add("started");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DistributionsResponseResultElementsInnerStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DistributionsResponseResultElementsInnerStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DistributionsResponseResultElementsInnerStats is not found in the empty JSON string", DistributionsResponseResultElementsInnerStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DistributionsResponseResultElementsInnerStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DistributionsResponseResultElementsInnerStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DistributionsResponseResultElementsInnerStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DistributionsResponseResultElementsInnerStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DistributionsResponseResultElementsInnerStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DistributionsResponseResultElementsInnerStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DistributionsResponseResultElementsInnerStats>() {
           @Override
           public void write(JsonWriter out, DistributionsResponseResultElementsInnerStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DistributionsResponseResultElementsInnerStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DistributionsResponseResultElementsInnerStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DistributionsResponseResultElementsInnerStats
   * @throws IOException if the JSON string is invalid with respect to DistributionsResponseResultElementsInnerStats
   */
  public static DistributionsResponseResultElementsInnerStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DistributionsResponseResultElementsInnerStats.class);
  }

  /**
   * Convert an instance of DistributionsResponseResultElementsInnerStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

