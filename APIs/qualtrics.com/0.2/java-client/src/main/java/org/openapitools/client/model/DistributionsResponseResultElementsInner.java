/*
 * Qualtrics API
 * Work with Qualtrics surveys, distributions and response events
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DistributionsResponseResultElementsInnerHeaders;
import org.openapitools.client.model.DistributionsResponseResultElementsInnerMessage;
import org.openapitools.client.model.DistributionsResponseResultElementsInnerRecipients;
import org.openapitools.client.model.DistributionsResponseResultElementsInnerStats;
import org.openapitools.client.model.DistributionsResponseResultElementsInnerSurveyLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DistributionsResponseResultElementsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:42.420677-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DistributionsResponseResultElementsInner {
  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_CUSTOM_HEADERS = "customHeaders";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADERS)
  private Object customHeaders;

  public static final String SERIALIZED_NAME_EMBEDDED_DATA = "embeddedData";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_DATA)
  private Object embeddedData = null;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private DistributionsResponseResultElementsInnerHeaders headers;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private DistributionsResponseResultElementsInnerMessage message;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_PARENT_DISTRIBUTION_ID = "parentDistributionId";
  @SerializedName(SERIALIZED_NAME_PARENT_DISTRIBUTION_ID)
  private Object parentDistributionId = null;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private DistributionsResponseResultElementsInnerRecipients recipients;

  public static final String SERIALIZED_NAME_REQUEST_STATUS = "requestStatus";
  @SerializedName(SERIALIZED_NAME_REQUEST_STATUS)
  private String requestStatus;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  public static final String SERIALIZED_NAME_SEND_DATE = "sendDate";
  @SerializedName(SERIALIZED_NAME_SEND_DATE)
  private String sendDate;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private DistributionsResponseResultElementsInnerStats stats;

  public static final String SERIALIZED_NAME_SURVEY_LINK = "surveyLink";
  @SerializedName(SERIALIZED_NAME_SURVEY_LINK)
  private DistributionsResponseResultElementsInnerSurveyLink surveyLink;

  public DistributionsResponseResultElementsInner() {
  }

  public DistributionsResponseResultElementsInner createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nonnull
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public DistributionsResponseResultElementsInner customHeaders(Object customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

  /**
   * Get customHeaders
   * @return customHeaders
   */
  @javax.annotation.Nonnull
  public Object getCustomHeaders() {
    return customHeaders;
  }

  public void setCustomHeaders(Object customHeaders) {
    this.customHeaders = customHeaders;
  }


  public DistributionsResponseResultElementsInner embeddedData(Object embeddedData) {
    this.embeddedData = embeddedData;
    return this;
  }

  /**
   * Get embeddedData
   * @return embeddedData
   */
  @javax.annotation.Nullable
  public Object getEmbeddedData() {
    return embeddedData;
  }

  public void setEmbeddedData(Object embeddedData) {
    this.embeddedData = embeddedData;
  }


  public DistributionsResponseResultElementsInner headers(DistributionsResponseResultElementsInnerHeaders headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nonnull
  public DistributionsResponseResultElementsInnerHeaders getHeaders() {
    return headers;
  }

  public void setHeaders(DistributionsResponseResultElementsInnerHeaders headers) {
    this.headers = headers;
  }


  public DistributionsResponseResultElementsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DistributionsResponseResultElementsInner message(DistributionsResponseResultElementsInnerMessage message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public DistributionsResponseResultElementsInnerMessage getMessage() {
    return message;
  }

  public void setMessage(DistributionsResponseResultElementsInnerMessage message) {
    this.message = message;
  }


  public DistributionsResponseResultElementsInner modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * Get modifiedDate
   * @return modifiedDate
   */
  @javax.annotation.Nonnull
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public DistributionsResponseResultElementsInner organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nonnull
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public DistributionsResponseResultElementsInner ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * Get ownerId
   * @return ownerId
   */
  @javax.annotation.Nonnull
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public DistributionsResponseResultElementsInner parentDistributionId(Object parentDistributionId) {
    this.parentDistributionId = parentDistributionId;
    return this;
  }

  /**
   * Get parentDistributionId
   * @return parentDistributionId
   */
  @javax.annotation.Nullable
  public Object getParentDistributionId() {
    return parentDistributionId;
  }

  public void setParentDistributionId(Object parentDistributionId) {
    this.parentDistributionId = parentDistributionId;
  }


  public DistributionsResponseResultElementsInner recipients(DistributionsResponseResultElementsInnerRecipients recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nonnull
  public DistributionsResponseResultElementsInnerRecipients getRecipients() {
    return recipients;
  }

  public void setRecipients(DistributionsResponseResultElementsInnerRecipients recipients) {
    this.recipients = recipients;
  }


  public DistributionsResponseResultElementsInner requestStatus(String requestStatus) {
    this.requestStatus = requestStatus;
    return this;
  }

  /**
   * Get requestStatus
   * @return requestStatus
   */
  @javax.annotation.Nonnull
  public String getRequestStatus() {
    return requestStatus;
  }

  public void setRequestStatus(String requestStatus) {
    this.requestStatus = requestStatus;
  }


  public DistributionsResponseResultElementsInner requestType(String requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * Get requestType
   * @return requestType
   */
  @javax.annotation.Nonnull
  public String getRequestType() {
    return requestType;
  }

  public void setRequestType(String requestType) {
    this.requestType = requestType;
  }


  public DistributionsResponseResultElementsInner sendDate(String sendDate) {
    this.sendDate = sendDate;
    return this;
  }

  /**
   * Get sendDate
   * @return sendDate
   */
  @javax.annotation.Nonnull
  public String getSendDate() {
    return sendDate;
  }

  public void setSendDate(String sendDate) {
    this.sendDate = sendDate;
  }


  public DistributionsResponseResultElementsInner stats(DistributionsResponseResultElementsInnerStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nonnull
  public DistributionsResponseResultElementsInnerStats getStats() {
    return stats;
  }

  public void setStats(DistributionsResponseResultElementsInnerStats stats) {
    this.stats = stats;
  }


  public DistributionsResponseResultElementsInner surveyLink(DistributionsResponseResultElementsInnerSurveyLink surveyLink) {
    this.surveyLink = surveyLink;
    return this;
  }

  /**
   * Get surveyLink
   * @return surveyLink
   */
  @javax.annotation.Nonnull
  public DistributionsResponseResultElementsInnerSurveyLink getSurveyLink() {
    return surveyLink;
  }

  public void setSurveyLink(DistributionsResponseResultElementsInnerSurveyLink surveyLink) {
    this.surveyLink = surveyLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistributionsResponseResultElementsInner distributionsResponseResultElementsInner = (DistributionsResponseResultElementsInner) o;
    return Objects.equals(this.createdDate, distributionsResponseResultElementsInner.createdDate) &&
        Objects.equals(this.customHeaders, distributionsResponseResultElementsInner.customHeaders) &&
        Objects.equals(this.embeddedData, distributionsResponseResultElementsInner.embeddedData) &&
        Objects.equals(this.headers, distributionsResponseResultElementsInner.headers) &&
        Objects.equals(this.id, distributionsResponseResultElementsInner.id) &&
        Objects.equals(this.message, distributionsResponseResultElementsInner.message) &&
        Objects.equals(this.modifiedDate, distributionsResponseResultElementsInner.modifiedDate) &&
        Objects.equals(this.organizationId, distributionsResponseResultElementsInner.organizationId) &&
        Objects.equals(this.ownerId, distributionsResponseResultElementsInner.ownerId) &&
        Objects.equals(this.parentDistributionId, distributionsResponseResultElementsInner.parentDistributionId) &&
        Objects.equals(this.recipients, distributionsResponseResultElementsInner.recipients) &&
        Objects.equals(this.requestStatus, distributionsResponseResultElementsInner.requestStatus) &&
        Objects.equals(this.requestType, distributionsResponseResultElementsInner.requestType) &&
        Objects.equals(this.sendDate, distributionsResponseResultElementsInner.sendDate) &&
        Objects.equals(this.stats, distributionsResponseResultElementsInner.stats) &&
        Objects.equals(this.surveyLink, distributionsResponseResultElementsInner.surveyLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, customHeaders, embeddedData, headers, id, message, modifiedDate, organizationId, ownerId, parentDistributionId, recipients, requestStatus, requestType, sendDate, stats, surveyLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistributionsResponseResultElementsInner {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    embeddedData: ").append(toIndentedString(embeddedData)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    parentDistributionId: ").append(toIndentedString(parentDistributionId)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    requestStatus: ").append(toIndentedString(requestStatus)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    sendDate: ").append(toIndentedString(sendDate)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    surveyLink: ").append(toIndentedString(surveyLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDate");
    openapiFields.add("customHeaders");
    openapiFields.add("embeddedData");
    openapiFields.add("headers");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("modifiedDate");
    openapiFields.add("organizationId");
    openapiFields.add("ownerId");
    openapiFields.add("parentDistributionId");
    openapiFields.add("recipients");
    openapiFields.add("requestStatus");
    openapiFields.add("requestType");
    openapiFields.add("sendDate");
    openapiFields.add("stats");
    openapiFields.add("surveyLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("customHeaders");
    openapiRequiredFields.add("embeddedData");
    openapiRequiredFields.add("headers");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("modifiedDate");
    openapiRequiredFields.add("organizationId");
    openapiRequiredFields.add("ownerId");
    openapiRequiredFields.add("parentDistributionId");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("requestStatus");
    openapiRequiredFields.add("requestType");
    openapiRequiredFields.add("sendDate");
    openapiRequiredFields.add("stats");
    openapiRequiredFields.add("surveyLink");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DistributionsResponseResultElementsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DistributionsResponseResultElementsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DistributionsResponseResultElementsInner is not found in the empty JSON string", DistributionsResponseResultElementsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DistributionsResponseResultElementsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DistributionsResponseResultElementsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DistributionsResponseResultElementsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      // validate the required field `headers`
      DistributionsResponseResultElementsInnerHeaders.validateJsonElement(jsonObj.get("headers"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `message`
      DistributionsResponseResultElementsInnerMessage.validateJsonElement(jsonObj.get("message"));
      if (!jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
      if (!jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      if (!jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      // validate the required field `recipients`
      DistributionsResponseResultElementsInnerRecipients.validateJsonElement(jsonObj.get("recipients"));
      if (!jsonObj.get("requestStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestStatus").toString()));
      }
      if (!jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      if (!jsonObj.get("sendDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendDate").toString()));
      }
      // validate the required field `stats`
      DistributionsResponseResultElementsInnerStats.validateJsonElement(jsonObj.get("stats"));
      // validate the required field `surveyLink`
      DistributionsResponseResultElementsInnerSurveyLink.validateJsonElement(jsonObj.get("surveyLink"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DistributionsResponseResultElementsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DistributionsResponseResultElementsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DistributionsResponseResultElementsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DistributionsResponseResultElementsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DistributionsResponseResultElementsInner>() {
           @Override
           public void write(JsonWriter out, DistributionsResponseResultElementsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DistributionsResponseResultElementsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DistributionsResponseResultElementsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DistributionsResponseResultElementsInner
   * @throws IOException if the JSON string is invalid with respect to DistributionsResponseResultElementsInner
   */
  public static DistributionsResponseResultElementsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DistributionsResponseResultElementsInner.class);
  }

  /**
   * Convert an instance of DistributionsResponseResultElementsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

