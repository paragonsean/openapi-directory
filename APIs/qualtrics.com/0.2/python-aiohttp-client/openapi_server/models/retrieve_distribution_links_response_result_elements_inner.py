# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetrieveDistributionLinksResponseResultElementsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, email: str=None, exceeded_contact_frequency: bool=None, external_data_reference: object=None, first_name: str=None, last_name: str=None, link: str=None, link_expiration: str=None, status: str=None, transaction_id: object=None, unsubscribed: bool=None):
        """RetrieveDistributionLinksResponseResultElementsInner - a model defined in OpenAPI

        :param contact_id: The contact_id of this RetrieveDistributionLinksResponseResultElementsInner.
        :param email: The email of this RetrieveDistributionLinksResponseResultElementsInner.
        :param exceeded_contact_frequency: The exceeded_contact_frequency of this RetrieveDistributionLinksResponseResultElementsInner.
        :param external_data_reference: The external_data_reference of this RetrieveDistributionLinksResponseResultElementsInner.
        :param first_name: The first_name of this RetrieveDistributionLinksResponseResultElementsInner.
        :param last_name: The last_name of this RetrieveDistributionLinksResponseResultElementsInner.
        :param link: The link of this RetrieveDistributionLinksResponseResultElementsInner.
        :param link_expiration: The link_expiration of this RetrieveDistributionLinksResponseResultElementsInner.
        :param status: The status of this RetrieveDistributionLinksResponseResultElementsInner.
        :param transaction_id: The transaction_id of this RetrieveDistributionLinksResponseResultElementsInner.
        :param unsubscribed: The unsubscribed of this RetrieveDistributionLinksResponseResultElementsInner.
        """
        self.openapi_types = {
            'contact_id': str,
            'email': str,
            'exceeded_contact_frequency': bool,
            'external_data_reference': object,
            'first_name': str,
            'last_name': str,
            'link': str,
            'link_expiration': str,
            'status': str,
            'transaction_id': object,
            'unsubscribed': bool
        }

        self.attribute_map = {
            'contact_id': 'contactId',
            'email': 'email',
            'exceeded_contact_frequency': 'exceededContactFrequency',
            'external_data_reference': 'externalDataReference',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'link': 'link',
            'link_expiration': 'linkExpiration',
            'status': 'status',
            'transaction_id': 'transactionId',
            'unsubscribed': 'unsubscribed'
        }

        self._contact_id = contact_id
        self._email = email
        self._exceeded_contact_frequency = exceeded_contact_frequency
        self._external_data_reference = external_data_reference
        self._first_name = first_name
        self._last_name = last_name
        self._link = link
        self._link_expiration = link_expiration
        self._status = status
        self._transaction_id = transaction_id
        self._unsubscribed = unsubscribed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetrieveDistributionLinksResponseResultElementsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetrieveDistributionLinksResponse_result_elements_inner of this RetrieveDistributionLinksResponseResultElementsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The contact_id of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this RetrieveDistributionLinksResponseResultElementsInner.


        :param contact_id: The contact_id of this RetrieveDistributionLinksResponseResultElementsInner.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def email(self):
        """Gets the email of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The email of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RetrieveDistributionLinksResponseResultElementsInner.


        :param email: The email of this RetrieveDistributionLinksResponseResultElementsInner.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def exceeded_contact_frequency(self):
        """Gets the exceeded_contact_frequency of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The exceeded_contact_frequency of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: bool
        """
        return self._exceeded_contact_frequency

    @exceeded_contact_frequency.setter
    def exceeded_contact_frequency(self, exceeded_contact_frequency):
        """Sets the exceeded_contact_frequency of this RetrieveDistributionLinksResponseResultElementsInner.


        :param exceeded_contact_frequency: The exceeded_contact_frequency of this RetrieveDistributionLinksResponseResultElementsInner.
        :type exceeded_contact_frequency: bool
        """
        if exceeded_contact_frequency is None:
            raise ValueError("Invalid value for `exceeded_contact_frequency`, must not be `None`")

        self._exceeded_contact_frequency = exceeded_contact_frequency

    @property
    def external_data_reference(self):
        """Gets the external_data_reference of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The external_data_reference of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: object
        """
        return self._external_data_reference

    @external_data_reference.setter
    def external_data_reference(self, external_data_reference):
        """Sets the external_data_reference of this RetrieveDistributionLinksResponseResultElementsInner.


        :param external_data_reference: The external_data_reference of this RetrieveDistributionLinksResponseResultElementsInner.
        :type external_data_reference: object
        """
        if external_data_reference is None:
            raise ValueError("Invalid value for `external_data_reference`, must not be `None`")

        self._external_data_reference = external_data_reference

    @property
    def first_name(self):
        """Gets the first_name of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The first_name of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RetrieveDistributionLinksResponseResultElementsInner.


        :param first_name: The first_name of this RetrieveDistributionLinksResponseResultElementsInner.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The last_name of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RetrieveDistributionLinksResponseResultElementsInner.


        :param last_name: The last_name of this RetrieveDistributionLinksResponseResultElementsInner.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def link(self):
        """Gets the link of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The link of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this RetrieveDistributionLinksResponseResultElementsInner.


        :param link: The link of this RetrieveDistributionLinksResponseResultElementsInner.
        :type link: str
        """
        if link is None:
            raise ValueError("Invalid value for `link`, must not be `None`")

        self._link = link

    @property
    def link_expiration(self):
        """Gets the link_expiration of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The link_expiration of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: str
        """
        return self._link_expiration

    @link_expiration.setter
    def link_expiration(self, link_expiration):
        """Sets the link_expiration of this RetrieveDistributionLinksResponseResultElementsInner.


        :param link_expiration: The link_expiration of this RetrieveDistributionLinksResponseResultElementsInner.
        :type link_expiration: str
        """
        if link_expiration is None:
            raise ValueError("Invalid value for `link_expiration`, must not be `None`")

        self._link_expiration = link_expiration

    @property
    def status(self):
        """Gets the status of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The status of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RetrieveDistributionLinksResponseResultElementsInner.


        :param status: The status of this RetrieveDistributionLinksResponseResultElementsInner.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The transaction_id of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: object
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this RetrieveDistributionLinksResponseResultElementsInner.


        :param transaction_id: The transaction_id of this RetrieveDistributionLinksResponseResultElementsInner.
        :type transaction_id: object
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this RetrieveDistributionLinksResponseResultElementsInner.


        :return: The unsubscribed of this RetrieveDistributionLinksResponseResultElementsInner.
        :rtype: bool
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this RetrieveDistributionLinksResponseResultElementsInner.


        :param unsubscribed: The unsubscribed of this RetrieveDistributionLinksResponseResultElementsInner.
        :type unsubscribed: bool
        """
        if unsubscribed is None:
            raise ValueError("Invalid value for `unsubscribed`, must not be `None`")

        self._unsubscribed = unsubscribed
