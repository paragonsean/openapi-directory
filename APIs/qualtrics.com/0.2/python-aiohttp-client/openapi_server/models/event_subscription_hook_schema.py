# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_subscription_hook_schema_formdata_inner import EventSubscriptionHookSchemaFormdataInner
from openapi_server import util


class EventSubscriptionHookSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str='x', content_type: str='application/x-www-form-urlencoded', formdata: List[EventSubscriptionHookSchemaFormdataInner]=None):
        """EventSubscriptionHookSchema - a model defined in OpenAPI

        :param content: The content of this EventSubscriptionHookSchema.
        :param content_type: The content_type of this EventSubscriptionHookSchema.
        :param formdata: The formdata of this EventSubscriptionHookSchema.
        """
        self.openapi_types = {
            'content': str,
            'content_type': str,
            'formdata': List[EventSubscriptionHookSchemaFormdataInner]
        }

        self.attribute_map = {
            'content': '$content',
            'content_type': '$content-type',
            'formdata': '$formdata'
        }

        self._content = content
        self._content_type = content_type
        self._formdata = formdata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscriptionHookSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscriptionHookSchema of this EventSubscriptionHookSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this EventSubscriptionHookSchema.


        :return: The content of this EventSubscriptionHookSchema.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this EventSubscriptionHookSchema.


        :param content: The content of this EventSubscriptionHookSchema.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this EventSubscriptionHookSchema.


        :return: The content_type of this EventSubscriptionHookSchema.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this EventSubscriptionHookSchema.


        :param content_type: The content_type of this EventSubscriptionHookSchema.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def formdata(self):
        """Gets the formdata of this EventSubscriptionHookSchema.


        :return: The formdata of this EventSubscriptionHookSchema.
        :rtype: List[EventSubscriptionHookSchemaFormdataInner]
        """
        return self._formdata

    @formdata.setter
    def formdata(self, formdata):
        """Sets the formdata of this EventSubscriptionHookSchema.


        :param formdata: The formdata of this EventSubscriptionHookSchema.
        :type formdata: List[EventSubscriptionHookSchemaFormdataInner]
        """

        self._formdata = formdata
