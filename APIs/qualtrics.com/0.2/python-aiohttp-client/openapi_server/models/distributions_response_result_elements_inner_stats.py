# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DistributionsResponseResultElementsInnerStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked: int=None, bounced: int=None, complaints: int=None, failed: int=None, finished: int=None, opened: int=None, sent: int=None, skipped: int=None, started: int=None):
        """DistributionsResponseResultElementsInnerStats - a model defined in OpenAPI

        :param blocked: The blocked of this DistributionsResponseResultElementsInnerStats.
        :param bounced: The bounced of this DistributionsResponseResultElementsInnerStats.
        :param complaints: The complaints of this DistributionsResponseResultElementsInnerStats.
        :param failed: The failed of this DistributionsResponseResultElementsInnerStats.
        :param finished: The finished of this DistributionsResponseResultElementsInnerStats.
        :param opened: The opened of this DistributionsResponseResultElementsInnerStats.
        :param sent: The sent of this DistributionsResponseResultElementsInnerStats.
        :param skipped: The skipped of this DistributionsResponseResultElementsInnerStats.
        :param started: The started of this DistributionsResponseResultElementsInnerStats.
        """
        self.openapi_types = {
            'blocked': int,
            'bounced': int,
            'complaints': int,
            'failed': int,
            'finished': int,
            'opened': int,
            'sent': int,
            'skipped': int,
            'started': int
        }

        self.attribute_map = {
            'blocked': 'blocked',
            'bounced': 'bounced',
            'complaints': 'complaints',
            'failed': 'failed',
            'finished': 'finished',
            'opened': 'opened',
            'sent': 'sent',
            'skipped': 'skipped',
            'started': 'started'
        }

        self._blocked = blocked
        self._bounced = bounced
        self._complaints = complaints
        self._failed = failed
        self._finished = finished
        self._opened = opened
        self._sent = sent
        self._skipped = skipped
        self._started = started

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistributionsResponseResultElementsInnerStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DistributionsResponse_result_elements_inner_stats of this DistributionsResponseResultElementsInnerStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked(self):
        """Gets the blocked of this DistributionsResponseResultElementsInnerStats.


        :return: The blocked of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this DistributionsResponseResultElementsInnerStats.


        :param blocked: The blocked of this DistributionsResponseResultElementsInnerStats.
        :type blocked: int
        """

        self._blocked = blocked

    @property
    def bounced(self):
        """Gets the bounced of this DistributionsResponseResultElementsInnerStats.


        :return: The bounced of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._bounced

    @bounced.setter
    def bounced(self, bounced):
        """Sets the bounced of this DistributionsResponseResultElementsInnerStats.


        :param bounced: The bounced of this DistributionsResponseResultElementsInnerStats.
        :type bounced: int
        """

        self._bounced = bounced

    @property
    def complaints(self):
        """Gets the complaints of this DistributionsResponseResultElementsInnerStats.


        :return: The complaints of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._complaints

    @complaints.setter
    def complaints(self, complaints):
        """Sets the complaints of this DistributionsResponseResultElementsInnerStats.


        :param complaints: The complaints of this DistributionsResponseResultElementsInnerStats.
        :type complaints: int
        """

        self._complaints = complaints

    @property
    def failed(self):
        """Gets the failed of this DistributionsResponseResultElementsInnerStats.


        :return: The failed of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this DistributionsResponseResultElementsInnerStats.


        :param failed: The failed of this DistributionsResponseResultElementsInnerStats.
        :type failed: int
        """

        self._failed = failed

    @property
    def finished(self):
        """Gets the finished of this DistributionsResponseResultElementsInnerStats.


        :return: The finished of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this DistributionsResponseResultElementsInnerStats.


        :param finished: The finished of this DistributionsResponseResultElementsInnerStats.
        :type finished: int
        """

        self._finished = finished

    @property
    def opened(self):
        """Gets the opened of this DistributionsResponseResultElementsInnerStats.


        :return: The opened of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._opened

    @opened.setter
    def opened(self, opened):
        """Sets the opened of this DistributionsResponseResultElementsInnerStats.


        :param opened: The opened of this DistributionsResponseResultElementsInnerStats.
        :type opened: int
        """

        self._opened = opened

    @property
    def sent(self):
        """Gets the sent of this DistributionsResponseResultElementsInnerStats.


        :return: The sent of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this DistributionsResponseResultElementsInnerStats.


        :param sent: The sent of this DistributionsResponseResultElementsInnerStats.
        :type sent: int
        """

        self._sent = sent

    @property
    def skipped(self):
        """Gets the skipped of this DistributionsResponseResultElementsInnerStats.


        :return: The skipped of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._skipped

    @skipped.setter
    def skipped(self, skipped):
        """Sets the skipped of this DistributionsResponseResultElementsInnerStats.


        :param skipped: The skipped of this DistributionsResponseResultElementsInnerStats.
        :type skipped: int
        """

        self._skipped = skipped

    @property
    def started(self):
        """Gets the started of this DistributionsResponseResultElementsInnerStats.


        :return: The started of this DistributionsResponseResultElementsInnerStats.
        :rtype: int
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this DistributionsResponseResultElementsInnerStats.


        :param started: The started of this DistributionsResponseResultElementsInnerStats.
        :type started: int
        """

        self._started = started
