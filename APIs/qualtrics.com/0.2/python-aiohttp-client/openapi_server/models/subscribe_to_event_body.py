# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscribeToEventBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encrypt: bool=None, publication_url: str=None, topics: str='surveyengine.completedResponse.<Insert SurveyID>'):
        """SubscribeToEventBody - a model defined in OpenAPI

        :param encrypt: The encrypt of this SubscribeToEventBody.
        :param publication_url: The publication_url of this SubscribeToEventBody.
        :param topics: The topics of this SubscribeToEventBody.
        """
        self.openapi_types = {
            'encrypt': bool,
            'publication_url': str,
            'topics': str
        }

        self.attribute_map = {
            'encrypt': 'encrypt',
            'publication_url': 'publicationUrl',
            'topics': 'topics'
        }

        self._encrypt = encrypt
        self._publication_url = publication_url
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscribeToEventBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscribeToEventBody of this SubscribeToEventBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encrypt(self):
        """Gets the encrypt of this SubscribeToEventBody.


        :return: The encrypt of this SubscribeToEventBody.
        :rtype: bool
        """
        return self._encrypt

    @encrypt.setter
    def encrypt(self, encrypt):
        """Sets the encrypt of this SubscribeToEventBody.


        :param encrypt: The encrypt of this SubscribeToEventBody.
        :type encrypt: bool
        """

        self._encrypt = encrypt

    @property
    def publication_url(self):
        """Gets the publication_url of this SubscribeToEventBody.

        The internal publication URL - will be generated by PowerAutomate

        :return: The publication_url of this SubscribeToEventBody.
        :rtype: str
        """
        return self._publication_url

    @publication_url.setter
    def publication_url(self, publication_url):
        """Sets the publication_url of this SubscribeToEventBody.

        The internal publication URL - will be generated by PowerAutomate

        :param publication_url: The publication_url of this SubscribeToEventBody.
        :type publication_url: str
        """
        if publication_url is None:
            raise ValueError("Invalid value for `publication_url`, must not be `None`")

        self._publication_url = publication_url

    @property
    def topics(self):
        """Gets the topics of this SubscribeToEventBody.

        The topics to subscribe to. Must follow the format surveyengine.completedResponse.[SurveyID]

        :return: The topics of this SubscribeToEventBody.
        :rtype: str
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this SubscribeToEventBody.

        The topics to subscribe to. Must follow the format surveyengine.completedResponse.[SurveyID]

        :param topics: The topics of this SubscribeToEventBody.
        :type topics: str
        """
        if topics is None:
            raise ValueError("Invalid value for `topics`, must not be `None`")

        self._topics = topics
