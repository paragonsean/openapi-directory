# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PGApiTokenizeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avs_address: str=None, avs_zip: str=None, card_id: str=None, card_number: str=None, card_swipe: str=None, cardholder_name: str=None, client_ip: str=None, cvv2: str=None, dda_number: str=None, developer_id: str=None, echo_fields: str=None, email_address: List[str]=None, exp_date: str=None, loc_id: str=None, merchant_id: int=None, payload_apple_pay: str=None, payload_google_pay: str=None, profile_id: str=None, report_data: str=None, retry_attempt: int=None, retry_id: int=None, session_id: str=None, single_use: bool=None, tr_number: str=None, type_id: str=None, user_id: int=None, vendor_id: int=None):
        """PGApiTokenizeRequest - a model defined in OpenAPI

        :param avs_address: The avs_address of this PGApiTokenizeRequest.
        :param avs_zip: The avs_zip of this PGApiTokenizeRequest.
        :param card_id: The card_id of this PGApiTokenizeRequest.
        :param card_number: The card_number of this PGApiTokenizeRequest.
        :param card_swipe: The card_swipe of this PGApiTokenizeRequest.
        :param cardholder_name: The cardholder_name of this PGApiTokenizeRequest.
        :param client_ip: The client_ip of this PGApiTokenizeRequest.
        :param cvv2: The cvv2 of this PGApiTokenizeRequest.
        :param dda_number: The dda_number of this PGApiTokenizeRequest.
        :param developer_id: The developer_id of this PGApiTokenizeRequest.
        :param echo_fields: The echo_fields of this PGApiTokenizeRequest.
        :param email_address: The email_address of this PGApiTokenizeRequest.
        :param exp_date: The exp_date of this PGApiTokenizeRequest.
        :param loc_id: The loc_id of this PGApiTokenizeRequest.
        :param merchant_id: The merchant_id of this PGApiTokenizeRequest.
        :param payload_apple_pay: The payload_apple_pay of this PGApiTokenizeRequest.
        :param payload_google_pay: The payload_google_pay of this PGApiTokenizeRequest.
        :param profile_id: The profile_id of this PGApiTokenizeRequest.
        :param report_data: The report_data of this PGApiTokenizeRequest.
        :param retry_attempt: The retry_attempt of this PGApiTokenizeRequest.
        :param retry_id: The retry_id of this PGApiTokenizeRequest.
        :param session_id: The session_id of this PGApiTokenizeRequest.
        :param single_use: The single_use of this PGApiTokenizeRequest.
        :param tr_number: The tr_number of this PGApiTokenizeRequest.
        :param type_id: The type_id of this PGApiTokenizeRequest.
        :param user_id: The user_id of this PGApiTokenizeRequest.
        :param vendor_id: The vendor_id of this PGApiTokenizeRequest.
        """
        self.openapi_types = {
            'avs_address': str,
            'avs_zip': str,
            'card_id': str,
            'card_number': str,
            'card_swipe': str,
            'cardholder_name': str,
            'client_ip': str,
            'cvv2': str,
            'dda_number': str,
            'developer_id': str,
            'echo_fields': str,
            'email_address': List[str],
            'exp_date': str,
            'loc_id': str,
            'merchant_id': int,
            'payload_apple_pay': str,
            'payload_google_pay': str,
            'profile_id': str,
            'report_data': str,
            'retry_attempt': int,
            'retry_id': int,
            'session_id': str,
            'single_use': bool,
            'tr_number': str,
            'type_id': str,
            'user_id': int,
            'vendor_id': int
        }

        self.attribute_map = {
            'avs_address': 'avs_address',
            'avs_zip': 'avs_zip',
            'card_id': 'card_id',
            'card_number': 'card_number',
            'card_swipe': 'card_swipe',
            'cardholder_name': 'cardholder_name',
            'client_ip': 'client_ip',
            'cvv2': 'cvv2',
            'dda_number': 'dda_number',
            'developer_id': 'developer_id',
            'echo_fields': 'echo_fields',
            'email_address': 'email_address',
            'exp_date': 'exp_date',
            'loc_id': 'loc_id',
            'merchant_id': 'merchant_id',
            'payload_apple_pay': 'payload_apple_pay',
            'payload_google_pay': 'payload_google_pay',
            'profile_id': 'profile_id',
            'report_data': 'report_data',
            'retry_attempt': 'retry_attempt',
            'retry_id': 'retry_id',
            'session_id': 'session_id',
            'single_use': 'single_use',
            'tr_number': 'tr_number',
            'type_id': 'type_id',
            'user_id': 'user_id',
            'vendor_id': 'vendor_id'
        }

        self._avs_address = avs_address
        self._avs_zip = avs_zip
        self._card_id = card_id
        self._card_number = card_number
        self._card_swipe = card_swipe
        self._cardholder_name = cardholder_name
        self._client_ip = client_ip
        self._cvv2 = cvv2
        self._dda_number = dda_number
        self._developer_id = developer_id
        self._echo_fields = echo_fields
        self._email_address = email_address
        self._exp_date = exp_date
        self._loc_id = loc_id
        self._merchant_id = merchant_id
        self._payload_apple_pay = payload_apple_pay
        self._payload_google_pay = payload_google_pay
        self._profile_id = profile_id
        self._report_data = report_data
        self._retry_attempt = retry_attempt
        self._retry_id = retry_id
        self._session_id = session_id
        self._single_use = single_use
        self._tr_number = tr_number
        self._type_id = type_id
        self._user_id = user_id
        self._vendor_id = vendor_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PGApiTokenizeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PGApiTokenizeRequest of this PGApiTokenizeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avs_address(self):
        """Gets the avs_address of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 20 AN<br><strong>Description: </strong>Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.

        :return: The avs_address of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._avs_address

    @avs_address.setter
    def avs_address(self, avs_address):
        """Sets the avs_address of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 20 AN<br><strong>Description: </strong>Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.

        :param avs_address: The avs_address of this PGApiTokenizeRequest.
        :type avs_address: str
        """

        self._avs_address = avs_address

    @property
    def avs_zip(self):
        """Gets the avs_zip of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 9 N<br><strong>Description: </strong>Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.<br><strong>Conditional Requirement: </strong>This field is required if avs_address is present.

        :return: The avs_zip of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._avs_zip

    @avs_zip.setter
    def avs_zip(self, avs_zip):
        """Sets the avs_zip of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 9 N<br><strong>Description: </strong>Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.<br><strong>Conditional Requirement: </strong>This field is required if avs_address is present.

        :param avs_zip: The avs_zip of this PGApiTokenizeRequest.
        :type avs_zip: str
        """

        self._avs_zip = avs_zip

    @property
    def card_id(self):
        """Gets the card_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>Card ID received from a tokenization request. The card_id may be used in place of a card number in requests requiring cardholder account data.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The card_id of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>Card ID received from a tokenization request. The card_id may be used in place of a card number in requests requiring cardholder account data.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param card_id: The card_id of this PGApiTokenizeRequest.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def card_number(self):
        """Gets the card_number of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The card_number of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param card_number: The card_number of this PGApiTokenizeRequest.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def card_swipe(self):
        """Gets the card_swipe of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 79<br><strong>Description: </strong>Contains either track 1 or track 2 magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The card_swipe of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._card_swipe

    @card_swipe.setter
    def card_swipe(self, card_swipe):
        """Sets the card_swipe of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 79<br><strong>Description: </strong>Contains either track 1 or track 2 magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param card_swipe: The card_swipe of this PGApiTokenizeRequest.
        :type card_swipe: str
        """

        self._card_swipe = card_swipe

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.

        :return: The cardholder_name of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.

        :param cardholder_name: The cardholder_name of this PGApiTokenizeRequest.
        :type cardholder_name: str
        """

        self._cardholder_name = cardholder_name

    @property
    def client_ip(self):
        """Gets the client_ip of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length AN<br><strong>Description: </strong>Client IP address.

        :return: The client_ip of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length AN<br><strong>Description: </strong>Client IP address.

        :param client_ip: The client_ip of this PGApiTokenizeRequest.
        :type client_ip: str
        """

        self._client_ip = client_ip

    @property
    def cvv2(self):
        """Gets the cvv2 of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>CVV2 or CID value from the signature panel on the back of the cardholder's card. If present during a request that requires authorization, the value will be sent to the issuer for validation.

        :return: The cvv2 of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._cvv2

    @cvv2.setter
    def cvv2(self, cvv2):
        """Sets the cvv2 of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>CVV2 or CID value from the signature panel on the back of the cardholder's card. If present during a request that requires authorization, the value will be sent to the issuer for validation.

        :param cvv2: The cvv2 of this PGApiTokenizeRequest.
        :type cvv2: str
        """

        self._cvv2 = cvv2

    @property
    def dda_number(self):
        """Gets the dda_number of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 17 N<br><strong>Description: </strong>Owner's account number at the bank. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The dda_number of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._dda_number

    @dda_number.setter
    def dda_number(self, dda_number):
        """Sets the dda_number of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 17 N<br><strong>Description: </strong>Owner's account number at the bank. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param dda_number: The dda_number of this PGApiTokenizeRequest.
        :type dda_number: str
        """

        self._dda_number = dda_number

    @property
    def developer_id(self):
        """Gets the developer_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 

        :return: The developer_id of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 

        :param developer_id: The developer_id of this PGApiTokenizeRequest.
        :type developer_id: str
        """

        self._developer_id = developer_id

    @property
    def echo_fields(self):
        """Gets the echo_fields of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.

        :return: The echo_fields of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._echo_fields

    @echo_fields.setter
    def echo_fields(self, echo_fields):
        """Sets the echo_fields of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.

        :param echo_fields: The echo_fields of this PGApiTokenizeRequest.
        :type echo_fields: str
        """

        self._echo_fields = echo_fields

    @property
    def email_address(self):
        """Gets the email_address of this PGApiTokenizeRequest.

         AN<br><strong>Description: </strong>An array of account holder email addresses.

        :return: The email_address of this PGApiTokenizeRequest.
        :rtype: List[str]
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this PGApiTokenizeRequest.

         AN<br><strong>Description: </strong>An array of account holder email addresses.

        :param email_address: The email_address of this PGApiTokenizeRequest.
        :type email_address: List[str]
        """

        self._email_address = email_address

    @property
    def exp_date(self):
        """Gets the exp_date of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 4 N(MMYY format)<br><strong>Description: </strong>Expiration date of cardholder card number. When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The exp_date of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._exp_date

    @exp_date.setter
    def exp_date(self, exp_date):
        """Sets the exp_date of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 4 N(MMYY format)<br><strong>Description: </strong>Expiration date of cardholder card number. When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param exp_date: The exp_date of this PGApiTokenizeRequest.
        :type exp_date: str
        """
        if exp_date is None:
            raise ValueError("Invalid value for `exp_date`, must not be `None`")

        self._exp_date = exp_date

    @property
    def loc_id(self):
        """Gets the loc_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.

        :return: The loc_id of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._loc_id

    @loc_id.setter
    def loc_id(self, loc_id):
        """Sets the loc_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.

        :param loc_id: The loc_id of this PGApiTokenizeRequest.
        :type loc_id: str
        """

        self._loc_id = loc_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.

        :return: The merchant_id of this PGApiTokenizeRequest.
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.

        :param merchant_id: The merchant_id of this PGApiTokenizeRequest.
        :type merchant_id: int
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def payload_apple_pay(self):
        """Gets the payload_apple_pay of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Apple Pay payload

        :return: The payload_apple_pay of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._payload_apple_pay

    @payload_apple_pay.setter
    def payload_apple_pay(self, payload_apple_pay):
        """Sets the payload_apple_pay of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Apple Pay payload

        :param payload_apple_pay: The payload_apple_pay of this PGApiTokenizeRequest.
        :type payload_apple_pay: str
        """

        self._payload_apple_pay = payload_apple_pay

    @property
    def payload_google_pay(self):
        """Gets the payload_google_pay of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Google Pay payload

        :return: The payload_google_pay of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._payload_google_pay

    @payload_google_pay.setter
    def payload_google_pay(self, payload_google_pay):
        """Sets the payload_google_pay of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Google Pay payload

        :param payload_google_pay: The payload_google_pay of this PGApiTokenizeRequest.
        :type payload_google_pay: str
        """

        self._payload_google_pay = payload_google_pay

    @property
    def profile_id(self):
        """Gets the profile_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.

        :return: The profile_id of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.

        :param profile_id: The profile_id of this PGApiTokenizeRequest.
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def report_data(self):
        """Gets the report_data of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.

        :return: The report_data of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._report_data

    @report_data.setter
    def report_data(self, report_data):
        """Sets the report_data of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.

        :param report_data: The report_data of this PGApiTokenizeRequest.
        :type report_data: str
        """

        self._report_data = report_data

    @property
    def retry_attempt(self):
        """Gets the retry_attempt of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.<br><strong>Conditional Requirement: </strong>This field is required when the retry_id is present in the request message.

        :return: The retry_attempt of this PGApiTokenizeRequest.
        :rtype: int
        """
        return self._retry_attempt

    @retry_attempt.setter
    def retry_attempt(self, retry_attempt):
        """Sets the retry_attempt of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.<br><strong>Conditional Requirement: </strong>This field is required when the retry_id is present in the request message.

        :param retry_attempt: The retry_attempt of this PGApiTokenizeRequest.
        :type retry_attempt: int
        """

        self._retry_attempt = retry_attempt

    @property
    def retry_id(self):
        """Gets the retry_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.

        :return: The retry_id of this PGApiTokenizeRequest.
        :rtype: int
        """
        return self._retry_id

    @retry_id.setter
    def retry_id(self, retry_id):
        """Sets the retry_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.

        :param retry_id: The retry_id of this PGApiTokenizeRequest.
        :type retry_id: int
        """

        self._retry_id = retry_id

    @property
    def session_id(self):
        """Gets the session_id of this PGApiTokenizeRequest.

        INTERNAL USE ONLY.

        :return: The session_id of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PGApiTokenizeRequest.

        INTERNAL USE ONLY.

        :param session_id: The session_id of this PGApiTokenizeRequest.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def single_use(self):
        """Gets the single_use of this PGApiTokenizeRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>In a tokenize request, setting the single_use field to \"true\" will cause a single-use token to be generated. This token will expire in 10 minutes or when first used.

        :return: The single_use of this PGApiTokenizeRequest.
        :rtype: bool
        """
        return self._single_use

    @single_use.setter
    def single_use(self, single_use):
        """Sets the single_use of this PGApiTokenizeRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>In a tokenize request, setting the single_use field to \"true\" will cause a single-use token to be generated. This token will expire in 10 minutes or when first used.

        :param single_use: The single_use of this PGApiTokenizeRequest.
        :type single_use: bool
        """

        self._single_use = single_use

    @property
    def tr_number(self):
        """Gets the tr_number of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 9 N<br><strong>Description: </strong>Bank transit/routing number. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The tr_number of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._tr_number

    @tr_number.setter
    def tr_number(self, tr_number):
        """Sets the tr_number of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 9 N<br><strong>Description: </strong>Bank transit/routing number. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param tr_number: The tr_number of this PGApiTokenizeRequest.
        :type tr_number: str
        """

        self._tr_number = tr_number

    @property
    def type_id(self):
        """Gets the type_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 1 AN<br><strong>Default: </strong>C<br><strong>Description: </strong>Bank Account Type. Applicable for ACH payments. Possible values are: <ul><li>C = Personal checking account</li><li>S = Personal savings account</li><li>K = Business checking account</li><li>V = Business savings account</li></ul>

        :return: The type_id of this PGApiTokenizeRequest.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Fixed length, 1 AN<br><strong>Default: </strong>C<br><strong>Description: </strong>Bank Account Type. Applicable for ACH payments. Possible values are: <ul><li>C = Personal checking account</li><li>S = Personal savings account</li><li>K = Business checking account</li><li>V = Business savings account</li></ul>

        :param type_id: The type_id of this PGApiTokenizeRequest.
        :type type_id: str
        """

        self._type_id = type_id

    @property
    def user_id(self):
        """Gets the user_id of this PGApiTokenizeRequest.

        INTERNAL USE ONLY.

        :return: The user_id of this PGApiTokenizeRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PGApiTokenizeRequest.

        INTERNAL USE ONLY.

        :param user_id: The user_id of this PGApiTokenizeRequest.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def vendor_id(self):
        """Gets the vendor_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this tokenize request applies.

        :return: The vendor_id of this PGApiTokenizeRequest.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this PGApiTokenizeRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this tokenize request applies.

        :param vendor_id: The vendor_id of this PGApiTokenizeRequest.
        :type vendor_id: int
        """

        self._vendor_id = vendor_id
