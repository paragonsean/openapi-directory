# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer import Customer
from openapi_server import util


class PGApiTransactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amt_convenience_fee: float=None, amt_fbo: float=None, amt_tax: float=None, amt_tran: float=None, amt_tran_fee: float=None, auth_code: str=None, avs_address: str=None, avs_zip: str=None, card_id: str=None, card_number: str=None, card_swipe: str=None, cardholder_name: str=None, cavv_3ds: str=None, client_ip: str=None, customer: Customer=None, customer_code: str=None, customer_email: str=None, customer_id: str=None, cvv2: str=None, dba_name: str=None, dba_suffix: str=None, dda_number: str=None, developer_id: str=None, duplicate_seconds: int=None, echo_fields: str=None, email_address: List[str]=None, email_receipt: bool=None, emv_tran_id: str=None, exp_date: str=None, fbo_id: int=None, line_items: str=None, loc_id: str=None, mc_ucaf_data: str=None, mc_ucaf_ind: str=None, merch_ref_num: str=None, merchant_id: int=None, moto_ecomm_ind: str=None, partial_auth: bool=None, payload_apple_pay: str=None, payload_google_pay: str=None, pg_id: str=None, profile_id: str=None, purchase_id: str=None, report_data: str=None, retry_attempt: int=None, retry_id: int=None, session_id: str=None, subscription_id: int=None, tokenize: bool=None, tr_number: str=None, tran_currency: int=None, type_id: str=None, user_id: int=None, vendor_id: int=None, xid_3ds: str=None):
        """PGApiTransactionRequest - a model defined in OpenAPI

        :param amt_convenience_fee: The amt_convenience_fee of this PGApiTransactionRequest.
        :param amt_fbo: The amt_fbo of this PGApiTransactionRequest.
        :param amt_tax: The amt_tax of this PGApiTransactionRequest.
        :param amt_tran: The amt_tran of this PGApiTransactionRequest.
        :param amt_tran_fee: The amt_tran_fee of this PGApiTransactionRequest.
        :param auth_code: The auth_code of this PGApiTransactionRequest.
        :param avs_address: The avs_address of this PGApiTransactionRequest.
        :param avs_zip: The avs_zip of this PGApiTransactionRequest.
        :param card_id: The card_id of this PGApiTransactionRequest.
        :param card_number: The card_number of this PGApiTransactionRequest.
        :param card_swipe: The card_swipe of this PGApiTransactionRequest.
        :param cardholder_name: The cardholder_name of this PGApiTransactionRequest.
        :param cavv_3ds: The cavv_3ds of this PGApiTransactionRequest.
        :param client_ip: The client_ip of this PGApiTransactionRequest.
        :param customer: The customer of this PGApiTransactionRequest.
        :param customer_code: The customer_code of this PGApiTransactionRequest.
        :param customer_email: The customer_email of this PGApiTransactionRequest.
        :param customer_id: The customer_id of this PGApiTransactionRequest.
        :param cvv2: The cvv2 of this PGApiTransactionRequest.
        :param dba_name: The dba_name of this PGApiTransactionRequest.
        :param dba_suffix: The dba_suffix of this PGApiTransactionRequest.
        :param dda_number: The dda_number of this PGApiTransactionRequest.
        :param developer_id: The developer_id of this PGApiTransactionRequest.
        :param duplicate_seconds: The duplicate_seconds of this PGApiTransactionRequest.
        :param echo_fields: The echo_fields of this PGApiTransactionRequest.
        :param email_address: The email_address of this PGApiTransactionRequest.
        :param email_receipt: The email_receipt of this PGApiTransactionRequest.
        :param emv_tran_id: The emv_tran_id of this PGApiTransactionRequest.
        :param exp_date: The exp_date of this PGApiTransactionRequest.
        :param fbo_id: The fbo_id of this PGApiTransactionRequest.
        :param line_items: The line_items of this PGApiTransactionRequest.
        :param loc_id: The loc_id of this PGApiTransactionRequest.
        :param mc_ucaf_data: The mc_ucaf_data of this PGApiTransactionRequest.
        :param mc_ucaf_ind: The mc_ucaf_ind of this PGApiTransactionRequest.
        :param merch_ref_num: The merch_ref_num of this PGApiTransactionRequest.
        :param merchant_id: The merchant_id of this PGApiTransactionRequest.
        :param moto_ecomm_ind: The moto_ecomm_ind of this PGApiTransactionRequest.
        :param partial_auth: The partial_auth of this PGApiTransactionRequest.
        :param payload_apple_pay: The payload_apple_pay of this PGApiTransactionRequest.
        :param payload_google_pay: The payload_google_pay of this PGApiTransactionRequest.
        :param pg_id: The pg_id of this PGApiTransactionRequest.
        :param profile_id: The profile_id of this PGApiTransactionRequest.
        :param purchase_id: The purchase_id of this PGApiTransactionRequest.
        :param report_data: The report_data of this PGApiTransactionRequest.
        :param retry_attempt: The retry_attempt of this PGApiTransactionRequest.
        :param retry_id: The retry_id of this PGApiTransactionRequest.
        :param session_id: The session_id of this PGApiTransactionRequest.
        :param subscription_id: The subscription_id of this PGApiTransactionRequest.
        :param tokenize: The tokenize of this PGApiTransactionRequest.
        :param tr_number: The tr_number of this PGApiTransactionRequest.
        :param tran_currency: The tran_currency of this PGApiTransactionRequest.
        :param type_id: The type_id of this PGApiTransactionRequest.
        :param user_id: The user_id of this PGApiTransactionRequest.
        :param vendor_id: The vendor_id of this PGApiTransactionRequest.
        :param xid_3ds: The xid_3ds of this PGApiTransactionRequest.
        """
        self.openapi_types = {
            'amt_convenience_fee': float,
            'amt_fbo': float,
            'amt_tax': float,
            'amt_tran': float,
            'amt_tran_fee': float,
            'auth_code': str,
            'avs_address': str,
            'avs_zip': str,
            'card_id': str,
            'card_number': str,
            'card_swipe': str,
            'cardholder_name': str,
            'cavv_3ds': str,
            'client_ip': str,
            'customer': Customer,
            'customer_code': str,
            'customer_email': str,
            'customer_id': str,
            'cvv2': str,
            'dba_name': str,
            'dba_suffix': str,
            'dda_number': str,
            'developer_id': str,
            'duplicate_seconds': int,
            'echo_fields': str,
            'email_address': List[str],
            'email_receipt': bool,
            'emv_tran_id': str,
            'exp_date': str,
            'fbo_id': int,
            'line_items': str,
            'loc_id': str,
            'mc_ucaf_data': str,
            'mc_ucaf_ind': str,
            'merch_ref_num': str,
            'merchant_id': int,
            'moto_ecomm_ind': str,
            'partial_auth': bool,
            'payload_apple_pay': str,
            'payload_google_pay': str,
            'pg_id': str,
            'profile_id': str,
            'purchase_id': str,
            'report_data': str,
            'retry_attempt': int,
            'retry_id': int,
            'session_id': str,
            'subscription_id': int,
            'tokenize': bool,
            'tr_number': str,
            'tran_currency': int,
            'type_id': str,
            'user_id': int,
            'vendor_id': int,
            'xid_3ds': str
        }

        self.attribute_map = {
            'amt_convenience_fee': 'amt_convenience_fee',
            'amt_fbo': 'amt_fbo',
            'amt_tax': 'amt_tax',
            'amt_tran': 'amt_tran',
            'amt_tran_fee': 'amt_tran_fee',
            'auth_code': 'auth_code',
            'avs_address': 'avs_address',
            'avs_zip': 'avs_zip',
            'card_id': 'card_id',
            'card_number': 'card_number',
            'card_swipe': 'card_swipe',
            'cardholder_name': 'cardholder_name',
            'cavv_3ds': 'cavv_3ds',
            'client_ip': 'client_ip',
            'customer': 'customer',
            'customer_code': 'customer_code',
            'customer_email': 'customer_email',
            'customer_id': 'customer_id',
            'cvv2': 'cvv2',
            'dba_name': 'dba_name',
            'dba_suffix': 'dba_suffix',
            'dda_number': 'dda_number',
            'developer_id': 'developer_id',
            'duplicate_seconds': 'duplicate_seconds',
            'echo_fields': 'echo_fields',
            'email_address': 'email_address',
            'email_receipt': 'email_receipt',
            'emv_tran_id': 'emv_tran_id',
            'exp_date': 'exp_date',
            'fbo_id': 'fbo_id',
            'line_items': 'line_items',
            'loc_id': 'loc_id',
            'mc_ucaf_data': 'mc_ucaf_data',
            'mc_ucaf_ind': 'mc_ucaf_ind',
            'merch_ref_num': 'merch_ref_num',
            'merchant_id': 'merchant_id',
            'moto_ecomm_ind': 'moto_ecomm_ind',
            'partial_auth': 'partial_auth',
            'payload_apple_pay': 'payload_apple_pay',
            'payload_google_pay': 'payload_google_pay',
            'pg_id': 'pg_id',
            'profile_id': 'profile_id',
            'purchase_id': 'purchase_id',
            'report_data': 'report_data',
            'retry_attempt': 'retry_attempt',
            'retry_id': 'retry_id',
            'session_id': 'session_id',
            'subscription_id': 'subscription_id',
            'tokenize': 'tokenize',
            'tr_number': 'tr_number',
            'tran_currency': 'tran_currency',
            'type_id': 'type_id',
            'user_id': 'user_id',
            'vendor_id': 'vendor_id',
            'xid_3ds': 'xid_3ds'
        }

        self._amt_convenience_fee = amt_convenience_fee
        self._amt_fbo = amt_fbo
        self._amt_tax = amt_tax
        self._amt_tran = amt_tran
        self._amt_tran_fee = amt_tran_fee
        self._auth_code = auth_code
        self._avs_address = avs_address
        self._avs_zip = avs_zip
        self._card_id = card_id
        self._card_number = card_number
        self._card_swipe = card_swipe
        self._cardholder_name = cardholder_name
        self._cavv_3ds = cavv_3ds
        self._client_ip = client_ip
        self._customer = customer
        self._customer_code = customer_code
        self._customer_email = customer_email
        self._customer_id = customer_id
        self._cvv2 = cvv2
        self._dba_name = dba_name
        self._dba_suffix = dba_suffix
        self._dda_number = dda_number
        self._developer_id = developer_id
        self._duplicate_seconds = duplicate_seconds
        self._echo_fields = echo_fields
        self._email_address = email_address
        self._email_receipt = email_receipt
        self._emv_tran_id = emv_tran_id
        self._exp_date = exp_date
        self._fbo_id = fbo_id
        self._line_items = line_items
        self._loc_id = loc_id
        self._mc_ucaf_data = mc_ucaf_data
        self._mc_ucaf_ind = mc_ucaf_ind
        self._merch_ref_num = merch_ref_num
        self._merchant_id = merchant_id
        self._moto_ecomm_ind = moto_ecomm_ind
        self._partial_auth = partial_auth
        self._payload_apple_pay = payload_apple_pay
        self._payload_google_pay = payload_google_pay
        self._pg_id = pg_id
        self._profile_id = profile_id
        self._purchase_id = purchase_id
        self._report_data = report_data
        self._retry_attempt = retry_attempt
        self._retry_id = retry_id
        self._session_id = session_id
        self._subscription_id = subscription_id
        self._tokenize = tokenize
        self._tr_number = tr_number
        self._tran_currency = tran_currency
        self._type_id = type_id
        self._user_id = user_id
        self._vendor_id = vendor_id
        self._xid_3ds = xid_3ds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PGApiTransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PGApiTransactionRequest of this PGApiTransactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amt_convenience_fee(self):
        """Gets the amt_convenience_fee of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of convenience fee. A convenience fee is a fee charged to your customer for the \"convenience\" of being able to pay using an alternative payment channel outside your merchant's customary payment channel. Must be a flat/fixed fee amount per transaction. This field tracks the convenience fee amount for display purposes, but the amount of the fee must be included in amt_tran.

        :return: The amt_convenience_fee of this PGApiTransactionRequest.
        :rtype: float
        """
        return self._amt_convenience_fee

    @amt_convenience_fee.setter
    def amt_convenience_fee(self, amt_convenience_fee):
        """Sets the amt_convenience_fee of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of convenience fee. A convenience fee is a fee charged to your customer for the \"convenience\" of being able to pay using an alternative payment channel outside your merchant's customary payment channel. Must be a flat/fixed fee amount per transaction. This field tracks the convenience fee amount for display purposes, but the amount of the fee must be included in amt_tran.

        :param amt_convenience_fee: The amt_convenience_fee of this PGApiTransactionRequest.
        :type amt_convenience_fee: float
        """

        self._amt_convenience_fee = amt_convenience_fee

    @property
    def amt_fbo(self):
        """Gets the amt_fbo of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction to be transferred to the \"for benefit of\" (FBO) account.

        :return: The amt_fbo of this PGApiTransactionRequest.
        :rtype: float
        """
        return self._amt_fbo

    @amt_fbo.setter
    def amt_fbo(self, amt_fbo):
        """Sets the amt_fbo of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction to be transferred to the \"for benefit of\" (FBO) account.

        :param amt_fbo: The amt_fbo of this PGApiTransactionRequest.
        :type amt_fbo: float
        """

        self._amt_fbo = amt_fbo

    @property
    def amt_tax(self):
        """Gets the amt_tax of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Amount of sales tax included in the total transaction amount. This field tracks the tax amount for display and interchange purposes, but the amount of the tax must be included in amt_tran.<br><strong>Conditional Requirement: </strong>Required for Level 2 and Level 3 interchange qualification.

        :return: The amt_tax of this PGApiTransactionRequest.
        :rtype: float
        """
        return self._amt_tax

    @amt_tax.setter
    def amt_tax(self, amt_tax):
        """Sets the amt_tax of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Amount of sales tax included in the total transaction amount. This field tracks the tax amount for display and interchange purposes, but the amount of the tax must be included in amt_tran.<br><strong>Conditional Requirement: </strong>Required for Level 2 and Level 3 interchange qualification.

        :param amt_tax: The amt_tax of this PGApiTransactionRequest.
        :type amt_tax: float
        """

        self._amt_tax = amt_tax

    @property
    def amt_tran(self):
        """Gets the amt_tran of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction including sales tax (amt_tax), convenience fee (amt_convenience_fee), and/or surcharge (amt_tran_fee) if applicable.

        :return: The amt_tran of this PGApiTransactionRequest.
        :rtype: float
        """
        return self._amt_tran

    @amt_tran.setter
    def amt_tran(self, amt_tran):
        """Sets the amt_tran of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction including sales tax (amt_tax), convenience fee (amt_convenience_fee), and/or surcharge (amt_tran_fee) if applicable.

        :param amt_tran: The amt_tran of this PGApiTransactionRequest.
        :type amt_tran: float
        """

        self._amt_tran = amt_tran

    @property
    def amt_tran_fee(self):
        """Gets the amt_tran_fee of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of transaction surcharge fee. A surcharge is a fee added to the cost of a purchase for the \"privilege\" of using a credit card instead of another form of payment, and can be a percentage of the transaction amount or fixed amount of up to 4% of amt_tran. This field tracks the surcharge amount of the transaction for display purposes, but the amount of the fee must be included in amt_tran.

        :return: The amt_tran_fee of this PGApiTransactionRequest.
        :rtype: float
        """
        return self._amt_tran_fee

    @amt_tran_fee.setter
    def amt_tran_fee(self, amt_tran_fee):
        """Sets the amt_tran_fee of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of transaction surcharge fee. A surcharge is a fee added to the cost of a purchase for the \"privilege\" of using a credit card instead of another form of payment, and can be a percentage of the transaction amount or fixed amount of up to 4% of amt_tran. This field tracks the surcharge amount of the transaction for display purposes, but the amount of the fee must be included in amt_tran.

        :param amt_tran_fee: The amt_tran_fee of this PGApiTransactionRequest.
        :type amt_tran_fee: float
        """

        self._amt_tran_fee = amt_tran_fee

    @property
    def auth_code(self):
        """Gets the auth_code of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 6 AN<br><strong>Description: </strong>This field should contain the 6-character authorization code that was received during a voice or Automated Response Unit(ARU) authorization for force request type. This is field is applicable to only force request type.<br><strong>Conditional Requirement: </strong>This field is required in force request type.

        :return: The auth_code of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 6 AN<br><strong>Description: </strong>This field should contain the 6-character authorization code that was received during a voice or Automated Response Unit(ARU) authorization for force request type. This is field is applicable to only force request type.<br><strong>Conditional Requirement: </strong>This field is required in force request type.

        :param auth_code: The auth_code of this PGApiTransactionRequest.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def avs_address(self):
        """Gets the avs_address of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 20 AN<br><strong>Description: </strong>Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.

        :return: The avs_address of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._avs_address

    @avs_address.setter
    def avs_address(self, avs_address):
        """Sets the avs_address of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 20 AN<br><strong>Description: </strong>Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.

        :param avs_address: The avs_address of this PGApiTransactionRequest.
        :type avs_address: str
        """

        self._avs_address = avs_address

    @property
    def avs_zip(self):
        """Gets the avs_zip of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 9 AN<br><strong>Description: </strong>Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.<br><strong>Conditional Requirement: </strong>This field is required if avs_address is present.

        :return: The avs_zip of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._avs_zip

    @avs_zip.setter
    def avs_zip(self, avs_zip):
        """Sets the avs_zip of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 9 AN<br><strong>Description: </strong>Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.<br><strong>Conditional Requirement: </strong>This field is required if avs_address is present.

        :param avs_zip: The avs_zip of this PGApiTransactionRequest.
        :type avs_zip: str
        """

        self._avs_zip = avs_zip

    @property
    def card_id(self):
        """Gets the card_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>Card ID received from a tokenization request. The card_id may be used in place of a card number or card swipe.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The card_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>Card ID received from a tokenization request. The card_id may be used in place of a card number or card swipe.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param card_id: The card_id of this PGApiTransactionRequest.
        :type card_id: str
        """

        self._card_id = card_id

    @property
    def card_number(self):
        """Gets the card_number of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The card_number of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param card_number: The card_number of this PGApiTransactionRequest.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def card_swipe(self):
        """Gets the card_swipe of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 79 AN<br><strong>Description: </strong>Contains either track 1 or track 2 magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The card_swipe of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._card_swipe

    @card_swipe.setter
    def card_swipe(self, card_swipe):
        """Sets the card_swipe of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 79 AN<br><strong>Description: </strong>Contains either track 1 or track 2 magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param card_swipe: The card_swipe of this PGApiTransactionRequest.
        :type card_swipe: str
        """

        self._card_swipe = card_swipe

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.

        :return: The cardholder_name of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.

        :param cardholder_name: The cardholder_name of this PGApiTransactionRequest.
        :type cardholder_name: str
        """

        self._cardholder_name = cardholder_name

    @property
    def cavv_3ds(self):
        """Gets the cavv_3ds of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base 64 encoded CAVV returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for Visa 3D Secure transactions.

        :return: The cavv_3ds of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._cavv_3ds

    @cavv_3ds.setter
    def cavv_3ds(self, cavv_3ds):
        """Sets the cavv_3ds of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base 64 encoded CAVV returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for Visa 3D Secure transactions.

        :param cavv_3ds: The cavv_3ds of this PGApiTransactionRequest.
        :type cavv_3ds: str
        """

        self._cavv_3ds = cavv_3ds

    @property
    def client_ip(self):
        """Gets the client_ip of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length AN<br><strong>Description: </strong>Client IP address.

        :return: The client_ip of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length AN<br><strong>Description: </strong>Client IP address.

        :param client_ip: The client_ip of this PGApiTransactionRequest.
        :type client_ip: str
        """

        self._client_ip = client_ip

    @property
    def customer(self):
        """Gets the customer of this PGApiTransactionRequest.


        :return: The customer of this PGApiTransactionRequest.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this PGApiTransactionRequest.


        :param customer: The customer of this PGApiTransactionRequest.
        :type customer: Customer
        """

        self._customer = customer

    @property
    def customer_code(self):
        """Gets the customer_code of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 17 AN<br><strong>Description: </strong>Reference code supplied by the cardholder to the merchant.

        :return: The customer_code of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._customer_code

    @customer_code.setter
    def customer_code(self, customer_code):
        """Sets the customer_code of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 17 AN<br><strong>Description: </strong>Reference code supplied by the cardholder to the merchant.

        :param customer_code: The customer_code of this PGApiTransactionRequest.
        :type customer_code: str
        """

        self._customer_code = customer_code

    @property
    def customer_email(self):
        """Gets the customer_email of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong><strong>[Deprecated use email_address]</strong> Comma-separated list of e-mail addresses to which a receipt should be sent.

        :return: The customer_email of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong><strong>[Deprecated use email_address]</strong> Comma-separated list of e-mail addresses to which a receipt should be sent.

        :param customer_email: The customer_email of this PGApiTransactionRequest.
        :type customer_email: str
        """

        self._customer_email = customer_email

    @property
    def customer_id(self):
        """Gets the customer_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer ID value established by the merchant. The customer_id may be used in place of a card number in requests requiring cardholder account data. When used with a card_id or card_number or card_swipe, the request will be tied to the customer_id in Qualpay reporting. <br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The customer_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer ID value established by the merchant. The customer_id may be used in place of a card number in requests requiring cardholder account data. When used with a card_id or card_number or card_swipe, the request will be tied to the customer_id in Qualpay reporting. <br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param customer_id: The customer_id of this PGApiTransactionRequest.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def cvv2(self):
        """Gets the cvv2 of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>CVV2 or CID value from the signature panel on the back of the cardholder's card. If present during a request that requires authorization, the value will be sent to the issuer for validation.

        :return: The cvv2 of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._cvv2

    @cvv2.setter
    def cvv2(self, cvv2):
        """Sets the cvv2 of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>CVV2 or CID value from the signature panel on the back of the cardholder's card. If present during a request that requires authorization, the value will be sent to the issuer for validation.

        :param cvv2: The cvv2 of this PGApiTransactionRequest.
        :type cvv2: str
        """

        self._cvv2 = cvv2

    @property
    def dba_name(self):
        """Gets the dba_name of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 21 AN<br><strong>Description: </strong>When the merchant has been authorized to send dynamic DBA information, this field will contain the DBA name used by Qulapay in the authorization and clearing messages.<br>Note: the payment gateway will automatically add a prefix plus an asterisk (*) to the dba_name value. For example, if the prefix is ABC and the dba_name value is SHOE CO, the DBA name will show as \"ABC*SHOE CO\" on the cardholder's credit card statement.

        :return: The dba_name of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._dba_name

    @dba_name.setter
    def dba_name(self, dba_name):
        """Sets the dba_name of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 21 AN<br><strong>Description: </strong>When the merchant has been authorized to send dynamic DBA information, this field will contain the DBA name used by Qulapay in the authorization and clearing messages.<br>Note: the payment gateway will automatically add a prefix plus an asterisk (*) to the dba_name value. For example, if the prefix is ABC and the dba_name value is SHOE CO, the DBA name will show as \"ABC*SHOE CO\" on the cardholder's credit card statement.

        :param dba_name: The dba_name of this PGApiTransactionRequest.
        :type dba_name: str
        """

        self._dba_name = dba_name

    @property
    def dba_suffix(self):
        """Gets the dba_suffix of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 9 AN<br><strong>Description: </strong>For use by merchants using negative option marketing.  This field must be used in the first transaction at the conclusion of the free or reduced trial. This suffix will be appended to the end of your DBA and the result will appear on the cardholder statement. (If your DBA and suffix contain more that 25 characters, your DBA will be truncated.) Possible values are: <ul><li>END DSCNT</li><li>END OFFER</li><li>END PROMO</li><li>END TRIAL</li></ul>

        :return: The dba_suffix of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._dba_suffix

    @dba_suffix.setter
    def dba_suffix(self, dba_suffix):
        """Sets the dba_suffix of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 9 AN<br><strong>Description: </strong>For use by merchants using negative option marketing.  This field must be used in the first transaction at the conclusion of the free or reduced trial. This suffix will be appended to the end of your DBA and the result will appear on the cardholder statement. (If your DBA and suffix contain more that 25 characters, your DBA will be truncated.) Possible values are: <ul><li>END DSCNT</li><li>END OFFER</li><li>END PROMO</li><li>END TRIAL</li></ul>

        :param dba_suffix: The dba_suffix of this PGApiTransactionRequest.
        :type dba_suffix: str
        """

        self._dba_suffix = dba_suffix

    @property
    def dda_number(self):
        """Gets the dda_number of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 17 N<br><strong>Description: </strong>Owner's account number at the bank. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The dda_number of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._dda_number

    @dda_number.setter
    def dda_number(self, dda_number):
        """Sets the dda_number of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 17 N<br><strong>Description: </strong>Owner's account number at the bank. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param dda_number: The dda_number of this PGApiTransactionRequest.
        :type dda_number: str
        """

        self._dda_number = dda_number

    @property
    def developer_id(self):
        """Gets the developer_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 

        :return: The developer_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id):
        """Sets the developer_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 

        :param developer_id: The developer_id of this PGApiTransactionRequest.
        :type developer_id: str
        """

        self._developer_id = developer_id

    @property
    def duplicate_seconds(self):
        """Gets the duplicate_seconds of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 5 N<br><strong>Description: </strong>Duplicate transaction window in seconds. Qualpay will reject any transactions after a successful transaction within the duplicate_seconds window with a duplicate Account Number and optionally Purchase ID or, and, Merchant Reference Number. This value overrides any value set for a merchant on Qualpay Manager.

        :return: The duplicate_seconds of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._duplicate_seconds

    @duplicate_seconds.setter
    def duplicate_seconds(self, duplicate_seconds):
        """Sets the duplicate_seconds of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 5 N<br><strong>Description: </strong>Duplicate transaction window in seconds. Qualpay will reject any transactions after a successful transaction within the duplicate_seconds window with a duplicate Account Number and optionally Purchase ID or, and, Merchant Reference Number. This value overrides any value set for a merchant on Qualpay Manager.

        :param duplicate_seconds: The duplicate_seconds of this PGApiTransactionRequest.
        :type duplicate_seconds: int
        """

        self._duplicate_seconds = duplicate_seconds

    @property
    def echo_fields(self):
        """Gets the echo_fields of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.

        :return: The echo_fields of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._echo_fields

    @echo_fields.setter
    def echo_fields(self, echo_fields):
        """Sets the echo_fields of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.

        :param echo_fields: The echo_fields of this PGApiTransactionRequest.
        :type echo_fields: str
        """

        self._echo_fields = echo_fields

    @property
    def email_address(self):
        """Gets the email_address of this PGApiTransactionRequest.

         AN<br><strong>Description: </strong>An array of email addresses to which the transaction receipt should be sent to. 

        :return: The email_address of this PGApiTransactionRequest.
        :rtype: List[str]
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this PGApiTransactionRequest.

         AN<br><strong>Description: </strong>An array of email addresses to which the transaction receipt should be sent to. 

        :param email_address: The email_address of this PGApiTransactionRequest.
        :type email_address: List[str]
        """

        self._email_address = email_address

    @property
    def email_receipt(self):
        """Gets the email_receipt of this PGApiTransactionRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>When this field is provided and set to true, a customer_email must also be provided. When these two fields are provided, a transaction receipt will be sent via e-mail to the address(es) provided in the customer_email field.

        :return: The email_receipt of this PGApiTransactionRequest.
        :rtype: bool
        """
        return self._email_receipt

    @email_receipt.setter
    def email_receipt(self, email_receipt):
        """Sets the email_receipt of this PGApiTransactionRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>When this field is provided and set to true, a customer_email must also be provided. When these two fields are provided, a transaction receipt will be sent via e-mail to the address(es) provided in the customer_email field.

        :param email_receipt: The email_receipt of this PGApiTransactionRequest.
        :type email_receipt: bool
        """

        self._email_receipt = email_receipt

    @property
    def emv_tran_id(self):
        """Gets the emv_tran_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 36 AN<br><strong>Description: </strong>Base64 encoded MasterCard UCAF Transaction ID returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.

        :return: The emv_tran_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._emv_tran_id

    @emv_tran_id.setter
    def emv_tran_id(self, emv_tran_id):
        """Sets the emv_tran_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 36 AN<br><strong>Description: </strong>Base64 encoded MasterCard UCAF Transaction ID returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.

        :param emv_tran_id: The emv_tran_id of this PGApiTransactionRequest.
        :type emv_tran_id: str
        """

        self._emv_tran_id = emv_tran_id

    @property
    def exp_date(self):
        """Gets the exp_date of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 4 N, MMYY format<br><strong>Description: </strong>Expiration date of cardholder card number.  When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The exp_date of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._exp_date

    @exp_date.setter
    def exp_date(self, exp_date):
        """Sets the exp_date of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 4 N, MMYY format<br><strong>Description: </strong>Expiration date of cardholder card number.  When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param exp_date: The exp_date of this PGApiTransactionRequest.
        :type exp_date: str
        """

        self._exp_date = exp_date

    @property
    def fbo_id(self):
        """Gets the fbo_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 16 N<br><strong>Description: </strong>For Benefit Of (FBO) merchant account identifier on the Qualpay system. Contact Qualpay customer support to obtain your FBO information.

        :return: The fbo_id of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._fbo_id

    @fbo_id.setter
    def fbo_id(self, fbo_id):
        """Sets the fbo_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 16 N<br><strong>Description: </strong>For Benefit Of (FBO) merchant account identifier on the Qualpay system. Contact Qualpay customer support to obtain your FBO information.

        :param fbo_id: The fbo_id of this PGApiTransactionRequest.
        :type fbo_id: int
        """

        self._fbo_id = fbo_id

    @property
    def line_items(self):
        """Gets the line_items of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>JSON array of JSON objects. Each object represents a single line item detail element related to the transaction. Each detail element has required subfields: <br>quantity (7N)<br> description (26AN)<br> unit_of_measure (12AN)<br> product_code (12AN) - cannot be all zeroes<br> debit_credit_ind (1 AN)<br> unit_cost (12,2N)<br> Optional subfields: <br>type_of_supply (2AN) - visa only<br>commodity_code - visa only(12AN)<br><strong>Conditional Requirement: </strong> This field is required for Level 3 interchange qualification.

        :return: The line_items of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>JSON array of JSON objects. Each object represents a single line item detail element related to the transaction. Each detail element has required subfields: <br>quantity (7N)<br> description (26AN)<br> unit_of_measure (12AN)<br> product_code (12AN) - cannot be all zeroes<br> debit_credit_ind (1 AN)<br> unit_cost (12,2N)<br> Optional subfields: <br>type_of_supply (2AN) - visa only<br>commodity_code - visa only(12AN)<br><strong>Conditional Requirement: </strong> This field is required for Level 3 interchange qualification.

        :param line_items: The line_items of this PGApiTransactionRequest.
        :type line_items: str
        """

        self._line_items = line_items

    @property
    def loc_id(self):
        """Gets the loc_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.

        :return: The loc_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._loc_id

    @loc_id.setter
    def loc_id(self, loc_id):
        """Sets the loc_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.

        :param loc_id: The loc_id of this PGApiTransactionRequest.
        :type loc_id: str
        """

        self._loc_id = loc_id

    @property
    def mc_ucaf_data(self):
        """Gets the mc_ucaf_data of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Base64 encoded MasterCard UCAF Field Data returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.

        :return: The mc_ucaf_data of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._mc_ucaf_data

    @mc_ucaf_data.setter
    def mc_ucaf_data(self, mc_ucaf_data):
        """Sets the mc_ucaf_data of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Base64 encoded MasterCard UCAF Field Data returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.

        :param mc_ucaf_data: The mc_ucaf_data of this PGApiTransactionRequest.
        :type mc_ucaf_data: str
        """

        self._mc_ucaf_data = mc_ucaf_data

    @property
    def mc_ucaf_ind(self):
        """Gets the mc_ucaf_ind of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 1 AN<br><strong>Description: </strong>MasterCard UCAF Collection Indicator returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.

        :return: The mc_ucaf_ind of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._mc_ucaf_ind

    @mc_ucaf_ind.setter
    def mc_ucaf_ind(self, mc_ucaf_ind):
        """Sets the mc_ucaf_ind of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 1 AN<br><strong>Description: </strong>MasterCard UCAF Collection Indicator returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.

        :param mc_ucaf_ind: The mc_ucaf_ind of this PGApiTransactionRequest.
        :type mc_ucaf_ind: str
        """

        self._mc_ucaf_ind = mc_ucaf_ind

    @property
    def merch_ref_num(self):
        """Gets the merch_ref_num of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 128 AN<br><strong>Description: </strong>Merchant provided reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.

        :return: The merch_ref_num of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._merch_ref_num

    @merch_ref_num.setter
    def merch_ref_num(self, merch_ref_num):
        """Sets the merch_ref_num of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 128 AN<br><strong>Description: </strong>Merchant provided reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.

        :param merch_ref_num: The merch_ref_num of this PGApiTransactionRequest.
        :type merch_ref_num: str
        """

        self._merch_ref_num = merch_ref_num

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.

        :return: The merchant_id of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.

        :param merchant_id: The merchant_id of this PGApiTransactionRequest.
        :type merchant_id: int
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def moto_ecomm_ind(self):
        """Gets the moto_ecomm_ind of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 1 N<br><strong>Default: </strong>7<br><strong>Description: </strong>Indicates type of MOTO transaction: <ul><li>0 = Card Present (not MOTO/e-Commerce)</li><li> 1 = One Time MOTO transaction</li><li>2 = Recurring </li><li>3 = Installment </li><li>5 = Full 3D-Secure transaction</li><li>6 = Merchant 3D-Secure transaction</li><li>7 = e-Commerce Channel Encrypted (SSL)</li></ul>

        :return: The moto_ecomm_ind of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._moto_ecomm_ind

    @moto_ecomm_ind.setter
    def moto_ecomm_ind(self, moto_ecomm_ind):
        """Sets the moto_ecomm_ind of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 1 N<br><strong>Default: </strong>7<br><strong>Description: </strong>Indicates type of MOTO transaction: <ul><li>0 = Card Present (not MOTO/e-Commerce)</li><li> 1 = One Time MOTO transaction</li><li>2 = Recurring </li><li>3 = Installment </li><li>5 = Full 3D-Secure transaction</li><li>6 = Merchant 3D-Secure transaction</li><li>7 = e-Commerce Channel Encrypted (SSL)</li></ul>

        :param moto_ecomm_ind: The moto_ecomm_ind of this PGApiTransactionRequest.
        :type moto_ecomm_ind: str
        """

        self._moto_ecomm_ind = moto_ecomm_ind

    @property
    def partial_auth(self):
        """Gets the partial_auth of this PGApiTransactionRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>This field must be present and set to a value of 'true' in order for the request to allow for approval of a partial amount. This would be used to allow a merchant to accept a partial payment from pre-paid or debit cards. When only part of the requested amount is available, the response code will be 010 and the amt_tran field in the response will contain the amount that was approved. A second sale request  on a different card is needed  to capture the remaining amount. Applicable to auth and sale request types.

        :return: The partial_auth of this PGApiTransactionRequest.
        :rtype: bool
        """
        return self._partial_auth

    @partial_auth.setter
    def partial_auth(self, partial_auth):
        """Sets the partial_auth of this PGApiTransactionRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>This field must be present and set to a value of 'true' in order for the request to allow for approval of a partial amount. This would be used to allow a merchant to accept a partial payment from pre-paid or debit cards. When only part of the requested amount is available, the response code will be 010 and the amt_tran field in the response will contain the amount that was approved. A second sale request  on a different card is needed  to capture the remaining amount. Applicable to auth and sale request types.

        :param partial_auth: The partial_auth of this PGApiTransactionRequest.
        :type partial_auth: bool
        """

        self._partial_auth = partial_auth

    @property
    def payload_apple_pay(self):
        """Gets the payload_apple_pay of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Apple Pay payload

        :return: The payload_apple_pay of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._payload_apple_pay

    @payload_apple_pay.setter
    def payload_apple_pay(self, payload_apple_pay):
        """Sets the payload_apple_pay of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Apple Pay payload

        :param payload_apple_pay: The payload_apple_pay of this PGApiTransactionRequest.
        :type payload_apple_pay: str
        """

        self._payload_apple_pay = payload_apple_pay

    @property
    def payload_google_pay(self):
        """Gets the payload_google_pay of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Google Pay payload

        :return: The payload_google_pay of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._payload_google_pay

    @payload_google_pay.setter
    def payload_google_pay(self, payload_google_pay):
        """Sets the payload_google_pay of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Google Pay payload

        :param payload_google_pay: The payload_google_pay of this PGApiTransactionRequest.
        :type payload_google_pay: str
        """

        self._payload_google_pay = payload_google_pay

    @property
    def pg_id(self):
        """Gets the pg_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>PG ID of previously authorized transaction. This field is required when sending a capture, refund, or void request.

        :return: The pg_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._pg_id

    @pg_id.setter
    def pg_id(self, pg_id):
        """Sets the pg_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>PG ID of previously authorized transaction. This field is required when sending a capture, refund, or void request.

        :param pg_id: The pg_id of this PGApiTransactionRequest.
        :type pg_id: str
        """

        self._pg_id = pg_id

    @property
    def profile_id(self):
        """Gets the profile_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.

        :return: The profile_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.

        :param profile_id: The profile_id of this PGApiTransactionRequest.
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def purchase_id(self):
        """Gets the purchase_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 25 AN<br><strong>Description: </strong>Purchase Identifier (also referred to as the invoice number generated by the merchant).<br><strong>Conditional Requirement: </strong> This field is required for Level 2 and Level 3 interchange qualification.

        :return: The purchase_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._purchase_id

    @purchase_id.setter
    def purchase_id(self, purchase_id):
        """Sets the purchase_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 25 AN<br><strong>Description: </strong>Purchase Identifier (also referred to as the invoice number generated by the merchant).<br><strong>Conditional Requirement: </strong> This field is required for Level 2 and Level 3 interchange qualification.

        :param purchase_id: The purchase_id of this PGApiTransactionRequest.
        :type purchase_id: str
        """

        self._purchase_id = purchase_id

    @property
    def report_data(self):
        """Gets the report_data of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.

        :return: The report_data of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._report_data

    @report_data.setter
    def report_data(self, report_data):
        """Sets the report_data of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.

        :param report_data: The report_data of this PGApiTransactionRequest.
        :type report_data: str
        """

        self._report_data = report_data

    @property
    def retry_attempt(self):
        """Gets the retry_attempt of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.<br><strong>Conditional Requirement: </strong>This field is required when the retry_id is present in the request message.

        :return: The retry_attempt of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._retry_attempt

    @retry_attempt.setter
    def retry_attempt(self, retry_attempt):
        """Sets the retry_attempt of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.<br><strong>Conditional Requirement: </strong>This field is required when the retry_id is present in the request message.

        :param retry_attempt: The retry_attempt of this PGApiTransactionRequest.
        :type retry_attempt: int
        """

        self._retry_attempt = retry_attempt

    @property
    def retry_id(self):
        """Gets the retry_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.

        :return: The retry_id of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._retry_id

    @retry_id.setter
    def retry_id(self, retry_id):
        """Sets the retry_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.

        :param retry_id: The retry_id of this PGApiTransactionRequest.
        :type retry_id: int
        """

        self._retry_id = retry_id

    @property
    def session_id(self):
        """Gets the session_id of this PGApiTransactionRequest.

        INTERNAL USE ONLY.

        :return: The session_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PGApiTransactionRequest.

        INTERNAL USE ONLY.

        :param session_id: The session_id of this PGApiTransactionRequest.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 10 N<br><strong>Description: </strong>Identifies the recurring subscription that applies to this transaction.

        :return: The subscription_id of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 10 N<br><strong>Description: </strong>Identifies the recurring subscription that applies to this transaction.

        :param subscription_id: The subscription_id of this PGApiTransactionRequest.
        :type subscription_id: int
        """

        self._subscription_id = subscription_id

    @property
    def tokenize(self):
        """Gets the tokenize of this PGApiTransactionRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>In an authorization, credit, force, sale, or verify request the merchant can set tokenize to \"true\" and the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the response. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The tokenize of this PGApiTransactionRequest.
        :rtype: bool
        """
        return self._tokenize

    @tokenize.setter
    def tokenize(self, tokenize):
        """Sets the tokenize of this PGApiTransactionRequest.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>In an authorization, credit, force, sale, or verify request the merchant can set tokenize to \"true\" and the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the response. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param tokenize: The tokenize of this PGApiTransactionRequest.
        :type tokenize: bool
        """

        self._tokenize = tokenize

    @property
    def tr_number(self):
        """Gets the tr_number of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 9 N<br><strong>Description: </strong>Bank transit/routing number. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :return: The tr_number of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._tr_number

    @tr_number.setter
    def tr_number(self, tr_number):
        """Sets the tr_number of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 9 N<br><strong>Description: </strong>Bank transit/routing number. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>

        :param tr_number: The tr_number of this PGApiTransactionRequest.
        :type tr_number: str
        """

        self._tr_number = tr_number

    @property
    def tran_currency(self):
        """Gets the tran_currency of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 3 N<br><strong>Default: </strong>840<br><strong>Description: </strong>ISO numeric currency code for the transaction. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes.

        :return: The tran_currency of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._tran_currency

    @tran_currency.setter
    def tran_currency(self, tran_currency):
        """Sets the tran_currency of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 3 N<br><strong>Default: </strong>840<br><strong>Description: </strong>ISO numeric currency code for the transaction. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes.

        :param tran_currency: The tran_currency of this PGApiTransactionRequest.
        :type tran_currency: int
        """

        self._tran_currency = tran_currency

    @property
    def type_id(self):
        """Gets the type_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 1 AN<br><strong>Default: </strong>C<br><strong>Description: </strong>Bank Account Type. Applicable for ACH payments. Possible values are: <ul><li>C = Personal checking account</li><li>S = Personal savings account</li><li>K = Business checking account</li><li>V = Business savings account</li></ul>

        :return: The type_id of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 1 AN<br><strong>Default: </strong>C<br><strong>Description: </strong>Bank Account Type. Applicable for ACH payments. Possible values are: <ul><li>C = Personal checking account</li><li>S = Personal savings account</li><li>K = Business checking account</li><li>V = Business savings account</li></ul>

        :param type_id: The type_id of this PGApiTransactionRequest.
        :type type_id: str
        """

        self._type_id = type_id

    @property
    def user_id(self):
        """Gets the user_id of this PGApiTransactionRequest.

        INTERNAL USE ONLY.

        :return: The user_id of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PGApiTransactionRequest.

        INTERNAL USE ONLY.

        :param user_id: The user_id of this PGApiTransactionRequest.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def vendor_id(self):
        """Gets the vendor_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this capture request applies.

        :return: The vendor_id of this PGApiTransactionRequest.
        :rtype: int
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this PGApiTransactionRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this capture request applies.

        :param vendor_id: The vendor_id of this PGApiTransactionRequest.
        :type vendor_id: int
        """

        self._vendor_id = vendor_id

    @property
    def xid_3ds(self):
        """Gets the xid_3ds of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base64 encoded transaction ID (XID) returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for Visa 3-D Secure transactions.

        :return: The xid_3ds of this PGApiTransactionRequest.
        :rtype: str
        """
        return self._xid_3ds

    @xid_3ds.setter
    def xid_3ds(self, xid_3ds):
        """Sets the xid_3ds of this PGApiTransactionRequest.

        <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base64 encoded transaction ID (XID) returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for Visa 3-D Secure transactions.

        :param xid_3ds: The xid_3ds of this PGApiTransactionRequest.
        :type xid_3ds: str
        """

        self._xid_3ds = xid_3ds
