# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShippingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, primary: bool=None, shipping_addr1: str=None, shipping_addr2: str=None, shipping_city: str=None, shipping_country: str=None, shipping_country_code: str=None, shipping_firm_name: str=None, shipping_first_name: str=None, shipping_last_name: str=None, shipping_state: str=None, shipping_zip: str=None, shipping_zip4: str=None):
        """ShippingAddress - a model defined in OpenAPI

        :param primary: The primary of this ShippingAddress.
        :param shipping_addr1: The shipping_addr1 of this ShippingAddress.
        :param shipping_addr2: The shipping_addr2 of this ShippingAddress.
        :param shipping_city: The shipping_city of this ShippingAddress.
        :param shipping_country: The shipping_country of this ShippingAddress.
        :param shipping_country_code: The shipping_country_code of this ShippingAddress.
        :param shipping_firm_name: The shipping_firm_name of this ShippingAddress.
        :param shipping_first_name: The shipping_first_name of this ShippingAddress.
        :param shipping_last_name: The shipping_last_name of this ShippingAddress.
        :param shipping_state: The shipping_state of this ShippingAddress.
        :param shipping_zip: The shipping_zip of this ShippingAddress.
        :param shipping_zip4: The shipping_zip4 of this ShippingAddress.
        """
        self.openapi_types = {
            'primary': bool,
            'shipping_addr1': str,
            'shipping_addr2': str,
            'shipping_city': str,
            'shipping_country': str,
            'shipping_country_code': str,
            'shipping_firm_name': str,
            'shipping_first_name': str,
            'shipping_last_name': str,
            'shipping_state': str,
            'shipping_zip': str,
            'shipping_zip4': str
        }

        self.attribute_map = {
            'primary': 'primary',
            'shipping_addr1': 'shipping_addr1',
            'shipping_addr2': 'shipping_addr2',
            'shipping_city': 'shipping_city',
            'shipping_country': 'shipping_country',
            'shipping_country_code': 'shipping_country_code',
            'shipping_firm_name': 'shipping_firm_name',
            'shipping_first_name': 'shipping_first_name',
            'shipping_last_name': 'shipping_last_name',
            'shipping_state': 'shipping_state',
            'shipping_zip': 'shipping_zip',
            'shipping_zip4': 'shipping_zip4'
        }

        self._primary = primary
        self._shipping_addr1 = shipping_addr1
        self._shipping_addr2 = shipping_addr2
        self._shipping_city = shipping_city
        self._shipping_country = shipping_country
        self._shipping_country_code = shipping_country_code
        self._shipping_firm_name = shipping_firm_name
        self._shipping_first_name = shipping_first_name
        self._shipping_last_name = shipping_last_name
        self._shipping_state = shipping_state
        self._shipping_zip = shipping_zip
        self._shipping_zip4 = shipping_zip4

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingAddress of this ShippingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def primary(self):
        """Gets the primary of this ShippingAddress.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>Identifies the primary shipping address where there are multiple shipping addresses.

        :return: The primary of this ShippingAddress.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this ShippingAddress.

        <br><strong>Default: </strong>false<br><strong>Description: </strong>Identifies the primary shipping address where there are multiple shipping addresses.

        :param primary: The primary of this ShippingAddress.
        :type primary: bool
        """

        self._primary = primary

    @property
    def shipping_addr1(self):
        """Gets the shipping_addr1 of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer street and number, P.O. box, c/o.

        :return: The shipping_addr1 of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_addr1

    @shipping_addr1.setter
    def shipping_addr1(self, shipping_addr1):
        """Sets the shipping_addr1 of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer street and number, P.O. box, c/o.

        :param shipping_addr1: The shipping_addr1 of this ShippingAddress.
        :type shipping_addr1: str
        """
        if shipping_addr1 is None:
            raise ValueError("Invalid value for `shipping_addr1`, must not be `None`")

        self._shipping_addr1 = shipping_addr1

    @property
    def shipping_addr2(self):
        """Gets the shipping_addr2 of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer apartment, suite, unit, building, floor, etc.

        :return: The shipping_addr2 of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_addr2

    @shipping_addr2.setter
    def shipping_addr2(self, shipping_addr2):
        """Sets the shipping_addr2 of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer apartment, suite, unit, building, floor, etc.

        :param shipping_addr2: The shipping_addr2 of this ShippingAddress.
        :type shipping_addr2: str
        """

        self._shipping_addr2 = shipping_addr2

    @property
    def shipping_city(self):
        """Gets the shipping_city of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping city.

        :return: The shipping_city of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_city

    @shipping_city.setter
    def shipping_city(self, shipping_city):
        """Sets the shipping_city of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping city.

        :param shipping_city: The shipping_city of this ShippingAddress.
        :type shipping_city: str
        """
        if shipping_city is None:
            raise ValueError("Invalid value for `shipping_city`, must not be `None`")

        self._shipping_city = shipping_city

    @property
    def shipping_country(self):
        """Gets the shipping_country of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping country.

        :return: The shipping_country of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_country

    @shipping_country.setter
    def shipping_country(self, shipping_country):
        """Sets the shipping_country of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping country.

        :param shipping_country: The shipping_country of this ShippingAddress.
        :type shipping_country: str
        """

        self._shipping_country = shipping_country

    @property
    def shipping_country_code(self):
        """Gets the shipping_country_code of this ShippingAddress.

        <strong>Format: </strong>Fixed length, 3 N<br><strong>Description: </strong>ISO numeric country code for the shipping address. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of country codes. If the country code is provided, the shipping_country will be updated to match the country code. 

        :return: The shipping_country_code of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_country_code

    @shipping_country_code.setter
    def shipping_country_code(self, shipping_country_code):
        """Sets the shipping_country_code of this ShippingAddress.

        <strong>Format: </strong>Fixed length, 3 N<br><strong>Description: </strong>ISO numeric country code for the shipping address. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of country codes. If the country code is provided, the shipping_country will be updated to match the country code. 

        :param shipping_country_code: The shipping_country_code of this ShippingAddress.
        :type shipping_country_code: str
        """

        self._shipping_country_code = shipping_country_code

    @property
    def shipping_firm_name(self):
        """Gets the shipping_firm_name of this ShippingAddress.

        <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>Business name if applicable. 

        :return: The shipping_firm_name of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_firm_name

    @shipping_firm_name.setter
    def shipping_firm_name(self, shipping_firm_name):
        """Sets the shipping_firm_name of this ShippingAddress.

        <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>Business name if applicable. 

        :param shipping_firm_name: The shipping_firm_name of this ShippingAddress.
        :type shipping_firm_name: str
        """

        self._shipping_firm_name = shipping_firm_name

    @property
    def shipping_first_name(self):
        """Gets the shipping_first_name of this ShippingAddress.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping first name.

        :return: The shipping_first_name of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_first_name

    @shipping_first_name.setter
    def shipping_first_name(self, shipping_first_name):
        """Sets the shipping_first_name of this ShippingAddress.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping first name.

        :param shipping_first_name: The shipping_first_name of this ShippingAddress.
        :type shipping_first_name: str
        """
        if shipping_first_name is None:
            raise ValueError("Invalid value for `shipping_first_name`, must not be `None`")

        self._shipping_first_name = shipping_first_name

    @property
    def shipping_last_name(self):
        """Gets the shipping_last_name of this ShippingAddress.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping last name.

        :return: The shipping_last_name of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_last_name

    @shipping_last_name.setter
    def shipping_last_name(self, shipping_last_name):
        """Sets the shipping_last_name of this ShippingAddress.

        <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping last name.

        :param shipping_last_name: The shipping_last_name of this ShippingAddress.
        :type shipping_last_name: str
        """
        if shipping_last_name is None:
            raise ValueError("Invalid value for `shipping_last_name`, must not be `None`")

        self._shipping_last_name = shipping_last_name

    @property
    def shipping_state(self):
        """Gets the shipping_state of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping state (abbreviated).

        :return: The shipping_state of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_state

    @shipping_state.setter
    def shipping_state(self, shipping_state):
        """Sets the shipping_state of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping state (abbreviated).

        :param shipping_state: The shipping_state of this ShippingAddress.
        :type shipping_state: str
        """
        if shipping_state is None:
            raise ValueError("Invalid value for `shipping_state`, must not be `None`")

        self._shipping_state = shipping_state

    @property
    def shipping_zip(self):
        """Gets the shipping_zip of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping zip code.

        :return: The shipping_zip of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_zip

    @shipping_zip.setter
    def shipping_zip(self, shipping_zip):
        """Sets the shipping_zip of this ShippingAddress.

        <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping zip code.

        :param shipping_zip: The shipping_zip of this ShippingAddress.
        :type shipping_zip: str
        """
        if shipping_zip is None:
            raise ValueError("Invalid value for `shipping_zip`, must not be `None`")

        self._shipping_zip = shipping_zip

    @property
    def shipping_zip4(self):
        """Gets the shipping_zip4 of this ShippingAddress.

        <strong>Format: </strong>Fixed length, 4 N<br><strong>Description: </strong>Customer shipping zip+4 code if applicable.

        :return: The shipping_zip4 of this ShippingAddress.
        :rtype: str
        """
        return self._shipping_zip4

    @shipping_zip4.setter
    def shipping_zip4(self, shipping_zip4):
        """Sets the shipping_zip4 of this ShippingAddress.

        <strong>Format: </strong>Fixed length, 4 N<br><strong>Description: </strong>Customer shipping zip+4 code if applicable.

        :param shipping_zip4: The shipping_zip4 of this ShippingAddress.
        :type shipping_zip4: str
        """

        self._shipping_zip4 = shipping_zip4
