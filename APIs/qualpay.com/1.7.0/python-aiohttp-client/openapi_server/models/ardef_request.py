# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArdefRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_number: str=None, merchant_id: int=None):
        """ArdefRequest - a model defined in OpenAPI

        :param card_number: The card_number of this ArdefRequest.
        :param merchant_id: The merchant_id of this ArdefRequest.
        """
        self.openapi_types = {
            'card_number': str,
            'merchant_id': int
        }

        self.attribute_map = {
            'card_number': 'card_number',
            'merchant_id': 'merchant_id'
        }

        self._card_number = card_number
        self._merchant_id = merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArdefRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArdefRequest of this ArdefRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_number(self):
        """Gets the card_number of this ArdefRequest.

        <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.

        :return: The card_number of this ArdefRequest.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this ArdefRequest.

        <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.

        :param card_number: The card_number of this ArdefRequest.
        :type card_number: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")

        self._card_number = card_number

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ArdefRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.

        :return: The merchant_id of this ArdefRequest.
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ArdefRequest.

        <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.

        :param merchant_id: The merchant_id of this ArdefRequest.
        :type merchant_id: int
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id
