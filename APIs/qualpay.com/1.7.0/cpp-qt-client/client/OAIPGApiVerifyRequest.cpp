/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPGApiVerifyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPGApiVerifyRequest::OAIPGApiVerifyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPGApiVerifyRequest::OAIPGApiVerifyRequest() {
    this->initializeModel();
}

OAIPGApiVerifyRequest::~OAIPGApiVerifyRequest() {}

void OAIPGApiVerifyRequest::initializeModel() {

    m_avs_address_isSet = false;
    m_avs_address_isValid = false;

    m_avs_zip_isSet = false;
    m_avs_zip_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_card_swipe_isSet = false;
    m_card_swipe_isValid = false;

    m_cardholder_name_isSet = false;
    m_cardholder_name_isValid = false;

    m_client_ip_isSet = false;
    m_client_ip_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_code_isSet = false;
    m_customer_code_isValid = false;

    m_cvv2_isSet = false;
    m_cvv2_isValid = false;

    m_dda_number_isSet = false;
    m_dda_number_isValid = false;

    m_developer_id_isSet = false;
    m_developer_id_isValid = false;

    m_echo_fields_isSet = false;
    m_echo_fields_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_exp_date_isSet = false;
    m_exp_date_isValid = false;

    m_loc_id_isSet = false;
    m_loc_id_isValid = false;

    m_merch_ref_num_isSet = false;
    m_merch_ref_num_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_moto_ecomm_ind_isSet = false;
    m_moto_ecomm_ind_isValid = false;

    m_payload_apple_pay_isSet = false;
    m_payload_apple_pay_isValid = false;

    m_payload_google_pay_isSet = false;
    m_payload_google_pay_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_report_data_isSet = false;
    m_report_data_isValid = false;

    m_retry_attempt_isSet = false;
    m_retry_attempt_isValid = false;

    m_retry_id_isSet = false;
    m_retry_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_tokenize_isSet = false;
    m_tokenize_isValid = false;

    m_tr_number_isSet = false;
    m_tr_number_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIPGApiVerifyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPGApiVerifyRequest::fromJsonObject(QJsonObject json) {

    m_avs_address_isValid = ::OpenAPI::fromJsonValue(m_avs_address, json[QString("avs_address")]);
    m_avs_address_isSet = !json[QString("avs_address")].isNull() && m_avs_address_isValid;

    m_avs_zip_isValid = ::OpenAPI::fromJsonValue(m_avs_zip, json[QString("avs_zip")]);
    m_avs_zip_isSet = !json[QString("avs_zip")].isNull() && m_avs_zip_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("card_number")]);
    m_card_number_isSet = !json[QString("card_number")].isNull() && m_card_number_isValid;

    m_card_swipe_isValid = ::OpenAPI::fromJsonValue(m_card_swipe, json[QString("card_swipe")]);
    m_card_swipe_isSet = !json[QString("card_swipe")].isNull() && m_card_swipe_isValid;

    m_cardholder_name_isValid = ::OpenAPI::fromJsonValue(m_cardholder_name, json[QString("cardholder_name")]);
    m_cardholder_name_isSet = !json[QString("cardholder_name")].isNull() && m_cardholder_name_isValid;

    m_client_ip_isValid = ::OpenAPI::fromJsonValue(m_client_ip, json[QString("client_ip")]);
    m_client_ip_isSet = !json[QString("client_ip")].isNull() && m_client_ip_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_code_isValid = ::OpenAPI::fromJsonValue(m_customer_code, json[QString("customer_code")]);
    m_customer_code_isSet = !json[QString("customer_code")].isNull() && m_customer_code_isValid;

    m_cvv2_isValid = ::OpenAPI::fromJsonValue(m_cvv2, json[QString("cvv2")]);
    m_cvv2_isSet = !json[QString("cvv2")].isNull() && m_cvv2_isValid;

    m_dda_number_isValid = ::OpenAPI::fromJsonValue(m_dda_number, json[QString("dda_number")]);
    m_dda_number_isSet = !json[QString("dda_number")].isNull() && m_dda_number_isValid;

    m_developer_id_isValid = ::OpenAPI::fromJsonValue(m_developer_id, json[QString("developer_id")]);
    m_developer_id_isSet = !json[QString("developer_id")].isNull() && m_developer_id_isValid;

    m_echo_fields_isValid = ::OpenAPI::fromJsonValue(m_echo_fields, json[QString("echo_fields")]);
    m_echo_fields_isSet = !json[QString("echo_fields")].isNull() && m_echo_fields_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_exp_date_isValid = ::OpenAPI::fromJsonValue(m_exp_date, json[QString("exp_date")]);
    m_exp_date_isSet = !json[QString("exp_date")].isNull() && m_exp_date_isValid;

    m_loc_id_isValid = ::OpenAPI::fromJsonValue(m_loc_id, json[QString("loc_id")]);
    m_loc_id_isSet = !json[QString("loc_id")].isNull() && m_loc_id_isValid;

    m_merch_ref_num_isValid = ::OpenAPI::fromJsonValue(m_merch_ref_num, json[QString("merch_ref_num")]);
    m_merch_ref_num_isSet = !json[QString("merch_ref_num")].isNull() && m_merch_ref_num_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_moto_ecomm_ind_isValid = ::OpenAPI::fromJsonValue(m_moto_ecomm_ind, json[QString("moto_ecomm_ind")]);
    m_moto_ecomm_ind_isSet = !json[QString("moto_ecomm_ind")].isNull() && m_moto_ecomm_ind_isValid;

    m_payload_apple_pay_isValid = ::OpenAPI::fromJsonValue(m_payload_apple_pay, json[QString("payload_apple_pay")]);
    m_payload_apple_pay_isSet = !json[QString("payload_apple_pay")].isNull() && m_payload_apple_pay_isValid;

    m_payload_google_pay_isValid = ::OpenAPI::fromJsonValue(m_payload_google_pay, json[QString("payload_google_pay")]);
    m_payload_google_pay_isSet = !json[QString("payload_google_pay")].isNull() && m_payload_google_pay_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profile_id")]);
    m_profile_id_isSet = !json[QString("profile_id")].isNull() && m_profile_id_isValid;

    m_report_data_isValid = ::OpenAPI::fromJsonValue(m_report_data, json[QString("report_data")]);
    m_report_data_isSet = !json[QString("report_data")].isNull() && m_report_data_isValid;

    m_retry_attempt_isValid = ::OpenAPI::fromJsonValue(m_retry_attempt, json[QString("retry_attempt")]);
    m_retry_attempt_isSet = !json[QString("retry_attempt")].isNull() && m_retry_attempt_isValid;

    m_retry_id_isValid = ::OpenAPI::fromJsonValue(m_retry_id, json[QString("retry_id")]);
    m_retry_id_isSet = !json[QString("retry_id")].isNull() && m_retry_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_tokenize_isValid = ::OpenAPI::fromJsonValue(m_tokenize, json[QString("tokenize")]);
    m_tokenize_isSet = !json[QString("tokenize")].isNull() && m_tokenize_isValid;

    m_tr_number_isValid = ::OpenAPI::fromJsonValue(m_tr_number, json[QString("tr_number")]);
    m_tr_number_isSet = !json[QString("tr_number")].isNull() && m_tr_number_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIPGApiVerifyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPGApiVerifyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_avs_address_isSet) {
        obj.insert(QString("avs_address"), ::OpenAPI::toJsonValue(m_avs_address));
    }
    if (m_avs_zip_isSet) {
        obj.insert(QString("avs_zip"), ::OpenAPI::toJsonValue(m_avs_zip));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_card_number_isSet) {
        obj.insert(QString("card_number"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_card_swipe_isSet) {
        obj.insert(QString("card_swipe"), ::OpenAPI::toJsonValue(m_card_swipe));
    }
    if (m_cardholder_name_isSet) {
        obj.insert(QString("cardholder_name"), ::OpenAPI::toJsonValue(m_cardholder_name));
    }
    if (m_client_ip_isSet) {
        obj.insert(QString("client_ip"), ::OpenAPI::toJsonValue(m_client_ip));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_code_isSet) {
        obj.insert(QString("customer_code"), ::OpenAPI::toJsonValue(m_customer_code));
    }
    if (m_cvv2_isSet) {
        obj.insert(QString("cvv2"), ::OpenAPI::toJsonValue(m_cvv2));
    }
    if (m_dda_number_isSet) {
        obj.insert(QString("dda_number"), ::OpenAPI::toJsonValue(m_dda_number));
    }
    if (m_developer_id_isSet) {
        obj.insert(QString("developer_id"), ::OpenAPI::toJsonValue(m_developer_id));
    }
    if (m_echo_fields_isSet) {
        obj.insert(QString("echo_fields"), ::OpenAPI::toJsonValue(m_echo_fields));
    }
    if (m_email_address.size() > 0) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_exp_date_isSet) {
        obj.insert(QString("exp_date"), ::OpenAPI::toJsonValue(m_exp_date));
    }
    if (m_loc_id_isSet) {
        obj.insert(QString("loc_id"), ::OpenAPI::toJsonValue(m_loc_id));
    }
    if (m_merch_ref_num_isSet) {
        obj.insert(QString("merch_ref_num"), ::OpenAPI::toJsonValue(m_merch_ref_num));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_moto_ecomm_ind_isSet) {
        obj.insert(QString("moto_ecomm_ind"), ::OpenAPI::toJsonValue(m_moto_ecomm_ind));
    }
    if (m_payload_apple_pay_isSet) {
        obj.insert(QString("payload_apple_pay"), ::OpenAPI::toJsonValue(m_payload_apple_pay));
    }
    if (m_payload_google_pay_isSet) {
        obj.insert(QString("payload_google_pay"), ::OpenAPI::toJsonValue(m_payload_google_pay));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profile_id"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_report_data_isSet) {
        obj.insert(QString("report_data"), ::OpenAPI::toJsonValue(m_report_data));
    }
    if (m_retry_attempt_isSet) {
        obj.insert(QString("retry_attempt"), ::OpenAPI::toJsonValue(m_retry_attempt));
    }
    if (m_retry_id_isSet) {
        obj.insert(QString("retry_id"), ::OpenAPI::toJsonValue(m_retry_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_tokenize_isSet) {
        obj.insert(QString("tokenize"), ::OpenAPI::toJsonValue(m_tokenize));
    }
    if (m_tr_number_isSet) {
        obj.insert(QString("tr_number"), ::OpenAPI::toJsonValue(m_tr_number));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIPGApiVerifyRequest::getAvsAddress() const {
    return m_avs_address;
}
void OAIPGApiVerifyRequest::setAvsAddress(const QString &avs_address) {
    m_avs_address = avs_address;
    m_avs_address_isSet = true;
}

bool OAIPGApiVerifyRequest::is_avs_address_Set() const{
    return m_avs_address_isSet;
}

bool OAIPGApiVerifyRequest::is_avs_address_Valid() const{
    return m_avs_address_isValid;
}

QString OAIPGApiVerifyRequest::getAvsZip() const {
    return m_avs_zip;
}
void OAIPGApiVerifyRequest::setAvsZip(const QString &avs_zip) {
    m_avs_zip = avs_zip;
    m_avs_zip_isSet = true;
}

bool OAIPGApiVerifyRequest::is_avs_zip_Set() const{
    return m_avs_zip_isSet;
}

bool OAIPGApiVerifyRequest::is_avs_zip_Valid() const{
    return m_avs_zip_isValid;
}

QString OAIPGApiVerifyRequest::getCardId() const {
    return m_card_id;
}
void OAIPGApiVerifyRequest::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIPGApiVerifyRequest::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAIPGApiVerifyRequest::getCardNumber() const {
    return m_card_number;
}
void OAIPGApiVerifyRequest::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAIPGApiVerifyRequest::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAIPGApiVerifyRequest::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAIPGApiVerifyRequest::getCardSwipe() const {
    return m_card_swipe;
}
void OAIPGApiVerifyRequest::setCardSwipe(const QString &card_swipe) {
    m_card_swipe = card_swipe;
    m_card_swipe_isSet = true;
}

bool OAIPGApiVerifyRequest::is_card_swipe_Set() const{
    return m_card_swipe_isSet;
}

bool OAIPGApiVerifyRequest::is_card_swipe_Valid() const{
    return m_card_swipe_isValid;
}

QString OAIPGApiVerifyRequest::getCardholderName() const {
    return m_cardholder_name;
}
void OAIPGApiVerifyRequest::setCardholderName(const QString &cardholder_name) {
    m_cardholder_name = cardholder_name;
    m_cardholder_name_isSet = true;
}

bool OAIPGApiVerifyRequest::is_cardholder_name_Set() const{
    return m_cardholder_name_isSet;
}

bool OAIPGApiVerifyRequest::is_cardholder_name_Valid() const{
    return m_cardholder_name_isValid;
}

QString OAIPGApiVerifyRequest::getClientIp() const {
    return m_client_ip;
}
void OAIPGApiVerifyRequest::setClientIp(const QString &client_ip) {
    m_client_ip = client_ip;
    m_client_ip_isSet = true;
}

bool OAIPGApiVerifyRequest::is_client_ip_Set() const{
    return m_client_ip_isSet;
}

bool OAIPGApiVerifyRequest::is_client_ip_Valid() const{
    return m_client_ip_isValid;
}

OAICustomer OAIPGApiVerifyRequest::getCustomer() const {
    return m_customer;
}
void OAIPGApiVerifyRequest::setCustomer(const OAICustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIPGApiVerifyRequest::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIPGApiVerifyRequest::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIPGApiVerifyRequest::getCustomerCode() const {
    return m_customer_code;
}
void OAIPGApiVerifyRequest::setCustomerCode(const QString &customer_code) {
    m_customer_code = customer_code;
    m_customer_code_isSet = true;
}

bool OAIPGApiVerifyRequest::is_customer_code_Set() const{
    return m_customer_code_isSet;
}

bool OAIPGApiVerifyRequest::is_customer_code_Valid() const{
    return m_customer_code_isValid;
}

QString OAIPGApiVerifyRequest::getCvv2() const {
    return m_cvv2;
}
void OAIPGApiVerifyRequest::setCvv2(const QString &cvv2) {
    m_cvv2 = cvv2;
    m_cvv2_isSet = true;
}

bool OAIPGApiVerifyRequest::is_cvv2_Set() const{
    return m_cvv2_isSet;
}

bool OAIPGApiVerifyRequest::is_cvv2_Valid() const{
    return m_cvv2_isValid;
}

QString OAIPGApiVerifyRequest::getDdaNumber() const {
    return m_dda_number;
}
void OAIPGApiVerifyRequest::setDdaNumber(const QString &dda_number) {
    m_dda_number = dda_number;
    m_dda_number_isSet = true;
}

bool OAIPGApiVerifyRequest::is_dda_number_Set() const{
    return m_dda_number_isSet;
}

bool OAIPGApiVerifyRequest::is_dda_number_Valid() const{
    return m_dda_number_isValid;
}

QString OAIPGApiVerifyRequest::getDeveloperId() const {
    return m_developer_id;
}
void OAIPGApiVerifyRequest::setDeveloperId(const QString &developer_id) {
    m_developer_id = developer_id;
    m_developer_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_developer_id_Set() const{
    return m_developer_id_isSet;
}

bool OAIPGApiVerifyRequest::is_developer_id_Valid() const{
    return m_developer_id_isValid;
}

QString OAIPGApiVerifyRequest::getEchoFields() const {
    return m_echo_fields;
}
void OAIPGApiVerifyRequest::setEchoFields(const QString &echo_fields) {
    m_echo_fields = echo_fields;
    m_echo_fields_isSet = true;
}

bool OAIPGApiVerifyRequest::is_echo_fields_Set() const{
    return m_echo_fields_isSet;
}

bool OAIPGApiVerifyRequest::is_echo_fields_Valid() const{
    return m_echo_fields_isValid;
}

QList<QString> OAIPGApiVerifyRequest::getEmailAddress() const {
    return m_email_address;
}
void OAIPGApiVerifyRequest::setEmailAddress(const QList<QString> &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIPGApiVerifyRequest::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIPGApiVerifyRequest::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIPGApiVerifyRequest::getExpDate() const {
    return m_exp_date;
}
void OAIPGApiVerifyRequest::setExpDate(const QString &exp_date) {
    m_exp_date = exp_date;
    m_exp_date_isSet = true;
}

bool OAIPGApiVerifyRequest::is_exp_date_Set() const{
    return m_exp_date_isSet;
}

bool OAIPGApiVerifyRequest::is_exp_date_Valid() const{
    return m_exp_date_isValid;
}

QString OAIPGApiVerifyRequest::getLocId() const {
    return m_loc_id;
}
void OAIPGApiVerifyRequest::setLocId(const QString &loc_id) {
    m_loc_id = loc_id;
    m_loc_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_loc_id_Set() const{
    return m_loc_id_isSet;
}

bool OAIPGApiVerifyRequest::is_loc_id_Valid() const{
    return m_loc_id_isValid;
}

QString OAIPGApiVerifyRequest::getMerchRefNum() const {
    return m_merch_ref_num;
}
void OAIPGApiVerifyRequest::setMerchRefNum(const QString &merch_ref_num) {
    m_merch_ref_num = merch_ref_num;
    m_merch_ref_num_isSet = true;
}

bool OAIPGApiVerifyRequest::is_merch_ref_num_Set() const{
    return m_merch_ref_num_isSet;
}

bool OAIPGApiVerifyRequest::is_merch_ref_num_Valid() const{
    return m_merch_ref_num_isValid;
}

qint64 OAIPGApiVerifyRequest::getMerchantId() const {
    return m_merchant_id;
}
void OAIPGApiVerifyRequest::setMerchantId(const qint64 &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIPGApiVerifyRequest::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIPGApiVerifyRequest::getMotoEcommInd() const {
    return m_moto_ecomm_ind;
}
void OAIPGApiVerifyRequest::setMotoEcommInd(const QString &moto_ecomm_ind) {
    m_moto_ecomm_ind = moto_ecomm_ind;
    m_moto_ecomm_ind_isSet = true;
}

bool OAIPGApiVerifyRequest::is_moto_ecomm_ind_Set() const{
    return m_moto_ecomm_ind_isSet;
}

bool OAIPGApiVerifyRequest::is_moto_ecomm_ind_Valid() const{
    return m_moto_ecomm_ind_isValid;
}

QString OAIPGApiVerifyRequest::getPayloadApplePay() const {
    return m_payload_apple_pay;
}
void OAIPGApiVerifyRequest::setPayloadApplePay(const QString &payload_apple_pay) {
    m_payload_apple_pay = payload_apple_pay;
    m_payload_apple_pay_isSet = true;
}

bool OAIPGApiVerifyRequest::is_payload_apple_pay_Set() const{
    return m_payload_apple_pay_isSet;
}

bool OAIPGApiVerifyRequest::is_payload_apple_pay_Valid() const{
    return m_payload_apple_pay_isValid;
}

QString OAIPGApiVerifyRequest::getPayloadGooglePay() const {
    return m_payload_google_pay;
}
void OAIPGApiVerifyRequest::setPayloadGooglePay(const QString &payload_google_pay) {
    m_payload_google_pay = payload_google_pay;
    m_payload_google_pay_isSet = true;
}

bool OAIPGApiVerifyRequest::is_payload_google_pay_Set() const{
    return m_payload_google_pay_isSet;
}

bool OAIPGApiVerifyRequest::is_payload_google_pay_Valid() const{
    return m_payload_google_pay_isValid;
}

QString OAIPGApiVerifyRequest::getProfileId() const {
    return m_profile_id;
}
void OAIPGApiVerifyRequest::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIPGApiVerifyRequest::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAIPGApiVerifyRequest::getReportData() const {
    return m_report_data;
}
void OAIPGApiVerifyRequest::setReportData(const QString &report_data) {
    m_report_data = report_data;
    m_report_data_isSet = true;
}

bool OAIPGApiVerifyRequest::is_report_data_Set() const{
    return m_report_data_isSet;
}

bool OAIPGApiVerifyRequest::is_report_data_Valid() const{
    return m_report_data_isValid;
}

qint64 OAIPGApiVerifyRequest::getRetryAttempt() const {
    return m_retry_attempt;
}
void OAIPGApiVerifyRequest::setRetryAttempt(const qint64 &retry_attempt) {
    m_retry_attempt = retry_attempt;
    m_retry_attempt_isSet = true;
}

bool OAIPGApiVerifyRequest::is_retry_attempt_Set() const{
    return m_retry_attempt_isSet;
}

bool OAIPGApiVerifyRequest::is_retry_attempt_Valid() const{
    return m_retry_attempt_isValid;
}

qint64 OAIPGApiVerifyRequest::getRetryId() const {
    return m_retry_id;
}
void OAIPGApiVerifyRequest::setRetryId(const qint64 &retry_id) {
    m_retry_id = retry_id;
    m_retry_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_retry_id_Set() const{
    return m_retry_id_isSet;
}

bool OAIPGApiVerifyRequest::is_retry_id_Valid() const{
    return m_retry_id_isValid;
}

QString OAIPGApiVerifyRequest::getSessionId() const {
    return m_session_id;
}
void OAIPGApiVerifyRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPGApiVerifyRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIPGApiVerifyRequest::isTokenize() const {
    return m_tokenize;
}
void OAIPGApiVerifyRequest::setTokenize(const bool &tokenize) {
    m_tokenize = tokenize;
    m_tokenize_isSet = true;
}

bool OAIPGApiVerifyRequest::is_tokenize_Set() const{
    return m_tokenize_isSet;
}

bool OAIPGApiVerifyRequest::is_tokenize_Valid() const{
    return m_tokenize_isValid;
}

QString OAIPGApiVerifyRequest::getTrNumber() const {
    return m_tr_number;
}
void OAIPGApiVerifyRequest::setTrNumber(const QString &tr_number) {
    m_tr_number = tr_number;
    m_tr_number_isSet = true;
}

bool OAIPGApiVerifyRequest::is_tr_number_Set() const{
    return m_tr_number_isSet;
}

bool OAIPGApiVerifyRequest::is_tr_number_Valid() const{
    return m_tr_number_isValid;
}

QString OAIPGApiVerifyRequest::getTypeId() const {
    return m_type_id;
}
void OAIPGApiVerifyRequest::setTypeId(const QString &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIPGApiVerifyRequest::is_type_id_Valid() const{
    return m_type_id_isValid;
}

qint64 OAIPGApiVerifyRequest::getUserId() const {
    return m_user_id;
}
void OAIPGApiVerifyRequest::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPGApiVerifyRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPGApiVerifyRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIPGApiVerifyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avs_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_swipe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cardholder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvv2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dda_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echo_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merch_ref_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moto_ecomm_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_apple_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_google_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokenize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tr_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPGApiVerifyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_number_isValid && m_merchant_id_isValid && true;
}

} // namespace OpenAPI
