/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPGApiTransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPGApiTransactionRequest::OAIPGApiTransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPGApiTransactionRequest::OAIPGApiTransactionRequest() {
    this->initializeModel();
}

OAIPGApiTransactionRequest::~OAIPGApiTransactionRequest() {}

void OAIPGApiTransactionRequest::initializeModel() {

    m_amt_convenience_fee_isSet = false;
    m_amt_convenience_fee_isValid = false;

    m_amt_fbo_isSet = false;
    m_amt_fbo_isValid = false;

    m_amt_tax_isSet = false;
    m_amt_tax_isValid = false;

    m_amt_tran_isSet = false;
    m_amt_tran_isValid = false;

    m_amt_tran_fee_isSet = false;
    m_amt_tran_fee_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_avs_address_isSet = false;
    m_avs_address_isValid = false;

    m_avs_zip_isSet = false;
    m_avs_zip_isValid = false;

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_card_swipe_isSet = false;
    m_card_swipe_isValid = false;

    m_cardholder_name_isSet = false;
    m_cardholder_name_isValid = false;

    m_cavv_3ds_isSet = false;
    m_cavv_3ds_isValid = false;

    m_client_ip_isSet = false;
    m_client_ip_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_customer_code_isSet = false;
    m_customer_code_isValid = false;

    m_customer_email_isSet = false;
    m_customer_email_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_cvv2_isSet = false;
    m_cvv2_isValid = false;

    m_dba_name_isSet = false;
    m_dba_name_isValid = false;

    m_dba_suffix_isSet = false;
    m_dba_suffix_isValid = false;

    m_dda_number_isSet = false;
    m_dda_number_isValid = false;

    m_developer_id_isSet = false;
    m_developer_id_isValid = false;

    m_duplicate_seconds_isSet = false;
    m_duplicate_seconds_isValid = false;

    m_echo_fields_isSet = false;
    m_echo_fields_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_email_receipt_isSet = false;
    m_email_receipt_isValid = false;

    m_emv_tran_id_isSet = false;
    m_emv_tran_id_isValid = false;

    m_exp_date_isSet = false;
    m_exp_date_isValid = false;

    m_fbo_id_isSet = false;
    m_fbo_id_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_loc_id_isSet = false;
    m_loc_id_isValid = false;

    m_mc_ucaf_data_isSet = false;
    m_mc_ucaf_data_isValid = false;

    m_mc_ucaf_ind_isSet = false;
    m_mc_ucaf_ind_isValid = false;

    m_merch_ref_num_isSet = false;
    m_merch_ref_num_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_moto_ecomm_ind_isSet = false;
    m_moto_ecomm_ind_isValid = false;

    m_partial_auth_isSet = false;
    m_partial_auth_isValid = false;

    m_payload_apple_pay_isSet = false;
    m_payload_apple_pay_isValid = false;

    m_payload_google_pay_isSet = false;
    m_payload_google_pay_isValid = false;

    m_pg_id_isSet = false;
    m_pg_id_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_purchase_id_isSet = false;
    m_purchase_id_isValid = false;

    m_report_data_isSet = false;
    m_report_data_isValid = false;

    m_retry_attempt_isSet = false;
    m_retry_attempt_isValid = false;

    m_retry_id_isSet = false;
    m_retry_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_tokenize_isSet = false;
    m_tokenize_isValid = false;

    m_tr_number_isSet = false;
    m_tr_number_isValid = false;

    m_tran_currency_isSet = false;
    m_tran_currency_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;

    m_xid_3ds_isSet = false;
    m_xid_3ds_isValid = false;
}

void OAIPGApiTransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPGApiTransactionRequest::fromJsonObject(QJsonObject json) {

    m_amt_convenience_fee_isValid = ::OpenAPI::fromJsonValue(m_amt_convenience_fee, json[QString("amt_convenience_fee")]);
    m_amt_convenience_fee_isSet = !json[QString("amt_convenience_fee")].isNull() && m_amt_convenience_fee_isValid;

    m_amt_fbo_isValid = ::OpenAPI::fromJsonValue(m_amt_fbo, json[QString("amt_fbo")]);
    m_amt_fbo_isSet = !json[QString("amt_fbo")].isNull() && m_amt_fbo_isValid;

    m_amt_tax_isValid = ::OpenAPI::fromJsonValue(m_amt_tax, json[QString("amt_tax")]);
    m_amt_tax_isSet = !json[QString("amt_tax")].isNull() && m_amt_tax_isValid;

    m_amt_tran_isValid = ::OpenAPI::fromJsonValue(m_amt_tran, json[QString("amt_tran")]);
    m_amt_tran_isSet = !json[QString("amt_tran")].isNull() && m_amt_tran_isValid;

    m_amt_tran_fee_isValid = ::OpenAPI::fromJsonValue(m_amt_tran_fee, json[QString("amt_tran_fee")]);
    m_amt_tran_fee_isSet = !json[QString("amt_tran_fee")].isNull() && m_amt_tran_fee_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("auth_code")]);
    m_auth_code_isSet = !json[QString("auth_code")].isNull() && m_auth_code_isValid;

    m_avs_address_isValid = ::OpenAPI::fromJsonValue(m_avs_address, json[QString("avs_address")]);
    m_avs_address_isSet = !json[QString("avs_address")].isNull() && m_avs_address_isValid;

    m_avs_zip_isValid = ::OpenAPI::fromJsonValue(m_avs_zip, json[QString("avs_zip")]);
    m_avs_zip_isSet = !json[QString("avs_zip")].isNull() && m_avs_zip_isValid;

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("card_id")]);
    m_card_id_isSet = !json[QString("card_id")].isNull() && m_card_id_isValid;

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("card_number")]);
    m_card_number_isSet = !json[QString("card_number")].isNull() && m_card_number_isValid;

    m_card_swipe_isValid = ::OpenAPI::fromJsonValue(m_card_swipe, json[QString("card_swipe")]);
    m_card_swipe_isSet = !json[QString("card_swipe")].isNull() && m_card_swipe_isValid;

    m_cardholder_name_isValid = ::OpenAPI::fromJsonValue(m_cardholder_name, json[QString("cardholder_name")]);
    m_cardholder_name_isSet = !json[QString("cardholder_name")].isNull() && m_cardholder_name_isValid;

    m_cavv_3ds_isValid = ::OpenAPI::fromJsonValue(m_cavv_3ds, json[QString("cavv_3ds")]);
    m_cavv_3ds_isSet = !json[QString("cavv_3ds")].isNull() && m_cavv_3ds_isValid;

    m_client_ip_isValid = ::OpenAPI::fromJsonValue(m_client_ip, json[QString("client_ip")]);
    m_client_ip_isSet = !json[QString("client_ip")].isNull() && m_client_ip_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_customer_code_isValid = ::OpenAPI::fromJsonValue(m_customer_code, json[QString("customer_code")]);
    m_customer_code_isSet = !json[QString("customer_code")].isNull() && m_customer_code_isValid;

    m_customer_email_isValid = ::OpenAPI::fromJsonValue(m_customer_email, json[QString("customer_email")]);
    m_customer_email_isSet = !json[QString("customer_email")].isNull() && m_customer_email_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_cvv2_isValid = ::OpenAPI::fromJsonValue(m_cvv2, json[QString("cvv2")]);
    m_cvv2_isSet = !json[QString("cvv2")].isNull() && m_cvv2_isValid;

    m_dba_name_isValid = ::OpenAPI::fromJsonValue(m_dba_name, json[QString("dba_name")]);
    m_dba_name_isSet = !json[QString("dba_name")].isNull() && m_dba_name_isValid;

    m_dba_suffix_isValid = ::OpenAPI::fromJsonValue(m_dba_suffix, json[QString("dba_suffix")]);
    m_dba_suffix_isSet = !json[QString("dba_suffix")].isNull() && m_dba_suffix_isValid;

    m_dda_number_isValid = ::OpenAPI::fromJsonValue(m_dda_number, json[QString("dda_number")]);
    m_dda_number_isSet = !json[QString("dda_number")].isNull() && m_dda_number_isValid;

    m_developer_id_isValid = ::OpenAPI::fromJsonValue(m_developer_id, json[QString("developer_id")]);
    m_developer_id_isSet = !json[QString("developer_id")].isNull() && m_developer_id_isValid;

    m_duplicate_seconds_isValid = ::OpenAPI::fromJsonValue(m_duplicate_seconds, json[QString("duplicate_seconds")]);
    m_duplicate_seconds_isSet = !json[QString("duplicate_seconds")].isNull() && m_duplicate_seconds_isValid;

    m_echo_fields_isValid = ::OpenAPI::fromJsonValue(m_echo_fields, json[QString("echo_fields")]);
    m_echo_fields_isSet = !json[QString("echo_fields")].isNull() && m_echo_fields_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_email_receipt_isValid = ::OpenAPI::fromJsonValue(m_email_receipt, json[QString("email_receipt")]);
    m_email_receipt_isSet = !json[QString("email_receipt")].isNull() && m_email_receipt_isValid;

    m_emv_tran_id_isValid = ::OpenAPI::fromJsonValue(m_emv_tran_id, json[QString("emv_tran_id")]);
    m_emv_tran_id_isSet = !json[QString("emv_tran_id")].isNull() && m_emv_tran_id_isValid;

    m_exp_date_isValid = ::OpenAPI::fromJsonValue(m_exp_date, json[QString("exp_date")]);
    m_exp_date_isSet = !json[QString("exp_date")].isNull() && m_exp_date_isValid;

    m_fbo_id_isValid = ::OpenAPI::fromJsonValue(m_fbo_id, json[QString("fbo_id")]);
    m_fbo_id_isSet = !json[QString("fbo_id")].isNull() && m_fbo_id_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("line_items")]);
    m_line_items_isSet = !json[QString("line_items")].isNull() && m_line_items_isValid;

    m_loc_id_isValid = ::OpenAPI::fromJsonValue(m_loc_id, json[QString("loc_id")]);
    m_loc_id_isSet = !json[QString("loc_id")].isNull() && m_loc_id_isValid;

    m_mc_ucaf_data_isValid = ::OpenAPI::fromJsonValue(m_mc_ucaf_data, json[QString("mc_ucaf_data")]);
    m_mc_ucaf_data_isSet = !json[QString("mc_ucaf_data")].isNull() && m_mc_ucaf_data_isValid;

    m_mc_ucaf_ind_isValid = ::OpenAPI::fromJsonValue(m_mc_ucaf_ind, json[QString("mc_ucaf_ind")]);
    m_mc_ucaf_ind_isSet = !json[QString("mc_ucaf_ind")].isNull() && m_mc_ucaf_ind_isValid;

    m_merch_ref_num_isValid = ::OpenAPI::fromJsonValue(m_merch_ref_num, json[QString("merch_ref_num")]);
    m_merch_ref_num_isSet = !json[QString("merch_ref_num")].isNull() && m_merch_ref_num_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_moto_ecomm_ind_isValid = ::OpenAPI::fromJsonValue(m_moto_ecomm_ind, json[QString("moto_ecomm_ind")]);
    m_moto_ecomm_ind_isSet = !json[QString("moto_ecomm_ind")].isNull() && m_moto_ecomm_ind_isValid;

    m_partial_auth_isValid = ::OpenAPI::fromJsonValue(m_partial_auth, json[QString("partial_auth")]);
    m_partial_auth_isSet = !json[QString("partial_auth")].isNull() && m_partial_auth_isValid;

    m_payload_apple_pay_isValid = ::OpenAPI::fromJsonValue(m_payload_apple_pay, json[QString("payload_apple_pay")]);
    m_payload_apple_pay_isSet = !json[QString("payload_apple_pay")].isNull() && m_payload_apple_pay_isValid;

    m_payload_google_pay_isValid = ::OpenAPI::fromJsonValue(m_payload_google_pay, json[QString("payload_google_pay")]);
    m_payload_google_pay_isSet = !json[QString("payload_google_pay")].isNull() && m_payload_google_pay_isValid;

    m_pg_id_isValid = ::OpenAPI::fromJsonValue(m_pg_id, json[QString("pg_id")]);
    m_pg_id_isSet = !json[QString("pg_id")].isNull() && m_pg_id_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profile_id")]);
    m_profile_id_isSet = !json[QString("profile_id")].isNull() && m_profile_id_isValid;

    m_purchase_id_isValid = ::OpenAPI::fromJsonValue(m_purchase_id, json[QString("purchase_id")]);
    m_purchase_id_isSet = !json[QString("purchase_id")].isNull() && m_purchase_id_isValid;

    m_report_data_isValid = ::OpenAPI::fromJsonValue(m_report_data, json[QString("report_data")]);
    m_report_data_isSet = !json[QString("report_data")].isNull() && m_report_data_isValid;

    m_retry_attempt_isValid = ::OpenAPI::fromJsonValue(m_retry_attempt, json[QString("retry_attempt")]);
    m_retry_attempt_isSet = !json[QString("retry_attempt")].isNull() && m_retry_attempt_isValid;

    m_retry_id_isValid = ::OpenAPI::fromJsonValue(m_retry_id, json[QString("retry_id")]);
    m_retry_id_isSet = !json[QString("retry_id")].isNull() && m_retry_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscription_id")]);
    m_subscription_id_isSet = !json[QString("subscription_id")].isNull() && m_subscription_id_isValid;

    m_tokenize_isValid = ::OpenAPI::fromJsonValue(m_tokenize, json[QString("tokenize")]);
    m_tokenize_isSet = !json[QString("tokenize")].isNull() && m_tokenize_isValid;

    m_tr_number_isValid = ::OpenAPI::fromJsonValue(m_tr_number, json[QString("tr_number")]);
    m_tr_number_isSet = !json[QString("tr_number")].isNull() && m_tr_number_isValid;

    m_tran_currency_isValid = ::OpenAPI::fromJsonValue(m_tran_currency, json[QString("tran_currency")]);
    m_tran_currency_isSet = !json[QString("tran_currency")].isNull() && m_tran_currency_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;

    m_xid_3ds_isValid = ::OpenAPI::fromJsonValue(m_xid_3ds, json[QString("xid_3ds")]);
    m_xid_3ds_isSet = !json[QString("xid_3ds")].isNull() && m_xid_3ds_isValid;
}

QString OAIPGApiTransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPGApiTransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amt_convenience_fee_isSet) {
        obj.insert(QString("amt_convenience_fee"), ::OpenAPI::toJsonValue(m_amt_convenience_fee));
    }
    if (m_amt_fbo_isSet) {
        obj.insert(QString("amt_fbo"), ::OpenAPI::toJsonValue(m_amt_fbo));
    }
    if (m_amt_tax_isSet) {
        obj.insert(QString("amt_tax"), ::OpenAPI::toJsonValue(m_amt_tax));
    }
    if (m_amt_tran_isSet) {
        obj.insert(QString("amt_tran"), ::OpenAPI::toJsonValue(m_amt_tran));
    }
    if (m_amt_tran_fee_isSet) {
        obj.insert(QString("amt_tran_fee"), ::OpenAPI::toJsonValue(m_amt_tran_fee));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("auth_code"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_avs_address_isSet) {
        obj.insert(QString("avs_address"), ::OpenAPI::toJsonValue(m_avs_address));
    }
    if (m_avs_zip_isSet) {
        obj.insert(QString("avs_zip"), ::OpenAPI::toJsonValue(m_avs_zip));
    }
    if (m_card_id_isSet) {
        obj.insert(QString("card_id"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_card_number_isSet) {
        obj.insert(QString("card_number"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_card_swipe_isSet) {
        obj.insert(QString("card_swipe"), ::OpenAPI::toJsonValue(m_card_swipe));
    }
    if (m_cardholder_name_isSet) {
        obj.insert(QString("cardholder_name"), ::OpenAPI::toJsonValue(m_cardholder_name));
    }
    if (m_cavv_3ds_isSet) {
        obj.insert(QString("cavv_3ds"), ::OpenAPI::toJsonValue(m_cavv_3ds));
    }
    if (m_client_ip_isSet) {
        obj.insert(QString("client_ip"), ::OpenAPI::toJsonValue(m_client_ip));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_customer_code_isSet) {
        obj.insert(QString("customer_code"), ::OpenAPI::toJsonValue(m_customer_code));
    }
    if (m_customer_email_isSet) {
        obj.insert(QString("customer_email"), ::OpenAPI::toJsonValue(m_customer_email));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_cvv2_isSet) {
        obj.insert(QString("cvv2"), ::OpenAPI::toJsonValue(m_cvv2));
    }
    if (m_dba_name_isSet) {
        obj.insert(QString("dba_name"), ::OpenAPI::toJsonValue(m_dba_name));
    }
    if (m_dba_suffix_isSet) {
        obj.insert(QString("dba_suffix"), ::OpenAPI::toJsonValue(m_dba_suffix));
    }
    if (m_dda_number_isSet) {
        obj.insert(QString("dda_number"), ::OpenAPI::toJsonValue(m_dda_number));
    }
    if (m_developer_id_isSet) {
        obj.insert(QString("developer_id"), ::OpenAPI::toJsonValue(m_developer_id));
    }
    if (m_duplicate_seconds_isSet) {
        obj.insert(QString("duplicate_seconds"), ::OpenAPI::toJsonValue(m_duplicate_seconds));
    }
    if (m_echo_fields_isSet) {
        obj.insert(QString("echo_fields"), ::OpenAPI::toJsonValue(m_echo_fields));
    }
    if (m_email_address.size() > 0) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_email_receipt_isSet) {
        obj.insert(QString("email_receipt"), ::OpenAPI::toJsonValue(m_email_receipt));
    }
    if (m_emv_tran_id_isSet) {
        obj.insert(QString("emv_tran_id"), ::OpenAPI::toJsonValue(m_emv_tran_id));
    }
    if (m_exp_date_isSet) {
        obj.insert(QString("exp_date"), ::OpenAPI::toJsonValue(m_exp_date));
    }
    if (m_fbo_id_isSet) {
        obj.insert(QString("fbo_id"), ::OpenAPI::toJsonValue(m_fbo_id));
    }
    if (m_line_items_isSet) {
        obj.insert(QString("line_items"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_loc_id_isSet) {
        obj.insert(QString("loc_id"), ::OpenAPI::toJsonValue(m_loc_id));
    }
    if (m_mc_ucaf_data_isSet) {
        obj.insert(QString("mc_ucaf_data"), ::OpenAPI::toJsonValue(m_mc_ucaf_data));
    }
    if (m_mc_ucaf_ind_isSet) {
        obj.insert(QString("mc_ucaf_ind"), ::OpenAPI::toJsonValue(m_mc_ucaf_ind));
    }
    if (m_merch_ref_num_isSet) {
        obj.insert(QString("merch_ref_num"), ::OpenAPI::toJsonValue(m_merch_ref_num));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_moto_ecomm_ind_isSet) {
        obj.insert(QString("moto_ecomm_ind"), ::OpenAPI::toJsonValue(m_moto_ecomm_ind));
    }
    if (m_partial_auth_isSet) {
        obj.insert(QString("partial_auth"), ::OpenAPI::toJsonValue(m_partial_auth));
    }
    if (m_payload_apple_pay_isSet) {
        obj.insert(QString("payload_apple_pay"), ::OpenAPI::toJsonValue(m_payload_apple_pay));
    }
    if (m_payload_google_pay_isSet) {
        obj.insert(QString("payload_google_pay"), ::OpenAPI::toJsonValue(m_payload_google_pay));
    }
    if (m_pg_id_isSet) {
        obj.insert(QString("pg_id"), ::OpenAPI::toJsonValue(m_pg_id));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profile_id"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_purchase_id_isSet) {
        obj.insert(QString("purchase_id"), ::OpenAPI::toJsonValue(m_purchase_id));
    }
    if (m_report_data_isSet) {
        obj.insert(QString("report_data"), ::OpenAPI::toJsonValue(m_report_data));
    }
    if (m_retry_attempt_isSet) {
        obj.insert(QString("retry_attempt"), ::OpenAPI::toJsonValue(m_retry_attempt));
    }
    if (m_retry_id_isSet) {
        obj.insert(QString("retry_id"), ::OpenAPI::toJsonValue(m_retry_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscription_id"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_tokenize_isSet) {
        obj.insert(QString("tokenize"), ::OpenAPI::toJsonValue(m_tokenize));
    }
    if (m_tr_number_isSet) {
        obj.insert(QString("tr_number"), ::OpenAPI::toJsonValue(m_tr_number));
    }
    if (m_tran_currency_isSet) {
        obj.insert(QString("tran_currency"), ::OpenAPI::toJsonValue(m_tran_currency));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    if (m_xid_3ds_isSet) {
        obj.insert(QString("xid_3ds"), ::OpenAPI::toJsonValue(m_xid_3ds));
    }
    return obj;
}

double OAIPGApiTransactionRequest::getAmtConvenienceFee() const {
    return m_amt_convenience_fee;
}
void OAIPGApiTransactionRequest::setAmtConvenienceFee(const double &amt_convenience_fee) {
    m_amt_convenience_fee = amt_convenience_fee;
    m_amt_convenience_fee_isSet = true;
}

bool OAIPGApiTransactionRequest::is_amt_convenience_fee_Set() const{
    return m_amt_convenience_fee_isSet;
}

bool OAIPGApiTransactionRequest::is_amt_convenience_fee_Valid() const{
    return m_amt_convenience_fee_isValid;
}

double OAIPGApiTransactionRequest::getAmtFbo() const {
    return m_amt_fbo;
}
void OAIPGApiTransactionRequest::setAmtFbo(const double &amt_fbo) {
    m_amt_fbo = amt_fbo;
    m_amt_fbo_isSet = true;
}

bool OAIPGApiTransactionRequest::is_amt_fbo_Set() const{
    return m_amt_fbo_isSet;
}

bool OAIPGApiTransactionRequest::is_amt_fbo_Valid() const{
    return m_amt_fbo_isValid;
}

double OAIPGApiTransactionRequest::getAmtTax() const {
    return m_amt_tax;
}
void OAIPGApiTransactionRequest::setAmtTax(const double &amt_tax) {
    m_amt_tax = amt_tax;
    m_amt_tax_isSet = true;
}

bool OAIPGApiTransactionRequest::is_amt_tax_Set() const{
    return m_amt_tax_isSet;
}

bool OAIPGApiTransactionRequest::is_amt_tax_Valid() const{
    return m_amt_tax_isValid;
}

double OAIPGApiTransactionRequest::getAmtTran() const {
    return m_amt_tran;
}
void OAIPGApiTransactionRequest::setAmtTran(const double &amt_tran) {
    m_amt_tran = amt_tran;
    m_amt_tran_isSet = true;
}

bool OAIPGApiTransactionRequest::is_amt_tran_Set() const{
    return m_amt_tran_isSet;
}

bool OAIPGApiTransactionRequest::is_amt_tran_Valid() const{
    return m_amt_tran_isValid;
}

double OAIPGApiTransactionRequest::getAmtTranFee() const {
    return m_amt_tran_fee;
}
void OAIPGApiTransactionRequest::setAmtTranFee(const double &amt_tran_fee) {
    m_amt_tran_fee = amt_tran_fee;
    m_amt_tran_fee_isSet = true;
}

bool OAIPGApiTransactionRequest::is_amt_tran_fee_Set() const{
    return m_amt_tran_fee_isSet;
}

bool OAIPGApiTransactionRequest::is_amt_tran_fee_Valid() const{
    return m_amt_tran_fee_isValid;
}

QString OAIPGApiTransactionRequest::getAuthCode() const {
    return m_auth_code;
}
void OAIPGApiTransactionRequest::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIPGApiTransactionRequest::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIPGApiTransactionRequest::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

QString OAIPGApiTransactionRequest::getAvsAddress() const {
    return m_avs_address;
}
void OAIPGApiTransactionRequest::setAvsAddress(const QString &avs_address) {
    m_avs_address = avs_address;
    m_avs_address_isSet = true;
}

bool OAIPGApiTransactionRequest::is_avs_address_Set() const{
    return m_avs_address_isSet;
}

bool OAIPGApiTransactionRequest::is_avs_address_Valid() const{
    return m_avs_address_isValid;
}

QString OAIPGApiTransactionRequest::getAvsZip() const {
    return m_avs_zip;
}
void OAIPGApiTransactionRequest::setAvsZip(const QString &avs_zip) {
    m_avs_zip = avs_zip;
    m_avs_zip_isSet = true;
}

bool OAIPGApiTransactionRequest::is_avs_zip_Set() const{
    return m_avs_zip_isSet;
}

bool OAIPGApiTransactionRequest::is_avs_zip_Valid() const{
    return m_avs_zip_isValid;
}

QString OAIPGApiTransactionRequest::getCardId() const {
    return m_card_id;
}
void OAIPGApiTransactionRequest::setCardId(const QString &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAIPGApiTransactionRequest::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QString OAIPGApiTransactionRequest::getCardNumber() const {
    return m_card_number;
}
void OAIPGApiTransactionRequest::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAIPGApiTransactionRequest::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAIPGApiTransactionRequest::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAIPGApiTransactionRequest::getCardSwipe() const {
    return m_card_swipe;
}
void OAIPGApiTransactionRequest::setCardSwipe(const QString &card_swipe) {
    m_card_swipe = card_swipe;
    m_card_swipe_isSet = true;
}

bool OAIPGApiTransactionRequest::is_card_swipe_Set() const{
    return m_card_swipe_isSet;
}

bool OAIPGApiTransactionRequest::is_card_swipe_Valid() const{
    return m_card_swipe_isValid;
}

QString OAIPGApiTransactionRequest::getCardholderName() const {
    return m_cardholder_name;
}
void OAIPGApiTransactionRequest::setCardholderName(const QString &cardholder_name) {
    m_cardholder_name = cardholder_name;
    m_cardholder_name_isSet = true;
}

bool OAIPGApiTransactionRequest::is_cardholder_name_Set() const{
    return m_cardholder_name_isSet;
}

bool OAIPGApiTransactionRequest::is_cardholder_name_Valid() const{
    return m_cardholder_name_isValid;
}

QString OAIPGApiTransactionRequest::getCavv3ds() const {
    return m_cavv_3ds;
}
void OAIPGApiTransactionRequest::setCavv3ds(const QString &cavv_3ds) {
    m_cavv_3ds = cavv_3ds;
    m_cavv_3ds_isSet = true;
}

bool OAIPGApiTransactionRequest::is_cavv_3ds_Set() const{
    return m_cavv_3ds_isSet;
}

bool OAIPGApiTransactionRequest::is_cavv_3ds_Valid() const{
    return m_cavv_3ds_isValid;
}

QString OAIPGApiTransactionRequest::getClientIp() const {
    return m_client_ip;
}
void OAIPGApiTransactionRequest::setClientIp(const QString &client_ip) {
    m_client_ip = client_ip;
    m_client_ip_isSet = true;
}

bool OAIPGApiTransactionRequest::is_client_ip_Set() const{
    return m_client_ip_isSet;
}

bool OAIPGApiTransactionRequest::is_client_ip_Valid() const{
    return m_client_ip_isValid;
}

OAICustomer OAIPGApiTransactionRequest::getCustomer() const {
    return m_customer;
}
void OAIPGApiTransactionRequest::setCustomer(const OAICustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIPGApiTransactionRequest::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIPGApiTransactionRequest::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIPGApiTransactionRequest::getCustomerCode() const {
    return m_customer_code;
}
void OAIPGApiTransactionRequest::setCustomerCode(const QString &customer_code) {
    m_customer_code = customer_code;
    m_customer_code_isSet = true;
}

bool OAIPGApiTransactionRequest::is_customer_code_Set() const{
    return m_customer_code_isSet;
}

bool OAIPGApiTransactionRequest::is_customer_code_Valid() const{
    return m_customer_code_isValid;
}

QString OAIPGApiTransactionRequest::getCustomerEmail() const {
    return m_customer_email;
}
void OAIPGApiTransactionRequest::setCustomerEmail(const QString &customer_email) {
    m_customer_email = customer_email;
    m_customer_email_isSet = true;
}

bool OAIPGApiTransactionRequest::is_customer_email_Set() const{
    return m_customer_email_isSet;
}

bool OAIPGApiTransactionRequest::is_customer_email_Valid() const{
    return m_customer_email_isValid;
}

QString OAIPGApiTransactionRequest::getCustomerId() const {
    return m_customer_id;
}
void OAIPGApiTransactionRequest::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIPGApiTransactionRequest::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIPGApiTransactionRequest::getCvv2() const {
    return m_cvv2;
}
void OAIPGApiTransactionRequest::setCvv2(const QString &cvv2) {
    m_cvv2 = cvv2;
    m_cvv2_isSet = true;
}

bool OAIPGApiTransactionRequest::is_cvv2_Set() const{
    return m_cvv2_isSet;
}

bool OAIPGApiTransactionRequest::is_cvv2_Valid() const{
    return m_cvv2_isValid;
}

QString OAIPGApiTransactionRequest::getDbaName() const {
    return m_dba_name;
}
void OAIPGApiTransactionRequest::setDbaName(const QString &dba_name) {
    m_dba_name = dba_name;
    m_dba_name_isSet = true;
}

bool OAIPGApiTransactionRequest::is_dba_name_Set() const{
    return m_dba_name_isSet;
}

bool OAIPGApiTransactionRequest::is_dba_name_Valid() const{
    return m_dba_name_isValid;
}

QString OAIPGApiTransactionRequest::getDbaSuffix() const {
    return m_dba_suffix;
}
void OAIPGApiTransactionRequest::setDbaSuffix(const QString &dba_suffix) {
    m_dba_suffix = dba_suffix;
    m_dba_suffix_isSet = true;
}

bool OAIPGApiTransactionRequest::is_dba_suffix_Set() const{
    return m_dba_suffix_isSet;
}

bool OAIPGApiTransactionRequest::is_dba_suffix_Valid() const{
    return m_dba_suffix_isValid;
}

QString OAIPGApiTransactionRequest::getDdaNumber() const {
    return m_dda_number;
}
void OAIPGApiTransactionRequest::setDdaNumber(const QString &dda_number) {
    m_dda_number = dda_number;
    m_dda_number_isSet = true;
}

bool OAIPGApiTransactionRequest::is_dda_number_Set() const{
    return m_dda_number_isSet;
}

bool OAIPGApiTransactionRequest::is_dda_number_Valid() const{
    return m_dda_number_isValid;
}

QString OAIPGApiTransactionRequest::getDeveloperId() const {
    return m_developer_id;
}
void OAIPGApiTransactionRequest::setDeveloperId(const QString &developer_id) {
    m_developer_id = developer_id;
    m_developer_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_developer_id_Set() const{
    return m_developer_id_isSet;
}

bool OAIPGApiTransactionRequest::is_developer_id_Valid() const{
    return m_developer_id_isValid;
}

qint64 OAIPGApiTransactionRequest::getDuplicateSeconds() const {
    return m_duplicate_seconds;
}
void OAIPGApiTransactionRequest::setDuplicateSeconds(const qint64 &duplicate_seconds) {
    m_duplicate_seconds = duplicate_seconds;
    m_duplicate_seconds_isSet = true;
}

bool OAIPGApiTransactionRequest::is_duplicate_seconds_Set() const{
    return m_duplicate_seconds_isSet;
}

bool OAIPGApiTransactionRequest::is_duplicate_seconds_Valid() const{
    return m_duplicate_seconds_isValid;
}

QString OAIPGApiTransactionRequest::getEchoFields() const {
    return m_echo_fields;
}
void OAIPGApiTransactionRequest::setEchoFields(const QString &echo_fields) {
    m_echo_fields = echo_fields;
    m_echo_fields_isSet = true;
}

bool OAIPGApiTransactionRequest::is_echo_fields_Set() const{
    return m_echo_fields_isSet;
}

bool OAIPGApiTransactionRequest::is_echo_fields_Valid() const{
    return m_echo_fields_isValid;
}

QList<QString> OAIPGApiTransactionRequest::getEmailAddress() const {
    return m_email_address;
}
void OAIPGApiTransactionRequest::setEmailAddress(const QList<QString> &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIPGApiTransactionRequest::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIPGApiTransactionRequest::is_email_address_Valid() const{
    return m_email_address_isValid;
}

bool OAIPGApiTransactionRequest::isEmailReceipt() const {
    return m_email_receipt;
}
void OAIPGApiTransactionRequest::setEmailReceipt(const bool &email_receipt) {
    m_email_receipt = email_receipt;
    m_email_receipt_isSet = true;
}

bool OAIPGApiTransactionRequest::is_email_receipt_Set() const{
    return m_email_receipt_isSet;
}

bool OAIPGApiTransactionRequest::is_email_receipt_Valid() const{
    return m_email_receipt_isValid;
}

QString OAIPGApiTransactionRequest::getEmvTranId() const {
    return m_emv_tran_id;
}
void OAIPGApiTransactionRequest::setEmvTranId(const QString &emv_tran_id) {
    m_emv_tran_id = emv_tran_id;
    m_emv_tran_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_emv_tran_id_Set() const{
    return m_emv_tran_id_isSet;
}

bool OAIPGApiTransactionRequest::is_emv_tran_id_Valid() const{
    return m_emv_tran_id_isValid;
}

QString OAIPGApiTransactionRequest::getExpDate() const {
    return m_exp_date;
}
void OAIPGApiTransactionRequest::setExpDate(const QString &exp_date) {
    m_exp_date = exp_date;
    m_exp_date_isSet = true;
}

bool OAIPGApiTransactionRequest::is_exp_date_Set() const{
    return m_exp_date_isSet;
}

bool OAIPGApiTransactionRequest::is_exp_date_Valid() const{
    return m_exp_date_isValid;
}

qint64 OAIPGApiTransactionRequest::getFboId() const {
    return m_fbo_id;
}
void OAIPGApiTransactionRequest::setFboId(const qint64 &fbo_id) {
    m_fbo_id = fbo_id;
    m_fbo_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_fbo_id_Set() const{
    return m_fbo_id_isSet;
}

bool OAIPGApiTransactionRequest::is_fbo_id_Valid() const{
    return m_fbo_id_isValid;
}

QString OAIPGApiTransactionRequest::getLineItems() const {
    return m_line_items;
}
void OAIPGApiTransactionRequest::setLineItems(const QString &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIPGApiTransactionRequest::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIPGApiTransactionRequest::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAIPGApiTransactionRequest::getLocId() const {
    return m_loc_id;
}
void OAIPGApiTransactionRequest::setLocId(const QString &loc_id) {
    m_loc_id = loc_id;
    m_loc_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_loc_id_Set() const{
    return m_loc_id_isSet;
}

bool OAIPGApiTransactionRequest::is_loc_id_Valid() const{
    return m_loc_id_isValid;
}

QString OAIPGApiTransactionRequest::getMcUcafData() const {
    return m_mc_ucaf_data;
}
void OAIPGApiTransactionRequest::setMcUcafData(const QString &mc_ucaf_data) {
    m_mc_ucaf_data = mc_ucaf_data;
    m_mc_ucaf_data_isSet = true;
}

bool OAIPGApiTransactionRequest::is_mc_ucaf_data_Set() const{
    return m_mc_ucaf_data_isSet;
}

bool OAIPGApiTransactionRequest::is_mc_ucaf_data_Valid() const{
    return m_mc_ucaf_data_isValid;
}

QString OAIPGApiTransactionRequest::getMcUcafInd() const {
    return m_mc_ucaf_ind;
}
void OAIPGApiTransactionRequest::setMcUcafInd(const QString &mc_ucaf_ind) {
    m_mc_ucaf_ind = mc_ucaf_ind;
    m_mc_ucaf_ind_isSet = true;
}

bool OAIPGApiTransactionRequest::is_mc_ucaf_ind_Set() const{
    return m_mc_ucaf_ind_isSet;
}

bool OAIPGApiTransactionRequest::is_mc_ucaf_ind_Valid() const{
    return m_mc_ucaf_ind_isValid;
}

QString OAIPGApiTransactionRequest::getMerchRefNum() const {
    return m_merch_ref_num;
}
void OAIPGApiTransactionRequest::setMerchRefNum(const QString &merch_ref_num) {
    m_merch_ref_num = merch_ref_num;
    m_merch_ref_num_isSet = true;
}

bool OAIPGApiTransactionRequest::is_merch_ref_num_Set() const{
    return m_merch_ref_num_isSet;
}

bool OAIPGApiTransactionRequest::is_merch_ref_num_Valid() const{
    return m_merch_ref_num_isValid;
}

qint64 OAIPGApiTransactionRequest::getMerchantId() const {
    return m_merchant_id;
}
void OAIPGApiTransactionRequest::setMerchantId(const qint64 &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIPGApiTransactionRequest::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIPGApiTransactionRequest::getMotoEcommInd() const {
    return m_moto_ecomm_ind;
}
void OAIPGApiTransactionRequest::setMotoEcommInd(const QString &moto_ecomm_ind) {
    m_moto_ecomm_ind = moto_ecomm_ind;
    m_moto_ecomm_ind_isSet = true;
}

bool OAIPGApiTransactionRequest::is_moto_ecomm_ind_Set() const{
    return m_moto_ecomm_ind_isSet;
}

bool OAIPGApiTransactionRequest::is_moto_ecomm_ind_Valid() const{
    return m_moto_ecomm_ind_isValid;
}

bool OAIPGApiTransactionRequest::isPartialAuth() const {
    return m_partial_auth;
}
void OAIPGApiTransactionRequest::setPartialAuth(const bool &partial_auth) {
    m_partial_auth = partial_auth;
    m_partial_auth_isSet = true;
}

bool OAIPGApiTransactionRequest::is_partial_auth_Set() const{
    return m_partial_auth_isSet;
}

bool OAIPGApiTransactionRequest::is_partial_auth_Valid() const{
    return m_partial_auth_isValid;
}

QString OAIPGApiTransactionRequest::getPayloadApplePay() const {
    return m_payload_apple_pay;
}
void OAIPGApiTransactionRequest::setPayloadApplePay(const QString &payload_apple_pay) {
    m_payload_apple_pay = payload_apple_pay;
    m_payload_apple_pay_isSet = true;
}

bool OAIPGApiTransactionRequest::is_payload_apple_pay_Set() const{
    return m_payload_apple_pay_isSet;
}

bool OAIPGApiTransactionRequest::is_payload_apple_pay_Valid() const{
    return m_payload_apple_pay_isValid;
}

QString OAIPGApiTransactionRequest::getPayloadGooglePay() const {
    return m_payload_google_pay;
}
void OAIPGApiTransactionRequest::setPayloadGooglePay(const QString &payload_google_pay) {
    m_payload_google_pay = payload_google_pay;
    m_payload_google_pay_isSet = true;
}

bool OAIPGApiTransactionRequest::is_payload_google_pay_Set() const{
    return m_payload_google_pay_isSet;
}

bool OAIPGApiTransactionRequest::is_payload_google_pay_Valid() const{
    return m_payload_google_pay_isValid;
}

QString OAIPGApiTransactionRequest::getPgId() const {
    return m_pg_id;
}
void OAIPGApiTransactionRequest::setPgId(const QString &pg_id) {
    m_pg_id = pg_id;
    m_pg_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_pg_id_Set() const{
    return m_pg_id_isSet;
}

bool OAIPGApiTransactionRequest::is_pg_id_Valid() const{
    return m_pg_id_isValid;
}

QString OAIPGApiTransactionRequest::getProfileId() const {
    return m_profile_id;
}
void OAIPGApiTransactionRequest::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIPGApiTransactionRequest::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAIPGApiTransactionRequest::getPurchaseId() const {
    return m_purchase_id;
}
void OAIPGApiTransactionRequest::setPurchaseId(const QString &purchase_id) {
    m_purchase_id = purchase_id;
    m_purchase_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_purchase_id_Set() const{
    return m_purchase_id_isSet;
}

bool OAIPGApiTransactionRequest::is_purchase_id_Valid() const{
    return m_purchase_id_isValid;
}

QString OAIPGApiTransactionRequest::getReportData() const {
    return m_report_data;
}
void OAIPGApiTransactionRequest::setReportData(const QString &report_data) {
    m_report_data = report_data;
    m_report_data_isSet = true;
}

bool OAIPGApiTransactionRequest::is_report_data_Set() const{
    return m_report_data_isSet;
}

bool OAIPGApiTransactionRequest::is_report_data_Valid() const{
    return m_report_data_isValid;
}

qint64 OAIPGApiTransactionRequest::getRetryAttempt() const {
    return m_retry_attempt;
}
void OAIPGApiTransactionRequest::setRetryAttempt(const qint64 &retry_attempt) {
    m_retry_attempt = retry_attempt;
    m_retry_attempt_isSet = true;
}

bool OAIPGApiTransactionRequest::is_retry_attempt_Set() const{
    return m_retry_attempt_isSet;
}

bool OAIPGApiTransactionRequest::is_retry_attempt_Valid() const{
    return m_retry_attempt_isValid;
}

qint64 OAIPGApiTransactionRequest::getRetryId() const {
    return m_retry_id;
}
void OAIPGApiTransactionRequest::setRetryId(const qint64 &retry_id) {
    m_retry_id = retry_id;
    m_retry_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_retry_id_Set() const{
    return m_retry_id_isSet;
}

bool OAIPGApiTransactionRequest::is_retry_id_Valid() const{
    return m_retry_id_isValid;
}

QString OAIPGApiTransactionRequest::getSessionId() const {
    return m_session_id;
}
void OAIPGApiTransactionRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPGApiTransactionRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

qint64 OAIPGApiTransactionRequest::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIPGApiTransactionRequest::setSubscriptionId(const qint64 &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIPGApiTransactionRequest::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIPGApiTransactionRequest::isTokenize() const {
    return m_tokenize;
}
void OAIPGApiTransactionRequest::setTokenize(const bool &tokenize) {
    m_tokenize = tokenize;
    m_tokenize_isSet = true;
}

bool OAIPGApiTransactionRequest::is_tokenize_Set() const{
    return m_tokenize_isSet;
}

bool OAIPGApiTransactionRequest::is_tokenize_Valid() const{
    return m_tokenize_isValid;
}

QString OAIPGApiTransactionRequest::getTrNumber() const {
    return m_tr_number;
}
void OAIPGApiTransactionRequest::setTrNumber(const QString &tr_number) {
    m_tr_number = tr_number;
    m_tr_number_isSet = true;
}

bool OAIPGApiTransactionRequest::is_tr_number_Set() const{
    return m_tr_number_isSet;
}

bool OAIPGApiTransactionRequest::is_tr_number_Valid() const{
    return m_tr_number_isValid;
}

qint32 OAIPGApiTransactionRequest::getTranCurrency() const {
    return m_tran_currency;
}
void OAIPGApiTransactionRequest::setTranCurrency(const qint32 &tran_currency) {
    m_tran_currency = tran_currency;
    m_tran_currency_isSet = true;
}

bool OAIPGApiTransactionRequest::is_tran_currency_Set() const{
    return m_tran_currency_isSet;
}

bool OAIPGApiTransactionRequest::is_tran_currency_Valid() const{
    return m_tran_currency_isValid;
}

QString OAIPGApiTransactionRequest::getTypeId() const {
    return m_type_id;
}
void OAIPGApiTransactionRequest::setTypeId(const QString &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIPGApiTransactionRequest::is_type_id_Valid() const{
    return m_type_id_isValid;
}

qint64 OAIPGApiTransactionRequest::getUserId() const {
    return m_user_id;
}
void OAIPGApiTransactionRequest::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPGApiTransactionRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint64 OAIPGApiTransactionRequest::getVendorId() const {
    return m_vendor_id;
}
void OAIPGApiTransactionRequest::setVendorId(const qint64 &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIPGApiTransactionRequest::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIPGApiTransactionRequest::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

QString OAIPGApiTransactionRequest::getXid3ds() const {
    return m_xid_3ds;
}
void OAIPGApiTransactionRequest::setXid3ds(const QString &xid_3ds) {
    m_xid_3ds = xid_3ds;
    m_xid_3ds_isSet = true;
}

bool OAIPGApiTransactionRequest::is_xid_3ds_Set() const{
    return m_xid_3ds_isSet;
}

bool OAIPGApiTransactionRequest::is_xid_3ds_Valid() const{
    return m_xid_3ds_isValid;
}

bool OAIPGApiTransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amt_convenience_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amt_fbo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amt_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amt_tran_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amt_tran_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_swipe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cardholder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_3ds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvv2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dba_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dba_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dda_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echo_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_receipt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emv_tran_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fbo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc_ucaf_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc_ucaf_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merch_ref_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moto_ecomm_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_apple_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_google_pay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pg_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokenize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tr_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tran_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xid_3ds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPGApiTransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_id_isValid && true;
}

} // namespace OpenAPI
