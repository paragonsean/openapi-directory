/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArdefResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArdefResponse::OAIArdefResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArdefResponse::OAIArdefResponse() {
    this->initializeModel();
}

OAIArdefResponse::~OAIArdefResponse() {}

void OAIArdefResponse::initializeModel() {

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_ind_comm_level2_isSet = false;
    m_ind_comm_level2_isValid = false;

    m_ind_comm_level3_isSet = false;
    m_ind_comm_level3_isValid = false;

    m_issuer_country_isSet = false;
    m_issuer_country_isValid = false;

    m_pg_id_isSet = false;
    m_pg_id_isValid = false;

    m_rcode_isSet = false;
    m_rcode_isValid = false;

    m_rmsg_isSet = false;
    m_rmsg_isValid = false;
}

void OAIArdefResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArdefResponse::fromJsonObject(QJsonObject json) {

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("funding_source")]);
    m_funding_source_isSet = !json[QString("funding_source")].isNull() && m_funding_source_isValid;

    m_ind_comm_level2_isValid = ::OpenAPI::fromJsonValue(m_ind_comm_level2, json[QString("ind_comm_level2")]);
    m_ind_comm_level2_isSet = !json[QString("ind_comm_level2")].isNull() && m_ind_comm_level2_isValid;

    m_ind_comm_level3_isValid = ::OpenAPI::fromJsonValue(m_ind_comm_level3, json[QString("ind_comm_level3")]);
    m_ind_comm_level3_isSet = !json[QString("ind_comm_level3")].isNull() && m_ind_comm_level3_isValid;

    m_issuer_country_isValid = ::OpenAPI::fromJsonValue(m_issuer_country, json[QString("issuer_country")]);
    m_issuer_country_isSet = !json[QString("issuer_country")].isNull() && m_issuer_country_isValid;

    m_pg_id_isValid = ::OpenAPI::fromJsonValue(m_pg_id, json[QString("pg_id")]);
    m_pg_id_isSet = !json[QString("pg_id")].isNull() && m_pg_id_isValid;

    m_rcode_isValid = ::OpenAPI::fromJsonValue(m_rcode, json[QString("rcode")]);
    m_rcode_isSet = !json[QString("rcode")].isNull() && m_rcode_isValid;

    m_rmsg_isValid = ::OpenAPI::fromJsonValue(m_rmsg, json[QString("rmsg")]);
    m_rmsg_isSet = !json[QString("rmsg")].isNull() && m_rmsg_isValid;
}

QString OAIArdefResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArdefResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_funding_source_isSet) {
        obj.insert(QString("funding_source"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_ind_comm_level2_isSet) {
        obj.insert(QString("ind_comm_level2"), ::OpenAPI::toJsonValue(m_ind_comm_level2));
    }
    if (m_ind_comm_level3_isSet) {
        obj.insert(QString("ind_comm_level3"), ::OpenAPI::toJsonValue(m_ind_comm_level3));
    }
    if (m_issuer_country_isSet) {
        obj.insert(QString("issuer_country"), ::OpenAPI::toJsonValue(m_issuer_country));
    }
    if (m_pg_id_isSet) {
        obj.insert(QString("pg_id"), ::OpenAPI::toJsonValue(m_pg_id));
    }
    if (m_rcode_isSet) {
        obj.insert(QString("rcode"), ::OpenAPI::toJsonValue(m_rcode));
    }
    if (m_rmsg_isSet) {
        obj.insert(QString("rmsg"), ::OpenAPI::toJsonValue(m_rmsg));
    }
    return obj;
}

QString OAIArdefResponse::getFundingSource() const {
    return m_funding_source;
}
void OAIArdefResponse::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAIArdefResponse::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAIArdefResponse::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAIArdefResponse::getIndCommLevel2() const {
    return m_ind_comm_level2;
}
void OAIArdefResponse::setIndCommLevel2(const QString &ind_comm_level2) {
    m_ind_comm_level2 = ind_comm_level2;
    m_ind_comm_level2_isSet = true;
}

bool OAIArdefResponse::is_ind_comm_level2_Set() const{
    return m_ind_comm_level2_isSet;
}

bool OAIArdefResponse::is_ind_comm_level2_Valid() const{
    return m_ind_comm_level2_isValid;
}

QString OAIArdefResponse::getIndCommLevel3() const {
    return m_ind_comm_level3;
}
void OAIArdefResponse::setIndCommLevel3(const QString &ind_comm_level3) {
    m_ind_comm_level3 = ind_comm_level3;
    m_ind_comm_level3_isSet = true;
}

bool OAIArdefResponse::is_ind_comm_level3_Set() const{
    return m_ind_comm_level3_isSet;
}

bool OAIArdefResponse::is_ind_comm_level3_Valid() const{
    return m_ind_comm_level3_isValid;
}

QString OAIArdefResponse::getIssuerCountry() const {
    return m_issuer_country;
}
void OAIArdefResponse::setIssuerCountry(const QString &issuer_country) {
    m_issuer_country = issuer_country;
    m_issuer_country_isSet = true;
}

bool OAIArdefResponse::is_issuer_country_Set() const{
    return m_issuer_country_isSet;
}

bool OAIArdefResponse::is_issuer_country_Valid() const{
    return m_issuer_country_isValid;
}

QString OAIArdefResponse::getPgId() const {
    return m_pg_id;
}
void OAIArdefResponse::setPgId(const QString &pg_id) {
    m_pg_id = pg_id;
    m_pg_id_isSet = true;
}

bool OAIArdefResponse::is_pg_id_Set() const{
    return m_pg_id_isSet;
}

bool OAIArdefResponse::is_pg_id_Valid() const{
    return m_pg_id_isValid;
}

QString OAIArdefResponse::getRcode() const {
    return m_rcode;
}
void OAIArdefResponse::setRcode(const QString &rcode) {
    m_rcode = rcode;
    m_rcode_isSet = true;
}

bool OAIArdefResponse::is_rcode_Set() const{
    return m_rcode_isSet;
}

bool OAIArdefResponse::is_rcode_Valid() const{
    return m_rcode_isValid;
}

QString OAIArdefResponse::getRmsg() const {
    return m_rmsg;
}
void OAIArdefResponse::setRmsg(const QString &rmsg) {
    m_rmsg = rmsg;
    m_rmsg_isSet = true;
}

bool OAIArdefResponse::is_rmsg_Set() const{
    return m_rmsg_isSet;
}

bool OAIArdefResponse::is_rmsg_Valid() const{
    return m_rmsg_isValid;
}

bool OAIArdefResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ind_comm_level2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ind_comm_level3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pg_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmsg_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArdefResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
