/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentGatewayApi_H
#define OAI_OAIPaymentGatewayApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIArdefRequest.h"
#include "OAIArdefResponse.h"
#include "OAIPGApiBadResponse.h"
#include "OAIPGApiBatchCloseRequest.h"
#include "OAIPGApiBatchCloseResponse.h"
#include "OAIPGApiCaptureRequest.h"
#include "OAIPGApiCaptureResponse.h"
#include "OAIPGApiDeclineResponse.h"
#include "OAIPGApiEmailReceiptRequest.h"
#include "OAIPGApiEmailReceiptResponse.h"
#include "OAIPGApiExpireTokenRequest.h"
#include "OAIPGApiExpireTokenResponse.h"
#include "OAIPGApiInternalErrorResponse.h"
#include "OAIPGApiRechargeRequest.h"
#include "OAIPGApiRechargeResponse.h"
#include "OAIPGApiRefundRequest.h"
#include "OAIPGApiRefundResponse.h"
#include "OAIPGApiResponse.h"
#include "OAIPGApiTimeoutResponse.h"
#include "OAIPGApiTokenizeRequest.h"
#include "OAIPGApiTokenizeResponse.h"
#include "OAIPGApiTransactionRequest.h"
#include "OAIPGApiTransactionResponse.h"
#include "OAIPGApiUnauthResponse.h"
#include "OAIPGApiVerifyRequest.h"
#include "OAIPGApiVerifyResponse.h"
#include "OAIPGApiVoidRequest.h"
#include "OAIPGApiVoidResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentGatewayApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentGatewayApi(const int timeOut = 0);
    ~OAIPaymentGatewayApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  body OAIPGApiTransactionRequest [required]
    */
    virtual void authorization(const OAIPGApiTransactionRequest &body);

    /**
    * @param[in]  body OAIPGApiBatchCloseRequest [required]
    */
    virtual void batch_Close(const OAIPGApiBatchCloseRequest &body);

    /**
    * @param[in]  pg_id_orig QString [required]
    * @param[in]  body OAIPGApiCaptureRequest [required]
    */
    virtual void capture(const QString &pg_id_orig, const OAIPGApiCaptureRequest &body);

    /**
    * @param[in]  body OAIPGApiTransactionRequest [required]
    */
    virtual void credit(const OAIPGApiTransactionRequest &body);

    /**
    * @param[in]  body OAIPGApiExpireTokenRequest [required]
    */
    virtual void expire(const OAIPGApiExpireTokenRequest &body);

    /**
    * @param[in]  body OAIPGApiTransactionRequest [required]
    */
    virtual void force(const OAIPGApiTransactionRequest &body);

    /**
    * @param[in]  body OAIArdefRequest [required]
    */
    virtual void get_Card_Type_Information_(const OAIArdefRequest &body);

    /**
    * @param[in]  pg_id_orig QString [required]
    * @param[in]  body OAIPGApiVoidRequest [required]
    */
    virtual void r_void(const QString &pg_id_orig, const OAIPGApiVoidRequest &body);

    /**
    * @param[in]  pg_id_orig QString [required]
    * @param[in]  body OAIPGApiRechargeRequest [required]
    */
    virtual void recharge(const QString &pg_id_orig, const OAIPGApiRechargeRequest &body);

    /**
    * @param[in]  pg_id_orig QString [required]
    * @param[in]  body OAIPGApiRefundRequest [required]
    */
    virtual void refund(const QString &pg_id_orig, const OAIPGApiRefundRequest &body);

    /**
    * @param[in]  body OAIPGApiTransactionRequest [required]
    */
    virtual void sale(const OAIPGApiTransactionRequest &body);

    /**
    * @param[in]  pg_id QString [required]
    * @param[in]  body OAIPGApiEmailReceiptRequest [required]
    */
    virtual void send_Receipt(const QString &pg_id, const OAIPGApiEmailReceiptRequest &body);

    /**
    * @param[in]  body OAIPGApiTokenizeRequest [required]
    */
    virtual void tokenize(const OAIPGApiTokenizeRequest &body);

    /**
    * @param[in]  body OAIPGApiVerifyRequest [required]
    */
    virtual void verify(const OAIPGApiVerifyRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizationCallback(OAIHttpRequestWorker *worker);
    void batch_CloseCallback(OAIHttpRequestWorker *worker);
    void captureCallback(OAIHttpRequestWorker *worker);
    void creditCallback(OAIHttpRequestWorker *worker);
    void expireCallback(OAIHttpRequestWorker *worker);
    void forceCallback(OAIHttpRequestWorker *worker);
    void get_Card_Type_Information_Callback(OAIHttpRequestWorker *worker);
    void r_voidCallback(OAIHttpRequestWorker *worker);
    void rechargeCallback(OAIHttpRequestWorker *worker);
    void refundCallback(OAIHttpRequestWorker *worker);
    void saleCallback(OAIHttpRequestWorker *worker);
    void send_ReceiptCallback(OAIHttpRequestWorker *worker);
    void tokenizeCallback(OAIHttpRequestWorker *worker);
    void verifyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizationSignal(OAIPGApiTransactionResponse summary);
    void batch_CloseSignal(OAIPGApiBatchCloseResponse summary);
    void captureSignal(OAIPGApiCaptureResponse summary);
    void creditSignal(OAIPGApiTransactionResponse summary);
    void expireSignal(OAIPGApiExpireTokenResponse summary);
    void forceSignal(OAIPGApiTransactionResponse summary);
    void get_Card_Type_Information_Signal(OAIArdefResponse summary);
    void r_voidSignal(OAIPGApiVoidResponse summary);
    void rechargeSignal(OAIPGApiRechargeResponse summary);
    void refundSignal(OAIPGApiRefundResponse summary);
    void saleSignal(OAIPGApiTransactionResponse summary);
    void send_ReceiptSignal(OAIPGApiEmailReceiptResponse summary);
    void tokenizeSignal(OAIPGApiTokenizeResponse summary);
    void verifySignal(OAIPGApiVerifyResponse summary);


    void authorizationSignalFull(OAIHttpRequestWorker *worker, OAIPGApiTransactionResponse summary);
    void batch_CloseSignalFull(OAIHttpRequestWorker *worker, OAIPGApiBatchCloseResponse summary);
    void captureSignalFull(OAIHttpRequestWorker *worker, OAIPGApiCaptureResponse summary);
    void creditSignalFull(OAIHttpRequestWorker *worker, OAIPGApiTransactionResponse summary);
    void expireSignalFull(OAIHttpRequestWorker *worker, OAIPGApiExpireTokenResponse summary);
    void forceSignalFull(OAIHttpRequestWorker *worker, OAIPGApiTransactionResponse summary);
    void get_Card_Type_Information_SignalFull(OAIHttpRequestWorker *worker, OAIArdefResponse summary);
    void r_voidSignalFull(OAIHttpRequestWorker *worker, OAIPGApiVoidResponse summary);
    void rechargeSignalFull(OAIHttpRequestWorker *worker, OAIPGApiRechargeResponse summary);
    void refundSignalFull(OAIHttpRequestWorker *worker, OAIPGApiRefundResponse summary);
    void saleSignalFull(OAIHttpRequestWorker *worker, OAIPGApiTransactionResponse summary);
    void send_ReceiptSignalFull(OAIHttpRequestWorker *worker, OAIPGApiEmailReceiptResponse summary);
    void tokenizeSignalFull(OAIHttpRequestWorker *worker, OAIPGApiTokenizeResponse summary);
    void verifySignalFull(OAIHttpRequestWorker *worker, OAIPGApiVerifyResponse summary);

    Q_DECL_DEPRECATED_X("Use authorizationSignalError() instead")
    void authorizationSignalE(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationSignalError(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batch_CloseSignalError() instead")
    void batch_CloseSignalE(OAIPGApiBatchCloseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batch_CloseSignalError(OAIPGApiBatchCloseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use captureSignalError() instead")
    void captureSignalE(OAIPGApiCaptureResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void captureSignalError(OAIPGApiCaptureResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditSignalError() instead")
    void creditSignalE(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditSignalError(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expireSignalError() instead")
    void expireSignalE(OAIPGApiExpireTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expireSignalError(OAIPGApiExpireTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forceSignalError() instead")
    void forceSignalE(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forceSignalError(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_Card_Type_Information_SignalError() instead")
    void get_Card_Type_Information_SignalE(OAIArdefResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Card_Type_Information_SignalError(OAIArdefResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_voidSignalError() instead")
    void r_voidSignalE(OAIPGApiVoidResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void r_voidSignalError(OAIPGApiVoidResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rechargeSignalError() instead")
    void rechargeSignalE(OAIPGApiRechargeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rechargeSignalError(OAIPGApiRechargeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refundSignalError() instead")
    void refundSignalE(OAIPGApiRefundResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refundSignalError(OAIPGApiRefundResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saleSignalError() instead")
    void saleSignalE(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saleSignalError(OAIPGApiTransactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use send_ReceiptSignalError() instead")
    void send_ReceiptSignalE(OAIPGApiEmailReceiptResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void send_ReceiptSignalError(OAIPGApiEmailReceiptResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokenizeSignalError() instead")
    void tokenizeSignalE(OAIPGApiTokenizeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenizeSignalError(OAIPGApiTokenizeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySignalError() instead")
    void verifySignalE(OAIPGApiVerifyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySignalError(OAIPGApiVerifyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizationSignalErrorFull() instead")
    void authorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batch_CloseSignalErrorFull() instead")
    void batch_CloseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batch_CloseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use captureSignalErrorFull() instead")
    void captureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void captureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditSignalErrorFull() instead")
    void creditSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expireSignalErrorFull() instead")
    void expireSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expireSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forceSignalErrorFull() instead")
    void forceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use get_Card_Type_Information_SignalErrorFull() instead")
    void get_Card_Type_Information_SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void get_Card_Type_Information_SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_voidSignalErrorFull() instead")
    void r_voidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_voidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rechargeSignalErrorFull() instead")
    void rechargeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rechargeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refundSignalErrorFull() instead")
    void refundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saleSignalErrorFull() instead")
    void saleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use send_ReceiptSignalErrorFull() instead")
    void send_ReceiptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void send_ReceiptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokenizeSignalErrorFull() instead")
    void tokenizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokenizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifySignalErrorFull() instead")
    void verifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
