/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPGApiRefundRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPGApiRefundRequest::OAIPGApiRefundRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPGApiRefundRequest::OAIPGApiRefundRequest() {
    this->initializeModel();
}

OAIPGApiRefundRequest::~OAIPGApiRefundRequest() {}

void OAIPGApiRefundRequest::initializeModel() {

    m_amt_tran_isSet = false;
    m_amt_tran_isValid = false;

    m_developer_id_isSet = false;
    m_developer_id_isValid = false;

    m_echo_fields_isSet = false;
    m_echo_fields_isValid = false;

    m_loc_id_isSet = false;
    m_loc_id_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_report_data_isSet = false;
    m_report_data_isValid = false;

    m_retry_attempt_isSet = false;
    m_retry_attempt_isValid = false;

    m_retry_id_isSet = false;
    m_retry_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_vendor_id_isSet = false;
    m_vendor_id_isValid = false;
}

void OAIPGApiRefundRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPGApiRefundRequest::fromJsonObject(QJsonObject json) {

    m_amt_tran_isValid = ::OpenAPI::fromJsonValue(m_amt_tran, json[QString("amt_tran")]);
    m_amt_tran_isSet = !json[QString("amt_tran")].isNull() && m_amt_tran_isValid;

    m_developer_id_isValid = ::OpenAPI::fromJsonValue(m_developer_id, json[QString("developer_id")]);
    m_developer_id_isSet = !json[QString("developer_id")].isNull() && m_developer_id_isValid;

    m_echo_fields_isValid = ::OpenAPI::fromJsonValue(m_echo_fields, json[QString("echo_fields")]);
    m_echo_fields_isSet = !json[QString("echo_fields")].isNull() && m_echo_fields_isValid;

    m_loc_id_isValid = ::OpenAPI::fromJsonValue(m_loc_id, json[QString("loc_id")]);
    m_loc_id_isSet = !json[QString("loc_id")].isNull() && m_loc_id_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchant_id")]);
    m_merchant_id_isSet = !json[QString("merchant_id")].isNull() && m_merchant_id_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profile_id")]);
    m_profile_id_isSet = !json[QString("profile_id")].isNull() && m_profile_id_isValid;

    m_report_data_isValid = ::OpenAPI::fromJsonValue(m_report_data, json[QString("report_data")]);
    m_report_data_isSet = !json[QString("report_data")].isNull() && m_report_data_isValid;

    m_retry_attempt_isValid = ::OpenAPI::fromJsonValue(m_retry_attempt, json[QString("retry_attempt")]);
    m_retry_attempt_isSet = !json[QString("retry_attempt")].isNull() && m_retry_attempt_isValid;

    m_retry_id_isValid = ::OpenAPI::fromJsonValue(m_retry_id, json[QString("retry_id")]);
    m_retry_id_isSet = !json[QString("retry_id")].isNull() && m_retry_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_vendor_id_isValid = ::OpenAPI::fromJsonValue(m_vendor_id, json[QString("vendor_id")]);
    m_vendor_id_isSet = !json[QString("vendor_id")].isNull() && m_vendor_id_isValid;
}

QString OAIPGApiRefundRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPGApiRefundRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amt_tran_isSet) {
        obj.insert(QString("amt_tran"), ::OpenAPI::toJsonValue(m_amt_tran));
    }
    if (m_developer_id_isSet) {
        obj.insert(QString("developer_id"), ::OpenAPI::toJsonValue(m_developer_id));
    }
    if (m_echo_fields_isSet) {
        obj.insert(QString("echo_fields"), ::OpenAPI::toJsonValue(m_echo_fields));
    }
    if (m_loc_id_isSet) {
        obj.insert(QString("loc_id"), ::OpenAPI::toJsonValue(m_loc_id));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchant_id"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profile_id"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_report_data_isSet) {
        obj.insert(QString("report_data"), ::OpenAPI::toJsonValue(m_report_data));
    }
    if (m_retry_attempt_isSet) {
        obj.insert(QString("retry_attempt"), ::OpenAPI::toJsonValue(m_retry_attempt));
    }
    if (m_retry_id_isSet) {
        obj.insert(QString("retry_id"), ::OpenAPI::toJsonValue(m_retry_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_vendor_id_isSet) {
        obj.insert(QString("vendor_id"), ::OpenAPI::toJsonValue(m_vendor_id));
    }
    return obj;
}

double OAIPGApiRefundRequest::getAmtTran() const {
    return m_amt_tran;
}
void OAIPGApiRefundRequest::setAmtTran(const double &amt_tran) {
    m_amt_tran = amt_tran;
    m_amt_tran_isSet = true;
}

bool OAIPGApiRefundRequest::is_amt_tran_Set() const{
    return m_amt_tran_isSet;
}

bool OAIPGApiRefundRequest::is_amt_tran_Valid() const{
    return m_amt_tran_isValid;
}

QString OAIPGApiRefundRequest::getDeveloperId() const {
    return m_developer_id;
}
void OAIPGApiRefundRequest::setDeveloperId(const QString &developer_id) {
    m_developer_id = developer_id;
    m_developer_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_developer_id_Set() const{
    return m_developer_id_isSet;
}

bool OAIPGApiRefundRequest::is_developer_id_Valid() const{
    return m_developer_id_isValid;
}

QString OAIPGApiRefundRequest::getEchoFields() const {
    return m_echo_fields;
}
void OAIPGApiRefundRequest::setEchoFields(const QString &echo_fields) {
    m_echo_fields = echo_fields;
    m_echo_fields_isSet = true;
}

bool OAIPGApiRefundRequest::is_echo_fields_Set() const{
    return m_echo_fields_isSet;
}

bool OAIPGApiRefundRequest::is_echo_fields_Valid() const{
    return m_echo_fields_isValid;
}

QString OAIPGApiRefundRequest::getLocId() const {
    return m_loc_id;
}
void OAIPGApiRefundRequest::setLocId(const QString &loc_id) {
    m_loc_id = loc_id;
    m_loc_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_loc_id_Set() const{
    return m_loc_id_isSet;
}

bool OAIPGApiRefundRequest::is_loc_id_Valid() const{
    return m_loc_id_isValid;
}

qint64 OAIPGApiRefundRequest::getMerchantId() const {
    return m_merchant_id;
}
void OAIPGApiRefundRequest::setMerchantId(const qint64 &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIPGApiRefundRequest::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIPGApiRefundRequest::getProfileId() const {
    return m_profile_id;
}
void OAIPGApiRefundRequest::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIPGApiRefundRequest::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAIPGApiRefundRequest::getReportData() const {
    return m_report_data;
}
void OAIPGApiRefundRequest::setReportData(const QString &report_data) {
    m_report_data = report_data;
    m_report_data_isSet = true;
}

bool OAIPGApiRefundRequest::is_report_data_Set() const{
    return m_report_data_isSet;
}

bool OAIPGApiRefundRequest::is_report_data_Valid() const{
    return m_report_data_isValid;
}

qint64 OAIPGApiRefundRequest::getRetryAttempt() const {
    return m_retry_attempt;
}
void OAIPGApiRefundRequest::setRetryAttempt(const qint64 &retry_attempt) {
    m_retry_attempt = retry_attempt;
    m_retry_attempt_isSet = true;
}

bool OAIPGApiRefundRequest::is_retry_attempt_Set() const{
    return m_retry_attempt_isSet;
}

bool OAIPGApiRefundRequest::is_retry_attempt_Valid() const{
    return m_retry_attempt_isValid;
}

qint64 OAIPGApiRefundRequest::getRetryId() const {
    return m_retry_id;
}
void OAIPGApiRefundRequest::setRetryId(const qint64 &retry_id) {
    m_retry_id = retry_id;
    m_retry_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_retry_id_Set() const{
    return m_retry_id_isSet;
}

bool OAIPGApiRefundRequest::is_retry_id_Valid() const{
    return m_retry_id_isValid;
}

QString OAIPGApiRefundRequest::getSessionId() const {
    return m_session_id;
}
void OAIPGApiRefundRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPGApiRefundRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

qint64 OAIPGApiRefundRequest::getUserId() const {
    return m_user_id;
}
void OAIPGApiRefundRequest::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPGApiRefundRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint64 OAIPGApiRefundRequest::getVendorId() const {
    return m_vendor_id;
}
void OAIPGApiRefundRequest::setVendorId(const qint64 &vendor_id) {
    m_vendor_id = vendor_id;
    m_vendor_id_isSet = true;
}

bool OAIPGApiRefundRequest::is_vendor_id_Set() const{
    return m_vendor_id_isSet;
}

bool OAIPGApiRefundRequest::is_vendor_id_Valid() const{
    return m_vendor_id_isValid;
}

bool OAIPGApiRefundRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amt_tran_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_echo_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPGApiRefundRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amt_tran_isValid && m_merchant_id_isValid && true;
}

} // namespace OpenAPI
