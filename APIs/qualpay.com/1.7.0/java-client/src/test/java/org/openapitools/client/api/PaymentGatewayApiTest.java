/*
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ArdefRequest;
import org.openapitools.client.model.ArdefResponse;
import org.openapitools.client.model.PGApiBadResponse;
import org.openapitools.client.model.PGApiBatchCloseRequest;
import org.openapitools.client.model.PGApiBatchCloseResponse;
import org.openapitools.client.model.PGApiCaptureRequest;
import org.openapitools.client.model.PGApiCaptureResponse;
import org.openapitools.client.model.PGApiDeclineResponse;
import org.openapitools.client.model.PGApiEmailReceiptRequest;
import org.openapitools.client.model.PGApiEmailReceiptResponse;
import org.openapitools.client.model.PGApiExpireTokenRequest;
import org.openapitools.client.model.PGApiExpireTokenResponse;
import org.openapitools.client.model.PGApiInternalErrorResponse;
import org.openapitools.client.model.PGApiRechargeRequest;
import org.openapitools.client.model.PGApiRechargeResponse;
import org.openapitools.client.model.PGApiRefundRequest;
import org.openapitools.client.model.PGApiRefundResponse;
import org.openapitools.client.model.PGApiResponse;
import org.openapitools.client.model.PGApiTimeoutResponse;
import org.openapitools.client.model.PGApiTokenizeRequest;
import org.openapitools.client.model.PGApiTokenizeResponse;
import org.openapitools.client.model.PGApiTransactionRequest;
import org.openapitools.client.model.PGApiTransactionResponse;
import org.openapitools.client.model.PGApiUnauthResponse;
import org.openapitools.client.model.PGApiVerifyRequest;
import org.openapitools.client.model.PGApiVerifyResponse;
import org.openapitools.client.model.PGApiVoidRequest;
import org.openapitools.client.model.PGApiVoidResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentGatewayApi
 */
@Disabled
public class PaymentGatewayApiTest {

    private final PaymentGatewayApi api = new PaymentGatewayApi();

    /**
     * Authorize Transaction
     *
     * Authorizes a credit card for capture at a later time. An authorized transaction will continue to be open until it expires or a capture message is received. Authorizations are automatically voided if they are not captured within 28 days, although most issuing banks will release the hold after 24 hours in retail environments or 7 days in card not present environments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizationTest() throws ApiException {
        PGApiTransactionRequest body = null;
        PGApiTransactionResponse response = api.authorization(body);
        // TODO: test validations
    }

    /**
     * Close Batch
     *
     * Closes a batch. Use this request when the timing of the batch close needs to be controlled rather than relying on the once-daily automatic batch close which is 9 PM Pacific by default, and can be changed in the Qualpay Manager administration settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCloseTest() throws ApiException {
        PGApiBatchCloseRequest body = null;
        PGApiBatchCloseResponse response = api.batchClose(body);
        // TODO: test validations
    }

    /**
     * Void a Previously Authorized Transaction
     *
     * Authorizations can be voided at any time until Qualpay automatically voids them at 28 days. Captured transactions can be voided until the batch is closed. If your batch closes and you did not void the transaction in time, you may make a refund request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void callVoidTest() throws ApiException {
        String pgIdOrig = null;
        PGApiVoidRequest body = null;
        PGApiVoidResponse response = api.callVoid(pgIdOrig, body);
        // TODO: test validations
    }

    /**
     * Capture an Authorized Transaction
     *
     * Captures an authorized transaction for any amount up to the amount originally authorized. An authorized transaction can only be captured once.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void captureTest() throws ApiException {
        String pgIdOrig = null;
        PGApiCaptureRequest body = null;
        PGApiCaptureResponse response = api.capture(pgIdOrig, body);
        // TODO: test validations
    }

    /**
     * Issue Credit to Cardholder
     *
     * Issues an unlinked credit. Credit requests require that the cardholder data is  provided in the request. Credits are only available during the first 30 days of account opening unless you contact Qualpay support to make other arrangements. The refund request should generally be used to return money to the cardholder, as it is a reversal of a previously captured transaction. A refund request is linked to the original transaction which is helpful for reconciliation purposes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void creditTest() throws ApiException {
        PGApiTransactionRequest body = null;
        PGApiTransactionResponse response = api.credit(body);
        // TODO: test validations
    }

    /**
     * Expire Token
     *
     * Once expired, the token (card_id) is no longer valid for use in future transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expireTest() throws ApiException {
        PGApiExpireTokenRequest body = null;
        PGApiExpireTokenResponse response = api.expire(body);
        // TODO: test validations
    }

    /**
     * Force Transaction Approval
     *
     * Forces an approval, used when an online authorization request received a &#39;declined&#39; reason code and you have received an authorization from a voice or automated response (ARU) system. The required fields are the same as a sale or authorization request, except that the expiration date (exp_date) is not required, and the 6-character authorization code (auth_code) is required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forceTest() throws ApiException {
        PGApiTransactionRequest body = null;
        PGApiTransactionResponse response = api.force(body);
        // TODO: test validations
    }

    /**
     * Get Card type Information for Visa, Mastercard, and Discover
     *
     * Gets Card type information for Visa, Mastercard, and Discover. Useful if you prohibit or allow certain activity based on card type. For example, you may not want to allow a subscription to be created using a prepaid card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardTypeInformationTest() throws ApiException {
        ArdefRequest body = null;
        ArdefResponse response = api.getCardTypeInformation(body);
        // TODO: test validations
    }

    /**
     * Recharge Previously Settled Transaction
     *
     * Creates a new sale transaction using the cardholder data from a previous successful transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rechargeTest() throws ApiException {
        String pgIdOrig = null;
        PGApiRechargeRequest body = null;
        PGApiRechargeResponse response = api.recharge(pgIdOrig, body);
        // TODO: test validations
    }

    /**
     * Refund Previously Captured Transaction
     *
     * Returns money to the cardholder from a previously captured transaction. Multiple refunds are allowed per captured transaction, provided that the sum of all refunds does not exceed the original captured transaction amount. Authorizations that have not been captured are not eligible for a refund.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refundTest() throws ApiException {
        String pgIdOrig = null;
        PGApiRefundRequest body = null;
        PGApiRefundResponse response = api.refund(pgIdOrig, body);
        // TODO: test validations
    }

    /**
     * Sale (Auth + Capture)
     *
     * Requests authorization, and, if approved, will immediately capture the transaction to be included in the next batch close. This transaction type is used in card-present environments, and also card-not-present environments where no physical goods are being shipped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saleTest() throws ApiException {
        PGApiTransactionRequest body = null;
        PGApiTransactionResponse response = api.sale(body);
        // TODO: test validations
    }

    /**
     * Send Transaction Receipt Email
     *
     * Sends the transaction receipt to multiple email addresses. Receipts can be sent only for successful transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendReceiptTest() throws ApiException {
        String pgId = null;
        PGApiEmailReceiptRequest body = null;
        PGApiEmailReceiptResponse response = api.sendReceipt(pgId, body);
        // TODO: test validations
    }

    /**
     * Tokenize Card
     *
     * Once stored, a unique card_id is returned for use in future transactions. Optionally, tokenization can be requested in an authorization, verify, force, credit, or sale request by sending the tokenize field set to true.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tokenizeTest() throws ApiException {
        PGApiTokenizeRequest body = null;
        PGApiTokenizeResponse response = api.tokenize(body);
        // TODO: test validations
    }

    /**
     * Verify Card
     *
     * A verify request will return success if the cardholder information was verified by the issuer. If AVS or CVV data is included in the message, then the AVS or CVV result code will be returned in the response message. This is useful if you want to determine if you have been presented with a valid card, but are not ready to authorize the card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyTest() throws ApiException {
        PGApiVerifyRequest body = null;
        PGApiVerifyResponse response = api.verify(body);
        // TODO: test validations
    }

}
