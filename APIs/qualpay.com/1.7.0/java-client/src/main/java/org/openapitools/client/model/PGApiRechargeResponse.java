/*
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PGApiRechargeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:08.449119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PGApiRechargeResponse {
  public static final String SERIALIZED_NAME_ECHO_FIELDS = "echo_fields";
  @SerializedName(SERIALIZED_NAME_ECHO_FIELDS)
  private String echoFields;

  public static final String SERIALIZED_NAME_PG_ID = "pg_id";
  @SerializedName(SERIALIZED_NAME_PG_ID)
  private String pgId;

  public static final String SERIALIZED_NAME_RCODE = "rcode";
  @SerializedName(SERIALIZED_NAME_RCODE)
  private String rcode;

  public static final String SERIALIZED_NAME_RMSG = "rmsg";
  @SerializedName(SERIALIZED_NAME_RMSG)
  private String rmsg;

  public PGApiRechargeResponse() {
  }

  public PGApiRechargeResponse(
     String echoFields, 
     String pgId, 
     String rcode, 
     String rmsg
  ) {
    this();
    this.echoFields = echoFields;
    this.pgId = pgId;
    this.rcode = rcode;
    this.rmsg = rmsg;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Data that was provided in echo_fields in the request.
   * @return echoFields
   */
  @javax.annotation.Nullable
  public String getEchoFields() {
    return echoFields;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;32-byte unique identifier generated by the payment gateway, returned in all valid responses.
   * @return pgId
   */
  @javax.annotation.Nullable
  public String getPgId() {
    return pgId;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 3 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Response code from the payment gateway. \&quot;000\&quot; indicates success. Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#api-response-codes\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Platform API Response Codes&lt;/a&gt; for entire list of Payment Gateway Response Codes.
   * @return rcode
   */
  @javax.annotation.Nullable
  public String getRcode() {
    return rcode;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Response text from the payment gateway.
   * @return rmsg
   */
  @javax.annotation.Nullable
  public String getRmsg() {
    return rmsg;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PGApiRechargeResponse pgApiRechargeResponse = (PGApiRechargeResponse) o;
    return Objects.equals(this.echoFields, pgApiRechargeResponse.echoFields) &&
        Objects.equals(this.pgId, pgApiRechargeResponse.pgId) &&
        Objects.equals(this.rcode, pgApiRechargeResponse.rcode) &&
        Objects.equals(this.rmsg, pgApiRechargeResponse.rmsg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(echoFields, pgId, rcode, rmsg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PGApiRechargeResponse {\n");
    sb.append("    echoFields: ").append(toIndentedString(echoFields)).append("\n");
    sb.append("    pgId: ").append(toIndentedString(pgId)).append("\n");
    sb.append("    rcode: ").append(toIndentedString(rcode)).append("\n");
    sb.append("    rmsg: ").append(toIndentedString(rmsg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("echo_fields");
    openapiFields.add("pg_id");
    openapiFields.add("rcode");
    openapiFields.add("rmsg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PGApiRechargeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PGApiRechargeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PGApiRechargeResponse is not found in the empty JSON string", PGApiRechargeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PGApiRechargeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PGApiRechargeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("echo_fields") != null && !jsonObj.get("echo_fields").isJsonNull()) && !jsonObj.get("echo_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `echo_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("echo_fields").toString()));
      }
      if ((jsonObj.get("pg_id") != null && !jsonObj.get("pg_id").isJsonNull()) && !jsonObj.get("pg_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_id").toString()));
      }
      if ((jsonObj.get("rcode") != null && !jsonObj.get("rcode").isJsonNull()) && !jsonObj.get("rcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rcode").toString()));
      }
      if ((jsonObj.get("rmsg") != null && !jsonObj.get("rmsg").isJsonNull()) && !jsonObj.get("rmsg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rmsg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rmsg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PGApiRechargeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PGApiRechargeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PGApiRechargeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PGApiRechargeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PGApiRechargeResponse>() {
           @Override
           public void write(JsonWriter out, PGApiRechargeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PGApiRechargeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PGApiRechargeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PGApiRechargeResponse
   * @throws IOException if the JSON string is invalid with respect to PGApiRechargeResponse
   */
  public static PGApiRechargeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PGApiRechargeResponse.class);
  }

  /**
   * Convert an instance of PGApiRechargeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

