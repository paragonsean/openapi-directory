/*
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Customer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PGApiTransactionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:08.449119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PGApiTransactionRequest {
  public static final String SERIALIZED_NAME_AMT_CONVENIENCE_FEE = "amt_convenience_fee";
  @SerializedName(SERIALIZED_NAME_AMT_CONVENIENCE_FEE)
  private Double amtConvenienceFee;

  public static final String SERIALIZED_NAME_AMT_FBO = "amt_fbo";
  @SerializedName(SERIALIZED_NAME_AMT_FBO)
  private Double amtFbo;

  public static final String SERIALIZED_NAME_AMT_TAX = "amt_tax";
  @SerializedName(SERIALIZED_NAME_AMT_TAX)
  private Double amtTax;

  public static final String SERIALIZED_NAME_AMT_TRAN = "amt_tran";
  @SerializedName(SERIALIZED_NAME_AMT_TRAN)
  private Double amtTran;

  public static final String SERIALIZED_NAME_AMT_TRAN_FEE = "amt_tran_fee";
  @SerializedName(SERIALIZED_NAME_AMT_TRAN_FEE)
  private Double amtTranFee;

  public static final String SERIALIZED_NAME_AUTH_CODE = "auth_code";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_AVS_ADDRESS = "avs_address";
  @SerializedName(SERIALIZED_NAME_AVS_ADDRESS)
  private String avsAddress;

  public static final String SERIALIZED_NAME_AVS_ZIP = "avs_zip";
  @SerializedName(SERIALIZED_NAME_AVS_ZIP)
  private String avsZip;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "card_number";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CARD_SWIPE = "card_swipe";
  @SerializedName(SERIALIZED_NAME_CARD_SWIPE)
  private String cardSwipe;

  public static final String SERIALIZED_NAME_CARDHOLDER_NAME = "cardholder_name";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_NAME)
  private String cardholderName;

  public static final String SERIALIZED_NAME_CAVV3DS = "cavv_3ds";
  @SerializedName(SERIALIZED_NAME_CAVV3DS)
  private String cavv3ds;

  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_CUSTOMER_CODE = "customer_code";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CODE)
  private String customerCode;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customer_email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CVV2 = "cvv2";
  @SerializedName(SERIALIZED_NAME_CVV2)
  private String cvv2;

  public static final String SERIALIZED_NAME_DBA_NAME = "dba_name";
  @SerializedName(SERIALIZED_NAME_DBA_NAME)
  private String dbaName;

  public static final String SERIALIZED_NAME_DBA_SUFFIX = "dba_suffix";
  @SerializedName(SERIALIZED_NAME_DBA_SUFFIX)
  private String dbaSuffix;

  public static final String SERIALIZED_NAME_DDA_NUMBER = "dda_number";
  @SerializedName(SERIALIZED_NAME_DDA_NUMBER)
  private String ddaNumber;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developer_id";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_DUPLICATE_SECONDS = "duplicate_seconds";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_SECONDS)
  private Long duplicateSeconds;

  public static final String SERIALIZED_NAME_ECHO_FIELDS = "echo_fields";
  @SerializedName(SERIALIZED_NAME_ECHO_FIELDS)
  private String echoFields;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private List<String> emailAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_RECEIPT = "email_receipt";
  @SerializedName(SERIALIZED_NAME_EMAIL_RECEIPT)
  private Boolean emailReceipt;

  public static final String SERIALIZED_NAME_EMV_TRAN_ID = "emv_tran_id";
  @SerializedName(SERIALIZED_NAME_EMV_TRAN_ID)
  private String emvTranId;

  public static final String SERIALIZED_NAME_EXP_DATE = "exp_date";
  @SerializedName(SERIALIZED_NAME_EXP_DATE)
  private String expDate;

  public static final String SERIALIZED_NAME_FBO_ID = "fbo_id";
  @SerializedName(SERIALIZED_NAME_FBO_ID)
  private Long fboId;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "line_items";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private String lineItems;

  public static final String SERIALIZED_NAME_LOC_ID = "loc_id";
  @SerializedName(SERIALIZED_NAME_LOC_ID)
  private String locId;

  public static final String SERIALIZED_NAME_MC_UCAF_DATA = "mc_ucaf_data";
  @SerializedName(SERIALIZED_NAME_MC_UCAF_DATA)
  private String mcUcafData;

  public static final String SERIALIZED_NAME_MC_UCAF_IND = "mc_ucaf_ind";
  @SerializedName(SERIALIZED_NAME_MC_UCAF_IND)
  private String mcUcafInd;

  public static final String SERIALIZED_NAME_MERCH_REF_NUM = "merch_ref_num";
  @SerializedName(SERIALIZED_NAME_MERCH_REF_NUM)
  private String merchRefNum;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private Long merchantId;

  public static final String SERIALIZED_NAME_MOTO_ECOMM_IND = "moto_ecomm_ind";
  @SerializedName(SERIALIZED_NAME_MOTO_ECOMM_IND)
  private String motoEcommInd;

  public static final String SERIALIZED_NAME_PARTIAL_AUTH = "partial_auth";
  @SerializedName(SERIALIZED_NAME_PARTIAL_AUTH)
  private Boolean partialAuth;

  public static final String SERIALIZED_NAME_PAYLOAD_APPLE_PAY = "payload_apple_pay";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_APPLE_PAY)
  private String payloadApplePay;

  public static final String SERIALIZED_NAME_PAYLOAD_GOOGLE_PAY = "payload_google_pay";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_GOOGLE_PAY)
  private String payloadGooglePay;

  public static final String SERIALIZED_NAME_PG_ID = "pg_id";
  @SerializedName(SERIALIZED_NAME_PG_ID)
  private String pgId;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profile_id";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_PURCHASE_ID = "purchase_id";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ID)
  private String purchaseId;

  public static final String SERIALIZED_NAME_REPORT_DATA = "report_data";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA)
  private String reportData;

  public static final String SERIALIZED_NAME_RETRY_ATTEMPT = "retry_attempt";
  @SerializedName(SERIALIZED_NAME_RETRY_ATTEMPT)
  private Long retryAttempt;

  public static final String SERIALIZED_NAME_RETRY_ID = "retry_id";
  @SerializedName(SERIALIZED_NAME_RETRY_ID)
  private Long retryId;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private Long subscriptionId;

  public static final String SERIALIZED_NAME_TOKENIZE = "tokenize";
  @SerializedName(SERIALIZED_NAME_TOKENIZE)
  private Boolean tokenize;

  public static final String SERIALIZED_NAME_TR_NUMBER = "tr_number";
  @SerializedName(SERIALIZED_NAME_TR_NUMBER)
  private String trNumber;

  public static final String SERIALIZED_NAME_TRAN_CURRENCY = "tran_currency";
  @SerializedName(SERIALIZED_NAME_TRAN_CURRENCY)
  private Integer tranCurrency;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private String typeId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendor_id";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private Long vendorId;

  public static final String SERIALIZED_NAME_XID3DS = "xid_3ds";
  @SerializedName(SERIALIZED_NAME_XID3DS)
  private String xid3ds;

  public PGApiTransactionRequest() {
  }

  public PGApiTransactionRequest amtConvenienceFee(Double amtConvenienceFee) {
    this.amtConvenienceFee = amtConvenienceFee;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 8,2 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Amount of convenience fee. A convenience fee is a fee charged to your customer for the \&quot;convenience\&quot; of being able to pay using an alternative payment channel outside your merchant&#39;s customary payment channel. Must be a flat/fixed fee amount per transaction. This field tracks the convenience fee amount for display purposes, but the amount of the fee must be included in amt_tran.
   * @return amtConvenienceFee
   */
  @javax.annotation.Nullable
  public Double getAmtConvenienceFee() {
    return amtConvenienceFee;
  }

  public void setAmtConvenienceFee(Double amtConvenienceFee) {
    this.amtConvenienceFee = amtConvenienceFee;
  }


  public PGApiTransactionRequest amtFbo(Double amtFbo) {
    this.amtFbo = amtFbo;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12,2 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Total amount of transaction to be transferred to the \&quot;for benefit of\&quot; (FBO) account.
   * @return amtFbo
   */
  @javax.annotation.Nullable
  public Double getAmtFbo() {
    return amtFbo;
  }

  public void setAmtFbo(Double amtFbo) {
    this.amtFbo = amtFbo;
  }


  public PGApiTransactionRequest amtTax(Double amtTax) {
    this.amtTax = amtTax;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12,2 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Amount of sales tax included in the total transaction amount. This field tracks the tax amount for display and interchange purposes, but the amount of the tax must be included in amt_tran.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Required for Level 2 and Level 3 interchange qualification.
   * @return amtTax
   */
  @javax.annotation.Nullable
  public Double getAmtTax() {
    return amtTax;
  }

  public void setAmtTax(Double amtTax) {
    this.amtTax = amtTax;
  }


  public PGApiTransactionRequest amtTran(Double amtTran) {
    this.amtTran = amtTran;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12,2 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Total amount of transaction including sales tax (amt_tax), convenience fee (amt_convenience_fee), and/or surcharge (amt_tran_fee) if applicable.
   * @return amtTran
   */
  @javax.annotation.Nullable
  public Double getAmtTran() {
    return amtTran;
  }

  public void setAmtTran(Double amtTran) {
    this.amtTran = amtTran;
  }


  public PGApiTransactionRequest amtTranFee(Double amtTranFee) {
    this.amtTranFee = amtTranFee;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 8,2 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Amount of transaction surcharge fee. A surcharge is a fee added to the cost of a purchase for the \&quot;privilege\&quot; of using a credit card instead of another form of payment, and can be a percentage of the transaction amount or fixed amount of up to 4% of amt_tran. This field tracks the surcharge amount of the transaction for display purposes, but the amount of the fee must be included in amt_tran.
   * @return amtTranFee
   */
  @javax.annotation.Nullable
  public Double getAmtTranFee() {
    return amtTranFee;
  }

  public void setAmtTranFee(Double amtTranFee) {
    this.amtTranFee = amtTranFee;
  }


  public PGApiTransactionRequest authCode(String authCode) {
    this.authCode = authCode;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 6 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field should contain the 6-character authorization code that was received during a voice or Automated Response Unit(ARU) authorization for force request type. This is field is applicable to only force request type.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;This field is required in force request type.
   * @return authCode
   */
  @javax.annotation.Nullable
  public String getAuthCode() {
    return authCode;
  }

  public void setAuthCode(String authCode) {
    this.authCode = authCode;
  }


  public PGApiTransactionRequest avsAddress(String avsAddress) {
    this.avsAddress = avsAddress;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 20 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.
   * @return avsAddress
   */
  @javax.annotation.Nullable
  public String getAvsAddress() {
    return avsAddress;
  }

  public void setAvsAddress(String avsAddress) {
    this.avsAddress = avsAddress;
  }


  public PGApiTransactionRequest avsZip(String avsZip) {
    this.avsZip = avsZip;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 9 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;This field is required if avs_address is present.
   * @return avsZip
   */
  @javax.annotation.Nullable
  public String getAvsZip() {
    return avsZip;
  }

  public void setAvsZip(String avsZip) {
    this.avsZip = avsZip;
  }


  public PGApiTransactionRequest cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Card ID received from a tokenization request. The card_id may be used in place of a card number or card swipe.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public PGApiTransactionRequest cardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 19 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Cardholder&#39;s card number.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return cardNumber
   */
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public PGApiTransactionRequest cardSwipe(String cardSwipe) {
    this.cardSwipe = cardSwipe;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 79 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Contains either track 1 or track 2 magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return cardSwipe
   */
  @javax.annotation.Nullable
  public String getCardSwipe() {
    return cardSwipe;
  }

  public void setCardSwipe(String cardSwipe) {
    this.cardSwipe = cardSwipe;
  }


  public PGApiTransactionRequest cardholderName(String cardholderName) {
    this.cardholderName = cardholderName;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 64 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.
   * @return cardholderName
   */
  @javax.annotation.Nullable
  public String getCardholderName() {
    return cardholderName;
  }

  public void setCardholderName(String cardholderName) {
    this.cardholderName = cardholderName;
  }


  public PGApiTransactionRequest cavv3ds(String cavv3ds) {
    this.cavv3ds = cavv3ds;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 28 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Base 64 encoded CAVV returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for Visa 3D Secure transactions.
   * @return cavv3ds
   */
  @javax.annotation.Nullable
  public String getCavv3ds() {
    return cavv3ds;
  }

  public void setCavv3ds(String cavv3ds) {
    this.cavv3ds = cavv3ds;
  }


  public PGApiTransactionRequest clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Client IP address.
   * @return clientIp
   */
  @javax.annotation.Nullable
  public String getClientIp() {
    return clientIp;
  }

  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }


  public PGApiTransactionRequest customer(Customer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public PGApiTransactionRequest customerCode(String customerCode) {
    this.customerCode = customerCode;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 17 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Reference code supplied by the cardholder to the merchant.
   * @return customerCode
   */
  @javax.annotation.Nullable
  public String getCustomerCode() {
    return customerCode;
  }

  public void setCustomerCode(String customerCode) {
    this.customerCode = customerCode;
  }


  public PGApiTransactionRequest customerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;&lt;strong&gt;[Deprecated use email_address]&lt;/strong&gt; Comma-separated list of e-mail addresses to which a receipt should be sent.
   * @return customerEmail
   */
  @javax.annotation.Nullable
  public String getCustomerEmail() {
    return customerEmail;
  }

  public void setCustomerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
  }


  public PGApiTransactionRequest customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer ID value established by the merchant. The customer_id may be used in place of a card number in requests requiring cardholder account data. When used with a card_id or card_number or card_swipe, the request will be tied to the customer_id in Qualpay reporting. &lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public PGApiTransactionRequest cvv2(String cvv2) {
    this.cvv2 = cvv2;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;CVV2 or CID value from the signature panel on the back of the cardholder&#39;s card. If present during a request that requires authorization, the value will be sent to the issuer for validation.
   * @return cvv2
   */
  @javax.annotation.Nullable
  public String getCvv2() {
    return cvv2;
  }

  public void setCvv2(String cvv2) {
    this.cvv2 = cvv2;
  }


  public PGApiTransactionRequest dbaName(String dbaName) {
    this.dbaName = dbaName;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 21 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;When the merchant has been authorized to send dynamic DBA information, this field will contain the DBA name used by Qulapay in the authorization and clearing messages.&lt;br&gt;Note: the payment gateway will automatically add a prefix plus an asterisk (*) to the dba_name value. For example, if the prefix is ABC and the dba_name value is SHOE CO, the DBA name will show as \&quot;ABC*SHOE CO\&quot; on the cardholder&#39;s credit card statement.
   * @return dbaName
   */
  @javax.annotation.Nullable
  public String getDbaName() {
    return dbaName;
  }

  public void setDbaName(String dbaName) {
    this.dbaName = dbaName;
  }


  public PGApiTransactionRequest dbaSuffix(String dbaSuffix) {
    this.dbaSuffix = dbaSuffix;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 9 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;For use by merchants using negative option marketing.  This field must be used in the first transaction at the conclusion of the free or reduced trial. This suffix will be appended to the end of your DBA and the result will appear on the cardholder statement. (If your DBA and suffix contain more that 25 characters, your DBA will be truncated.) Possible values are: &lt;ul&gt;&lt;li&gt;END DSCNT&lt;/li&gt;&lt;li&gt;END OFFER&lt;/li&gt;&lt;li&gt;END PROMO&lt;/li&gt;&lt;li&gt;END TRIAL&lt;/li&gt;&lt;/ul&gt;
   * @return dbaSuffix
   */
  @javax.annotation.Nullable
  public String getDbaSuffix() {
    return dbaSuffix;
  }

  public void setDbaSuffix(String dbaSuffix) {
    this.dbaSuffix = dbaSuffix;
  }


  public PGApiTransactionRequest ddaNumber(String ddaNumber) {
    this.ddaNumber = ddaNumber;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 17 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Owner&#39;s account number at the bank. Applicable for ACH payments.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return ddaNumber
   */
  @javax.annotation.Nullable
  public String getDdaNumber() {
    return ddaNumber;
  }

  public void setDdaNumber(String ddaNumber) {
    this.ddaNumber = ddaNumber;
  }


  public PGApiTransactionRequest developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 
   * @return developerId
   */
  @javax.annotation.Nullable
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }


  public PGApiTransactionRequest duplicateSeconds(Long duplicateSeconds) {
    this.duplicateSeconds = duplicateSeconds;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 5 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Duplicate transaction window in seconds. Qualpay will reject any transactions after a successful transaction within the duplicate_seconds window with a duplicate Account Number and optionally Purchase ID or, and, Merchant Reference Number. This value overrides any value set for a merchant on Qualpay Manager.
   * @return duplicateSeconds
   */
  @javax.annotation.Nullable
  public Long getDuplicateSeconds() {
    return duplicateSeconds;
  }

  public void setDuplicateSeconds(Long duplicateSeconds) {
    this.duplicateSeconds = duplicateSeconds;
  }


  public PGApiTransactionRequest echoFields(String echoFields) {
    this.echoFields = echoFields;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a JSON array of field data that will be echoed back in the response message.
   * @return echoFields
   */
  @javax.annotation.Nullable
  public String getEchoFields() {
    return echoFields;
  }

  public void setEchoFields(String echoFields) {
    this.echoFields = echoFields;
  }


  public PGApiTransactionRequest emailAddress(List<String> emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  public PGApiTransactionRequest addEmailAddressItem(String emailAddressItem) {
    if (this.emailAddress == null) {
      this.emailAddress = new ArrayList<>();
    }
    this.emailAddress.add(emailAddressItem);
    return this;
  }

  /**
   *  AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;An array of email addresses to which the transaction receipt should be sent to. 
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public List<String> getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(List<String> emailAddress) {
    this.emailAddress = emailAddress;
  }


  public PGApiTransactionRequest emailReceipt(Boolean emailReceipt) {
    this.emailReceipt = emailReceipt;
    return this;
  }

  /**
   * &lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;false&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;When this field is provided and set to true, a customer_email must also be provided. When these two fields are provided, a transaction receipt will be sent via e-mail to the address(es) provided in the customer_email field.
   * @return emailReceipt
   */
  @javax.annotation.Nullable
  public Boolean getEmailReceipt() {
    return emailReceipt;
  }

  public void setEmailReceipt(Boolean emailReceipt) {
    this.emailReceipt = emailReceipt;
  }


  public PGApiTransactionRequest emvTranId(String emvTranId) {
    this.emvTranId = emvTranId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 36 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Base64 encoded MasterCard UCAF Transaction ID returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
   * @return emvTranId
   */
  @javax.annotation.Nullable
  public String getEmvTranId() {
    return emvTranId;
  }

  public void setEmvTranId(String emvTranId) {
    this.emvTranId = emvTranId;
  }


  public PGApiTransactionRequest expDate(String expDate) {
    this.expDate = expDate;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 4 N, MMYY format&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Expiration date of cardholder card number.  When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return expDate
   */
  @javax.annotation.Nullable
  public String getExpDate() {
    return expDate;
  }

  public void setExpDate(String expDate) {
    this.expDate = expDate;
  }


  public PGApiTransactionRequest fboId(Long fboId) {
    this.fboId = fboId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 16 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;For Benefit Of (FBO) merchant account identifier on the Qualpay system. Contact Qualpay customer support to obtain your FBO information.
   * @return fboId
   */
  @javax.annotation.Nullable
  public Long getFboId() {
    return fboId;
  }

  public void setFboId(Long fboId) {
    this.fboId = fboId;
  }


  public PGApiTransactionRequest lineItems(String lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;JSON array of JSON objects. Each object represents a single line item detail element related to the transaction. Each detail element has required subfields: &lt;br&gt;quantity (7N)&lt;br&gt; description (26AN)&lt;br&gt; unit_of_measure (12AN)&lt;br&gt; product_code (12AN) - cannot be all zeroes&lt;br&gt; debit_credit_ind (1 AN)&lt;br&gt; unit_cost (12,2N)&lt;br&gt; Optional subfields: &lt;br&gt;type_of_supply (2AN) - visa only&lt;br&gt;commodity_code - visa only(12AN)&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt; This field is required for Level 3 interchange qualification.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public String getLineItems() {
    return lineItems;
  }

  public void setLineItems(String lineItems) {
    this.lineItems = lineItems;
  }


  public PGApiTransactionRequest locId(String locId) {
    this.locId = locId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.
   * @return locId
   */
  @javax.annotation.Nullable
  public String getLocId() {
    return locId;
  }

  public void setLocId(String locId) {
    this.locId = locId;
  }


  public PGApiTransactionRequest mcUcafData(String mcUcafData) {
    this.mcUcafData = mcUcafData;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Base64 encoded MasterCard UCAF Field Data returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
   * @return mcUcafData
   */
  @javax.annotation.Nullable
  public String getMcUcafData() {
    return mcUcafData;
  }

  public void setMcUcafData(String mcUcafData) {
    this.mcUcafData = mcUcafData;
  }


  public PGApiTransactionRequest mcUcafInd(String mcUcafInd) {
    this.mcUcafInd = mcUcafInd;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 1 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;MasterCard UCAF Collection Indicator returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
   * @return mcUcafInd
   */
  @javax.annotation.Nullable
  public String getMcUcafInd() {
    return mcUcafInd;
  }

  public void setMcUcafInd(String mcUcafInd) {
    this.mcUcafInd = mcUcafInd;
  }


  public PGApiTransactionRequest merchRefNum(String merchRefNum) {
    this.merchRefNum = merchRefNum;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 128 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Merchant provided reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.
   * @return merchRefNum
   */
  @javax.annotation.Nullable
  public String getMerchRefNum() {
    return merchRefNum;
  }

  public void setMerchRefNum(String merchRefNum) {
    this.merchRefNum = merchRefNum;
  }


  public PGApiTransactionRequest merchantId(Long merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Unique identifier on the Qualpay system.
   * @return merchantId
   */
  @javax.annotation.Nonnull
  public Long getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(Long merchantId) {
    this.merchantId = merchantId;
  }


  public PGApiTransactionRequest motoEcommInd(String motoEcommInd) {
    this.motoEcommInd = motoEcommInd;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 1 N&lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;7&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Indicates type of MOTO transaction: &lt;ul&gt;&lt;li&gt;0 &#x3D; Card Present (not MOTO/e-Commerce)&lt;/li&gt;&lt;li&gt; 1 &#x3D; One Time MOTO transaction&lt;/li&gt;&lt;li&gt;2 &#x3D; Recurring &lt;/li&gt;&lt;li&gt;3 &#x3D; Installment &lt;/li&gt;&lt;li&gt;5 &#x3D; Full 3D-Secure transaction&lt;/li&gt;&lt;li&gt;6 &#x3D; Merchant 3D-Secure transaction&lt;/li&gt;&lt;li&gt;7 &#x3D; e-Commerce Channel Encrypted (SSL)&lt;/li&gt;&lt;/ul&gt;
   * @return motoEcommInd
   */
  @javax.annotation.Nullable
  public String getMotoEcommInd() {
    return motoEcommInd;
  }

  public void setMotoEcommInd(String motoEcommInd) {
    this.motoEcommInd = motoEcommInd;
  }


  public PGApiTransactionRequest partialAuth(Boolean partialAuth) {
    this.partialAuth = partialAuth;
    return this;
  }

  /**
   * &lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;false&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field must be present and set to a value of &#39;true&#39; in order for the request to allow for approval of a partial amount. This would be used to allow a merchant to accept a partial payment from pre-paid or debit cards. When only part of the requested amount is available, the response code will be 010 and the amt_tran field in the response will contain the amount that was approved. A second sale request  on a different card is needed  to capture the remaining amount. Applicable to auth and sale request types.
   * @return partialAuth
   */
  @javax.annotation.Nullable
  public Boolean getPartialAuth() {
    return partialAuth;
  }

  public void setPartialAuth(Boolean partialAuth) {
    this.partialAuth = partialAuth;
  }


  public PGApiTransactionRequest payloadApplePay(String payloadApplePay) {
    this.payloadApplePay = payloadApplePay;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Apple Pay payload
   * @return payloadApplePay
   */
  @javax.annotation.Nullable
  public String getPayloadApplePay() {
    return payloadApplePay;
  }

  public void setPayloadApplePay(String payloadApplePay) {
    this.payloadApplePay = payloadApplePay;
  }


  public PGApiTransactionRequest payloadGooglePay(String payloadGooglePay) {
    this.payloadGooglePay = payloadGooglePay;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Google Pay payload
   * @return payloadGooglePay
   */
  @javax.annotation.Nullable
  public String getPayloadGooglePay() {
    return payloadGooglePay;
  }

  public void setPayloadGooglePay(String payloadGooglePay) {
    this.payloadGooglePay = payloadGooglePay;
  }


  public PGApiTransactionRequest pgId(String pgId) {
    this.pgId = pgId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;PG ID of previously authorized transaction. This field is required when sending a capture, refund, or void request.
   * @return pgId
   */
  @javax.annotation.Nullable
  public String getPgId() {
    return pgId;
  }

  public void setPgId(String pgId) {
    this.pgId = pgId;
  }


  public PGApiTransactionRequest profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 20 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Explicitly identifies which Payment Gateway profile should be used for the request.
   * @return profileId
   */
  @javax.annotation.Nullable
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public PGApiTransactionRequest purchaseId(String purchaseId) {
    this.purchaseId = purchaseId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 25 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Purchase Identifier (also referred to as the invoice number generated by the merchant).&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt; This field is required for Level 2 and Level 3 interchange qualification.
   * @return purchaseId
   */
  @javax.annotation.Nullable
  public String getPurchaseId() {
    return purchaseId;
  }

  public void setPurchaseId(String purchaseId) {
    this.purchaseId = purchaseId;
  }


  public PGApiTransactionRequest reportData(String reportData) {
    this.reportData = reportData;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.
   * @return reportData
   */
  @javax.annotation.Nullable
  public String getReportData() {
    return reportData;
  }

  public void setReportData(String reportData) {
    this.reportData = reportData;
  }


  public PGApiTransactionRequest retryAttempt(Long retryAttempt) {
    this.retryAttempt = retryAttempt;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;This field is required when the retry_id is present in the request message.
   * @return retryAttempt
   */
  @javax.annotation.Nullable
  public Long getRetryAttempt() {
    return retryAttempt;
  }

  public void setRetryAttempt(Long retryAttempt) {
    this.retryAttempt = retryAttempt;
  }


  public PGApiTransactionRequest retryId(Long retryId) {
    this.retryId = retryId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 15 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.
   * @return retryId
   */
  @javax.annotation.Nullable
  public Long getRetryId() {
    return retryId;
  }

  public void setRetryId(Long retryId) {
    this.retryId = retryId;
  }


  public PGApiTransactionRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * INTERNAL USE ONLY.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public PGApiTransactionRequest subscriptionId(Long subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 10 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Identifies the recurring subscription that applies to this transaction.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public Long getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(Long subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public PGApiTransactionRequest tokenize(Boolean tokenize) {
    this.tokenize = tokenize;
    return this;
  }

  /**
   * &lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;false&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;In an authorization, credit, force, sale, or verify request the merchant can set tokenize to \&quot;true\&quot; and the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the response. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return tokenize
   */
  @javax.annotation.Nullable
  public Boolean getTokenize() {
    return tokenize;
  }

  public void setTokenize(Boolean tokenize) {
    this.tokenize = tokenize;
  }


  public PGApiTransactionRequest trNumber(String trNumber) {
    this.trNumber = trNumber;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 9 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Bank transit/routing number. Applicable for ACH payments.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return trNumber
   */
  @javax.annotation.Nullable
  public String getTrNumber() {
    return trNumber;
  }

  public void setTrNumber(String trNumber) {
    this.trNumber = trNumber;
  }


  public PGApiTransactionRequest tranCurrency(Integer tranCurrency) {
    this.tranCurrency = tranCurrency;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 3 N&lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;840&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;ISO numeric currency code for the transaction. Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#country-codes\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Country Codes&lt;/a&gt; for a list of currency codes.
   * @return tranCurrency
   */
  @javax.annotation.Nullable
  public Integer getTranCurrency() {
    return tranCurrency;
  }

  public void setTranCurrency(Integer tranCurrency) {
    this.tranCurrency = tranCurrency;
  }


  public PGApiTransactionRequest typeId(String typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 1 AN&lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;C&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Bank Account Type. Applicable for ACH payments. Possible values are: &lt;ul&gt;&lt;li&gt;C &#x3D; Personal checking account&lt;/li&gt;&lt;li&gt;S &#x3D; Personal savings account&lt;/li&gt;&lt;li&gt;K &#x3D; Business checking account&lt;/li&gt;&lt;li&gt;V &#x3D; Business savings account&lt;/li&gt;&lt;/ul&gt;
   * @return typeId
   */
  @javax.annotation.Nullable
  public String getTypeId() {
    return typeId;
  }

  public void setTypeId(String typeId) {
    this.typeId = typeId;
  }


  public PGApiTransactionRequest userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * INTERNAL USE ONLY.
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public PGApiTransactionRequest vendorId(Long vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Identifies the vendor to which this capture request applies.
   * @return vendorId
   */
  @javax.annotation.Nullable
  public Long getVendorId() {
    return vendorId;
  }

  public void setVendorId(Long vendorId) {
    this.vendorId = vendorId;
  }


  public PGApiTransactionRequest xid3ds(String xid3ds) {
    this.xid3ds = xid3ds;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 28 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Base64 encoded transaction ID (XID) returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for Visa 3-D Secure transactions.
   * @return xid3ds
   */
  @javax.annotation.Nullable
  public String getXid3ds() {
    return xid3ds;
  }

  public void setXid3ds(String xid3ds) {
    this.xid3ds = xid3ds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PGApiTransactionRequest pgApiTransactionRequest = (PGApiTransactionRequest) o;
    return Objects.equals(this.amtConvenienceFee, pgApiTransactionRequest.amtConvenienceFee) &&
        Objects.equals(this.amtFbo, pgApiTransactionRequest.amtFbo) &&
        Objects.equals(this.amtTax, pgApiTransactionRequest.amtTax) &&
        Objects.equals(this.amtTran, pgApiTransactionRequest.amtTran) &&
        Objects.equals(this.amtTranFee, pgApiTransactionRequest.amtTranFee) &&
        Objects.equals(this.authCode, pgApiTransactionRequest.authCode) &&
        Objects.equals(this.avsAddress, pgApiTransactionRequest.avsAddress) &&
        Objects.equals(this.avsZip, pgApiTransactionRequest.avsZip) &&
        Objects.equals(this.cardId, pgApiTransactionRequest.cardId) &&
        Objects.equals(this.cardNumber, pgApiTransactionRequest.cardNumber) &&
        Objects.equals(this.cardSwipe, pgApiTransactionRequest.cardSwipe) &&
        Objects.equals(this.cardholderName, pgApiTransactionRequest.cardholderName) &&
        Objects.equals(this.cavv3ds, pgApiTransactionRequest.cavv3ds) &&
        Objects.equals(this.clientIp, pgApiTransactionRequest.clientIp) &&
        Objects.equals(this.customer, pgApiTransactionRequest.customer) &&
        Objects.equals(this.customerCode, pgApiTransactionRequest.customerCode) &&
        Objects.equals(this.customerEmail, pgApiTransactionRequest.customerEmail) &&
        Objects.equals(this.customerId, pgApiTransactionRequest.customerId) &&
        Objects.equals(this.cvv2, pgApiTransactionRequest.cvv2) &&
        Objects.equals(this.dbaName, pgApiTransactionRequest.dbaName) &&
        Objects.equals(this.dbaSuffix, pgApiTransactionRequest.dbaSuffix) &&
        Objects.equals(this.ddaNumber, pgApiTransactionRequest.ddaNumber) &&
        Objects.equals(this.developerId, pgApiTransactionRequest.developerId) &&
        Objects.equals(this.duplicateSeconds, pgApiTransactionRequest.duplicateSeconds) &&
        Objects.equals(this.echoFields, pgApiTransactionRequest.echoFields) &&
        Objects.equals(this.emailAddress, pgApiTransactionRequest.emailAddress) &&
        Objects.equals(this.emailReceipt, pgApiTransactionRequest.emailReceipt) &&
        Objects.equals(this.emvTranId, pgApiTransactionRequest.emvTranId) &&
        Objects.equals(this.expDate, pgApiTransactionRequest.expDate) &&
        Objects.equals(this.fboId, pgApiTransactionRequest.fboId) &&
        Objects.equals(this.lineItems, pgApiTransactionRequest.lineItems) &&
        Objects.equals(this.locId, pgApiTransactionRequest.locId) &&
        Objects.equals(this.mcUcafData, pgApiTransactionRequest.mcUcafData) &&
        Objects.equals(this.mcUcafInd, pgApiTransactionRequest.mcUcafInd) &&
        Objects.equals(this.merchRefNum, pgApiTransactionRequest.merchRefNum) &&
        Objects.equals(this.merchantId, pgApiTransactionRequest.merchantId) &&
        Objects.equals(this.motoEcommInd, pgApiTransactionRequest.motoEcommInd) &&
        Objects.equals(this.partialAuth, pgApiTransactionRequest.partialAuth) &&
        Objects.equals(this.payloadApplePay, pgApiTransactionRequest.payloadApplePay) &&
        Objects.equals(this.payloadGooglePay, pgApiTransactionRequest.payloadGooglePay) &&
        Objects.equals(this.pgId, pgApiTransactionRequest.pgId) &&
        Objects.equals(this.profileId, pgApiTransactionRequest.profileId) &&
        Objects.equals(this.purchaseId, pgApiTransactionRequest.purchaseId) &&
        Objects.equals(this.reportData, pgApiTransactionRequest.reportData) &&
        Objects.equals(this.retryAttempt, pgApiTransactionRequest.retryAttempt) &&
        Objects.equals(this.retryId, pgApiTransactionRequest.retryId) &&
        Objects.equals(this.sessionId, pgApiTransactionRequest.sessionId) &&
        Objects.equals(this.subscriptionId, pgApiTransactionRequest.subscriptionId) &&
        Objects.equals(this.tokenize, pgApiTransactionRequest.tokenize) &&
        Objects.equals(this.trNumber, pgApiTransactionRequest.trNumber) &&
        Objects.equals(this.tranCurrency, pgApiTransactionRequest.tranCurrency) &&
        Objects.equals(this.typeId, pgApiTransactionRequest.typeId) &&
        Objects.equals(this.userId, pgApiTransactionRequest.userId) &&
        Objects.equals(this.vendorId, pgApiTransactionRequest.vendorId) &&
        Objects.equals(this.xid3ds, pgApiTransactionRequest.xid3ds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amtConvenienceFee, amtFbo, amtTax, amtTran, amtTranFee, authCode, avsAddress, avsZip, cardId, cardNumber, cardSwipe, cardholderName, cavv3ds, clientIp, customer, customerCode, customerEmail, customerId, cvv2, dbaName, dbaSuffix, ddaNumber, developerId, duplicateSeconds, echoFields, emailAddress, emailReceipt, emvTranId, expDate, fboId, lineItems, locId, mcUcafData, mcUcafInd, merchRefNum, merchantId, motoEcommInd, partialAuth, payloadApplePay, payloadGooglePay, pgId, profileId, purchaseId, reportData, retryAttempt, retryId, sessionId, subscriptionId, tokenize, trNumber, tranCurrency, typeId, userId, vendorId, xid3ds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PGApiTransactionRequest {\n");
    sb.append("    amtConvenienceFee: ").append(toIndentedString(amtConvenienceFee)).append("\n");
    sb.append("    amtFbo: ").append(toIndentedString(amtFbo)).append("\n");
    sb.append("    amtTax: ").append(toIndentedString(amtTax)).append("\n");
    sb.append("    amtTran: ").append(toIndentedString(amtTran)).append("\n");
    sb.append("    amtTranFee: ").append(toIndentedString(amtTranFee)).append("\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    avsAddress: ").append(toIndentedString(avsAddress)).append("\n");
    sb.append("    avsZip: ").append(toIndentedString(avsZip)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardSwipe: ").append(toIndentedString(cardSwipe)).append("\n");
    sb.append("    cardholderName: ").append(toIndentedString(cardholderName)).append("\n");
    sb.append("    cavv3ds: ").append(toIndentedString(cavv3ds)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    cvv2: ").append(toIndentedString(cvv2)).append("\n");
    sb.append("    dbaName: ").append(toIndentedString(dbaName)).append("\n");
    sb.append("    dbaSuffix: ").append(toIndentedString(dbaSuffix)).append("\n");
    sb.append("    ddaNumber: ").append(toIndentedString(ddaNumber)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    duplicateSeconds: ").append(toIndentedString(duplicateSeconds)).append("\n");
    sb.append("    echoFields: ").append(toIndentedString(echoFields)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    emailReceipt: ").append(toIndentedString(emailReceipt)).append("\n");
    sb.append("    emvTranId: ").append(toIndentedString(emvTranId)).append("\n");
    sb.append("    expDate: ").append(toIndentedString(expDate)).append("\n");
    sb.append("    fboId: ").append(toIndentedString(fboId)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    locId: ").append(toIndentedString(locId)).append("\n");
    sb.append("    mcUcafData: ").append(toIndentedString(mcUcafData)).append("\n");
    sb.append("    mcUcafInd: ").append(toIndentedString(mcUcafInd)).append("\n");
    sb.append("    merchRefNum: ").append(toIndentedString(merchRefNum)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    motoEcommInd: ").append(toIndentedString(motoEcommInd)).append("\n");
    sb.append("    partialAuth: ").append(toIndentedString(partialAuth)).append("\n");
    sb.append("    payloadApplePay: ").append(toIndentedString(payloadApplePay)).append("\n");
    sb.append("    payloadGooglePay: ").append(toIndentedString(payloadGooglePay)).append("\n");
    sb.append("    pgId: ").append(toIndentedString(pgId)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    purchaseId: ").append(toIndentedString(purchaseId)).append("\n");
    sb.append("    reportData: ").append(toIndentedString(reportData)).append("\n");
    sb.append("    retryAttempt: ").append(toIndentedString(retryAttempt)).append("\n");
    sb.append("    retryId: ").append(toIndentedString(retryId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    tokenize: ").append(toIndentedString(tokenize)).append("\n");
    sb.append("    trNumber: ").append(toIndentedString(trNumber)).append("\n");
    sb.append("    tranCurrency: ").append(toIndentedString(tranCurrency)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    xid3ds: ").append(toIndentedString(xid3ds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amt_convenience_fee");
    openapiFields.add("amt_fbo");
    openapiFields.add("amt_tax");
    openapiFields.add("amt_tran");
    openapiFields.add("amt_tran_fee");
    openapiFields.add("auth_code");
    openapiFields.add("avs_address");
    openapiFields.add("avs_zip");
    openapiFields.add("card_id");
    openapiFields.add("card_number");
    openapiFields.add("card_swipe");
    openapiFields.add("cardholder_name");
    openapiFields.add("cavv_3ds");
    openapiFields.add("client_ip");
    openapiFields.add("customer");
    openapiFields.add("customer_code");
    openapiFields.add("customer_email");
    openapiFields.add("customer_id");
    openapiFields.add("cvv2");
    openapiFields.add("dba_name");
    openapiFields.add("dba_suffix");
    openapiFields.add("dda_number");
    openapiFields.add("developer_id");
    openapiFields.add("duplicate_seconds");
    openapiFields.add("echo_fields");
    openapiFields.add("email_address");
    openapiFields.add("email_receipt");
    openapiFields.add("emv_tran_id");
    openapiFields.add("exp_date");
    openapiFields.add("fbo_id");
    openapiFields.add("line_items");
    openapiFields.add("loc_id");
    openapiFields.add("mc_ucaf_data");
    openapiFields.add("mc_ucaf_ind");
    openapiFields.add("merch_ref_num");
    openapiFields.add("merchant_id");
    openapiFields.add("moto_ecomm_ind");
    openapiFields.add("partial_auth");
    openapiFields.add("payload_apple_pay");
    openapiFields.add("payload_google_pay");
    openapiFields.add("pg_id");
    openapiFields.add("profile_id");
    openapiFields.add("purchase_id");
    openapiFields.add("report_data");
    openapiFields.add("retry_attempt");
    openapiFields.add("retry_id");
    openapiFields.add("session_id");
    openapiFields.add("subscription_id");
    openapiFields.add("tokenize");
    openapiFields.add("tr_number");
    openapiFields.add("tran_currency");
    openapiFields.add("type_id");
    openapiFields.add("user_id");
    openapiFields.add("vendor_id");
    openapiFields.add("xid_3ds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("merchant_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PGApiTransactionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PGApiTransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PGApiTransactionRequest is not found in the empty JSON string", PGApiTransactionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PGApiTransactionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PGApiTransactionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PGApiTransactionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_code") != null && !jsonObj.get("auth_code").isJsonNull()) && !jsonObj.get("auth_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_code").toString()));
      }
      if ((jsonObj.get("avs_address") != null && !jsonObj.get("avs_address").isJsonNull()) && !jsonObj.get("avs_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avs_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avs_address").toString()));
      }
      if ((jsonObj.get("avs_zip") != null && !jsonObj.get("avs_zip").isJsonNull()) && !jsonObj.get("avs_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avs_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avs_zip").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("card_number") != null && !jsonObj.get("card_number").isJsonNull()) && !jsonObj.get("card_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_number").toString()));
      }
      if ((jsonObj.get("card_swipe") != null && !jsonObj.get("card_swipe").isJsonNull()) && !jsonObj.get("card_swipe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_swipe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_swipe").toString()));
      }
      if ((jsonObj.get("cardholder_name") != null && !jsonObj.get("cardholder_name").isJsonNull()) && !jsonObj.get("cardholder_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholder_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholder_name").toString()));
      }
      if ((jsonObj.get("cavv_3ds") != null && !jsonObj.get("cavv_3ds").isJsonNull()) && !jsonObj.get("cavv_3ds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cavv_3ds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cavv_3ds").toString()));
      }
      if ((jsonObj.get("client_ip") != null && !jsonObj.get("client_ip").isJsonNull()) && !jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("customer_code") != null && !jsonObj.get("customer_code").isJsonNull()) && !jsonObj.get("customer_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_code").toString()));
      }
      if ((jsonObj.get("customer_email") != null && !jsonObj.get("customer_email").isJsonNull()) && !jsonObj.get("customer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_email").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("cvv2") != null && !jsonObj.get("cvv2").isJsonNull()) && !jsonObj.get("cvv2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvv2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvv2").toString()));
      }
      if ((jsonObj.get("dba_name") != null && !jsonObj.get("dba_name").isJsonNull()) && !jsonObj.get("dba_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dba_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dba_name").toString()));
      }
      if ((jsonObj.get("dba_suffix") != null && !jsonObj.get("dba_suffix").isJsonNull()) && !jsonObj.get("dba_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dba_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dba_suffix").toString()));
      }
      if ((jsonObj.get("dda_number") != null && !jsonObj.get("dda_number").isJsonNull()) && !jsonObj.get("dda_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dda_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dda_number").toString()));
      }
      if ((jsonObj.get("developer_id") != null && !jsonObj.get("developer_id").isJsonNull()) && !jsonObj.get("developer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_id").toString()));
      }
      if ((jsonObj.get("echo_fields") != null && !jsonObj.get("echo_fields").isJsonNull()) && !jsonObj.get("echo_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `echo_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("echo_fields").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("email_address") != null && !jsonObj.get("email_address").isJsonNull() && !jsonObj.get("email_address").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_address` to be an array in the JSON string but got `%s`", jsonObj.get("email_address").toString()));
      }
      if ((jsonObj.get("emv_tran_id") != null && !jsonObj.get("emv_tran_id").isJsonNull()) && !jsonObj.get("emv_tran_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emv_tran_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emv_tran_id").toString()));
      }
      if ((jsonObj.get("exp_date") != null && !jsonObj.get("exp_date").isJsonNull()) && !jsonObj.get("exp_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exp_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exp_date").toString()));
      }
      if ((jsonObj.get("line_items") != null && !jsonObj.get("line_items").isJsonNull()) && !jsonObj.get("line_items").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_items` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_items").toString()));
      }
      if ((jsonObj.get("loc_id") != null && !jsonObj.get("loc_id").isJsonNull()) && !jsonObj.get("loc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loc_id").toString()));
      }
      if ((jsonObj.get("mc_ucaf_data") != null && !jsonObj.get("mc_ucaf_data").isJsonNull()) && !jsonObj.get("mc_ucaf_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mc_ucaf_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mc_ucaf_data").toString()));
      }
      if ((jsonObj.get("mc_ucaf_ind") != null && !jsonObj.get("mc_ucaf_ind").isJsonNull()) && !jsonObj.get("mc_ucaf_ind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mc_ucaf_ind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mc_ucaf_ind").toString()));
      }
      if ((jsonObj.get("merch_ref_num") != null && !jsonObj.get("merch_ref_num").isJsonNull()) && !jsonObj.get("merch_ref_num").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merch_ref_num` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merch_ref_num").toString()));
      }
      if ((jsonObj.get("moto_ecomm_ind") != null && !jsonObj.get("moto_ecomm_ind").isJsonNull()) && !jsonObj.get("moto_ecomm_ind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moto_ecomm_ind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moto_ecomm_ind").toString()));
      }
      if ((jsonObj.get("payload_apple_pay") != null && !jsonObj.get("payload_apple_pay").isJsonNull()) && !jsonObj.get("payload_apple_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_apple_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_apple_pay").toString()));
      }
      if ((jsonObj.get("payload_google_pay") != null && !jsonObj.get("payload_google_pay").isJsonNull()) && !jsonObj.get("payload_google_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_google_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_google_pay").toString()));
      }
      if ((jsonObj.get("pg_id") != null && !jsonObj.get("pg_id").isJsonNull()) && !jsonObj.get("pg_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_id").toString()));
      }
      if ((jsonObj.get("profile_id") != null && !jsonObj.get("profile_id").isJsonNull()) && !jsonObj.get("profile_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_id").toString()));
      }
      if ((jsonObj.get("purchase_id") != null && !jsonObj.get("purchase_id").isJsonNull()) && !jsonObj.get("purchase_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_id").toString()));
      }
      if ((jsonObj.get("report_data") != null && !jsonObj.get("report_data").isJsonNull()) && !jsonObj.get("report_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_data").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("tr_number") != null && !jsonObj.get("tr_number").isJsonNull()) && !jsonObj.get("tr_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tr_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tr_number").toString()));
      }
      if ((jsonObj.get("type_id") != null && !jsonObj.get("type_id").isJsonNull()) && !jsonObj.get("type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_id").toString()));
      }
      if ((jsonObj.get("xid_3ds") != null && !jsonObj.get("xid_3ds").isJsonNull()) && !jsonObj.get("xid_3ds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xid_3ds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xid_3ds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PGApiTransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PGApiTransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PGApiTransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PGApiTransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PGApiTransactionRequest>() {
           @Override
           public void write(JsonWriter out, PGApiTransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PGApiTransactionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PGApiTransactionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PGApiTransactionRequest
   * @throws IOException if the JSON string is invalid with respect to PGApiTransactionRequest
   */
  public static PGApiTransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PGApiTransactionRequest.class);
  }

  /**
   * Convert an instance of PGApiTransactionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

