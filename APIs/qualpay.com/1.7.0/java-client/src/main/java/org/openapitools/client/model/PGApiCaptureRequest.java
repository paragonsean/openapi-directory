/*
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PGApiCaptureRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:08.449119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PGApiCaptureRequest {
  public static final String SERIALIZED_NAME_AMT_TRAN = "amt_tran";
  @SerializedName(SERIALIZED_NAME_AMT_TRAN)
  private Double amtTran;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developer_id";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_ECHO_FIELDS = "echo_fields";
  @SerializedName(SERIALIZED_NAME_ECHO_FIELDS)
  private String echoFields;

  public static final String SERIALIZED_NAME_LOC_ID = "loc_id";
  @SerializedName(SERIALIZED_NAME_LOC_ID)
  private String locId;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private Long merchantId;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profile_id";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_REPORT_DATA = "report_data";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA)
  private String reportData;

  public static final String SERIALIZED_NAME_RETRY_ATTEMPT = "retry_attempt";
  @SerializedName(SERIALIZED_NAME_RETRY_ATTEMPT)
  private Long retryAttempt;

  public static final String SERIALIZED_NAME_RETRY_ID = "retry_id";
  @SerializedName(SERIALIZED_NAME_RETRY_ID)
  private Long retryId;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendor_id";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private Long vendorId;

  public PGApiCaptureRequest() {
  }

  public PGApiCaptureRequest amtTran(Double amtTran) {
    this.amtTran = amtTran;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12,2 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Total amount to capture. The amount must be less than or equal to the authorized amount.
   * @return amtTran
   */
  @javax.annotation.Nonnull
  public Double getAmtTran() {
    return amtTran;
  }

  public void setAmtTran(Double amtTran) {
    this.amtTran = amtTran;
  }


  public PGApiCaptureRequest developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 
   * @return developerId
   */
  @javax.annotation.Nullable
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }


  public PGApiCaptureRequest echoFields(String echoFields) {
    this.echoFields = echoFields;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a JSON array of field data that will be echoed back in the response message.
   * @return echoFields
   */
  @javax.annotation.Nullable
  public String getEchoFields() {
    return echoFields;
  }

  public void setEchoFields(String echoFields) {
    this.echoFields = echoFields;
  }


  public PGApiCaptureRequest locId(String locId) {
    this.locId = locId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.
   * @return locId
   */
  @javax.annotation.Nullable
  public String getLocId() {
    return locId;
  }

  public void setLocId(String locId) {
    this.locId = locId;
  }


  public PGApiCaptureRequest merchantId(Long merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Unique identifier on the Qualpay system.
   * @return merchantId
   */
  @javax.annotation.Nonnull
  public Long getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(Long merchantId) {
    this.merchantId = merchantId;
  }


  public PGApiCaptureRequest profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 20 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Explicitly identifies which Payment Gateway profile should be used for the request.
   * @return profileId
   */
  @javax.annotation.Nullable
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public PGApiCaptureRequest reportData(String reportData) {
    this.reportData = reportData;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.
   * @return reportData
   */
  @javax.annotation.Nullable
  public String getReportData() {
    return reportData;
  }

  public void setReportData(String reportData) {
    this.reportData = reportData;
  }


  public PGApiCaptureRequest retryAttempt(Long retryAttempt) {
    this.retryAttempt = retryAttempt;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;This field is required when the retry_id is present in the request message.
   * @return retryAttempt
   */
  @javax.annotation.Nullable
  public Long getRetryAttempt() {
    return retryAttempt;
  }

  public void setRetryAttempt(Long retryAttempt) {
    this.retryAttempt = retryAttempt;
  }


  public PGApiCaptureRequest retryId(Long retryId) {
    this.retryId = retryId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 15 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.
   * @return retryId
   */
  @javax.annotation.Nullable
  public Long getRetryId() {
    return retryId;
  }

  public void setRetryId(Long retryId) {
    this.retryId = retryId;
  }


  public PGApiCaptureRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * INTERNAL USE ONLY.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public PGApiCaptureRequest userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * INTERNAL USE ONLY.
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public PGApiCaptureRequest vendorId(Long vendorId) {
    this.vendorId = vendorId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Identifies the vendor to which this capture request applies.
   * @return vendorId
   */
  @javax.annotation.Nullable
  public Long getVendorId() {
    return vendorId;
  }

  public void setVendorId(Long vendorId) {
    this.vendorId = vendorId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PGApiCaptureRequest pgApiCaptureRequest = (PGApiCaptureRequest) o;
    return Objects.equals(this.amtTran, pgApiCaptureRequest.amtTran) &&
        Objects.equals(this.developerId, pgApiCaptureRequest.developerId) &&
        Objects.equals(this.echoFields, pgApiCaptureRequest.echoFields) &&
        Objects.equals(this.locId, pgApiCaptureRequest.locId) &&
        Objects.equals(this.merchantId, pgApiCaptureRequest.merchantId) &&
        Objects.equals(this.profileId, pgApiCaptureRequest.profileId) &&
        Objects.equals(this.reportData, pgApiCaptureRequest.reportData) &&
        Objects.equals(this.retryAttempt, pgApiCaptureRequest.retryAttempt) &&
        Objects.equals(this.retryId, pgApiCaptureRequest.retryId) &&
        Objects.equals(this.sessionId, pgApiCaptureRequest.sessionId) &&
        Objects.equals(this.userId, pgApiCaptureRequest.userId) &&
        Objects.equals(this.vendorId, pgApiCaptureRequest.vendorId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amtTran, developerId, echoFields, locId, merchantId, profileId, reportData, retryAttempt, retryId, sessionId, userId, vendorId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PGApiCaptureRequest {\n");
    sb.append("    amtTran: ").append(toIndentedString(amtTran)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    echoFields: ").append(toIndentedString(echoFields)).append("\n");
    sb.append("    locId: ").append(toIndentedString(locId)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    reportData: ").append(toIndentedString(reportData)).append("\n");
    sb.append("    retryAttempt: ").append(toIndentedString(retryAttempt)).append("\n");
    sb.append("    retryId: ").append(toIndentedString(retryId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amt_tran");
    openapiFields.add("developer_id");
    openapiFields.add("echo_fields");
    openapiFields.add("loc_id");
    openapiFields.add("merchant_id");
    openapiFields.add("profile_id");
    openapiFields.add("report_data");
    openapiFields.add("retry_attempt");
    openapiFields.add("retry_id");
    openapiFields.add("session_id");
    openapiFields.add("user_id");
    openapiFields.add("vendor_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amt_tran");
    openapiRequiredFields.add("merchant_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PGApiCaptureRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PGApiCaptureRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PGApiCaptureRequest is not found in the empty JSON string", PGApiCaptureRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PGApiCaptureRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PGApiCaptureRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PGApiCaptureRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("developer_id") != null && !jsonObj.get("developer_id").isJsonNull()) && !jsonObj.get("developer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_id").toString()));
      }
      if ((jsonObj.get("echo_fields") != null && !jsonObj.get("echo_fields").isJsonNull()) && !jsonObj.get("echo_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `echo_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("echo_fields").toString()));
      }
      if ((jsonObj.get("loc_id") != null && !jsonObj.get("loc_id").isJsonNull()) && !jsonObj.get("loc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loc_id").toString()));
      }
      if ((jsonObj.get("profile_id") != null && !jsonObj.get("profile_id").isJsonNull()) && !jsonObj.get("profile_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_id").toString()));
      }
      if ((jsonObj.get("report_data") != null && !jsonObj.get("report_data").isJsonNull()) && !jsonObj.get("report_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_data").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PGApiCaptureRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PGApiCaptureRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PGApiCaptureRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PGApiCaptureRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PGApiCaptureRequest>() {
           @Override
           public void write(JsonWriter out, PGApiCaptureRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PGApiCaptureRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PGApiCaptureRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PGApiCaptureRequest
   * @throws IOException if the JSON string is invalid with respect to PGApiCaptureRequest
   */
  public static PGApiCaptureRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PGApiCaptureRequest.class);
  }

  /**
   * Convert an instance of PGApiCaptureRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

