/*
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PGApiTransactionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:08.449119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PGApiTransactionResponse {
  public static final String SERIALIZED_NAME_AMT_TRAN = "amt_tran";
  @SerializedName(SERIALIZED_NAME_AMT_TRAN)
  private Double amtTran;

  public static final String SERIALIZED_NAME_AUTH_AVS_RESULT = "auth_avs_result";
  @SerializedName(SERIALIZED_NAME_AUTH_AVS_RESULT)
  private String authAvsResult;

  public static final String SERIALIZED_NAME_AUTH_CODE = "auth_code";
  @SerializedName(SERIALIZED_NAME_AUTH_CODE)
  private String authCode;

  public static final String SERIALIZED_NAME_AUTH_CVV2_RESULT = "auth_cvv2_result";
  @SerializedName(SERIALIZED_NAME_AUTH_CVV2_RESULT)
  private String authCvv2Result;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_ECHO_FIELDS = "echo_fields";
  @SerializedName(SERIALIZED_NAME_ECHO_FIELDS)
  private String echoFields;

  public static final String SERIALIZED_NAME_MERCHANT_ADVICE_CODE = "merchant_advice_code";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ADVICE_CODE)
  private String merchantAdviceCode;

  public static final String SERIALIZED_NAME_PG_ID = "pg_id";
  @SerializedName(SERIALIZED_NAME_PG_ID)
  private String pgId;

  public static final String SERIALIZED_NAME_RCODE = "rcode";
  @SerializedName(SERIALIZED_NAME_RCODE)
  private String rcode;

  public static final String SERIALIZED_NAME_RMSG = "rmsg";
  @SerializedName(SERIALIZED_NAME_RMSG)
  private String rmsg;

  public PGApiTransactionResponse() {
  }

  public PGApiTransactionResponse(
     Double amtTran, 
     String authAvsResult, 
     String authCode, 
     String authCvv2Result, 
     String cardId, 
     String echoFields, 
     String merchantAdviceCode, 
     String pgId, 
     String rcode, 
     String rmsg
  ) {
    this();
    this.amtTran = amtTran;
    this.authAvsResult = authAvsResult;
    this.authCode = authCode;
    this.authCvv2Result = authCvv2Result;
    this.cardId = cardId;
    this.echoFields = echoFields;
    this.merchantAdviceCode = merchantAdviceCode;
    this.pgId = pgId;
    this.rcode = rcode;
    this.rmsg = rmsg;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12,2 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Transaction amount, returned only on partial approvals.
   * @return amtTran
   */
  @javax.annotation.Nullable
  public Double getAmtTran() {
    return amtTran;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 1 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;AVS result from card issuer (if avs_zip and optionally avs_address were provided in the request). Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#avs-result-codes\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Payment Result Codes for AVS&lt;/a&gt; for possible values.
   * @return authAvsResult
   */
  @javax.annotation.Nullable
  public String getAuthAvsResult() {
    return authAvsResult;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 6 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Card issuer authorization code returned on successful authorization request.
   * @return authCode
   */
  @javax.annotation.Nullable
  public String getAuthCode() {
    return authCode;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 1 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;CVV2 result from card issuer (if CVV2 data was sent in the request). Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#cvv2-result-codes\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Payment Result Codes for CVV2&lt;/a&gt; for possible values.
   * @return authCvv2Result
   */
  @javax.annotation.Nullable
  public String getAuthCvv2Result() {
    return authCvv2Result;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;32-byte value returned after successful tokenize request or when an authorization or sale transaction requests tokenization of the cardholder data.
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Data that was provided in echo_fields in the request.
   * @return echoFields
   */
  @javax.annotation.Nullable
  public String getEchoFields() {
    return echoFields;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 4 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Recurring transaction advice for MasterCard authorizations.&lt;ul&gt;&lt;li&gt;M001 &#x3D; New account information available&lt;/li&gt;&lt;li&gt;M002 &#x3D; Try again later&lt;/li&gt;&lt;li&gt;M003 &#x3D; Do not try again for recurring payments transaction&lt;/li&gt;&lt;li&gt;M004 &#x3D; Token requirements not fulfilled for this token type&lt;/li&gt;&lt;li&gt;M021 &#x3D; Recurring payment cancellation&lt;/li&gt;&lt;/ul&gt;
   * @return merchantAdviceCode
   */
  @javax.annotation.Nullable
  public String getMerchantAdviceCode() {
    return merchantAdviceCode;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;32-byte unique identifier generated by the payment gateway, returned in all valid responses.
   * @return pgId
   */
  @javax.annotation.Nullable
  public String getPgId() {
    return pgId;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 3 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Response code from the payment gateway. \&quot;000\&quot; indicates success. Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#api-response-codes\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Platform API Response Codes&lt;/a&gt; for entire list of Payment Gateway Response Codes.
   * @return rcode
   */
  @javax.annotation.Nullable
  public String getRcode() {
    return rcode;
  }



  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Response text from the payment gateway.
   * @return rmsg
   */
  @javax.annotation.Nullable
  public String getRmsg() {
    return rmsg;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PGApiTransactionResponse pgApiTransactionResponse = (PGApiTransactionResponse) o;
    return Objects.equals(this.amtTran, pgApiTransactionResponse.amtTran) &&
        Objects.equals(this.authAvsResult, pgApiTransactionResponse.authAvsResult) &&
        Objects.equals(this.authCode, pgApiTransactionResponse.authCode) &&
        Objects.equals(this.authCvv2Result, pgApiTransactionResponse.authCvv2Result) &&
        Objects.equals(this.cardId, pgApiTransactionResponse.cardId) &&
        Objects.equals(this.echoFields, pgApiTransactionResponse.echoFields) &&
        Objects.equals(this.merchantAdviceCode, pgApiTransactionResponse.merchantAdviceCode) &&
        Objects.equals(this.pgId, pgApiTransactionResponse.pgId) &&
        Objects.equals(this.rcode, pgApiTransactionResponse.rcode) &&
        Objects.equals(this.rmsg, pgApiTransactionResponse.rmsg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amtTran, authAvsResult, authCode, authCvv2Result, cardId, echoFields, merchantAdviceCode, pgId, rcode, rmsg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PGApiTransactionResponse {\n");
    sb.append("    amtTran: ").append(toIndentedString(amtTran)).append("\n");
    sb.append("    authAvsResult: ").append(toIndentedString(authAvsResult)).append("\n");
    sb.append("    authCode: ").append(toIndentedString(authCode)).append("\n");
    sb.append("    authCvv2Result: ").append(toIndentedString(authCvv2Result)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    echoFields: ").append(toIndentedString(echoFields)).append("\n");
    sb.append("    merchantAdviceCode: ").append(toIndentedString(merchantAdviceCode)).append("\n");
    sb.append("    pgId: ").append(toIndentedString(pgId)).append("\n");
    sb.append("    rcode: ").append(toIndentedString(rcode)).append("\n");
    sb.append("    rmsg: ").append(toIndentedString(rmsg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amt_tran");
    openapiFields.add("auth_avs_result");
    openapiFields.add("auth_code");
    openapiFields.add("auth_cvv2_result");
    openapiFields.add("card_id");
    openapiFields.add("echo_fields");
    openapiFields.add("merchant_advice_code");
    openapiFields.add("pg_id");
    openapiFields.add("rcode");
    openapiFields.add("rmsg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PGApiTransactionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PGApiTransactionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PGApiTransactionResponse is not found in the empty JSON string", PGApiTransactionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PGApiTransactionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PGApiTransactionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_avs_result") != null && !jsonObj.get("auth_avs_result").isJsonNull()) && !jsonObj.get("auth_avs_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_avs_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_avs_result").toString()));
      }
      if ((jsonObj.get("auth_code") != null && !jsonObj.get("auth_code").isJsonNull()) && !jsonObj.get("auth_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_code").toString()));
      }
      if ((jsonObj.get("auth_cvv2_result") != null && !jsonObj.get("auth_cvv2_result").isJsonNull()) && !jsonObj.get("auth_cvv2_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_cvv2_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_cvv2_result").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("echo_fields") != null && !jsonObj.get("echo_fields").isJsonNull()) && !jsonObj.get("echo_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `echo_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("echo_fields").toString()));
      }
      if ((jsonObj.get("merchant_advice_code") != null && !jsonObj.get("merchant_advice_code").isJsonNull()) && !jsonObj.get("merchant_advice_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant_advice_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant_advice_code").toString()));
      }
      if ((jsonObj.get("pg_id") != null && !jsonObj.get("pg_id").isJsonNull()) && !jsonObj.get("pg_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pg_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pg_id").toString()));
      }
      if ((jsonObj.get("rcode") != null && !jsonObj.get("rcode").isJsonNull()) && !jsonObj.get("rcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rcode").toString()));
      }
      if ((jsonObj.get("rmsg") != null && !jsonObj.get("rmsg").isJsonNull()) && !jsonObj.get("rmsg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rmsg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rmsg").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PGApiTransactionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PGApiTransactionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PGApiTransactionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PGApiTransactionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PGApiTransactionResponse>() {
           @Override
           public void write(JsonWriter out, PGApiTransactionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PGApiTransactionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PGApiTransactionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PGApiTransactionResponse
   * @throws IOException if the JSON string is invalid with respect to PGApiTransactionResponse
   */
  public static PGApiTransactionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PGApiTransactionResponse.class);
  }

  /**
   * Convert an instance of PGApiTransactionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

