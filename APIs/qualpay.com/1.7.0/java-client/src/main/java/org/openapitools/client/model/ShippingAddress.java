/*
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShippingAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:08.449119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShippingAddress {
  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_SHIPPING_ADDR1 = "shipping_addr1";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDR1)
  private String shippingAddr1;

  public static final String SERIALIZED_NAME_SHIPPING_ADDR2 = "shipping_addr2";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDR2)
  private String shippingAddr2;

  public static final String SERIALIZED_NAME_SHIPPING_CITY = "shipping_city";
  @SerializedName(SERIALIZED_NAME_SHIPPING_CITY)
  private String shippingCity;

  public static final String SERIALIZED_NAME_SHIPPING_COUNTRY = "shipping_country";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COUNTRY)
  private String shippingCountry;

  public static final String SERIALIZED_NAME_SHIPPING_COUNTRY_CODE = "shipping_country_code";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COUNTRY_CODE)
  private String shippingCountryCode;

  public static final String SERIALIZED_NAME_SHIPPING_FIRM_NAME = "shipping_firm_name";
  @SerializedName(SERIALIZED_NAME_SHIPPING_FIRM_NAME)
  private String shippingFirmName;

  public static final String SERIALIZED_NAME_SHIPPING_FIRST_NAME = "shipping_first_name";
  @SerializedName(SERIALIZED_NAME_SHIPPING_FIRST_NAME)
  private String shippingFirstName;

  public static final String SERIALIZED_NAME_SHIPPING_LAST_NAME = "shipping_last_name";
  @SerializedName(SERIALIZED_NAME_SHIPPING_LAST_NAME)
  private String shippingLastName;

  public static final String SERIALIZED_NAME_SHIPPING_STATE = "shipping_state";
  @SerializedName(SERIALIZED_NAME_SHIPPING_STATE)
  private String shippingState;

  public static final String SERIALIZED_NAME_SHIPPING_ZIP = "shipping_zip";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ZIP)
  private String shippingZip;

  public static final String SERIALIZED_NAME_SHIPPING_ZIP4 = "shipping_zip4";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ZIP4)
  private String shippingZip4;

  public ShippingAddress() {
  }

  public ShippingAddress primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * &lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;false&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Identifies the primary shipping address where there are multiple shipping addresses.
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public ShippingAddress shippingAddr1(String shippingAddr1) {
    this.shippingAddr1 = shippingAddr1;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer street and number, P.O. box, c/o.
   * @return shippingAddr1
   */
  @javax.annotation.Nonnull
  public String getShippingAddr1() {
    return shippingAddr1;
  }

  public void setShippingAddr1(String shippingAddr1) {
    this.shippingAddr1 = shippingAddr1;
  }


  public ShippingAddress shippingAddr2(String shippingAddr2) {
    this.shippingAddr2 = shippingAddr2;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer apartment, suite, unit, building, floor, etc.
   * @return shippingAddr2
   */
  @javax.annotation.Nullable
  public String getShippingAddr2() {
    return shippingAddr2;
  }

  public void setShippingAddr2(String shippingAddr2) {
    this.shippingAddr2 = shippingAddr2;
  }


  public ShippingAddress shippingCity(String shippingCity) {
    this.shippingCity = shippingCity;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer shipping city.
   * @return shippingCity
   */
  @javax.annotation.Nonnull
  public String getShippingCity() {
    return shippingCity;
  }

  public void setShippingCity(String shippingCity) {
    this.shippingCity = shippingCity;
  }


  public ShippingAddress shippingCountry(String shippingCountry) {
    this.shippingCountry = shippingCountry;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer shipping country.
   * @return shippingCountry
   */
  @javax.annotation.Nullable
  public String getShippingCountry() {
    return shippingCountry;
  }

  public void setShippingCountry(String shippingCountry) {
    this.shippingCountry = shippingCountry;
  }


  public ShippingAddress shippingCountryCode(String shippingCountryCode) {
    this.shippingCountryCode = shippingCountryCode;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 3 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;ISO numeric country code for the shipping address. Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#country-codes\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Country Codes&lt;/a&gt; for a list of country codes. If the country code is provided, the shipping_country will be updated to match the country code. 
   * @return shippingCountryCode
   */
  @javax.annotation.Nullable
  public String getShippingCountryCode() {
    return shippingCountryCode;
  }

  public void setShippingCountryCode(String shippingCountryCode) {
    this.shippingCountryCode = shippingCountryCode;
  }


  public ShippingAddress shippingFirmName(String shippingFirmName) {
    this.shippingFirmName = shippingFirmName;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 64 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Business name if applicable. 
   * @return shippingFirmName
   */
  @javax.annotation.Nullable
  public String getShippingFirmName() {
    return shippingFirmName;
  }

  public void setShippingFirmName(String shippingFirmName) {
    this.shippingFirmName = shippingFirmName;
  }


  public ShippingAddress shippingFirstName(String shippingFirstName) {
    this.shippingFirstName = shippingFirstName;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer shipping first name.
   * @return shippingFirstName
   */
  @javax.annotation.Nonnull
  public String getShippingFirstName() {
    return shippingFirstName;
  }

  public void setShippingFirstName(String shippingFirstName) {
    this.shippingFirstName = shippingFirstName;
  }


  public ShippingAddress shippingLastName(String shippingLastName) {
    this.shippingLastName = shippingLastName;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer shipping last name.
   * @return shippingLastName
   */
  @javax.annotation.Nonnull
  public String getShippingLastName() {
    return shippingLastName;
  }

  public void setShippingLastName(String shippingLastName) {
    this.shippingLastName = shippingLastName;
  }


  public ShippingAddress shippingState(String shippingState) {
    this.shippingState = shippingState;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer shipping state (abbreviated).
   * @return shippingState
   */
  @javax.annotation.Nonnull
  public String getShippingState() {
    return shippingState;
  }

  public void setShippingState(String shippingState) {
    this.shippingState = shippingState;
  }


  public ShippingAddress shippingZip(String shippingZip) {
    this.shippingZip = shippingZip;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer shipping zip code.
   * @return shippingZip
   */
  @javax.annotation.Nonnull
  public String getShippingZip() {
    return shippingZip;
  }

  public void setShippingZip(String shippingZip) {
    this.shippingZip = shippingZip;
  }


  public ShippingAddress shippingZip4(String shippingZip4) {
    this.shippingZip4 = shippingZip4;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Customer shipping zip+4 code if applicable.
   * @return shippingZip4
   */
  @javax.annotation.Nullable
  public String getShippingZip4() {
    return shippingZip4;
  }

  public void setShippingZip4(String shippingZip4) {
    this.shippingZip4 = shippingZip4;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingAddress shippingAddress = (ShippingAddress) o;
    return Objects.equals(this.primary, shippingAddress.primary) &&
        Objects.equals(this.shippingAddr1, shippingAddress.shippingAddr1) &&
        Objects.equals(this.shippingAddr2, shippingAddress.shippingAddr2) &&
        Objects.equals(this.shippingCity, shippingAddress.shippingCity) &&
        Objects.equals(this.shippingCountry, shippingAddress.shippingCountry) &&
        Objects.equals(this.shippingCountryCode, shippingAddress.shippingCountryCode) &&
        Objects.equals(this.shippingFirmName, shippingAddress.shippingFirmName) &&
        Objects.equals(this.shippingFirstName, shippingAddress.shippingFirstName) &&
        Objects.equals(this.shippingLastName, shippingAddress.shippingLastName) &&
        Objects.equals(this.shippingState, shippingAddress.shippingState) &&
        Objects.equals(this.shippingZip, shippingAddress.shippingZip) &&
        Objects.equals(this.shippingZip4, shippingAddress.shippingZip4);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primary, shippingAddr1, shippingAddr2, shippingCity, shippingCountry, shippingCountryCode, shippingFirmName, shippingFirstName, shippingLastName, shippingState, shippingZip, shippingZip4);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingAddress {\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    shippingAddr1: ").append(toIndentedString(shippingAddr1)).append("\n");
    sb.append("    shippingAddr2: ").append(toIndentedString(shippingAddr2)).append("\n");
    sb.append("    shippingCity: ").append(toIndentedString(shippingCity)).append("\n");
    sb.append("    shippingCountry: ").append(toIndentedString(shippingCountry)).append("\n");
    sb.append("    shippingCountryCode: ").append(toIndentedString(shippingCountryCode)).append("\n");
    sb.append("    shippingFirmName: ").append(toIndentedString(shippingFirmName)).append("\n");
    sb.append("    shippingFirstName: ").append(toIndentedString(shippingFirstName)).append("\n");
    sb.append("    shippingLastName: ").append(toIndentedString(shippingLastName)).append("\n");
    sb.append("    shippingState: ").append(toIndentedString(shippingState)).append("\n");
    sb.append("    shippingZip: ").append(toIndentedString(shippingZip)).append("\n");
    sb.append("    shippingZip4: ").append(toIndentedString(shippingZip4)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primary");
    openapiFields.add("shipping_addr1");
    openapiFields.add("shipping_addr2");
    openapiFields.add("shipping_city");
    openapiFields.add("shipping_country");
    openapiFields.add("shipping_country_code");
    openapiFields.add("shipping_firm_name");
    openapiFields.add("shipping_first_name");
    openapiFields.add("shipping_last_name");
    openapiFields.add("shipping_state");
    openapiFields.add("shipping_zip");
    openapiFields.add("shipping_zip4");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("shipping_addr1");
    openapiRequiredFields.add("shipping_city");
    openapiRequiredFields.add("shipping_first_name");
    openapiRequiredFields.add("shipping_last_name");
    openapiRequiredFields.add("shipping_state");
    openapiRequiredFields.add("shipping_zip");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShippingAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShippingAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShippingAddress is not found in the empty JSON string", ShippingAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShippingAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShippingAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShippingAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("shipping_addr1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_addr1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_addr1").toString()));
      }
      if ((jsonObj.get("shipping_addr2") != null && !jsonObj.get("shipping_addr2").isJsonNull()) && !jsonObj.get("shipping_addr2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_addr2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_addr2").toString()));
      }
      if (!jsonObj.get("shipping_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_city").toString()));
      }
      if ((jsonObj.get("shipping_country") != null && !jsonObj.get("shipping_country").isJsonNull()) && !jsonObj.get("shipping_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_country").toString()));
      }
      if ((jsonObj.get("shipping_country_code") != null && !jsonObj.get("shipping_country_code").isJsonNull()) && !jsonObj.get("shipping_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_country_code").toString()));
      }
      if ((jsonObj.get("shipping_firm_name") != null && !jsonObj.get("shipping_firm_name").isJsonNull()) && !jsonObj.get("shipping_firm_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_firm_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_firm_name").toString()));
      }
      if (!jsonObj.get("shipping_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_first_name").toString()));
      }
      if (!jsonObj.get("shipping_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_last_name").toString()));
      }
      if (!jsonObj.get("shipping_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_state").toString()));
      }
      if (!jsonObj.get("shipping_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_zip").toString()));
      }
      if ((jsonObj.get("shipping_zip4") != null && !jsonObj.get("shipping_zip4").isJsonNull()) && !jsonObj.get("shipping_zip4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipping_zip4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipping_zip4").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShippingAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShippingAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShippingAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShippingAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ShippingAddress>() {
           @Override
           public void write(JsonWriter out, ShippingAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShippingAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShippingAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShippingAddress
   * @throws IOException if the JSON string is invalid with respect to ShippingAddress
   */
  public static ShippingAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShippingAddress.class);
  }

  /**
   * Convert an instance of ShippingAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

