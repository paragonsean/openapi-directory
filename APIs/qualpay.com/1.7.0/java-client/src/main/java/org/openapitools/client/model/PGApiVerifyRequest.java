/*
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Customer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PGApiVerifyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:08.449119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PGApiVerifyRequest {
  public static final String SERIALIZED_NAME_AVS_ADDRESS = "avs_address";
  @SerializedName(SERIALIZED_NAME_AVS_ADDRESS)
  private String avsAddress;

  public static final String SERIALIZED_NAME_AVS_ZIP = "avs_zip";
  @SerializedName(SERIALIZED_NAME_AVS_ZIP)
  private String avsZip;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "card_number";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CARD_SWIPE = "card_swipe";
  @SerializedName(SERIALIZED_NAME_CARD_SWIPE)
  private String cardSwipe;

  public static final String SERIALIZED_NAME_CARDHOLDER_NAME = "cardholder_name";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_NAME)
  private String cardholderName;

  public static final String SERIALIZED_NAME_CLIENT_IP = "client_ip";
  @SerializedName(SERIALIZED_NAME_CLIENT_IP)
  private String clientIp;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_CUSTOMER_CODE = "customer_code";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_CODE)
  private String customerCode;

  public static final String SERIALIZED_NAME_CVV2 = "cvv2";
  @SerializedName(SERIALIZED_NAME_CVV2)
  private String cvv2;

  public static final String SERIALIZED_NAME_DDA_NUMBER = "dda_number";
  @SerializedName(SERIALIZED_NAME_DDA_NUMBER)
  private String ddaNumber;

  public static final String SERIALIZED_NAME_DEVELOPER_ID = "developer_id";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ID)
  private String developerId;

  public static final String SERIALIZED_NAME_ECHO_FIELDS = "echo_fields";
  @SerializedName(SERIALIZED_NAME_ECHO_FIELDS)
  private String echoFields;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "email_address";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private List<String> emailAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXP_DATE = "exp_date";
  @SerializedName(SERIALIZED_NAME_EXP_DATE)
  private String expDate;

  public static final String SERIALIZED_NAME_LOC_ID = "loc_id";
  @SerializedName(SERIALIZED_NAME_LOC_ID)
  private String locId;

  public static final String SERIALIZED_NAME_MERCH_REF_NUM = "merch_ref_num";
  @SerializedName(SERIALIZED_NAME_MERCH_REF_NUM)
  private String merchRefNum;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchant_id";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private Long merchantId;

  public static final String SERIALIZED_NAME_MOTO_ECOMM_IND = "moto_ecomm_ind";
  @SerializedName(SERIALIZED_NAME_MOTO_ECOMM_IND)
  private String motoEcommInd;

  public static final String SERIALIZED_NAME_PAYLOAD_APPLE_PAY = "payload_apple_pay";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_APPLE_PAY)
  private String payloadApplePay;

  public static final String SERIALIZED_NAME_PAYLOAD_GOOGLE_PAY = "payload_google_pay";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_GOOGLE_PAY)
  private String payloadGooglePay;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profile_id";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_REPORT_DATA = "report_data";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA)
  private String reportData;

  public static final String SERIALIZED_NAME_RETRY_ATTEMPT = "retry_attempt";
  @SerializedName(SERIALIZED_NAME_RETRY_ATTEMPT)
  private Long retryAttempt;

  public static final String SERIALIZED_NAME_RETRY_ID = "retry_id";
  @SerializedName(SERIALIZED_NAME_RETRY_ID)
  private Long retryId;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_TOKENIZE = "tokenize";
  @SerializedName(SERIALIZED_NAME_TOKENIZE)
  private Boolean tokenize;

  public static final String SERIALIZED_NAME_TR_NUMBER = "tr_number";
  @SerializedName(SERIALIZED_NAME_TR_NUMBER)
  private String trNumber;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private String typeId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public PGApiVerifyRequest() {
  }

  public PGApiVerifyRequest avsAddress(String avsAddress) {
    this.avsAddress = avsAddress;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 20 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.
   * @return avsAddress
   */
  @javax.annotation.Nullable
  public String getAvsAddress() {
    return avsAddress;
  }

  public void setAvsAddress(String avsAddress) {
    this.avsAddress = avsAddress;
  }


  public PGApiVerifyRequest avsZip(String avsZip) {
    this.avsZip = avsZip;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 9 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;This field is required if avs_address is present.
   * @return avsZip
   */
  @javax.annotation.Nullable
  public String getAvsZip() {
    return avsZip;
  }

  public void setAvsZip(String avsZip) {
    this.avsZip = avsZip;
  }


  public PGApiVerifyRequest cardId(String cardId) {
    this.cardId = cardId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Card ID received from a tokenization request. The card_id may be used in place of a card number or card swipe.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return cardId
   */
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }

  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public PGApiVerifyRequest cardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 19 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Cardholder&#39;s card number. &lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return cardNumber
   */
  @javax.annotation.Nonnull
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public PGApiVerifyRequest cardSwipe(String cardSwipe) {
    this.cardSwipe = cardSwipe;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 79 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Contains either track 1 or track 2 data magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return cardSwipe
   */
  @javax.annotation.Nullable
  public String getCardSwipe() {
    return cardSwipe;
  }

  public void setCardSwipe(String cardSwipe) {
    this.cardSwipe = cardSwipe;
  }


  public PGApiVerifyRequest cardholderName(String cardholderName) {
    this.cardholderName = cardholderName;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 64 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.
   * @return cardholderName
   */
  @javax.annotation.Nullable
  public String getCardholderName() {
    return cardholderName;
  }

  public void setCardholderName(String cardholderName) {
    this.cardholderName = cardholderName;
  }


  public PGApiVerifyRequest clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Client IP address.
   * @return clientIp
   */
  @javax.annotation.Nullable
  public String getClientIp() {
    return clientIp;
  }

  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }


  public PGApiVerifyRequest customer(Customer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public Customer getCustomer() {
    return customer;
  }

  public void setCustomer(Customer customer) {
    this.customer = customer;
  }


  public PGApiVerifyRequest customerCode(String customerCode) {
    this.customerCode = customerCode;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 17 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Reference code supplied by the cardholder to the merchant.
   * @return customerCode
   */
  @javax.annotation.Nullable
  public String getCustomerCode() {
    return customerCode;
  }

  public void setCustomerCode(String customerCode) {
    this.customerCode = customerCode;
  }


  public PGApiVerifyRequest cvv2(String cvv2) {
    this.cvv2 = cvv2;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;CVV2 or CID value from the signature panel on the back of the cardholder&#39;s card. If present during a request that requires authorization, the value will be sent to the issuer for validation.
   * @return cvv2
   */
  @javax.annotation.Nullable
  public String getCvv2() {
    return cvv2;
  }

  public void setCvv2(String cvv2) {
    this.cvv2 = cvv2;
  }


  public PGApiVerifyRequest ddaNumber(String ddaNumber) {
    this.ddaNumber = ddaNumber;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 17 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Owner&#39;s account number at the bank. Applicable for ACH payments.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return ddaNumber
   */
  @javax.annotation.Nullable
  public String getDdaNumber() {
    return ddaNumber;
  }

  public void setDdaNumber(String ddaNumber) {
    this.ddaNumber = ddaNumber;
  }


  public PGApiVerifyRequest developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 32 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 
   * @return developerId
   */
  @javax.annotation.Nullable
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }


  public PGApiVerifyRequest echoFields(String echoFields) {
    this.echoFields = echoFields;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a JSON array of field data that will be echoed back in the response message.
   * @return echoFields
   */
  @javax.annotation.Nullable
  public String getEchoFields() {
    return echoFields;
  }

  public void setEchoFields(String echoFields) {
    this.echoFields = echoFields;
  }


  public PGApiVerifyRequest emailAddress(List<String> emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  public PGApiVerifyRequest addEmailAddressItem(String emailAddressItem) {
    if (this.emailAddress == null) {
      this.emailAddress = new ArrayList<>();
    }
    this.emailAddress.add(emailAddressItem);
    return this;
  }

  /**
   *  AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;An array of account holder email addresses.
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public List<String> getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(List<String> emailAddress) {
    this.emailAddress = emailAddress;
  }


  public PGApiVerifyRequest expDate(String expDate) {
    this.expDate = expDate;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 4 N, MMYY format&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Expiration date of cardholder card number. Required when the field card_number is present. If card_swipe is present in the request, this field must NOT be present. When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return expDate
   */
  @javax.annotation.Nullable
  public String getExpDate() {
    return expDate;
  }

  public void setExpDate(String expDate) {
    this.expDate = expDate;
  }


  public PGApiVerifyRequest locId(String locId) {
    this.locId = locId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.
   * @return locId
   */
  @javax.annotation.Nullable
  public String getLocId() {
    return locId;
  }

  public void setLocId(String locId) {
    this.locId = locId;
  }


  public PGApiVerifyRequest merchRefNum(String merchRefNum) {
    this.merchRefNum = merchRefNum;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 128 AN&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Merchant provided reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.
   * @return merchRefNum
   */
  @javax.annotation.Nullable
  public String getMerchRefNum() {
    return merchRefNum;
  }

  public void setMerchRefNum(String merchRefNum) {
    this.merchRefNum = merchRefNum;
  }


  public PGApiVerifyRequest merchantId(Long merchantId) {
    this.merchantId = merchantId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 12 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Unique identifier on the Qualpay system.
   * @return merchantId
   */
  @javax.annotation.Nonnull
  public Long getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(Long merchantId) {
    this.merchantId = merchantId;
  }


  public PGApiVerifyRequest motoEcommInd(String motoEcommInd) {
    this.motoEcommInd = motoEcommInd;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 1 N&lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;7&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Indicates type of MOTO transaction: &lt;ul&gt;&lt;li&gt;0 &#x3D; Card Present (not MOTO/e-Commerce)&lt;/li&gt;&lt;li&gt; 1 &#x3D; One Time MOTO transaction&lt;/li&gt;&lt;li&gt;2 &#x3D; Recurring &lt;/li&gt;&lt;li&gt;3 &#x3D; Installment &lt;/li&gt;&lt;li&gt;5 &#x3D; Full 3D-Secure transaction&lt;/li&gt;&lt;li&gt;6 &#x3D; Merchant 3D-Secure transaction&lt;/li&gt;&lt;li&gt;7 &#x3D; e-Commerce Channel Encrypted (SSL)&lt;/li&gt;&lt;/ul&gt;
   * @return motoEcommInd
   */
  @javax.annotation.Nullable
  public String getMotoEcommInd() {
    return motoEcommInd;
  }

  public void setMotoEcommInd(String motoEcommInd) {
    this.motoEcommInd = motoEcommInd;
  }


  public PGApiVerifyRequest payloadApplePay(String payloadApplePay) {
    this.payloadApplePay = payloadApplePay;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Apple Pay payload
   * @return payloadApplePay
   */
  @javax.annotation.Nullable
  public String getPayloadApplePay() {
    return payloadApplePay;
  }

  public void setPayloadApplePay(String payloadApplePay) {
    this.payloadApplePay = payloadApplePay;
  }


  public PGApiVerifyRequest payloadGooglePay(String payloadGooglePay) {
    this.payloadGooglePay = payloadGooglePay;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Google Pay payload
   * @return payloadGooglePay
   */
  @javax.annotation.Nullable
  public String getPayloadGooglePay() {
    return payloadGooglePay;
  }

  public void setPayloadGooglePay(String payloadGooglePay) {
    this.payloadGooglePay = payloadGooglePay;
  }


  public PGApiVerifyRequest profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 20 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Explicitly identifies which Payment Gateway profile should be used for the request.
   * @return profileId
   */
  @javax.annotation.Nullable
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public PGApiVerifyRequest reportData(String reportData) {
    this.reportData = reportData;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.
   * @return reportData
   */
  @javax.annotation.Nullable
  public String getReportData() {
    return reportData;
  }

  public void setReportData(String reportData) {
    this.reportData = reportData;
  }


  public PGApiVerifyRequest retryAttempt(Long retryAttempt) {
    this.retryAttempt = retryAttempt;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 4 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;This field is required when the retry_id is present in the request message.
   * @return retryAttempt
   */
  @javax.annotation.Nullable
  public Long getRetryAttempt() {
    return retryAttempt;
  }

  public void setRetryAttempt(Long retryAttempt) {
    this.retryAttempt = retryAttempt;
  }


  public PGApiVerifyRequest retryId(Long retryId) {
    this.retryId = retryId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 15 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.
   * @return retryId
   */
  @javax.annotation.Nullable
  public Long getRetryId() {
    return retryId;
  }

  public void setRetryId(Long retryId) {
    this.retryId = retryId;
  }


  public PGApiVerifyRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * INTERNAL USE ONLY.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public PGApiVerifyRequest tokenize(Boolean tokenize) {
    this.tokenize = tokenize;
    return this;
  }

  /**
   * &lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;false&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;In an authorization, credit, force, sale, or verify request the merchant can set tokenize to \&quot;true\&quot; and the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the response. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.
   * @return tokenize
   */
  @javax.annotation.Nullable
  public Boolean getTokenize() {
    return tokenize;
  }

  public void setTokenize(Boolean tokenize) {
    this.tokenize = tokenize;
  }


  public PGApiVerifyRequest trNumber(String trNumber) {
    this.trNumber = trNumber;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 9 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Bank transit/routing number. Applicable for ACH payments.&lt;br&gt;&lt;strong&gt;Conditional Requirement: &lt;/strong&gt;Refer to &lt;a href&#x3D;\&quot;/developer/api/reference#card-source-conditional-requirements\&quot;target&#x3D;\&quot;_blank\&quot;&gt;Card or Bank Account Data Sources and Conditional Requirements&lt;/a&gt;
   * @return trNumber
   */
  @javax.annotation.Nullable
  public String getTrNumber() {
    return trNumber;
  }

  public void setTrNumber(String trNumber) {
    this.trNumber = trNumber;
  }


  public PGApiVerifyRequest typeId(String typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Fixed length, 1 AN&lt;br&gt;&lt;strong&gt;Default: &lt;/strong&gt;C&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Bank Account Type. Applicable for ACH payments. Possible values are: &lt;ul&gt;&lt;li&gt;C &#x3D; Personal checking account&lt;/li&gt;&lt;li&gt;S &#x3D; Personal savings account&lt;/li&gt;&lt;li&gt;K &#x3D; Business checking account&lt;/li&gt;&lt;li&gt;V &#x3D; Business savings account&lt;/li&gt;&lt;/ul&gt;
   * @return typeId
   */
  @javax.annotation.Nullable
  public String getTypeId() {
    return typeId;
  }

  public void setTypeId(String typeId) {
    this.typeId = typeId;
  }


  public PGApiVerifyRequest userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * INTERNAL USE ONLY.
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PGApiVerifyRequest pgApiVerifyRequest = (PGApiVerifyRequest) o;
    return Objects.equals(this.avsAddress, pgApiVerifyRequest.avsAddress) &&
        Objects.equals(this.avsZip, pgApiVerifyRequest.avsZip) &&
        Objects.equals(this.cardId, pgApiVerifyRequest.cardId) &&
        Objects.equals(this.cardNumber, pgApiVerifyRequest.cardNumber) &&
        Objects.equals(this.cardSwipe, pgApiVerifyRequest.cardSwipe) &&
        Objects.equals(this.cardholderName, pgApiVerifyRequest.cardholderName) &&
        Objects.equals(this.clientIp, pgApiVerifyRequest.clientIp) &&
        Objects.equals(this.customer, pgApiVerifyRequest.customer) &&
        Objects.equals(this.customerCode, pgApiVerifyRequest.customerCode) &&
        Objects.equals(this.cvv2, pgApiVerifyRequest.cvv2) &&
        Objects.equals(this.ddaNumber, pgApiVerifyRequest.ddaNumber) &&
        Objects.equals(this.developerId, pgApiVerifyRequest.developerId) &&
        Objects.equals(this.echoFields, pgApiVerifyRequest.echoFields) &&
        Objects.equals(this.emailAddress, pgApiVerifyRequest.emailAddress) &&
        Objects.equals(this.expDate, pgApiVerifyRequest.expDate) &&
        Objects.equals(this.locId, pgApiVerifyRequest.locId) &&
        Objects.equals(this.merchRefNum, pgApiVerifyRequest.merchRefNum) &&
        Objects.equals(this.merchantId, pgApiVerifyRequest.merchantId) &&
        Objects.equals(this.motoEcommInd, pgApiVerifyRequest.motoEcommInd) &&
        Objects.equals(this.payloadApplePay, pgApiVerifyRequest.payloadApplePay) &&
        Objects.equals(this.payloadGooglePay, pgApiVerifyRequest.payloadGooglePay) &&
        Objects.equals(this.profileId, pgApiVerifyRequest.profileId) &&
        Objects.equals(this.reportData, pgApiVerifyRequest.reportData) &&
        Objects.equals(this.retryAttempt, pgApiVerifyRequest.retryAttempt) &&
        Objects.equals(this.retryId, pgApiVerifyRequest.retryId) &&
        Objects.equals(this.sessionId, pgApiVerifyRequest.sessionId) &&
        Objects.equals(this.tokenize, pgApiVerifyRequest.tokenize) &&
        Objects.equals(this.trNumber, pgApiVerifyRequest.trNumber) &&
        Objects.equals(this.typeId, pgApiVerifyRequest.typeId) &&
        Objects.equals(this.userId, pgApiVerifyRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avsAddress, avsZip, cardId, cardNumber, cardSwipe, cardholderName, clientIp, customer, customerCode, cvv2, ddaNumber, developerId, echoFields, emailAddress, expDate, locId, merchRefNum, merchantId, motoEcommInd, payloadApplePay, payloadGooglePay, profileId, reportData, retryAttempt, retryId, sessionId, tokenize, trNumber, typeId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PGApiVerifyRequest {\n");
    sb.append("    avsAddress: ").append(toIndentedString(avsAddress)).append("\n");
    sb.append("    avsZip: ").append(toIndentedString(avsZip)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    cardSwipe: ").append(toIndentedString(cardSwipe)).append("\n");
    sb.append("    cardholderName: ").append(toIndentedString(cardholderName)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    cvv2: ").append(toIndentedString(cvv2)).append("\n");
    sb.append("    ddaNumber: ").append(toIndentedString(ddaNumber)).append("\n");
    sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    sb.append("    echoFields: ").append(toIndentedString(echoFields)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    expDate: ").append(toIndentedString(expDate)).append("\n");
    sb.append("    locId: ").append(toIndentedString(locId)).append("\n");
    sb.append("    merchRefNum: ").append(toIndentedString(merchRefNum)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    motoEcommInd: ").append(toIndentedString(motoEcommInd)).append("\n");
    sb.append("    payloadApplePay: ").append(toIndentedString(payloadApplePay)).append("\n");
    sb.append("    payloadGooglePay: ").append(toIndentedString(payloadGooglePay)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    reportData: ").append(toIndentedString(reportData)).append("\n");
    sb.append("    retryAttempt: ").append(toIndentedString(retryAttempt)).append("\n");
    sb.append("    retryId: ").append(toIndentedString(retryId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    tokenize: ").append(toIndentedString(tokenize)).append("\n");
    sb.append("    trNumber: ").append(toIndentedString(trNumber)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avs_address");
    openapiFields.add("avs_zip");
    openapiFields.add("card_id");
    openapiFields.add("card_number");
    openapiFields.add("card_swipe");
    openapiFields.add("cardholder_name");
    openapiFields.add("client_ip");
    openapiFields.add("customer");
    openapiFields.add("customer_code");
    openapiFields.add("cvv2");
    openapiFields.add("dda_number");
    openapiFields.add("developer_id");
    openapiFields.add("echo_fields");
    openapiFields.add("email_address");
    openapiFields.add("exp_date");
    openapiFields.add("loc_id");
    openapiFields.add("merch_ref_num");
    openapiFields.add("merchant_id");
    openapiFields.add("moto_ecomm_ind");
    openapiFields.add("payload_apple_pay");
    openapiFields.add("payload_google_pay");
    openapiFields.add("profile_id");
    openapiFields.add("report_data");
    openapiFields.add("retry_attempt");
    openapiFields.add("retry_id");
    openapiFields.add("session_id");
    openapiFields.add("tokenize");
    openapiFields.add("tr_number");
    openapiFields.add("type_id");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("card_number");
    openapiRequiredFields.add("merchant_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PGApiVerifyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PGApiVerifyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PGApiVerifyRequest is not found in the empty JSON string", PGApiVerifyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PGApiVerifyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PGApiVerifyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PGApiVerifyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avs_address") != null && !jsonObj.get("avs_address").isJsonNull()) && !jsonObj.get("avs_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avs_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avs_address").toString()));
      }
      if ((jsonObj.get("avs_zip") != null && !jsonObj.get("avs_zip").isJsonNull()) && !jsonObj.get("avs_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avs_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avs_zip").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if (!jsonObj.get("card_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_number").toString()));
      }
      if ((jsonObj.get("card_swipe") != null && !jsonObj.get("card_swipe").isJsonNull()) && !jsonObj.get("card_swipe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_swipe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_swipe").toString()));
      }
      if ((jsonObj.get("cardholder_name") != null && !jsonObj.get("cardholder_name").isJsonNull()) && !jsonObj.get("cardholder_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardholder_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardholder_name").toString()));
      }
      if ((jsonObj.get("client_ip") != null && !jsonObj.get("client_ip").isJsonNull()) && !jsonObj.get("client_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_ip").toString()));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("customer_code") != null && !jsonObj.get("customer_code").isJsonNull()) && !jsonObj.get("customer_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_code").toString()));
      }
      if ((jsonObj.get("cvv2") != null && !jsonObj.get("cvv2").isJsonNull()) && !jsonObj.get("cvv2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvv2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvv2").toString()));
      }
      if ((jsonObj.get("dda_number") != null && !jsonObj.get("dda_number").isJsonNull()) && !jsonObj.get("dda_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dda_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dda_number").toString()));
      }
      if ((jsonObj.get("developer_id") != null && !jsonObj.get("developer_id").isJsonNull()) && !jsonObj.get("developer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_id").toString()));
      }
      if ((jsonObj.get("echo_fields") != null && !jsonObj.get("echo_fields").isJsonNull()) && !jsonObj.get("echo_fields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `echo_fields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("echo_fields").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("email_address") != null && !jsonObj.get("email_address").isJsonNull() && !jsonObj.get("email_address").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `email_address` to be an array in the JSON string but got `%s`", jsonObj.get("email_address").toString()));
      }
      if ((jsonObj.get("exp_date") != null && !jsonObj.get("exp_date").isJsonNull()) && !jsonObj.get("exp_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exp_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exp_date").toString()));
      }
      if ((jsonObj.get("loc_id") != null && !jsonObj.get("loc_id").isJsonNull()) && !jsonObj.get("loc_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loc_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loc_id").toString()));
      }
      if ((jsonObj.get("merch_ref_num") != null && !jsonObj.get("merch_ref_num").isJsonNull()) && !jsonObj.get("merch_ref_num").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merch_ref_num` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merch_ref_num").toString()));
      }
      if ((jsonObj.get("moto_ecomm_ind") != null && !jsonObj.get("moto_ecomm_ind").isJsonNull()) && !jsonObj.get("moto_ecomm_ind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moto_ecomm_ind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moto_ecomm_ind").toString()));
      }
      if ((jsonObj.get("payload_apple_pay") != null && !jsonObj.get("payload_apple_pay").isJsonNull()) && !jsonObj.get("payload_apple_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_apple_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_apple_pay").toString()));
      }
      if ((jsonObj.get("payload_google_pay") != null && !jsonObj.get("payload_google_pay").isJsonNull()) && !jsonObj.get("payload_google_pay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_google_pay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_google_pay").toString()));
      }
      if ((jsonObj.get("profile_id") != null && !jsonObj.get("profile_id").isJsonNull()) && !jsonObj.get("profile_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_id").toString()));
      }
      if ((jsonObj.get("report_data") != null && !jsonObj.get("report_data").isJsonNull()) && !jsonObj.get("report_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_data").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("tr_number") != null && !jsonObj.get("tr_number").isJsonNull()) && !jsonObj.get("tr_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tr_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tr_number").toString()));
      }
      if ((jsonObj.get("type_id") != null && !jsonObj.get("type_id").isJsonNull()) && !jsonObj.get("type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PGApiVerifyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PGApiVerifyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PGApiVerifyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PGApiVerifyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PGApiVerifyRequest>() {
           @Override
           public void write(JsonWriter out, PGApiVerifyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PGApiVerifyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PGApiVerifyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PGApiVerifyRequest
   * @throws IOException if the JSON string is invalid with respect to PGApiVerifyRequest
   */
  public static PGApiVerifyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PGApiVerifyRequest.class);
  }

  /**
   * Convert an instance of PGApiVerifyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

