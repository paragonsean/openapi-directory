/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShippingAddress model module.
 * @module model/ShippingAddress
 * @version 1.7.0
 */
class ShippingAddress {
    /**
     * Constructs a new <code>ShippingAddress</code>.
     * @alias module:model/ShippingAddress
     * @param shippingAddr1 {String} <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer street and number, P.O. box, c/o.
     * @param shippingCity {String} <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping city.
     * @param shippingFirstName {String} <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping first name.
     * @param shippingLastName {String} <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping last name.
     * @param shippingState {String} <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping state (abbreviated).
     * @param shippingZip {String} <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping zip code.
     */
    constructor(shippingAddr1, shippingCity, shippingFirstName, shippingLastName, shippingState, shippingZip) { 
        
        ShippingAddress.initialize(this, shippingAddr1, shippingCity, shippingFirstName, shippingLastName, shippingState, shippingZip);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, shippingAddr1, shippingCity, shippingFirstName, shippingLastName, shippingState, shippingZip) { 
        obj['shipping_addr1'] = shippingAddr1;
        obj['shipping_city'] = shippingCity;
        obj['shipping_first_name'] = shippingFirstName;
        obj['shipping_last_name'] = shippingLastName;
        obj['shipping_state'] = shippingState;
        obj['shipping_zip'] = shippingZip;
    }

    /**
     * Constructs a <code>ShippingAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingAddress} obj Optional instance to populate.
     * @return {module:model/ShippingAddress} The populated <code>ShippingAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingAddress();

            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('shipping_addr1')) {
                obj['shipping_addr1'] = ApiClient.convertToType(data['shipping_addr1'], 'String');
            }
            if (data.hasOwnProperty('shipping_addr2')) {
                obj['shipping_addr2'] = ApiClient.convertToType(data['shipping_addr2'], 'String');
            }
            if (data.hasOwnProperty('shipping_city')) {
                obj['shipping_city'] = ApiClient.convertToType(data['shipping_city'], 'String');
            }
            if (data.hasOwnProperty('shipping_country')) {
                obj['shipping_country'] = ApiClient.convertToType(data['shipping_country'], 'String');
            }
            if (data.hasOwnProperty('shipping_country_code')) {
                obj['shipping_country_code'] = ApiClient.convertToType(data['shipping_country_code'], 'String');
            }
            if (data.hasOwnProperty('shipping_firm_name')) {
                obj['shipping_firm_name'] = ApiClient.convertToType(data['shipping_firm_name'], 'String');
            }
            if (data.hasOwnProperty('shipping_first_name')) {
                obj['shipping_first_name'] = ApiClient.convertToType(data['shipping_first_name'], 'String');
            }
            if (data.hasOwnProperty('shipping_last_name')) {
                obj['shipping_last_name'] = ApiClient.convertToType(data['shipping_last_name'], 'String');
            }
            if (data.hasOwnProperty('shipping_state')) {
                obj['shipping_state'] = ApiClient.convertToType(data['shipping_state'], 'String');
            }
            if (data.hasOwnProperty('shipping_zip')) {
                obj['shipping_zip'] = ApiClient.convertToType(data['shipping_zip'], 'String');
            }
            if (data.hasOwnProperty('shipping_zip4')) {
                obj['shipping_zip4'] = ApiClient.convertToType(data['shipping_zip4'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShippingAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['shipping_addr1'] && !(typeof data['shipping_addr1'] === 'string' || data['shipping_addr1'] instanceof String)) {
            throw new Error("Expected the field `shipping_addr1` to be a primitive type in the JSON string but got " + data['shipping_addr1']);
        }
        // ensure the json data is a string
        if (data['shipping_addr2'] && !(typeof data['shipping_addr2'] === 'string' || data['shipping_addr2'] instanceof String)) {
            throw new Error("Expected the field `shipping_addr2` to be a primitive type in the JSON string but got " + data['shipping_addr2']);
        }
        // ensure the json data is a string
        if (data['shipping_city'] && !(typeof data['shipping_city'] === 'string' || data['shipping_city'] instanceof String)) {
            throw new Error("Expected the field `shipping_city` to be a primitive type in the JSON string but got " + data['shipping_city']);
        }
        // ensure the json data is a string
        if (data['shipping_country'] && !(typeof data['shipping_country'] === 'string' || data['shipping_country'] instanceof String)) {
            throw new Error("Expected the field `shipping_country` to be a primitive type in the JSON string but got " + data['shipping_country']);
        }
        // ensure the json data is a string
        if (data['shipping_country_code'] && !(typeof data['shipping_country_code'] === 'string' || data['shipping_country_code'] instanceof String)) {
            throw new Error("Expected the field `shipping_country_code` to be a primitive type in the JSON string but got " + data['shipping_country_code']);
        }
        // ensure the json data is a string
        if (data['shipping_firm_name'] && !(typeof data['shipping_firm_name'] === 'string' || data['shipping_firm_name'] instanceof String)) {
            throw new Error("Expected the field `shipping_firm_name` to be a primitive type in the JSON string but got " + data['shipping_firm_name']);
        }
        // ensure the json data is a string
        if (data['shipping_first_name'] && !(typeof data['shipping_first_name'] === 'string' || data['shipping_first_name'] instanceof String)) {
            throw new Error("Expected the field `shipping_first_name` to be a primitive type in the JSON string but got " + data['shipping_first_name']);
        }
        // ensure the json data is a string
        if (data['shipping_last_name'] && !(typeof data['shipping_last_name'] === 'string' || data['shipping_last_name'] instanceof String)) {
            throw new Error("Expected the field `shipping_last_name` to be a primitive type in the JSON string but got " + data['shipping_last_name']);
        }
        // ensure the json data is a string
        if (data['shipping_state'] && !(typeof data['shipping_state'] === 'string' || data['shipping_state'] instanceof String)) {
            throw new Error("Expected the field `shipping_state` to be a primitive type in the JSON string but got " + data['shipping_state']);
        }
        // ensure the json data is a string
        if (data['shipping_zip'] && !(typeof data['shipping_zip'] === 'string' || data['shipping_zip'] instanceof String)) {
            throw new Error("Expected the field `shipping_zip` to be a primitive type in the JSON string but got " + data['shipping_zip']);
        }
        // ensure the json data is a string
        if (data['shipping_zip4'] && !(typeof data['shipping_zip4'] === 'string' || data['shipping_zip4'] instanceof String)) {
            throw new Error("Expected the field `shipping_zip4` to be a primitive type in the JSON string but got " + data['shipping_zip4']);
        }

        return true;
    }


}

ShippingAddress.RequiredProperties = ["shipping_addr1", "shipping_city", "shipping_first_name", "shipping_last_name", "shipping_state", "shipping_zip"];

/**
 * <br><strong>Default: </strong>false<br><strong>Description: </strong>Identifies the primary shipping address where there are multiple shipping addresses.
 * @member {Boolean} primary
 */
ShippingAddress.prototype['primary'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer street and number, P.O. box, c/o.
 * @member {String} shipping_addr1
 */
ShippingAddress.prototype['shipping_addr1'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer apartment, suite, unit, building, floor, etc.
 * @member {String} shipping_addr2
 */
ShippingAddress.prototype['shipping_addr2'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping city.
 * @member {String} shipping_city
 */
ShippingAddress.prototype['shipping_city'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping country.
 * @member {String} shipping_country
 */
ShippingAddress.prototype['shipping_country'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 3 N<br><strong>Description: </strong>ISO numeric country code for the shipping address. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of country codes. If the country code is provided, the shipping_country will be updated to match the country code. 
 * @member {String} shipping_country_code
 */
ShippingAddress.prototype['shipping_country_code'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>Business name if applicable. 
 * @member {String} shipping_firm_name
 */
ShippingAddress.prototype['shipping_firm_name'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping first name.
 * @member {String} shipping_first_name
 */
ShippingAddress.prototype['shipping_first_name'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer shipping last name.
 * @member {String} shipping_last_name
 */
ShippingAddress.prototype['shipping_last_name'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping state (abbreviated).
 * @member {String} shipping_state
 */
ShippingAddress.prototype['shipping_state'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Customer shipping zip code.
 * @member {String} shipping_zip
 */
ShippingAddress.prototype['shipping_zip'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 4 N<br><strong>Description: </strong>Customer shipping zip+4 code if applicable.
 * @member {String} shipping_zip4
 */
ShippingAddress.prototype['shipping_zip4'] = undefined;






export default ShippingAddress;

