/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Customer from './Customer';

/**
 * The PGApiTransactionRequest model module.
 * @module model/PGApiTransactionRequest
 * @version 1.7.0
 */
class PGApiTransactionRequest {
    /**
     * Constructs a new <code>PGApiTransactionRequest</code>.
     * @alias module:model/PGApiTransactionRequest
     * @param merchantId {Number} <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.
     */
    constructor(merchantId) { 
        
        PGApiTransactionRequest.initialize(this, merchantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, merchantId) { 
        obj['merchant_id'] = merchantId;
    }

    /**
     * Constructs a <code>PGApiTransactionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PGApiTransactionRequest} obj Optional instance to populate.
     * @return {module:model/PGApiTransactionRequest} The populated <code>PGApiTransactionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PGApiTransactionRequest();

            if (data.hasOwnProperty('amt_convenience_fee')) {
                obj['amt_convenience_fee'] = ApiClient.convertToType(data['amt_convenience_fee'], 'Number');
            }
            if (data.hasOwnProperty('amt_fbo')) {
                obj['amt_fbo'] = ApiClient.convertToType(data['amt_fbo'], 'Number');
            }
            if (data.hasOwnProperty('amt_tax')) {
                obj['amt_tax'] = ApiClient.convertToType(data['amt_tax'], 'Number');
            }
            if (data.hasOwnProperty('amt_tran')) {
                obj['amt_tran'] = ApiClient.convertToType(data['amt_tran'], 'Number');
            }
            if (data.hasOwnProperty('amt_tran_fee')) {
                obj['amt_tran_fee'] = ApiClient.convertToType(data['amt_tran_fee'], 'Number');
            }
            if (data.hasOwnProperty('auth_code')) {
                obj['auth_code'] = ApiClient.convertToType(data['auth_code'], 'String');
            }
            if (data.hasOwnProperty('avs_address')) {
                obj['avs_address'] = ApiClient.convertToType(data['avs_address'], 'String');
            }
            if (data.hasOwnProperty('avs_zip')) {
                obj['avs_zip'] = ApiClient.convertToType(data['avs_zip'], 'String');
            }
            if (data.hasOwnProperty('card_id')) {
                obj['card_id'] = ApiClient.convertToType(data['card_id'], 'String');
            }
            if (data.hasOwnProperty('card_number')) {
                obj['card_number'] = ApiClient.convertToType(data['card_number'], 'String');
            }
            if (data.hasOwnProperty('card_swipe')) {
                obj['card_swipe'] = ApiClient.convertToType(data['card_swipe'], 'String');
            }
            if (data.hasOwnProperty('cardholder_name')) {
                obj['cardholder_name'] = ApiClient.convertToType(data['cardholder_name'], 'String');
            }
            if (data.hasOwnProperty('cavv_3ds')) {
                obj['cavv_3ds'] = ApiClient.convertToType(data['cavv_3ds'], 'String');
            }
            if (data.hasOwnProperty('client_ip')) {
                obj['client_ip'] = ApiClient.convertToType(data['client_ip'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = Customer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('customer_code')) {
                obj['customer_code'] = ApiClient.convertToType(data['customer_code'], 'String');
            }
            if (data.hasOwnProperty('customer_email')) {
                obj['customer_email'] = ApiClient.convertToType(data['customer_email'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('cvv2')) {
                obj['cvv2'] = ApiClient.convertToType(data['cvv2'], 'String');
            }
            if (data.hasOwnProperty('dba_name')) {
                obj['dba_name'] = ApiClient.convertToType(data['dba_name'], 'String');
            }
            if (data.hasOwnProperty('dba_suffix')) {
                obj['dba_suffix'] = ApiClient.convertToType(data['dba_suffix'], 'String');
            }
            if (data.hasOwnProperty('dda_number')) {
                obj['dda_number'] = ApiClient.convertToType(data['dda_number'], 'String');
            }
            if (data.hasOwnProperty('developer_id')) {
                obj['developer_id'] = ApiClient.convertToType(data['developer_id'], 'String');
            }
            if (data.hasOwnProperty('duplicate_seconds')) {
                obj['duplicate_seconds'] = ApiClient.convertToType(data['duplicate_seconds'], 'Number');
            }
            if (data.hasOwnProperty('echo_fields')) {
                obj['echo_fields'] = ApiClient.convertToType(data['echo_fields'], 'String');
            }
            if (data.hasOwnProperty('email_address')) {
                obj['email_address'] = ApiClient.convertToType(data['email_address'], ['String']);
            }
            if (data.hasOwnProperty('email_receipt')) {
                obj['email_receipt'] = ApiClient.convertToType(data['email_receipt'], 'Boolean');
            }
            if (data.hasOwnProperty('emv_tran_id')) {
                obj['emv_tran_id'] = ApiClient.convertToType(data['emv_tran_id'], 'String');
            }
            if (data.hasOwnProperty('exp_date')) {
                obj['exp_date'] = ApiClient.convertToType(data['exp_date'], 'String');
            }
            if (data.hasOwnProperty('fbo_id')) {
                obj['fbo_id'] = ApiClient.convertToType(data['fbo_id'], 'Number');
            }
            if (data.hasOwnProperty('line_items')) {
                obj['line_items'] = ApiClient.convertToType(data['line_items'], 'String');
            }
            if (data.hasOwnProperty('loc_id')) {
                obj['loc_id'] = ApiClient.convertToType(data['loc_id'], 'String');
            }
            if (data.hasOwnProperty('mc_ucaf_data')) {
                obj['mc_ucaf_data'] = ApiClient.convertToType(data['mc_ucaf_data'], 'String');
            }
            if (data.hasOwnProperty('mc_ucaf_ind')) {
                obj['mc_ucaf_ind'] = ApiClient.convertToType(data['mc_ucaf_ind'], 'String');
            }
            if (data.hasOwnProperty('merch_ref_num')) {
                obj['merch_ref_num'] = ApiClient.convertToType(data['merch_ref_num'], 'String');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'Number');
            }
            if (data.hasOwnProperty('moto_ecomm_ind')) {
                obj['moto_ecomm_ind'] = ApiClient.convertToType(data['moto_ecomm_ind'], 'String');
            }
            if (data.hasOwnProperty('partial_auth')) {
                obj['partial_auth'] = ApiClient.convertToType(data['partial_auth'], 'Boolean');
            }
            if (data.hasOwnProperty('payload_apple_pay')) {
                obj['payload_apple_pay'] = ApiClient.convertToType(data['payload_apple_pay'], 'String');
            }
            if (data.hasOwnProperty('payload_google_pay')) {
                obj['payload_google_pay'] = ApiClient.convertToType(data['payload_google_pay'], 'String');
            }
            if (data.hasOwnProperty('pg_id')) {
                obj['pg_id'] = ApiClient.convertToType(data['pg_id'], 'String');
            }
            if (data.hasOwnProperty('profile_id')) {
                obj['profile_id'] = ApiClient.convertToType(data['profile_id'], 'String');
            }
            if (data.hasOwnProperty('purchase_id')) {
                obj['purchase_id'] = ApiClient.convertToType(data['purchase_id'], 'String');
            }
            if (data.hasOwnProperty('report_data')) {
                obj['report_data'] = ApiClient.convertToType(data['report_data'], 'String');
            }
            if (data.hasOwnProperty('retry_attempt')) {
                obj['retry_attempt'] = ApiClient.convertToType(data['retry_attempt'], 'Number');
            }
            if (data.hasOwnProperty('retry_id')) {
                obj['retry_id'] = ApiClient.convertToType(data['retry_id'], 'Number');
            }
            if (data.hasOwnProperty('session_id')) {
                obj['session_id'] = ApiClient.convertToType(data['session_id'], 'String');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'Number');
            }
            if (data.hasOwnProperty('tokenize')) {
                obj['tokenize'] = ApiClient.convertToType(data['tokenize'], 'Boolean');
            }
            if (data.hasOwnProperty('tr_number')) {
                obj['tr_number'] = ApiClient.convertToType(data['tr_number'], 'String');
            }
            if (data.hasOwnProperty('tran_currency')) {
                obj['tran_currency'] = ApiClient.convertToType(data['tran_currency'], 'Number');
            }
            if (data.hasOwnProperty('type_id')) {
                obj['type_id'] = ApiClient.convertToType(data['type_id'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('vendor_id')) {
                obj['vendor_id'] = ApiClient.convertToType(data['vendor_id'], 'Number');
            }
            if (data.hasOwnProperty('xid_3ds')) {
                obj['xid_3ds'] = ApiClient.convertToType(data['xid_3ds'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PGApiTransactionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PGApiTransactionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PGApiTransactionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['auth_code'] && !(typeof data['auth_code'] === 'string' || data['auth_code'] instanceof String)) {
            throw new Error("Expected the field `auth_code` to be a primitive type in the JSON string but got " + data['auth_code']);
        }
        // ensure the json data is a string
        if (data['avs_address'] && !(typeof data['avs_address'] === 'string' || data['avs_address'] instanceof String)) {
            throw new Error("Expected the field `avs_address` to be a primitive type in the JSON string but got " + data['avs_address']);
        }
        // ensure the json data is a string
        if (data['avs_zip'] && !(typeof data['avs_zip'] === 'string' || data['avs_zip'] instanceof String)) {
            throw new Error("Expected the field `avs_zip` to be a primitive type in the JSON string but got " + data['avs_zip']);
        }
        // ensure the json data is a string
        if (data['card_id'] && !(typeof data['card_id'] === 'string' || data['card_id'] instanceof String)) {
            throw new Error("Expected the field `card_id` to be a primitive type in the JSON string but got " + data['card_id']);
        }
        // ensure the json data is a string
        if (data['card_number'] && !(typeof data['card_number'] === 'string' || data['card_number'] instanceof String)) {
            throw new Error("Expected the field `card_number` to be a primitive type in the JSON string but got " + data['card_number']);
        }
        // ensure the json data is a string
        if (data['card_swipe'] && !(typeof data['card_swipe'] === 'string' || data['card_swipe'] instanceof String)) {
            throw new Error("Expected the field `card_swipe` to be a primitive type in the JSON string but got " + data['card_swipe']);
        }
        // ensure the json data is a string
        if (data['cardholder_name'] && !(typeof data['cardholder_name'] === 'string' || data['cardholder_name'] instanceof String)) {
            throw new Error("Expected the field `cardholder_name` to be a primitive type in the JSON string but got " + data['cardholder_name']);
        }
        // ensure the json data is a string
        if (data['cavv_3ds'] && !(typeof data['cavv_3ds'] === 'string' || data['cavv_3ds'] instanceof String)) {
            throw new Error("Expected the field `cavv_3ds` to be a primitive type in the JSON string but got " + data['cavv_3ds']);
        }
        // ensure the json data is a string
        if (data['client_ip'] && !(typeof data['client_ip'] === 'string' || data['client_ip'] instanceof String)) {
            throw new Error("Expected the field `client_ip` to be a primitive type in the JSON string but got " + data['client_ip']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          Customer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['customer_code'] && !(typeof data['customer_code'] === 'string' || data['customer_code'] instanceof String)) {
            throw new Error("Expected the field `customer_code` to be a primitive type in the JSON string but got " + data['customer_code']);
        }
        // ensure the json data is a string
        if (data['customer_email'] && !(typeof data['customer_email'] === 'string' || data['customer_email'] instanceof String)) {
            throw new Error("Expected the field `customer_email` to be a primitive type in the JSON string but got " + data['customer_email']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['cvv2'] && !(typeof data['cvv2'] === 'string' || data['cvv2'] instanceof String)) {
            throw new Error("Expected the field `cvv2` to be a primitive type in the JSON string but got " + data['cvv2']);
        }
        // ensure the json data is a string
        if (data['dba_name'] && !(typeof data['dba_name'] === 'string' || data['dba_name'] instanceof String)) {
            throw new Error("Expected the field `dba_name` to be a primitive type in the JSON string but got " + data['dba_name']);
        }
        // ensure the json data is a string
        if (data['dba_suffix'] && !(typeof data['dba_suffix'] === 'string' || data['dba_suffix'] instanceof String)) {
            throw new Error("Expected the field `dba_suffix` to be a primitive type in the JSON string but got " + data['dba_suffix']);
        }
        // ensure the json data is a string
        if (data['dda_number'] && !(typeof data['dda_number'] === 'string' || data['dda_number'] instanceof String)) {
            throw new Error("Expected the field `dda_number` to be a primitive type in the JSON string but got " + data['dda_number']);
        }
        // ensure the json data is a string
        if (data['developer_id'] && !(typeof data['developer_id'] === 'string' || data['developer_id'] instanceof String)) {
            throw new Error("Expected the field `developer_id` to be a primitive type in the JSON string but got " + data['developer_id']);
        }
        // ensure the json data is a string
        if (data['echo_fields'] && !(typeof data['echo_fields'] === 'string' || data['echo_fields'] instanceof String)) {
            throw new Error("Expected the field `echo_fields` to be a primitive type in the JSON string but got " + data['echo_fields']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['email_address'])) {
            throw new Error("Expected the field `email_address` to be an array in the JSON data but got " + data['email_address']);
        }
        // ensure the json data is a string
        if (data['emv_tran_id'] && !(typeof data['emv_tran_id'] === 'string' || data['emv_tran_id'] instanceof String)) {
            throw new Error("Expected the field `emv_tran_id` to be a primitive type in the JSON string but got " + data['emv_tran_id']);
        }
        // ensure the json data is a string
        if (data['exp_date'] && !(typeof data['exp_date'] === 'string' || data['exp_date'] instanceof String)) {
            throw new Error("Expected the field `exp_date` to be a primitive type in the JSON string but got " + data['exp_date']);
        }
        // ensure the json data is a string
        if (data['line_items'] && !(typeof data['line_items'] === 'string' || data['line_items'] instanceof String)) {
            throw new Error("Expected the field `line_items` to be a primitive type in the JSON string but got " + data['line_items']);
        }
        // ensure the json data is a string
        if (data['loc_id'] && !(typeof data['loc_id'] === 'string' || data['loc_id'] instanceof String)) {
            throw new Error("Expected the field `loc_id` to be a primitive type in the JSON string but got " + data['loc_id']);
        }
        // ensure the json data is a string
        if (data['mc_ucaf_data'] && !(typeof data['mc_ucaf_data'] === 'string' || data['mc_ucaf_data'] instanceof String)) {
            throw new Error("Expected the field `mc_ucaf_data` to be a primitive type in the JSON string but got " + data['mc_ucaf_data']);
        }
        // ensure the json data is a string
        if (data['mc_ucaf_ind'] && !(typeof data['mc_ucaf_ind'] === 'string' || data['mc_ucaf_ind'] instanceof String)) {
            throw new Error("Expected the field `mc_ucaf_ind` to be a primitive type in the JSON string but got " + data['mc_ucaf_ind']);
        }
        // ensure the json data is a string
        if (data['merch_ref_num'] && !(typeof data['merch_ref_num'] === 'string' || data['merch_ref_num'] instanceof String)) {
            throw new Error("Expected the field `merch_ref_num` to be a primitive type in the JSON string but got " + data['merch_ref_num']);
        }
        // ensure the json data is a string
        if (data['moto_ecomm_ind'] && !(typeof data['moto_ecomm_ind'] === 'string' || data['moto_ecomm_ind'] instanceof String)) {
            throw new Error("Expected the field `moto_ecomm_ind` to be a primitive type in the JSON string but got " + data['moto_ecomm_ind']);
        }
        // ensure the json data is a string
        if (data['payload_apple_pay'] && !(typeof data['payload_apple_pay'] === 'string' || data['payload_apple_pay'] instanceof String)) {
            throw new Error("Expected the field `payload_apple_pay` to be a primitive type in the JSON string but got " + data['payload_apple_pay']);
        }
        // ensure the json data is a string
        if (data['payload_google_pay'] && !(typeof data['payload_google_pay'] === 'string' || data['payload_google_pay'] instanceof String)) {
            throw new Error("Expected the field `payload_google_pay` to be a primitive type in the JSON string but got " + data['payload_google_pay']);
        }
        // ensure the json data is a string
        if (data['pg_id'] && !(typeof data['pg_id'] === 'string' || data['pg_id'] instanceof String)) {
            throw new Error("Expected the field `pg_id` to be a primitive type in the JSON string but got " + data['pg_id']);
        }
        // ensure the json data is a string
        if (data['profile_id'] && !(typeof data['profile_id'] === 'string' || data['profile_id'] instanceof String)) {
            throw new Error("Expected the field `profile_id` to be a primitive type in the JSON string but got " + data['profile_id']);
        }
        // ensure the json data is a string
        if (data['purchase_id'] && !(typeof data['purchase_id'] === 'string' || data['purchase_id'] instanceof String)) {
            throw new Error("Expected the field `purchase_id` to be a primitive type in the JSON string but got " + data['purchase_id']);
        }
        // ensure the json data is a string
        if (data['report_data'] && !(typeof data['report_data'] === 'string' || data['report_data'] instanceof String)) {
            throw new Error("Expected the field `report_data` to be a primitive type in the JSON string but got " + data['report_data']);
        }
        // ensure the json data is a string
        if (data['session_id'] && !(typeof data['session_id'] === 'string' || data['session_id'] instanceof String)) {
            throw new Error("Expected the field `session_id` to be a primitive type in the JSON string but got " + data['session_id']);
        }
        // ensure the json data is a string
        if (data['tr_number'] && !(typeof data['tr_number'] === 'string' || data['tr_number'] instanceof String)) {
            throw new Error("Expected the field `tr_number` to be a primitive type in the JSON string but got " + data['tr_number']);
        }
        // ensure the json data is a string
        if (data['type_id'] && !(typeof data['type_id'] === 'string' || data['type_id'] instanceof String)) {
            throw new Error("Expected the field `type_id` to be a primitive type in the JSON string but got " + data['type_id']);
        }
        // ensure the json data is a string
        if (data['xid_3ds'] && !(typeof data['xid_3ds'] === 'string' || data['xid_3ds'] instanceof String)) {
            throw new Error("Expected the field `xid_3ds` to be a primitive type in the JSON string but got " + data['xid_3ds']);
        }

        return true;
    }


}

PGApiTransactionRequest.RequiredProperties = ["merchant_id"];

/**
 * <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of convenience fee. A convenience fee is a fee charged to your customer for the \"convenience\" of being able to pay using an alternative payment channel outside your merchant's customary payment channel. Must be a flat/fixed fee amount per transaction. This field tracks the convenience fee amount for display purposes, but the amount of the fee must be included in amt_tran.
 * @member {Number} amt_convenience_fee
 */
PGApiTransactionRequest.prototype['amt_convenience_fee'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction to be transferred to the \"for benefit of\" (FBO) account.
 * @member {Number} amt_fbo
 */
PGApiTransactionRequest.prototype['amt_fbo'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Amount of sales tax included in the total transaction amount. This field tracks the tax amount for display and interchange purposes, but the amount of the tax must be included in amt_tran.<br><strong>Conditional Requirement: </strong>Required for Level 2 and Level 3 interchange qualification.
 * @member {Number} amt_tax
 */
PGApiTransactionRequest.prototype['amt_tax'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction including sales tax (amt_tax), convenience fee (amt_convenience_fee), and/or surcharge (amt_tran_fee) if applicable.
 * @member {Number} amt_tran
 */
PGApiTransactionRequest.prototype['amt_tran'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of transaction surcharge fee. A surcharge is a fee added to the cost of a purchase for the \"privilege\" of using a credit card instead of another form of payment, and can be a percentage of the transaction amount or fixed amount of up to 4% of amt_tran. This field tracks the surcharge amount of the transaction for display purposes, but the amount of the fee must be included in amt_tran.
 * @member {Number} amt_tran_fee
 */
PGApiTransactionRequest.prototype['amt_tran_fee'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 6 AN<br><strong>Description: </strong>This field should contain the 6-character authorization code that was received during a voice or Automated Response Unit(ARU) authorization for force request type. This is field is applicable to only force request type.<br><strong>Conditional Requirement: </strong>This field is required in force request type.
 * @member {String} auth_code
 */
PGApiTransactionRequest.prototype['auth_code'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 20 AN<br><strong>Description: </strong>Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.
 * @member {String} avs_address
 */
PGApiTransactionRequest.prototype['avs_address'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 9 AN<br><strong>Description: </strong>Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.<br><strong>Conditional Requirement: </strong>This field is required if avs_address is present.
 * @member {String} avs_zip
 */
PGApiTransactionRequest.prototype['avs_zip'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>Card ID received from a tokenization request. The card_id may be used in place of a card number or card swipe.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {String} card_id
 */
PGApiTransactionRequest.prototype['card_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {String} card_number
 */
PGApiTransactionRequest.prototype['card_number'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 79 AN<br><strong>Description: </strong>Contains either track 1 or track 2 magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {String} card_swipe
 */
PGApiTransactionRequest.prototype['card_swipe'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.
 * @member {String} cardholder_name
 */
PGApiTransactionRequest.prototype['cardholder_name'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base 64 encoded CAVV returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for Visa 3D Secure transactions.
 * @member {String} cavv_3ds
 */
PGApiTransactionRequest.prototype['cavv_3ds'] = undefined;

/**
 * <strong>Format: </strong>Variable length AN<br><strong>Description: </strong>Client IP address.
 * @member {String} client_ip
 */
PGApiTransactionRequest.prototype['client_ip'] = undefined;

/**
 * @member {module:model/Customer} customer
 */
PGApiTransactionRequest.prototype['customer'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 17 AN<br><strong>Description: </strong>Reference code supplied by the cardholder to the merchant.
 * @member {String} customer_code
 */
PGApiTransactionRequest.prototype['customer_code'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong><strong>[Deprecated use email_address]</strong> Comma-separated list of e-mail addresses to which a receipt should be sent.
 * @member {String} customer_email
 */
PGApiTransactionRequest.prototype['customer_email'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer ID value established by the merchant. The customer_id may be used in place of a card number in requests requiring cardholder account data. When used with a card_id or card_number or card_swipe, the request will be tied to the customer_id in Qualpay reporting. <br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {String} customer_id
 */
PGApiTransactionRequest.prototype['customer_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>CVV2 or CID value from the signature panel on the back of the cardholder's card. If present during a request that requires authorization, the value will be sent to the issuer for validation.
 * @member {String} cvv2
 */
PGApiTransactionRequest.prototype['cvv2'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 21 AN<br><strong>Description: </strong>When the merchant has been authorized to send dynamic DBA information, this field will contain the DBA name used by Qulapay in the authorization and clearing messages.<br>Note: the payment gateway will automatically add a prefix plus an asterisk (*) to the dba_name value. For example, if the prefix is ABC and the dba_name value is SHOE CO, the DBA name will show as \"ABC*SHOE CO\" on the cardholder's credit card statement.
 * @member {String} dba_name
 */
PGApiTransactionRequest.prototype['dba_name'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 9 AN<br><strong>Description: </strong>For use by merchants using negative option marketing.  This field must be used in the first transaction at the conclusion of the free or reduced trial. This suffix will be appended to the end of your DBA and the result will appear on the cardholder statement. (If your DBA and suffix contain more that 25 characters, your DBA will be truncated.) Possible values are: <ul><li>END DSCNT</li><li>END OFFER</li><li>END PROMO</li><li>END TRIAL</li></ul>
 * @member {String} dba_suffix
 */
PGApiTransactionRequest.prototype['dba_suffix'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 17 N<br><strong>Description: </strong>Owner's account number at the bank. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {String} dda_number
 */
PGApiTransactionRequest.prototype['dda_number'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 
 * @member {String} developer_id
 */
PGApiTransactionRequest.prototype['developer_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 5 N<br><strong>Description: </strong>Duplicate transaction window in seconds. Qualpay will reject any transactions after a successful transaction within the duplicate_seconds window with a duplicate Account Number and optionally Purchase ID or, and, Merchant Reference Number. This value overrides any value set for a merchant on Qualpay Manager.
 * @member {Number} duplicate_seconds
 */
PGApiTransactionRequest.prototype['duplicate_seconds'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.
 * @member {String} echo_fields
 */
PGApiTransactionRequest.prototype['echo_fields'] = undefined;

/**
 *  AN<br><strong>Description: </strong>An array of email addresses to which the transaction receipt should be sent to. 
 * @member {Array.<String>} email_address
 */
PGApiTransactionRequest.prototype['email_address'] = undefined;

/**
 * <br><strong>Default: </strong>false<br><strong>Description: </strong>When this field is provided and set to true, a customer_email must also be provided. When these two fields are provided, a transaction receipt will be sent via e-mail to the address(es) provided in the customer_email field.
 * @member {Boolean} email_receipt
 */
PGApiTransactionRequest.prototype['email_receipt'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 36 AN<br><strong>Description: </strong>Base64 encoded MasterCard UCAF Transaction ID returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
 * @member {String} emv_tran_id
 */
PGApiTransactionRequest.prototype['emv_tran_id'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 4 N, MMYY format<br><strong>Description: </strong>Expiration date of cardholder card number.  When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {String} exp_date
 */
PGApiTransactionRequest.prototype['exp_date'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 16 N<br><strong>Description: </strong>For Benefit Of (FBO) merchant account identifier on the Qualpay system. Contact Qualpay customer support to obtain your FBO information.
 * @member {Number} fbo_id
 */
PGApiTransactionRequest.prototype['fbo_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>JSON array of JSON objects. Each object represents a single line item detail element related to the transaction. Each detail element has required subfields: <br>quantity (7N)<br> description (26AN)<br> unit_of_measure (12AN)<br> product_code (12AN) - cannot be all zeroes<br> debit_credit_ind (1 AN)<br> unit_cost (12,2N)<br> Optional subfields: <br>type_of_supply (2AN) - visa only<br>commodity_code - visa only(12AN)<br><strong>Conditional Requirement: </strong> This field is required for Level 3 interchange qualification.
 * @member {String} line_items
 */
PGApiTransactionRequest.prototype['line_items'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.
 * @member {String} loc_id
 */
PGApiTransactionRequest.prototype['loc_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Base64 encoded MasterCard UCAF Field Data returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
 * @member {String} mc_ucaf_data
 */
PGApiTransactionRequest.prototype['mc_ucaf_data'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 1 AN<br><strong>Description: </strong>MasterCard UCAF Collection Indicator returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
 * @member {String} mc_ucaf_ind
 */
PGApiTransactionRequest.prototype['mc_ucaf_ind'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 128 AN<br><strong>Description: </strong>Merchant provided reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.
 * @member {String} merch_ref_num
 */
PGApiTransactionRequest.prototype['merch_ref_num'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.
 * @member {Number} merchant_id
 */
PGApiTransactionRequest.prototype['merchant_id'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 1 N<br><strong>Default: </strong>7<br><strong>Description: </strong>Indicates type of MOTO transaction: <ul><li>0 = Card Present (not MOTO/e-Commerce)</li><li> 1 = One Time MOTO transaction</li><li>2 = Recurring </li><li>3 = Installment </li><li>5 = Full 3D-Secure transaction</li><li>6 = Merchant 3D-Secure transaction</li><li>7 = e-Commerce Channel Encrypted (SSL)</li></ul>
 * @member {String} moto_ecomm_ind
 */
PGApiTransactionRequest.prototype['moto_ecomm_ind'] = undefined;

/**
 * <br><strong>Default: </strong>false<br><strong>Description: </strong>This field must be present and set to a value of 'true' in order for the request to allow for approval of a partial amount. This would be used to allow a merchant to accept a partial payment from pre-paid or debit cards. When only part of the requested amount is available, the response code will be 010 and the amt_tran field in the response will contain the amount that was approved. A second sale request  on a different card is needed  to capture the remaining amount. Applicable to auth and sale request types.
 * @member {Boolean} partial_auth
 */
PGApiTransactionRequest.prototype['partial_auth'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Apple Pay payload
 * @member {String} payload_apple_pay
 */
PGApiTransactionRequest.prototype['payload_apple_pay'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>Google Pay payload
 * @member {String} payload_google_pay
 */
PGApiTransactionRequest.prototype['payload_google_pay'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>PG ID of previously authorized transaction. This field is required when sending a capture, refund, or void request.
 * @member {String} pg_id
 */
PGApiTransactionRequest.prototype['pg_id'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.
 * @member {String} profile_id
 */
PGApiTransactionRequest.prototype['profile_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 25 AN<br><strong>Description: </strong>Purchase Identifier (also referred to as the invoice number generated by the merchant).<br><strong>Conditional Requirement: </strong> This field is required for Level 2 and Level 3 interchange qualification.
 * @member {String} purchase_id
 */
PGApiTransactionRequest.prototype['purchase_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.
 * @member {String} report_data
 */
PGApiTransactionRequest.prototype['report_data'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.<br><strong>Conditional Requirement: </strong>This field is required when the retry_id is present in the request message.
 * @member {Number} retry_attempt
 */
PGApiTransactionRequest.prototype['retry_attempt'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.
 * @member {Number} retry_id
 */
PGApiTransactionRequest.prototype['retry_id'] = undefined;

/**
 * INTERNAL USE ONLY.
 * @member {String} session_id
 */
PGApiTransactionRequest.prototype['session_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 10 N<br><strong>Description: </strong>Identifies the recurring subscription that applies to this transaction.
 * @member {Number} subscription_id
 */
PGApiTransactionRequest.prototype['subscription_id'] = undefined;

/**
 * <br><strong>Default: </strong>false<br><strong>Description: </strong>In an authorization, credit, force, sale, or verify request the merchant can set tokenize to \"true\" and the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the response. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {Boolean} tokenize
 */
PGApiTransactionRequest.prototype['tokenize'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 9 N<br><strong>Description: </strong>Bank transit/routing number. Applicable for ACH payments.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card or Bank Account Data Sources and Conditional Requirements</a>
 * @member {String} tr_number
 */
PGApiTransactionRequest.prototype['tr_number'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 3 N<br><strong>Default: </strong>840<br><strong>Description: </strong>ISO numeric currency code for the transaction. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes.
 * @member {Number} tran_currency
 */
PGApiTransactionRequest.prototype['tran_currency'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 1 AN<br><strong>Default: </strong>C<br><strong>Description: </strong>Bank Account Type. Applicable for ACH payments. Possible values are: <ul><li>C = Personal checking account</li><li>S = Personal savings account</li><li>K = Business checking account</li><li>V = Business savings account</li></ul>
 * @member {String} type_id
 */
PGApiTransactionRequest.prototype['type_id'] = undefined;

/**
 * INTERNAL USE ONLY.
 * @member {Number} user_id
 */
PGApiTransactionRequest.prototype['user_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this capture request applies.
 * @member {Number} vendor_id
 */
PGApiTransactionRequest.prototype['vendor_id'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base64 encoded transaction ID (XID) returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for Visa 3-D Secure transactions.
 * @member {String} xid_3ds
 */
PGApiTransactionRequest.prototype['xid_3ds'] = undefined;






export default PGApiTransactionRequest;

