/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PGApiCaptureRequest model module.
 * @module model/PGApiCaptureRequest
 * @version 1.7.0
 */
class PGApiCaptureRequest {
    /**
     * Constructs a new <code>PGApiCaptureRequest</code>.
     * @alias module:model/PGApiCaptureRequest
     * @param amtTran {Number} <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount to capture. The amount must be less than or equal to the authorized amount.
     * @param merchantId {Number} <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.
     */
    constructor(amtTran, merchantId) { 
        
        PGApiCaptureRequest.initialize(this, amtTran, merchantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amtTran, merchantId) { 
        obj['amt_tran'] = amtTran;
        obj['merchant_id'] = merchantId;
    }

    /**
     * Constructs a <code>PGApiCaptureRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PGApiCaptureRequest} obj Optional instance to populate.
     * @return {module:model/PGApiCaptureRequest} The populated <code>PGApiCaptureRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PGApiCaptureRequest();

            if (data.hasOwnProperty('amt_tran')) {
                obj['amt_tran'] = ApiClient.convertToType(data['amt_tran'], 'Number');
            }
            if (data.hasOwnProperty('developer_id')) {
                obj['developer_id'] = ApiClient.convertToType(data['developer_id'], 'String');
            }
            if (data.hasOwnProperty('echo_fields')) {
                obj['echo_fields'] = ApiClient.convertToType(data['echo_fields'], 'String');
            }
            if (data.hasOwnProperty('loc_id')) {
                obj['loc_id'] = ApiClient.convertToType(data['loc_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'Number');
            }
            if (data.hasOwnProperty('profile_id')) {
                obj['profile_id'] = ApiClient.convertToType(data['profile_id'], 'String');
            }
            if (data.hasOwnProperty('report_data')) {
                obj['report_data'] = ApiClient.convertToType(data['report_data'], 'String');
            }
            if (data.hasOwnProperty('retry_attempt')) {
                obj['retry_attempt'] = ApiClient.convertToType(data['retry_attempt'], 'Number');
            }
            if (data.hasOwnProperty('retry_id')) {
                obj['retry_id'] = ApiClient.convertToType(data['retry_id'], 'Number');
            }
            if (data.hasOwnProperty('session_id')) {
                obj['session_id'] = ApiClient.convertToType(data['session_id'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('vendor_id')) {
                obj['vendor_id'] = ApiClient.convertToType(data['vendor_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PGApiCaptureRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PGApiCaptureRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PGApiCaptureRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['developer_id'] && !(typeof data['developer_id'] === 'string' || data['developer_id'] instanceof String)) {
            throw new Error("Expected the field `developer_id` to be a primitive type in the JSON string but got " + data['developer_id']);
        }
        // ensure the json data is a string
        if (data['echo_fields'] && !(typeof data['echo_fields'] === 'string' || data['echo_fields'] instanceof String)) {
            throw new Error("Expected the field `echo_fields` to be a primitive type in the JSON string but got " + data['echo_fields']);
        }
        // ensure the json data is a string
        if (data['loc_id'] && !(typeof data['loc_id'] === 'string' || data['loc_id'] instanceof String)) {
            throw new Error("Expected the field `loc_id` to be a primitive type in the JSON string but got " + data['loc_id']);
        }
        // ensure the json data is a string
        if (data['profile_id'] && !(typeof data['profile_id'] === 'string' || data['profile_id'] instanceof String)) {
            throw new Error("Expected the field `profile_id` to be a primitive type in the JSON string but got " + data['profile_id']);
        }
        // ensure the json data is a string
        if (data['report_data'] && !(typeof data['report_data'] === 'string' || data['report_data'] instanceof String)) {
            throw new Error("Expected the field `report_data` to be a primitive type in the JSON string but got " + data['report_data']);
        }
        // ensure the json data is a string
        if (data['session_id'] && !(typeof data['session_id'] === 'string' || data['session_id'] instanceof String)) {
            throw new Error("Expected the field `session_id` to be a primitive type in the JSON string but got " + data['session_id']);
        }

        return true;
    }


}

PGApiCaptureRequest.RequiredProperties = ["amt_tran", "merchant_id"];

/**
 * <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount to capture. The amount must be less than or equal to the authorized amount.
 * @member {Number} amt_tran
 */
PGApiCaptureRequest.prototype['amt_tran'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Use to indicate which company developed the integration to Qualpay or the name of the payment solution that is connected to Qualpay.  Suggested usage is softwareABCv1.0 or companyXYZv2.0. 
 * @member {String} developer_id
 */
PGApiCaptureRequest.prototype['developer_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.
 * @member {String} echo_fields
 */
PGApiCaptureRequest.prototype['echo_fields'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.
 * @member {String} loc_id
 */
PGApiCaptureRequest.prototype['loc_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.
 * @member {Number} merchant_id
 */
PGApiCaptureRequest.prototype['merchant_id'] = undefined;

/**
 * <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.
 * @member {String} profile_id
 */
PGApiCaptureRequest.prototype['profile_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.
 * @member {String} report_data
 */
PGApiCaptureRequest.prototype['report_data'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>This field contains a number greater than zero (0). When the value is one (1), the payment gateway treats the message as a new message. If the value is greater than one (1), then the payment gateway will return the result of the original message. If the original message did not complete, the payment gateway treats the message as a new message.<br><strong>Conditional Requirement: </strong>This field is required when the retry_id is present in the request message.
 * @member {Number} retry_attempt
 */
PGApiCaptureRequest.prototype['retry_attempt'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.
 * @member {Number} retry_id
 */
PGApiCaptureRequest.prototype['retry_id'] = undefined;

/**
 * INTERNAL USE ONLY.
 * @member {String} session_id
 */
PGApiCaptureRequest.prototype['session_id'] = undefined;

/**
 * INTERNAL USE ONLY.
 * @member {Number} user_id
 */
PGApiCaptureRequest.prototype['user_id'] = undefined;

/**
 * <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this capture request applies.
 * @member {Number} vendor_id
 */
PGApiCaptureRequest.prototype['vendor_id'] = undefined;






export default PGApiCaptureRequest;

