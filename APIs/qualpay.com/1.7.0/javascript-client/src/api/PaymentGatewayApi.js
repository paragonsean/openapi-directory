/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArdefRequest from '../model/ArdefRequest';
import ArdefResponse from '../model/ArdefResponse';
import PGApiBadResponse from '../model/PGApiBadResponse';
import PGApiBatchCloseRequest from '../model/PGApiBatchCloseRequest';
import PGApiBatchCloseResponse from '../model/PGApiBatchCloseResponse';
import PGApiCaptureRequest from '../model/PGApiCaptureRequest';
import PGApiCaptureResponse from '../model/PGApiCaptureResponse';
import PGApiDeclineResponse from '../model/PGApiDeclineResponse';
import PGApiEmailReceiptRequest from '../model/PGApiEmailReceiptRequest';
import PGApiEmailReceiptResponse from '../model/PGApiEmailReceiptResponse';
import PGApiExpireTokenRequest from '../model/PGApiExpireTokenRequest';
import PGApiExpireTokenResponse from '../model/PGApiExpireTokenResponse';
import PGApiInternalErrorResponse from '../model/PGApiInternalErrorResponse';
import PGApiRechargeRequest from '../model/PGApiRechargeRequest';
import PGApiRechargeResponse from '../model/PGApiRechargeResponse';
import PGApiRefundRequest from '../model/PGApiRefundRequest';
import PGApiRefundResponse from '../model/PGApiRefundResponse';
import PGApiResponse from '../model/PGApiResponse';
import PGApiTimeoutResponse from '../model/PGApiTimeoutResponse';
import PGApiTokenizeRequest from '../model/PGApiTokenizeRequest';
import PGApiTokenizeResponse from '../model/PGApiTokenizeResponse';
import PGApiTransactionRequest from '../model/PGApiTransactionRequest';
import PGApiTransactionResponse from '../model/PGApiTransactionResponse';
import PGApiUnauthResponse from '../model/PGApiUnauthResponse';
import PGApiVerifyRequest from '../model/PGApiVerifyRequest';
import PGApiVerifyResponse from '../model/PGApiVerifyResponse';
import PGApiVoidRequest from '../model/PGApiVoidRequest';
import PGApiVoidResponse from '../model/PGApiVoidResponse';

/**
* PaymentGateway service.
* @module api/PaymentGatewayApi
* @version 1.7.0
*/
export default class PaymentGatewayApi {

    /**
    * Constructs a new PaymentGatewayApi. 
    * @alias module:api/PaymentGatewayApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorization operation.
     * @callback module:api/PaymentGatewayApi~authorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize Transaction
     * Authorizes a credit card for capture at a later time. An authorized transaction will continue to be open until it expires or a capture message is received. Authorizations are automatically voided if they are not captured within 28 days, although most issuing banks will release the hold after 24 hours in retail environments or 7 days in card not present environments.
     * @param {module:model/PGApiTransactionRequest} body Payment Gateway Authorization Request
     * @param {module:api/PaymentGatewayApi~authorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiTransactionResponse}
     */
    authorization(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authorization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiTransactionResponse;
      return this.apiClient.callApi(
        '/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchClose operation.
     * @callback module:api/PaymentGatewayApi~batchCloseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiBatchCloseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close Batch
     * Closes a batch. Use this request when the timing of the batch close needs to be controlled rather than relying on the once-daily automatic batch close which is 9 PM Pacific by default, and can be changed in the Qualpay Manager administration settings.
     * @param {module:model/PGApiBatchCloseRequest} body Payment Gateway Batch Close Request
     * @param {module:api/PaymentGatewayApi~batchCloseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiBatchCloseResponse}
     */
    batchClose(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchClose");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiBatchCloseResponse;
      return this.apiClient.callApi(
        '/batchClose', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callVoid operation.
     * @callback module:api/PaymentGatewayApi~callVoidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiVoidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Void a Previously Authorized Transaction
     * Authorizations can be voided at any time until Qualpay automatically voids them at 28 days. Captured transactions can be voided until the batch is closed. If your batch closes and you did not void the transaction in time, you may make a refund request.
     * @param {String} pgIdOrig pgIdOrig
     * @param {module:model/PGApiVoidRequest} body Payment Gateway Void Request
     * @param {module:api/PaymentGatewayApi~callVoidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiVoidResponse}
     */
    callVoid(pgIdOrig, body, callback) {
      let postBody = body;
      // verify the required parameter 'pgIdOrig' is set
      if (pgIdOrig === undefined || pgIdOrig === null) {
        throw new Error("Missing the required parameter 'pgIdOrig' when calling callVoid");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling callVoid");
      }

      let pathParams = {
        'pgIdOrig': pgIdOrig
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiVoidResponse;
      return this.apiClient.callApi(
        '/void/{pgIdOrig}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the capture operation.
     * @callback module:api/PaymentGatewayApi~captureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiCaptureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capture an Authorized Transaction
     * Captures an authorized transaction for any amount up to the amount originally authorized. An authorized transaction can only be captured once.
     * @param {String} pgIdOrig pgIdOrig
     * @param {module:model/PGApiCaptureRequest} body Payment Gateway Capture Request
     * @param {module:api/PaymentGatewayApi~captureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiCaptureResponse}
     */
    capture(pgIdOrig, body, callback) {
      let postBody = body;
      // verify the required parameter 'pgIdOrig' is set
      if (pgIdOrig === undefined || pgIdOrig === null) {
        throw new Error("Missing the required parameter 'pgIdOrig' when calling capture");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling capture");
      }

      let pathParams = {
        'pgIdOrig': pgIdOrig
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiCaptureResponse;
      return this.apiClient.callApi(
        '/capture/{pgIdOrig}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the credit operation.
     * @callback module:api/PaymentGatewayApi~creditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issue Credit to Cardholder
     * Issues an unlinked credit. Credit requests require that the cardholder data is  provided in the request. Credits are only available during the first 30 days of account opening unless you contact Qualpay support to make other arrangements. The refund request should generally be used to return money to the cardholder, as it is a reversal of a previously captured transaction. A refund request is linked to the original transaction which is helpful for reconciliation purposes.
     * @param {module:model/PGApiTransactionRequest} body Payment Gateway Credit Request
     * @param {module:api/PaymentGatewayApi~creditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiTransactionResponse}
     */
    credit(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling credit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiTransactionResponse;
      return this.apiClient.callApi(
        '/credit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expire operation.
     * @callback module:api/PaymentGatewayApi~expireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiExpireTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Expire Token
     * Once expired, the token (card_id) is no longer valid for use in future transactions.
     * @param {module:model/PGApiExpireTokenRequest} body Payment Gateway Expire Token Request
     * @param {module:api/PaymentGatewayApi~expireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiExpireTokenResponse}
     */
    expire(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling expire");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiExpireTokenResponse;
      return this.apiClient.callApi(
        '/expireToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the force operation.
     * @callback module:api/PaymentGatewayApi~forceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force Transaction Approval
     * Forces an approval, used when an online authorization request received a 'declined' reason code and you have received an authorization from a voice or automated response (ARU) system. The required fields are the same as a sale or authorization request, except that the expiration date (exp_date) is not required, and the 6-character authorization code (auth_code) is required.
     * @param {module:model/PGApiTransactionRequest} body Payment Gateway Force Request
     * @param {module:api/PaymentGatewayApi~forceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiTransactionResponse}
     */
    force(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling force");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiTransactionResponse;
      return this.apiClient.callApi(
        '/force', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardTypeInformation operation.
     * @callback module:api/PaymentGatewayApi~getCardTypeInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArdefResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Card type Information for Visa, Mastercard, and Discover
     * Gets Card type information for Visa, Mastercard, and Discover. Useful if you prohibit or allow certain activity based on card type. For example, you may not want to allow a subscription to be created using a prepaid card.
     * @param {module:model/ArdefRequest} body Card Type Request
     * @param {module:api/PaymentGatewayApi~getCardTypeInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArdefResponse}
     */
    getCardTypeInformation(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCardTypeInformation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ArdefResponse;
      return this.apiClient.callApi(
        '/ardef', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recharge operation.
     * @callback module:api/PaymentGatewayApi~rechargeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiRechargeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recharge Previously Settled Transaction
     * Creates a new sale transaction using the cardholder data from a previous successful transaction.
     * @param {String} pgIdOrig pgIdOrig
     * @param {module:model/PGApiRechargeRequest} body Payment Gateway Recharge Request
     * @param {module:api/PaymentGatewayApi~rechargeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiRechargeResponse}
     */
    recharge(pgIdOrig, body, callback) {
      let postBody = body;
      // verify the required parameter 'pgIdOrig' is set
      if (pgIdOrig === undefined || pgIdOrig === null) {
        throw new Error("Missing the required parameter 'pgIdOrig' when calling recharge");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling recharge");
      }

      let pathParams = {
        'pgIdOrig': pgIdOrig
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiRechargeResponse;
      return this.apiClient.callApi(
        '/recharge/{pgIdOrig}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refund operation.
     * @callback module:api/PaymentGatewayApi~refundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiRefundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund Previously Captured Transaction
     * Returns money to the cardholder from a previously captured transaction. Multiple refunds are allowed per captured transaction, provided that the sum of all refunds does not exceed the original captured transaction amount. Authorizations that have not been captured are not eligible for a refund.
     * @param {String} pgIdOrig pgIdOrig
     * @param {module:model/PGApiRefundRequest} body Payment Gateway Refund Request
     * @param {module:api/PaymentGatewayApi~refundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiRefundResponse}
     */
    refund(pgIdOrig, body, callback) {
      let postBody = body;
      // verify the required parameter 'pgIdOrig' is set
      if (pgIdOrig === undefined || pgIdOrig === null) {
        throw new Error("Missing the required parameter 'pgIdOrig' when calling refund");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling refund");
      }

      let pathParams = {
        'pgIdOrig': pgIdOrig
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiRefundResponse;
      return this.apiClient.callApi(
        '/refund/{pgIdOrig}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sale operation.
     * @callback module:api/PaymentGatewayApi~saleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sale (Auth + Capture)
     * Requests authorization, and, if approved, will immediately capture the transaction to be included in the next batch close. This transaction type is used in card-present environments, and also card-not-present environments where no physical goods are being shipped.
     * @param {module:model/PGApiTransactionRequest} body Payment Gateway Sale Request
     * @param {module:api/PaymentGatewayApi~saleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiTransactionResponse}
     */
    sale(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sale");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiTransactionResponse;
      return this.apiClient.callApi(
        '/sale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendReceipt operation.
     * @callback module:api/PaymentGatewayApi~sendReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiEmailReceiptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Transaction Receipt Email
     * Sends the transaction receipt to multiple email addresses. Receipts can be sent only for successful transactions.
     * @param {String} pgId pgId
     * @param {module:model/PGApiEmailReceiptRequest} body Payment Gateway Email Receipt Request
     * @param {module:api/PaymentGatewayApi~sendReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiEmailReceiptResponse}
     */
    sendReceipt(pgId, body, callback) {
      let postBody = body;
      // verify the required parameter 'pgId' is set
      if (pgId === undefined || pgId === null) {
        throw new Error("Missing the required parameter 'pgId' when calling sendReceipt");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendReceipt");
      }

      let pathParams = {
        'pgId': pgId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiEmailReceiptResponse;
      return this.apiClient.callApi(
        '/emailReceipt/{pgId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenize operation.
     * @callback module:api/PaymentGatewayApi~tokenizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiTokenizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokenize Card
     * Once stored, a unique card_id is returned for use in future transactions. Optionally, tokenization can be requested in an authorization, verify, force, credit, or sale request by sending the tokenize field set to true.
     * @param {module:model/PGApiTokenizeRequest} body Payment Gateway Tokenize Request
     * @param {module:api/PaymentGatewayApi~tokenizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiTokenizeResponse}
     */
    tokenize(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tokenize");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiTokenizeResponse;
      return this.apiClient.callApi(
        '/tokenize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verify operation.
     * @callback module:api/PaymentGatewayApi~verifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PGApiVerifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Card
     * A verify request will return success if the cardholder information was verified by the issuer. If AVS or CVV data is included in the message, then the AVS or CVV result code will be returned in the response message. This is useful if you want to determine if you have been presented with a valid card, but are not ready to authorize the card.
     * @param {module:model/PGApiVerifyRequest} body Payment Gateway Card Verify Request
     * @param {module:api/PaymentGatewayApi~verifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PGApiVerifyResponse}
     */
    verify(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verify");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PGApiVerifyResponse;
      return this.apiClient.callApi(
        '/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
