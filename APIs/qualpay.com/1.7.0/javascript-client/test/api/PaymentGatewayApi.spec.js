/**
 * Qualpay Payment Gateway API
 * This document describes the Qualpay Payment Gateway API.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QualpayPaymentGatewayApi);
  }
}(this, function(expect, QualpayPaymentGatewayApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QualpayPaymentGatewayApi.PaymentGatewayApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PaymentGatewayApi', function() {
    describe('authorization', function() {
      it('should call authorization successfully', function(done) {
        //uncomment below and update the code to test authorization
        //instance.authorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchClose', function() {
      it('should call batchClose successfully', function(done) {
        //uncomment below and update the code to test batchClose
        //instance.batchClose(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('callVoid', function() {
      it('should call callVoid successfully', function(done) {
        //uncomment below and update the code to test callVoid
        //instance.callVoid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('capture', function() {
      it('should call capture successfully', function(done) {
        //uncomment below and update the code to test capture
        //instance.capture(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('credit', function() {
      it('should call credit successfully', function(done) {
        //uncomment below and update the code to test credit
        //instance.credit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('expire', function() {
      it('should call expire successfully', function(done) {
        //uncomment below and update the code to test expire
        //instance.expire(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('force', function() {
      it('should call force successfully', function(done) {
        //uncomment below and update the code to test force
        //instance.force(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCardTypeInformation', function() {
      it('should call getCardTypeInformation successfully', function(done) {
        //uncomment below and update the code to test getCardTypeInformation
        //instance.getCardTypeInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('recharge', function() {
      it('should call recharge successfully', function(done) {
        //uncomment below and update the code to test recharge
        //instance.recharge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refund', function() {
      it('should call refund successfully', function(done) {
        //uncomment below and update the code to test refund
        //instance.refund(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sale', function() {
      it('should call sale successfully', function(done) {
        //uncomment below and update the code to test sale
        //instance.sale(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendReceipt', function() {
      it('should call sendReceipt successfully', function(done) {
        //uncomment below and update the code to test sendReceipt
        //instance.sendReceipt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tokenize', function() {
      it('should call tokenize successfully', function(done) {
        //uncomment below and update the code to test tokenize
        //instance.tokenize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('verify', function() {
      it('should call verify successfully', function(done) {
        //uncomment below and update the code to test verify
        //instance.verify(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
