/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerApiRestForPatrowlEngines);
  }
}(this, function(expect, SwaggerApiRestForPatrowlEngines) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerApiRestForPatrowlEngines.PatrowlEngineApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PatrowlEngineApi', function() {
    describe('cleanScanPage', function() {
      it('should call cleanScanPage successfully', function(done) {
        //uncomment below and update the code to test cleanScanPage
        //instance.cleanScanPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cleanScansPage', function() {
      it('should call cleanScansPage successfully', function(done) {
        //uncomment below and update the code to test cleanScansPage
        //instance.cleanScansPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDefaultPage', function() {
      it('should call getDefaultPage successfully', function(done) {
        //uncomment below and update the code to test getDefaultPage
        //instance.getDefaultPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFindingPage', function() {
      it('should call getFindingPage successfully', function(done) {
        //uncomment below and update the code to test getFindingPage
        //instance.getFindingPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInfoPage', function() {
      it('should call getInfoPage successfully', function(done) {
        //uncomment below and update the code to test getInfoPage
        //instance.getInfoPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLivenessPage', function() {
      it('should call getLivenessPage successfully', function(done) {
        //uncomment below and update the code to test getLivenessPage
        //instance.getLivenessPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReadinessPage', function() {
      it('should call getReadinessPage successfully', function(done) {
        //uncomment below and update the code to test getReadinessPage
        //instance.getReadinessPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTestPage', function() {
      it('should call getTestPage successfully', function(done) {
        //uncomment below and update the code to test getTestPage
        //instance.getTestPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reloadConfigurationPage', function() {
      it('should call reloadConfigurationPage successfully', function(done) {
        //uncomment below and update the code to test reloadConfigurationPage
        //instance.reloadConfigurationPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startScanPage', function() {
      it('should call startScanPage successfully', function(done) {
        //uncomment below and update the code to test startScanPage
        //instance.startScanPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('statusScanPage', function() {
      it('should call statusScanPage successfully', function(done) {
        //uncomment below and update the code to test statusScanPage
        //instance.statusScanPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('statusScansPage', function() {
      it('should call statusScansPage successfully', function(done) {
        //uncomment below and update the code to test statusScansPage
        //instance.statusScansPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopScanPage', function() {
      it('should call stopScanPage successfully', function(done) {
        //uncomment below and update the code to test stopScanPage
        //instance.stopScanPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopScansPage', function() {
      it('should call stopScansPage successfully', function(done) {
        //uncomment below and update the code to test stopScansPage
        //instance.stopScansPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
