/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';
import FindingsInner from '../model/FindingsInner';
import ScanDefinition from '../model/ScanDefinition';

/**
* PatrowlEngine service.
* @module api/PatrowlEngineApi
* @version 1.0.0
*/
export default class PatrowlEngineApi {

    /**
    * Constructs a new PatrowlEngineApi. 
    * @alias module:api/PatrowlEngineApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cleanScanPage operation.
     * @callback module:api/PatrowlEngineApi~cleanScanPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clean scan
     * Clean scan identified by id.
     * @param {Number} scanId Numeric ID of the scan to clean
     * @param {module:api/PatrowlEngineApi~cleanScanPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    cleanScanPage(scanId, callback) {
      let postBody = null;
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling cleanScanPage");
      }

      let pathParams = {
        'scanId': scanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/clean/{scanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cleanScansPage operation.
     * @callback module:api/PatrowlEngineApi~cleanScansPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clean all scans
     * Clean all current scans.
     * @param {module:api/PatrowlEngineApi~cleanScansPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    cleanScansPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/clean', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultPage operation.
     * @callback module:api/PatrowlEngineApi~getDefaultPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Index page
     * Return index page
     * @param {module:api/PatrowlEngineApi~getDefaultPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    getDefaultPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFindingPage operation.
     * @callback module:api/PatrowlEngineApi~getFindingPageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FindingsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get findings on finished scans
     * Get findings on finished scans.
     * @param {Number} scanId Numeric ID of the scan to get findings
     * @param {module:api/PatrowlEngineApi~getFindingPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FindingsInner>}
     */
    getFindingPage(scanId, callback) {
      let postBody = null;
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling getFindingPage");
      }

      let pathParams = {
        'scanId': scanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FindingsInner];
      return this.apiClient.callApi(
        '/getfindings/{scanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInfoPage operation.
     * @callback module:api/PatrowlEngineApi~getInfoPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Engine info page
     * Return information on engine.
     * @param {module:api/PatrowlEngineApi~getInfoPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    getInfoPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLivenessPage operation.
     * @callback module:api/PatrowlEngineApi~getLivenessPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Liveness page
     * Return liveness page
     * @param {module:api/PatrowlEngineApi~getLivenessPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLivenessPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/liveness', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadinessPage operation.
     * @callback module:api/PatrowlEngineApi~getReadinessPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Readiness page
     * Return liveness page
     * @param {module:api/PatrowlEngineApi~getReadinessPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getReadinessPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/readiness', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestPage operation.
     * @callback module:api/PatrowlEngineApi~getTestPageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test page
     * Return test page
     * @param {module:api/PatrowlEngineApi~getTestPageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTestPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reloadConfigurationPage operation.
     * @callback module:api/PatrowlEngineApi~reloadConfigurationPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configuration reloading page
     * Reload the configuration file.
     * @param {module:api/PatrowlEngineApi~reloadConfigurationPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    reloadConfigurationPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/reloadconfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startScanPage operation.
     * @callback module:api/PatrowlEngineApi~startScanPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a new scan
     * Start a new scan.
     * @param {module:model/ScanDefinition} scanDefinition 
     * @param {module:api/PatrowlEngineApi~startScanPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    startScanPage(scanDefinition, callback) {
      let postBody = scanDefinition;
      // verify the required parameter 'scanDefinition' is set
      if (scanDefinition === undefined || scanDefinition === null) {
        throw new Error("Missing the required parameter 'scanDefinition' when calling startScanPage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/startscan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusScanPage operation.
     * @callback module:api/PatrowlEngineApi~statusScanPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status of a scan
     * Status of a scan identified by id.
     * @param {Number} scanId Numeric ID of the scan to get status
     * @param {module:api/PatrowlEngineApi~statusScanPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    statusScanPage(scanId, callback) {
      let postBody = null;
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling statusScanPage");
      }

      let pathParams = {
        'scanId': scanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/status/{scanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusScansPage operation.
     * @callback module:api/PatrowlEngineApi~statusScansPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status on all scans
     * Status all current scans.
     * @param {module:api/PatrowlEngineApi~statusScansPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    statusScansPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopScanPage operation.
     * @callback module:api/PatrowlEngineApi~stopScanPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a scan
     * Stop a scan identified by id.
     * @param {Number} scanId Numeric ID of the scan to stop
     * @param {module:api/PatrowlEngineApi~stopScanPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    stopScanPage(scanId, callback) {
      let postBody = null;
      // verify the required parameter 'scanId' is set
      if (scanId === undefined || scanId === null) {
        throw new Error("Missing the required parameter 'scanId' when calling stopScanPage");
      }

      let pathParams = {
        'scanId': scanId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/stop/{scanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopScansPage operation.
     * @callback module:api/PatrowlEngineApi~stopScansPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop all scans
     * Stop all current scans.
     * @param {module:api/PatrowlEngineApi~stopScansPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    stopScansPage(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/stopscans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
