/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FindingsInnerMetaRisk from './FindingsInnerMetaRisk';
import FindingsInnerMetaVulnRefs from './FindingsInnerMetaVulnRefs';

/**
 * The FindingsInner model module.
 * @module model/FindingsInner
 * @version 1.0.0
 */
class FindingsInner {
    /**
     * Constructs a new <code>FindingsInner</code>.
     * @alias module:model/FindingsInner
     */
    constructor() { 
        
        FindingsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FindingsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindingsInner} obj Optional instance to populate.
     * @return {module:model/FindingsInner} The populated <code>FindingsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindingsInner();

            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('issue_id')) {
                obj['issue_id'] = ApiClient.convertToType(data['issue_id'], 'Number');
            }
            if (data.hasOwnProperty('meta_links')) {
                obj['meta_links'] = ApiClient.convertToType(data['meta_links'], ['String']);
            }
            if (data.hasOwnProperty('meta_risk')) {
                obj['meta_risk'] = FindingsInnerMetaRisk.constructFromObject(data['meta_risk']);
            }
            if (data.hasOwnProperty('meta_tags')) {
                obj['meta_tags'] = ApiClient.convertToType(data['meta_tags'], ['String']);
            }
            if (data.hasOwnProperty('meta_vuln_refs')) {
                obj['meta_vuln_refs'] = FindingsInnerMetaVulnRefs.constructFromObject(data['meta_vuln_refs']);
            }
            if (data.hasOwnProperty('raw')) {
                obj['raw'] = ApiClient.convertToType(data['raw'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('solution')) {
                obj['solution'] = ApiClient.convertToType(data['solution'], 'String');
            }
            if (data.hasOwnProperty('target_addrs')) {
                obj['target_addrs'] = ApiClient.convertToType(data['target_addrs'], ['String']);
            }
            if (data.hasOwnProperty('target_proto')) {
                obj['target_proto'] = ApiClient.convertToType(data['target_proto'], ['String']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindingsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindingsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['confidence'] && !(typeof data['confidence'] === 'string' || data['confidence'] instanceof String)) {
            throw new Error("Expected the field `confidence` to be a primitive type in the JSON string but got " + data['confidence']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['meta_links'])) {
            throw new Error("Expected the field `meta_links` to be an array in the JSON data but got " + data['meta_links']);
        }
        // validate the optional field `meta_risk`
        if (data['meta_risk']) { // data not null
          FindingsInnerMetaRisk.validateJSON(data['meta_risk']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['meta_tags'])) {
            throw new Error("Expected the field `meta_tags` to be an array in the JSON data but got " + data['meta_tags']);
        }
        // validate the optional field `meta_vuln_refs`
        if (data['meta_vuln_refs']) { // data not null
          FindingsInnerMetaVulnRefs.validateJSON(data['meta_vuln_refs']);
        }
        // ensure the json data is a string
        if (data['raw'] && !(typeof data['raw'] === 'string' || data['raw'] instanceof String)) {
            throw new Error("Expected the field `raw` to be a primitive type in the JSON string but got " + data['raw']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['solution'] && !(typeof data['solution'] === 'string' || data['solution'] instanceof String)) {
            throw new Error("Expected the field `solution` to be a primitive type in the JSON string but got " + data['solution']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['target_addrs'])) {
            throw new Error("Expected the field `target_addrs` to be an array in the JSON data but got " + data['target_addrs']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['target_proto'])) {
            throw new Error("Expected the field `target_proto` to be an array in the JSON data but got " + data['target_proto']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} confidence
 */
FindingsInner.prototype['confidence'] = undefined;

/**
 * @member {String} description
 */
FindingsInner.prototype['description'] = undefined;

/**
 * @member {Number} issue_id
 */
FindingsInner.prototype['issue_id'] = undefined;

/**
 * @member {Array.<String>} meta_links
 */
FindingsInner.prototype['meta_links'] = undefined;

/**
 * @member {module:model/FindingsInnerMetaRisk} meta_risk
 */
FindingsInner.prototype['meta_risk'] = undefined;

/**
 * @member {Array.<String>} meta_tags
 */
FindingsInner.prototype['meta_tags'] = undefined;

/**
 * @member {module:model/FindingsInnerMetaVulnRefs} meta_vuln_refs
 */
FindingsInner.prototype['meta_vuln_refs'] = undefined;

/**
 * @member {String} raw
 */
FindingsInner.prototype['raw'] = undefined;

/**
 * @member {module:model/FindingsInner.SeverityEnum} severity
 */
FindingsInner.prototype['severity'] = undefined;

/**
 * @member {String} solution
 */
FindingsInner.prototype['solution'] = undefined;

/**
 * @member {Array.<String>} target_addrs
 */
FindingsInner.prototype['target_addrs'] = undefined;

/**
 * @member {Array.<String>} target_proto
 */
FindingsInner.prototype['target_proto'] = undefined;

/**
 * @member {Date} timestamp
 */
FindingsInner.prototype['timestamp'] = undefined;

/**
 * @member {String} title
 */
FindingsInner.prototype['title'] = undefined;

/**
 * @member {String} type
 */
FindingsInner.prototype['type'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
FindingsInner['SeverityEnum'] = {

    /**
     * value: "info"
     * @const
     */
    "info": "info",

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};



export default FindingsInner;

