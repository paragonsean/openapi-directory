# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.findings_inner_meta_risk import FindingsInnerMetaRisk
from openapi_server.models.findings_inner_meta_vuln_refs import FindingsInnerMetaVulnRefs
from openapi_server import util


class FindingsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: str=None, description: str=None, issue_id: int=None, meta_links: List[str]=None, meta_risk: FindingsInnerMetaRisk=None, meta_tags: List[str]=None, meta_vuln_refs: FindingsInnerMetaVulnRefs=None, raw: str=None, severity: str=None, solution: str=None, target_addrs: List[str]=None, target_proto: List[str]=None, timestamp: datetime=None, title: str=None, type: str=None):
        """FindingsInner - a model defined in OpenAPI

        :param confidence: The confidence of this FindingsInner.
        :param description: The description of this FindingsInner.
        :param issue_id: The issue_id of this FindingsInner.
        :param meta_links: The meta_links of this FindingsInner.
        :param meta_risk: The meta_risk of this FindingsInner.
        :param meta_tags: The meta_tags of this FindingsInner.
        :param meta_vuln_refs: The meta_vuln_refs of this FindingsInner.
        :param raw: The raw of this FindingsInner.
        :param severity: The severity of this FindingsInner.
        :param solution: The solution of this FindingsInner.
        :param target_addrs: The target_addrs of this FindingsInner.
        :param target_proto: The target_proto of this FindingsInner.
        :param timestamp: The timestamp of this FindingsInner.
        :param title: The title of this FindingsInner.
        :param type: The type of this FindingsInner.
        """
        self.openapi_types = {
            'confidence': str,
            'description': str,
            'issue_id': int,
            'meta_links': List[str],
            'meta_risk': FindingsInnerMetaRisk,
            'meta_tags': List[str],
            'meta_vuln_refs': FindingsInnerMetaVulnRefs,
            'raw': str,
            'severity': str,
            'solution': str,
            'target_addrs': List[str],
            'target_proto': List[str],
            'timestamp': datetime,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'description': 'description',
            'issue_id': 'issue_id',
            'meta_links': 'meta_links',
            'meta_risk': 'meta_risk',
            'meta_tags': 'meta_tags',
            'meta_vuln_refs': 'meta_vuln_refs',
            'raw': 'raw',
            'severity': 'severity',
            'solution': 'solution',
            'target_addrs': 'target_addrs',
            'target_proto': 'target_proto',
            'timestamp': 'timestamp',
            'title': 'title',
            'type': 'type'
        }

        self._confidence = confidence
        self._description = description
        self._issue_id = issue_id
        self._meta_links = meta_links
        self._meta_risk = meta_risk
        self._meta_tags = meta_tags
        self._meta_vuln_refs = meta_vuln_refs
        self._raw = raw
        self._severity = severity
        self._solution = solution
        self._target_addrs = target_addrs
        self._target_proto = target_proto
        self._timestamp = timestamp
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindingsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Findings_inner of this FindingsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this FindingsInner.


        :return: The confidence of this FindingsInner.
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this FindingsInner.


        :param confidence: The confidence of this FindingsInner.
        :type confidence: str
        """

        self._confidence = confidence

    @property
    def description(self):
        """Gets the description of this FindingsInner.


        :return: The description of this FindingsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FindingsInner.


        :param description: The description of this FindingsInner.
        :type description: str
        """

        self._description = description

    @property
    def issue_id(self):
        """Gets the issue_id of this FindingsInner.


        :return: The issue_id of this FindingsInner.
        :rtype: int
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this FindingsInner.


        :param issue_id: The issue_id of this FindingsInner.
        :type issue_id: int
        """

        self._issue_id = issue_id

    @property
    def meta_links(self):
        """Gets the meta_links of this FindingsInner.


        :return: The meta_links of this FindingsInner.
        :rtype: List[str]
        """
        return self._meta_links

    @meta_links.setter
    def meta_links(self, meta_links):
        """Sets the meta_links of this FindingsInner.


        :param meta_links: The meta_links of this FindingsInner.
        :type meta_links: List[str]
        """

        self._meta_links = meta_links

    @property
    def meta_risk(self):
        """Gets the meta_risk of this FindingsInner.


        :return: The meta_risk of this FindingsInner.
        :rtype: FindingsInnerMetaRisk
        """
        return self._meta_risk

    @meta_risk.setter
    def meta_risk(self, meta_risk):
        """Sets the meta_risk of this FindingsInner.


        :param meta_risk: The meta_risk of this FindingsInner.
        :type meta_risk: FindingsInnerMetaRisk
        """

        self._meta_risk = meta_risk

    @property
    def meta_tags(self):
        """Gets the meta_tags of this FindingsInner.


        :return: The meta_tags of this FindingsInner.
        :rtype: List[str]
        """
        return self._meta_tags

    @meta_tags.setter
    def meta_tags(self, meta_tags):
        """Sets the meta_tags of this FindingsInner.


        :param meta_tags: The meta_tags of this FindingsInner.
        :type meta_tags: List[str]
        """

        self._meta_tags = meta_tags

    @property
    def meta_vuln_refs(self):
        """Gets the meta_vuln_refs of this FindingsInner.


        :return: The meta_vuln_refs of this FindingsInner.
        :rtype: FindingsInnerMetaVulnRefs
        """
        return self._meta_vuln_refs

    @meta_vuln_refs.setter
    def meta_vuln_refs(self, meta_vuln_refs):
        """Sets the meta_vuln_refs of this FindingsInner.


        :param meta_vuln_refs: The meta_vuln_refs of this FindingsInner.
        :type meta_vuln_refs: FindingsInnerMetaVulnRefs
        """

        self._meta_vuln_refs = meta_vuln_refs

    @property
    def raw(self):
        """Gets the raw of this FindingsInner.


        :return: The raw of this FindingsInner.
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this FindingsInner.


        :param raw: The raw of this FindingsInner.
        :type raw: str
        """

        self._raw = raw

    @property
    def severity(self):
        """Gets the severity of this FindingsInner.


        :return: The severity of this FindingsInner.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this FindingsInner.


        :param severity: The severity of this FindingsInner.
        :type severity: str
        """
        allowed_values = ["info", "low", "medium", "high"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def solution(self):
        """Gets the solution of this FindingsInner.


        :return: The solution of this FindingsInner.
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this FindingsInner.


        :param solution: The solution of this FindingsInner.
        :type solution: str
        """

        self._solution = solution

    @property
    def target_addrs(self):
        """Gets the target_addrs of this FindingsInner.


        :return: The target_addrs of this FindingsInner.
        :rtype: List[str]
        """
        return self._target_addrs

    @target_addrs.setter
    def target_addrs(self, target_addrs):
        """Sets the target_addrs of this FindingsInner.


        :param target_addrs: The target_addrs of this FindingsInner.
        :type target_addrs: List[str]
        """

        self._target_addrs = target_addrs

    @property
    def target_proto(self):
        """Gets the target_proto of this FindingsInner.


        :return: The target_proto of this FindingsInner.
        :rtype: List[str]
        """
        return self._target_proto

    @target_proto.setter
    def target_proto(self, target_proto):
        """Sets the target_proto of this FindingsInner.


        :param target_proto: The target_proto of this FindingsInner.
        :type target_proto: List[str]
        """

        self._target_proto = target_proto

    @property
    def timestamp(self):
        """Gets the timestamp of this FindingsInner.


        :return: The timestamp of this FindingsInner.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FindingsInner.


        :param timestamp: The timestamp of this FindingsInner.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def title(self):
        """Gets the title of this FindingsInner.


        :return: The title of this FindingsInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FindingsInner.


        :param title: The title of this FindingsInner.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this FindingsInner.


        :return: The type of this FindingsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FindingsInner.


        :param type: The type of this FindingsInner.
        :type type: str
        """

        self._type = type
