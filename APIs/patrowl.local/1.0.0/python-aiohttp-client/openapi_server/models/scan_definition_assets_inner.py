# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScanDefinitionAssetsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, criticity: str=None, datatype: str=None, id: str=None, value: str=None):
        """ScanDefinitionAssetsInner - a model defined in OpenAPI

        :param criticity: The criticity of this ScanDefinitionAssetsInner.
        :param datatype: The datatype of this ScanDefinitionAssetsInner.
        :param id: The id of this ScanDefinitionAssetsInner.
        :param value: The value of this ScanDefinitionAssetsInner.
        """
        self.openapi_types = {
            'criticity': str,
            'datatype': str,
            'id': str,
            'value': str
        }

        self.attribute_map = {
            'criticity': 'criticity',
            'datatype': 'datatype',
            'id': 'id',
            'value': 'value'
        }

        self._criticity = criticity
        self._datatype = datatype
        self._id = id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanDefinitionAssetsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanDefinition_assets_inner of this ScanDefinitionAssetsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criticity(self):
        """Gets the criticity of this ScanDefinitionAssetsInner.


        :return: The criticity of this ScanDefinitionAssetsInner.
        :rtype: str
        """
        return self._criticity

    @criticity.setter
    def criticity(self, criticity):
        """Sets the criticity of this ScanDefinitionAssetsInner.


        :param criticity: The criticity of this ScanDefinitionAssetsInner.
        :type criticity: str
        """
        allowed_values = ["low", "medium", "high"]  # noqa: E501
        if criticity not in allowed_values:
            raise ValueError(
                "Invalid value for `criticity` ({0}), must be one of {1}"
                .format(criticity, allowed_values)
            )

        self._criticity = criticity

    @property
    def datatype(self):
        """Gets the datatype of this ScanDefinitionAssetsInner.


        :return: The datatype of this ScanDefinitionAssetsInner.
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this ScanDefinitionAssetsInner.


        :param datatype: The datatype of this ScanDefinitionAssetsInner.
        :type datatype: str
        """
        allowed_values = ["ip", "ip-range", "ip-subnet", "fqdn", "domain", "url", "keyword", "person", "organisation", "path", "application"]  # noqa: E501
        if datatype not in allowed_values:
            raise ValueError(
                "Invalid value for `datatype` ({0}), must be one of {1}"
                .format(datatype, allowed_values)
            )

        self._datatype = datatype

    @property
    def id(self):
        """Gets the id of this ScanDefinitionAssetsInner.


        :return: The id of this ScanDefinitionAssetsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScanDefinitionAssetsInner.


        :param id: The id of this ScanDefinitionAssetsInner.
        :type id: str
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this ScanDefinitionAssetsInner.


        :return: The value of this ScanDefinitionAssetsInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ScanDefinitionAssetsInner.


        :param value: The value of this ScanDefinitionAssetsInner.
        :type value: str
        """

        self._value = value
