# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scan_definition_assets_inner import ScanDefinitionAssetsInner
from openapi_server import util


class ScanDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assets: List[ScanDefinitionAssetsInner]=None, options: object=None, scan_id: int=None):
        """ScanDefinition - a model defined in OpenAPI

        :param assets: The assets of this ScanDefinition.
        :param options: The options of this ScanDefinition.
        :param scan_id: The scan_id of this ScanDefinition.
        """
        self.openapi_types = {
            'assets': List[ScanDefinitionAssetsInner],
            'options': object,
            'scan_id': int
        }

        self.attribute_map = {
            'assets': 'assets',
            'options': 'options',
            'scan_id': 'scan_id'
        }

        self._assets = assets
        self._options = options
        self._scan_id = scan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScanDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScanDefinition of this ScanDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assets(self):
        """Gets the assets of this ScanDefinition.


        :return: The assets of this ScanDefinition.
        :rtype: List[ScanDefinitionAssetsInner]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this ScanDefinition.


        :param assets: The assets of this ScanDefinition.
        :type assets: List[ScanDefinitionAssetsInner]
        """

        self._assets = assets

    @property
    def options(self):
        """Gets the options of this ScanDefinition.


        :return: The options of this ScanDefinition.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ScanDefinition.


        :param options: The options of this ScanDefinition.
        :type options: object
        """

        self._options = options

    @property
    def scan_id(self):
        """Gets the scan_id of this ScanDefinition.


        :return: The scan_id of this ScanDefinition.
        :rtype: int
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this ScanDefinition.


        :param scan_id: The scan_id of this ScanDefinition.
        :type scan_id: int
        """

        self._scan_id = scan_id
