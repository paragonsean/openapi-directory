/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScanDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScanDefinition::OAIScanDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScanDefinition::OAIScanDefinition() {
    this->initializeModel();
}

OAIScanDefinition::~OAIScanDefinition() {}

void OAIScanDefinition::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_scan_id_isSet = false;
    m_scan_id_isValid = false;
}

void OAIScanDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScanDefinition::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_scan_id_isValid = ::OpenAPI::fromJsonValue(m_scan_id, json[QString("scan_id")]);
    m_scan_id_isSet = !json[QString("scan_id")].isNull() && m_scan_id_isValid;
}

QString OAIScanDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScanDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_options_isSet) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_scan_id_isSet) {
        obj.insert(QString("scan_id"), ::OpenAPI::toJsonValue(m_scan_id));
    }
    return obj;
}

QList<OAIScanDefinition_assets_inner> OAIScanDefinition::getAssets() const {
    return m_assets;
}
void OAIScanDefinition::setAssets(const QList<OAIScanDefinition_assets_inner> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIScanDefinition::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIScanDefinition::is_assets_Valid() const{
    return m_assets_isValid;
}

OAIObject OAIScanDefinition::getOptions() const {
    return m_options;
}
void OAIScanDefinition::setOptions(const OAIObject &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIScanDefinition::is_options_Set() const{
    return m_options_isSet;
}

bool OAIScanDefinition::is_options_Valid() const{
    return m_options_isValid;
}

qint32 OAIScanDefinition::getScanId() const {
    return m_scan_id;
}
void OAIScanDefinition::setScanId(const qint32 &scan_id) {
    m_scan_id = scan_id;
    m_scan_id_isSet = true;
}

bool OAIScanDefinition::is_scan_id_Set() const{
    return m_scan_id_isSet;
}

bool OAIScanDefinition::is_scan_id_Valid() const{
    return m_scan_id_isValid;
}

bool OAIScanDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScanDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
