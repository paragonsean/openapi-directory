/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPatrowlEngineApi_H
#define OAI_OAIPatrowlEngineApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiResponse.h"
#include "OAIFindings_inner.h"
#include "OAIScanDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPatrowlEngineApi : public QObject {
    Q_OBJECT

public:
    OAIPatrowlEngineApi(const int timeOut = 0);
    ~OAIPatrowlEngineApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scan_id qint32 [required]
    */
    virtual void cleanScanPage(const qint32 &scan_id);


    virtual void cleanScansPage();


    virtual void getDefaultPage();

    /**
    * @param[in]  scan_id qint32 [required]
    */
    virtual void getFindingPage(const qint32 &scan_id);


    virtual void getInfoPage();


    virtual void getLivenessPage();


    virtual void getReadinessPage();


    virtual void getTestPage();


    virtual void reloadConfigurationPage();

    /**
    * @param[in]  oai_scan_definition OAIScanDefinition [required]
    */
    virtual void startScanPage(const OAIScanDefinition &oai_scan_definition);

    /**
    * @param[in]  scan_id qint32 [required]
    */
    virtual void statusScanPage(const qint32 &scan_id);


    virtual void statusScansPage();

    /**
    * @param[in]  scan_id qint32 [required]
    */
    virtual void stopScanPage(const qint32 &scan_id);


    virtual void stopScansPage();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cleanScanPageCallback(OAIHttpRequestWorker *worker);
    void cleanScansPageCallback(OAIHttpRequestWorker *worker);
    void getDefaultPageCallback(OAIHttpRequestWorker *worker);
    void getFindingPageCallback(OAIHttpRequestWorker *worker);
    void getInfoPageCallback(OAIHttpRequestWorker *worker);
    void getLivenessPageCallback(OAIHttpRequestWorker *worker);
    void getReadinessPageCallback(OAIHttpRequestWorker *worker);
    void getTestPageCallback(OAIHttpRequestWorker *worker);
    void reloadConfigurationPageCallback(OAIHttpRequestWorker *worker);
    void startScanPageCallback(OAIHttpRequestWorker *worker);
    void statusScanPageCallback(OAIHttpRequestWorker *worker);
    void statusScansPageCallback(OAIHttpRequestWorker *worker);
    void stopScanPageCallback(OAIHttpRequestWorker *worker);
    void stopScansPageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cleanScanPageSignal(OAIApiResponse summary);
    void cleanScansPageSignal(OAIApiResponse summary);
    void getDefaultPageSignal(OAIApiResponse summary);
    void getFindingPageSignal(QList<OAIFindings_inner> summary);
    void getInfoPageSignal(OAIApiResponse summary);
    void getLivenessPageSignal();
    void getReadinessPageSignal();
    void getTestPageSignal();
    void reloadConfigurationPageSignal(OAIApiResponse summary);
    void startScanPageSignal(OAIApiResponse summary);
    void statusScanPageSignal(OAIApiResponse summary);
    void statusScansPageSignal(OAIApiResponse summary);
    void stopScanPageSignal(OAIApiResponse summary);
    void stopScansPageSignal(OAIApiResponse summary);


    void cleanScanPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void cleanScansPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void getDefaultPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void getFindingPageSignalFull(OAIHttpRequestWorker *worker, QList<OAIFindings_inner> summary);
    void getInfoPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void getLivenessPageSignalFull(OAIHttpRequestWorker *worker);
    void getReadinessPageSignalFull(OAIHttpRequestWorker *worker);
    void getTestPageSignalFull(OAIHttpRequestWorker *worker);
    void reloadConfigurationPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void startScanPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void statusScanPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void statusScansPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void stopScanPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);
    void stopScansPageSignalFull(OAIHttpRequestWorker *worker, OAIApiResponse summary);

    Q_DECL_DEPRECATED_X("Use cleanScanPageSignalError() instead")
    void cleanScanPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cleanScanPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cleanScansPageSignalError() instead")
    void cleanScansPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cleanScansPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultPageSignalError() instead")
    void getDefaultPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFindingPageSignalError() instead")
    void getFindingPageSignalE(QList<OAIFindings_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFindingPageSignalError(QList<OAIFindings_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoPageSignalError() instead")
    void getInfoPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLivenessPageSignalError() instead")
    void getLivenessPageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLivenessPageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadinessPageSignalError() instead")
    void getReadinessPageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getReadinessPageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestPageSignalError() instead")
    void getTestPageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTestPageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reloadConfigurationPageSignalError() instead")
    void reloadConfigurationPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reloadConfigurationPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startScanPageSignalError() instead")
    void startScanPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startScanPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusScanPageSignalError() instead")
    void statusScanPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void statusScanPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusScansPageSignalError() instead")
    void statusScansPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void statusScansPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopScanPageSignalError() instead")
    void stopScanPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopScanPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopScansPageSignalError() instead")
    void stopScansPageSignalE(OAIApiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopScansPageSignalError(OAIApiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cleanScanPageSignalErrorFull() instead")
    void cleanScanPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cleanScanPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cleanScansPageSignalErrorFull() instead")
    void cleanScansPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cleanScansPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultPageSignalErrorFull() instead")
    void getDefaultPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFindingPageSignalErrorFull() instead")
    void getFindingPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFindingPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoPageSignalErrorFull() instead")
    void getInfoPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLivenessPageSignalErrorFull() instead")
    void getLivenessPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLivenessPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReadinessPageSignalErrorFull() instead")
    void getReadinessPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReadinessPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestPageSignalErrorFull() instead")
    void getTestPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reloadConfigurationPageSignalErrorFull() instead")
    void reloadConfigurationPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reloadConfigurationPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startScanPageSignalErrorFull() instead")
    void startScanPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startScanPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusScanPageSignalErrorFull() instead")
    void statusScanPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statusScanPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use statusScansPageSignalErrorFull() instead")
    void statusScansPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statusScansPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopScanPageSignalErrorFull() instead")
    void stopScanPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopScanPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopScansPageSignalErrorFull() instead")
    void stopScansPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopScansPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
