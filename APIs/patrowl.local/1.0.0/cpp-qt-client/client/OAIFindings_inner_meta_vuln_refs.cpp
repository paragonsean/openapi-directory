/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindings_inner_meta_vuln_refs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindings_inner_meta_vuln_refs::OAIFindings_inner_meta_vuln_refs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindings_inner_meta_vuln_refs::OAIFindings_inner_meta_vuln_refs() {
    this->initializeModel();
}

OAIFindings_inner_meta_vuln_refs::~OAIFindings_inner_meta_vuln_refs() {}

void OAIFindings_inner_meta_vuln_refs::initializeModel() {

    m_bid_isSet = false;
    m_bid_isValid = false;

    m_cpe_isSet = false;
    m_cpe_isValid = false;

    m_cve_isSet = false;
    m_cve_isValid = false;

    m_cwe_isSet = false;
    m_cwe_isValid = false;
}

void OAIFindings_inner_meta_vuln_refs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindings_inner_meta_vuln_refs::fromJsonObject(QJsonObject json) {

    m_bid_isValid = ::OpenAPI::fromJsonValue(m_bid, json[QString("bid")]);
    m_bid_isSet = !json[QString("bid")].isNull() && m_bid_isValid;

    m_cpe_isValid = ::OpenAPI::fromJsonValue(m_cpe, json[QString("cpe")]);
    m_cpe_isSet = !json[QString("cpe")].isNull() && m_cpe_isValid;

    m_cve_isValid = ::OpenAPI::fromJsonValue(m_cve, json[QString("cve")]);
    m_cve_isSet = !json[QString("cve")].isNull() && m_cve_isValid;

    m_cwe_isValid = ::OpenAPI::fromJsonValue(m_cwe, json[QString("cwe")]);
    m_cwe_isSet = !json[QString("cwe")].isNull() && m_cwe_isValid;
}

QString OAIFindings_inner_meta_vuln_refs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindings_inner_meta_vuln_refs::asJsonObject() const {
    QJsonObject obj;
    if (m_bid.size() > 0) {
        obj.insert(QString("bid"), ::OpenAPI::toJsonValue(m_bid));
    }
    if (m_cpe.size() > 0) {
        obj.insert(QString("cpe"), ::OpenAPI::toJsonValue(m_cpe));
    }
    if (m_cve.size() > 0) {
        obj.insert(QString("cve"), ::OpenAPI::toJsonValue(m_cve));
    }
    if (m_cwe.size() > 0) {
        obj.insert(QString("cwe"), ::OpenAPI::toJsonValue(m_cwe));
    }
    return obj;
}

QList<QString> OAIFindings_inner_meta_vuln_refs::getBid() const {
    return m_bid;
}
void OAIFindings_inner_meta_vuln_refs::setBid(const QList<QString> &bid) {
    m_bid = bid;
    m_bid_isSet = true;
}

bool OAIFindings_inner_meta_vuln_refs::is_bid_Set() const{
    return m_bid_isSet;
}

bool OAIFindings_inner_meta_vuln_refs::is_bid_Valid() const{
    return m_bid_isValid;
}

QList<QString> OAIFindings_inner_meta_vuln_refs::getCpe() const {
    return m_cpe;
}
void OAIFindings_inner_meta_vuln_refs::setCpe(const QList<QString> &cpe) {
    m_cpe = cpe;
    m_cpe_isSet = true;
}

bool OAIFindings_inner_meta_vuln_refs::is_cpe_Set() const{
    return m_cpe_isSet;
}

bool OAIFindings_inner_meta_vuln_refs::is_cpe_Valid() const{
    return m_cpe_isValid;
}

QList<QString> OAIFindings_inner_meta_vuln_refs::getCve() const {
    return m_cve;
}
void OAIFindings_inner_meta_vuln_refs::setCve(const QList<QString> &cve) {
    m_cve = cve;
    m_cve_isSet = true;
}

bool OAIFindings_inner_meta_vuln_refs::is_cve_Set() const{
    return m_cve_isSet;
}

bool OAIFindings_inner_meta_vuln_refs::is_cve_Valid() const{
    return m_cve_isValid;
}

QList<QString> OAIFindings_inner_meta_vuln_refs::getCwe() const {
    return m_cwe;
}
void OAIFindings_inner_meta_vuln_refs::setCwe(const QList<QString> &cwe) {
    m_cwe = cwe;
    m_cwe_isSet = true;
}

bool OAIFindings_inner_meta_vuln_refs::is_cwe_Set() const{
    return m_cwe_isSet;
}

bool OAIFindings_inner_meta_vuln_refs::is_cwe_Valid() const{
    return m_cwe_isValid;
}

bool OAIFindings_inner_meta_vuln_refs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpe.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cve.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cwe.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindings_inner_meta_vuln_refs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
