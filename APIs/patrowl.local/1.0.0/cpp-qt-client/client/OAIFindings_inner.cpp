/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindings_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindings_inner::OAIFindings_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindings_inner::OAIFindings_inner() {
    this->initializeModel();
}

OAIFindings_inner::~OAIFindings_inner() {}

void OAIFindings_inner::initializeModel() {

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_issue_id_isSet = false;
    m_issue_id_isValid = false;

    m_meta_links_isSet = false;
    m_meta_links_isValid = false;

    m_meta_risk_isSet = false;
    m_meta_risk_isValid = false;

    m_meta_tags_isSet = false;
    m_meta_tags_isValid = false;

    m_meta_vuln_refs_isSet = false;
    m_meta_vuln_refs_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_solution_isSet = false;
    m_solution_isValid = false;

    m_target_addrs_isSet = false;
    m_target_addrs_isValid = false;

    m_target_proto_isSet = false;
    m_target_proto_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFindings_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindings_inner::fromJsonObject(QJsonObject json) {

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_issue_id_isValid = ::OpenAPI::fromJsonValue(m_issue_id, json[QString("issue_id")]);
    m_issue_id_isSet = !json[QString("issue_id")].isNull() && m_issue_id_isValid;

    m_meta_links_isValid = ::OpenAPI::fromJsonValue(m_meta_links, json[QString("meta_links")]);
    m_meta_links_isSet = !json[QString("meta_links")].isNull() && m_meta_links_isValid;

    m_meta_risk_isValid = ::OpenAPI::fromJsonValue(m_meta_risk, json[QString("meta_risk")]);
    m_meta_risk_isSet = !json[QString("meta_risk")].isNull() && m_meta_risk_isValid;

    m_meta_tags_isValid = ::OpenAPI::fromJsonValue(m_meta_tags, json[QString("meta_tags")]);
    m_meta_tags_isSet = !json[QString("meta_tags")].isNull() && m_meta_tags_isValid;

    m_meta_vuln_refs_isValid = ::OpenAPI::fromJsonValue(m_meta_vuln_refs, json[QString("meta_vuln_refs")]);
    m_meta_vuln_refs_isSet = !json[QString("meta_vuln_refs")].isNull() && m_meta_vuln_refs_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_solution_isValid = ::OpenAPI::fromJsonValue(m_solution, json[QString("solution")]);
    m_solution_isSet = !json[QString("solution")].isNull() && m_solution_isValid;

    m_target_addrs_isValid = ::OpenAPI::fromJsonValue(m_target_addrs, json[QString("target_addrs")]);
    m_target_addrs_isSet = !json[QString("target_addrs")].isNull() && m_target_addrs_isValid;

    m_target_proto_isValid = ::OpenAPI::fromJsonValue(m_target_proto, json[QString("target_proto")]);
    m_target_proto_isSet = !json[QString("target_proto")].isNull() && m_target_proto_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFindings_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindings_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_issue_id_isSet) {
        obj.insert(QString("issue_id"), ::OpenAPI::toJsonValue(m_issue_id));
    }
    if (m_meta_links.size() > 0) {
        obj.insert(QString("meta_links"), ::OpenAPI::toJsonValue(m_meta_links));
    }
    if (m_meta_risk.isSet()) {
        obj.insert(QString("meta_risk"), ::OpenAPI::toJsonValue(m_meta_risk));
    }
    if (m_meta_tags.size() > 0) {
        obj.insert(QString("meta_tags"), ::OpenAPI::toJsonValue(m_meta_tags));
    }
    if (m_meta_vuln_refs.isSet()) {
        obj.insert(QString("meta_vuln_refs"), ::OpenAPI::toJsonValue(m_meta_vuln_refs));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_solution_isSet) {
        obj.insert(QString("solution"), ::OpenAPI::toJsonValue(m_solution));
    }
    if (m_target_addrs.size() > 0) {
        obj.insert(QString("target_addrs"), ::OpenAPI::toJsonValue(m_target_addrs));
    }
    if (m_target_proto.size() > 0) {
        obj.insert(QString("target_proto"), ::OpenAPI::toJsonValue(m_target_proto));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFindings_inner::getConfidence() const {
    return m_confidence;
}
void OAIFindings_inner::setConfidence(const QString &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIFindings_inner::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIFindings_inner::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIFindings_inner::getDescription() const {
    return m_description;
}
void OAIFindings_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFindings_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFindings_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIFindings_inner::getIssueId() const {
    return m_issue_id;
}
void OAIFindings_inner::setIssueId(const qint32 &issue_id) {
    m_issue_id = issue_id;
    m_issue_id_isSet = true;
}

bool OAIFindings_inner::is_issue_id_Set() const{
    return m_issue_id_isSet;
}

bool OAIFindings_inner::is_issue_id_Valid() const{
    return m_issue_id_isValid;
}

QList<QString> OAIFindings_inner::getMetaLinks() const {
    return m_meta_links;
}
void OAIFindings_inner::setMetaLinks(const QList<QString> &meta_links) {
    m_meta_links = meta_links;
    m_meta_links_isSet = true;
}

bool OAIFindings_inner::is_meta_links_Set() const{
    return m_meta_links_isSet;
}

bool OAIFindings_inner::is_meta_links_Valid() const{
    return m_meta_links_isValid;
}

OAIFindings_inner_meta_risk OAIFindings_inner::getMetaRisk() const {
    return m_meta_risk;
}
void OAIFindings_inner::setMetaRisk(const OAIFindings_inner_meta_risk &meta_risk) {
    m_meta_risk = meta_risk;
    m_meta_risk_isSet = true;
}

bool OAIFindings_inner::is_meta_risk_Set() const{
    return m_meta_risk_isSet;
}

bool OAIFindings_inner::is_meta_risk_Valid() const{
    return m_meta_risk_isValid;
}

QList<QString> OAIFindings_inner::getMetaTags() const {
    return m_meta_tags;
}
void OAIFindings_inner::setMetaTags(const QList<QString> &meta_tags) {
    m_meta_tags = meta_tags;
    m_meta_tags_isSet = true;
}

bool OAIFindings_inner::is_meta_tags_Set() const{
    return m_meta_tags_isSet;
}

bool OAIFindings_inner::is_meta_tags_Valid() const{
    return m_meta_tags_isValid;
}

OAIFindings_inner_meta_vuln_refs OAIFindings_inner::getMetaVulnRefs() const {
    return m_meta_vuln_refs;
}
void OAIFindings_inner::setMetaVulnRefs(const OAIFindings_inner_meta_vuln_refs &meta_vuln_refs) {
    m_meta_vuln_refs = meta_vuln_refs;
    m_meta_vuln_refs_isSet = true;
}

bool OAIFindings_inner::is_meta_vuln_refs_Set() const{
    return m_meta_vuln_refs_isSet;
}

bool OAIFindings_inner::is_meta_vuln_refs_Valid() const{
    return m_meta_vuln_refs_isValid;
}

QString OAIFindings_inner::getRaw() const {
    return m_raw;
}
void OAIFindings_inner::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAIFindings_inner::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAIFindings_inner::is_raw_Valid() const{
    return m_raw_isValid;
}

QString OAIFindings_inner::getSeverity() const {
    return m_severity;
}
void OAIFindings_inner::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFindings_inner::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFindings_inner::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIFindings_inner::getSolution() const {
    return m_solution;
}
void OAIFindings_inner::setSolution(const QString &solution) {
    m_solution = solution;
    m_solution_isSet = true;
}

bool OAIFindings_inner::is_solution_Set() const{
    return m_solution_isSet;
}

bool OAIFindings_inner::is_solution_Valid() const{
    return m_solution_isValid;
}

QList<QString> OAIFindings_inner::getTargetAddrs() const {
    return m_target_addrs;
}
void OAIFindings_inner::setTargetAddrs(const QList<QString> &target_addrs) {
    m_target_addrs = target_addrs;
    m_target_addrs_isSet = true;
}

bool OAIFindings_inner::is_target_addrs_Set() const{
    return m_target_addrs_isSet;
}

bool OAIFindings_inner::is_target_addrs_Valid() const{
    return m_target_addrs_isValid;
}

QList<QString> OAIFindings_inner::getTargetProto() const {
    return m_target_proto;
}
void OAIFindings_inner::setTargetProto(const QList<QString> &target_proto) {
    m_target_proto = target_proto;
    m_target_proto_isSet = true;
}

bool OAIFindings_inner::is_target_proto_Set() const{
    return m_target_proto_isSet;
}

bool OAIFindings_inner::is_target_proto_Valid() const{
    return m_target_proto_isValid;
}

QDateTime OAIFindings_inner::getTimestamp() const {
    return m_timestamp;
}
void OAIFindings_inner::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIFindings_inner::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIFindings_inner::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIFindings_inner::getTitle() const {
    return m_title;
}
void OAIFindings_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFindings_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFindings_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFindings_inner::getType() const {
    return m_type;
}
void OAIFindings_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFindings_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFindings_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFindings_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_risk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_vuln_refs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_solution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_addrs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_proto.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindings_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
