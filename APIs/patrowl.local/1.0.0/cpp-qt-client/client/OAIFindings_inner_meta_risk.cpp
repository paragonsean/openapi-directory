/**
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFindings_inner_meta_risk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFindings_inner_meta_risk::OAIFindings_inner_meta_risk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFindings_inner_meta_risk::OAIFindings_inner_meta_risk() {
    this->initializeModel();
}

OAIFindings_inner_meta_risk::~OAIFindings_inner_meta_risk() {}

void OAIFindings_inner_meta_risk::initializeModel() {

    m_cvss_base_score_isSet = false;
    m_cvss_base_score_isValid = false;

    m_cvss_vector_isSet = false;
    m_cvss_vector_isValid = false;

    m_exploit_available_isSet = false;
    m_exploit_available_isValid = false;

    m_exploitability_ease_isSet = false;
    m_exploitability_ease_isValid = false;

    m_patch_publication_date_isSet = false;
    m_patch_publication_date_isValid = false;
}

void OAIFindings_inner_meta_risk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFindings_inner_meta_risk::fromJsonObject(QJsonObject json) {

    m_cvss_base_score_isValid = ::OpenAPI::fromJsonValue(m_cvss_base_score, json[QString("cvss_base_score")]);
    m_cvss_base_score_isSet = !json[QString("cvss_base_score")].isNull() && m_cvss_base_score_isValid;

    m_cvss_vector_isValid = ::OpenAPI::fromJsonValue(m_cvss_vector, json[QString("cvss_vector")]);
    m_cvss_vector_isSet = !json[QString("cvss_vector")].isNull() && m_cvss_vector_isValid;

    m_exploit_available_isValid = ::OpenAPI::fromJsonValue(m_exploit_available, json[QString("exploit_available")]);
    m_exploit_available_isSet = !json[QString("exploit_available")].isNull() && m_exploit_available_isValid;

    m_exploitability_ease_isValid = ::OpenAPI::fromJsonValue(m_exploitability_ease, json[QString("exploitability_ease")]);
    m_exploitability_ease_isSet = !json[QString("exploitability_ease")].isNull() && m_exploitability_ease_isValid;

    m_patch_publication_date_isValid = ::OpenAPI::fromJsonValue(m_patch_publication_date, json[QString("patch_publication_date")]);
    m_patch_publication_date_isSet = !json[QString("patch_publication_date")].isNull() && m_patch_publication_date_isValid;
}

QString OAIFindings_inner_meta_risk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFindings_inner_meta_risk::asJsonObject() const {
    QJsonObject obj;
    if (m_cvss_base_score.size() > 0) {
        obj.insert(QString("cvss_base_score"), ::OpenAPI::toJsonValue(m_cvss_base_score));
    }
    if (m_cvss_vector.size() > 0) {
        obj.insert(QString("cvss_vector"), ::OpenAPI::toJsonValue(m_cvss_vector));
    }
    if (m_exploit_available.size() > 0) {
        obj.insert(QString("exploit_available"), ::OpenAPI::toJsonValue(m_exploit_available));
    }
    if (m_exploitability_ease.size() > 0) {
        obj.insert(QString("exploitability_ease"), ::OpenAPI::toJsonValue(m_exploitability_ease));
    }
    if (m_patch_publication_date.size() > 0) {
        obj.insert(QString("patch_publication_date"), ::OpenAPI::toJsonValue(m_patch_publication_date));
    }
    return obj;
}

QList<QString> OAIFindings_inner_meta_risk::getCvssBaseScore() const {
    return m_cvss_base_score;
}
void OAIFindings_inner_meta_risk::setCvssBaseScore(const QList<QString> &cvss_base_score) {
    m_cvss_base_score = cvss_base_score;
    m_cvss_base_score_isSet = true;
}

bool OAIFindings_inner_meta_risk::is_cvss_base_score_Set() const{
    return m_cvss_base_score_isSet;
}

bool OAIFindings_inner_meta_risk::is_cvss_base_score_Valid() const{
    return m_cvss_base_score_isValid;
}

QList<QString> OAIFindings_inner_meta_risk::getCvssVector() const {
    return m_cvss_vector;
}
void OAIFindings_inner_meta_risk::setCvssVector(const QList<QString> &cvss_vector) {
    m_cvss_vector = cvss_vector;
    m_cvss_vector_isSet = true;
}

bool OAIFindings_inner_meta_risk::is_cvss_vector_Set() const{
    return m_cvss_vector_isSet;
}

bool OAIFindings_inner_meta_risk::is_cvss_vector_Valid() const{
    return m_cvss_vector_isValid;
}

QList<QString> OAIFindings_inner_meta_risk::getExploitAvailable() const {
    return m_exploit_available;
}
void OAIFindings_inner_meta_risk::setExploitAvailable(const QList<QString> &exploit_available) {
    m_exploit_available = exploit_available;
    m_exploit_available_isSet = true;
}

bool OAIFindings_inner_meta_risk::is_exploit_available_Set() const{
    return m_exploit_available_isSet;
}

bool OAIFindings_inner_meta_risk::is_exploit_available_Valid() const{
    return m_exploit_available_isValid;
}

QList<QString> OAIFindings_inner_meta_risk::getExploitabilityEase() const {
    return m_exploitability_ease;
}
void OAIFindings_inner_meta_risk::setExploitabilityEase(const QList<QString> &exploitability_ease) {
    m_exploitability_ease = exploitability_ease;
    m_exploitability_ease_isSet = true;
}

bool OAIFindings_inner_meta_risk::is_exploitability_ease_Set() const{
    return m_exploitability_ease_isSet;
}

bool OAIFindings_inner_meta_risk::is_exploitability_ease_Valid() const{
    return m_exploitability_ease_isValid;
}

QList<QString> OAIFindings_inner_meta_risk::getPatchPublicationDate() const {
    return m_patch_publication_date;
}
void OAIFindings_inner_meta_risk::setPatchPublicationDate(const QList<QString> &patch_publication_date) {
    m_patch_publication_date = patch_publication_date;
    m_patch_publication_date_isSet = true;
}

bool OAIFindings_inner_meta_risk::is_patch_publication_date_Set() const{
    return m_patch_publication_date_isSet;
}

bool OAIFindings_inner_meta_risk::is_patch_publication_date_Valid() const{
    return m_patch_publication_date_isValid;
}

bool OAIFindings_inner_meta_risk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cvss_base_score.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvss_vector.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exploit_available.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exploitability_ease.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_publication_date.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFindings_inner_meta_risk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
