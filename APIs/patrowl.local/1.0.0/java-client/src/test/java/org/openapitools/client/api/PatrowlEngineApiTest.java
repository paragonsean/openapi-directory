/*
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.FindingsInner;
import org.openapitools.client.model.ModelApiResponse;
import org.openapitools.client.model.ScanDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PatrowlEngineApi
 */
@Disabled
public class PatrowlEngineApiTest {

    private final PatrowlEngineApi api = new PatrowlEngineApi();

    /**
     * Clean scan
     *
     * Clean scan identified by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cleanScanPageTest() throws ApiException {
        Integer scanId = null;
        ModelApiResponse response = api.cleanScanPage(scanId);
        // TODO: test validations
    }

    /**
     * Clean all scans
     *
     * Clean all current scans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cleanScansPageTest() throws ApiException {
        ModelApiResponse response = api.cleanScansPage();
        // TODO: test validations
    }

    /**
     * Index page
     *
     * Return index page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultPageTest() throws ApiException {
        ModelApiResponse response = api.getDefaultPage();
        // TODO: test validations
    }

    /**
     * Get findings on finished scans
     *
     * Get findings on finished scans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingPageTest() throws ApiException {
        Integer scanId = null;
        List<FindingsInner> response = api.getFindingPage(scanId);
        // TODO: test validations
    }

    /**
     * Engine info page
     *
     * Return information on engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoPageTest() throws ApiException {
        ModelApiResponse response = api.getInfoPage();
        // TODO: test validations
    }

    /**
     * Liveness page
     *
     * Return liveness page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLivenessPageTest() throws ApiException {
        api.getLivenessPage();
        // TODO: test validations
    }

    /**
     * Readiness page
     *
     * Return liveness page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReadinessPageTest() throws ApiException {
        api.getReadinessPage();
        // TODO: test validations
    }

    /**
     * Test page
     *
     * Return test page
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestPageTest() throws ApiException {
        api.getTestPage();
        // TODO: test validations
    }

    /**
     * Configuration reloading page
     *
     * Reload the configuration file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reloadConfigurationPageTest() throws ApiException {
        ModelApiResponse response = api.reloadConfigurationPage();
        // TODO: test validations
    }

    /**
     * Start a new scan
     *
     * Start a new scan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startScanPageTest() throws ApiException {
        ScanDefinition scanDefinition = null;
        ModelApiResponse response = api.startScanPage(scanDefinition);
        // TODO: test validations
    }

    /**
     * Status of a scan
     *
     * Status of a scan identified by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void statusScanPageTest() throws ApiException {
        Integer scanId = null;
        ModelApiResponse response = api.statusScanPage(scanId);
        // TODO: test validations
    }

    /**
     * Status on all scans
     *
     * Status all current scans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void statusScansPageTest() throws ApiException {
        ModelApiResponse response = api.statusScansPage();
        // TODO: test validations
    }

    /**
     * Stop a scan
     *
     * Stop a scan identified by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopScanPageTest() throws ApiException {
        Integer scanId = null;
        ModelApiResponse response = api.stopScanPage(scanId);
        // TODO: test validations
    }

    /**
     * Stop all scans
     *
     * Stop all current scans.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopScansPageTest() throws ApiException {
        ModelApiResponse response = api.stopScansPage();
        // TODO: test validations
    }

}
