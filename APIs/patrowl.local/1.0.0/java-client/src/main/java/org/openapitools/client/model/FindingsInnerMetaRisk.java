/*
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FindingsInnerMetaRisk
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:15.266004-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindingsInnerMetaRisk {
  public static final String SERIALIZED_NAME_CVSS_BASE_SCORE = "cvss_base_score";
  @SerializedName(SERIALIZED_NAME_CVSS_BASE_SCORE)
  private List<String> cvssBaseScore = new ArrayList<>();

  public static final String SERIALIZED_NAME_CVSS_VECTOR = "cvss_vector";
  @SerializedName(SERIALIZED_NAME_CVSS_VECTOR)
  private List<String> cvssVector = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPLOIT_AVAILABLE = "exploit_available";
  @SerializedName(SERIALIZED_NAME_EXPLOIT_AVAILABLE)
  private List<String> exploitAvailable = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPLOITABILITY_EASE = "exploitability_ease";
  @SerializedName(SERIALIZED_NAME_EXPLOITABILITY_EASE)
  private List<String> exploitabilityEase = new ArrayList<>();

  public static final String SERIALIZED_NAME_PATCH_PUBLICATION_DATE = "patch_publication_date";
  @SerializedName(SERIALIZED_NAME_PATCH_PUBLICATION_DATE)
  private List<String> patchPublicationDate = new ArrayList<>();

  public FindingsInnerMetaRisk() {
  }

  public FindingsInnerMetaRisk cvssBaseScore(List<String> cvssBaseScore) {
    this.cvssBaseScore = cvssBaseScore;
    return this;
  }

  public FindingsInnerMetaRisk addCvssBaseScoreItem(String cvssBaseScoreItem) {
    if (this.cvssBaseScore == null) {
      this.cvssBaseScore = new ArrayList<>();
    }
    this.cvssBaseScore.add(cvssBaseScoreItem);
    return this;
  }

  /**
   * Get cvssBaseScore
   * @return cvssBaseScore
   */
  @javax.annotation.Nullable
  public List<String> getCvssBaseScore() {
    return cvssBaseScore;
  }

  public void setCvssBaseScore(List<String> cvssBaseScore) {
    this.cvssBaseScore = cvssBaseScore;
  }


  public FindingsInnerMetaRisk cvssVector(List<String> cvssVector) {
    this.cvssVector = cvssVector;
    return this;
  }

  public FindingsInnerMetaRisk addCvssVectorItem(String cvssVectorItem) {
    if (this.cvssVector == null) {
      this.cvssVector = new ArrayList<>();
    }
    this.cvssVector.add(cvssVectorItem);
    return this;
  }

  /**
   * Get cvssVector
   * @return cvssVector
   */
  @javax.annotation.Nullable
  public List<String> getCvssVector() {
    return cvssVector;
  }

  public void setCvssVector(List<String> cvssVector) {
    this.cvssVector = cvssVector;
  }


  public FindingsInnerMetaRisk exploitAvailable(List<String> exploitAvailable) {
    this.exploitAvailable = exploitAvailable;
    return this;
  }

  public FindingsInnerMetaRisk addExploitAvailableItem(String exploitAvailableItem) {
    if (this.exploitAvailable == null) {
      this.exploitAvailable = new ArrayList<>();
    }
    this.exploitAvailable.add(exploitAvailableItem);
    return this;
  }

  /**
   * Get exploitAvailable
   * @return exploitAvailable
   */
  @javax.annotation.Nullable
  public List<String> getExploitAvailable() {
    return exploitAvailable;
  }

  public void setExploitAvailable(List<String> exploitAvailable) {
    this.exploitAvailable = exploitAvailable;
  }


  public FindingsInnerMetaRisk exploitabilityEase(List<String> exploitabilityEase) {
    this.exploitabilityEase = exploitabilityEase;
    return this;
  }

  public FindingsInnerMetaRisk addExploitabilityEaseItem(String exploitabilityEaseItem) {
    if (this.exploitabilityEase == null) {
      this.exploitabilityEase = new ArrayList<>();
    }
    this.exploitabilityEase.add(exploitabilityEaseItem);
    return this;
  }

  /**
   * Get exploitabilityEase
   * @return exploitabilityEase
   */
  @javax.annotation.Nullable
  public List<String> getExploitabilityEase() {
    return exploitabilityEase;
  }

  public void setExploitabilityEase(List<String> exploitabilityEase) {
    this.exploitabilityEase = exploitabilityEase;
  }


  public FindingsInnerMetaRisk patchPublicationDate(List<String> patchPublicationDate) {
    this.patchPublicationDate = patchPublicationDate;
    return this;
  }

  public FindingsInnerMetaRisk addPatchPublicationDateItem(String patchPublicationDateItem) {
    if (this.patchPublicationDate == null) {
      this.patchPublicationDate = new ArrayList<>();
    }
    this.patchPublicationDate.add(patchPublicationDateItem);
    return this;
  }

  /**
   * Get patchPublicationDate
   * @return patchPublicationDate
   */
  @javax.annotation.Nullable
  public List<String> getPatchPublicationDate() {
    return patchPublicationDate;
  }

  public void setPatchPublicationDate(List<String> patchPublicationDate) {
    this.patchPublicationDate = patchPublicationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindingsInnerMetaRisk findingsInnerMetaRisk = (FindingsInnerMetaRisk) o;
    return Objects.equals(this.cvssBaseScore, findingsInnerMetaRisk.cvssBaseScore) &&
        Objects.equals(this.cvssVector, findingsInnerMetaRisk.cvssVector) &&
        Objects.equals(this.exploitAvailable, findingsInnerMetaRisk.exploitAvailable) &&
        Objects.equals(this.exploitabilityEase, findingsInnerMetaRisk.exploitabilityEase) &&
        Objects.equals(this.patchPublicationDate, findingsInnerMetaRisk.patchPublicationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cvssBaseScore, cvssVector, exploitAvailable, exploitabilityEase, patchPublicationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindingsInnerMetaRisk {\n");
    sb.append("    cvssBaseScore: ").append(toIndentedString(cvssBaseScore)).append("\n");
    sb.append("    cvssVector: ").append(toIndentedString(cvssVector)).append("\n");
    sb.append("    exploitAvailable: ").append(toIndentedString(exploitAvailable)).append("\n");
    sb.append("    exploitabilityEase: ").append(toIndentedString(exploitabilityEase)).append("\n");
    sb.append("    patchPublicationDate: ").append(toIndentedString(patchPublicationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cvss_base_score");
    openapiFields.add("cvss_vector");
    openapiFields.add("exploit_available");
    openapiFields.add("exploitability_ease");
    openapiFields.add("patch_publication_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindingsInnerMetaRisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindingsInnerMetaRisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindingsInnerMetaRisk is not found in the empty JSON string", FindingsInnerMetaRisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindingsInnerMetaRisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindingsInnerMetaRisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cvss_base_score") != null && !jsonObj.get("cvss_base_score").isJsonNull() && !jsonObj.get("cvss_base_score").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvss_base_score` to be an array in the JSON string but got `%s`", jsonObj.get("cvss_base_score").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cvss_vector") != null && !jsonObj.get("cvss_vector").isJsonNull() && !jsonObj.get("cvss_vector").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvss_vector` to be an array in the JSON string but got `%s`", jsonObj.get("cvss_vector").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exploit_available") != null && !jsonObj.get("exploit_available").isJsonNull() && !jsonObj.get("exploit_available").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exploit_available` to be an array in the JSON string but got `%s`", jsonObj.get("exploit_available").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exploitability_ease") != null && !jsonObj.get("exploitability_ease").isJsonNull() && !jsonObj.get("exploitability_ease").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exploitability_ease` to be an array in the JSON string but got `%s`", jsonObj.get("exploitability_ease").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("patch_publication_date") != null && !jsonObj.get("patch_publication_date").isJsonNull() && !jsonObj.get("patch_publication_date").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `patch_publication_date` to be an array in the JSON string but got `%s`", jsonObj.get("patch_publication_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindingsInnerMetaRisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindingsInnerMetaRisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindingsInnerMetaRisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindingsInnerMetaRisk.class));

       return (TypeAdapter<T>) new TypeAdapter<FindingsInnerMetaRisk>() {
           @Override
           public void write(JsonWriter out, FindingsInnerMetaRisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindingsInnerMetaRisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindingsInnerMetaRisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindingsInnerMetaRisk
   * @throws IOException if the JSON string is invalid with respect to FindingsInnerMetaRisk
   */
  public static FindingsInnerMetaRisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindingsInnerMetaRisk.class);
  }

  /**
   * Convert an instance of FindingsInnerMetaRisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

