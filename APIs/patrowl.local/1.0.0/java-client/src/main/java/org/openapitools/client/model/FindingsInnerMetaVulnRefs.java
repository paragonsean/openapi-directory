/*
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FindingsInnerMetaVulnRefs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:15.266004-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindingsInnerMetaVulnRefs {
  public static final String SERIALIZED_NAME_BID = "bid";
  @SerializedName(SERIALIZED_NAME_BID)
  private List<String> bid = new ArrayList<>();

  public static final String SERIALIZED_NAME_CPE = "cpe";
  @SerializedName(SERIALIZED_NAME_CPE)
  private List<String> cpe = new ArrayList<>();

  public static final String SERIALIZED_NAME_CVE = "cve";
  @SerializedName(SERIALIZED_NAME_CVE)
  private List<String> cve = new ArrayList<>();

  public static final String SERIALIZED_NAME_CWE = "cwe";
  @SerializedName(SERIALIZED_NAME_CWE)
  private List<String> cwe = new ArrayList<>();

  public FindingsInnerMetaVulnRefs() {
  }

  public FindingsInnerMetaVulnRefs bid(List<String> bid) {
    this.bid = bid;
    return this;
  }

  public FindingsInnerMetaVulnRefs addBidItem(String bidItem) {
    if (this.bid == null) {
      this.bid = new ArrayList<>();
    }
    this.bid.add(bidItem);
    return this;
  }

  /**
   * Get bid
   * @return bid
   */
  @javax.annotation.Nullable
  public List<String> getBid() {
    return bid;
  }

  public void setBid(List<String> bid) {
    this.bid = bid;
  }


  public FindingsInnerMetaVulnRefs cpe(List<String> cpe) {
    this.cpe = cpe;
    return this;
  }

  public FindingsInnerMetaVulnRefs addCpeItem(String cpeItem) {
    if (this.cpe == null) {
      this.cpe = new ArrayList<>();
    }
    this.cpe.add(cpeItem);
    return this;
  }

  /**
   * Get cpe
   * @return cpe
   */
  @javax.annotation.Nullable
  public List<String> getCpe() {
    return cpe;
  }

  public void setCpe(List<String> cpe) {
    this.cpe = cpe;
  }


  public FindingsInnerMetaVulnRefs cve(List<String> cve) {
    this.cve = cve;
    return this;
  }

  public FindingsInnerMetaVulnRefs addCveItem(String cveItem) {
    if (this.cve == null) {
      this.cve = new ArrayList<>();
    }
    this.cve.add(cveItem);
    return this;
  }

  /**
   * Get cve
   * @return cve
   */
  @javax.annotation.Nullable
  public List<String> getCve() {
    return cve;
  }

  public void setCve(List<String> cve) {
    this.cve = cve;
  }


  public FindingsInnerMetaVulnRefs cwe(List<String> cwe) {
    this.cwe = cwe;
    return this;
  }

  public FindingsInnerMetaVulnRefs addCweItem(String cweItem) {
    if (this.cwe == null) {
      this.cwe = new ArrayList<>();
    }
    this.cwe.add(cweItem);
    return this;
  }

  /**
   * Get cwe
   * @return cwe
   */
  @javax.annotation.Nullable
  public List<String> getCwe() {
    return cwe;
  }

  public void setCwe(List<String> cwe) {
    this.cwe = cwe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindingsInnerMetaVulnRefs findingsInnerMetaVulnRefs = (FindingsInnerMetaVulnRefs) o;
    return Objects.equals(this.bid, findingsInnerMetaVulnRefs.bid) &&
        Objects.equals(this.cpe, findingsInnerMetaVulnRefs.cpe) &&
        Objects.equals(this.cve, findingsInnerMetaVulnRefs.cve) &&
        Objects.equals(this.cwe, findingsInnerMetaVulnRefs.cwe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bid, cpe, cve, cwe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindingsInnerMetaVulnRefs {\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    cpe: ").append(toIndentedString(cpe)).append("\n");
    sb.append("    cve: ").append(toIndentedString(cve)).append("\n");
    sb.append("    cwe: ").append(toIndentedString(cwe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bid");
    openapiFields.add("cpe");
    openapiFields.add("cve");
    openapiFields.add("cwe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindingsInnerMetaVulnRefs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindingsInnerMetaVulnRefs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindingsInnerMetaVulnRefs is not found in the empty JSON string", FindingsInnerMetaVulnRefs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindingsInnerMetaVulnRefs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindingsInnerMetaVulnRefs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bid") != null && !jsonObj.get("bid").isJsonNull() && !jsonObj.get("bid").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bid` to be an array in the JSON string but got `%s`", jsonObj.get("bid").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cpe") != null && !jsonObj.get("cpe").isJsonNull() && !jsonObj.get("cpe").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpe` to be an array in the JSON string but got `%s`", jsonObj.get("cpe").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cve") != null && !jsonObj.get("cve").isJsonNull() && !jsonObj.get("cve").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cve` to be an array in the JSON string but got `%s`", jsonObj.get("cve").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cwe") != null && !jsonObj.get("cwe").isJsonNull() && !jsonObj.get("cwe").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cwe` to be an array in the JSON string but got `%s`", jsonObj.get("cwe").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindingsInnerMetaVulnRefs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindingsInnerMetaVulnRefs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindingsInnerMetaVulnRefs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindingsInnerMetaVulnRefs.class));

       return (TypeAdapter<T>) new TypeAdapter<FindingsInnerMetaVulnRefs>() {
           @Override
           public void write(JsonWriter out, FindingsInnerMetaVulnRefs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindingsInnerMetaVulnRefs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindingsInnerMetaVulnRefs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindingsInnerMetaVulnRefs
   * @throws IOException if the JSON string is invalid with respect to FindingsInnerMetaVulnRefs
   */
  public static FindingsInnerMetaVulnRefs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindingsInnerMetaVulnRefs.class);
  }

  /**
   * Convert an instance of FindingsInnerMetaVulnRefs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

