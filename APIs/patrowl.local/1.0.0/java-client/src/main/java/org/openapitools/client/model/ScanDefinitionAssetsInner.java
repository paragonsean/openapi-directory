/*
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScanDefinitionAssetsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:15.266004-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScanDefinitionAssetsInner {
  /**
   * Gets or Sets criticity
   */
  @JsonAdapter(CriticityEnum.Adapter.class)
  public enum CriticityEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    CriticityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CriticityEnum fromValue(String value) {
      for (CriticityEnum b : CriticityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CriticityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CriticityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CriticityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CriticityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CriticityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRITICITY = "criticity";
  @SerializedName(SERIALIZED_NAME_CRITICITY)
  private CriticityEnum criticity;

  /**
   * Gets or Sets datatype
   */
  @JsonAdapter(DatatypeEnum.Adapter.class)
  public enum DatatypeEnum {
    IP("ip"),
    
    IP_RANGE("ip-range"),
    
    IP_SUBNET("ip-subnet"),
    
    FQDN("fqdn"),
    
    DOMAIN("domain"),
    
    URL("url"),
    
    KEYWORD("keyword"),
    
    PERSON("person"),
    
    ORGANISATION("organisation"),
    
    PATH("path"),
    
    APPLICATION("application");

    private String value;

    DatatypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatatypeEnum fromValue(String value) {
      for (DatatypeEnum b : DatatypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatatypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatatypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatatypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatatypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatatypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATATYPE = "datatype";
  @SerializedName(SERIALIZED_NAME_DATATYPE)
  private DatatypeEnum datatype;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public ScanDefinitionAssetsInner() {
  }

  public ScanDefinitionAssetsInner criticity(CriticityEnum criticity) {
    this.criticity = criticity;
    return this;
  }

  /**
   * Get criticity
   * @return criticity
   */
  @javax.annotation.Nullable
  public CriticityEnum getCriticity() {
    return criticity;
  }

  public void setCriticity(CriticityEnum criticity) {
    this.criticity = criticity;
  }


  public ScanDefinitionAssetsInner datatype(DatatypeEnum datatype) {
    this.datatype = datatype;
    return this;
  }

  /**
   * Get datatype
   * @return datatype
   */
  @javax.annotation.Nullable
  public DatatypeEnum getDatatype() {
    return datatype;
  }

  public void setDatatype(DatatypeEnum datatype) {
    this.datatype = datatype;
  }


  public ScanDefinitionAssetsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ScanDefinitionAssetsInner value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanDefinitionAssetsInner scanDefinitionAssetsInner = (ScanDefinitionAssetsInner) o;
    return Objects.equals(this.criticity, scanDefinitionAssetsInner.criticity) &&
        Objects.equals(this.datatype, scanDefinitionAssetsInner.datatype) &&
        Objects.equals(this.id, scanDefinitionAssetsInner.id) &&
        Objects.equals(this.value, scanDefinitionAssetsInner.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(criticity, datatype, id, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanDefinitionAssetsInner {\n");
    sb.append("    criticity: ").append(toIndentedString(criticity)).append("\n");
    sb.append("    datatype: ").append(toIndentedString(datatype)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("criticity");
    openapiFields.add("datatype");
    openapiFields.add("id");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScanDefinitionAssetsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScanDefinitionAssetsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScanDefinitionAssetsInner is not found in the empty JSON string", ScanDefinitionAssetsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScanDefinitionAssetsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScanDefinitionAssetsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("criticity") != null && !jsonObj.get("criticity").isJsonNull()) && !jsonObj.get("criticity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `criticity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("criticity").toString()));
      }
      // validate the optional field `criticity`
      if (jsonObj.get("criticity") != null && !jsonObj.get("criticity").isJsonNull()) {
        CriticityEnum.validateJsonElement(jsonObj.get("criticity"));
      }
      if ((jsonObj.get("datatype") != null && !jsonObj.get("datatype").isJsonNull()) && !jsonObj.get("datatype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datatype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datatype").toString()));
      }
      // validate the optional field `datatype`
      if (jsonObj.get("datatype") != null && !jsonObj.get("datatype").isJsonNull()) {
        DatatypeEnum.validateJsonElement(jsonObj.get("datatype"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScanDefinitionAssetsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScanDefinitionAssetsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScanDefinitionAssetsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScanDefinitionAssetsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ScanDefinitionAssetsInner>() {
           @Override
           public void write(JsonWriter out, ScanDefinitionAssetsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScanDefinitionAssetsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScanDefinitionAssetsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScanDefinitionAssetsInner
   * @throws IOException if the JSON string is invalid with respect to ScanDefinitionAssetsInner
   */
  public static ScanDefinitionAssetsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScanDefinitionAssetsInner.class);
  }

  /**
   * Convert an instance of ScanDefinitionAssetsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

