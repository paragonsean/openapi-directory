/*
 * Swagger API-REST for Patrowl Engines
 * This is the API documentation for Patrowl Engines usage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: getsupport@patrowl.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FindingsInnerMetaRisk;
import org.openapitools.client.model.FindingsInnerMetaVulnRefs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FindingsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:15.266004-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FindingsInner {
  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private String confidence;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ISSUE_ID = "issue_id";
  @SerializedName(SERIALIZED_NAME_ISSUE_ID)
  private Integer issueId;

  public static final String SERIALIZED_NAME_META_LINKS = "meta_links";
  @SerializedName(SERIALIZED_NAME_META_LINKS)
  private List<String> metaLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_META_RISK = "meta_risk";
  @SerializedName(SERIALIZED_NAME_META_RISK)
  private FindingsInnerMetaRisk metaRisk;

  public static final String SERIALIZED_NAME_META_TAGS = "meta_tags";
  @SerializedName(SERIALIZED_NAME_META_TAGS)
  private List<String> metaTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_META_VULN_REFS = "meta_vuln_refs";
  @SerializedName(SERIALIZED_NAME_META_VULN_REFS)
  private FindingsInnerMetaVulnRefs metaVulnRefs;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private String raw;

  /**
   * Gets or Sets severity
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFO("info"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  public static final String SERIALIZED_NAME_SOLUTION = "solution";
  @SerializedName(SERIALIZED_NAME_SOLUTION)
  private String solution;

  public static final String SERIALIZED_NAME_TARGET_ADDRS = "target_addrs";
  @SerializedName(SERIALIZED_NAME_TARGET_ADDRS)
  private List<String> targetAddrs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_PROTO = "target_proto";
  @SerializedName(SERIALIZED_NAME_TARGET_PROTO)
  private List<String> targetProto = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public FindingsInner() {
  }

  public FindingsInner confidence(String confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Get confidence
   * @return confidence
   */
  @javax.annotation.Nullable
  public String getConfidence() {
    return confidence;
  }

  public void setConfidence(String confidence) {
    this.confidence = confidence;
  }


  public FindingsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FindingsInner issueId(Integer issueId) {
    this.issueId = issueId;
    return this;
  }

  /**
   * Get issueId
   * @return issueId
   */
  @javax.annotation.Nullable
  public Integer getIssueId() {
    return issueId;
  }

  public void setIssueId(Integer issueId) {
    this.issueId = issueId;
  }


  public FindingsInner metaLinks(List<String> metaLinks) {
    this.metaLinks = metaLinks;
    return this;
  }

  public FindingsInner addMetaLinksItem(String metaLinksItem) {
    if (this.metaLinks == null) {
      this.metaLinks = new ArrayList<>();
    }
    this.metaLinks.add(metaLinksItem);
    return this;
  }

  /**
   * Get metaLinks
   * @return metaLinks
   */
  @javax.annotation.Nullable
  public List<String> getMetaLinks() {
    return metaLinks;
  }

  public void setMetaLinks(List<String> metaLinks) {
    this.metaLinks = metaLinks;
  }


  public FindingsInner metaRisk(FindingsInnerMetaRisk metaRisk) {
    this.metaRisk = metaRisk;
    return this;
  }

  /**
   * Get metaRisk
   * @return metaRisk
   */
  @javax.annotation.Nullable
  public FindingsInnerMetaRisk getMetaRisk() {
    return metaRisk;
  }

  public void setMetaRisk(FindingsInnerMetaRisk metaRisk) {
    this.metaRisk = metaRisk;
  }


  public FindingsInner metaTags(List<String> metaTags) {
    this.metaTags = metaTags;
    return this;
  }

  public FindingsInner addMetaTagsItem(String metaTagsItem) {
    if (this.metaTags == null) {
      this.metaTags = new ArrayList<>();
    }
    this.metaTags.add(metaTagsItem);
    return this;
  }

  /**
   * Get metaTags
   * @return metaTags
   */
  @javax.annotation.Nullable
  public List<String> getMetaTags() {
    return metaTags;
  }

  public void setMetaTags(List<String> metaTags) {
    this.metaTags = metaTags;
  }


  public FindingsInner metaVulnRefs(FindingsInnerMetaVulnRefs metaVulnRefs) {
    this.metaVulnRefs = metaVulnRefs;
    return this;
  }

  /**
   * Get metaVulnRefs
   * @return metaVulnRefs
   */
  @javax.annotation.Nullable
  public FindingsInnerMetaVulnRefs getMetaVulnRefs() {
    return metaVulnRefs;
  }

  public void setMetaVulnRefs(FindingsInnerMetaVulnRefs metaVulnRefs) {
    this.metaVulnRefs = metaVulnRefs;
  }


  public FindingsInner raw(String raw) {
    this.raw = raw;
    return this;
  }

  /**
   * Get raw
   * @return raw
   */
  @javax.annotation.Nullable
  public String getRaw() {
    return raw;
  }

  public void setRaw(String raw) {
    this.raw = raw;
  }


  public FindingsInner severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }


  public FindingsInner solution(String solution) {
    this.solution = solution;
    return this;
  }

  /**
   * Get solution
   * @return solution
   */
  @javax.annotation.Nullable
  public String getSolution() {
    return solution;
  }

  public void setSolution(String solution) {
    this.solution = solution;
  }


  public FindingsInner targetAddrs(List<String> targetAddrs) {
    this.targetAddrs = targetAddrs;
    return this;
  }

  public FindingsInner addTargetAddrsItem(String targetAddrsItem) {
    if (this.targetAddrs == null) {
      this.targetAddrs = new ArrayList<>();
    }
    this.targetAddrs.add(targetAddrsItem);
    return this;
  }

  /**
   * Get targetAddrs
   * @return targetAddrs
   */
  @javax.annotation.Nullable
  public List<String> getTargetAddrs() {
    return targetAddrs;
  }

  public void setTargetAddrs(List<String> targetAddrs) {
    this.targetAddrs = targetAddrs;
  }


  public FindingsInner targetProto(List<String> targetProto) {
    this.targetProto = targetProto;
    return this;
  }

  public FindingsInner addTargetProtoItem(String targetProtoItem) {
    if (this.targetProto == null) {
      this.targetProto = new ArrayList<>();
    }
    this.targetProto.add(targetProtoItem);
    return this;
  }

  /**
   * Get targetProto
   * @return targetProto
   */
  @javax.annotation.Nullable
  public List<String> getTargetProto() {
    return targetProto;
  }

  public void setTargetProto(List<String> targetProto) {
    this.targetProto = targetProto;
  }


  public FindingsInner timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public FindingsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public FindingsInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FindingsInner findingsInner = (FindingsInner) o;
    return Objects.equals(this.confidence, findingsInner.confidence) &&
        Objects.equals(this.description, findingsInner.description) &&
        Objects.equals(this.issueId, findingsInner.issueId) &&
        Objects.equals(this.metaLinks, findingsInner.metaLinks) &&
        Objects.equals(this.metaRisk, findingsInner.metaRisk) &&
        Objects.equals(this.metaTags, findingsInner.metaTags) &&
        Objects.equals(this.metaVulnRefs, findingsInner.metaVulnRefs) &&
        Objects.equals(this.raw, findingsInner.raw) &&
        Objects.equals(this.severity, findingsInner.severity) &&
        Objects.equals(this.solution, findingsInner.solution) &&
        Objects.equals(this.targetAddrs, findingsInner.targetAddrs) &&
        Objects.equals(this.targetProto, findingsInner.targetProto) &&
        Objects.equals(this.timestamp, findingsInner.timestamp) &&
        Objects.equals(this.title, findingsInner.title) &&
        Objects.equals(this.type, findingsInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidence, description, issueId, metaLinks, metaRisk, metaTags, metaVulnRefs, raw, severity, solution, targetAddrs, targetProto, timestamp, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FindingsInner {\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    issueId: ").append(toIndentedString(issueId)).append("\n");
    sb.append("    metaLinks: ").append(toIndentedString(metaLinks)).append("\n");
    sb.append("    metaRisk: ").append(toIndentedString(metaRisk)).append("\n");
    sb.append("    metaTags: ").append(toIndentedString(metaTags)).append("\n");
    sb.append("    metaVulnRefs: ").append(toIndentedString(metaVulnRefs)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    solution: ").append(toIndentedString(solution)).append("\n");
    sb.append("    targetAddrs: ").append(toIndentedString(targetAddrs)).append("\n");
    sb.append("    targetProto: ").append(toIndentedString(targetProto)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidence");
    openapiFields.add("description");
    openapiFields.add("issue_id");
    openapiFields.add("meta_links");
    openapiFields.add("meta_risk");
    openapiFields.add("meta_tags");
    openapiFields.add("meta_vuln_refs");
    openapiFields.add("raw");
    openapiFields.add("severity");
    openapiFields.add("solution");
    openapiFields.add("target_addrs");
    openapiFields.add("target_proto");
    openapiFields.add("timestamp");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FindingsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FindingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FindingsInner is not found in the empty JSON string", FindingsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FindingsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FindingsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) && !jsonObj.get("confidence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confidence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confidence").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meta_links") != null && !jsonObj.get("meta_links").isJsonNull() && !jsonObj.get("meta_links").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_links` to be an array in the JSON string but got `%s`", jsonObj.get("meta_links").toString()));
      }
      // validate the optional field `meta_risk`
      if (jsonObj.get("meta_risk") != null && !jsonObj.get("meta_risk").isJsonNull()) {
        FindingsInnerMetaRisk.validateJsonElement(jsonObj.get("meta_risk"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meta_tags") != null && !jsonObj.get("meta_tags").isJsonNull() && !jsonObj.get("meta_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_tags` to be an array in the JSON string but got `%s`", jsonObj.get("meta_tags").toString()));
      }
      // validate the optional field `meta_vuln_refs`
      if (jsonObj.get("meta_vuln_refs") != null && !jsonObj.get("meta_vuln_refs").isJsonNull()) {
        FindingsInnerMetaVulnRefs.validateJsonElement(jsonObj.get("meta_vuln_refs"));
      }
      if ((jsonObj.get("raw") != null && !jsonObj.get("raw").isJsonNull()) && !jsonObj.get("raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("solution") != null && !jsonObj.get("solution").isJsonNull()) && !jsonObj.get("solution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `solution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("solution").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_addrs") != null && !jsonObj.get("target_addrs").isJsonNull() && !jsonObj.get("target_addrs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_addrs` to be an array in the JSON string but got `%s`", jsonObj.get("target_addrs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_proto") != null && !jsonObj.get("target_proto").isJsonNull() && !jsonObj.get("target_proto").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_proto` to be an array in the JSON string but got `%s`", jsonObj.get("target_proto").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FindingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FindingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FindingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FindingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<FindingsInner>() {
           @Override
           public void write(JsonWriter out, FindingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FindingsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FindingsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FindingsInner
   * @throws IOException if the JSON string is invalid with respect to FindingsInner
   */
  public static FindingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FindingsInner.class);
  }

  /**
   * Convert an instance of FindingsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

