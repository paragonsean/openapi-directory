# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_2fa: bool=None, admin_group_ids: List[int]=None, allowed_ips: str=None, api_keys_count: int=None, attachments_permission: bool=None, authenticate_until: datetime=None, authentication_method: str=None, avatar_url: str=None, billing_permission: bool=None, bypass_inactive_disable: bool=None, bypass_site_allowed_ips: bool=None, company: str=None, created_at: datetime=None, dav_permission: bool=None, days_remaining_until_password_expire: int=None, disabled: bool=None, email: str=None, externally_managed: bool=None, first_login_at: datetime=None, ftp_permission: bool=None, group_ids: str=None, header_text: str=None, id: int=None, language: str=None, last_active_at: datetime=None, last_api_use_at: datetime=None, last_dav_login_at: datetime=None, last_desktop_login_at: datetime=None, last_ftp_login_at: datetime=None, last_login_at: datetime=None, last_protocol_cipher: str=None, last_restapi_login_at: datetime=None, last_sftp_login_at: datetime=None, last_web_login_at: datetime=None, lockout_expires: datetime=None, name: str=None, notes: str=None, notification_daily_send_time: int=None, office_integration_enabled: bool=None, password_expire_at: datetime=None, password_expired: bool=None, password_set_at: datetime=None, password_validity_days: int=None, public_keys_count: int=None, receive_admin_alerts: bool=None, require_2fa: str=None, require_password_change: bool=None, restapi_permission: bool=None, self_managed: bool=None, sftp_permission: bool=None, site_admin: bool=None, skip_welcome_screen: bool=None, ssl_required: str=None, sso_strategy_id: int=None, subscribe_to_newsletter: bool=None, time_zone: str=None, type_of_2fa: str=None, user_root: str=None, username: str=None):
        """UserEntity - a model defined in OpenAPI

        :param active_2fa: The active_2fa of this UserEntity.
        :param admin_group_ids: The admin_group_ids of this UserEntity.
        :param allowed_ips: The allowed_ips of this UserEntity.
        :param api_keys_count: The api_keys_count of this UserEntity.
        :param attachments_permission: The attachments_permission of this UserEntity.
        :param authenticate_until: The authenticate_until of this UserEntity.
        :param authentication_method: The authentication_method of this UserEntity.
        :param avatar_url: The avatar_url of this UserEntity.
        :param billing_permission: The billing_permission of this UserEntity.
        :param bypass_inactive_disable: The bypass_inactive_disable of this UserEntity.
        :param bypass_site_allowed_ips: The bypass_site_allowed_ips of this UserEntity.
        :param company: The company of this UserEntity.
        :param created_at: The created_at of this UserEntity.
        :param dav_permission: The dav_permission of this UserEntity.
        :param days_remaining_until_password_expire: The days_remaining_until_password_expire of this UserEntity.
        :param disabled: The disabled of this UserEntity.
        :param email: The email of this UserEntity.
        :param externally_managed: The externally_managed of this UserEntity.
        :param first_login_at: The first_login_at of this UserEntity.
        :param ftp_permission: The ftp_permission of this UserEntity.
        :param group_ids: The group_ids of this UserEntity.
        :param header_text: The header_text of this UserEntity.
        :param id: The id of this UserEntity.
        :param language: The language of this UserEntity.
        :param last_active_at: The last_active_at of this UserEntity.
        :param last_api_use_at: The last_api_use_at of this UserEntity.
        :param last_dav_login_at: The last_dav_login_at of this UserEntity.
        :param last_desktop_login_at: The last_desktop_login_at of this UserEntity.
        :param last_ftp_login_at: The last_ftp_login_at of this UserEntity.
        :param last_login_at: The last_login_at of this UserEntity.
        :param last_protocol_cipher: The last_protocol_cipher of this UserEntity.
        :param last_restapi_login_at: The last_restapi_login_at of this UserEntity.
        :param last_sftp_login_at: The last_sftp_login_at of this UserEntity.
        :param last_web_login_at: The last_web_login_at of this UserEntity.
        :param lockout_expires: The lockout_expires of this UserEntity.
        :param name: The name of this UserEntity.
        :param notes: The notes of this UserEntity.
        :param notification_daily_send_time: The notification_daily_send_time of this UserEntity.
        :param office_integration_enabled: The office_integration_enabled of this UserEntity.
        :param password_expire_at: The password_expire_at of this UserEntity.
        :param password_expired: The password_expired of this UserEntity.
        :param password_set_at: The password_set_at of this UserEntity.
        :param password_validity_days: The password_validity_days of this UserEntity.
        :param public_keys_count: The public_keys_count of this UserEntity.
        :param receive_admin_alerts: The receive_admin_alerts of this UserEntity.
        :param require_2fa: The require_2fa of this UserEntity.
        :param require_password_change: The require_password_change of this UserEntity.
        :param restapi_permission: The restapi_permission of this UserEntity.
        :param self_managed: The self_managed of this UserEntity.
        :param sftp_permission: The sftp_permission of this UserEntity.
        :param site_admin: The site_admin of this UserEntity.
        :param skip_welcome_screen: The skip_welcome_screen of this UserEntity.
        :param ssl_required: The ssl_required of this UserEntity.
        :param sso_strategy_id: The sso_strategy_id of this UserEntity.
        :param subscribe_to_newsletter: The subscribe_to_newsletter of this UserEntity.
        :param time_zone: The time_zone of this UserEntity.
        :param type_of_2fa: The type_of_2fa of this UserEntity.
        :param user_root: The user_root of this UserEntity.
        :param username: The username of this UserEntity.
        """
        self.openapi_types = {
            'active_2fa': bool,
            'admin_group_ids': List[int],
            'allowed_ips': str,
            'api_keys_count': int,
            'attachments_permission': bool,
            'authenticate_until': datetime,
            'authentication_method': str,
            'avatar_url': str,
            'billing_permission': bool,
            'bypass_inactive_disable': bool,
            'bypass_site_allowed_ips': bool,
            'company': str,
            'created_at': datetime,
            'dav_permission': bool,
            'days_remaining_until_password_expire': int,
            'disabled': bool,
            'email': str,
            'externally_managed': bool,
            'first_login_at': datetime,
            'ftp_permission': bool,
            'group_ids': str,
            'header_text': str,
            'id': int,
            'language': str,
            'last_active_at': datetime,
            'last_api_use_at': datetime,
            'last_dav_login_at': datetime,
            'last_desktop_login_at': datetime,
            'last_ftp_login_at': datetime,
            'last_login_at': datetime,
            'last_protocol_cipher': str,
            'last_restapi_login_at': datetime,
            'last_sftp_login_at': datetime,
            'last_web_login_at': datetime,
            'lockout_expires': datetime,
            'name': str,
            'notes': str,
            'notification_daily_send_time': int,
            'office_integration_enabled': bool,
            'password_expire_at': datetime,
            'password_expired': bool,
            'password_set_at': datetime,
            'password_validity_days': int,
            'public_keys_count': int,
            'receive_admin_alerts': bool,
            'require_2fa': str,
            'require_password_change': bool,
            'restapi_permission': bool,
            'self_managed': bool,
            'sftp_permission': bool,
            'site_admin': bool,
            'skip_welcome_screen': bool,
            'ssl_required': str,
            'sso_strategy_id': int,
            'subscribe_to_newsletter': bool,
            'time_zone': str,
            'type_of_2fa': str,
            'user_root': str,
            'username': str
        }

        self.attribute_map = {
            'active_2fa': 'active_2fa',
            'admin_group_ids': 'admin_group_ids',
            'allowed_ips': 'allowed_ips',
            'api_keys_count': 'api_keys_count',
            'attachments_permission': 'attachments_permission',
            'authenticate_until': 'authenticate_until',
            'authentication_method': 'authentication_method',
            'avatar_url': 'avatar_url',
            'billing_permission': 'billing_permission',
            'bypass_inactive_disable': 'bypass_inactive_disable',
            'bypass_site_allowed_ips': 'bypass_site_allowed_ips',
            'company': 'company',
            'created_at': 'created_at',
            'dav_permission': 'dav_permission',
            'days_remaining_until_password_expire': 'days_remaining_until_password_expire',
            'disabled': 'disabled',
            'email': 'email',
            'externally_managed': 'externally_managed',
            'first_login_at': 'first_login_at',
            'ftp_permission': 'ftp_permission',
            'group_ids': 'group_ids',
            'header_text': 'header_text',
            'id': 'id',
            'language': 'language',
            'last_active_at': 'last_active_at',
            'last_api_use_at': 'last_api_use_at',
            'last_dav_login_at': 'last_dav_login_at',
            'last_desktop_login_at': 'last_desktop_login_at',
            'last_ftp_login_at': 'last_ftp_login_at',
            'last_login_at': 'last_login_at',
            'last_protocol_cipher': 'last_protocol_cipher',
            'last_restapi_login_at': 'last_restapi_login_at',
            'last_sftp_login_at': 'last_sftp_login_at',
            'last_web_login_at': 'last_web_login_at',
            'lockout_expires': 'lockout_expires',
            'name': 'name',
            'notes': 'notes',
            'notification_daily_send_time': 'notification_daily_send_time',
            'office_integration_enabled': 'office_integration_enabled',
            'password_expire_at': 'password_expire_at',
            'password_expired': 'password_expired',
            'password_set_at': 'password_set_at',
            'password_validity_days': 'password_validity_days',
            'public_keys_count': 'public_keys_count',
            'receive_admin_alerts': 'receive_admin_alerts',
            'require_2fa': 'require_2fa',
            'require_password_change': 'require_password_change',
            'restapi_permission': 'restapi_permission',
            'self_managed': 'self_managed',
            'sftp_permission': 'sftp_permission',
            'site_admin': 'site_admin',
            'skip_welcome_screen': 'skip_welcome_screen',
            'ssl_required': 'ssl_required',
            'sso_strategy_id': 'sso_strategy_id',
            'subscribe_to_newsletter': 'subscribe_to_newsletter',
            'time_zone': 'time_zone',
            'type_of_2fa': 'type_of_2fa',
            'user_root': 'user_root',
            'username': 'username'
        }

        self._active_2fa = active_2fa
        self._admin_group_ids = admin_group_ids
        self._allowed_ips = allowed_ips
        self._api_keys_count = api_keys_count
        self._attachments_permission = attachments_permission
        self._authenticate_until = authenticate_until
        self._authentication_method = authentication_method
        self._avatar_url = avatar_url
        self._billing_permission = billing_permission
        self._bypass_inactive_disable = bypass_inactive_disable
        self._bypass_site_allowed_ips = bypass_site_allowed_ips
        self._company = company
        self._created_at = created_at
        self._dav_permission = dav_permission
        self._days_remaining_until_password_expire = days_remaining_until_password_expire
        self._disabled = disabled
        self._email = email
        self._externally_managed = externally_managed
        self._first_login_at = first_login_at
        self._ftp_permission = ftp_permission
        self._group_ids = group_ids
        self._header_text = header_text
        self._id = id
        self._language = language
        self._last_active_at = last_active_at
        self._last_api_use_at = last_api_use_at
        self._last_dav_login_at = last_dav_login_at
        self._last_desktop_login_at = last_desktop_login_at
        self._last_ftp_login_at = last_ftp_login_at
        self._last_login_at = last_login_at
        self._last_protocol_cipher = last_protocol_cipher
        self._last_restapi_login_at = last_restapi_login_at
        self._last_sftp_login_at = last_sftp_login_at
        self._last_web_login_at = last_web_login_at
        self._lockout_expires = lockout_expires
        self._name = name
        self._notes = notes
        self._notification_daily_send_time = notification_daily_send_time
        self._office_integration_enabled = office_integration_enabled
        self._password_expire_at = password_expire_at
        self._password_expired = password_expired
        self._password_set_at = password_set_at
        self._password_validity_days = password_validity_days
        self._public_keys_count = public_keys_count
        self._receive_admin_alerts = receive_admin_alerts
        self._require_2fa = require_2fa
        self._require_password_change = require_password_change
        self._restapi_permission = restapi_permission
        self._self_managed = self_managed
        self._sftp_permission = sftp_permission
        self._site_admin = site_admin
        self._skip_welcome_screen = skip_welcome_screen
        self._ssl_required = ssl_required
        self._sso_strategy_id = sso_strategy_id
        self._subscribe_to_newsletter = subscribe_to_newsletter
        self._time_zone = time_zone
        self._type_of_2fa = type_of_2fa
        self._user_root = user_root
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserEntity of this UserEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_2fa(self):
        """Gets the active_2fa of this UserEntity.

        Is 2fa active for the user?

        :return: The active_2fa of this UserEntity.
        :rtype: bool
        """
        return self._active_2fa

    @active_2fa.setter
    def active_2fa(self, active_2fa):
        """Sets the active_2fa of this UserEntity.

        Is 2fa active for the user?

        :param active_2fa: The active_2fa of this UserEntity.
        :type active_2fa: bool
        """

        self._active_2fa = active_2fa

    @property
    def admin_group_ids(self):
        """Gets the admin_group_ids of this UserEntity.

        List of group IDs of which this user is an administrator

        :return: The admin_group_ids of this UserEntity.
        :rtype: List[int]
        """
        return self._admin_group_ids

    @admin_group_ids.setter
    def admin_group_ids(self, admin_group_ids):
        """Sets the admin_group_ids of this UserEntity.

        List of group IDs of which this user is an administrator

        :param admin_group_ids: The admin_group_ids of this UserEntity.
        :type admin_group_ids: List[int]
        """

        self._admin_group_ids = admin_group_ids

    @property
    def allowed_ips(self):
        """Gets the allowed_ips of this UserEntity.

        A list of allowed IPs if applicable.  Newline delimited

        :return: The allowed_ips of this UserEntity.
        :rtype: str
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips):
        """Sets the allowed_ips of this UserEntity.

        A list of allowed IPs if applicable.  Newline delimited

        :param allowed_ips: The allowed_ips of this UserEntity.
        :type allowed_ips: str
        """

        self._allowed_ips = allowed_ips

    @property
    def api_keys_count(self):
        """Gets the api_keys_count of this UserEntity.

        Number of api keys associated with this user

        :return: The api_keys_count of this UserEntity.
        :rtype: int
        """
        return self._api_keys_count

    @api_keys_count.setter
    def api_keys_count(self, api_keys_count):
        """Sets the api_keys_count of this UserEntity.

        Number of api keys associated with this user

        :param api_keys_count: The api_keys_count of this UserEntity.
        :type api_keys_count: int
        """

        self._api_keys_count = api_keys_count

    @property
    def attachments_permission(self):
        """Gets the attachments_permission of this UserEntity.

        DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.

        :return: The attachments_permission of this UserEntity.
        :rtype: bool
        """
        return self._attachments_permission

    @attachments_permission.setter
    def attachments_permission(self, attachments_permission):
        """Sets the attachments_permission of this UserEntity.

        DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.

        :param attachments_permission: The attachments_permission of this UserEntity.
        :type attachments_permission: bool
        """

        self._attachments_permission = attachments_permission

    @property
    def authenticate_until(self):
        """Gets the authenticate_until of this UserEntity.

        Scheduled Date/Time at which user will be deactivated

        :return: The authenticate_until of this UserEntity.
        :rtype: datetime
        """
        return self._authenticate_until

    @authenticate_until.setter
    def authenticate_until(self, authenticate_until):
        """Sets the authenticate_until of this UserEntity.

        Scheduled Date/Time at which user will be deactivated

        :param authenticate_until: The authenticate_until of this UserEntity.
        :type authenticate_until: datetime
        """

        self._authenticate_until = authenticate_until

    @property
    def authentication_method(self):
        """Gets the authentication_method of this UserEntity.

        How is this user authenticated?

        :return: The authentication_method of this UserEntity.
        :rtype: str
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this UserEntity.

        How is this user authenticated?

        :param authentication_method: The authentication_method of this UserEntity.
        :type authentication_method: str
        """
        allowed_values = ["password", "unused_former_ldap", "sso", "none", "email_signup", "password_with_imported_hash"]  # noqa: E501
        if authentication_method not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_method` ({0}), must be one of {1}"
                .format(authentication_method, allowed_values)
            )

        self._authentication_method = authentication_method

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserEntity.

        URL holding the user's avatar

        :return: The avatar_url of this UserEntity.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserEntity.

        URL holding the user's avatar

        :param avatar_url: The avatar_url of this UserEntity.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def billing_permission(self):
        """Gets the billing_permission of this UserEntity.

        Allow this user to perform operations on the account, payments, and invoices?

        :return: The billing_permission of this UserEntity.
        :rtype: bool
        """
        return self._billing_permission

    @billing_permission.setter
    def billing_permission(self, billing_permission):
        """Sets the billing_permission of this UserEntity.

        Allow this user to perform operations on the account, payments, and invoices?

        :param billing_permission: The billing_permission of this UserEntity.
        :type billing_permission: bool
        """

        self._billing_permission = billing_permission

    @property
    def bypass_inactive_disable(self):
        """Gets the bypass_inactive_disable of this UserEntity.

        Exempt this user from being disabled based on inactivity?

        :return: The bypass_inactive_disable of this UserEntity.
        :rtype: bool
        """
        return self._bypass_inactive_disable

    @bypass_inactive_disable.setter
    def bypass_inactive_disable(self, bypass_inactive_disable):
        """Sets the bypass_inactive_disable of this UserEntity.

        Exempt this user from being disabled based on inactivity?

        :param bypass_inactive_disable: The bypass_inactive_disable of this UserEntity.
        :type bypass_inactive_disable: bool
        """

        self._bypass_inactive_disable = bypass_inactive_disable

    @property
    def bypass_site_allowed_ips(self):
        """Gets the bypass_site_allowed_ips of this UserEntity.

        Allow this user to skip site-wide IP blacklists?

        :return: The bypass_site_allowed_ips of this UserEntity.
        :rtype: bool
        """
        return self._bypass_site_allowed_ips

    @bypass_site_allowed_ips.setter
    def bypass_site_allowed_ips(self, bypass_site_allowed_ips):
        """Sets the bypass_site_allowed_ips of this UserEntity.

        Allow this user to skip site-wide IP blacklists?

        :param bypass_site_allowed_ips: The bypass_site_allowed_ips of this UserEntity.
        :type bypass_site_allowed_ips: bool
        """

        self._bypass_site_allowed_ips = bypass_site_allowed_ips

    @property
    def company(self):
        """Gets the company of this UserEntity.

        User's company

        :return: The company of this UserEntity.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserEntity.

        User's company

        :param company: The company of this UserEntity.
        :type company: str
        """

        self._company = company

    @property
    def created_at(self):
        """Gets the created_at of this UserEntity.

        When this user was created

        :return: The created_at of this UserEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserEntity.

        When this user was created

        :param created_at: The created_at of this UserEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dav_permission(self):
        """Gets the dav_permission of this UserEntity.

        Can the user connect with WebDAV?

        :return: The dav_permission of this UserEntity.
        :rtype: bool
        """
        return self._dav_permission

    @dav_permission.setter
    def dav_permission(self, dav_permission):
        """Sets the dav_permission of this UserEntity.

        Can the user connect with WebDAV?

        :param dav_permission: The dav_permission of this UserEntity.
        :type dav_permission: bool
        """

        self._dav_permission = dav_permission

    @property
    def days_remaining_until_password_expire(self):
        """Gets the days_remaining_until_password_expire of this UserEntity.

        Number of days remaining until password expires

        :return: The days_remaining_until_password_expire of this UserEntity.
        :rtype: int
        """
        return self._days_remaining_until_password_expire

    @days_remaining_until_password_expire.setter
    def days_remaining_until_password_expire(self, days_remaining_until_password_expire):
        """Sets the days_remaining_until_password_expire of this UserEntity.

        Number of days remaining until password expires

        :param days_remaining_until_password_expire: The days_remaining_until_password_expire of this UserEntity.
        :type days_remaining_until_password_expire: int
        """

        self._days_remaining_until_password_expire = days_remaining_until_password_expire

    @property
    def disabled(self):
        """Gets the disabled of this UserEntity.

        Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.

        :return: The disabled of this UserEntity.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UserEntity.

        Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.

        :param disabled: The disabled of this UserEntity.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def email(self):
        """Gets the email of this UserEntity.

        User email address

        :return: The email of this UserEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserEntity.

        User email address

        :param email: The email of this UserEntity.
        :type email: str
        """

        self._email = email

    @property
    def externally_managed(self):
        """Gets the externally_managed of this UserEntity.

        Is this user managed by a SsoStrategy?

        :return: The externally_managed of this UserEntity.
        :rtype: bool
        """
        return self._externally_managed

    @externally_managed.setter
    def externally_managed(self, externally_managed):
        """Sets the externally_managed of this UserEntity.

        Is this user managed by a SsoStrategy?

        :param externally_managed: The externally_managed of this UserEntity.
        :type externally_managed: bool
        """

        self._externally_managed = externally_managed

    @property
    def first_login_at(self):
        """Gets the first_login_at of this UserEntity.

        User's first login time

        :return: The first_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._first_login_at

    @first_login_at.setter
    def first_login_at(self, first_login_at):
        """Sets the first_login_at of this UserEntity.

        User's first login time

        :param first_login_at: The first_login_at of this UserEntity.
        :type first_login_at: datetime
        """

        self._first_login_at = first_login_at

    @property
    def ftp_permission(self):
        """Gets the ftp_permission of this UserEntity.

        Can the user access with FTP/FTPS?

        :return: The ftp_permission of this UserEntity.
        :rtype: bool
        """
        return self._ftp_permission

    @ftp_permission.setter
    def ftp_permission(self, ftp_permission):
        """Sets the ftp_permission of this UserEntity.

        Can the user access with FTP/FTPS?

        :param ftp_permission: The ftp_permission of this UserEntity.
        :type ftp_permission: bool
        """

        self._ftp_permission = ftp_permission

    @property
    def group_ids(self):
        """Gets the group_ids of this UserEntity.

        Comma-separated list of group IDs of which this user is a member

        :return: The group_ids of this UserEntity.
        :rtype: str
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this UserEntity.

        Comma-separated list of group IDs of which this user is a member

        :param group_ids: The group_ids of this UserEntity.
        :type group_ids: str
        """

        self._group_ids = group_ids

    @property
    def header_text(self):
        """Gets the header_text of this UserEntity.

        Text to display to the user in the header of the UI

        :return: The header_text of this UserEntity.
        :rtype: str
        """
        return self._header_text

    @header_text.setter
    def header_text(self, header_text):
        """Sets the header_text of this UserEntity.

        Text to display to the user in the header of the UI

        :param header_text: The header_text of this UserEntity.
        :type header_text: str
        """

        self._header_text = header_text

    @property
    def id(self):
        """Gets the id of this UserEntity.

        User ID

        :return: The id of this UserEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserEntity.

        User ID

        :param id: The id of this UserEntity.
        :type id: int
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this UserEntity.

        Preferred language

        :return: The language of this UserEntity.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserEntity.

        Preferred language

        :param language: The language of this UserEntity.
        :type language: str
        """

        self._language = language

    @property
    def last_active_at(self):
        """Gets the last_active_at of this UserEntity.

        User's most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation

        :return: The last_active_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_active_at

    @last_active_at.setter
    def last_active_at(self, last_active_at):
        """Sets the last_active_at of this UserEntity.

        User's most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation

        :param last_active_at: The last_active_at of this UserEntity.
        :type last_active_at: datetime
        """

        self._last_active_at = last_active_at

    @property
    def last_api_use_at(self):
        """Gets the last_api_use_at of this UserEntity.

        User's most recent API use time

        :return: The last_api_use_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_api_use_at

    @last_api_use_at.setter
    def last_api_use_at(self, last_api_use_at):
        """Sets the last_api_use_at of this UserEntity.

        User's most recent API use time

        :param last_api_use_at: The last_api_use_at of this UserEntity.
        :type last_api_use_at: datetime
        """

        self._last_api_use_at = last_api_use_at

    @property
    def last_dav_login_at(self):
        """Gets the last_dav_login_at of this UserEntity.

        User's most recent login time via WebDAV

        :return: The last_dav_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_dav_login_at

    @last_dav_login_at.setter
    def last_dav_login_at(self, last_dav_login_at):
        """Sets the last_dav_login_at of this UserEntity.

        User's most recent login time via WebDAV

        :param last_dav_login_at: The last_dav_login_at of this UserEntity.
        :type last_dav_login_at: datetime
        """

        self._last_dav_login_at = last_dav_login_at

    @property
    def last_desktop_login_at(self):
        """Gets the last_desktop_login_at of this UserEntity.

        User's most recent login time via Desktop app

        :return: The last_desktop_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_desktop_login_at

    @last_desktop_login_at.setter
    def last_desktop_login_at(self, last_desktop_login_at):
        """Sets the last_desktop_login_at of this UserEntity.

        User's most recent login time via Desktop app

        :param last_desktop_login_at: The last_desktop_login_at of this UserEntity.
        :type last_desktop_login_at: datetime
        """

        self._last_desktop_login_at = last_desktop_login_at

    @property
    def last_ftp_login_at(self):
        """Gets the last_ftp_login_at of this UserEntity.

        User's most recent login time via FTP

        :return: The last_ftp_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_ftp_login_at

    @last_ftp_login_at.setter
    def last_ftp_login_at(self, last_ftp_login_at):
        """Sets the last_ftp_login_at of this UserEntity.

        User's most recent login time via FTP

        :param last_ftp_login_at: The last_ftp_login_at of this UserEntity.
        :type last_ftp_login_at: datetime
        """

        self._last_ftp_login_at = last_ftp_login_at

    @property
    def last_login_at(self):
        """Gets the last_login_at of this UserEntity.

        User's most recent login time via any protocol

        :return: The last_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_login_at

    @last_login_at.setter
    def last_login_at(self, last_login_at):
        """Sets the last_login_at of this UserEntity.

        User's most recent login time via any protocol

        :param last_login_at: The last_login_at of this UserEntity.
        :type last_login_at: datetime
        """

        self._last_login_at = last_login_at

    @property
    def last_protocol_cipher(self):
        """Gets the last_protocol_cipher of this UserEntity.

        The most recent protocol and cipher used

        :return: The last_protocol_cipher of this UserEntity.
        :rtype: str
        """
        return self._last_protocol_cipher

    @last_protocol_cipher.setter
    def last_protocol_cipher(self, last_protocol_cipher):
        """Sets the last_protocol_cipher of this UserEntity.

        The most recent protocol and cipher used

        :param last_protocol_cipher: The last_protocol_cipher of this UserEntity.
        :type last_protocol_cipher: str
        """

        self._last_protocol_cipher = last_protocol_cipher

    @property
    def last_restapi_login_at(self):
        """Gets the last_restapi_login_at of this UserEntity.

        User's most recent login time via Rest API

        :return: The last_restapi_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_restapi_login_at

    @last_restapi_login_at.setter
    def last_restapi_login_at(self, last_restapi_login_at):
        """Sets the last_restapi_login_at of this UserEntity.

        User's most recent login time via Rest API

        :param last_restapi_login_at: The last_restapi_login_at of this UserEntity.
        :type last_restapi_login_at: datetime
        """

        self._last_restapi_login_at = last_restapi_login_at

    @property
    def last_sftp_login_at(self):
        """Gets the last_sftp_login_at of this UserEntity.

        User's most recent login time via SFTP

        :return: The last_sftp_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_sftp_login_at

    @last_sftp_login_at.setter
    def last_sftp_login_at(self, last_sftp_login_at):
        """Sets the last_sftp_login_at of this UserEntity.

        User's most recent login time via SFTP

        :param last_sftp_login_at: The last_sftp_login_at of this UserEntity.
        :type last_sftp_login_at: datetime
        """

        self._last_sftp_login_at = last_sftp_login_at

    @property
    def last_web_login_at(self):
        """Gets the last_web_login_at of this UserEntity.

        User's most recent login time via web

        :return: The last_web_login_at of this UserEntity.
        :rtype: datetime
        """
        return self._last_web_login_at

    @last_web_login_at.setter
    def last_web_login_at(self, last_web_login_at):
        """Sets the last_web_login_at of this UserEntity.

        User's most recent login time via web

        :param last_web_login_at: The last_web_login_at of this UserEntity.
        :type last_web_login_at: datetime
        """

        self._last_web_login_at = last_web_login_at

    @property
    def lockout_expires(self):
        """Gets the lockout_expires of this UserEntity.

        Time in the future that the user will no longer be locked out if applicable

        :return: The lockout_expires of this UserEntity.
        :rtype: datetime
        """
        return self._lockout_expires

    @lockout_expires.setter
    def lockout_expires(self, lockout_expires):
        """Sets the lockout_expires of this UserEntity.

        Time in the future that the user will no longer be locked out if applicable

        :param lockout_expires: The lockout_expires of this UserEntity.
        :type lockout_expires: datetime
        """

        self._lockout_expires = lockout_expires

    @property
    def name(self):
        """Gets the name of this UserEntity.

        User's full name

        :return: The name of this UserEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserEntity.

        User's full name

        :param name: The name of this UserEntity.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this UserEntity.

        Any internal notes on the user

        :return: The notes of this UserEntity.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UserEntity.

        Any internal notes on the user

        :param notes: The notes of this UserEntity.
        :type notes: str
        """

        self._notes = notes

    @property
    def notification_daily_send_time(self):
        """Gets the notification_daily_send_time of this UserEntity.

        Hour of the day at which daily notifications should be sent. Can be in range 0 to 23

        :return: The notification_daily_send_time of this UserEntity.
        :rtype: int
        """
        return self._notification_daily_send_time

    @notification_daily_send_time.setter
    def notification_daily_send_time(self, notification_daily_send_time):
        """Sets the notification_daily_send_time of this UserEntity.

        Hour of the day at which daily notifications should be sent. Can be in range 0 to 23

        :param notification_daily_send_time: The notification_daily_send_time of this UserEntity.
        :type notification_daily_send_time: int
        """

        self._notification_daily_send_time = notification_daily_send_time

    @property
    def office_integration_enabled(self):
        """Gets the office_integration_enabled of this UserEntity.

        Enable integration with Office for the web?

        :return: The office_integration_enabled of this UserEntity.
        :rtype: bool
        """
        return self._office_integration_enabled

    @office_integration_enabled.setter
    def office_integration_enabled(self, office_integration_enabled):
        """Sets the office_integration_enabled of this UserEntity.

        Enable integration with Office for the web?

        :param office_integration_enabled: The office_integration_enabled of this UserEntity.
        :type office_integration_enabled: bool
        """

        self._office_integration_enabled = office_integration_enabled

    @property
    def password_expire_at(self):
        """Gets the password_expire_at of this UserEntity.

        Password expiration datetime

        :return: The password_expire_at of this UserEntity.
        :rtype: datetime
        """
        return self._password_expire_at

    @password_expire_at.setter
    def password_expire_at(self, password_expire_at):
        """Sets the password_expire_at of this UserEntity.

        Password expiration datetime

        :param password_expire_at: The password_expire_at of this UserEntity.
        :type password_expire_at: datetime
        """

        self._password_expire_at = password_expire_at

    @property
    def password_expired(self):
        """Gets the password_expired of this UserEntity.

        Is user's password expired?

        :return: The password_expired of this UserEntity.
        :rtype: bool
        """
        return self._password_expired

    @password_expired.setter
    def password_expired(self, password_expired):
        """Sets the password_expired of this UserEntity.

        Is user's password expired?

        :param password_expired: The password_expired of this UserEntity.
        :type password_expired: bool
        """

        self._password_expired = password_expired

    @property
    def password_set_at(self):
        """Gets the password_set_at of this UserEntity.

        Last time the user's password was set

        :return: The password_set_at of this UserEntity.
        :rtype: datetime
        """
        return self._password_set_at

    @password_set_at.setter
    def password_set_at(self, password_set_at):
        """Sets the password_set_at of this UserEntity.

        Last time the user's password was set

        :param password_set_at: The password_set_at of this UserEntity.
        :type password_set_at: datetime
        """

        self._password_set_at = password_set_at

    @property
    def password_validity_days(self):
        """Gets the password_validity_days of this UserEntity.

        Number of days to allow user to use the same password

        :return: The password_validity_days of this UserEntity.
        :rtype: int
        """
        return self._password_validity_days

    @password_validity_days.setter
    def password_validity_days(self, password_validity_days):
        """Sets the password_validity_days of this UserEntity.

        Number of days to allow user to use the same password

        :param password_validity_days: The password_validity_days of this UserEntity.
        :type password_validity_days: int
        """

        self._password_validity_days = password_validity_days

    @property
    def public_keys_count(self):
        """Gets the public_keys_count of this UserEntity.

        Number of public keys associated with this user

        :return: The public_keys_count of this UserEntity.
        :rtype: int
        """
        return self._public_keys_count

    @public_keys_count.setter
    def public_keys_count(self, public_keys_count):
        """Sets the public_keys_count of this UserEntity.

        Number of public keys associated with this user

        :param public_keys_count: The public_keys_count of this UserEntity.
        :type public_keys_count: int
        """

        self._public_keys_count = public_keys_count

    @property
    def receive_admin_alerts(self):
        """Gets the receive_admin_alerts of this UserEntity.

        Should the user receive admin alerts such a certificate expiration notifications and overages?

        :return: The receive_admin_alerts of this UserEntity.
        :rtype: bool
        """
        return self._receive_admin_alerts

    @receive_admin_alerts.setter
    def receive_admin_alerts(self, receive_admin_alerts):
        """Sets the receive_admin_alerts of this UserEntity.

        Should the user receive admin alerts such a certificate expiration notifications and overages?

        :param receive_admin_alerts: The receive_admin_alerts of this UserEntity.
        :type receive_admin_alerts: bool
        """

        self._receive_admin_alerts = receive_admin_alerts

    @property
    def require_2fa(self):
        """Gets the require_2fa of this UserEntity.

        2FA required setting

        :return: The require_2fa of this UserEntity.
        :rtype: str
        """
        return self._require_2fa

    @require_2fa.setter
    def require_2fa(self, require_2fa):
        """Sets the require_2fa of this UserEntity.

        2FA required setting

        :param require_2fa: The require_2fa of this UserEntity.
        :type require_2fa: str
        """
        allowed_values = ["use_system_setting", "always_require", "never_require"]  # noqa: E501
        if require_2fa not in allowed_values:
            raise ValueError(
                "Invalid value for `require_2fa` ({0}), must be one of {1}"
                .format(require_2fa, allowed_values)
            )

        self._require_2fa = require_2fa

    @property
    def require_password_change(self):
        """Gets the require_password_change of this UserEntity.

        Is a password change required upon next user login?

        :return: The require_password_change of this UserEntity.
        :rtype: bool
        """
        return self._require_password_change

    @require_password_change.setter
    def require_password_change(self, require_password_change):
        """Sets the require_password_change of this UserEntity.

        Is a password change required upon next user login?

        :param require_password_change: The require_password_change of this UserEntity.
        :type require_password_change: bool
        """

        self._require_password_change = require_password_change

    @property
    def restapi_permission(self):
        """Gets the restapi_permission of this UserEntity.

        Can this user access the REST API?

        :return: The restapi_permission of this UserEntity.
        :rtype: bool
        """
        return self._restapi_permission

    @restapi_permission.setter
    def restapi_permission(self, restapi_permission):
        """Sets the restapi_permission of this UserEntity.

        Can this user access the REST API?

        :param restapi_permission: The restapi_permission of this UserEntity.
        :type restapi_permission: bool
        """

        self._restapi_permission = restapi_permission

    @property
    def self_managed(self):
        """Gets the self_managed of this UserEntity.

        Does this user manage it's own credentials or is it a shared/bot user?

        :return: The self_managed of this UserEntity.
        :rtype: bool
        """
        return self._self_managed

    @self_managed.setter
    def self_managed(self, self_managed):
        """Sets the self_managed of this UserEntity.

        Does this user manage it's own credentials or is it a shared/bot user?

        :param self_managed: The self_managed of this UserEntity.
        :type self_managed: bool
        """

        self._self_managed = self_managed

    @property
    def sftp_permission(self):
        """Gets the sftp_permission of this UserEntity.

        Can the user access with SFTP?

        :return: The sftp_permission of this UserEntity.
        :rtype: bool
        """
        return self._sftp_permission

    @sftp_permission.setter
    def sftp_permission(self, sftp_permission):
        """Sets the sftp_permission of this UserEntity.

        Can the user access with SFTP?

        :param sftp_permission: The sftp_permission of this UserEntity.
        :type sftp_permission: bool
        """

        self._sftp_permission = sftp_permission

    @property
    def site_admin(self):
        """Gets the site_admin of this UserEntity.

        Is the user an administrator for this site?

        :return: The site_admin of this UserEntity.
        :rtype: bool
        """
        return self._site_admin

    @site_admin.setter
    def site_admin(self, site_admin):
        """Sets the site_admin of this UserEntity.

        Is the user an administrator for this site?

        :param site_admin: The site_admin of this UserEntity.
        :type site_admin: bool
        """

        self._site_admin = site_admin

    @property
    def skip_welcome_screen(self):
        """Gets the skip_welcome_screen of this UserEntity.

        Skip Welcome page in the UI?

        :return: The skip_welcome_screen of this UserEntity.
        :rtype: bool
        """
        return self._skip_welcome_screen

    @skip_welcome_screen.setter
    def skip_welcome_screen(self, skip_welcome_screen):
        """Sets the skip_welcome_screen of this UserEntity.

        Skip Welcome page in the UI?

        :param skip_welcome_screen: The skip_welcome_screen of this UserEntity.
        :type skip_welcome_screen: bool
        """

        self._skip_welcome_screen = skip_welcome_screen

    @property
    def ssl_required(self):
        """Gets the ssl_required of this UserEntity.

        SSL required setting

        :return: The ssl_required of this UserEntity.
        :rtype: str
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this UserEntity.

        SSL required setting

        :param ssl_required: The ssl_required of this UserEntity.
        :type ssl_required: str
        """
        allowed_values = ["use_system_setting", "always_require", "never_require"]  # noqa: E501
        if ssl_required not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_required` ({0}), must be one of {1}"
                .format(ssl_required, allowed_values)
            )

        self._ssl_required = ssl_required

    @property
    def sso_strategy_id(self):
        """Gets the sso_strategy_id of this UserEntity.

        SSO (Single Sign On) strategy ID for the user, if applicable.

        :return: The sso_strategy_id of this UserEntity.
        :rtype: int
        """
        return self._sso_strategy_id

    @sso_strategy_id.setter
    def sso_strategy_id(self, sso_strategy_id):
        """Sets the sso_strategy_id of this UserEntity.

        SSO (Single Sign On) strategy ID for the user, if applicable.

        :param sso_strategy_id: The sso_strategy_id of this UserEntity.
        :type sso_strategy_id: int
        """

        self._sso_strategy_id = sso_strategy_id

    @property
    def subscribe_to_newsletter(self):
        """Gets the subscribe_to_newsletter of this UserEntity.

        Is the user subscribed to the newsletter?

        :return: The subscribe_to_newsletter of this UserEntity.
        :rtype: bool
        """
        return self._subscribe_to_newsletter

    @subscribe_to_newsletter.setter
    def subscribe_to_newsletter(self, subscribe_to_newsletter):
        """Sets the subscribe_to_newsletter of this UserEntity.

        Is the user subscribed to the newsletter?

        :param subscribe_to_newsletter: The subscribe_to_newsletter of this UserEntity.
        :type subscribe_to_newsletter: bool
        """

        self._subscribe_to_newsletter = subscribe_to_newsletter

    @property
    def time_zone(self):
        """Gets the time_zone of this UserEntity.

        User time zone

        :return: The time_zone of this UserEntity.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this UserEntity.

        User time zone

        :param time_zone: The time_zone of this UserEntity.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def type_of_2fa(self):
        """Gets the type_of_2fa of this UserEntity.

        Type(s) of 2FA methods in use.  Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values sorted alphabetically and joined by an underscore.

        :return: The type_of_2fa of this UserEntity.
        :rtype: str
        """
        return self._type_of_2fa

    @type_of_2fa.setter
    def type_of_2fa(self, type_of_2fa):
        """Sets the type_of_2fa of this UserEntity.

        Type(s) of 2FA methods in use.  Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values sorted alphabetically and joined by an underscore.

        :param type_of_2fa: The type_of_2fa of this UserEntity.
        :type type_of_2fa: str
        """

        self._type_of_2fa = type_of_2fa

    @property
    def user_root(self):
        """Gets the user_root of this UserEntity.

        Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.

        :return: The user_root of this UserEntity.
        :rtype: str
        """
        return self._user_root

    @user_root.setter
    def user_root(self, user_root):
        """Sets the user_root of this UserEntity.

        Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.

        :param user_root: The user_root of this UserEntity.
        :type user_root: str
        """

        self._user_root = user_root

    @property
    def username(self):
        """Gets the username of this UserEntity.

        User's username

        :return: The username of this UserEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserEntity.

        User's username

        :param username: The username of this UserEntity.
        :type username: str
        """

        self._username = username
