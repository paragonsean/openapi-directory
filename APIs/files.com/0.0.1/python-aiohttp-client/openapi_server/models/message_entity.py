# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_comment_entity import MessageCommentEntity
from openapi_server import util


class MessageEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, comments: List[MessageCommentEntity]=None, id: int=None, subject: str=None):
        """MessageEntity - a model defined in OpenAPI

        :param body: The body of this MessageEntity.
        :param comments: The comments of this MessageEntity.
        :param id: The id of this MessageEntity.
        :param subject: The subject of this MessageEntity.
        """
        self.openapi_types = {
            'body': str,
            'comments': List[MessageCommentEntity],
            'id': int,
            'subject': str
        }

        self.attribute_map = {
            'body': 'body',
            'comments': 'comments',
            'id': 'id',
            'subject': 'subject'
        }

        self._body = body
        self._comments = comments
        self._id = id
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageEntity of this MessageEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this MessageEntity.

        Message body.

        :return: The body of this MessageEntity.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MessageEntity.

        Message body.

        :param body: The body of this MessageEntity.
        :type body: str
        """

        self._body = body

    @property
    def comments(self):
        """Gets the comments of this MessageEntity.

        Comments.

        :return: The comments of this MessageEntity.
        :rtype: List[MessageCommentEntity]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this MessageEntity.

        Comments.

        :param comments: The comments of this MessageEntity.
        :type comments: List[MessageCommentEntity]
        """

        self._comments = comments

    @property
    def id(self):
        """Gets the id of this MessageEntity.

        Message ID

        :return: The id of this MessageEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageEntity.

        Message ID

        :param id: The id of this MessageEntity.
        :type id: int
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this MessageEntity.

        Message subject.

        :return: The subject of this MessageEntity.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this MessageEntity.

        Message subject.

        :param subject: The subject of this MessageEntity.
        :type subject: str
        """

        self._subject = subject
