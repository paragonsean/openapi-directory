# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_type: str=None, documentation_links: object=None, extended_description: str=None, external_homepage_url: str=None, featured: bool=None, folder_behavior_type: str=None, icon_url: str=None, logo_thumbnail_url: str=None, logo_url: str=None, marketing_youtube_url: str=None, name: str=None, remote_server_type: str=None, screenshot_list_urls: List[str]=None, short_description: str=None, sso_strategy_type: str=None, tutorial_youtube_url: str=None):
        """AppEntity - a model defined in OpenAPI

        :param app_type: The app_type of this AppEntity.
        :param documentation_links: The documentation_links of this AppEntity.
        :param extended_description: The extended_description of this AppEntity.
        :param external_homepage_url: The external_homepage_url of this AppEntity.
        :param featured: The featured of this AppEntity.
        :param folder_behavior_type: The folder_behavior_type of this AppEntity.
        :param icon_url: The icon_url of this AppEntity.
        :param logo_thumbnail_url: The logo_thumbnail_url of this AppEntity.
        :param logo_url: The logo_url of this AppEntity.
        :param marketing_youtube_url: The marketing_youtube_url of this AppEntity.
        :param name: The name of this AppEntity.
        :param remote_server_type: The remote_server_type of this AppEntity.
        :param screenshot_list_urls: The screenshot_list_urls of this AppEntity.
        :param short_description: The short_description of this AppEntity.
        :param sso_strategy_type: The sso_strategy_type of this AppEntity.
        :param tutorial_youtube_url: The tutorial_youtube_url of this AppEntity.
        """
        self.openapi_types = {
            'app_type': str,
            'documentation_links': object,
            'extended_description': str,
            'external_homepage_url': str,
            'featured': bool,
            'folder_behavior_type': str,
            'icon_url': str,
            'logo_thumbnail_url': str,
            'logo_url': str,
            'marketing_youtube_url': str,
            'name': str,
            'remote_server_type': str,
            'screenshot_list_urls': List[str],
            'short_description': str,
            'sso_strategy_type': str,
            'tutorial_youtube_url': str
        }

        self.attribute_map = {
            'app_type': 'app_type',
            'documentation_links': 'documentation_links',
            'extended_description': 'extended_description',
            'external_homepage_url': 'external_homepage_url',
            'featured': 'featured',
            'folder_behavior_type': 'folder_behavior_type',
            'icon_url': 'icon_url',
            'logo_thumbnail_url': 'logo_thumbnail_url',
            'logo_url': 'logo_url',
            'marketing_youtube_url': 'marketing_youtube_url',
            'name': 'name',
            'remote_server_type': 'remote_server_type',
            'screenshot_list_urls': 'screenshot_list_urls',
            'short_description': 'short_description',
            'sso_strategy_type': 'sso_strategy_type',
            'tutorial_youtube_url': 'tutorial_youtube_url'
        }

        self._app_type = app_type
        self._documentation_links = documentation_links
        self._extended_description = extended_description
        self._external_homepage_url = external_homepage_url
        self._featured = featured
        self._folder_behavior_type = folder_behavior_type
        self._icon_url = icon_url
        self._logo_thumbnail_url = logo_thumbnail_url
        self._logo_url = logo_url
        self._marketing_youtube_url = marketing_youtube_url
        self._name = name
        self._remote_server_type = remote_server_type
        self._screenshot_list_urls = screenshot_list_urls
        self._short_description = short_description
        self._sso_strategy_type = sso_strategy_type
        self._tutorial_youtube_url = tutorial_youtube_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppEntity of this AppEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_type(self):
        """Gets the app_type of this AppEntity.

        The type of the App

        :return: The app_type of this AppEntity.
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this AppEntity.

        The type of the App

        :param app_type: The app_type of this AppEntity.
        :type app_type: str
        """
        allowed_values = ["sdk", "sso", "remote_server", "folder_behavior", "client_app", "app_integration"]  # noqa: E501
        if app_type not in allowed_values:
            raise ValueError(
                "Invalid value for `app_type` ({0}), must be one of {1}"
                .format(app_type, allowed_values)
            )

        self._app_type = app_type

    @property
    def documentation_links(self):
        """Gets the documentation_links of this AppEntity.

        Collection of named links to documentation

        :return: The documentation_links of this AppEntity.
        :rtype: object
        """
        return self._documentation_links

    @documentation_links.setter
    def documentation_links(self, documentation_links):
        """Sets the documentation_links of this AppEntity.

        Collection of named links to documentation

        :param documentation_links: The documentation_links of this AppEntity.
        :type documentation_links: object
        """

        self._documentation_links = documentation_links

    @property
    def extended_description(self):
        """Gets the extended_description of this AppEntity.

        Long form description of the App

        :return: The extended_description of this AppEntity.
        :rtype: str
        """
        return self._extended_description

    @extended_description.setter
    def extended_description(self, extended_description):
        """Sets the extended_description of this AppEntity.

        Long form description of the App

        :param extended_description: The extended_description of this AppEntity.
        :type extended_description: str
        """

        self._extended_description = extended_description

    @property
    def external_homepage_url(self):
        """Gets the external_homepage_url of this AppEntity.

        Link to external homepage

        :return: The external_homepage_url of this AppEntity.
        :rtype: str
        """
        return self._external_homepage_url

    @external_homepage_url.setter
    def external_homepage_url(self, external_homepage_url):
        """Sets the external_homepage_url of this AppEntity.

        Link to external homepage

        :param external_homepage_url: The external_homepage_url of this AppEntity.
        :type external_homepage_url: str
        """

        self._external_homepage_url = external_homepage_url

    @property
    def featured(self):
        """Gets the featured of this AppEntity.

        Is featured on the App listing?

        :return: The featured of this AppEntity.
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this AppEntity.

        Is featured on the App listing?

        :param featured: The featured of this AppEntity.
        :type featured: bool
        """

        self._featured = featured

    @property
    def folder_behavior_type(self):
        """Gets the folder_behavior_type of this AppEntity.

        Associated Folder Behavior type, if any

        :return: The folder_behavior_type of this AppEntity.
        :rtype: str
        """
        return self._folder_behavior_type

    @folder_behavior_type.setter
    def folder_behavior_type(self, folder_behavior_type):
        """Sets the folder_behavior_type of this AppEntity.

        Associated Folder Behavior type, if any

        :param folder_behavior_type: The folder_behavior_type of this AppEntity.
        :type folder_behavior_type: str
        """
        allowed_values = ["webhook", "file_expiration", "auto_encrypt", "lock_subfolders", "storage_region", "serve_publicly", "create_user_folders", "remote_server_sync", "inbox", "append_timestamp", "limit_file_extensions", "limit_file_regex", "amazon_sns", "watermark", "remote_server_mount", "slack_webhook", "auto_decrypt", "override_upload_filename"]  # noqa: E501
        if folder_behavior_type not in allowed_values:
            raise ValueError(
                "Invalid value for `folder_behavior_type` ({0}), must be one of {1}"
                .format(folder_behavior_type, allowed_values)
            )

        self._folder_behavior_type = folder_behavior_type

    @property
    def icon_url(self):
        """Gets the icon_url of this AppEntity.

        App icon

        :return: The icon_url of this AppEntity.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this AppEntity.

        App icon

        :param icon_url: The icon_url of this AppEntity.
        :type icon_url: str
        """

        self._icon_url = icon_url

    @property
    def logo_thumbnail_url(self):
        """Gets the logo_thumbnail_url of this AppEntity.

        Logo thumbnail for the App

        :return: The logo_thumbnail_url of this AppEntity.
        :rtype: str
        """
        return self._logo_thumbnail_url

    @logo_thumbnail_url.setter
    def logo_thumbnail_url(self, logo_thumbnail_url):
        """Sets the logo_thumbnail_url of this AppEntity.

        Logo thumbnail for the App

        :param logo_thumbnail_url: The logo_thumbnail_url of this AppEntity.
        :type logo_thumbnail_url: str
        """

        self._logo_thumbnail_url = logo_thumbnail_url

    @property
    def logo_url(self):
        """Gets the logo_url of this AppEntity.

        Full size logo for the App

        :return: The logo_url of this AppEntity.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this AppEntity.

        Full size logo for the App

        :param logo_url: The logo_url of this AppEntity.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def marketing_youtube_url(self):
        """Gets the marketing_youtube_url of this AppEntity.

        Marketing video page

        :return: The marketing_youtube_url of this AppEntity.
        :rtype: str
        """
        return self._marketing_youtube_url

    @marketing_youtube_url.setter
    def marketing_youtube_url(self, marketing_youtube_url):
        """Sets the marketing_youtube_url of this AppEntity.

        Marketing video page

        :param marketing_youtube_url: The marketing_youtube_url of this AppEntity.
        :type marketing_youtube_url: str
        """

        self._marketing_youtube_url = marketing_youtube_url

    @property
    def name(self):
        """Gets the name of this AppEntity.

        Name of the App

        :return: The name of this AppEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppEntity.

        Name of the App

        :param name: The name of this AppEntity.
        :type name: str
        """

        self._name = name

    @property
    def remote_server_type(self):
        """Gets the remote_server_type of this AppEntity.

        Associated Remote Server type, if any

        :return: The remote_server_type of this AppEntity.
        :rtype: str
        """
        return self._remote_server_type

    @remote_server_type.setter
    def remote_server_type(self, remote_server_type):
        """Sets the remote_server_type of this AppEntity.

        Associated Remote Server type, if any

        :param remote_server_type: The remote_server_type of this AppEntity.
        :type remote_server_type: str
        """
        allowed_values = ["ftp", "sftp", "s3", "google_cloud_storage", "webdav", "wasabi", "backblaze_b2", "one_drive", "rackspace", "box", "dropbox", "google_drive", "azure", "sharepoint", "s3_compatible", "azure_files", "files_agent", "filebase"]  # noqa: E501
        if remote_server_type not in allowed_values:
            raise ValueError(
                "Invalid value for `remote_server_type` ({0}), must be one of {1}"
                .format(remote_server_type, allowed_values)
            )

        self._remote_server_type = remote_server_type

    @property
    def screenshot_list_urls(self):
        """Gets the screenshot_list_urls of this AppEntity.

        Screenshots of the App

        :return: The screenshot_list_urls of this AppEntity.
        :rtype: List[str]
        """
        return self._screenshot_list_urls

    @screenshot_list_urls.setter
    def screenshot_list_urls(self, screenshot_list_urls):
        """Sets the screenshot_list_urls of this AppEntity.

        Screenshots of the App

        :param screenshot_list_urls: The screenshot_list_urls of this AppEntity.
        :type screenshot_list_urls: List[str]
        """

        self._screenshot_list_urls = screenshot_list_urls

    @property
    def short_description(self):
        """Gets the short_description of this AppEntity.

        Short description of the App

        :return: The short_description of this AppEntity.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this AppEntity.

        Short description of the App

        :param short_description: The short_description of this AppEntity.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def sso_strategy_type(self):
        """Gets the sso_strategy_type of this AppEntity.

        Associated SSO Strategy type, if any

        :return: The sso_strategy_type of this AppEntity.
        :rtype: str
        """
        return self._sso_strategy_type

    @sso_strategy_type.setter
    def sso_strategy_type(self, sso_strategy_type):
        """Sets the sso_strategy_type of this AppEntity.

        Associated SSO Strategy type, if any

        :param sso_strategy_type: The sso_strategy_type of this AppEntity.
        :type sso_strategy_type: str
        """
        allowed_values = ["google", "auth0", "okta", "atlassian", "azure", "box", "dropbox", "slack", "_unused_ubuntu", "onelogin", "saml", "idaptive", "ldap", "scim"]  # noqa: E501
        if sso_strategy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sso_strategy_type` ({0}), must be one of {1}"
                .format(sso_strategy_type, allowed_values)
            )

        self._sso_strategy_type = sso_strategy_type

    @property
    def tutorial_youtube_url(self):
        """Gets the tutorial_youtube_url of this AppEntity.

        Tutorial video page

        :return: The tutorial_youtube_url of this AppEntity.
        :rtype: str
        """
        return self._tutorial_youtube_url

    @tutorial_youtube_url.setter
    def tutorial_youtube_url(self, tutorial_youtube_url):
        """Sets the tutorial_youtube_url of this AppEntity.

        Tutorial video page

        :param tutorial_youtube_url: The tutorial_youtube_url of this AppEntity.
        :type tutorial_youtube_url: str
        """

        self._tutorial_youtube_url = tutorial_youtube_url
