# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, group_name: str=None, id: int=None, message: str=None, notify_on_copy: bool=None, notify_on_delete: bool=None, notify_on_download: bool=None, notify_on_move: bool=None, notify_on_upload: bool=None, notify_user_actions: bool=None, path: str=None, recursive: bool=None, send_interval: str=None, suppressed_email: bool=None, trigger_by_share_recipients: bool=None, triggering_filenames: List[str]=None, triggering_group_ids: List[int]=None, triggering_user_ids: List[int]=None, unsubscribed: bool=None, unsubscribed_reason: str=None, user_id: int=None, username: str=None):
        """NotificationEntity - a model defined in OpenAPI

        :param group_id: The group_id of this NotificationEntity.
        :param group_name: The group_name of this NotificationEntity.
        :param id: The id of this NotificationEntity.
        :param message: The message of this NotificationEntity.
        :param notify_on_copy: The notify_on_copy of this NotificationEntity.
        :param notify_on_delete: The notify_on_delete of this NotificationEntity.
        :param notify_on_download: The notify_on_download of this NotificationEntity.
        :param notify_on_move: The notify_on_move of this NotificationEntity.
        :param notify_on_upload: The notify_on_upload of this NotificationEntity.
        :param notify_user_actions: The notify_user_actions of this NotificationEntity.
        :param path: The path of this NotificationEntity.
        :param recursive: The recursive of this NotificationEntity.
        :param send_interval: The send_interval of this NotificationEntity.
        :param suppressed_email: The suppressed_email of this NotificationEntity.
        :param trigger_by_share_recipients: The trigger_by_share_recipients of this NotificationEntity.
        :param triggering_filenames: The triggering_filenames of this NotificationEntity.
        :param triggering_group_ids: The triggering_group_ids of this NotificationEntity.
        :param triggering_user_ids: The triggering_user_ids of this NotificationEntity.
        :param unsubscribed: The unsubscribed of this NotificationEntity.
        :param unsubscribed_reason: The unsubscribed_reason of this NotificationEntity.
        :param user_id: The user_id of this NotificationEntity.
        :param username: The username of this NotificationEntity.
        """
        self.openapi_types = {
            'group_id': int,
            'group_name': str,
            'id': int,
            'message': str,
            'notify_on_copy': bool,
            'notify_on_delete': bool,
            'notify_on_download': bool,
            'notify_on_move': bool,
            'notify_on_upload': bool,
            'notify_user_actions': bool,
            'path': str,
            'recursive': bool,
            'send_interval': str,
            'suppressed_email': bool,
            'trigger_by_share_recipients': bool,
            'triggering_filenames': List[str],
            'triggering_group_ids': List[int],
            'triggering_user_ids': List[int],
            'unsubscribed': bool,
            'unsubscribed_reason': str,
            'user_id': int,
            'username': str
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'group_name': 'group_name',
            'id': 'id',
            'message': 'message',
            'notify_on_copy': 'notify_on_copy',
            'notify_on_delete': 'notify_on_delete',
            'notify_on_download': 'notify_on_download',
            'notify_on_move': 'notify_on_move',
            'notify_on_upload': 'notify_on_upload',
            'notify_user_actions': 'notify_user_actions',
            'path': 'path',
            'recursive': 'recursive',
            'send_interval': 'send_interval',
            'suppressed_email': 'suppressed_email',
            'trigger_by_share_recipients': 'trigger_by_share_recipients',
            'triggering_filenames': 'triggering_filenames',
            'triggering_group_ids': 'triggering_group_ids',
            'triggering_user_ids': 'triggering_user_ids',
            'unsubscribed': 'unsubscribed',
            'unsubscribed_reason': 'unsubscribed_reason',
            'user_id': 'user_id',
            'username': 'username'
        }

        self._group_id = group_id
        self._group_name = group_name
        self._id = id
        self._message = message
        self._notify_on_copy = notify_on_copy
        self._notify_on_delete = notify_on_delete
        self._notify_on_download = notify_on_download
        self._notify_on_move = notify_on_move
        self._notify_on_upload = notify_on_upload
        self._notify_user_actions = notify_user_actions
        self._path = path
        self._recursive = recursive
        self._send_interval = send_interval
        self._suppressed_email = suppressed_email
        self._trigger_by_share_recipients = trigger_by_share_recipients
        self._triggering_filenames = triggering_filenames
        self._triggering_group_ids = triggering_group_ids
        self._triggering_user_ids = triggering_user_ids
        self._unsubscribed = unsubscribed
        self._unsubscribed_reason = unsubscribed_reason
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationEntity of this NotificationEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this NotificationEntity.

        Notification group id

        :return: The group_id of this NotificationEntity.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this NotificationEntity.

        Notification group id

        :param group_id: The group_id of this NotificationEntity.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this NotificationEntity.

        Group name if applicable

        :return: The group_name of this NotificationEntity.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this NotificationEntity.

        Group name if applicable

        :param group_name: The group_name of this NotificationEntity.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this NotificationEntity.

        Notification ID

        :return: The id of this NotificationEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationEntity.

        Notification ID

        :param id: The id of this NotificationEntity.
        :type id: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this NotificationEntity.

        Custom message to include in notification emails.

        :return: The message of this NotificationEntity.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationEntity.

        Custom message to include in notification emails.

        :param message: The message of this NotificationEntity.
        :type message: str
        """

        self._message = message

    @property
    def notify_on_copy(self):
        """Gets the notify_on_copy of this NotificationEntity.

        Triggers notification when copying files to this path

        :return: The notify_on_copy of this NotificationEntity.
        :rtype: bool
        """
        return self._notify_on_copy

    @notify_on_copy.setter
    def notify_on_copy(self, notify_on_copy):
        """Sets the notify_on_copy of this NotificationEntity.

        Triggers notification when copying files to this path

        :param notify_on_copy: The notify_on_copy of this NotificationEntity.
        :type notify_on_copy: bool
        """

        self._notify_on_copy = notify_on_copy

    @property
    def notify_on_delete(self):
        """Gets the notify_on_delete of this NotificationEntity.

        Triggers notification when deleting files from this path

        :return: The notify_on_delete of this NotificationEntity.
        :rtype: bool
        """
        return self._notify_on_delete

    @notify_on_delete.setter
    def notify_on_delete(self, notify_on_delete):
        """Sets the notify_on_delete of this NotificationEntity.

        Triggers notification when deleting files from this path

        :param notify_on_delete: The notify_on_delete of this NotificationEntity.
        :type notify_on_delete: bool
        """

        self._notify_on_delete = notify_on_delete

    @property
    def notify_on_download(self):
        """Gets the notify_on_download of this NotificationEntity.

        Triggers notification when downloading files from this path

        :return: The notify_on_download of this NotificationEntity.
        :rtype: bool
        """
        return self._notify_on_download

    @notify_on_download.setter
    def notify_on_download(self, notify_on_download):
        """Sets the notify_on_download of this NotificationEntity.

        Triggers notification when downloading files from this path

        :param notify_on_download: The notify_on_download of this NotificationEntity.
        :type notify_on_download: bool
        """

        self._notify_on_download = notify_on_download

    @property
    def notify_on_move(self):
        """Gets the notify_on_move of this NotificationEntity.

        Triggers notification when moving files to this path

        :return: The notify_on_move of this NotificationEntity.
        :rtype: bool
        """
        return self._notify_on_move

    @notify_on_move.setter
    def notify_on_move(self, notify_on_move):
        """Sets the notify_on_move of this NotificationEntity.

        Triggers notification when moving files to this path

        :param notify_on_move: The notify_on_move of this NotificationEntity.
        :type notify_on_move: bool
        """

        self._notify_on_move = notify_on_move

    @property
    def notify_on_upload(self):
        """Gets the notify_on_upload of this NotificationEntity.

        Triggers notification when uploading new files to this path

        :return: The notify_on_upload of this NotificationEntity.
        :rtype: bool
        """
        return self._notify_on_upload

    @notify_on_upload.setter
    def notify_on_upload(self, notify_on_upload):
        """Sets the notify_on_upload of this NotificationEntity.

        Triggers notification when uploading new files to this path

        :param notify_on_upload: The notify_on_upload of this NotificationEntity.
        :type notify_on_upload: bool
        """

        self._notify_on_upload = notify_on_upload

    @property
    def notify_user_actions(self):
        """Gets the notify_user_actions of this NotificationEntity.

        Trigger notification on notification user actions?

        :return: The notify_user_actions of this NotificationEntity.
        :rtype: bool
        """
        return self._notify_user_actions

    @notify_user_actions.setter
    def notify_user_actions(self, notify_user_actions):
        """Sets the notify_user_actions of this NotificationEntity.

        Trigger notification on notification user actions?

        :param notify_user_actions: The notify_user_actions of this NotificationEntity.
        :type notify_user_actions: bool
        """

        self._notify_user_actions = notify_user_actions

    @property
    def path(self):
        """Gets the path of this NotificationEntity.

        Folder path to notify on

        :return: The path of this NotificationEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NotificationEntity.

        Folder path to notify on

        :param path: The path of this NotificationEntity.
        :type path: str
        """

        self._path = path

    @property
    def recursive(self):
        """Gets the recursive of this NotificationEntity.

        Enable notifications for each subfolder in this path

        :return: The recursive of this NotificationEntity.
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this NotificationEntity.

        Enable notifications for each subfolder in this path

        :param recursive: The recursive of this NotificationEntity.
        :type recursive: bool
        """

        self._recursive = recursive

    @property
    def send_interval(self):
        """Gets the send_interval of this NotificationEntity.

        The time interval that notifications are aggregated to

        :return: The send_interval of this NotificationEntity.
        :rtype: str
        """
        return self._send_interval

    @send_interval.setter
    def send_interval(self, send_interval):
        """Sets the send_interval of this NotificationEntity.

        The time interval that notifications are aggregated to

        :param send_interval: The send_interval of this NotificationEntity.
        :type send_interval: str
        """
        allowed_values = ["five_minutes", "fifteen_minutes", "hourly", "daily"]  # noqa: E501
        if send_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `send_interval` ({0}), must be one of {1}"
                .format(send_interval, allowed_values)
            )

        self._send_interval = send_interval

    @property
    def suppressed_email(self):
        """Gets the suppressed_email of this NotificationEntity.

        If true, it means that the recipient at this user's email address has manually unsubscribed from all emails, or had their email \"hard bounce\", which means that we are unable to send mail to this user's current email address. Notifications will resume if the user changes their email address.

        :return: The suppressed_email of this NotificationEntity.
        :rtype: bool
        """
        return self._suppressed_email

    @suppressed_email.setter
    def suppressed_email(self, suppressed_email):
        """Sets the suppressed_email of this NotificationEntity.

        If true, it means that the recipient at this user's email address has manually unsubscribed from all emails, or had their email \"hard bounce\", which means that we are unable to send mail to this user's current email address. Notifications will resume if the user changes their email address.

        :param suppressed_email: The suppressed_email of this NotificationEntity.
        :type suppressed_email: bool
        """

        self._suppressed_email = suppressed_email

    @property
    def trigger_by_share_recipients(self):
        """Gets the trigger_by_share_recipients of this NotificationEntity.

        Notify when actions are performed by a share recipient?

        :return: The trigger_by_share_recipients of this NotificationEntity.
        :rtype: bool
        """
        return self._trigger_by_share_recipients

    @trigger_by_share_recipients.setter
    def trigger_by_share_recipients(self, trigger_by_share_recipients):
        """Sets the trigger_by_share_recipients of this NotificationEntity.

        Notify when actions are performed by a share recipient?

        :param trigger_by_share_recipients: The trigger_by_share_recipients of this NotificationEntity.
        :type trigger_by_share_recipients: bool
        """

        self._trigger_by_share_recipients = trigger_by_share_recipients

    @property
    def triggering_filenames(self):
        """Gets the triggering_filenames of this NotificationEntity.

        Array of filenames (possibly with wildcards) to match for action path

        :return: The triggering_filenames of this NotificationEntity.
        :rtype: List[str]
        """
        return self._triggering_filenames

    @triggering_filenames.setter
    def triggering_filenames(self, triggering_filenames):
        """Sets the triggering_filenames of this NotificationEntity.

        Array of filenames (possibly with wildcards) to match for action path

        :param triggering_filenames: The triggering_filenames of this NotificationEntity.
        :type triggering_filenames: List[str]
        """

        self._triggering_filenames = triggering_filenames

    @property
    def triggering_group_ids(self):
        """Gets the triggering_group_ids of this NotificationEntity.

        Only notify on actions made by a member of one of the specified groups

        :return: The triggering_group_ids of this NotificationEntity.
        :rtype: List[int]
        """
        return self._triggering_group_ids

    @triggering_group_ids.setter
    def triggering_group_ids(self, triggering_group_ids):
        """Sets the triggering_group_ids of this NotificationEntity.

        Only notify on actions made by a member of one of the specified groups

        :param triggering_group_ids: The triggering_group_ids of this NotificationEntity.
        :type triggering_group_ids: List[int]
        """

        self._triggering_group_ids = triggering_group_ids

    @property
    def triggering_user_ids(self):
        """Gets the triggering_user_ids of this NotificationEntity.

        Only notify on actions made one of the specified users

        :return: The triggering_user_ids of this NotificationEntity.
        :rtype: List[int]
        """
        return self._triggering_user_ids

    @triggering_user_ids.setter
    def triggering_user_ids(self, triggering_user_ids):
        """Sets the triggering_user_ids of this NotificationEntity.

        Only notify on actions made one of the specified users

        :param triggering_user_ids: The triggering_user_ids of this NotificationEntity.
        :type triggering_user_ids: List[int]
        """

        self._triggering_user_ids = triggering_user_ids

    @property
    def unsubscribed(self):
        """Gets the unsubscribed of this NotificationEntity.

        Is the user unsubscribed from this notification?

        :return: The unsubscribed of this NotificationEntity.
        :rtype: bool
        """
        return self._unsubscribed

    @unsubscribed.setter
    def unsubscribed(self, unsubscribed):
        """Sets the unsubscribed of this NotificationEntity.

        Is the user unsubscribed from this notification?

        :param unsubscribed: The unsubscribed of this NotificationEntity.
        :type unsubscribed: bool
        """

        self._unsubscribed = unsubscribed

    @property
    def unsubscribed_reason(self):
        """Gets the unsubscribed_reason of this NotificationEntity.

        The reason that the user unsubscribed

        :return: The unsubscribed_reason of this NotificationEntity.
        :rtype: str
        """
        return self._unsubscribed_reason

    @unsubscribed_reason.setter
    def unsubscribed_reason(self, unsubscribed_reason):
        """Sets the unsubscribed_reason of this NotificationEntity.

        The reason that the user unsubscribed

        :param unsubscribed_reason: The unsubscribed_reason of this NotificationEntity.
        :type unsubscribed_reason: str
        """
        allowed_values = ["none", "unsubscribe_link_clicked", "mail_bounced", "mail_marked_as_spam"]  # noqa: E501
        if unsubscribed_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `unsubscribed_reason` ({0}), must be one of {1}"
                .format(unsubscribed_reason, allowed_values)
            )

        self._unsubscribed_reason = unsubscribed_reason

    @property
    def user_id(self):
        """Gets the user_id of this NotificationEntity.

        Notification user ID

        :return: The user_id of this NotificationEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NotificationEntity.

        Notification user ID

        :param user_id: The user_id of this NotificationEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this NotificationEntity.

        Notification username

        :return: The username of this NotificationEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NotificationEntity.

        Notification username

        :param username: The username of this NotificationEntity.
        :type username: str
        """

        self._username = username
