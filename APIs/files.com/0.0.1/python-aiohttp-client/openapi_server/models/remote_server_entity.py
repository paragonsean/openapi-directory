# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoteServerEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_account_name: str=None, auth_setup_link: str=None, auth_status: str=None, authentication_method: str=None, aws_access_key: str=None, azure_blob_storage_account: str=None, azure_blob_storage_container: str=None, azure_blob_storage_sas_token: str=None, azure_files_storage_account: str=None, azure_files_storage_sas_token: str=None, azure_files_storage_share_name: str=None, backblaze_b2_bucket: str=None, backblaze_b2_s3_endpoint: str=None, disabled: bool=None, enable_dedicated_ips: bool=None, filebase_access_key: str=None, filebase_bucket: str=None, files_agent_api_token: str=None, files_agent_permission_set: str=None, files_agent_root: str=None, google_cloud_storage_bucket: str=None, google_cloud_storage_project_id: str=None, hostname: str=None, id: int=None, max_connections: int=None, name: str=None, one_drive_account_type: str=None, pin_to_site_region: bool=None, pinned_region: str=None, port: int=None, rackspace_container: str=None, rackspace_region: str=None, rackspace_username: str=None, remote_home_path: str=None, s3_bucket: str=None, s3_compatible_access_key: str=None, s3_compatible_bucket: str=None, s3_compatible_endpoint: str=None, s3_compatible_region: str=None, s3_region: str=None, server_certificate: str=None, server_host_key: str=None, server_type: str=None, ssl: str=None, username: str=None, wasabi_access_key: str=None, wasabi_bucket: str=None, wasabi_region: str=None):
        """RemoteServerEntity - a model defined in OpenAPI

        :param auth_account_name: The auth_account_name of this RemoteServerEntity.
        :param auth_setup_link: The auth_setup_link of this RemoteServerEntity.
        :param auth_status: The auth_status of this RemoteServerEntity.
        :param authentication_method: The authentication_method of this RemoteServerEntity.
        :param aws_access_key: The aws_access_key of this RemoteServerEntity.
        :param azure_blob_storage_account: The azure_blob_storage_account of this RemoteServerEntity.
        :param azure_blob_storage_container: The azure_blob_storage_container of this RemoteServerEntity.
        :param azure_blob_storage_sas_token: The azure_blob_storage_sas_token of this RemoteServerEntity.
        :param azure_files_storage_account: The azure_files_storage_account of this RemoteServerEntity.
        :param azure_files_storage_sas_token: The azure_files_storage_sas_token of this RemoteServerEntity.
        :param azure_files_storage_share_name: The azure_files_storage_share_name of this RemoteServerEntity.
        :param backblaze_b2_bucket: The backblaze_b2_bucket of this RemoteServerEntity.
        :param backblaze_b2_s3_endpoint: The backblaze_b2_s3_endpoint of this RemoteServerEntity.
        :param disabled: The disabled of this RemoteServerEntity.
        :param enable_dedicated_ips: The enable_dedicated_ips of this RemoteServerEntity.
        :param filebase_access_key: The filebase_access_key of this RemoteServerEntity.
        :param filebase_bucket: The filebase_bucket of this RemoteServerEntity.
        :param files_agent_api_token: The files_agent_api_token of this RemoteServerEntity.
        :param files_agent_permission_set: The files_agent_permission_set of this RemoteServerEntity.
        :param files_agent_root: The files_agent_root of this RemoteServerEntity.
        :param google_cloud_storage_bucket: The google_cloud_storage_bucket of this RemoteServerEntity.
        :param google_cloud_storage_project_id: The google_cloud_storage_project_id of this RemoteServerEntity.
        :param hostname: The hostname of this RemoteServerEntity.
        :param id: The id of this RemoteServerEntity.
        :param max_connections: The max_connections of this RemoteServerEntity.
        :param name: The name of this RemoteServerEntity.
        :param one_drive_account_type: The one_drive_account_type of this RemoteServerEntity.
        :param pin_to_site_region: The pin_to_site_region of this RemoteServerEntity.
        :param pinned_region: The pinned_region of this RemoteServerEntity.
        :param port: The port of this RemoteServerEntity.
        :param rackspace_container: The rackspace_container of this RemoteServerEntity.
        :param rackspace_region: The rackspace_region of this RemoteServerEntity.
        :param rackspace_username: The rackspace_username of this RemoteServerEntity.
        :param remote_home_path: The remote_home_path of this RemoteServerEntity.
        :param s3_bucket: The s3_bucket of this RemoteServerEntity.
        :param s3_compatible_access_key: The s3_compatible_access_key of this RemoteServerEntity.
        :param s3_compatible_bucket: The s3_compatible_bucket of this RemoteServerEntity.
        :param s3_compatible_endpoint: The s3_compatible_endpoint of this RemoteServerEntity.
        :param s3_compatible_region: The s3_compatible_region of this RemoteServerEntity.
        :param s3_region: The s3_region of this RemoteServerEntity.
        :param server_certificate: The server_certificate of this RemoteServerEntity.
        :param server_host_key: The server_host_key of this RemoteServerEntity.
        :param server_type: The server_type of this RemoteServerEntity.
        :param ssl: The ssl of this RemoteServerEntity.
        :param username: The username of this RemoteServerEntity.
        :param wasabi_access_key: The wasabi_access_key of this RemoteServerEntity.
        :param wasabi_bucket: The wasabi_bucket of this RemoteServerEntity.
        :param wasabi_region: The wasabi_region of this RemoteServerEntity.
        """
        self.openapi_types = {
            'auth_account_name': str,
            'auth_setup_link': str,
            'auth_status': str,
            'authentication_method': str,
            'aws_access_key': str,
            'azure_blob_storage_account': str,
            'azure_blob_storage_container': str,
            'azure_blob_storage_sas_token': str,
            'azure_files_storage_account': str,
            'azure_files_storage_sas_token': str,
            'azure_files_storage_share_name': str,
            'backblaze_b2_bucket': str,
            'backblaze_b2_s3_endpoint': str,
            'disabled': bool,
            'enable_dedicated_ips': bool,
            'filebase_access_key': str,
            'filebase_bucket': str,
            'files_agent_api_token': str,
            'files_agent_permission_set': str,
            'files_agent_root': str,
            'google_cloud_storage_bucket': str,
            'google_cloud_storage_project_id': str,
            'hostname': str,
            'id': int,
            'max_connections': int,
            'name': str,
            'one_drive_account_type': str,
            'pin_to_site_region': bool,
            'pinned_region': str,
            'port': int,
            'rackspace_container': str,
            'rackspace_region': str,
            'rackspace_username': str,
            'remote_home_path': str,
            's3_bucket': str,
            's3_compatible_access_key': str,
            's3_compatible_bucket': str,
            's3_compatible_endpoint': str,
            's3_compatible_region': str,
            's3_region': str,
            'server_certificate': str,
            'server_host_key': str,
            'server_type': str,
            'ssl': str,
            'username': str,
            'wasabi_access_key': str,
            'wasabi_bucket': str,
            'wasabi_region': str
        }

        self.attribute_map = {
            'auth_account_name': 'auth_account_name',
            'auth_setup_link': 'auth_setup_link',
            'auth_status': 'auth_status',
            'authentication_method': 'authentication_method',
            'aws_access_key': 'aws_access_key',
            'azure_blob_storage_account': 'azure_blob_storage_account',
            'azure_blob_storage_container': 'azure_blob_storage_container',
            'azure_blob_storage_sas_token': 'azure_blob_storage_sas_token',
            'azure_files_storage_account': 'azure_files_storage_account',
            'azure_files_storage_sas_token': 'azure_files_storage_sas_token',
            'azure_files_storage_share_name': 'azure_files_storage_share_name',
            'backblaze_b2_bucket': 'backblaze_b2_bucket',
            'backblaze_b2_s3_endpoint': 'backblaze_b2_s3_endpoint',
            'disabled': 'disabled',
            'enable_dedicated_ips': 'enable_dedicated_ips',
            'filebase_access_key': 'filebase_access_key',
            'filebase_bucket': 'filebase_bucket',
            'files_agent_api_token': 'files_agent_api_token',
            'files_agent_permission_set': 'files_agent_permission_set',
            'files_agent_root': 'files_agent_root',
            'google_cloud_storage_bucket': 'google_cloud_storage_bucket',
            'google_cloud_storage_project_id': 'google_cloud_storage_project_id',
            'hostname': 'hostname',
            'id': 'id',
            'max_connections': 'max_connections',
            'name': 'name',
            'one_drive_account_type': 'one_drive_account_type',
            'pin_to_site_region': 'pin_to_site_region',
            'pinned_region': 'pinned_region',
            'port': 'port',
            'rackspace_container': 'rackspace_container',
            'rackspace_region': 'rackspace_region',
            'rackspace_username': 'rackspace_username',
            'remote_home_path': 'remote_home_path',
            's3_bucket': 's3_bucket',
            's3_compatible_access_key': 's3_compatible_access_key',
            's3_compatible_bucket': 's3_compatible_bucket',
            's3_compatible_endpoint': 's3_compatible_endpoint',
            's3_compatible_region': 's3_compatible_region',
            's3_region': 's3_region',
            'server_certificate': 'server_certificate',
            'server_host_key': 'server_host_key',
            'server_type': 'server_type',
            'ssl': 'ssl',
            'username': 'username',
            'wasabi_access_key': 'wasabi_access_key',
            'wasabi_bucket': 'wasabi_bucket',
            'wasabi_region': 'wasabi_region'
        }

        self._auth_account_name = auth_account_name
        self._auth_setup_link = auth_setup_link
        self._auth_status = auth_status
        self._authentication_method = authentication_method
        self._aws_access_key = aws_access_key
        self._azure_blob_storage_account = azure_blob_storage_account
        self._azure_blob_storage_container = azure_blob_storage_container
        self._azure_blob_storage_sas_token = azure_blob_storage_sas_token
        self._azure_files_storage_account = azure_files_storage_account
        self._azure_files_storage_sas_token = azure_files_storage_sas_token
        self._azure_files_storage_share_name = azure_files_storage_share_name
        self._backblaze_b2_bucket = backblaze_b2_bucket
        self._backblaze_b2_s3_endpoint = backblaze_b2_s3_endpoint
        self._disabled = disabled
        self._enable_dedicated_ips = enable_dedicated_ips
        self._filebase_access_key = filebase_access_key
        self._filebase_bucket = filebase_bucket
        self._files_agent_api_token = files_agent_api_token
        self._files_agent_permission_set = files_agent_permission_set
        self._files_agent_root = files_agent_root
        self._google_cloud_storage_bucket = google_cloud_storage_bucket
        self._google_cloud_storage_project_id = google_cloud_storage_project_id
        self._hostname = hostname
        self._id = id
        self._max_connections = max_connections
        self._name = name
        self._one_drive_account_type = one_drive_account_type
        self._pin_to_site_region = pin_to_site_region
        self._pinned_region = pinned_region
        self._port = port
        self._rackspace_container = rackspace_container
        self._rackspace_region = rackspace_region
        self._rackspace_username = rackspace_username
        self._remote_home_path = remote_home_path
        self._s3_bucket = s3_bucket
        self._s3_compatible_access_key = s3_compatible_access_key
        self._s3_compatible_bucket = s3_compatible_bucket
        self._s3_compatible_endpoint = s3_compatible_endpoint
        self._s3_compatible_region = s3_compatible_region
        self._s3_region = s3_region
        self._server_certificate = server_certificate
        self._server_host_key = server_host_key
        self._server_type = server_type
        self._ssl = ssl
        self._username = username
        self._wasabi_access_key = wasabi_access_key
        self._wasabi_bucket = wasabi_bucket
        self._wasabi_region = wasabi_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteServerEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteServerEntity of this RemoteServerEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_account_name(self):
        """Gets the auth_account_name of this RemoteServerEntity.

        Describes the authorized account

        :return: The auth_account_name of this RemoteServerEntity.
        :rtype: str
        """
        return self._auth_account_name

    @auth_account_name.setter
    def auth_account_name(self, auth_account_name):
        """Sets the auth_account_name of this RemoteServerEntity.

        Describes the authorized account

        :param auth_account_name: The auth_account_name of this RemoteServerEntity.
        :type auth_account_name: str
        """

        self._auth_account_name = auth_account_name

    @property
    def auth_setup_link(self):
        """Gets the auth_setup_link of this RemoteServerEntity.

        Returns link to login with an Oauth provider

        :return: The auth_setup_link of this RemoteServerEntity.
        :rtype: str
        """
        return self._auth_setup_link

    @auth_setup_link.setter
    def auth_setup_link(self, auth_setup_link):
        """Sets the auth_setup_link of this RemoteServerEntity.

        Returns link to login with an Oauth provider

        :param auth_setup_link: The auth_setup_link of this RemoteServerEntity.
        :type auth_setup_link: str
        """

        self._auth_setup_link = auth_setup_link

    @property
    def auth_status(self):
        """Gets the auth_status of this RemoteServerEntity.

        Either `in_setup` or `complete`

        :return: The auth_status of this RemoteServerEntity.
        :rtype: str
        """
        return self._auth_status

    @auth_status.setter
    def auth_status(self, auth_status):
        """Sets the auth_status of this RemoteServerEntity.

        Either `in_setup` or `complete`

        :param auth_status: The auth_status of this RemoteServerEntity.
        :type auth_status: str
        """
        allowed_values = ["not_applicable", "in_setup", "complete", "reauthenticate"]  # noqa: E501
        if auth_status not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_status` ({0}), must be one of {1}"
                .format(auth_status, allowed_values)
            )

        self._auth_status = auth_status

    @property
    def authentication_method(self):
        """Gets the authentication_method of this RemoteServerEntity.

        Type of authentication method

        :return: The authentication_method of this RemoteServerEntity.
        :rtype: str
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this RemoteServerEntity.

        Type of authentication method

        :param authentication_method: The authentication_method of this RemoteServerEntity.
        :type authentication_method: str
        """

        self._authentication_method = authentication_method

    @property
    def aws_access_key(self):
        """Gets the aws_access_key of this RemoteServerEntity.

        AWS Access Key.

        :return: The aws_access_key of this RemoteServerEntity.
        :rtype: str
        """
        return self._aws_access_key

    @aws_access_key.setter
    def aws_access_key(self, aws_access_key):
        """Sets the aws_access_key of this RemoteServerEntity.

        AWS Access Key.

        :param aws_access_key: The aws_access_key of this RemoteServerEntity.
        :type aws_access_key: str
        """

        self._aws_access_key = aws_access_key

    @property
    def azure_blob_storage_account(self):
        """Gets the azure_blob_storage_account of this RemoteServerEntity.

        Azure Blob Storage Account name

        :return: The azure_blob_storage_account of this RemoteServerEntity.
        :rtype: str
        """
        return self._azure_blob_storage_account

    @azure_blob_storage_account.setter
    def azure_blob_storage_account(self, azure_blob_storage_account):
        """Sets the azure_blob_storage_account of this RemoteServerEntity.

        Azure Blob Storage Account name

        :param azure_blob_storage_account: The azure_blob_storage_account of this RemoteServerEntity.
        :type azure_blob_storage_account: str
        """

        self._azure_blob_storage_account = azure_blob_storage_account

    @property
    def azure_blob_storage_container(self):
        """Gets the azure_blob_storage_container of this RemoteServerEntity.

        Azure Blob Storage Container name

        :return: The azure_blob_storage_container of this RemoteServerEntity.
        :rtype: str
        """
        return self._azure_blob_storage_container

    @azure_blob_storage_container.setter
    def azure_blob_storage_container(self, azure_blob_storage_container):
        """Sets the azure_blob_storage_container of this RemoteServerEntity.

        Azure Blob Storage Container name

        :param azure_blob_storage_container: The azure_blob_storage_container of this RemoteServerEntity.
        :type azure_blob_storage_container: str
        """

        self._azure_blob_storage_container = azure_blob_storage_container

    @property
    def azure_blob_storage_sas_token(self):
        """Gets the azure_blob_storage_sas_token of this RemoteServerEntity.

        Shared Access Signature (SAS) token

        :return: The azure_blob_storage_sas_token of this RemoteServerEntity.
        :rtype: str
        """
        return self._azure_blob_storage_sas_token

    @azure_blob_storage_sas_token.setter
    def azure_blob_storage_sas_token(self, azure_blob_storage_sas_token):
        """Sets the azure_blob_storage_sas_token of this RemoteServerEntity.

        Shared Access Signature (SAS) token

        :param azure_blob_storage_sas_token: The azure_blob_storage_sas_token of this RemoteServerEntity.
        :type azure_blob_storage_sas_token: str
        """

        self._azure_blob_storage_sas_token = azure_blob_storage_sas_token

    @property
    def azure_files_storage_account(self):
        """Gets the azure_files_storage_account of this RemoteServerEntity.

        Azure File Storage Account name

        :return: The azure_files_storage_account of this RemoteServerEntity.
        :rtype: str
        """
        return self._azure_files_storage_account

    @azure_files_storage_account.setter
    def azure_files_storage_account(self, azure_files_storage_account):
        """Sets the azure_files_storage_account of this RemoteServerEntity.

        Azure File Storage Account name

        :param azure_files_storage_account: The azure_files_storage_account of this RemoteServerEntity.
        :type azure_files_storage_account: str
        """

        self._azure_files_storage_account = azure_files_storage_account

    @property
    def azure_files_storage_sas_token(self):
        """Gets the azure_files_storage_sas_token of this RemoteServerEntity.

        Shared Access Signature (SAS) token

        :return: The azure_files_storage_sas_token of this RemoteServerEntity.
        :rtype: str
        """
        return self._azure_files_storage_sas_token

    @azure_files_storage_sas_token.setter
    def azure_files_storage_sas_token(self, azure_files_storage_sas_token):
        """Sets the azure_files_storage_sas_token of this RemoteServerEntity.

        Shared Access Signature (SAS) token

        :param azure_files_storage_sas_token: The azure_files_storage_sas_token of this RemoteServerEntity.
        :type azure_files_storage_sas_token: str
        """

        self._azure_files_storage_sas_token = azure_files_storage_sas_token

    @property
    def azure_files_storage_share_name(self):
        """Gets the azure_files_storage_share_name of this RemoteServerEntity.

        Azure File Storage Share name

        :return: The azure_files_storage_share_name of this RemoteServerEntity.
        :rtype: str
        """
        return self._azure_files_storage_share_name

    @azure_files_storage_share_name.setter
    def azure_files_storage_share_name(self, azure_files_storage_share_name):
        """Sets the azure_files_storage_share_name of this RemoteServerEntity.

        Azure File Storage Share name

        :param azure_files_storage_share_name: The azure_files_storage_share_name of this RemoteServerEntity.
        :type azure_files_storage_share_name: str
        """

        self._azure_files_storage_share_name = azure_files_storage_share_name

    @property
    def backblaze_b2_bucket(self):
        """Gets the backblaze_b2_bucket of this RemoteServerEntity.

        Backblaze B2 Cloud Storage Bucket name

        :return: The backblaze_b2_bucket of this RemoteServerEntity.
        :rtype: str
        """
        return self._backblaze_b2_bucket

    @backblaze_b2_bucket.setter
    def backblaze_b2_bucket(self, backblaze_b2_bucket):
        """Sets the backblaze_b2_bucket of this RemoteServerEntity.

        Backblaze B2 Cloud Storage Bucket name

        :param backblaze_b2_bucket: The backblaze_b2_bucket of this RemoteServerEntity.
        :type backblaze_b2_bucket: str
        """

        self._backblaze_b2_bucket = backblaze_b2_bucket

    @property
    def backblaze_b2_s3_endpoint(self):
        """Gets the backblaze_b2_s3_endpoint of this RemoteServerEntity.

        Backblaze B2 Cloud Storage S3 Endpoint

        :return: The backblaze_b2_s3_endpoint of this RemoteServerEntity.
        :rtype: str
        """
        return self._backblaze_b2_s3_endpoint

    @backblaze_b2_s3_endpoint.setter
    def backblaze_b2_s3_endpoint(self, backblaze_b2_s3_endpoint):
        """Sets the backblaze_b2_s3_endpoint of this RemoteServerEntity.

        Backblaze B2 Cloud Storage S3 Endpoint

        :param backblaze_b2_s3_endpoint: The backblaze_b2_s3_endpoint of this RemoteServerEntity.
        :type backblaze_b2_s3_endpoint: str
        """

        self._backblaze_b2_s3_endpoint = backblaze_b2_s3_endpoint

    @property
    def disabled(self):
        """Gets the disabled of this RemoteServerEntity.

        If true, this server has been disabled due to failures.  Make any change or set disabled to false to clear this flag.

        :return: The disabled of this RemoteServerEntity.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this RemoteServerEntity.

        If true, this server has been disabled due to failures.  Make any change or set disabled to false to clear this flag.

        :param disabled: The disabled of this RemoteServerEntity.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def enable_dedicated_ips(self):
        """Gets the enable_dedicated_ips of this RemoteServerEntity.

        `true` if remote server only accepts connections from dedicated IPs

        :return: The enable_dedicated_ips of this RemoteServerEntity.
        :rtype: bool
        """
        return self._enable_dedicated_ips

    @enable_dedicated_ips.setter
    def enable_dedicated_ips(self, enable_dedicated_ips):
        """Sets the enable_dedicated_ips of this RemoteServerEntity.

        `true` if remote server only accepts connections from dedicated IPs

        :param enable_dedicated_ips: The enable_dedicated_ips of this RemoteServerEntity.
        :type enable_dedicated_ips: bool
        """

        self._enable_dedicated_ips = enable_dedicated_ips

    @property
    def filebase_access_key(self):
        """Gets the filebase_access_key of this RemoteServerEntity.

        Filebase Access Key.

        :return: The filebase_access_key of this RemoteServerEntity.
        :rtype: str
        """
        return self._filebase_access_key

    @filebase_access_key.setter
    def filebase_access_key(self, filebase_access_key):
        """Sets the filebase_access_key of this RemoteServerEntity.

        Filebase Access Key.

        :param filebase_access_key: The filebase_access_key of this RemoteServerEntity.
        :type filebase_access_key: str
        """

        self._filebase_access_key = filebase_access_key

    @property
    def filebase_bucket(self):
        """Gets the filebase_bucket of this RemoteServerEntity.

        Filebase Bucket name

        :return: The filebase_bucket of this RemoteServerEntity.
        :rtype: str
        """
        return self._filebase_bucket

    @filebase_bucket.setter
    def filebase_bucket(self, filebase_bucket):
        """Sets the filebase_bucket of this RemoteServerEntity.

        Filebase Bucket name

        :param filebase_bucket: The filebase_bucket of this RemoteServerEntity.
        :type filebase_bucket: str
        """

        self._filebase_bucket = filebase_bucket

    @property
    def files_agent_api_token(self):
        """Gets the files_agent_api_token of this RemoteServerEntity.

        Files Agent API Token

        :return: The files_agent_api_token of this RemoteServerEntity.
        :rtype: str
        """
        return self._files_agent_api_token

    @files_agent_api_token.setter
    def files_agent_api_token(self, files_agent_api_token):
        """Sets the files_agent_api_token of this RemoteServerEntity.

        Files Agent API Token

        :param files_agent_api_token: The files_agent_api_token of this RemoteServerEntity.
        :type files_agent_api_token: str
        """

        self._files_agent_api_token = files_agent_api_token

    @property
    def files_agent_permission_set(self):
        """Gets the files_agent_permission_set of this RemoteServerEntity.

        Local permissions for files agent. read_only, write_only, or read_write

        :return: The files_agent_permission_set of this RemoteServerEntity.
        :rtype: str
        """
        return self._files_agent_permission_set

    @files_agent_permission_set.setter
    def files_agent_permission_set(self, files_agent_permission_set):
        """Sets the files_agent_permission_set of this RemoteServerEntity.

        Local permissions for files agent. read_only, write_only, or read_write

        :param files_agent_permission_set: The files_agent_permission_set of this RemoteServerEntity.
        :type files_agent_permission_set: str
        """
        allowed_values = ["read_write", "read_only", "write_only"]  # noqa: E501
        if files_agent_permission_set not in allowed_values:
            raise ValueError(
                "Invalid value for `files_agent_permission_set` ({0}), must be one of {1}"
                .format(files_agent_permission_set, allowed_values)
            )

        self._files_agent_permission_set = files_agent_permission_set

    @property
    def files_agent_root(self):
        """Gets the files_agent_root of this RemoteServerEntity.

        Agent local root path

        :return: The files_agent_root of this RemoteServerEntity.
        :rtype: str
        """
        return self._files_agent_root

    @files_agent_root.setter
    def files_agent_root(self, files_agent_root):
        """Sets the files_agent_root of this RemoteServerEntity.

        Agent local root path

        :param files_agent_root: The files_agent_root of this RemoteServerEntity.
        :type files_agent_root: str
        """

        self._files_agent_root = files_agent_root

    @property
    def google_cloud_storage_bucket(self):
        """Gets the google_cloud_storage_bucket of this RemoteServerEntity.

        Google Cloud Storage bucket name

        :return: The google_cloud_storage_bucket of this RemoteServerEntity.
        :rtype: str
        """
        return self._google_cloud_storage_bucket

    @google_cloud_storage_bucket.setter
    def google_cloud_storage_bucket(self, google_cloud_storage_bucket):
        """Sets the google_cloud_storage_bucket of this RemoteServerEntity.

        Google Cloud Storage bucket name

        :param google_cloud_storage_bucket: The google_cloud_storage_bucket of this RemoteServerEntity.
        :type google_cloud_storage_bucket: str
        """

        self._google_cloud_storage_bucket = google_cloud_storage_bucket

    @property
    def google_cloud_storage_project_id(self):
        """Gets the google_cloud_storage_project_id of this RemoteServerEntity.

        Google Cloud Project ID

        :return: The google_cloud_storage_project_id of this RemoteServerEntity.
        :rtype: str
        """
        return self._google_cloud_storage_project_id

    @google_cloud_storage_project_id.setter
    def google_cloud_storage_project_id(self, google_cloud_storage_project_id):
        """Sets the google_cloud_storage_project_id of this RemoteServerEntity.

        Google Cloud Project ID

        :param google_cloud_storage_project_id: The google_cloud_storage_project_id of this RemoteServerEntity.
        :type google_cloud_storage_project_id: str
        """

        self._google_cloud_storage_project_id = google_cloud_storage_project_id

    @property
    def hostname(self):
        """Gets the hostname of this RemoteServerEntity.

        Hostname or IP address

        :return: The hostname of this RemoteServerEntity.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this RemoteServerEntity.

        Hostname or IP address

        :param hostname: The hostname of this RemoteServerEntity.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this RemoteServerEntity.

        Remote server ID

        :return: The id of this RemoteServerEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteServerEntity.

        Remote server ID

        :param id: The id of this RemoteServerEntity.
        :type id: int
        """

        self._id = id

    @property
    def max_connections(self):
        """Gets the max_connections of this RemoteServerEntity.

        Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).

        :return: The max_connections of this RemoteServerEntity.
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this RemoteServerEntity.

        Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).

        :param max_connections: The max_connections of this RemoteServerEntity.
        :type max_connections: int
        """

        self._max_connections = max_connections

    @property
    def name(self):
        """Gets the name of this RemoteServerEntity.

        Internal name for your reference

        :return: The name of this RemoteServerEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteServerEntity.

        Internal name for your reference

        :param name: The name of this RemoteServerEntity.
        :type name: str
        """

        self._name = name

    @property
    def one_drive_account_type(self):
        """Gets the one_drive_account_type of this RemoteServerEntity.

        Either personal or business_other account types

        :return: The one_drive_account_type of this RemoteServerEntity.
        :rtype: str
        """
        return self._one_drive_account_type

    @one_drive_account_type.setter
    def one_drive_account_type(self, one_drive_account_type):
        """Sets the one_drive_account_type of this RemoteServerEntity.

        Either personal or business_other account types

        :param one_drive_account_type: The one_drive_account_type of this RemoteServerEntity.
        :type one_drive_account_type: str
        """
        allowed_values = ["personal", "business_other"]  # noqa: E501
        if one_drive_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `one_drive_account_type` ({0}), must be one of {1}"
                .format(one_drive_account_type, allowed_values)
            )

        self._one_drive_account_type = one_drive_account_type

    @property
    def pin_to_site_region(self):
        """Gets the pin_to_site_region of this RemoteServerEntity.

        If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.

        :return: The pin_to_site_region of this RemoteServerEntity.
        :rtype: bool
        """
        return self._pin_to_site_region

    @pin_to_site_region.setter
    def pin_to_site_region(self, pin_to_site_region):
        """Sets the pin_to_site_region of this RemoteServerEntity.

        If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.

        :param pin_to_site_region: The pin_to_site_region of this RemoteServerEntity.
        :type pin_to_site_region: bool
        """

        self._pin_to_site_region = pin_to_site_region

    @property
    def pinned_region(self):
        """Gets the pinned_region of this RemoteServerEntity.

        If set, all communciations with this remote server are made through the provided region.

        :return: The pinned_region of this RemoteServerEntity.
        :rtype: str
        """
        return self._pinned_region

    @pinned_region.setter
    def pinned_region(self, pinned_region):
        """Sets the pinned_region of this RemoteServerEntity.

        If set, all communciations with this remote server are made through the provided region.

        :param pinned_region: The pinned_region of this RemoteServerEntity.
        :type pinned_region: str
        """

        self._pinned_region = pinned_region

    @property
    def port(self):
        """Gets the port of this RemoteServerEntity.

        Port for remote server.  Not needed for S3.

        :return: The port of this RemoteServerEntity.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RemoteServerEntity.

        Port for remote server.  Not needed for S3.

        :param port: The port of this RemoteServerEntity.
        :type port: int
        """

        self._port = port

    @property
    def rackspace_container(self):
        """Gets the rackspace_container of this RemoteServerEntity.

        The name of the container (top level directory) where files will sync.

        :return: The rackspace_container of this RemoteServerEntity.
        :rtype: str
        """
        return self._rackspace_container

    @rackspace_container.setter
    def rackspace_container(self, rackspace_container):
        """Sets the rackspace_container of this RemoteServerEntity.

        The name of the container (top level directory) where files will sync.

        :param rackspace_container: The rackspace_container of this RemoteServerEntity.
        :type rackspace_container: str
        """

        self._rackspace_container = rackspace_container

    @property
    def rackspace_region(self):
        """Gets the rackspace_region of this RemoteServerEntity.

        Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/

        :return: The rackspace_region of this RemoteServerEntity.
        :rtype: str
        """
        return self._rackspace_region

    @rackspace_region.setter
    def rackspace_region(self, rackspace_region):
        """Sets the rackspace_region of this RemoteServerEntity.

        Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/

        :param rackspace_region: The rackspace_region of this RemoteServerEntity.
        :type rackspace_region: str
        """

        self._rackspace_region = rackspace_region

    @property
    def rackspace_username(self):
        """Gets the rackspace_username of this RemoteServerEntity.

        Rackspace username used to login to the Rackspace Cloud Control Panel.

        :return: The rackspace_username of this RemoteServerEntity.
        :rtype: str
        """
        return self._rackspace_username

    @rackspace_username.setter
    def rackspace_username(self, rackspace_username):
        """Sets the rackspace_username of this RemoteServerEntity.

        Rackspace username used to login to the Rackspace Cloud Control Panel.

        :param rackspace_username: The rackspace_username of this RemoteServerEntity.
        :type rackspace_username: str
        """

        self._rackspace_username = rackspace_username

    @property
    def remote_home_path(self):
        """Gets the remote_home_path of this RemoteServerEntity.

        Initial home folder on remote server

        :return: The remote_home_path of this RemoteServerEntity.
        :rtype: str
        """
        return self._remote_home_path

    @remote_home_path.setter
    def remote_home_path(self, remote_home_path):
        """Sets the remote_home_path of this RemoteServerEntity.

        Initial home folder on remote server

        :param remote_home_path: The remote_home_path of this RemoteServerEntity.
        :type remote_home_path: str
        """

        self._remote_home_path = remote_home_path

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this RemoteServerEntity.

        S3 bucket name

        :return: The s3_bucket of this RemoteServerEntity.
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this RemoteServerEntity.

        S3 bucket name

        :param s3_bucket: The s3_bucket of this RemoteServerEntity.
        :type s3_bucket: str
        """

        self._s3_bucket = s3_bucket

    @property
    def s3_compatible_access_key(self):
        """Gets the s3_compatible_access_key of this RemoteServerEntity.

        S3-compatible Access Key.

        :return: The s3_compatible_access_key of this RemoteServerEntity.
        :rtype: str
        """
        return self._s3_compatible_access_key

    @s3_compatible_access_key.setter
    def s3_compatible_access_key(self, s3_compatible_access_key):
        """Sets the s3_compatible_access_key of this RemoteServerEntity.

        S3-compatible Access Key.

        :param s3_compatible_access_key: The s3_compatible_access_key of this RemoteServerEntity.
        :type s3_compatible_access_key: str
        """

        self._s3_compatible_access_key = s3_compatible_access_key

    @property
    def s3_compatible_bucket(self):
        """Gets the s3_compatible_bucket of this RemoteServerEntity.

        S3-compatible Bucket name

        :return: The s3_compatible_bucket of this RemoteServerEntity.
        :rtype: str
        """
        return self._s3_compatible_bucket

    @s3_compatible_bucket.setter
    def s3_compatible_bucket(self, s3_compatible_bucket):
        """Sets the s3_compatible_bucket of this RemoteServerEntity.

        S3-compatible Bucket name

        :param s3_compatible_bucket: The s3_compatible_bucket of this RemoteServerEntity.
        :type s3_compatible_bucket: str
        """

        self._s3_compatible_bucket = s3_compatible_bucket

    @property
    def s3_compatible_endpoint(self):
        """Gets the s3_compatible_endpoint of this RemoteServerEntity.

        S3-compatible endpoint

        :return: The s3_compatible_endpoint of this RemoteServerEntity.
        :rtype: str
        """
        return self._s3_compatible_endpoint

    @s3_compatible_endpoint.setter
    def s3_compatible_endpoint(self, s3_compatible_endpoint):
        """Sets the s3_compatible_endpoint of this RemoteServerEntity.

        S3-compatible endpoint

        :param s3_compatible_endpoint: The s3_compatible_endpoint of this RemoteServerEntity.
        :type s3_compatible_endpoint: str
        """

        self._s3_compatible_endpoint = s3_compatible_endpoint

    @property
    def s3_compatible_region(self):
        """Gets the s3_compatible_region of this RemoteServerEntity.

        S3-compatible endpoint

        :return: The s3_compatible_region of this RemoteServerEntity.
        :rtype: str
        """
        return self._s3_compatible_region

    @s3_compatible_region.setter
    def s3_compatible_region(self, s3_compatible_region):
        """Sets the s3_compatible_region of this RemoteServerEntity.

        S3-compatible endpoint

        :param s3_compatible_region: The s3_compatible_region of this RemoteServerEntity.
        :type s3_compatible_region: str
        """

        self._s3_compatible_region = s3_compatible_region

    @property
    def s3_region(self):
        """Gets the s3_region of this RemoteServerEntity.

        S3 region

        :return: The s3_region of this RemoteServerEntity.
        :rtype: str
        """
        return self._s3_region

    @s3_region.setter
    def s3_region(self, s3_region):
        """Sets the s3_region of this RemoteServerEntity.

        S3 region

        :param s3_region: The s3_region of this RemoteServerEntity.
        :type s3_region: str
        """

        self._s3_region = s3_region

    @property
    def server_certificate(self):
        """Gets the server_certificate of this RemoteServerEntity.

        Remote server certificate

        :return: The server_certificate of this RemoteServerEntity.
        :rtype: str
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this RemoteServerEntity.

        Remote server certificate

        :param server_certificate: The server_certificate of this RemoteServerEntity.
        :type server_certificate: str
        """
        allowed_values = ["require_match", "allow_any"]  # noqa: E501
        if server_certificate not in allowed_values:
            raise ValueError(
                "Invalid value for `server_certificate` ({0}), must be one of {1}"
                .format(server_certificate, allowed_values)
            )

        self._server_certificate = server_certificate

    @property
    def server_host_key(self):
        """Gets the server_host_key of this RemoteServerEntity.

        Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts

        :return: The server_host_key of this RemoteServerEntity.
        :rtype: str
        """
        return self._server_host_key

    @server_host_key.setter
    def server_host_key(self, server_host_key):
        """Sets the server_host_key of this RemoteServerEntity.

        Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts

        :param server_host_key: The server_host_key of this RemoteServerEntity.
        :type server_host_key: str
        """

        self._server_host_key = server_host_key

    @property
    def server_type(self):
        """Gets the server_type of this RemoteServerEntity.

        Remote server type.

        :return: The server_type of this RemoteServerEntity.
        :rtype: str
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this RemoteServerEntity.

        Remote server type.

        :param server_type: The server_type of this RemoteServerEntity.
        :type server_type: str
        """
        allowed_values = ["ftp", "sftp", "s3", "google_cloud_storage", "webdav", "wasabi", "backblaze_b2", "one_drive", "rackspace", "box", "dropbox", "google_drive", "azure", "sharepoint", "s3_compatible", "azure_files", "files_agent", "filebase"]  # noqa: E501
        if server_type not in allowed_values:
            raise ValueError(
                "Invalid value for `server_type` ({0}), must be one of {1}"
                .format(server_type, allowed_values)
            )

        self._server_type = server_type

    @property
    def ssl(self):
        """Gets the ssl of this RemoteServerEntity.

        Should we require SSL?

        :return: The ssl of this RemoteServerEntity.
        :rtype: str
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this RemoteServerEntity.

        Should we require SSL?

        :param ssl: The ssl of this RemoteServerEntity.
        :type ssl: str
        """
        allowed_values = ["if_available", "require", "require_implicit", "never"]  # noqa: E501
        if ssl not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl` ({0}), must be one of {1}"
                .format(ssl, allowed_values)
            )

        self._ssl = ssl

    @property
    def username(self):
        """Gets the username of this RemoteServerEntity.

        Remote server username.  Not needed for S3 buckets.

        :return: The username of this RemoteServerEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RemoteServerEntity.

        Remote server username.  Not needed for S3 buckets.

        :param username: The username of this RemoteServerEntity.
        :type username: str
        """

        self._username = username

    @property
    def wasabi_access_key(self):
        """Gets the wasabi_access_key of this RemoteServerEntity.

        Wasabi access key.

        :return: The wasabi_access_key of this RemoteServerEntity.
        :rtype: str
        """
        return self._wasabi_access_key

    @wasabi_access_key.setter
    def wasabi_access_key(self, wasabi_access_key):
        """Sets the wasabi_access_key of this RemoteServerEntity.

        Wasabi access key.

        :param wasabi_access_key: The wasabi_access_key of this RemoteServerEntity.
        :type wasabi_access_key: str
        """

        self._wasabi_access_key = wasabi_access_key

    @property
    def wasabi_bucket(self):
        """Gets the wasabi_bucket of this RemoteServerEntity.

        Wasabi Bucket name

        :return: The wasabi_bucket of this RemoteServerEntity.
        :rtype: str
        """
        return self._wasabi_bucket

    @wasabi_bucket.setter
    def wasabi_bucket(self, wasabi_bucket):
        """Sets the wasabi_bucket of this RemoteServerEntity.

        Wasabi Bucket name

        :param wasabi_bucket: The wasabi_bucket of this RemoteServerEntity.
        :type wasabi_bucket: str
        """

        self._wasabi_bucket = wasabi_bucket

    @property
    def wasabi_region(self):
        """Gets the wasabi_region of this RemoteServerEntity.

        Wasabi region

        :return: The wasabi_region of this RemoteServerEntity.
        :rtype: str
        """
        return self._wasabi_region

    @wasabi_region.setter
    def wasabi_region(self, wasabi_region):
        """Sets the wasabi_region of this RemoteServerEntity.

        Wasabi region

        :param wasabi_region: The wasabi_region of this RemoteServerEntity.
        :type wasabi_region: str
        """

        self._wasabi_region = wasabi_region
