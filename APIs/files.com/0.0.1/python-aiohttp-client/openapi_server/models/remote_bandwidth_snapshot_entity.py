# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoteBandwidthSnapshotEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, logged_at: datetime=None, remote_server_id: int=None, sync_bytes_received: float=None, sync_bytes_sent: float=None):
        """RemoteBandwidthSnapshotEntity - a model defined in OpenAPI

        :param id: The id of this RemoteBandwidthSnapshotEntity.
        :param logged_at: The logged_at of this RemoteBandwidthSnapshotEntity.
        :param remote_server_id: The remote_server_id of this RemoteBandwidthSnapshotEntity.
        :param sync_bytes_received: The sync_bytes_received of this RemoteBandwidthSnapshotEntity.
        :param sync_bytes_sent: The sync_bytes_sent of this RemoteBandwidthSnapshotEntity.
        """
        self.openapi_types = {
            'id': int,
            'logged_at': datetime,
            'remote_server_id': int,
            'sync_bytes_received': float,
            'sync_bytes_sent': float
        }

        self.attribute_map = {
            'id': 'id',
            'logged_at': 'logged_at',
            'remote_server_id': 'remote_server_id',
            'sync_bytes_received': 'sync_bytes_received',
            'sync_bytes_sent': 'sync_bytes_sent'
        }

        self._id = id
        self._logged_at = logged_at
        self._remote_server_id = remote_server_id
        self._sync_bytes_received = sync_bytes_received
        self._sync_bytes_sent = sync_bytes_sent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoteBandwidthSnapshotEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoteBandwidthSnapshotEntity of this RemoteBandwidthSnapshotEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RemoteBandwidthSnapshotEntity.

        Site bandwidth ID

        :return: The id of this RemoteBandwidthSnapshotEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RemoteBandwidthSnapshotEntity.

        Site bandwidth ID

        :param id: The id of this RemoteBandwidthSnapshotEntity.
        :type id: int
        """

        self._id = id

    @property
    def logged_at(self):
        """Gets the logged_at of this RemoteBandwidthSnapshotEntity.

        Time the site bandwidth report was logged

        :return: The logged_at of this RemoteBandwidthSnapshotEntity.
        :rtype: datetime
        """
        return self._logged_at

    @logged_at.setter
    def logged_at(self, logged_at):
        """Sets the logged_at of this RemoteBandwidthSnapshotEntity.

        Time the site bandwidth report was logged

        :param logged_at: The logged_at of this RemoteBandwidthSnapshotEntity.
        :type logged_at: datetime
        """

        self._logged_at = logged_at

    @property
    def remote_server_id(self):
        """Gets the remote_server_id of this RemoteBandwidthSnapshotEntity.

        ID of related Remote Server

        :return: The remote_server_id of this RemoteBandwidthSnapshotEntity.
        :rtype: int
        """
        return self._remote_server_id

    @remote_server_id.setter
    def remote_server_id(self, remote_server_id):
        """Sets the remote_server_id of this RemoteBandwidthSnapshotEntity.

        ID of related Remote Server

        :param remote_server_id: The remote_server_id of this RemoteBandwidthSnapshotEntity.
        :type remote_server_id: int
        """

        self._remote_server_id = remote_server_id

    @property
    def sync_bytes_received(self):
        """Gets the sync_bytes_received of this RemoteBandwidthSnapshotEntity.

        Site sync bandwidth report bytes received

        :return: The sync_bytes_received of this RemoteBandwidthSnapshotEntity.
        :rtype: float
        """
        return self._sync_bytes_received

    @sync_bytes_received.setter
    def sync_bytes_received(self, sync_bytes_received):
        """Sets the sync_bytes_received of this RemoteBandwidthSnapshotEntity.

        Site sync bandwidth report bytes received

        :param sync_bytes_received: The sync_bytes_received of this RemoteBandwidthSnapshotEntity.
        :type sync_bytes_received: float
        """

        self._sync_bytes_received = sync_bytes_received

    @property
    def sync_bytes_sent(self):
        """Gets the sync_bytes_sent of this RemoteBandwidthSnapshotEntity.

        Site sync bandwidth report bytes sent

        :return: The sync_bytes_sent of this RemoteBandwidthSnapshotEntity.
        :rtype: float
        """
        return self._sync_bytes_sent

    @sync_bytes_sent.setter
    def sync_bytes_sent(self, sync_bytes_sent):
        """Sets the sync_bytes_sent of this RemoteBandwidthSnapshotEntity.

        Site sync bandwidth report bytes sent

        :param sync_bytes_sent: The sync_bytes_sent of this RemoteBandwidthSnapshotEntity.
        :type sync_bytes_sent: float
        """

        self._sync_bytes_sent = sync_bytes_sent
