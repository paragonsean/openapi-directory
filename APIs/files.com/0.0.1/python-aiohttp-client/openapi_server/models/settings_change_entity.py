# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SettingsChangeEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changes: List[str]=None, created_at: datetime=None, user_id: int=None, user_is_files_support: bool=None, username: str=None):
        """SettingsChangeEntity - a model defined in OpenAPI

        :param changes: The changes of this SettingsChangeEntity.
        :param created_at: The created_at of this SettingsChangeEntity.
        :param user_id: The user_id of this SettingsChangeEntity.
        :param user_is_files_support: The user_is_files_support of this SettingsChangeEntity.
        :param username: The username of this SettingsChangeEntity.
        """
        self.openapi_types = {
            'changes': List[str],
            'created_at': datetime,
            'user_id': int,
            'user_is_files_support': bool,
            'username': str
        }

        self.attribute_map = {
            'changes': 'changes',
            'created_at': 'created_at',
            'user_id': 'user_id',
            'user_is_files_support': 'user_is_files_support',
            'username': 'username'
        }

        self._changes = changes
        self._created_at = created_at
        self._user_id = user_id
        self._user_is_files_support = user_is_files_support
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SettingsChangeEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SettingsChangeEntity of this SettingsChangeEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changes(self):
        """Gets the changes of this SettingsChangeEntity.

        Markdown-formatted change messages.

        :return: The changes of this SettingsChangeEntity.
        :rtype: List[str]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this SettingsChangeEntity.

        Markdown-formatted change messages.

        :param changes: The changes of this SettingsChangeEntity.
        :type changes: List[str]
        """

        self._changes = changes

    @property
    def created_at(self):
        """Gets the created_at of this SettingsChangeEntity.

        The time this change was made

        :return: The created_at of this SettingsChangeEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SettingsChangeEntity.

        The time this change was made

        :param created_at: The created_at of this SettingsChangeEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def user_id(self):
        """Gets the user_id of this SettingsChangeEntity.

        The user id responsible for this change

        :return: The user_id of this SettingsChangeEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SettingsChangeEntity.

        The user id responsible for this change

        :param user_id: The user_id of this SettingsChangeEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_is_files_support(self):
        """Gets the user_is_files_support of this SettingsChangeEntity.

        true if this change was performed by Files.com support.

        :return: The user_is_files_support of this SettingsChangeEntity.
        :rtype: bool
        """
        return self._user_is_files_support

    @user_is_files_support.setter
    def user_is_files_support(self, user_is_files_support):
        """Sets the user_is_files_support of this SettingsChangeEntity.

        true if this change was performed by Files.com support.

        :param user_is_files_support: The user_is_files_support of this SettingsChangeEntity.
        :type user_is_files_support: bool
        """

        self._user_is_files_support = user_is_files_support

    @property
    def username(self):
        """Gets the username of this SettingsChangeEntity.

        The username of the user responsible for this change

        :return: The username of this SettingsChangeEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SettingsChangeEntity.

        The username of the user responsible for this change

        :param username: The username of this SettingsChangeEntity.
        :type username: str
        """

        self._username = username
