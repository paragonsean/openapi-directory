# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClickwrapEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, id: int=None, name: str=None, use_with_bundles: str=None, use_with_inboxes: str=None, use_with_users: str=None):
        """ClickwrapEntity - a model defined in OpenAPI

        :param body: The body of this ClickwrapEntity.
        :param id: The id of this ClickwrapEntity.
        :param name: The name of this ClickwrapEntity.
        :param use_with_bundles: The use_with_bundles of this ClickwrapEntity.
        :param use_with_inboxes: The use_with_inboxes of this ClickwrapEntity.
        :param use_with_users: The use_with_users of this ClickwrapEntity.
        """
        self.openapi_types = {
            'body': str,
            'id': int,
            'name': str,
            'use_with_bundles': str,
            'use_with_inboxes': str,
            'use_with_users': str
        }

        self.attribute_map = {
            'body': 'body',
            'id': 'id',
            'name': 'name',
            'use_with_bundles': 'use_with_bundles',
            'use_with_inboxes': 'use_with_inboxes',
            'use_with_users': 'use_with_users'
        }

        self._body = body
        self._id = id
        self._name = name
        self._use_with_bundles = use_with_bundles
        self._use_with_inboxes = use_with_inboxes
        self._use_with_users = use_with_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClickwrapEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClickwrapEntity of this ClickwrapEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ClickwrapEntity.

        Body text of Clickwrap (supports Markdown formatting).

        :return: The body of this ClickwrapEntity.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ClickwrapEntity.

        Body text of Clickwrap (supports Markdown formatting).

        :param body: The body of this ClickwrapEntity.
        :type body: str
        """

        self._body = body

    @property
    def id(self):
        """Gets the id of this ClickwrapEntity.

        Clickwrap ID

        :return: The id of this ClickwrapEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClickwrapEntity.

        Clickwrap ID

        :param id: The id of this ClickwrapEntity.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ClickwrapEntity.

        Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)

        :return: The name of this ClickwrapEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClickwrapEntity.

        Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)

        :param name: The name of this ClickwrapEntity.
        :type name: str
        """

        self._name = name

    @property
    def use_with_bundles(self):
        """Gets the use_with_bundles of this ClickwrapEntity.

        Use this Clickwrap for Bundles?

        :return: The use_with_bundles of this ClickwrapEntity.
        :rtype: str
        """
        return self._use_with_bundles

    @use_with_bundles.setter
    def use_with_bundles(self, use_with_bundles):
        """Sets the use_with_bundles of this ClickwrapEntity.

        Use this Clickwrap for Bundles?

        :param use_with_bundles: The use_with_bundles of this ClickwrapEntity.
        :type use_with_bundles: str
        """
        allowed_values = ["none", "available", "require"]  # noqa: E501
        if use_with_bundles not in allowed_values:
            raise ValueError(
                "Invalid value for `use_with_bundles` ({0}), must be one of {1}"
                .format(use_with_bundles, allowed_values)
            )

        self._use_with_bundles = use_with_bundles

    @property
    def use_with_inboxes(self):
        """Gets the use_with_inboxes of this ClickwrapEntity.

        Use this Clickwrap for Inboxes?

        :return: The use_with_inboxes of this ClickwrapEntity.
        :rtype: str
        """
        return self._use_with_inboxes

    @use_with_inboxes.setter
    def use_with_inboxes(self, use_with_inboxes):
        """Sets the use_with_inboxes of this ClickwrapEntity.

        Use this Clickwrap for Inboxes?

        :param use_with_inboxes: The use_with_inboxes of this ClickwrapEntity.
        :type use_with_inboxes: str
        """
        allowed_values = ["none", "available", "require"]  # noqa: E501
        if use_with_inboxes not in allowed_values:
            raise ValueError(
                "Invalid value for `use_with_inboxes` ({0}), must be one of {1}"
                .format(use_with_inboxes, allowed_values)
            )

        self._use_with_inboxes = use_with_inboxes

    @property
    def use_with_users(self):
        """Gets the use_with_users of this ClickwrapEntity.

        Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.

        :return: The use_with_users of this ClickwrapEntity.
        :rtype: str
        """
        return self._use_with_users

    @use_with_users.setter
    def use_with_users(self, use_with_users):
        """Sets the use_with_users of this ClickwrapEntity.

        Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.

        :param use_with_users: The use_with_users of this ClickwrapEntity.
        :type use_with_users: str
        """
        allowed_values = ["none", "require"]  # noqa: E501
        if use_with_users not in allowed_values:
            raise ValueError(
                "Invalid value for `use_with_users` ({0}), must be one of {1}"
                .format(use_with_users, allowed_values)
            )

        self._use_with_users = use_with_users
