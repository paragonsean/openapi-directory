# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_entity import AutoEntity
from openapi_server.models.errors_entity import ErrorsEntity
from openapi_server import util


class StatusEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clickwrap_body: str=None, clickwrap_id: int=None, code: int=None, data: AutoEntity=None, errors: List[ErrorsEntity]=None, message: str=None, status: str=None):
        """StatusEntity - a model defined in OpenAPI

        :param clickwrap_body: The clickwrap_body of this StatusEntity.
        :param clickwrap_id: The clickwrap_id of this StatusEntity.
        :param code: The code of this StatusEntity.
        :param data: The data of this StatusEntity.
        :param errors: The errors of this StatusEntity.
        :param message: The message of this StatusEntity.
        :param status: The status of this StatusEntity.
        """
        self.openapi_types = {
            'clickwrap_body': str,
            'clickwrap_id': int,
            'code': int,
            'data': AutoEntity,
            'errors': List[ErrorsEntity],
            'message': str,
            'status': str
        }

        self.attribute_map = {
            'clickwrap_body': 'clickwrap_body',
            'clickwrap_id': 'clickwrap_id',
            'code': 'code',
            'data': 'data',
            'errors': 'errors',
            'message': 'message',
            'status': 'status'
        }

        self._clickwrap_body = clickwrap_body
        self._clickwrap_id = clickwrap_id
        self._code = code
        self._data = data
        self._errors = errors
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusEntity of this StatusEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clickwrap_body(self):
        """Gets the clickwrap_body of this StatusEntity.

        Required Clickwrap body

        :return: The clickwrap_body of this StatusEntity.
        :rtype: str
        """
        return self._clickwrap_body

    @clickwrap_body.setter
    def clickwrap_body(self, clickwrap_body):
        """Sets the clickwrap_body of this StatusEntity.

        Required Clickwrap body

        :param clickwrap_body: The clickwrap_body of this StatusEntity.
        :type clickwrap_body: str
        """

        self._clickwrap_body = clickwrap_body

    @property
    def clickwrap_id(self):
        """Gets the clickwrap_id of this StatusEntity.

        Required Clickwrap id

        :return: The clickwrap_id of this StatusEntity.
        :rtype: int
        """
        return self._clickwrap_id

    @clickwrap_id.setter
    def clickwrap_id(self, clickwrap_id):
        """Sets the clickwrap_id of this StatusEntity.

        Required Clickwrap id

        :param clickwrap_id: The clickwrap_id of this StatusEntity.
        :type clickwrap_id: int
        """

        self._clickwrap_id = clickwrap_id

    @property
    def code(self):
        """Gets the code of this StatusEntity.

        Status HTTP code

        :return: The code of this StatusEntity.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this StatusEntity.

        Status HTTP code

        :param code: The code of this StatusEntity.
        :type code: int
        """

        self._code = code

    @property
    def data(self):
        """Gets the data of this StatusEntity.


        :return: The data of this StatusEntity.
        :rtype: AutoEntity
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StatusEntity.


        :param data: The data of this StatusEntity.
        :type data: AutoEntity
        """

        self._data = data

    @property
    def errors(self):
        """Gets the errors of this StatusEntity.

        A list of api errors

        :return: The errors of this StatusEntity.
        :rtype: List[ErrorsEntity]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this StatusEntity.

        A list of api errors

        :param errors: The errors of this StatusEntity.
        :type errors: List[ErrorsEntity]
        """

        self._errors = errors

    @property
    def message(self):
        """Gets the message of this StatusEntity.

        Error message

        :return: The message of this StatusEntity.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this StatusEntity.

        Error message

        :param message: The message of this StatusEntity.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this StatusEntity.

        Status message

        :return: The status of this StatusEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusEntity.

        Status message

        :param status: The status of this StatusEntity.
        :type status: str
        """

        self._status = status
