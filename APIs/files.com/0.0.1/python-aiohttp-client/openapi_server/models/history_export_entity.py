# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistoryExportEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_at: datetime=None, history_version: str=None, id: int=None, query_action: str=None, query_destination: str=None, query_failure_type: str=None, query_file_id: str=None, query_folder: str=None, query_interface: str=None, query_ip: str=None, query_parent_id: str=None, query_path: str=None, query_src: str=None, query_target_id: str=None, query_target_name: str=None, query_target_permission: str=None, query_target_permission_set: str=None, query_target_platform: str=None, query_target_user_id: str=None, query_target_username: str=None, query_user_id: str=None, query_username: str=None, results_url: str=None, start_at: datetime=None, status: str=None):
        """HistoryExportEntity - a model defined in OpenAPI

        :param end_at: The end_at of this HistoryExportEntity.
        :param history_version: The history_version of this HistoryExportEntity.
        :param id: The id of this HistoryExportEntity.
        :param query_action: The query_action of this HistoryExportEntity.
        :param query_destination: The query_destination of this HistoryExportEntity.
        :param query_failure_type: The query_failure_type of this HistoryExportEntity.
        :param query_file_id: The query_file_id of this HistoryExportEntity.
        :param query_folder: The query_folder of this HistoryExportEntity.
        :param query_interface: The query_interface of this HistoryExportEntity.
        :param query_ip: The query_ip of this HistoryExportEntity.
        :param query_parent_id: The query_parent_id of this HistoryExportEntity.
        :param query_path: The query_path of this HistoryExportEntity.
        :param query_src: The query_src of this HistoryExportEntity.
        :param query_target_id: The query_target_id of this HistoryExportEntity.
        :param query_target_name: The query_target_name of this HistoryExportEntity.
        :param query_target_permission: The query_target_permission of this HistoryExportEntity.
        :param query_target_permission_set: The query_target_permission_set of this HistoryExportEntity.
        :param query_target_platform: The query_target_platform of this HistoryExportEntity.
        :param query_target_user_id: The query_target_user_id of this HistoryExportEntity.
        :param query_target_username: The query_target_username of this HistoryExportEntity.
        :param query_user_id: The query_user_id of this HistoryExportEntity.
        :param query_username: The query_username of this HistoryExportEntity.
        :param results_url: The results_url of this HistoryExportEntity.
        :param start_at: The start_at of this HistoryExportEntity.
        :param status: The status of this HistoryExportEntity.
        """
        self.openapi_types = {
            'end_at': datetime,
            'history_version': str,
            'id': int,
            'query_action': str,
            'query_destination': str,
            'query_failure_type': str,
            'query_file_id': str,
            'query_folder': str,
            'query_interface': str,
            'query_ip': str,
            'query_parent_id': str,
            'query_path': str,
            'query_src': str,
            'query_target_id': str,
            'query_target_name': str,
            'query_target_permission': str,
            'query_target_permission_set': str,
            'query_target_platform': str,
            'query_target_user_id': str,
            'query_target_username': str,
            'query_user_id': str,
            'query_username': str,
            'results_url': str,
            'start_at': datetime,
            'status': str
        }

        self.attribute_map = {
            'end_at': 'end_at',
            'history_version': 'history_version',
            'id': 'id',
            'query_action': 'query_action',
            'query_destination': 'query_destination',
            'query_failure_type': 'query_failure_type',
            'query_file_id': 'query_file_id',
            'query_folder': 'query_folder',
            'query_interface': 'query_interface',
            'query_ip': 'query_ip',
            'query_parent_id': 'query_parent_id',
            'query_path': 'query_path',
            'query_src': 'query_src',
            'query_target_id': 'query_target_id',
            'query_target_name': 'query_target_name',
            'query_target_permission': 'query_target_permission',
            'query_target_permission_set': 'query_target_permission_set',
            'query_target_platform': 'query_target_platform',
            'query_target_user_id': 'query_target_user_id',
            'query_target_username': 'query_target_username',
            'query_user_id': 'query_user_id',
            'query_username': 'query_username',
            'results_url': 'results_url',
            'start_at': 'start_at',
            'status': 'status'
        }

        self._end_at = end_at
        self._history_version = history_version
        self._id = id
        self._query_action = query_action
        self._query_destination = query_destination
        self._query_failure_type = query_failure_type
        self._query_file_id = query_file_id
        self._query_folder = query_folder
        self._query_interface = query_interface
        self._query_ip = query_ip
        self._query_parent_id = query_parent_id
        self._query_path = query_path
        self._query_src = query_src
        self._query_target_id = query_target_id
        self._query_target_name = query_target_name
        self._query_target_permission = query_target_permission
        self._query_target_permission_set = query_target_permission_set
        self._query_target_platform = query_target_platform
        self._query_target_user_id = query_target_user_id
        self._query_target_username = query_target_username
        self._query_user_id = query_user_id
        self._query_username = query_username
        self._results_url = results_url
        self._start_at = start_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryExportEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryExportEntity of this HistoryExportEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_at(self):
        """Gets the end_at of this HistoryExportEntity.

        End date/time of export range.

        :return: The end_at of this HistoryExportEntity.
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this HistoryExportEntity.

        End date/time of export range.

        :param end_at: The end_at of this HistoryExportEntity.
        :type end_at: datetime
        """

        self._end_at = end_at

    @property
    def history_version(self):
        """Gets the history_version of this HistoryExportEntity.

        Version of the history for the export.

        :return: The history_version of this HistoryExportEntity.
        :rtype: str
        """
        return self._history_version

    @history_version.setter
    def history_version(self, history_version):
        """Sets the history_version of this HistoryExportEntity.

        Version of the history for the export.

        :param history_version: The history_version of this HistoryExportEntity.
        :type history_version: str
        """

        self._history_version = history_version

    @property
    def id(self):
        """Gets the id of this HistoryExportEntity.

        History Export ID

        :return: The id of this HistoryExportEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoryExportEntity.

        History Export ID

        :param id: The id of this HistoryExportEntity.
        :type id: int
        """

        self._id = id

    @property
    def query_action(self):
        """Gets the query_action of this HistoryExportEntity.

        Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`

        :return: The query_action of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_action

    @query_action.setter
    def query_action(self, query_action):
        """Sets the query_action of this HistoryExportEntity.

        Filter results by this this action type. Valid values: `create`, `read`, `update`, `destroy`, `move`, `login`, `failedlogin`, `copy`, `user_create`, `user_update`, `user_destroy`, `group_create`, `group_update`, `group_destroy`, `permission_create`, `permission_destroy`, `api_key_create`, `api_key_update`, `api_key_destroy`

        :param query_action: The query_action of this HistoryExportEntity.
        :type query_action: str
        """

        self._query_action = query_action

    @property
    def query_destination(self):
        """Gets the query_destination of this HistoryExportEntity.

        Return results that are file moves with this path as destination.

        :return: The query_destination of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_destination

    @query_destination.setter
    def query_destination(self, query_destination):
        """Sets the query_destination of this HistoryExportEntity.

        Return results that are file moves with this path as destination.

        :param query_destination: The query_destination of this HistoryExportEntity.
        :type query_destination: str
        """

        self._query_destination = query_destination

    @property
    def query_failure_type(self):
        """Gets the query_failure_type of this HistoryExportEntity.

        If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`

        :return: The query_failure_type of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_failure_type

    @query_failure_type.setter
    def query_failure_type(self, query_failure_type):
        """Sets the query_failure_type of this HistoryExportEntity.

        If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: `expired_trial`, `account_overdue`, `locked_out`, `ip_mismatch`, `password_mismatch`, `site_mismatch`, `username_not_found`, `none`, `no_ftp_permission`, `no_web_permission`, `no_directory`, `errno_enoent`, `no_sftp_permission`, `no_dav_permission`, `no_restapi_permission`, `key_mismatch`, `region_mismatch`, `expired_access`, `desktop_ip_mismatch`, `desktop_api_key_not_used_quickly_enough`, `disabled`, `country_mismatch`

        :param query_failure_type: The query_failure_type of this HistoryExportEntity.
        :type query_failure_type: str
        """

        self._query_failure_type = query_failure_type

    @property
    def query_file_id(self):
        """Gets the query_file_id of this HistoryExportEntity.

        Return results that are file actions related to the file indicated by this File ID

        :return: The query_file_id of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_file_id

    @query_file_id.setter
    def query_file_id(self, query_file_id):
        """Sets the query_file_id of this HistoryExportEntity.

        Return results that are file actions related to the file indicated by this File ID

        :param query_file_id: The query_file_id of this HistoryExportEntity.
        :type query_file_id: str
        """

        self._query_file_id = query_file_id

    @property
    def query_folder(self):
        """Gets the query_folder of this HistoryExportEntity.

        Return results that are file actions related to files or folders inside this folder path.

        :return: The query_folder of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_folder

    @query_folder.setter
    def query_folder(self, query_folder):
        """Sets the query_folder of this HistoryExportEntity.

        Return results that are file actions related to files or folders inside this folder path.

        :param query_folder: The query_folder of this HistoryExportEntity.
        :type query_folder: str
        """

        self._query_folder = query_folder

    @property
    def query_interface(self):
        """Gets the query_interface of this HistoryExportEntity.

        Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`

        :return: The query_interface of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_interface

    @query_interface.setter
    def query_interface(self, query_interface):
        """Sets the query_interface of this HistoryExportEntity.

        Filter results by this this interface type. Valid values: `web`, `ftp`, `robot`, `jsapi`, `webdesktopapi`, `sftp`, `dav`, `desktop`, `restapi`, `scim`, `office`, `mobile`, `as2`, `inbound_email`, `remote`

        :param query_interface: The query_interface of this HistoryExportEntity.
        :type query_interface: str
        """

        self._query_interface = query_interface

    @property
    def query_ip(self):
        """Gets the query_ip of this HistoryExportEntity.

        Filter results by this IP address.

        :return: The query_ip of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_ip

    @query_ip.setter
    def query_ip(self, query_ip):
        """Sets the query_ip of this HistoryExportEntity.

        Filter results by this IP address.

        :param query_ip: The query_ip of this HistoryExportEntity.
        :type query_ip: str
        """

        self._query_ip = query_ip

    @property
    def query_parent_id(self):
        """Gets the query_parent_id of this HistoryExportEntity.

        Return results that are file actions inside the parent folder specified by this folder ID

        :return: The query_parent_id of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_parent_id

    @query_parent_id.setter
    def query_parent_id(self, query_parent_id):
        """Sets the query_parent_id of this HistoryExportEntity.

        Return results that are file actions inside the parent folder specified by this folder ID

        :param query_parent_id: The query_parent_id of this HistoryExportEntity.
        :type query_parent_id: str
        """

        self._query_parent_id = query_parent_id

    @property
    def query_path(self):
        """Gets the query_path of this HistoryExportEntity.

        Return results that are file actions related to this path.

        :return: The query_path of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_path

    @query_path.setter
    def query_path(self, query_path):
        """Sets the query_path of this HistoryExportEntity.

        Return results that are file actions related to this path.

        :param query_path: The query_path of this HistoryExportEntity.
        :type query_path: str
        """

        self._query_path = query_path

    @property
    def query_src(self):
        """Gets the query_src of this HistoryExportEntity.

        Return results that are file moves originating from this path.

        :return: The query_src of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_src

    @query_src.setter
    def query_src(self, query_src):
        """Sets the query_src of this HistoryExportEntity.

        Return results that are file moves originating from this path.

        :param query_src: The query_src of this HistoryExportEntity.
        :type query_src: str
        """

        self._query_src = query_src

    @property
    def query_target_id(self):
        """Gets the query_target_id of this HistoryExportEntity.

        If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.

        :return: The query_target_id of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_target_id

    @query_target_id.setter
    def query_target_id(self, query_target_id):
        """Sets the query_target_id of this HistoryExportEntity.

        If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.

        :param query_target_id: The query_target_id of this HistoryExportEntity.
        :type query_target_id: str
        """

        self._query_target_id = query_target_id

    @property
    def query_target_name(self):
        """Gets the query_target_name of this HistoryExportEntity.

        If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.

        :return: The query_target_name of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_target_name

    @query_target_name.setter
    def query_target_name(self, query_target_name):
        """Sets the query_target_name of this HistoryExportEntity.

        If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.

        :param query_target_name: The query_target_name of this HistoryExportEntity.
        :type query_target_name: str
        """

        self._query_target_name = query_target_name

    @property
    def query_target_permission(self):
        """Gets the query_target_permission of this HistoryExportEntity.

        If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.

        :return: The query_target_permission of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_target_permission

    @query_target_permission.setter
    def query_target_permission(self, query_target_permission):
        """Sets the query_target_permission of this HistoryExportEntity.

        If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.

        :param query_target_permission: The query_target_permission of this HistoryExportEntity.
        :type query_target_permission: str
        """

        self._query_target_permission = query_target_permission

    @property
    def query_target_permission_set(self):
        """Gets the query_target_permission_set of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.

        :return: The query_target_permission_set of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_target_permission_set

    @query_target_permission_set.setter
    def query_target_permission_set(self, query_target_permission_set):
        """Sets the query_target_permission_set of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.

        :param query_target_permission_set: The query_target_permission_set of this HistoryExportEntity.
        :type query_target_permission_set: str
        """

        self._query_target_permission_set = query_target_permission_set

    @property
    def query_target_platform(self):
        """Gets the query_target_platform of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.

        :return: The query_target_platform of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_target_platform

    @query_target_platform.setter
    def query_target_platform(self, query_target_platform):
        """Sets the query_target_platform of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.

        :param query_target_platform: The query_target_platform of this HistoryExportEntity.
        :type query_target_platform: str
        """

        self._query_target_platform = query_target_platform

    @property
    def query_target_user_id(self):
        """Gets the query_target_user_id of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.

        :return: The query_target_user_id of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_target_user_id

    @query_target_user_id.setter
    def query_target_user_id(self, query_target_user_id):
        """Sets the query_target_user_id of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.

        :param query_target_user_id: The query_target_user_id of this HistoryExportEntity.
        :type query_target_user_id: str
        """

        self._query_target_user_id = query_target_user_id

    @property
    def query_target_username(self):
        """Gets the query_target_username of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.

        :return: The query_target_username of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_target_username

    @query_target_username.setter
    def query_target_username(self, query_target_username):
        """Sets the query_target_username of this HistoryExportEntity.

        If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.

        :param query_target_username: The query_target_username of this HistoryExportEntity.
        :type query_target_username: str
        """

        self._query_target_username = query_target_username

    @property
    def query_user_id(self):
        """Gets the query_user_id of this HistoryExportEntity.

        Return results that are actions performed by the user indiciated by this User ID

        :return: The query_user_id of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_user_id

    @query_user_id.setter
    def query_user_id(self, query_user_id):
        """Sets the query_user_id of this HistoryExportEntity.

        Return results that are actions performed by the user indiciated by this User ID

        :param query_user_id: The query_user_id of this HistoryExportEntity.
        :type query_user_id: str
        """

        self._query_user_id = query_user_id

    @property
    def query_username(self):
        """Gets the query_username of this HistoryExportEntity.

        Filter results by this username.

        :return: The query_username of this HistoryExportEntity.
        :rtype: str
        """
        return self._query_username

    @query_username.setter
    def query_username(self, query_username):
        """Sets the query_username of this HistoryExportEntity.

        Filter results by this username.

        :param query_username: The query_username of this HistoryExportEntity.
        :type query_username: str
        """

        self._query_username = query_username

    @property
    def results_url(self):
        """Gets the results_url of this HistoryExportEntity.

        If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV.

        :return: The results_url of this HistoryExportEntity.
        :rtype: str
        """
        return self._results_url

    @results_url.setter
    def results_url(self, results_url):
        """Sets the results_url of this HistoryExportEntity.

        If `status` is `ready`, this will be a URL where all the results can be downloaded at once as a CSV.

        :param results_url: The results_url of this HistoryExportEntity.
        :type results_url: str
        """

        self._results_url = results_url

    @property
    def start_at(self):
        """Gets the start_at of this HistoryExportEntity.

        Start date/time of export range.

        :return: The start_at of this HistoryExportEntity.
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this HistoryExportEntity.

        Start date/time of export range.

        :param start_at: The start_at of this HistoryExportEntity.
        :type start_at: datetime
        """

        self._start_at = start_at

    @property
    def status(self):
        """Gets the status of this HistoryExportEntity.

        Status of export.  Will be: `building`, `ready`, or `failed`

        :return: The status of this HistoryExportEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HistoryExportEntity.

        Status of export.  Will be: `building`, `ready`, or `failed`

        :param status: The status of this HistoryExportEntity.
        :type status: str
        """

        self._status = status
