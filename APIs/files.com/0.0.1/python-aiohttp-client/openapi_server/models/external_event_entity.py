# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalEventEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, body_url: str=None, bytes_synced: int=None, created_at: datetime=None, errored_files: int=None, event_type: str=None, folder_behavior_id: int=None, id: int=None, remote_server_type: str=None, status: str=None, successful_files: int=None):
        """ExternalEventEntity - a model defined in OpenAPI

        :param body: The body of this ExternalEventEntity.
        :param body_url: The body_url of this ExternalEventEntity.
        :param bytes_synced: The bytes_synced of this ExternalEventEntity.
        :param created_at: The created_at of this ExternalEventEntity.
        :param errored_files: The errored_files of this ExternalEventEntity.
        :param event_type: The event_type of this ExternalEventEntity.
        :param folder_behavior_id: The folder_behavior_id of this ExternalEventEntity.
        :param id: The id of this ExternalEventEntity.
        :param remote_server_type: The remote_server_type of this ExternalEventEntity.
        :param status: The status of this ExternalEventEntity.
        :param successful_files: The successful_files of this ExternalEventEntity.
        """
        self.openapi_types = {
            'body': str,
            'body_url': str,
            'bytes_synced': int,
            'created_at': datetime,
            'errored_files': int,
            'event_type': str,
            'folder_behavior_id': int,
            'id': int,
            'remote_server_type': str,
            'status': str,
            'successful_files': int
        }

        self.attribute_map = {
            'body': 'body',
            'body_url': 'body_url',
            'bytes_synced': 'bytes_synced',
            'created_at': 'created_at',
            'errored_files': 'errored_files',
            'event_type': 'event_type',
            'folder_behavior_id': 'folder_behavior_id',
            'id': 'id',
            'remote_server_type': 'remote_server_type',
            'status': 'status',
            'successful_files': 'successful_files'
        }

        self._body = body
        self._body_url = body_url
        self._bytes_synced = bytes_synced
        self._created_at = created_at
        self._errored_files = errored_files
        self._event_type = event_type
        self._folder_behavior_id = folder_behavior_id
        self._id = id
        self._remote_server_type = remote_server_type
        self._status = status
        self._successful_files = successful_files

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalEventEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalEventEntity of this ExternalEventEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this ExternalEventEntity.

        Event body

        :return: The body of this ExternalEventEntity.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this ExternalEventEntity.

        Event body

        :param body: The body of this ExternalEventEntity.
        :type body: str
        """

        self._body = body

    @property
    def body_url(self):
        """Gets the body_url of this ExternalEventEntity.

        Link to log file.

        :return: The body_url of this ExternalEventEntity.
        :rtype: str
        """
        return self._body_url

    @body_url.setter
    def body_url(self, body_url):
        """Sets the body_url of this ExternalEventEntity.

        Link to log file.

        :param body_url: The body_url of this ExternalEventEntity.
        :type body_url: str
        """

        self._body_url = body_url

    @property
    def bytes_synced(self):
        """Gets the bytes_synced of this ExternalEventEntity.

        For sync events, the total number of bytes synced.

        :return: The bytes_synced of this ExternalEventEntity.
        :rtype: int
        """
        return self._bytes_synced

    @bytes_synced.setter
    def bytes_synced(self, bytes_synced):
        """Sets the bytes_synced of this ExternalEventEntity.

        For sync events, the total number of bytes synced.

        :param bytes_synced: The bytes_synced of this ExternalEventEntity.
        :type bytes_synced: int
        """

        self._bytes_synced = bytes_synced

    @property
    def created_at(self):
        """Gets the created_at of this ExternalEventEntity.

        External event create date/time

        :return: The created_at of this ExternalEventEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExternalEventEntity.

        External event create date/time

        :param created_at: The created_at of this ExternalEventEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def errored_files(self):
        """Gets the errored_files of this ExternalEventEntity.

        For sync events, the number of files that encountered errors.

        :return: The errored_files of this ExternalEventEntity.
        :rtype: int
        """
        return self._errored_files

    @errored_files.setter
    def errored_files(self, errored_files):
        """Sets the errored_files of this ExternalEventEntity.

        For sync events, the number of files that encountered errors.

        :param errored_files: The errored_files of this ExternalEventEntity.
        :type errored_files: int
        """

        self._errored_files = errored_files

    @property
    def event_type(self):
        """Gets the event_type of this ExternalEventEntity.

        Type of event being recorded.

        :return: The event_type of this ExternalEventEntity.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ExternalEventEntity.

        Type of event being recorded.

        :param event_type: The event_type of this ExternalEventEntity.
        :type event_type: str
        """
        allowed_values = ["ldap_sync", "remote_server_sync", "lockout", "ldap_login", "saml_login", "client_log", "pending_work"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def folder_behavior_id(self):
        """Gets the folder_behavior_id of this ExternalEventEntity.

        Folder Behavior ID

        :return: The folder_behavior_id of this ExternalEventEntity.
        :rtype: int
        """
        return self._folder_behavior_id

    @folder_behavior_id.setter
    def folder_behavior_id(self, folder_behavior_id):
        """Sets the folder_behavior_id of this ExternalEventEntity.

        Folder Behavior ID

        :param folder_behavior_id: The folder_behavior_id of this ExternalEventEntity.
        :type folder_behavior_id: int
        """

        self._folder_behavior_id = folder_behavior_id

    @property
    def id(self):
        """Gets the id of this ExternalEventEntity.

        Event ID

        :return: The id of this ExternalEventEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalEventEntity.

        Event ID

        :param id: The id of this ExternalEventEntity.
        :type id: int
        """

        self._id = id

    @property
    def remote_server_type(self):
        """Gets the remote_server_type of this ExternalEventEntity.

        Associated Remote Server type, if any

        :return: The remote_server_type of this ExternalEventEntity.
        :rtype: str
        """
        return self._remote_server_type

    @remote_server_type.setter
    def remote_server_type(self, remote_server_type):
        """Sets the remote_server_type of this ExternalEventEntity.

        Associated Remote Server type, if any

        :param remote_server_type: The remote_server_type of this ExternalEventEntity.
        :type remote_server_type: str
        """

        self._remote_server_type = remote_server_type

    @property
    def status(self):
        """Gets the status of this ExternalEventEntity.

        Status of event.

        :return: The status of this ExternalEventEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ExternalEventEntity.

        Status of event.

        :param status: The status of this ExternalEventEntity.
        :type status: str
        """
        allowed_values = ["success", "failure", "partial_failure", "in_progress", "skipped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def successful_files(self):
        """Gets the successful_files of this ExternalEventEntity.

        For sync events, the number of files handled successfully.

        :return: The successful_files of this ExternalEventEntity.
        :rtype: int
        """
        return self._successful_files

    @successful_files.setter
    def successful_files(self, successful_files):
        """Sets the successful_files of this ExternalEventEntity.

        For sync events, the number of files handled successfully.

        :param successful_files: The successful_files of this ExternalEventEntity.
        :type successful_files: int
        """

        self._successful_files = successful_files
