# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_entity import ImageEntity
from openapi_server.models.session_entity import SessionEntity
from openapi_server.models.user_entity import UserEntity
from openapi_server import util


class SiteEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_sftp_host_key_id: int=None, admin_user_id: int=None, allow_bundle_names: bool=None, allowed_2fa_method_bypass_for_ftp_sftp_dav: bool=None, allowed_2fa_method_sms: bool=None, allowed_2fa_method_totp: bool=None, allowed_2fa_method_u2f: bool=None, allowed_2fa_method_webauthn: bool=None, allowed_2fa_method_yubi: bool=None, allowed_countries: str=None, allowed_ips: str=None, ask_about_overwrites: bool=None, bundle_activity_notifications: str=None, bundle_expiration: int=None, bundle_password_required: bool=None, bundle_registration_notifications: str=None, bundle_require_share_recipient: bool=None, bundle_upload_receipt_notifications: str=None, bundle_watermark_attachment: ImageEntity=None, bundle_watermark_value: object=None, color2_left: str=None, color2_link: str=None, color2_text: str=None, color2_top: str=None, color2_top_text: str=None, contact_name: str=None, created_at: datetime=None, currency: str=None, custom_namespace: bool=None, days_to_retain_backups: int=None, default_time_zone: str=None, desktop_app: bool=None, desktop_app_session_ip_pinning: bool=None, desktop_app_session_lifetime: int=None, disable_files_certificate_generation: bool=None, disable_notifications: bool=None, disable_password_reset: bool=None, disable_users_from_inactivity_period_days: int=None, disallowed_countries: str=None, domain: str=None, domain_hsts_header: bool=None, domain_letsencrypt_chain: str=None, email: str=None, folder_permissions_groups_only: bool=None, ftp_enabled: bool=None, hipaa: bool=None, icon128: ImageEntity=None, icon16: ImageEntity=None, icon32: ImageEntity=None, icon48: ImageEntity=None, immutable_files_set_at: datetime=None, include_password_in_welcome_email: bool=None, language: str=None, ldap_base_dn: str=None, ldap_domain: str=None, ldap_enabled: bool=None, ldap_group_action: str=None, ldap_group_exclusion: str=None, ldap_group_inclusion: str=None, ldap_host: str=None, ldap_host_2: str=None, ldap_host_3: str=None, ldap_port: int=None, ldap_secure: bool=None, ldap_type: str=None, ldap_user_action: str=None, ldap_user_include_groups: str=None, ldap_username: str=None, ldap_username_field: str=None, login_help_text: str=None, logo: ImageEntity=None, max_prior_passwords: int=None, mobile_app: bool=None, mobile_app_session_ip_pinning: bool=None, mobile_app_session_lifetime: int=None, motd_text: str=None, motd_use_for_ftp: bool=None, motd_use_for_sftp: bool=None, name: str=None, next_billing_amount: float=None, next_billing_date: str=None, non_sso_groups_allowed: bool=None, non_sso_users_allowed: bool=None, office_integration_available: bool=None, office_integration_type: str=None, oncehub_link: str=None, opt_out_global: bool=None, overdue: bool=None, password_min_length: int=None, password_require_letter: bool=None, password_require_mixed: bool=None, password_require_number: bool=None, password_require_special: bool=None, password_require_unbreached: bool=None, password_requirements_apply_to_bundles: bool=None, password_validity_days: int=None, phone: str=None, pin_all_remote_servers_to_site_region: bool=None, reply_to_email: str=None, require_2fa: bool=None, require_2fa_stop_time: datetime=None, require_2fa_user_type: str=None, session: SessionEntity=None, session_expiry: float=None, session_expiry_minutes: int=None, session_pinned_by_ip: bool=None, sftp_enabled: bool=None, sftp_host_key_type: str=None, sftp_insecure_ciphers: bool=None, sftp_user_root_enabled: bool=None, sharing_enabled: bool=None, show_request_access_link: bool=None, site_footer: str=None, site_header: str=None, smtp_address: str=None, smtp_authentication: str=None, smtp_from: str=None, smtp_port: int=None, smtp_username: str=None, ssl_required: bool=None, subdomain: str=None, switch_to_plan_date: datetime=None, tls_disabled: bool=None, trial_days_left: int=None, trial_until: datetime=None, updated_at: datetime=None, uploads_via_email_authentication: bool=None, use_provided_modified_at: bool=None, user: UserEntity=None, user_lockout: bool=None, user_lockout_lock_period: int=None, user_lockout_tries: int=None, user_lockout_within: int=None, user_requests_enabled: bool=None, user_requests_notify_admins: bool=None, welcome_custom_text: str=None, welcome_email_cc: str=None, welcome_email_enabled: bool=None, welcome_email_subject: str=None, welcome_screen: str=None, windows_mode_ftp: bool=None):
        """SiteEntity - a model defined in OpenAPI

        :param active_sftp_host_key_id: The active_sftp_host_key_id of this SiteEntity.
        :param admin_user_id: The admin_user_id of this SiteEntity.
        :param allow_bundle_names: The allow_bundle_names of this SiteEntity.
        :param allowed_2fa_method_bypass_for_ftp_sftp_dav: The allowed_2fa_method_bypass_for_ftp_sftp_dav of this SiteEntity.
        :param allowed_2fa_method_sms: The allowed_2fa_method_sms of this SiteEntity.
        :param allowed_2fa_method_totp: The allowed_2fa_method_totp of this SiteEntity.
        :param allowed_2fa_method_u2f: The allowed_2fa_method_u2f of this SiteEntity.
        :param allowed_2fa_method_webauthn: The allowed_2fa_method_webauthn of this SiteEntity.
        :param allowed_2fa_method_yubi: The allowed_2fa_method_yubi of this SiteEntity.
        :param allowed_countries: The allowed_countries of this SiteEntity.
        :param allowed_ips: The allowed_ips of this SiteEntity.
        :param ask_about_overwrites: The ask_about_overwrites of this SiteEntity.
        :param bundle_activity_notifications: The bundle_activity_notifications of this SiteEntity.
        :param bundle_expiration: The bundle_expiration of this SiteEntity.
        :param bundle_password_required: The bundle_password_required of this SiteEntity.
        :param bundle_registration_notifications: The bundle_registration_notifications of this SiteEntity.
        :param bundle_require_share_recipient: The bundle_require_share_recipient of this SiteEntity.
        :param bundle_upload_receipt_notifications: The bundle_upload_receipt_notifications of this SiteEntity.
        :param bundle_watermark_attachment: The bundle_watermark_attachment of this SiteEntity.
        :param bundle_watermark_value: The bundle_watermark_value of this SiteEntity.
        :param color2_left: The color2_left of this SiteEntity.
        :param color2_link: The color2_link of this SiteEntity.
        :param color2_text: The color2_text of this SiteEntity.
        :param color2_top: The color2_top of this SiteEntity.
        :param color2_top_text: The color2_top_text of this SiteEntity.
        :param contact_name: The contact_name of this SiteEntity.
        :param created_at: The created_at of this SiteEntity.
        :param currency: The currency of this SiteEntity.
        :param custom_namespace: The custom_namespace of this SiteEntity.
        :param days_to_retain_backups: The days_to_retain_backups of this SiteEntity.
        :param default_time_zone: The default_time_zone of this SiteEntity.
        :param desktop_app: The desktop_app of this SiteEntity.
        :param desktop_app_session_ip_pinning: The desktop_app_session_ip_pinning of this SiteEntity.
        :param desktop_app_session_lifetime: The desktop_app_session_lifetime of this SiteEntity.
        :param disable_files_certificate_generation: The disable_files_certificate_generation of this SiteEntity.
        :param disable_notifications: The disable_notifications of this SiteEntity.
        :param disable_password_reset: The disable_password_reset of this SiteEntity.
        :param disable_users_from_inactivity_period_days: The disable_users_from_inactivity_period_days of this SiteEntity.
        :param disallowed_countries: The disallowed_countries of this SiteEntity.
        :param domain: The domain of this SiteEntity.
        :param domain_hsts_header: The domain_hsts_header of this SiteEntity.
        :param domain_letsencrypt_chain: The domain_letsencrypt_chain of this SiteEntity.
        :param email: The email of this SiteEntity.
        :param folder_permissions_groups_only: The folder_permissions_groups_only of this SiteEntity.
        :param ftp_enabled: The ftp_enabled of this SiteEntity.
        :param hipaa: The hipaa of this SiteEntity.
        :param icon128: The icon128 of this SiteEntity.
        :param icon16: The icon16 of this SiteEntity.
        :param icon32: The icon32 of this SiteEntity.
        :param icon48: The icon48 of this SiteEntity.
        :param immutable_files_set_at: The immutable_files_set_at of this SiteEntity.
        :param include_password_in_welcome_email: The include_password_in_welcome_email of this SiteEntity.
        :param language: The language of this SiteEntity.
        :param ldap_base_dn: The ldap_base_dn of this SiteEntity.
        :param ldap_domain: The ldap_domain of this SiteEntity.
        :param ldap_enabled: The ldap_enabled of this SiteEntity.
        :param ldap_group_action: The ldap_group_action of this SiteEntity.
        :param ldap_group_exclusion: The ldap_group_exclusion of this SiteEntity.
        :param ldap_group_inclusion: The ldap_group_inclusion of this SiteEntity.
        :param ldap_host: The ldap_host of this SiteEntity.
        :param ldap_host_2: The ldap_host_2 of this SiteEntity.
        :param ldap_host_3: The ldap_host_3 of this SiteEntity.
        :param ldap_port: The ldap_port of this SiteEntity.
        :param ldap_secure: The ldap_secure of this SiteEntity.
        :param ldap_type: The ldap_type of this SiteEntity.
        :param ldap_user_action: The ldap_user_action of this SiteEntity.
        :param ldap_user_include_groups: The ldap_user_include_groups of this SiteEntity.
        :param ldap_username: The ldap_username of this SiteEntity.
        :param ldap_username_field: The ldap_username_field of this SiteEntity.
        :param login_help_text: The login_help_text of this SiteEntity.
        :param logo: The logo of this SiteEntity.
        :param max_prior_passwords: The max_prior_passwords of this SiteEntity.
        :param mobile_app: The mobile_app of this SiteEntity.
        :param mobile_app_session_ip_pinning: The mobile_app_session_ip_pinning of this SiteEntity.
        :param mobile_app_session_lifetime: The mobile_app_session_lifetime of this SiteEntity.
        :param motd_text: The motd_text of this SiteEntity.
        :param motd_use_for_ftp: The motd_use_for_ftp of this SiteEntity.
        :param motd_use_for_sftp: The motd_use_for_sftp of this SiteEntity.
        :param name: The name of this SiteEntity.
        :param next_billing_amount: The next_billing_amount of this SiteEntity.
        :param next_billing_date: The next_billing_date of this SiteEntity.
        :param non_sso_groups_allowed: The non_sso_groups_allowed of this SiteEntity.
        :param non_sso_users_allowed: The non_sso_users_allowed of this SiteEntity.
        :param office_integration_available: The office_integration_available of this SiteEntity.
        :param office_integration_type: The office_integration_type of this SiteEntity.
        :param oncehub_link: The oncehub_link of this SiteEntity.
        :param opt_out_global: The opt_out_global of this SiteEntity.
        :param overdue: The overdue of this SiteEntity.
        :param password_min_length: The password_min_length of this SiteEntity.
        :param password_require_letter: The password_require_letter of this SiteEntity.
        :param password_require_mixed: The password_require_mixed of this SiteEntity.
        :param password_require_number: The password_require_number of this SiteEntity.
        :param password_require_special: The password_require_special of this SiteEntity.
        :param password_require_unbreached: The password_require_unbreached of this SiteEntity.
        :param password_requirements_apply_to_bundles: The password_requirements_apply_to_bundles of this SiteEntity.
        :param password_validity_days: The password_validity_days of this SiteEntity.
        :param phone: The phone of this SiteEntity.
        :param pin_all_remote_servers_to_site_region: The pin_all_remote_servers_to_site_region of this SiteEntity.
        :param reply_to_email: The reply_to_email of this SiteEntity.
        :param require_2fa: The require_2fa of this SiteEntity.
        :param require_2fa_stop_time: The require_2fa_stop_time of this SiteEntity.
        :param require_2fa_user_type: The require_2fa_user_type of this SiteEntity.
        :param session: The session of this SiteEntity.
        :param session_expiry: The session_expiry of this SiteEntity.
        :param session_expiry_minutes: The session_expiry_minutes of this SiteEntity.
        :param session_pinned_by_ip: The session_pinned_by_ip of this SiteEntity.
        :param sftp_enabled: The sftp_enabled of this SiteEntity.
        :param sftp_host_key_type: The sftp_host_key_type of this SiteEntity.
        :param sftp_insecure_ciphers: The sftp_insecure_ciphers of this SiteEntity.
        :param sftp_user_root_enabled: The sftp_user_root_enabled of this SiteEntity.
        :param sharing_enabled: The sharing_enabled of this SiteEntity.
        :param show_request_access_link: The show_request_access_link of this SiteEntity.
        :param site_footer: The site_footer of this SiteEntity.
        :param site_header: The site_header of this SiteEntity.
        :param smtp_address: The smtp_address of this SiteEntity.
        :param smtp_authentication: The smtp_authentication of this SiteEntity.
        :param smtp_from: The smtp_from of this SiteEntity.
        :param smtp_port: The smtp_port of this SiteEntity.
        :param smtp_username: The smtp_username of this SiteEntity.
        :param ssl_required: The ssl_required of this SiteEntity.
        :param subdomain: The subdomain of this SiteEntity.
        :param switch_to_plan_date: The switch_to_plan_date of this SiteEntity.
        :param tls_disabled: The tls_disabled of this SiteEntity.
        :param trial_days_left: The trial_days_left of this SiteEntity.
        :param trial_until: The trial_until of this SiteEntity.
        :param updated_at: The updated_at of this SiteEntity.
        :param uploads_via_email_authentication: The uploads_via_email_authentication of this SiteEntity.
        :param use_provided_modified_at: The use_provided_modified_at of this SiteEntity.
        :param user: The user of this SiteEntity.
        :param user_lockout: The user_lockout of this SiteEntity.
        :param user_lockout_lock_period: The user_lockout_lock_period of this SiteEntity.
        :param user_lockout_tries: The user_lockout_tries of this SiteEntity.
        :param user_lockout_within: The user_lockout_within of this SiteEntity.
        :param user_requests_enabled: The user_requests_enabled of this SiteEntity.
        :param user_requests_notify_admins: The user_requests_notify_admins of this SiteEntity.
        :param welcome_custom_text: The welcome_custom_text of this SiteEntity.
        :param welcome_email_cc: The welcome_email_cc of this SiteEntity.
        :param welcome_email_enabled: The welcome_email_enabled of this SiteEntity.
        :param welcome_email_subject: The welcome_email_subject of this SiteEntity.
        :param welcome_screen: The welcome_screen of this SiteEntity.
        :param windows_mode_ftp: The windows_mode_ftp of this SiteEntity.
        """
        self.openapi_types = {
            'active_sftp_host_key_id': int,
            'admin_user_id': int,
            'allow_bundle_names': bool,
            'allowed_2fa_method_bypass_for_ftp_sftp_dav': bool,
            'allowed_2fa_method_sms': bool,
            'allowed_2fa_method_totp': bool,
            'allowed_2fa_method_u2f': bool,
            'allowed_2fa_method_webauthn': bool,
            'allowed_2fa_method_yubi': bool,
            'allowed_countries': str,
            'allowed_ips': str,
            'ask_about_overwrites': bool,
            'bundle_activity_notifications': str,
            'bundle_expiration': int,
            'bundle_password_required': bool,
            'bundle_registration_notifications': str,
            'bundle_require_share_recipient': bool,
            'bundle_upload_receipt_notifications': str,
            'bundle_watermark_attachment': ImageEntity,
            'bundle_watermark_value': object,
            'color2_left': str,
            'color2_link': str,
            'color2_text': str,
            'color2_top': str,
            'color2_top_text': str,
            'contact_name': str,
            'created_at': datetime,
            'currency': str,
            'custom_namespace': bool,
            'days_to_retain_backups': int,
            'default_time_zone': str,
            'desktop_app': bool,
            'desktop_app_session_ip_pinning': bool,
            'desktop_app_session_lifetime': int,
            'disable_files_certificate_generation': bool,
            'disable_notifications': bool,
            'disable_password_reset': bool,
            'disable_users_from_inactivity_period_days': int,
            'disallowed_countries': str,
            'domain': str,
            'domain_hsts_header': bool,
            'domain_letsencrypt_chain': str,
            'email': str,
            'folder_permissions_groups_only': bool,
            'ftp_enabled': bool,
            'hipaa': bool,
            'icon128': ImageEntity,
            'icon16': ImageEntity,
            'icon32': ImageEntity,
            'icon48': ImageEntity,
            'immutable_files_set_at': datetime,
            'include_password_in_welcome_email': bool,
            'language': str,
            'ldap_base_dn': str,
            'ldap_domain': str,
            'ldap_enabled': bool,
            'ldap_group_action': str,
            'ldap_group_exclusion': str,
            'ldap_group_inclusion': str,
            'ldap_host': str,
            'ldap_host_2': str,
            'ldap_host_3': str,
            'ldap_port': int,
            'ldap_secure': bool,
            'ldap_type': str,
            'ldap_user_action': str,
            'ldap_user_include_groups': str,
            'ldap_username': str,
            'ldap_username_field': str,
            'login_help_text': str,
            'logo': ImageEntity,
            'max_prior_passwords': int,
            'mobile_app': bool,
            'mobile_app_session_ip_pinning': bool,
            'mobile_app_session_lifetime': int,
            'motd_text': str,
            'motd_use_for_ftp': bool,
            'motd_use_for_sftp': bool,
            'name': str,
            'next_billing_amount': float,
            'next_billing_date': str,
            'non_sso_groups_allowed': bool,
            'non_sso_users_allowed': bool,
            'office_integration_available': bool,
            'office_integration_type': str,
            'oncehub_link': str,
            'opt_out_global': bool,
            'overdue': bool,
            'password_min_length': int,
            'password_require_letter': bool,
            'password_require_mixed': bool,
            'password_require_number': bool,
            'password_require_special': bool,
            'password_require_unbreached': bool,
            'password_requirements_apply_to_bundles': bool,
            'password_validity_days': int,
            'phone': str,
            'pin_all_remote_servers_to_site_region': bool,
            'reply_to_email': str,
            'require_2fa': bool,
            'require_2fa_stop_time': datetime,
            'require_2fa_user_type': str,
            'session': SessionEntity,
            'session_expiry': float,
            'session_expiry_minutes': int,
            'session_pinned_by_ip': bool,
            'sftp_enabled': bool,
            'sftp_host_key_type': str,
            'sftp_insecure_ciphers': bool,
            'sftp_user_root_enabled': bool,
            'sharing_enabled': bool,
            'show_request_access_link': bool,
            'site_footer': str,
            'site_header': str,
            'smtp_address': str,
            'smtp_authentication': str,
            'smtp_from': str,
            'smtp_port': int,
            'smtp_username': str,
            'ssl_required': bool,
            'subdomain': str,
            'switch_to_plan_date': datetime,
            'tls_disabled': bool,
            'trial_days_left': int,
            'trial_until': datetime,
            'updated_at': datetime,
            'uploads_via_email_authentication': bool,
            'use_provided_modified_at': bool,
            'user': UserEntity,
            'user_lockout': bool,
            'user_lockout_lock_period': int,
            'user_lockout_tries': int,
            'user_lockout_within': int,
            'user_requests_enabled': bool,
            'user_requests_notify_admins': bool,
            'welcome_custom_text': str,
            'welcome_email_cc': str,
            'welcome_email_enabled': bool,
            'welcome_email_subject': str,
            'welcome_screen': str,
            'windows_mode_ftp': bool
        }

        self.attribute_map = {
            'active_sftp_host_key_id': 'active_sftp_host_key_id',
            'admin_user_id': 'admin_user_id',
            'allow_bundle_names': 'allow_bundle_names',
            'allowed_2fa_method_bypass_for_ftp_sftp_dav': 'allowed_2fa_method_bypass_for_ftp_sftp_dav',
            'allowed_2fa_method_sms': 'allowed_2fa_method_sms',
            'allowed_2fa_method_totp': 'allowed_2fa_method_totp',
            'allowed_2fa_method_u2f': 'allowed_2fa_method_u2f',
            'allowed_2fa_method_webauthn': 'allowed_2fa_method_webauthn',
            'allowed_2fa_method_yubi': 'allowed_2fa_method_yubi',
            'allowed_countries': 'allowed_countries',
            'allowed_ips': 'allowed_ips',
            'ask_about_overwrites': 'ask_about_overwrites',
            'bundle_activity_notifications': 'bundle_activity_notifications',
            'bundle_expiration': 'bundle_expiration',
            'bundle_password_required': 'bundle_password_required',
            'bundle_registration_notifications': 'bundle_registration_notifications',
            'bundle_require_share_recipient': 'bundle_require_share_recipient',
            'bundle_upload_receipt_notifications': 'bundle_upload_receipt_notifications',
            'bundle_watermark_attachment': 'bundle_watermark_attachment',
            'bundle_watermark_value': 'bundle_watermark_value',
            'color2_left': 'color2_left',
            'color2_link': 'color2_link',
            'color2_text': 'color2_text',
            'color2_top': 'color2_top',
            'color2_top_text': 'color2_top_text',
            'contact_name': 'contact_name',
            'created_at': 'created_at',
            'currency': 'currency',
            'custom_namespace': 'custom_namespace',
            'days_to_retain_backups': 'days_to_retain_backups',
            'default_time_zone': 'default_time_zone',
            'desktop_app': 'desktop_app',
            'desktop_app_session_ip_pinning': 'desktop_app_session_ip_pinning',
            'desktop_app_session_lifetime': 'desktop_app_session_lifetime',
            'disable_files_certificate_generation': 'disable_files_certificate_generation',
            'disable_notifications': 'disable_notifications',
            'disable_password_reset': 'disable_password_reset',
            'disable_users_from_inactivity_period_days': 'disable_users_from_inactivity_period_days',
            'disallowed_countries': 'disallowed_countries',
            'domain': 'domain',
            'domain_hsts_header': 'domain_hsts_header',
            'domain_letsencrypt_chain': 'domain_letsencrypt_chain',
            'email': 'email',
            'folder_permissions_groups_only': 'folder_permissions_groups_only',
            'ftp_enabled': 'ftp_enabled',
            'hipaa': 'hipaa',
            'icon128': 'icon128',
            'icon16': 'icon16',
            'icon32': 'icon32',
            'icon48': 'icon48',
            'immutable_files_set_at': 'immutable_files_set_at',
            'include_password_in_welcome_email': 'include_password_in_welcome_email',
            'language': 'language',
            'ldap_base_dn': 'ldap_base_dn',
            'ldap_domain': 'ldap_domain',
            'ldap_enabled': 'ldap_enabled',
            'ldap_group_action': 'ldap_group_action',
            'ldap_group_exclusion': 'ldap_group_exclusion',
            'ldap_group_inclusion': 'ldap_group_inclusion',
            'ldap_host': 'ldap_host',
            'ldap_host_2': 'ldap_host_2',
            'ldap_host_3': 'ldap_host_3',
            'ldap_port': 'ldap_port',
            'ldap_secure': 'ldap_secure',
            'ldap_type': 'ldap_type',
            'ldap_user_action': 'ldap_user_action',
            'ldap_user_include_groups': 'ldap_user_include_groups',
            'ldap_username': 'ldap_username',
            'ldap_username_field': 'ldap_username_field',
            'login_help_text': 'login_help_text',
            'logo': 'logo',
            'max_prior_passwords': 'max_prior_passwords',
            'mobile_app': 'mobile_app',
            'mobile_app_session_ip_pinning': 'mobile_app_session_ip_pinning',
            'mobile_app_session_lifetime': 'mobile_app_session_lifetime',
            'motd_text': 'motd_text',
            'motd_use_for_ftp': 'motd_use_for_ftp',
            'motd_use_for_sftp': 'motd_use_for_sftp',
            'name': 'name',
            'next_billing_amount': 'next_billing_amount',
            'next_billing_date': 'next_billing_date',
            'non_sso_groups_allowed': 'non_sso_groups_allowed',
            'non_sso_users_allowed': 'non_sso_users_allowed',
            'office_integration_available': 'office_integration_available',
            'office_integration_type': 'office_integration_type',
            'oncehub_link': 'oncehub_link',
            'opt_out_global': 'opt_out_global',
            'overdue': 'overdue',
            'password_min_length': 'password_min_length',
            'password_require_letter': 'password_require_letter',
            'password_require_mixed': 'password_require_mixed',
            'password_require_number': 'password_require_number',
            'password_require_special': 'password_require_special',
            'password_require_unbreached': 'password_require_unbreached',
            'password_requirements_apply_to_bundles': 'password_requirements_apply_to_bundles',
            'password_validity_days': 'password_validity_days',
            'phone': 'phone',
            'pin_all_remote_servers_to_site_region': 'pin_all_remote_servers_to_site_region',
            'reply_to_email': 'reply_to_email',
            'require_2fa': 'require_2fa',
            'require_2fa_stop_time': 'require_2fa_stop_time',
            'require_2fa_user_type': 'require_2fa_user_type',
            'session': 'session',
            'session_expiry': 'session_expiry',
            'session_expiry_minutes': 'session_expiry_minutes',
            'session_pinned_by_ip': 'session_pinned_by_ip',
            'sftp_enabled': 'sftp_enabled',
            'sftp_host_key_type': 'sftp_host_key_type',
            'sftp_insecure_ciphers': 'sftp_insecure_ciphers',
            'sftp_user_root_enabled': 'sftp_user_root_enabled',
            'sharing_enabled': 'sharing_enabled',
            'show_request_access_link': 'show_request_access_link',
            'site_footer': 'site_footer',
            'site_header': 'site_header',
            'smtp_address': 'smtp_address',
            'smtp_authentication': 'smtp_authentication',
            'smtp_from': 'smtp_from',
            'smtp_port': 'smtp_port',
            'smtp_username': 'smtp_username',
            'ssl_required': 'ssl_required',
            'subdomain': 'subdomain',
            'switch_to_plan_date': 'switch_to_plan_date',
            'tls_disabled': 'tls_disabled',
            'trial_days_left': 'trial_days_left',
            'trial_until': 'trial_until',
            'updated_at': 'updated_at',
            'uploads_via_email_authentication': 'uploads_via_email_authentication',
            'use_provided_modified_at': 'use_provided_modified_at',
            'user': 'user',
            'user_lockout': 'user_lockout',
            'user_lockout_lock_period': 'user_lockout_lock_period',
            'user_lockout_tries': 'user_lockout_tries',
            'user_lockout_within': 'user_lockout_within',
            'user_requests_enabled': 'user_requests_enabled',
            'user_requests_notify_admins': 'user_requests_notify_admins',
            'welcome_custom_text': 'welcome_custom_text',
            'welcome_email_cc': 'welcome_email_cc',
            'welcome_email_enabled': 'welcome_email_enabled',
            'welcome_email_subject': 'welcome_email_subject',
            'welcome_screen': 'welcome_screen',
            'windows_mode_ftp': 'windows_mode_ftp'
        }

        self._active_sftp_host_key_id = active_sftp_host_key_id
        self._admin_user_id = admin_user_id
        self._allow_bundle_names = allow_bundle_names
        self._allowed_2fa_method_bypass_for_ftp_sftp_dav = allowed_2fa_method_bypass_for_ftp_sftp_dav
        self._allowed_2fa_method_sms = allowed_2fa_method_sms
        self._allowed_2fa_method_totp = allowed_2fa_method_totp
        self._allowed_2fa_method_u2f = allowed_2fa_method_u2f
        self._allowed_2fa_method_webauthn = allowed_2fa_method_webauthn
        self._allowed_2fa_method_yubi = allowed_2fa_method_yubi
        self._allowed_countries = allowed_countries
        self._allowed_ips = allowed_ips
        self._ask_about_overwrites = ask_about_overwrites
        self._bundle_activity_notifications = bundle_activity_notifications
        self._bundle_expiration = bundle_expiration
        self._bundle_password_required = bundle_password_required
        self._bundle_registration_notifications = bundle_registration_notifications
        self._bundle_require_share_recipient = bundle_require_share_recipient
        self._bundle_upload_receipt_notifications = bundle_upload_receipt_notifications
        self._bundle_watermark_attachment = bundle_watermark_attachment
        self._bundle_watermark_value = bundle_watermark_value
        self._color2_left = color2_left
        self._color2_link = color2_link
        self._color2_text = color2_text
        self._color2_top = color2_top
        self._color2_top_text = color2_top_text
        self._contact_name = contact_name
        self._created_at = created_at
        self._currency = currency
        self._custom_namespace = custom_namespace
        self._days_to_retain_backups = days_to_retain_backups
        self._default_time_zone = default_time_zone
        self._desktop_app = desktop_app
        self._desktop_app_session_ip_pinning = desktop_app_session_ip_pinning
        self._desktop_app_session_lifetime = desktop_app_session_lifetime
        self._disable_files_certificate_generation = disable_files_certificate_generation
        self._disable_notifications = disable_notifications
        self._disable_password_reset = disable_password_reset
        self._disable_users_from_inactivity_period_days = disable_users_from_inactivity_period_days
        self._disallowed_countries = disallowed_countries
        self._domain = domain
        self._domain_hsts_header = domain_hsts_header
        self._domain_letsencrypt_chain = domain_letsencrypt_chain
        self._email = email
        self._folder_permissions_groups_only = folder_permissions_groups_only
        self._ftp_enabled = ftp_enabled
        self._hipaa = hipaa
        self._icon128 = icon128
        self._icon16 = icon16
        self._icon32 = icon32
        self._icon48 = icon48
        self._immutable_files_set_at = immutable_files_set_at
        self._include_password_in_welcome_email = include_password_in_welcome_email
        self._language = language
        self._ldap_base_dn = ldap_base_dn
        self._ldap_domain = ldap_domain
        self._ldap_enabled = ldap_enabled
        self._ldap_group_action = ldap_group_action
        self._ldap_group_exclusion = ldap_group_exclusion
        self._ldap_group_inclusion = ldap_group_inclusion
        self._ldap_host = ldap_host
        self._ldap_host_2 = ldap_host_2
        self._ldap_host_3 = ldap_host_3
        self._ldap_port = ldap_port
        self._ldap_secure = ldap_secure
        self._ldap_type = ldap_type
        self._ldap_user_action = ldap_user_action
        self._ldap_user_include_groups = ldap_user_include_groups
        self._ldap_username = ldap_username
        self._ldap_username_field = ldap_username_field
        self._login_help_text = login_help_text
        self._logo = logo
        self._max_prior_passwords = max_prior_passwords
        self._mobile_app = mobile_app
        self._mobile_app_session_ip_pinning = mobile_app_session_ip_pinning
        self._mobile_app_session_lifetime = mobile_app_session_lifetime
        self._motd_text = motd_text
        self._motd_use_for_ftp = motd_use_for_ftp
        self._motd_use_for_sftp = motd_use_for_sftp
        self._name = name
        self._next_billing_amount = next_billing_amount
        self._next_billing_date = next_billing_date
        self._non_sso_groups_allowed = non_sso_groups_allowed
        self._non_sso_users_allowed = non_sso_users_allowed
        self._office_integration_available = office_integration_available
        self._office_integration_type = office_integration_type
        self._oncehub_link = oncehub_link
        self._opt_out_global = opt_out_global
        self._overdue = overdue
        self._password_min_length = password_min_length
        self._password_require_letter = password_require_letter
        self._password_require_mixed = password_require_mixed
        self._password_require_number = password_require_number
        self._password_require_special = password_require_special
        self._password_require_unbreached = password_require_unbreached
        self._password_requirements_apply_to_bundles = password_requirements_apply_to_bundles
        self._password_validity_days = password_validity_days
        self._phone = phone
        self._pin_all_remote_servers_to_site_region = pin_all_remote_servers_to_site_region
        self._reply_to_email = reply_to_email
        self._require_2fa = require_2fa
        self._require_2fa_stop_time = require_2fa_stop_time
        self._require_2fa_user_type = require_2fa_user_type
        self._session = session
        self._session_expiry = session_expiry
        self._session_expiry_minutes = session_expiry_minutes
        self._session_pinned_by_ip = session_pinned_by_ip
        self._sftp_enabled = sftp_enabled
        self._sftp_host_key_type = sftp_host_key_type
        self._sftp_insecure_ciphers = sftp_insecure_ciphers
        self._sftp_user_root_enabled = sftp_user_root_enabled
        self._sharing_enabled = sharing_enabled
        self._show_request_access_link = show_request_access_link
        self._site_footer = site_footer
        self._site_header = site_header
        self._smtp_address = smtp_address
        self._smtp_authentication = smtp_authentication
        self._smtp_from = smtp_from
        self._smtp_port = smtp_port
        self._smtp_username = smtp_username
        self._ssl_required = ssl_required
        self._subdomain = subdomain
        self._switch_to_plan_date = switch_to_plan_date
        self._tls_disabled = tls_disabled
        self._trial_days_left = trial_days_left
        self._trial_until = trial_until
        self._updated_at = updated_at
        self._uploads_via_email_authentication = uploads_via_email_authentication
        self._use_provided_modified_at = use_provided_modified_at
        self._user = user
        self._user_lockout = user_lockout
        self._user_lockout_lock_period = user_lockout_lock_period
        self._user_lockout_tries = user_lockout_tries
        self._user_lockout_within = user_lockout_within
        self._user_requests_enabled = user_requests_enabled
        self._user_requests_notify_admins = user_requests_notify_admins
        self._welcome_custom_text = welcome_custom_text
        self._welcome_email_cc = welcome_email_cc
        self._welcome_email_enabled = welcome_email_enabled
        self._welcome_email_subject = welcome_email_subject
        self._welcome_screen = welcome_screen
        self._windows_mode_ftp = windows_mode_ftp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteEntity of this SiteEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_sftp_host_key_id(self):
        """Gets the active_sftp_host_key_id of this SiteEntity.

        Id of the currently selected custom SFTP Host Key

        :return: The active_sftp_host_key_id of this SiteEntity.
        :rtype: int
        """
        return self._active_sftp_host_key_id

    @active_sftp_host_key_id.setter
    def active_sftp_host_key_id(self, active_sftp_host_key_id):
        """Sets the active_sftp_host_key_id of this SiteEntity.

        Id of the currently selected custom SFTP Host Key

        :param active_sftp_host_key_id: The active_sftp_host_key_id of this SiteEntity.
        :type active_sftp_host_key_id: int
        """

        self._active_sftp_host_key_id = active_sftp_host_key_id

    @property
    def admin_user_id(self):
        """Gets the admin_user_id of this SiteEntity.

        User ID for the main site administrator

        :return: The admin_user_id of this SiteEntity.
        :rtype: int
        """
        return self._admin_user_id

    @admin_user_id.setter
    def admin_user_id(self, admin_user_id):
        """Sets the admin_user_id of this SiteEntity.

        User ID for the main site administrator

        :param admin_user_id: The admin_user_id of this SiteEntity.
        :type admin_user_id: int
        """

        self._admin_user_id = admin_user_id

    @property
    def allow_bundle_names(self):
        """Gets the allow_bundle_names of this SiteEntity.

        Are manual Bundle names allowed?

        :return: The allow_bundle_names of this SiteEntity.
        :rtype: bool
        """
        return self._allow_bundle_names

    @allow_bundle_names.setter
    def allow_bundle_names(self, allow_bundle_names):
        """Sets the allow_bundle_names of this SiteEntity.

        Are manual Bundle names allowed?

        :param allow_bundle_names: The allow_bundle_names of this SiteEntity.
        :type allow_bundle_names: bool
        """

        self._allow_bundle_names = allow_bundle_names

    @property
    def allowed_2fa_method_bypass_for_ftp_sftp_dav(self):
        """Gets the allowed_2fa_method_bypass_for_ftp_sftp_dav of this SiteEntity.

        Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?

        :return: The allowed_2fa_method_bypass_for_ftp_sftp_dav of this SiteEntity.
        :rtype: bool
        """
        return self._allowed_2fa_method_bypass_for_ftp_sftp_dav

    @allowed_2fa_method_bypass_for_ftp_sftp_dav.setter
    def allowed_2fa_method_bypass_for_ftp_sftp_dav(self, allowed_2fa_method_bypass_for_ftp_sftp_dav):
        """Sets the allowed_2fa_method_bypass_for_ftp_sftp_dav of this SiteEntity.

        Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?

        :param allowed_2fa_method_bypass_for_ftp_sftp_dav: The allowed_2fa_method_bypass_for_ftp_sftp_dav of this SiteEntity.
        :type allowed_2fa_method_bypass_for_ftp_sftp_dav: bool
        """

        self._allowed_2fa_method_bypass_for_ftp_sftp_dav = allowed_2fa_method_bypass_for_ftp_sftp_dav

    @property
    def allowed_2fa_method_sms(self):
        """Gets the allowed_2fa_method_sms of this SiteEntity.

        Is SMS two factor authentication allowed?

        :return: The allowed_2fa_method_sms of this SiteEntity.
        :rtype: bool
        """
        return self._allowed_2fa_method_sms

    @allowed_2fa_method_sms.setter
    def allowed_2fa_method_sms(self, allowed_2fa_method_sms):
        """Sets the allowed_2fa_method_sms of this SiteEntity.

        Is SMS two factor authentication allowed?

        :param allowed_2fa_method_sms: The allowed_2fa_method_sms of this SiteEntity.
        :type allowed_2fa_method_sms: bool
        """

        self._allowed_2fa_method_sms = allowed_2fa_method_sms

    @property
    def allowed_2fa_method_totp(self):
        """Gets the allowed_2fa_method_totp of this SiteEntity.

        Is TOTP two factor authentication allowed?

        :return: The allowed_2fa_method_totp of this SiteEntity.
        :rtype: bool
        """
        return self._allowed_2fa_method_totp

    @allowed_2fa_method_totp.setter
    def allowed_2fa_method_totp(self, allowed_2fa_method_totp):
        """Sets the allowed_2fa_method_totp of this SiteEntity.

        Is TOTP two factor authentication allowed?

        :param allowed_2fa_method_totp: The allowed_2fa_method_totp of this SiteEntity.
        :type allowed_2fa_method_totp: bool
        """

        self._allowed_2fa_method_totp = allowed_2fa_method_totp

    @property
    def allowed_2fa_method_u2f(self):
        """Gets the allowed_2fa_method_u2f of this SiteEntity.

        Is U2F two factor authentication allowed?

        :return: The allowed_2fa_method_u2f of this SiteEntity.
        :rtype: bool
        """
        return self._allowed_2fa_method_u2f

    @allowed_2fa_method_u2f.setter
    def allowed_2fa_method_u2f(self, allowed_2fa_method_u2f):
        """Sets the allowed_2fa_method_u2f of this SiteEntity.

        Is U2F two factor authentication allowed?

        :param allowed_2fa_method_u2f: The allowed_2fa_method_u2f of this SiteEntity.
        :type allowed_2fa_method_u2f: bool
        """

        self._allowed_2fa_method_u2f = allowed_2fa_method_u2f

    @property
    def allowed_2fa_method_webauthn(self):
        """Gets the allowed_2fa_method_webauthn of this SiteEntity.

        Is WebAuthn two factor authentication allowed?

        :return: The allowed_2fa_method_webauthn of this SiteEntity.
        :rtype: bool
        """
        return self._allowed_2fa_method_webauthn

    @allowed_2fa_method_webauthn.setter
    def allowed_2fa_method_webauthn(self, allowed_2fa_method_webauthn):
        """Sets the allowed_2fa_method_webauthn of this SiteEntity.

        Is WebAuthn two factor authentication allowed?

        :param allowed_2fa_method_webauthn: The allowed_2fa_method_webauthn of this SiteEntity.
        :type allowed_2fa_method_webauthn: bool
        """

        self._allowed_2fa_method_webauthn = allowed_2fa_method_webauthn

    @property
    def allowed_2fa_method_yubi(self):
        """Gets the allowed_2fa_method_yubi of this SiteEntity.

        Is yubikey two factor authentication allowed?

        :return: The allowed_2fa_method_yubi of this SiteEntity.
        :rtype: bool
        """
        return self._allowed_2fa_method_yubi

    @allowed_2fa_method_yubi.setter
    def allowed_2fa_method_yubi(self, allowed_2fa_method_yubi):
        """Sets the allowed_2fa_method_yubi of this SiteEntity.

        Is yubikey two factor authentication allowed?

        :param allowed_2fa_method_yubi: The allowed_2fa_method_yubi of this SiteEntity.
        :type allowed_2fa_method_yubi: bool
        """

        self._allowed_2fa_method_yubi = allowed_2fa_method_yubi

    @property
    def allowed_countries(self):
        """Gets the allowed_countries of this SiteEntity.

        Comma seperated list of allowed Country codes

        :return: The allowed_countries of this SiteEntity.
        :rtype: str
        """
        return self._allowed_countries

    @allowed_countries.setter
    def allowed_countries(self, allowed_countries):
        """Sets the allowed_countries of this SiteEntity.

        Comma seperated list of allowed Country codes

        :param allowed_countries: The allowed_countries of this SiteEntity.
        :type allowed_countries: str
        """

        self._allowed_countries = allowed_countries

    @property
    def allowed_ips(self):
        """Gets the allowed_ips of this SiteEntity.

        List of allowed IP addresses

        :return: The allowed_ips of this SiteEntity.
        :rtype: str
        """
        return self._allowed_ips

    @allowed_ips.setter
    def allowed_ips(self, allowed_ips):
        """Sets the allowed_ips of this SiteEntity.

        List of allowed IP addresses

        :param allowed_ips: The allowed_ips of this SiteEntity.
        :type allowed_ips: str
        """

        self._allowed_ips = allowed_ips

    @property
    def ask_about_overwrites(self):
        """Gets the ask_about_overwrites of this SiteEntity.

        If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.

        :return: The ask_about_overwrites of this SiteEntity.
        :rtype: bool
        """
        return self._ask_about_overwrites

    @ask_about_overwrites.setter
    def ask_about_overwrites(self, ask_about_overwrites):
        """Sets the ask_about_overwrites of this SiteEntity.

        If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.

        :param ask_about_overwrites: The ask_about_overwrites of this SiteEntity.
        :type ask_about_overwrites: bool
        """

        self._ask_about_overwrites = ask_about_overwrites

    @property
    def bundle_activity_notifications(self):
        """Gets the bundle_activity_notifications of this SiteEntity.

        Do Bundle owners receive activity notifications?

        :return: The bundle_activity_notifications of this SiteEntity.
        :rtype: str
        """
        return self._bundle_activity_notifications

    @bundle_activity_notifications.setter
    def bundle_activity_notifications(self, bundle_activity_notifications):
        """Sets the bundle_activity_notifications of this SiteEntity.

        Do Bundle owners receive activity notifications?

        :param bundle_activity_notifications: The bundle_activity_notifications of this SiteEntity.
        :type bundle_activity_notifications: str
        """
        allowed_values = ["never", "always", "per_bundle_setting"]  # noqa: E501
        if bundle_activity_notifications not in allowed_values:
            raise ValueError(
                "Invalid value for `bundle_activity_notifications` ({0}), must be one of {1}"
                .format(bundle_activity_notifications, allowed_values)
            )

        self._bundle_activity_notifications = bundle_activity_notifications

    @property
    def bundle_expiration(self):
        """Gets the bundle_expiration of this SiteEntity.

        Site-wide Bundle expiration in days

        :return: The bundle_expiration of this SiteEntity.
        :rtype: int
        """
        return self._bundle_expiration

    @bundle_expiration.setter
    def bundle_expiration(self, bundle_expiration):
        """Sets the bundle_expiration of this SiteEntity.

        Site-wide Bundle expiration in days

        :param bundle_expiration: The bundle_expiration of this SiteEntity.
        :type bundle_expiration: int
        """

        self._bundle_expiration = bundle_expiration

    @property
    def bundle_password_required(self):
        """Gets the bundle_password_required of this SiteEntity.

        Do Bundles require password protection?

        :return: The bundle_password_required of this SiteEntity.
        :rtype: bool
        """
        return self._bundle_password_required

    @bundle_password_required.setter
    def bundle_password_required(self, bundle_password_required):
        """Sets the bundle_password_required of this SiteEntity.

        Do Bundles require password protection?

        :param bundle_password_required: The bundle_password_required of this SiteEntity.
        :type bundle_password_required: bool
        """

        self._bundle_password_required = bundle_password_required

    @property
    def bundle_registration_notifications(self):
        """Gets the bundle_registration_notifications of this SiteEntity.

        Do Bundle owners receive registration notification?

        :return: The bundle_registration_notifications of this SiteEntity.
        :rtype: str
        """
        return self._bundle_registration_notifications

    @bundle_registration_notifications.setter
    def bundle_registration_notifications(self, bundle_registration_notifications):
        """Sets the bundle_registration_notifications of this SiteEntity.

        Do Bundle owners receive registration notification?

        :param bundle_registration_notifications: The bundle_registration_notifications of this SiteEntity.
        :type bundle_registration_notifications: str
        """
        allowed_values = ["never", "always", "per_bundle_setting"]  # noqa: E501
        if bundle_registration_notifications not in allowed_values:
            raise ValueError(
                "Invalid value for `bundle_registration_notifications` ({0}), must be one of {1}"
                .format(bundle_registration_notifications, allowed_values)
            )

        self._bundle_registration_notifications = bundle_registration_notifications

    @property
    def bundle_require_share_recipient(self):
        """Gets the bundle_require_share_recipient of this SiteEntity.

        Do Bundles require recipients for sharing?

        :return: The bundle_require_share_recipient of this SiteEntity.
        :rtype: bool
        """
        return self._bundle_require_share_recipient

    @bundle_require_share_recipient.setter
    def bundle_require_share_recipient(self, bundle_require_share_recipient):
        """Sets the bundle_require_share_recipient of this SiteEntity.

        Do Bundles require recipients for sharing?

        :param bundle_require_share_recipient: The bundle_require_share_recipient of this SiteEntity.
        :type bundle_require_share_recipient: bool
        """

        self._bundle_require_share_recipient = bundle_require_share_recipient

    @property
    def bundle_upload_receipt_notifications(self):
        """Gets the bundle_upload_receipt_notifications of this SiteEntity.

        Do Bundle uploaders receive upload confirmation notifications?

        :return: The bundle_upload_receipt_notifications of this SiteEntity.
        :rtype: str
        """
        return self._bundle_upload_receipt_notifications

    @bundle_upload_receipt_notifications.setter
    def bundle_upload_receipt_notifications(self, bundle_upload_receipt_notifications):
        """Sets the bundle_upload_receipt_notifications of this SiteEntity.

        Do Bundle uploaders receive upload confirmation notifications?

        :param bundle_upload_receipt_notifications: The bundle_upload_receipt_notifications of this SiteEntity.
        :type bundle_upload_receipt_notifications: str
        """
        allowed_values = ["never", "always", "per_bundle_setting"]  # noqa: E501
        if bundle_upload_receipt_notifications not in allowed_values:
            raise ValueError(
                "Invalid value for `bundle_upload_receipt_notifications` ({0}), must be one of {1}"
                .format(bundle_upload_receipt_notifications, allowed_values)
            )

        self._bundle_upload_receipt_notifications = bundle_upload_receipt_notifications

    @property
    def bundle_watermark_attachment(self):
        """Gets the bundle_watermark_attachment of this SiteEntity.


        :return: The bundle_watermark_attachment of this SiteEntity.
        :rtype: ImageEntity
        """
        return self._bundle_watermark_attachment

    @bundle_watermark_attachment.setter
    def bundle_watermark_attachment(self, bundle_watermark_attachment):
        """Sets the bundle_watermark_attachment of this SiteEntity.


        :param bundle_watermark_attachment: The bundle_watermark_attachment of this SiteEntity.
        :type bundle_watermark_attachment: ImageEntity
        """

        self._bundle_watermark_attachment = bundle_watermark_attachment

    @property
    def bundle_watermark_value(self):
        """Gets the bundle_watermark_value of this SiteEntity.

        Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value

        :return: The bundle_watermark_value of this SiteEntity.
        :rtype: object
        """
        return self._bundle_watermark_value

    @bundle_watermark_value.setter
    def bundle_watermark_value(self, bundle_watermark_value):
        """Sets the bundle_watermark_value of this SiteEntity.

        Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value

        :param bundle_watermark_value: The bundle_watermark_value of this SiteEntity.
        :type bundle_watermark_value: object
        """

        self._bundle_watermark_value = bundle_watermark_value

    @property
    def color2_left(self):
        """Gets the color2_left of this SiteEntity.

        Page link and button color

        :return: The color2_left of this SiteEntity.
        :rtype: str
        """
        return self._color2_left

    @color2_left.setter
    def color2_left(self, color2_left):
        """Sets the color2_left of this SiteEntity.

        Page link and button color

        :param color2_left: The color2_left of this SiteEntity.
        :type color2_left: str
        """

        self._color2_left = color2_left

    @property
    def color2_link(self):
        """Gets the color2_link of this SiteEntity.

        Top bar link color

        :return: The color2_link of this SiteEntity.
        :rtype: str
        """
        return self._color2_link

    @color2_link.setter
    def color2_link(self, color2_link):
        """Sets the color2_link of this SiteEntity.

        Top bar link color

        :param color2_link: The color2_link of this SiteEntity.
        :type color2_link: str
        """

        self._color2_link = color2_link

    @property
    def color2_text(self):
        """Gets the color2_text of this SiteEntity.

        Page link and button color

        :return: The color2_text of this SiteEntity.
        :rtype: str
        """
        return self._color2_text

    @color2_text.setter
    def color2_text(self, color2_text):
        """Sets the color2_text of this SiteEntity.

        Page link and button color

        :param color2_text: The color2_text of this SiteEntity.
        :type color2_text: str
        """

        self._color2_text = color2_text

    @property
    def color2_top(self):
        """Gets the color2_top of this SiteEntity.

        Top bar background color

        :return: The color2_top of this SiteEntity.
        :rtype: str
        """
        return self._color2_top

    @color2_top.setter
    def color2_top(self, color2_top):
        """Sets the color2_top of this SiteEntity.

        Top bar background color

        :param color2_top: The color2_top of this SiteEntity.
        :type color2_top: str
        """

        self._color2_top = color2_top

    @property
    def color2_top_text(self):
        """Gets the color2_top_text of this SiteEntity.

        Top bar text color

        :return: The color2_top_text of this SiteEntity.
        :rtype: str
        """
        return self._color2_top_text

    @color2_top_text.setter
    def color2_top_text(self, color2_top_text):
        """Sets the color2_top_text of this SiteEntity.

        Top bar text color

        :param color2_top_text: The color2_top_text of this SiteEntity.
        :type color2_top_text: str
        """

        self._color2_top_text = color2_top_text

    @property
    def contact_name(self):
        """Gets the contact_name of this SiteEntity.

        Site main contact name

        :return: The contact_name of this SiteEntity.
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this SiteEntity.

        Site main contact name

        :param contact_name: The contact_name of this SiteEntity.
        :type contact_name: str
        """

        self._contact_name = contact_name

    @property
    def created_at(self):
        """Gets the created_at of this SiteEntity.

        Time this site was created

        :return: The created_at of this SiteEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SiteEntity.

        Time this site was created

        :param created_at: The created_at of this SiteEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this SiteEntity.

        Preferred currency

        :return: The currency of this SiteEntity.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SiteEntity.

        Preferred currency

        :param currency: The currency of this SiteEntity.
        :type currency: str
        """

        self._currency = currency

    @property
    def custom_namespace(self):
        """Gets the custom_namespace of this SiteEntity.

        Is this site using a custom namespace for users?

        :return: The custom_namespace of this SiteEntity.
        :rtype: bool
        """
        return self._custom_namespace

    @custom_namespace.setter
    def custom_namespace(self, custom_namespace):
        """Sets the custom_namespace of this SiteEntity.

        Is this site using a custom namespace for users?

        :param custom_namespace: The custom_namespace of this SiteEntity.
        :type custom_namespace: bool
        """

        self._custom_namespace = custom_namespace

    @property
    def days_to_retain_backups(self):
        """Gets the days_to_retain_backups of this SiteEntity.

        Number of days to keep deleted files

        :return: The days_to_retain_backups of this SiteEntity.
        :rtype: int
        """
        return self._days_to_retain_backups

    @days_to_retain_backups.setter
    def days_to_retain_backups(self, days_to_retain_backups):
        """Sets the days_to_retain_backups of this SiteEntity.

        Number of days to keep deleted files

        :param days_to_retain_backups: The days_to_retain_backups of this SiteEntity.
        :type days_to_retain_backups: int
        """

        self._days_to_retain_backups = days_to_retain_backups

    @property
    def default_time_zone(self):
        """Gets the default_time_zone of this SiteEntity.

        Site default time zone

        :return: The default_time_zone of this SiteEntity.
        :rtype: str
        """
        return self._default_time_zone

    @default_time_zone.setter
    def default_time_zone(self, default_time_zone):
        """Sets the default_time_zone of this SiteEntity.

        Site default time zone

        :param default_time_zone: The default_time_zone of this SiteEntity.
        :type default_time_zone: str
        """

        self._default_time_zone = default_time_zone

    @property
    def desktop_app(self):
        """Gets the desktop_app of this SiteEntity.

        Is the desktop app enabled?

        :return: The desktop_app of this SiteEntity.
        :rtype: bool
        """
        return self._desktop_app

    @desktop_app.setter
    def desktop_app(self, desktop_app):
        """Sets the desktop_app of this SiteEntity.

        Is the desktop app enabled?

        :param desktop_app: The desktop_app of this SiteEntity.
        :type desktop_app: bool
        """

        self._desktop_app = desktop_app

    @property
    def desktop_app_session_ip_pinning(self):
        """Gets the desktop_app_session_ip_pinning of this SiteEntity.

        Is desktop app session IP pinning enabled?

        :return: The desktop_app_session_ip_pinning of this SiteEntity.
        :rtype: bool
        """
        return self._desktop_app_session_ip_pinning

    @desktop_app_session_ip_pinning.setter
    def desktop_app_session_ip_pinning(self, desktop_app_session_ip_pinning):
        """Sets the desktop_app_session_ip_pinning of this SiteEntity.

        Is desktop app session IP pinning enabled?

        :param desktop_app_session_ip_pinning: The desktop_app_session_ip_pinning of this SiteEntity.
        :type desktop_app_session_ip_pinning: bool
        """

        self._desktop_app_session_ip_pinning = desktop_app_session_ip_pinning

    @property
    def desktop_app_session_lifetime(self):
        """Gets the desktop_app_session_lifetime of this SiteEntity.

        Desktop app session lifetime (in hours)

        :return: The desktop_app_session_lifetime of this SiteEntity.
        :rtype: int
        """
        return self._desktop_app_session_lifetime

    @desktop_app_session_lifetime.setter
    def desktop_app_session_lifetime(self, desktop_app_session_lifetime):
        """Sets the desktop_app_session_lifetime of this SiteEntity.

        Desktop app session lifetime (in hours)

        :param desktop_app_session_lifetime: The desktop_app_session_lifetime of this SiteEntity.
        :type desktop_app_session_lifetime: int
        """

        self._desktop_app_session_lifetime = desktop_app_session_lifetime

    @property
    def disable_files_certificate_generation(self):
        """Gets the disable_files_certificate_generation of this SiteEntity.

        If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.

        :return: The disable_files_certificate_generation of this SiteEntity.
        :rtype: bool
        """
        return self._disable_files_certificate_generation

    @disable_files_certificate_generation.setter
    def disable_files_certificate_generation(self, disable_files_certificate_generation):
        """Sets the disable_files_certificate_generation of this SiteEntity.

        If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.

        :param disable_files_certificate_generation: The disable_files_certificate_generation of this SiteEntity.
        :type disable_files_certificate_generation: bool
        """

        self._disable_files_certificate_generation = disable_files_certificate_generation

    @property
    def disable_notifications(self):
        """Gets the disable_notifications of this SiteEntity.

        Are notifications disabled?

        :return: The disable_notifications of this SiteEntity.
        :rtype: bool
        """
        return self._disable_notifications

    @disable_notifications.setter
    def disable_notifications(self, disable_notifications):
        """Sets the disable_notifications of this SiteEntity.

        Are notifications disabled?

        :param disable_notifications: The disable_notifications of this SiteEntity.
        :type disable_notifications: bool
        """

        self._disable_notifications = disable_notifications

    @property
    def disable_password_reset(self):
        """Gets the disable_password_reset of this SiteEntity.

        Is password reset disabled?

        :return: The disable_password_reset of this SiteEntity.
        :rtype: bool
        """
        return self._disable_password_reset

    @disable_password_reset.setter
    def disable_password_reset(self, disable_password_reset):
        """Sets the disable_password_reset of this SiteEntity.

        Is password reset disabled?

        :param disable_password_reset: The disable_password_reset of this SiteEntity.
        :type disable_password_reset: bool
        """

        self._disable_password_reset = disable_password_reset

    @property
    def disable_users_from_inactivity_period_days(self):
        """Gets the disable_users_from_inactivity_period_days of this SiteEntity.

        If greater than zero, users will unable to login if they do not show activity within this number of days.

        :return: The disable_users_from_inactivity_period_days of this SiteEntity.
        :rtype: int
        """
        return self._disable_users_from_inactivity_period_days

    @disable_users_from_inactivity_period_days.setter
    def disable_users_from_inactivity_period_days(self, disable_users_from_inactivity_period_days):
        """Sets the disable_users_from_inactivity_period_days of this SiteEntity.

        If greater than zero, users will unable to login if they do not show activity within this number of days.

        :param disable_users_from_inactivity_period_days: The disable_users_from_inactivity_period_days of this SiteEntity.
        :type disable_users_from_inactivity_period_days: int
        """

        self._disable_users_from_inactivity_period_days = disable_users_from_inactivity_period_days

    @property
    def disallowed_countries(self):
        """Gets the disallowed_countries of this SiteEntity.

        Comma seperated list of disallowed Country codes

        :return: The disallowed_countries of this SiteEntity.
        :rtype: str
        """
        return self._disallowed_countries

    @disallowed_countries.setter
    def disallowed_countries(self, disallowed_countries):
        """Sets the disallowed_countries of this SiteEntity.

        Comma seperated list of disallowed Country codes

        :param disallowed_countries: The disallowed_countries of this SiteEntity.
        :type disallowed_countries: str
        """

        self._disallowed_countries = disallowed_countries

    @property
    def domain(self):
        """Gets the domain of this SiteEntity.

        Custom domain

        :return: The domain of this SiteEntity.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SiteEntity.

        Custom domain

        :param domain: The domain of this SiteEntity.
        :type domain: str
        """

        self._domain = domain

    @property
    def domain_hsts_header(self):
        """Gets the domain_hsts_header of this SiteEntity.

        Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?

        :return: The domain_hsts_header of this SiteEntity.
        :rtype: bool
        """
        return self._domain_hsts_header

    @domain_hsts_header.setter
    def domain_hsts_header(self, domain_hsts_header):
        """Sets the domain_hsts_header of this SiteEntity.

        Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?

        :param domain_hsts_header: The domain_hsts_header of this SiteEntity.
        :type domain_hsts_header: bool
        """

        self._domain_hsts_header = domain_hsts_header

    @property
    def domain_letsencrypt_chain(self):
        """Gets the domain_letsencrypt_chain of this SiteEntity.

        Letsencrypt chain to use when registering SSL Certificate for domain.

        :return: The domain_letsencrypt_chain of this SiteEntity.
        :rtype: str
        """
        return self._domain_letsencrypt_chain

    @domain_letsencrypt_chain.setter
    def domain_letsencrypt_chain(self, domain_letsencrypt_chain):
        """Sets the domain_letsencrypt_chain of this SiteEntity.

        Letsencrypt chain to use when registering SSL Certificate for domain.

        :param domain_letsencrypt_chain: The domain_letsencrypt_chain of this SiteEntity.
        :type domain_letsencrypt_chain: str
        """
        allowed_values = ["default", "isrg_root_x1", "dst_root_ca_x3"]  # noqa: E501
        if domain_letsencrypt_chain not in allowed_values:
            raise ValueError(
                "Invalid value for `domain_letsencrypt_chain` ({0}), must be one of {1}"
                .format(domain_letsencrypt_chain, allowed_values)
            )

        self._domain_letsencrypt_chain = domain_letsencrypt_chain

    @property
    def email(self):
        """Gets the email of this SiteEntity.

        Main email for this site

        :return: The email of this SiteEntity.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SiteEntity.

        Main email for this site

        :param email: The email of this SiteEntity.
        :type email: str
        """

        self._email = email

    @property
    def folder_permissions_groups_only(self):
        """Gets the folder_permissions_groups_only of this SiteEntity.

        If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.

        :return: The folder_permissions_groups_only of this SiteEntity.
        :rtype: bool
        """
        return self._folder_permissions_groups_only

    @folder_permissions_groups_only.setter
    def folder_permissions_groups_only(self, folder_permissions_groups_only):
        """Sets the folder_permissions_groups_only of this SiteEntity.

        If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.

        :param folder_permissions_groups_only: The folder_permissions_groups_only of this SiteEntity.
        :type folder_permissions_groups_only: bool
        """

        self._folder_permissions_groups_only = folder_permissions_groups_only

    @property
    def ftp_enabled(self):
        """Gets the ftp_enabled of this SiteEntity.

        Is FTP enabled?

        :return: The ftp_enabled of this SiteEntity.
        :rtype: bool
        """
        return self._ftp_enabled

    @ftp_enabled.setter
    def ftp_enabled(self, ftp_enabled):
        """Sets the ftp_enabled of this SiteEntity.

        Is FTP enabled?

        :param ftp_enabled: The ftp_enabled of this SiteEntity.
        :type ftp_enabled: bool
        """

        self._ftp_enabled = ftp_enabled

    @property
    def hipaa(self):
        """Gets the hipaa of this SiteEntity.

        Is there a signed HIPAA BAA between Files.com and this site?

        :return: The hipaa of this SiteEntity.
        :rtype: bool
        """
        return self._hipaa

    @hipaa.setter
    def hipaa(self, hipaa):
        """Sets the hipaa of this SiteEntity.

        Is there a signed HIPAA BAA between Files.com and this site?

        :param hipaa: The hipaa of this SiteEntity.
        :type hipaa: bool
        """

        self._hipaa = hipaa

    @property
    def icon128(self):
        """Gets the icon128 of this SiteEntity.


        :return: The icon128 of this SiteEntity.
        :rtype: ImageEntity
        """
        return self._icon128

    @icon128.setter
    def icon128(self, icon128):
        """Sets the icon128 of this SiteEntity.


        :param icon128: The icon128 of this SiteEntity.
        :type icon128: ImageEntity
        """

        self._icon128 = icon128

    @property
    def icon16(self):
        """Gets the icon16 of this SiteEntity.


        :return: The icon16 of this SiteEntity.
        :rtype: ImageEntity
        """
        return self._icon16

    @icon16.setter
    def icon16(self, icon16):
        """Sets the icon16 of this SiteEntity.


        :param icon16: The icon16 of this SiteEntity.
        :type icon16: ImageEntity
        """

        self._icon16 = icon16

    @property
    def icon32(self):
        """Gets the icon32 of this SiteEntity.


        :return: The icon32 of this SiteEntity.
        :rtype: ImageEntity
        """
        return self._icon32

    @icon32.setter
    def icon32(self, icon32):
        """Sets the icon32 of this SiteEntity.


        :param icon32: The icon32 of this SiteEntity.
        :type icon32: ImageEntity
        """

        self._icon32 = icon32

    @property
    def icon48(self):
        """Gets the icon48 of this SiteEntity.


        :return: The icon48 of this SiteEntity.
        :rtype: ImageEntity
        """
        return self._icon48

    @icon48.setter
    def icon48(self, icon48):
        """Sets the icon48 of this SiteEntity.


        :param icon48: The icon48 of this SiteEntity.
        :type icon48: ImageEntity
        """

        self._icon48 = icon48

    @property
    def immutable_files_set_at(self):
        """Gets the immutable_files_set_at of this SiteEntity.

        Can files be modified?

        :return: The immutable_files_set_at of this SiteEntity.
        :rtype: datetime
        """
        return self._immutable_files_set_at

    @immutable_files_set_at.setter
    def immutable_files_set_at(self, immutable_files_set_at):
        """Sets the immutable_files_set_at of this SiteEntity.

        Can files be modified?

        :param immutable_files_set_at: The immutable_files_set_at of this SiteEntity.
        :type immutable_files_set_at: datetime
        """

        self._immutable_files_set_at = immutable_files_set_at

    @property
    def include_password_in_welcome_email(self):
        """Gets the include_password_in_welcome_email of this SiteEntity.

        Include password in emails to new users?

        :return: The include_password_in_welcome_email of this SiteEntity.
        :rtype: bool
        """
        return self._include_password_in_welcome_email

    @include_password_in_welcome_email.setter
    def include_password_in_welcome_email(self, include_password_in_welcome_email):
        """Sets the include_password_in_welcome_email of this SiteEntity.

        Include password in emails to new users?

        :param include_password_in_welcome_email: The include_password_in_welcome_email of this SiteEntity.
        :type include_password_in_welcome_email: bool
        """

        self._include_password_in_welcome_email = include_password_in_welcome_email

    @property
    def language(self):
        """Gets the language of this SiteEntity.

        Site default language

        :return: The language of this SiteEntity.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SiteEntity.

        Site default language

        :param language: The language of this SiteEntity.
        :type language: str
        """

        self._language = language

    @property
    def ldap_base_dn(self):
        """Gets the ldap_base_dn of this SiteEntity.

        Base DN for looking up users in LDAP server

        :return: The ldap_base_dn of this SiteEntity.
        :rtype: str
        """
        return self._ldap_base_dn

    @ldap_base_dn.setter
    def ldap_base_dn(self, ldap_base_dn):
        """Sets the ldap_base_dn of this SiteEntity.

        Base DN for looking up users in LDAP server

        :param ldap_base_dn: The ldap_base_dn of this SiteEntity.
        :type ldap_base_dn: str
        """

        self._ldap_base_dn = ldap_base_dn

    @property
    def ldap_domain(self):
        """Gets the ldap_domain of this SiteEntity.

        Domain name that will be appended to usernames

        :return: The ldap_domain of this SiteEntity.
        :rtype: str
        """
        return self._ldap_domain

    @ldap_domain.setter
    def ldap_domain(self, ldap_domain):
        """Sets the ldap_domain of this SiteEntity.

        Domain name that will be appended to usernames

        :param ldap_domain: The ldap_domain of this SiteEntity.
        :type ldap_domain: str
        """

        self._ldap_domain = ldap_domain

    @property
    def ldap_enabled(self):
        """Gets the ldap_enabled of this SiteEntity.

        Main LDAP setting: is LDAP enabled?

        :return: The ldap_enabled of this SiteEntity.
        :rtype: bool
        """
        return self._ldap_enabled

    @ldap_enabled.setter
    def ldap_enabled(self, ldap_enabled):
        """Sets the ldap_enabled of this SiteEntity.

        Main LDAP setting: is LDAP enabled?

        :param ldap_enabled: The ldap_enabled of this SiteEntity.
        :type ldap_enabled: bool
        """

        self._ldap_enabled = ldap_enabled

    @property
    def ldap_group_action(self):
        """Gets the ldap_group_action of this SiteEntity.

        Should we sync groups from LDAP server?

        :return: The ldap_group_action of this SiteEntity.
        :rtype: str
        """
        return self._ldap_group_action

    @ldap_group_action.setter
    def ldap_group_action(self, ldap_group_action):
        """Sets the ldap_group_action of this SiteEntity.

        Should we sync groups from LDAP server?

        :param ldap_group_action: The ldap_group_action of this SiteEntity.
        :type ldap_group_action: str
        """

        self._ldap_group_action = ldap_group_action

    @property
    def ldap_group_exclusion(self):
        """Gets the ldap_group_exclusion of this SiteEntity.

        Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.

        :return: The ldap_group_exclusion of this SiteEntity.
        :rtype: str
        """
        return self._ldap_group_exclusion

    @ldap_group_exclusion.setter
    def ldap_group_exclusion(self, ldap_group_exclusion):
        """Sets the ldap_group_exclusion of this SiteEntity.

        Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.

        :param ldap_group_exclusion: The ldap_group_exclusion of this SiteEntity.
        :type ldap_group_exclusion: str
        """

        self._ldap_group_exclusion = ldap_group_exclusion

    @property
    def ldap_group_inclusion(self):
        """Gets the ldap_group_inclusion of this SiteEntity.

        Comma or newline separated list of group names (with optional wildcards) to include when syncing.

        :return: The ldap_group_inclusion of this SiteEntity.
        :rtype: str
        """
        return self._ldap_group_inclusion

    @ldap_group_inclusion.setter
    def ldap_group_inclusion(self, ldap_group_inclusion):
        """Sets the ldap_group_inclusion of this SiteEntity.

        Comma or newline separated list of group names (with optional wildcards) to include when syncing.

        :param ldap_group_inclusion: The ldap_group_inclusion of this SiteEntity.
        :type ldap_group_inclusion: str
        """

        self._ldap_group_inclusion = ldap_group_inclusion

    @property
    def ldap_host(self):
        """Gets the ldap_host of this SiteEntity.

        LDAP host

        :return: The ldap_host of this SiteEntity.
        :rtype: str
        """
        return self._ldap_host

    @ldap_host.setter
    def ldap_host(self, ldap_host):
        """Sets the ldap_host of this SiteEntity.

        LDAP host

        :param ldap_host: The ldap_host of this SiteEntity.
        :type ldap_host: str
        """

        self._ldap_host = ldap_host

    @property
    def ldap_host_2(self):
        """Gets the ldap_host_2 of this SiteEntity.

        LDAP backup host

        :return: The ldap_host_2 of this SiteEntity.
        :rtype: str
        """
        return self._ldap_host_2

    @ldap_host_2.setter
    def ldap_host_2(self, ldap_host_2):
        """Sets the ldap_host_2 of this SiteEntity.

        LDAP backup host

        :param ldap_host_2: The ldap_host_2 of this SiteEntity.
        :type ldap_host_2: str
        """

        self._ldap_host_2 = ldap_host_2

    @property
    def ldap_host_3(self):
        """Gets the ldap_host_3 of this SiteEntity.

        LDAP backup host

        :return: The ldap_host_3 of this SiteEntity.
        :rtype: str
        """
        return self._ldap_host_3

    @ldap_host_3.setter
    def ldap_host_3(self, ldap_host_3):
        """Sets the ldap_host_3 of this SiteEntity.

        LDAP backup host

        :param ldap_host_3: The ldap_host_3 of this SiteEntity.
        :type ldap_host_3: str
        """

        self._ldap_host_3 = ldap_host_3

    @property
    def ldap_port(self):
        """Gets the ldap_port of this SiteEntity.

        LDAP port

        :return: The ldap_port of this SiteEntity.
        :rtype: int
        """
        return self._ldap_port

    @ldap_port.setter
    def ldap_port(self, ldap_port):
        """Sets the ldap_port of this SiteEntity.

        LDAP port

        :param ldap_port: The ldap_port of this SiteEntity.
        :type ldap_port: int
        """

        self._ldap_port = ldap_port

    @property
    def ldap_secure(self):
        """Gets the ldap_secure of this SiteEntity.

        Use secure LDAP?

        :return: The ldap_secure of this SiteEntity.
        :rtype: bool
        """
        return self._ldap_secure

    @ldap_secure.setter
    def ldap_secure(self, ldap_secure):
        """Sets the ldap_secure of this SiteEntity.

        Use secure LDAP?

        :param ldap_secure: The ldap_secure of this SiteEntity.
        :type ldap_secure: bool
        """

        self._ldap_secure = ldap_secure

    @property
    def ldap_type(self):
        """Gets the ldap_type of this SiteEntity.

        LDAP type

        :return: The ldap_type of this SiteEntity.
        :rtype: str
        """
        return self._ldap_type

    @ldap_type.setter
    def ldap_type(self, ldap_type):
        """Sets the ldap_type of this SiteEntity.

        LDAP type

        :param ldap_type: The ldap_type of this SiteEntity.
        :type ldap_type: str
        """

        self._ldap_type = ldap_type

    @property
    def ldap_user_action(self):
        """Gets the ldap_user_action of this SiteEntity.

        Should we sync users from LDAP server?

        :return: The ldap_user_action of this SiteEntity.
        :rtype: str
        """
        return self._ldap_user_action

    @ldap_user_action.setter
    def ldap_user_action(self, ldap_user_action):
        """Sets the ldap_user_action of this SiteEntity.

        Should we sync users from LDAP server?

        :param ldap_user_action: The ldap_user_action of this SiteEntity.
        :type ldap_user_action: str
        """

        self._ldap_user_action = ldap_user_action

    @property
    def ldap_user_include_groups(self):
        """Gets the ldap_user_include_groups of this SiteEntity.

        Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.

        :return: The ldap_user_include_groups of this SiteEntity.
        :rtype: str
        """
        return self._ldap_user_include_groups

    @ldap_user_include_groups.setter
    def ldap_user_include_groups(self, ldap_user_include_groups):
        """Sets the ldap_user_include_groups of this SiteEntity.

        Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.

        :param ldap_user_include_groups: The ldap_user_include_groups of this SiteEntity.
        :type ldap_user_include_groups: str
        """

        self._ldap_user_include_groups = ldap_user_include_groups

    @property
    def ldap_username(self):
        """Gets the ldap_username of this SiteEntity.

        Username for signing in to LDAP server.

        :return: The ldap_username of this SiteEntity.
        :rtype: str
        """
        return self._ldap_username

    @ldap_username.setter
    def ldap_username(self, ldap_username):
        """Sets the ldap_username of this SiteEntity.

        Username for signing in to LDAP server.

        :param ldap_username: The ldap_username of this SiteEntity.
        :type ldap_username: str
        """

        self._ldap_username = ldap_username

    @property
    def ldap_username_field(self):
        """Gets the ldap_username_field of this SiteEntity.

        LDAP username field

        :return: The ldap_username_field of this SiteEntity.
        :rtype: str
        """
        return self._ldap_username_field

    @ldap_username_field.setter
    def ldap_username_field(self, ldap_username_field):
        """Sets the ldap_username_field of this SiteEntity.

        LDAP username field

        :param ldap_username_field: The ldap_username_field of this SiteEntity.
        :type ldap_username_field: str
        """

        self._ldap_username_field = ldap_username_field

    @property
    def login_help_text(self):
        """Gets the login_help_text of this SiteEntity.

        Login help text

        :return: The login_help_text of this SiteEntity.
        :rtype: str
        """
        return self._login_help_text

    @login_help_text.setter
    def login_help_text(self, login_help_text):
        """Sets the login_help_text of this SiteEntity.

        Login help text

        :param login_help_text: The login_help_text of this SiteEntity.
        :type login_help_text: str
        """

        self._login_help_text = login_help_text

    @property
    def logo(self):
        """Gets the logo of this SiteEntity.


        :return: The logo of this SiteEntity.
        :rtype: ImageEntity
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this SiteEntity.


        :param logo: The logo of this SiteEntity.
        :type logo: ImageEntity
        """

        self._logo = logo

    @property
    def max_prior_passwords(self):
        """Gets the max_prior_passwords of this SiteEntity.

        Number of prior passwords to disallow

        :return: The max_prior_passwords of this SiteEntity.
        :rtype: int
        """
        return self._max_prior_passwords

    @max_prior_passwords.setter
    def max_prior_passwords(self, max_prior_passwords):
        """Sets the max_prior_passwords of this SiteEntity.

        Number of prior passwords to disallow

        :param max_prior_passwords: The max_prior_passwords of this SiteEntity.
        :type max_prior_passwords: int
        """

        self._max_prior_passwords = max_prior_passwords

    @property
    def mobile_app(self):
        """Gets the mobile_app of this SiteEntity.

        Is the mobile app enabled?

        :return: The mobile_app of this SiteEntity.
        :rtype: bool
        """
        return self._mobile_app

    @mobile_app.setter
    def mobile_app(self, mobile_app):
        """Sets the mobile_app of this SiteEntity.

        Is the mobile app enabled?

        :param mobile_app: The mobile_app of this SiteEntity.
        :type mobile_app: bool
        """

        self._mobile_app = mobile_app

    @property
    def mobile_app_session_ip_pinning(self):
        """Gets the mobile_app_session_ip_pinning of this SiteEntity.

        Is mobile app session IP pinning enabled?

        :return: The mobile_app_session_ip_pinning of this SiteEntity.
        :rtype: bool
        """
        return self._mobile_app_session_ip_pinning

    @mobile_app_session_ip_pinning.setter
    def mobile_app_session_ip_pinning(self, mobile_app_session_ip_pinning):
        """Sets the mobile_app_session_ip_pinning of this SiteEntity.

        Is mobile app session IP pinning enabled?

        :param mobile_app_session_ip_pinning: The mobile_app_session_ip_pinning of this SiteEntity.
        :type mobile_app_session_ip_pinning: bool
        """

        self._mobile_app_session_ip_pinning = mobile_app_session_ip_pinning

    @property
    def mobile_app_session_lifetime(self):
        """Gets the mobile_app_session_lifetime of this SiteEntity.

        Mobile app session lifetime (in hours)

        :return: The mobile_app_session_lifetime of this SiteEntity.
        :rtype: int
        """
        return self._mobile_app_session_lifetime

    @mobile_app_session_lifetime.setter
    def mobile_app_session_lifetime(self, mobile_app_session_lifetime):
        """Sets the mobile_app_session_lifetime of this SiteEntity.

        Mobile app session lifetime (in hours)

        :param mobile_app_session_lifetime: The mobile_app_session_lifetime of this SiteEntity.
        :type mobile_app_session_lifetime: int
        """

        self._mobile_app_session_lifetime = mobile_app_session_lifetime

    @property
    def motd_text(self):
        """Gets the motd_text of this SiteEntity.

        A message to show users when they connect via FTP or SFTP.

        :return: The motd_text of this SiteEntity.
        :rtype: str
        """
        return self._motd_text

    @motd_text.setter
    def motd_text(self, motd_text):
        """Sets the motd_text of this SiteEntity.

        A message to show users when they connect via FTP or SFTP.

        :param motd_text: The motd_text of this SiteEntity.
        :type motd_text: str
        """

        self._motd_text = motd_text

    @property
    def motd_use_for_ftp(self):
        """Gets the motd_use_for_ftp of this SiteEntity.

        Show message to users connecting via FTP

        :return: The motd_use_for_ftp of this SiteEntity.
        :rtype: bool
        """
        return self._motd_use_for_ftp

    @motd_use_for_ftp.setter
    def motd_use_for_ftp(self, motd_use_for_ftp):
        """Sets the motd_use_for_ftp of this SiteEntity.

        Show message to users connecting via FTP

        :param motd_use_for_ftp: The motd_use_for_ftp of this SiteEntity.
        :type motd_use_for_ftp: bool
        """

        self._motd_use_for_ftp = motd_use_for_ftp

    @property
    def motd_use_for_sftp(self):
        """Gets the motd_use_for_sftp of this SiteEntity.

        Show message to users connecting via SFTP

        :return: The motd_use_for_sftp of this SiteEntity.
        :rtype: bool
        """
        return self._motd_use_for_sftp

    @motd_use_for_sftp.setter
    def motd_use_for_sftp(self, motd_use_for_sftp):
        """Sets the motd_use_for_sftp of this SiteEntity.

        Show message to users connecting via SFTP

        :param motd_use_for_sftp: The motd_use_for_sftp of this SiteEntity.
        :type motd_use_for_sftp: bool
        """

        self._motd_use_for_sftp = motd_use_for_sftp

    @property
    def name(self):
        """Gets the name of this SiteEntity.

        Site name

        :return: The name of this SiteEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteEntity.

        Site name

        :param name: The name of this SiteEntity.
        :type name: str
        """

        self._name = name

    @property
    def next_billing_amount(self):
        """Gets the next_billing_amount of this SiteEntity.

        Next billing amount

        :return: The next_billing_amount of this SiteEntity.
        :rtype: float
        """
        return self._next_billing_amount

    @next_billing_amount.setter
    def next_billing_amount(self, next_billing_amount):
        """Sets the next_billing_amount of this SiteEntity.

        Next billing amount

        :param next_billing_amount: The next_billing_amount of this SiteEntity.
        :type next_billing_amount: float
        """

        self._next_billing_amount = next_billing_amount

    @property
    def next_billing_date(self):
        """Gets the next_billing_date of this SiteEntity.

        Next billing date

        :return: The next_billing_date of this SiteEntity.
        :rtype: str
        """
        return self._next_billing_date

    @next_billing_date.setter
    def next_billing_date(self, next_billing_date):
        """Sets the next_billing_date of this SiteEntity.

        Next billing date

        :param next_billing_date: The next_billing_date of this SiteEntity.
        :type next_billing_date: str
        """

        self._next_billing_date = next_billing_date

    @property
    def non_sso_groups_allowed(self):
        """Gets the non_sso_groups_allowed of this SiteEntity.

        If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.

        :return: The non_sso_groups_allowed of this SiteEntity.
        :rtype: bool
        """
        return self._non_sso_groups_allowed

    @non_sso_groups_allowed.setter
    def non_sso_groups_allowed(self, non_sso_groups_allowed):
        """Sets the non_sso_groups_allowed of this SiteEntity.

        If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.

        :param non_sso_groups_allowed: The non_sso_groups_allowed of this SiteEntity.
        :type non_sso_groups_allowed: bool
        """

        self._non_sso_groups_allowed = non_sso_groups_allowed

    @property
    def non_sso_users_allowed(self):
        """Gets the non_sso_users_allowed of this SiteEntity.

        If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.

        :return: The non_sso_users_allowed of this SiteEntity.
        :rtype: bool
        """
        return self._non_sso_users_allowed

    @non_sso_users_allowed.setter
    def non_sso_users_allowed(self, non_sso_users_allowed):
        """Sets the non_sso_users_allowed of this SiteEntity.

        If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.

        :param non_sso_users_allowed: The non_sso_users_allowed of this SiteEntity.
        :type non_sso_users_allowed: bool
        """

        self._non_sso_users_allowed = non_sso_users_allowed

    @property
    def office_integration_available(self):
        """Gets the office_integration_available of this SiteEntity.

        Allow users to use Office for the web?

        :return: The office_integration_available of this SiteEntity.
        :rtype: bool
        """
        return self._office_integration_available

    @office_integration_available.setter
    def office_integration_available(self, office_integration_available):
        """Sets the office_integration_available of this SiteEntity.

        Allow users to use Office for the web?

        :param office_integration_available: The office_integration_available of this SiteEntity.
        :type office_integration_available: bool
        """

        self._office_integration_available = office_integration_available

    @property
    def office_integration_type(self):
        """Gets the office_integration_type of this SiteEntity.

        Office integration application used to edit and view the MS Office documents

        :return: The office_integration_type of this SiteEntity.
        :rtype: str
        """
        return self._office_integration_type

    @office_integration_type.setter
    def office_integration_type(self, office_integration_type):
        """Sets the office_integration_type of this SiteEntity.

        Office integration application used to edit and view the MS Office documents

        :param office_integration_type: The office_integration_type of this SiteEntity.
        :type office_integration_type: str
        """
        allowed_values = ["only_office", "office_365", "disabled"]  # noqa: E501
        if office_integration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `office_integration_type` ({0}), must be one of {1}"
                .format(office_integration_type, allowed_values)
            )

        self._office_integration_type = office_integration_type

    @property
    def oncehub_link(self):
        """Gets the oncehub_link of this SiteEntity.

        Link to scheduling a meeting with our Sales team

        :return: The oncehub_link of this SiteEntity.
        :rtype: str
        """
        return self._oncehub_link

    @oncehub_link.setter
    def oncehub_link(self, oncehub_link):
        """Sets the oncehub_link of this SiteEntity.

        Link to scheduling a meeting with our Sales team

        :param oncehub_link: The oncehub_link of this SiteEntity.
        :type oncehub_link: str
        """

        self._oncehub_link = oncehub_link

    @property
    def opt_out_global(self):
        """Gets the opt_out_global of this SiteEntity.

        Use servers in the USA only?

        :return: The opt_out_global of this SiteEntity.
        :rtype: bool
        """
        return self._opt_out_global

    @opt_out_global.setter
    def opt_out_global(self, opt_out_global):
        """Sets the opt_out_global of this SiteEntity.

        Use servers in the USA only?

        :param opt_out_global: The opt_out_global of this SiteEntity.
        :type opt_out_global: bool
        """

        self._opt_out_global = opt_out_global

    @property
    def overdue(self):
        """Gets the overdue of this SiteEntity.

        Is this site's billing overdue?

        :return: The overdue of this SiteEntity.
        :rtype: bool
        """
        return self._overdue

    @overdue.setter
    def overdue(self, overdue):
        """Sets the overdue of this SiteEntity.

        Is this site's billing overdue?

        :param overdue: The overdue of this SiteEntity.
        :type overdue: bool
        """

        self._overdue = overdue

    @property
    def password_min_length(self):
        """Gets the password_min_length of this SiteEntity.

        Shortest password length for users

        :return: The password_min_length of this SiteEntity.
        :rtype: int
        """
        return self._password_min_length

    @password_min_length.setter
    def password_min_length(self, password_min_length):
        """Sets the password_min_length of this SiteEntity.

        Shortest password length for users

        :param password_min_length: The password_min_length of this SiteEntity.
        :type password_min_length: int
        """

        self._password_min_length = password_min_length

    @property
    def password_require_letter(self):
        """Gets the password_require_letter of this SiteEntity.

        Require a letter in passwords?

        :return: The password_require_letter of this SiteEntity.
        :rtype: bool
        """
        return self._password_require_letter

    @password_require_letter.setter
    def password_require_letter(self, password_require_letter):
        """Sets the password_require_letter of this SiteEntity.

        Require a letter in passwords?

        :param password_require_letter: The password_require_letter of this SiteEntity.
        :type password_require_letter: bool
        """

        self._password_require_letter = password_require_letter

    @property
    def password_require_mixed(self):
        """Gets the password_require_mixed of this SiteEntity.

        Require lower and upper case letters in passwords?

        :return: The password_require_mixed of this SiteEntity.
        :rtype: bool
        """
        return self._password_require_mixed

    @password_require_mixed.setter
    def password_require_mixed(self, password_require_mixed):
        """Sets the password_require_mixed of this SiteEntity.

        Require lower and upper case letters in passwords?

        :param password_require_mixed: The password_require_mixed of this SiteEntity.
        :type password_require_mixed: bool
        """

        self._password_require_mixed = password_require_mixed

    @property
    def password_require_number(self):
        """Gets the password_require_number of this SiteEntity.

        Require a number in passwords?

        :return: The password_require_number of this SiteEntity.
        :rtype: bool
        """
        return self._password_require_number

    @password_require_number.setter
    def password_require_number(self, password_require_number):
        """Sets the password_require_number of this SiteEntity.

        Require a number in passwords?

        :param password_require_number: The password_require_number of this SiteEntity.
        :type password_require_number: bool
        """

        self._password_require_number = password_require_number

    @property
    def password_require_special(self):
        """Gets the password_require_special of this SiteEntity.

        Require special characters in password?

        :return: The password_require_special of this SiteEntity.
        :rtype: bool
        """
        return self._password_require_special

    @password_require_special.setter
    def password_require_special(self, password_require_special):
        """Sets the password_require_special of this SiteEntity.

        Require special characters in password?

        :param password_require_special: The password_require_special of this SiteEntity.
        :type password_require_special: bool
        """

        self._password_require_special = password_require_special

    @property
    def password_require_unbreached(self):
        """Gets the password_require_unbreached of this SiteEntity.

        Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)

        :return: The password_require_unbreached of this SiteEntity.
        :rtype: bool
        """
        return self._password_require_unbreached

    @password_require_unbreached.setter
    def password_require_unbreached(self, password_require_unbreached):
        """Sets the password_require_unbreached of this SiteEntity.

        Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)

        :param password_require_unbreached: The password_require_unbreached of this SiteEntity.
        :type password_require_unbreached: bool
        """

        self._password_require_unbreached = password_require_unbreached

    @property
    def password_requirements_apply_to_bundles(self):
        """Gets the password_requirements_apply_to_bundles of this SiteEntity.

        Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?

        :return: The password_requirements_apply_to_bundles of this SiteEntity.
        :rtype: bool
        """
        return self._password_requirements_apply_to_bundles

    @password_requirements_apply_to_bundles.setter
    def password_requirements_apply_to_bundles(self, password_requirements_apply_to_bundles):
        """Sets the password_requirements_apply_to_bundles of this SiteEntity.

        Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?

        :param password_requirements_apply_to_bundles: The password_requirements_apply_to_bundles of this SiteEntity.
        :type password_requirements_apply_to_bundles: bool
        """

        self._password_requirements_apply_to_bundles = password_requirements_apply_to_bundles

    @property
    def password_validity_days(self):
        """Gets the password_validity_days of this SiteEntity.

        Number of days password is valid

        :return: The password_validity_days of this SiteEntity.
        :rtype: int
        """
        return self._password_validity_days

    @password_validity_days.setter
    def password_validity_days(self, password_validity_days):
        """Sets the password_validity_days of this SiteEntity.

        Number of days password is valid

        :param password_validity_days: The password_validity_days of this SiteEntity.
        :type password_validity_days: int
        """

        self._password_validity_days = password_validity_days

    @property
    def phone(self):
        """Gets the phone of this SiteEntity.

        Site phone number

        :return: The phone of this SiteEntity.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SiteEntity.

        Site phone number

        :param phone: The phone of this SiteEntity.
        :type phone: str
        """

        self._phone = phone

    @property
    def pin_all_remote_servers_to_site_region(self):
        """Gets the pin_all_remote_servers_to_site_region of this SiteEntity.

        If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.

        :return: The pin_all_remote_servers_to_site_region of this SiteEntity.
        :rtype: bool
        """
        return self._pin_all_remote_servers_to_site_region

    @pin_all_remote_servers_to_site_region.setter
    def pin_all_remote_servers_to_site_region(self, pin_all_remote_servers_to_site_region):
        """Sets the pin_all_remote_servers_to_site_region of this SiteEntity.

        If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.

        :param pin_all_remote_servers_to_site_region: The pin_all_remote_servers_to_site_region of this SiteEntity.
        :type pin_all_remote_servers_to_site_region: bool
        """

        self._pin_all_remote_servers_to_site_region = pin_all_remote_servers_to_site_region

    @property
    def reply_to_email(self):
        """Gets the reply_to_email of this SiteEntity.

        Reply-to email for this site

        :return: The reply_to_email of this SiteEntity.
        :rtype: str
        """
        return self._reply_to_email

    @reply_to_email.setter
    def reply_to_email(self, reply_to_email):
        """Sets the reply_to_email of this SiteEntity.

        Reply-to email for this site

        :param reply_to_email: The reply_to_email of this SiteEntity.
        :type reply_to_email: str
        """

        self._reply_to_email = reply_to_email

    @property
    def require_2fa(self):
        """Gets the require_2fa of this SiteEntity.

        Require two-factor authentication for all users?

        :return: The require_2fa of this SiteEntity.
        :rtype: bool
        """
        return self._require_2fa

    @require_2fa.setter
    def require_2fa(self, require_2fa):
        """Sets the require_2fa of this SiteEntity.

        Require two-factor authentication for all users?

        :param require_2fa: The require_2fa of this SiteEntity.
        :type require_2fa: bool
        """

        self._require_2fa = require_2fa

    @property
    def require_2fa_stop_time(self):
        """Gets the require_2fa_stop_time of this SiteEntity.

        If set, requirement for two-factor authentication has been scheduled to end on this date-time.

        :return: The require_2fa_stop_time of this SiteEntity.
        :rtype: datetime
        """
        return self._require_2fa_stop_time

    @require_2fa_stop_time.setter
    def require_2fa_stop_time(self, require_2fa_stop_time):
        """Sets the require_2fa_stop_time of this SiteEntity.

        If set, requirement for two-factor authentication has been scheduled to end on this date-time.

        :param require_2fa_stop_time: The require_2fa_stop_time of this SiteEntity.
        :type require_2fa_stop_time: datetime
        """

        self._require_2fa_stop_time = require_2fa_stop_time

    @property
    def require_2fa_user_type(self):
        """Gets the require_2fa_user_type of this SiteEntity.

        What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?

        :return: The require_2fa_user_type of this SiteEntity.
        :rtype: str
        """
        return self._require_2fa_user_type

    @require_2fa_user_type.setter
    def require_2fa_user_type(self, require_2fa_user_type):
        """Sets the require_2fa_user_type of this SiteEntity.

        What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?

        :param require_2fa_user_type: The require_2fa_user_type of this SiteEntity.
        :type require_2fa_user_type: str
        """
        allowed_values = ["all", "folder_and_site_admins", "site_admins"]  # noqa: E501
        if require_2fa_user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `require_2fa_user_type` ({0}), must be one of {1}"
                .format(require_2fa_user_type, allowed_values)
            )

        self._require_2fa_user_type = require_2fa_user_type

    @property
    def session(self):
        """Gets the session of this SiteEntity.


        :return: The session of this SiteEntity.
        :rtype: SessionEntity
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this SiteEntity.


        :param session: The session of this SiteEntity.
        :type session: SessionEntity
        """

        self._session = session

    @property
    def session_expiry(self):
        """Gets the session_expiry of this SiteEntity.

        Session expiry in hours

        :return: The session_expiry of this SiteEntity.
        :rtype: float
        """
        return self._session_expiry

    @session_expiry.setter
    def session_expiry(self, session_expiry):
        """Sets the session_expiry of this SiteEntity.

        Session expiry in hours

        :param session_expiry: The session_expiry of this SiteEntity.
        :type session_expiry: float
        """

        self._session_expiry = session_expiry

    @property
    def session_expiry_minutes(self):
        """Gets the session_expiry_minutes of this SiteEntity.

        Session expiry in minutes

        :return: The session_expiry_minutes of this SiteEntity.
        :rtype: int
        """
        return self._session_expiry_minutes

    @session_expiry_minutes.setter
    def session_expiry_minutes(self, session_expiry_minutes):
        """Sets the session_expiry_minutes of this SiteEntity.

        Session expiry in minutes

        :param session_expiry_minutes: The session_expiry_minutes of this SiteEntity.
        :type session_expiry_minutes: int
        """

        self._session_expiry_minutes = session_expiry_minutes

    @property
    def session_pinned_by_ip(self):
        """Gets the session_pinned_by_ip of this SiteEntity.

        Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)

        :return: The session_pinned_by_ip of this SiteEntity.
        :rtype: bool
        """
        return self._session_pinned_by_ip

    @session_pinned_by_ip.setter
    def session_pinned_by_ip(self, session_pinned_by_ip):
        """Sets the session_pinned_by_ip of this SiteEntity.

        Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)

        :param session_pinned_by_ip: The session_pinned_by_ip of this SiteEntity.
        :type session_pinned_by_ip: bool
        """

        self._session_pinned_by_ip = session_pinned_by_ip

    @property
    def sftp_enabled(self):
        """Gets the sftp_enabled of this SiteEntity.

        Is SFTP enabled?

        :return: The sftp_enabled of this SiteEntity.
        :rtype: bool
        """
        return self._sftp_enabled

    @sftp_enabled.setter
    def sftp_enabled(self, sftp_enabled):
        """Sets the sftp_enabled of this SiteEntity.

        Is SFTP enabled?

        :param sftp_enabled: The sftp_enabled of this SiteEntity.
        :type sftp_enabled: bool
        """

        self._sftp_enabled = sftp_enabled

    @property
    def sftp_host_key_type(self):
        """Gets the sftp_host_key_type of this SiteEntity.

        Sftp Host Key Type

        :return: The sftp_host_key_type of this SiteEntity.
        :rtype: str
        """
        return self._sftp_host_key_type

    @sftp_host_key_type.setter
    def sftp_host_key_type(self, sftp_host_key_type):
        """Sets the sftp_host_key_type of this SiteEntity.

        Sftp Host Key Type

        :param sftp_host_key_type: The sftp_host_key_type of this SiteEntity.
        :type sftp_host_key_type: str
        """
        allowed_values = ["default", "exavault", "custom"]  # noqa: E501
        if sftp_host_key_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sftp_host_key_type` ({0}), must be one of {1}"
                .format(sftp_host_key_type, allowed_values)
            )

        self._sftp_host_key_type = sftp_host_key_type

    @property
    def sftp_insecure_ciphers(self):
        """Gets the sftp_insecure_ciphers of this SiteEntity.

        Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.

        :return: The sftp_insecure_ciphers of this SiteEntity.
        :rtype: bool
        """
        return self._sftp_insecure_ciphers

    @sftp_insecure_ciphers.setter
    def sftp_insecure_ciphers(self, sftp_insecure_ciphers):
        """Sets the sftp_insecure_ciphers of this SiteEntity.

        Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.

        :param sftp_insecure_ciphers: The sftp_insecure_ciphers of this SiteEntity.
        :type sftp_insecure_ciphers: bool
        """

        self._sftp_insecure_ciphers = sftp_insecure_ciphers

    @property
    def sftp_user_root_enabled(self):
        """Gets the sftp_user_root_enabled of this SiteEntity.

        Use user FTP roots also for SFTP?

        :return: The sftp_user_root_enabled of this SiteEntity.
        :rtype: bool
        """
        return self._sftp_user_root_enabled

    @sftp_user_root_enabled.setter
    def sftp_user_root_enabled(self, sftp_user_root_enabled):
        """Sets the sftp_user_root_enabled of this SiteEntity.

        Use user FTP roots also for SFTP?

        :param sftp_user_root_enabled: The sftp_user_root_enabled of this SiteEntity.
        :type sftp_user_root_enabled: bool
        """

        self._sftp_user_root_enabled = sftp_user_root_enabled

    @property
    def sharing_enabled(self):
        """Gets the sharing_enabled of this SiteEntity.

        Allow bundle creation

        :return: The sharing_enabled of this SiteEntity.
        :rtype: bool
        """
        return self._sharing_enabled

    @sharing_enabled.setter
    def sharing_enabled(self, sharing_enabled):
        """Sets the sharing_enabled of this SiteEntity.

        Allow bundle creation

        :param sharing_enabled: The sharing_enabled of this SiteEntity.
        :type sharing_enabled: bool
        """

        self._sharing_enabled = sharing_enabled

    @property
    def show_request_access_link(self):
        """Gets the show_request_access_link of this SiteEntity.

        Show request access link for users without access?  Currently unused.

        :return: The show_request_access_link of this SiteEntity.
        :rtype: bool
        """
        return self._show_request_access_link

    @show_request_access_link.setter
    def show_request_access_link(self, show_request_access_link):
        """Sets the show_request_access_link of this SiteEntity.

        Show request access link for users without access?  Currently unused.

        :param show_request_access_link: The show_request_access_link of this SiteEntity.
        :type show_request_access_link: bool
        """

        self._show_request_access_link = show_request_access_link

    @property
    def site_footer(self):
        """Gets the site_footer of this SiteEntity.

        Custom site footer text

        :return: The site_footer of this SiteEntity.
        :rtype: str
        """
        return self._site_footer

    @site_footer.setter
    def site_footer(self, site_footer):
        """Sets the site_footer of this SiteEntity.

        Custom site footer text

        :param site_footer: The site_footer of this SiteEntity.
        :type site_footer: str
        """

        self._site_footer = site_footer

    @property
    def site_header(self):
        """Gets the site_header of this SiteEntity.

        Custom site header text

        :return: The site_header of this SiteEntity.
        :rtype: str
        """
        return self._site_header

    @site_header.setter
    def site_header(self, site_header):
        """Sets the site_header of this SiteEntity.

        Custom site header text

        :param site_header: The site_header of this SiteEntity.
        :type site_header: str
        """

        self._site_header = site_header

    @property
    def smtp_address(self):
        """Gets the smtp_address of this SiteEntity.

        SMTP server hostname or IP

        :return: The smtp_address of this SiteEntity.
        :rtype: str
        """
        return self._smtp_address

    @smtp_address.setter
    def smtp_address(self, smtp_address):
        """Sets the smtp_address of this SiteEntity.

        SMTP server hostname or IP

        :param smtp_address: The smtp_address of this SiteEntity.
        :type smtp_address: str
        """

        self._smtp_address = smtp_address

    @property
    def smtp_authentication(self):
        """Gets the smtp_authentication of this SiteEntity.

        SMTP server authentication type

        :return: The smtp_authentication of this SiteEntity.
        :rtype: str
        """
        return self._smtp_authentication

    @smtp_authentication.setter
    def smtp_authentication(self, smtp_authentication):
        """Sets the smtp_authentication of this SiteEntity.

        SMTP server authentication type

        :param smtp_authentication: The smtp_authentication of this SiteEntity.
        :type smtp_authentication: str
        """

        self._smtp_authentication = smtp_authentication

    @property
    def smtp_from(self):
        """Gets the smtp_from of this SiteEntity.

        From address to use when mailing through custom SMTP

        :return: The smtp_from of this SiteEntity.
        :rtype: str
        """
        return self._smtp_from

    @smtp_from.setter
    def smtp_from(self, smtp_from):
        """Sets the smtp_from of this SiteEntity.

        From address to use when mailing through custom SMTP

        :param smtp_from: The smtp_from of this SiteEntity.
        :type smtp_from: str
        """

        self._smtp_from = smtp_from

    @property
    def smtp_port(self):
        """Gets the smtp_port of this SiteEntity.

        SMTP server port

        :return: The smtp_port of this SiteEntity.
        :rtype: int
        """
        return self._smtp_port

    @smtp_port.setter
    def smtp_port(self, smtp_port):
        """Sets the smtp_port of this SiteEntity.

        SMTP server port

        :param smtp_port: The smtp_port of this SiteEntity.
        :type smtp_port: int
        """

        self._smtp_port = smtp_port

    @property
    def smtp_username(self):
        """Gets the smtp_username of this SiteEntity.

        SMTP server username

        :return: The smtp_username of this SiteEntity.
        :rtype: str
        """
        return self._smtp_username

    @smtp_username.setter
    def smtp_username(self, smtp_username):
        """Sets the smtp_username of this SiteEntity.

        SMTP server username

        :param smtp_username: The smtp_username of this SiteEntity.
        :type smtp_username: str
        """

        self._smtp_username = smtp_username

    @property
    def ssl_required(self):
        """Gets the ssl_required of this SiteEntity.

        Is SSL required?  Disabling this is insecure.

        :return: The ssl_required of this SiteEntity.
        :rtype: bool
        """
        return self._ssl_required

    @ssl_required.setter
    def ssl_required(self, ssl_required):
        """Sets the ssl_required of this SiteEntity.

        Is SSL required?  Disabling this is insecure.

        :param ssl_required: The ssl_required of this SiteEntity.
        :type ssl_required: bool
        """

        self._ssl_required = ssl_required

    @property
    def subdomain(self):
        """Gets the subdomain of this SiteEntity.

        Site subdomain

        :return: The subdomain of this SiteEntity.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this SiteEntity.

        Site subdomain

        :param subdomain: The subdomain of this SiteEntity.
        :type subdomain: str
        """

        self._subdomain = subdomain

    @property
    def switch_to_plan_date(self):
        """Gets the switch_to_plan_date of this SiteEntity.

        If switching plans, when does the new plan take effect?

        :return: The switch_to_plan_date of this SiteEntity.
        :rtype: datetime
        """
        return self._switch_to_plan_date

    @switch_to_plan_date.setter
    def switch_to_plan_date(self, switch_to_plan_date):
        """Sets the switch_to_plan_date of this SiteEntity.

        If switching plans, when does the new plan take effect?

        :param switch_to_plan_date: The switch_to_plan_date of this SiteEntity.
        :type switch_to_plan_date: datetime
        """

        self._switch_to_plan_date = switch_to_plan_date

    @property
    def tls_disabled(self):
        """Gets the tls_disabled of this SiteEntity.

        Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.

        :return: The tls_disabled of this SiteEntity.
        :rtype: bool
        """
        return self._tls_disabled

    @tls_disabled.setter
    def tls_disabled(self, tls_disabled):
        """Sets the tls_disabled of this SiteEntity.

        Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.

        :param tls_disabled: The tls_disabled of this SiteEntity.
        :type tls_disabled: bool
        """

        self._tls_disabled = tls_disabled

    @property
    def trial_days_left(self):
        """Gets the trial_days_left of this SiteEntity.

        Number of days left in trial

        :return: The trial_days_left of this SiteEntity.
        :rtype: int
        """
        return self._trial_days_left

    @trial_days_left.setter
    def trial_days_left(self, trial_days_left):
        """Sets the trial_days_left of this SiteEntity.

        Number of days left in trial

        :param trial_days_left: The trial_days_left of this SiteEntity.
        :type trial_days_left: int
        """

        self._trial_days_left = trial_days_left

    @property
    def trial_until(self):
        """Gets the trial_until of this SiteEntity.

        When does this Site trial expire?

        :return: The trial_until of this SiteEntity.
        :rtype: datetime
        """
        return self._trial_until

    @trial_until.setter
    def trial_until(self, trial_until):
        """Sets the trial_until of this SiteEntity.

        When does this Site trial expire?

        :param trial_until: The trial_until of this SiteEntity.
        :type trial_until: datetime
        """

        self._trial_until = trial_until

    @property
    def updated_at(self):
        """Gets the updated_at of this SiteEntity.

        Last time this Site was updated

        :return: The updated_at of this SiteEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SiteEntity.

        Last time this Site was updated

        :param updated_at: The updated_at of this SiteEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def uploads_via_email_authentication(self):
        """Gets the uploads_via_email_authentication of this SiteEntity.

        Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?

        :return: The uploads_via_email_authentication of this SiteEntity.
        :rtype: bool
        """
        return self._uploads_via_email_authentication

    @uploads_via_email_authentication.setter
    def uploads_via_email_authentication(self, uploads_via_email_authentication):
        """Sets the uploads_via_email_authentication of this SiteEntity.

        Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?

        :param uploads_via_email_authentication: The uploads_via_email_authentication of this SiteEntity.
        :type uploads_via_email_authentication: bool
        """

        self._uploads_via_email_authentication = uploads_via_email_authentication

    @property
    def use_provided_modified_at(self):
        """Gets the use_provided_modified_at of this SiteEntity.

        Allow uploaders to set `provided_modified_at` for uploaded files?

        :return: The use_provided_modified_at of this SiteEntity.
        :rtype: bool
        """
        return self._use_provided_modified_at

    @use_provided_modified_at.setter
    def use_provided_modified_at(self, use_provided_modified_at):
        """Sets the use_provided_modified_at of this SiteEntity.

        Allow uploaders to set `provided_modified_at` for uploaded files?

        :param use_provided_modified_at: The use_provided_modified_at of this SiteEntity.
        :type use_provided_modified_at: bool
        """

        self._use_provided_modified_at = use_provided_modified_at

    @property
    def user(self):
        """Gets the user of this SiteEntity.


        :return: The user of this SiteEntity.
        :rtype: UserEntity
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SiteEntity.


        :param user: The user of this SiteEntity.
        :type user: UserEntity
        """

        self._user = user

    @property
    def user_lockout(self):
        """Gets the user_lockout of this SiteEntity.

        Will users be locked out after incorrect login attempts?

        :return: The user_lockout of this SiteEntity.
        :rtype: bool
        """
        return self._user_lockout

    @user_lockout.setter
    def user_lockout(self, user_lockout):
        """Sets the user_lockout of this SiteEntity.

        Will users be locked out after incorrect login attempts?

        :param user_lockout: The user_lockout of this SiteEntity.
        :type user_lockout: bool
        """

        self._user_lockout = user_lockout

    @property
    def user_lockout_lock_period(self):
        """Gets the user_lockout_lock_period of this SiteEntity.

        How many hours to lock user out for failed password?

        :return: The user_lockout_lock_period of this SiteEntity.
        :rtype: int
        """
        return self._user_lockout_lock_period

    @user_lockout_lock_period.setter
    def user_lockout_lock_period(self, user_lockout_lock_period):
        """Sets the user_lockout_lock_period of this SiteEntity.

        How many hours to lock user out for failed password?

        :param user_lockout_lock_period: The user_lockout_lock_period of this SiteEntity.
        :type user_lockout_lock_period: int
        """

        self._user_lockout_lock_period = user_lockout_lock_period

    @property
    def user_lockout_tries(self):
        """Gets the user_lockout_tries of this SiteEntity.

        Number of login tries within `user_lockout_within` hours before users are locked out

        :return: The user_lockout_tries of this SiteEntity.
        :rtype: int
        """
        return self._user_lockout_tries

    @user_lockout_tries.setter
    def user_lockout_tries(self, user_lockout_tries):
        """Sets the user_lockout_tries of this SiteEntity.

        Number of login tries within `user_lockout_within` hours before users are locked out

        :param user_lockout_tries: The user_lockout_tries of this SiteEntity.
        :type user_lockout_tries: int
        """

        self._user_lockout_tries = user_lockout_tries

    @property
    def user_lockout_within(self):
        """Gets the user_lockout_within of this SiteEntity.

        Number of hours for user lockout window

        :return: The user_lockout_within of this SiteEntity.
        :rtype: int
        """
        return self._user_lockout_within

    @user_lockout_within.setter
    def user_lockout_within(self, user_lockout_within):
        """Sets the user_lockout_within of this SiteEntity.

        Number of hours for user lockout window

        :param user_lockout_within: The user_lockout_within of this SiteEntity.
        :type user_lockout_within: int
        """

        self._user_lockout_within = user_lockout_within

    @property
    def user_requests_enabled(self):
        """Gets the user_requests_enabled of this SiteEntity.

        Enable User Requests feature

        :return: The user_requests_enabled of this SiteEntity.
        :rtype: bool
        """
        return self._user_requests_enabled

    @user_requests_enabled.setter
    def user_requests_enabled(self, user_requests_enabled):
        """Sets the user_requests_enabled of this SiteEntity.

        Enable User Requests feature

        :param user_requests_enabled: The user_requests_enabled of this SiteEntity.
        :type user_requests_enabled: bool
        """

        self._user_requests_enabled = user_requests_enabled

    @property
    def user_requests_notify_admins(self):
        """Gets the user_requests_notify_admins of this SiteEntity.

        Send email to site admins when a user request is received?

        :return: The user_requests_notify_admins of this SiteEntity.
        :rtype: bool
        """
        return self._user_requests_notify_admins

    @user_requests_notify_admins.setter
    def user_requests_notify_admins(self, user_requests_notify_admins):
        """Sets the user_requests_notify_admins of this SiteEntity.

        Send email to site admins when a user request is received?

        :param user_requests_notify_admins: The user_requests_notify_admins of this SiteEntity.
        :type user_requests_notify_admins: bool
        """

        self._user_requests_notify_admins = user_requests_notify_admins

    @property
    def welcome_custom_text(self):
        """Gets the welcome_custom_text of this SiteEntity.

        Custom text send in user welcome email

        :return: The welcome_custom_text of this SiteEntity.
        :rtype: str
        """
        return self._welcome_custom_text

    @welcome_custom_text.setter
    def welcome_custom_text(self, welcome_custom_text):
        """Sets the welcome_custom_text of this SiteEntity.

        Custom text send in user welcome email

        :param welcome_custom_text: The welcome_custom_text of this SiteEntity.
        :type welcome_custom_text: str
        """

        self._welcome_custom_text = welcome_custom_text

    @property
    def welcome_email_cc(self):
        """Gets the welcome_email_cc of this SiteEntity.

        Include this email in welcome emails if enabled

        :return: The welcome_email_cc of this SiteEntity.
        :rtype: str
        """
        return self._welcome_email_cc

    @welcome_email_cc.setter
    def welcome_email_cc(self, welcome_email_cc):
        """Sets the welcome_email_cc of this SiteEntity.

        Include this email in welcome emails if enabled

        :param welcome_email_cc: The welcome_email_cc of this SiteEntity.
        :type welcome_email_cc: str
        """

        self._welcome_email_cc = welcome_email_cc

    @property
    def welcome_email_enabled(self):
        """Gets the welcome_email_enabled of this SiteEntity.

        Will the welcome email be sent to new users?

        :return: The welcome_email_enabled of this SiteEntity.
        :rtype: bool
        """
        return self._welcome_email_enabled

    @welcome_email_enabled.setter
    def welcome_email_enabled(self, welcome_email_enabled):
        """Sets the welcome_email_enabled of this SiteEntity.

        Will the welcome email be sent to new users?

        :param welcome_email_enabled: The welcome_email_enabled of this SiteEntity.
        :type welcome_email_enabled: bool
        """

        self._welcome_email_enabled = welcome_email_enabled

    @property
    def welcome_email_subject(self):
        """Gets the welcome_email_subject of this SiteEntity.

        Include this email subject in welcome emails if enabled

        :return: The welcome_email_subject of this SiteEntity.
        :rtype: str
        """
        return self._welcome_email_subject

    @welcome_email_subject.setter
    def welcome_email_subject(self, welcome_email_subject):
        """Sets the welcome_email_subject of this SiteEntity.

        Include this email subject in welcome emails if enabled

        :param welcome_email_subject: The welcome_email_subject of this SiteEntity.
        :type welcome_email_subject: str
        """

        self._welcome_email_subject = welcome_email_subject

    @property
    def welcome_screen(self):
        """Gets the welcome_screen of this SiteEntity.

        Does the welcome screen appear?

        :return: The welcome_screen of this SiteEntity.
        :rtype: str
        """
        return self._welcome_screen

    @welcome_screen.setter
    def welcome_screen(self, welcome_screen):
        """Sets the welcome_screen of this SiteEntity.

        Does the welcome screen appear?

        :param welcome_screen: The welcome_screen of this SiteEntity.
        :type welcome_screen: str
        """
        allowed_values = ["enabled", "hidden", "disabled"]  # noqa: E501
        if welcome_screen not in allowed_values:
            raise ValueError(
                "Invalid value for `welcome_screen` ({0}), must be one of {1}"
                .format(welcome_screen, allowed_values)
            )

        self._welcome_screen = welcome_screen

    @property
    def windows_mode_ftp(self):
        """Gets the windows_mode_ftp of this SiteEntity.

        Does FTP user Windows emulation mode?

        :return: The windows_mode_ftp of this SiteEntity.
        :rtype: bool
        """
        return self._windows_mode_ftp

    @windows_mode_ftp.setter
    def windows_mode_ftp(self, windows_mode_ftp):
        """Sets the windows_mode_ftp of this SiteEntity.

        Does FTP user Windows emulation mode?

        :param windows_mode_ftp: The windows_mode_ftp of this SiteEntity.
        :type windows_mode_ftp: bool
        """

        self._windows_mode_ftp = windows_mode_ftp
