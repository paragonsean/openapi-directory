# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupUserEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin: bool=None, group_id: int=None, group_name: str=None, user_id: int=None, usernames: List[str]=None):
        """GroupUserEntity - a model defined in OpenAPI

        :param admin: The admin of this GroupUserEntity.
        :param group_id: The group_id of this GroupUserEntity.
        :param group_name: The group_name of this GroupUserEntity.
        :param user_id: The user_id of this GroupUserEntity.
        :param usernames: The usernames of this GroupUserEntity.
        """
        self.openapi_types = {
            'admin': bool,
            'group_id': int,
            'group_name': str,
            'user_id': int,
            'usernames': List[str]
        }

        self.attribute_map = {
            'admin': 'admin',
            'group_id': 'group_id',
            'group_name': 'group_name',
            'user_id': 'user_id',
            'usernames': 'usernames'
        }

        self._admin = admin
        self._group_id = group_id
        self._group_name = group_name
        self._user_id = user_id
        self._usernames = usernames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupUserEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupUserEntity of this GroupUserEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin(self):
        """Gets the admin of this GroupUserEntity.

        Is this user an administrator of this group?

        :return: The admin of this GroupUserEntity.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this GroupUserEntity.

        Is this user an administrator of this group?

        :param admin: The admin of this GroupUserEntity.
        :type admin: bool
        """

        self._admin = admin

    @property
    def group_id(self):
        """Gets the group_id of this GroupUserEntity.

        Group ID

        :return: The group_id of this GroupUserEntity.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupUserEntity.

        Group ID

        :param group_id: The group_id of this GroupUserEntity.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this GroupUserEntity.

        Group name

        :return: The group_name of this GroupUserEntity.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupUserEntity.

        Group name

        :param group_name: The group_name of this GroupUserEntity.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def user_id(self):
        """Gets the user_id of this GroupUserEntity.

        User ID

        :return: The user_id of this GroupUserEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GroupUserEntity.

        User ID

        :param user_id: The user_id of this GroupUserEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def usernames(self):
        """Gets the usernames of this GroupUserEntity.

        A list of usernames for users in this group

        :return: The usernames of this GroupUserEntity.
        :rtype: List[str]
        """
        return self._usernames

    @usernames.setter
    def usernames(self, usernames):
        """Sets the usernames of this GroupUserEntity.

        A list of usernames for users in this group

        :param usernames: The usernames of this GroupUserEntity.
        :type usernames: List[str]
        """

        self._usernames = usernames
