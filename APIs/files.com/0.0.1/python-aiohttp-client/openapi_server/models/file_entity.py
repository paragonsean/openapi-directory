# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preview_entity import PreviewEntity
from openapi_server import util


class FileEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crc32: str=None, created_at: datetime=None, display_name: str=None, download_uri: str=None, is_locked: bool=None, md5: str=None, mime_type: str=None, mtime: datetime=None, path: str=None, permissions: str=None, preview: PreviewEntity=None, preview_id: int=None, priority_color: str=None, provided_mtime: datetime=None, region: str=None, size: int=None, subfolders_locked: bool=None, type: str=None):
        """FileEntity - a model defined in OpenAPI

        :param crc32: The crc32 of this FileEntity.
        :param created_at: The created_at of this FileEntity.
        :param display_name: The display_name of this FileEntity.
        :param download_uri: The download_uri of this FileEntity.
        :param is_locked: The is_locked of this FileEntity.
        :param md5: The md5 of this FileEntity.
        :param mime_type: The mime_type of this FileEntity.
        :param mtime: The mtime of this FileEntity.
        :param path: The path of this FileEntity.
        :param permissions: The permissions of this FileEntity.
        :param preview: The preview of this FileEntity.
        :param preview_id: The preview_id of this FileEntity.
        :param priority_color: The priority_color of this FileEntity.
        :param provided_mtime: The provided_mtime of this FileEntity.
        :param region: The region of this FileEntity.
        :param size: The size of this FileEntity.
        :param subfolders_locked: The subfolders_locked of this FileEntity.
        :param type: The type of this FileEntity.
        """
        self.openapi_types = {
            'crc32': str,
            'created_at': datetime,
            'display_name': str,
            'download_uri': str,
            'is_locked': bool,
            'md5': str,
            'mime_type': str,
            'mtime': datetime,
            'path': str,
            'permissions': str,
            'preview': PreviewEntity,
            'preview_id': int,
            'priority_color': str,
            'provided_mtime': datetime,
            'region': str,
            'size': int,
            'subfolders_locked': bool,
            'type': str
        }

        self.attribute_map = {
            'crc32': 'crc32',
            'created_at': 'created_at',
            'display_name': 'display_name',
            'download_uri': 'download_uri',
            'is_locked': 'is_locked',
            'md5': 'md5',
            'mime_type': 'mime_type',
            'mtime': 'mtime',
            'path': 'path',
            'permissions': 'permissions',
            'preview': 'preview',
            'preview_id': 'preview_id',
            'priority_color': 'priority_color',
            'provided_mtime': 'provided_mtime',
            'region': 'region',
            'size': 'size',
            'subfolders_locked': 'subfolders_locked?',
            'type': 'type'
        }

        self._crc32 = crc32
        self._created_at = created_at
        self._display_name = display_name
        self._download_uri = download_uri
        self._is_locked = is_locked
        self._md5 = md5
        self._mime_type = mime_type
        self._mtime = mtime
        self._path = path
        self._permissions = permissions
        self._preview = preview
        self._preview_id = preview_id
        self._priority_color = priority_color
        self._provided_mtime = provided_mtime
        self._region = region
        self._size = size
        self._subfolders_locked = subfolders_locked
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileEntity of this FileEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crc32(self):
        """Gets the crc32 of this FileEntity.

        File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.

        :return: The crc32 of this FileEntity.
        :rtype: str
        """
        return self._crc32

    @crc32.setter
    def crc32(self, crc32):
        """Sets the crc32 of this FileEntity.

        File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.

        :param crc32: The crc32 of this FileEntity.
        :type crc32: str
        """

        self._crc32 = crc32

    @property
    def created_at(self):
        """Gets the created_at of this FileEntity.

        File created date/time

        :return: The created_at of this FileEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FileEntity.

        File created date/time

        :param created_at: The created_at of this FileEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def display_name(self):
        """Gets the display_name of this FileEntity.

        File/Folder display name

        :return: The display_name of this FileEntity.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FileEntity.

        File/Folder display name

        :param display_name: The display_name of this FileEntity.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def download_uri(self):
        """Gets the download_uri of this FileEntity.

        Link to download file. Provided only in response to a download request.

        :return: The download_uri of this FileEntity.
        :rtype: str
        """
        return self._download_uri

    @download_uri.setter
    def download_uri(self, download_uri):
        """Sets the download_uri of this FileEntity.

        Link to download file. Provided only in response to a download request.

        :param download_uri: The download_uri of this FileEntity.
        :type download_uri: str
        """

        self._download_uri = download_uri

    @property
    def is_locked(self):
        """Gets the is_locked of this FileEntity.

        Is this folder locked and unable to be modified?

        :return: The is_locked of this FileEntity.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this FileEntity.

        Is this folder locked and unable to be modified?

        :param is_locked: The is_locked of this FileEntity.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def md5(self):
        """Gets the md5 of this FileEntity.

        File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.

        :return: The md5 of this FileEntity.
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this FileEntity.

        File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.

        :param md5: The md5 of this FileEntity.
        :type md5: str
        """

        self._md5 = md5

    @property
    def mime_type(self):
        """Gets the mime_type of this FileEntity.

        MIME Type.  This is determined by the filename extension and is not stored separately internally.

        :return: The mime_type of this FileEntity.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this FileEntity.

        MIME Type.  This is determined by the filename extension and is not stored separately internally.

        :param mime_type: The mime_type of this FileEntity.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def mtime(self):
        """Gets the mtime of this FileEntity.

        File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.

        :return: The mtime of this FileEntity.
        :rtype: datetime
        """
        return self._mtime

    @mtime.setter
    def mtime(self, mtime):
        """Sets the mtime of this FileEntity.

        File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.

        :param mtime: The mtime of this FileEntity.
        :type mtime: datetime
        """

        self._mtime = mtime

    @property
    def path(self):
        """Gets the path of this FileEntity.

        File/Folder path

        :return: The path of this FileEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileEntity.

        File/Folder path

        :param path: The path of this FileEntity.
        :type path: str
        """

        self._path = path

    @property
    def permissions(self):
        """Gets the permissions of this FileEntity.

        A short string representing the current user's permissions.  Can be `r`,`w`,`d`, `l` or any combination

        :return: The permissions of this FileEntity.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this FileEntity.

        A short string representing the current user's permissions.  Can be `r`,`w`,`d`, `l` or any combination

        :param permissions: The permissions of this FileEntity.
        :type permissions: str
        """

        self._permissions = permissions

    @property
    def preview(self):
        """Gets the preview of this FileEntity.


        :return: The preview of this FileEntity.
        :rtype: PreviewEntity
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this FileEntity.


        :param preview: The preview of this FileEntity.
        :type preview: PreviewEntity
        """

        self._preview = preview

    @property
    def preview_id(self):
        """Gets the preview_id of this FileEntity.

        File preview ID

        :return: The preview_id of this FileEntity.
        :rtype: int
        """
        return self._preview_id

    @preview_id.setter
    def preview_id(self, preview_id):
        """Sets the preview_id of this FileEntity.

        File preview ID

        :param preview_id: The preview_id of this FileEntity.
        :type preview_id: int
        """

        self._preview_id = preview_id

    @property
    def priority_color(self):
        """Gets the priority_color of this FileEntity.

        Bookmark/priority color of file/folder

        :return: The priority_color of this FileEntity.
        :rtype: str
        """
        return self._priority_color

    @priority_color.setter
    def priority_color(self, priority_color):
        """Sets the priority_color of this FileEntity.

        Bookmark/priority color of file/folder

        :param priority_color: The priority_color of this FileEntity.
        :type priority_color: str
        """

        self._priority_color = priority_color

    @property
    def provided_mtime(self):
        """Gets the provided_mtime of this FileEntity.

        File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop<->Cloud syncing to preserve modified at times.

        :return: The provided_mtime of this FileEntity.
        :rtype: datetime
        """
        return self._provided_mtime

    @provided_mtime.setter
    def provided_mtime(self, provided_mtime):
        """Sets the provided_mtime of this FileEntity.

        File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop<->Cloud syncing to preserve modified at times.

        :param provided_mtime: The provided_mtime of this FileEntity.
        :type provided_mtime: datetime
        """

        self._provided_mtime = provided_mtime

    @property
    def region(self):
        """Gets the region of this FileEntity.

        Region location

        :return: The region of this FileEntity.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this FileEntity.

        Region location

        :param region: The region of this FileEntity.
        :type region: str
        """

        self._region = region

    @property
    def size(self):
        """Gets the size of this FileEntity.

        File/Folder size

        :return: The size of this FileEntity.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileEntity.

        File/Folder size

        :param size: The size of this FileEntity.
        :type size: int
        """

        self._size = size

    @property
    def subfolders_locked(self):
        """Gets the subfolders_locked of this FileEntity.

        Are subfolders locked and unable to be modified?

        :return: The subfolders_locked of this FileEntity.
        :rtype: bool
        """
        return self._subfolders_locked

    @subfolders_locked.setter
    def subfolders_locked(self, subfolders_locked):
        """Sets the subfolders_locked of this FileEntity.

        Are subfolders locked and unable to be modified?

        :param subfolders_locked: The subfolders_locked of this FileEntity.
        :type subfolders_locked: bool
        """

        self._subfolders_locked = subfolders_locked

    @property
    def type(self):
        """Gets the type of this FileEntity.

        Type: `directory` or `file`.

        :return: The type of this FileEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileEntity.

        Type: `directory` or `file`.

        :param type: The type of this FileEntity.
        :type type: str
        """

        self._type = type
