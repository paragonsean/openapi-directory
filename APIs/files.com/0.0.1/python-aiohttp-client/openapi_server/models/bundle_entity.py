# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.form_field_set_entity import FormFieldSetEntity
from openapi_server.models.image_entity import ImageEntity
from openapi_server import util


class BundleEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clickwrap_body: str=None, clickwrap_id: int=None, code: str=None, created_at: datetime=None, description: str=None, dont_separate_submissions_by_folder: bool=None, expires_at: datetime=None, form_field_set: FormFieldSetEntity=None, has_inbox: bool=None, id: int=None, inbox_id: int=None, max_uses: int=None, note: str=None, password_protected: bool=None, path_template: str=None, paths: List[str]=None, permissions: str=None, preview_only: bool=None, require_registration: bool=None, require_share_recipient: bool=None, send_email_receipt_to_uploader: bool=None, skip_company: bool=None, skip_email: bool=None, skip_name: bool=None, url: str=None, user_id: int=None, username: str=None, watermark_attachment: ImageEntity=None, watermark_value: object=None):
        """BundleEntity - a model defined in OpenAPI

        :param clickwrap_body: The clickwrap_body of this BundleEntity.
        :param clickwrap_id: The clickwrap_id of this BundleEntity.
        :param code: The code of this BundleEntity.
        :param created_at: The created_at of this BundleEntity.
        :param description: The description of this BundleEntity.
        :param dont_separate_submissions_by_folder: The dont_separate_submissions_by_folder of this BundleEntity.
        :param expires_at: The expires_at of this BundleEntity.
        :param form_field_set: The form_field_set of this BundleEntity.
        :param has_inbox: The has_inbox of this BundleEntity.
        :param id: The id of this BundleEntity.
        :param inbox_id: The inbox_id of this BundleEntity.
        :param max_uses: The max_uses of this BundleEntity.
        :param note: The note of this BundleEntity.
        :param password_protected: The password_protected of this BundleEntity.
        :param path_template: The path_template of this BundleEntity.
        :param paths: The paths of this BundleEntity.
        :param permissions: The permissions of this BundleEntity.
        :param preview_only: The preview_only of this BundleEntity.
        :param require_registration: The require_registration of this BundleEntity.
        :param require_share_recipient: The require_share_recipient of this BundleEntity.
        :param send_email_receipt_to_uploader: The send_email_receipt_to_uploader of this BundleEntity.
        :param skip_company: The skip_company of this BundleEntity.
        :param skip_email: The skip_email of this BundleEntity.
        :param skip_name: The skip_name of this BundleEntity.
        :param url: The url of this BundleEntity.
        :param user_id: The user_id of this BundleEntity.
        :param username: The username of this BundleEntity.
        :param watermark_attachment: The watermark_attachment of this BundleEntity.
        :param watermark_value: The watermark_value of this BundleEntity.
        """
        self.openapi_types = {
            'clickwrap_body': str,
            'clickwrap_id': int,
            'code': str,
            'created_at': datetime,
            'description': str,
            'dont_separate_submissions_by_folder': bool,
            'expires_at': datetime,
            'form_field_set': FormFieldSetEntity,
            'has_inbox': bool,
            'id': int,
            'inbox_id': int,
            'max_uses': int,
            'note': str,
            'password_protected': bool,
            'path_template': str,
            'paths': List[str],
            'permissions': str,
            'preview_only': bool,
            'require_registration': bool,
            'require_share_recipient': bool,
            'send_email_receipt_to_uploader': bool,
            'skip_company': bool,
            'skip_email': bool,
            'skip_name': bool,
            'url': str,
            'user_id': int,
            'username': str,
            'watermark_attachment': ImageEntity,
            'watermark_value': object
        }

        self.attribute_map = {
            'clickwrap_body': 'clickwrap_body',
            'clickwrap_id': 'clickwrap_id',
            'code': 'code',
            'created_at': 'created_at',
            'description': 'description',
            'dont_separate_submissions_by_folder': 'dont_separate_submissions_by_folder',
            'expires_at': 'expires_at',
            'form_field_set': 'form_field_set',
            'has_inbox': 'has_inbox',
            'id': 'id',
            'inbox_id': 'inbox_id',
            'max_uses': 'max_uses',
            'note': 'note',
            'password_protected': 'password_protected',
            'path_template': 'path_template',
            'paths': 'paths',
            'permissions': 'permissions',
            'preview_only': 'preview_only',
            'require_registration': 'require_registration',
            'require_share_recipient': 'require_share_recipient',
            'send_email_receipt_to_uploader': 'send_email_receipt_to_uploader',
            'skip_company': 'skip_company',
            'skip_email': 'skip_email',
            'skip_name': 'skip_name',
            'url': 'url',
            'user_id': 'user_id',
            'username': 'username',
            'watermark_attachment': 'watermark_attachment',
            'watermark_value': 'watermark_value'
        }

        self._clickwrap_body = clickwrap_body
        self._clickwrap_id = clickwrap_id
        self._code = code
        self._created_at = created_at
        self._description = description
        self._dont_separate_submissions_by_folder = dont_separate_submissions_by_folder
        self._expires_at = expires_at
        self._form_field_set = form_field_set
        self._has_inbox = has_inbox
        self._id = id
        self._inbox_id = inbox_id
        self._max_uses = max_uses
        self._note = note
        self._password_protected = password_protected
        self._path_template = path_template
        self._paths = paths
        self._permissions = permissions
        self._preview_only = preview_only
        self._require_registration = require_registration
        self._require_share_recipient = require_share_recipient
        self._send_email_receipt_to_uploader = send_email_receipt_to_uploader
        self._skip_company = skip_company
        self._skip_email = skip_email
        self._skip_name = skip_name
        self._url = url
        self._user_id = user_id
        self._username = username
        self._watermark_attachment = watermark_attachment
        self._watermark_value = watermark_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BundleEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BundleEntity of this BundleEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clickwrap_body(self):
        """Gets the clickwrap_body of this BundleEntity.

        Legal text that must be agreed to prior to accessing Bundle.

        :return: The clickwrap_body of this BundleEntity.
        :rtype: str
        """
        return self._clickwrap_body

    @clickwrap_body.setter
    def clickwrap_body(self, clickwrap_body):
        """Sets the clickwrap_body of this BundleEntity.

        Legal text that must be agreed to prior to accessing Bundle.

        :param clickwrap_body: The clickwrap_body of this BundleEntity.
        :type clickwrap_body: str
        """

        self._clickwrap_body = clickwrap_body

    @property
    def clickwrap_id(self):
        """Gets the clickwrap_id of this BundleEntity.

        ID of the clickwrap to use with this bundle.

        :return: The clickwrap_id of this BundleEntity.
        :rtype: int
        """
        return self._clickwrap_id

    @clickwrap_id.setter
    def clickwrap_id(self, clickwrap_id):
        """Sets the clickwrap_id of this BundleEntity.

        ID of the clickwrap to use with this bundle.

        :param clickwrap_id: The clickwrap_id of this BundleEntity.
        :type clickwrap_id: int
        """

        self._clickwrap_id = clickwrap_id

    @property
    def code(self):
        """Gets the code of this BundleEntity.

        Bundle code.  This code forms the end part of the Public URL.

        :return: The code of this BundleEntity.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BundleEntity.

        Bundle code.  This code forms the end part of the Public URL.

        :param code: The code of this BundleEntity.
        :type code: str
        """

        self._code = code

    @property
    def created_at(self):
        """Gets the created_at of this BundleEntity.

        Bundle created at date/time

        :return: The created_at of this BundleEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BundleEntity.

        Bundle created at date/time

        :param created_at: The created_at of this BundleEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this BundleEntity.

        Public description

        :return: The description of this BundleEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BundleEntity.

        Public description

        :param description: The description of this BundleEntity.
        :type description: str
        """

        self._description = description

    @property
    def dont_separate_submissions_by_folder(self):
        """Gets the dont_separate_submissions_by_folder of this BundleEntity.

        Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.

        :return: The dont_separate_submissions_by_folder of this BundleEntity.
        :rtype: bool
        """
        return self._dont_separate_submissions_by_folder

    @dont_separate_submissions_by_folder.setter
    def dont_separate_submissions_by_folder(self, dont_separate_submissions_by_folder):
        """Sets the dont_separate_submissions_by_folder of this BundleEntity.

        Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.

        :param dont_separate_submissions_by_folder: The dont_separate_submissions_by_folder of this BundleEntity.
        :type dont_separate_submissions_by_folder: bool
        """

        self._dont_separate_submissions_by_folder = dont_separate_submissions_by_folder

    @property
    def expires_at(self):
        """Gets the expires_at of this BundleEntity.

        Bundle expiration date/time

        :return: The expires_at of this BundleEntity.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this BundleEntity.

        Bundle expiration date/time

        :param expires_at: The expires_at of this BundleEntity.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def form_field_set(self):
        """Gets the form_field_set of this BundleEntity.


        :return: The form_field_set of this BundleEntity.
        :rtype: FormFieldSetEntity
        """
        return self._form_field_set

    @form_field_set.setter
    def form_field_set(self, form_field_set):
        """Sets the form_field_set of this BundleEntity.


        :param form_field_set: The form_field_set of this BundleEntity.
        :type form_field_set: FormFieldSetEntity
        """

        self._form_field_set = form_field_set

    @property
    def has_inbox(self):
        """Gets the has_inbox of this BundleEntity.

        Does this bundle have an associated inbox?

        :return: The has_inbox of this BundleEntity.
        :rtype: bool
        """
        return self._has_inbox

    @has_inbox.setter
    def has_inbox(self, has_inbox):
        """Sets the has_inbox of this BundleEntity.

        Does this bundle have an associated inbox?

        :param has_inbox: The has_inbox of this BundleEntity.
        :type has_inbox: bool
        """

        self._has_inbox = has_inbox

    @property
    def id(self):
        """Gets the id of this BundleEntity.

        Bundle ID

        :return: The id of this BundleEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BundleEntity.

        Bundle ID

        :param id: The id of this BundleEntity.
        :type id: int
        """

        self._id = id

    @property
    def inbox_id(self):
        """Gets the inbox_id of this BundleEntity.

        ID of the associated inbox, if available.

        :return: The inbox_id of this BundleEntity.
        :rtype: int
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this BundleEntity.

        ID of the associated inbox, if available.

        :param inbox_id: The inbox_id of this BundleEntity.
        :type inbox_id: int
        """

        self._inbox_id = inbox_id

    @property
    def max_uses(self):
        """Gets the max_uses of this BundleEntity.

        Maximum number of times bundle can be accessed

        :return: The max_uses of this BundleEntity.
        :rtype: int
        """
        return self._max_uses

    @max_uses.setter
    def max_uses(self, max_uses):
        """Sets the max_uses of this BundleEntity.

        Maximum number of times bundle can be accessed

        :param max_uses: The max_uses of this BundleEntity.
        :type max_uses: int
        """

        self._max_uses = max_uses

    @property
    def note(self):
        """Gets the note of this BundleEntity.

        Bundle internal note

        :return: The note of this BundleEntity.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this BundleEntity.

        Bundle internal note

        :param note: The note of this BundleEntity.
        :type note: str
        """

        self._note = note

    @property
    def password_protected(self):
        """Gets the password_protected of this BundleEntity.

        Is this bundle password protected?

        :return: The password_protected of this BundleEntity.
        :rtype: bool
        """
        return self._password_protected

    @password_protected.setter
    def password_protected(self, password_protected):
        """Sets the password_protected of this BundleEntity.

        Is this bundle password protected?

        :param password_protected: The password_protected of this BundleEntity.
        :type password_protected: bool
        """

        self._password_protected = password_protected

    @property
    def path_template(self):
        """Gets the path_template of this BundleEntity.

        Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.

        :return: The path_template of this BundleEntity.
        :rtype: str
        """
        return self._path_template

    @path_template.setter
    def path_template(self, path_template):
        """Sets the path_template of this BundleEntity.

        Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.

        :param path_template: The path_template of this BundleEntity.
        :type path_template: str
        """

        self._path_template = path_template

    @property
    def paths(self):
        """Gets the paths of this BundleEntity.

        A list of paths in this bundle.  For performance reasons, this is not provided when listing bundles.

        :return: The paths of this BundleEntity.
        :rtype: List[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this BundleEntity.

        A list of paths in this bundle.  For performance reasons, this is not provided when listing bundles.

        :param paths: The paths of this BundleEntity.
        :type paths: List[str]
        """

        self._paths = paths

    @property
    def permissions(self):
        """Gets the permissions of this BundleEntity.

        Permissions that apply to Folders in this Share Link.

        :return: The permissions of this BundleEntity.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this BundleEntity.

        Permissions that apply to Folders in this Share Link.

        :param permissions: The permissions of this BundleEntity.
        :type permissions: str
        """
        allowed_values = ["read", "write", "read_write", "full", "none", "preview_only"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    @property
    def preview_only(self):
        """Gets the preview_only of this BundleEntity.

        Restrict users to previewing files only?

        :return: The preview_only of this BundleEntity.
        :rtype: bool
        """
        return self._preview_only

    @preview_only.setter
    def preview_only(self, preview_only):
        """Sets the preview_only of this BundleEntity.

        Restrict users to previewing files only?

        :param preview_only: The preview_only of this BundleEntity.
        :type preview_only: bool
        """

        self._preview_only = preview_only

    @property
    def require_registration(self):
        """Gets the require_registration of this BundleEntity.

        Show a registration page that captures the downloader's name and email address?

        :return: The require_registration of this BundleEntity.
        :rtype: bool
        """
        return self._require_registration

    @require_registration.setter
    def require_registration(self, require_registration):
        """Sets the require_registration of this BundleEntity.

        Show a registration page that captures the downloader's name and email address?

        :param require_registration: The require_registration of this BundleEntity.
        :type require_registration: bool
        """

        self._require_registration = require_registration

    @property
    def require_share_recipient(self):
        """Gets the require_share_recipient of this BundleEntity.

        Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?

        :return: The require_share_recipient of this BundleEntity.
        :rtype: bool
        """
        return self._require_share_recipient

    @require_share_recipient.setter
    def require_share_recipient(self, require_share_recipient):
        """Sets the require_share_recipient of this BundleEntity.

        Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?

        :param require_share_recipient: The require_share_recipient of this BundleEntity.
        :type require_share_recipient: bool
        """

        self._require_share_recipient = require_share_recipient

    @property
    def send_email_receipt_to_uploader(self):
        """Gets the send_email_receipt_to_uploader of this BundleEntity.

        Send delivery receipt to the uploader. Note: For writable share only

        :return: The send_email_receipt_to_uploader of this BundleEntity.
        :rtype: bool
        """
        return self._send_email_receipt_to_uploader

    @send_email_receipt_to_uploader.setter
    def send_email_receipt_to_uploader(self, send_email_receipt_to_uploader):
        """Sets the send_email_receipt_to_uploader of this BundleEntity.

        Send delivery receipt to the uploader. Note: For writable share only

        :param send_email_receipt_to_uploader: The send_email_receipt_to_uploader of this BundleEntity.
        :type send_email_receipt_to_uploader: bool
        """

        self._send_email_receipt_to_uploader = send_email_receipt_to_uploader

    @property
    def skip_company(self):
        """Gets the skip_company of this BundleEntity.

        BundleRegistrations can be saved without providing company?

        :return: The skip_company of this BundleEntity.
        :rtype: bool
        """
        return self._skip_company

    @skip_company.setter
    def skip_company(self, skip_company):
        """Sets the skip_company of this BundleEntity.

        BundleRegistrations can be saved without providing company?

        :param skip_company: The skip_company of this BundleEntity.
        :type skip_company: bool
        """

        self._skip_company = skip_company

    @property
    def skip_email(self):
        """Gets the skip_email of this BundleEntity.

        BundleRegistrations can be saved without providing email?

        :return: The skip_email of this BundleEntity.
        :rtype: bool
        """
        return self._skip_email

    @skip_email.setter
    def skip_email(self, skip_email):
        """Sets the skip_email of this BundleEntity.

        BundleRegistrations can be saved without providing email?

        :param skip_email: The skip_email of this BundleEntity.
        :type skip_email: bool
        """

        self._skip_email = skip_email

    @property
    def skip_name(self):
        """Gets the skip_name of this BundleEntity.

        BundleRegistrations can be saved without providing name?

        :return: The skip_name of this BundleEntity.
        :rtype: bool
        """
        return self._skip_name

    @skip_name.setter
    def skip_name(self, skip_name):
        """Sets the skip_name of this BundleEntity.

        BundleRegistrations can be saved without providing name?

        :param skip_name: The skip_name of this BundleEntity.
        :type skip_name: bool
        """

        self._skip_name = skip_name

    @property
    def url(self):
        """Gets the url of this BundleEntity.

        Public URL of Share Link

        :return: The url of this BundleEntity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BundleEntity.

        Public URL of Share Link

        :param url: The url of this BundleEntity.
        :type url: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this BundleEntity.

        Bundle creator user ID

        :return: The user_id of this BundleEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BundleEntity.

        Bundle creator user ID

        :param user_id: The user_id of this BundleEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this BundleEntity.

        Bundle creator username

        :return: The username of this BundleEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this BundleEntity.

        Bundle creator username

        :param username: The username of this BundleEntity.
        :type username: str
        """

        self._username = username

    @property
    def watermark_attachment(self):
        """Gets the watermark_attachment of this BundleEntity.


        :return: The watermark_attachment of this BundleEntity.
        :rtype: ImageEntity
        """
        return self._watermark_attachment

    @watermark_attachment.setter
    def watermark_attachment(self, watermark_attachment):
        """Sets the watermark_attachment of this BundleEntity.


        :param watermark_attachment: The watermark_attachment of this BundleEntity.
        :type watermark_attachment: ImageEntity
        """

        self._watermark_attachment = watermark_attachment

    @property
    def watermark_value(self):
        """Gets the watermark_value of this BundleEntity.

        Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value

        :return: The watermark_value of this BundleEntity.
        :rtype: object
        """
        return self._watermark_value

    @watermark_value.setter
    def watermark_value(self, watermark_value):
        """Sets the watermark_value of this BundleEntity.

        Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value

        :param watermark_value: The watermark_value of this BundleEntity.
        :type watermark_value: object
        """

        self._watermark_value = watermark_value
