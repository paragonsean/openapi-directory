# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.form_field_entity import FormFieldEntity
from openapi_server import util


class FormFieldSetEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_fields: List[FormFieldEntity]=None, form_layout: List[int]=None, id: int=None, skip_company: bool=None, skip_email: bool=None, skip_name: bool=None, title: str=None):
        """FormFieldSetEntity - a model defined in OpenAPI

        :param form_fields: The form_fields of this FormFieldSetEntity.
        :param form_layout: The form_layout of this FormFieldSetEntity.
        :param id: The id of this FormFieldSetEntity.
        :param skip_company: The skip_company of this FormFieldSetEntity.
        :param skip_email: The skip_email of this FormFieldSetEntity.
        :param skip_name: The skip_name of this FormFieldSetEntity.
        :param title: The title of this FormFieldSetEntity.
        """
        self.openapi_types = {
            'form_fields': List[FormFieldEntity],
            'form_layout': List[int],
            'id': int,
            'skip_company': bool,
            'skip_email': bool,
            'skip_name': bool,
            'title': str
        }

        self.attribute_map = {
            'form_fields': 'form_fields',
            'form_layout': 'form_layout',
            'id': 'id',
            'skip_company': 'skip_company',
            'skip_email': 'skip_email',
            'skip_name': 'skip_name',
            'title': 'title'
        }

        self._form_fields = form_fields
        self._form_layout = form_layout
        self._id = id
        self._skip_company = skip_company
        self._skip_email = skip_email
        self._skip_name = skip_name
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FormFieldSetEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FormFieldSetEntity of this FormFieldSetEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_fields(self):
        """Gets the form_fields of this FormFieldSetEntity.

        Associated form fields

        :return: The form_fields of this FormFieldSetEntity.
        :rtype: List[FormFieldEntity]
        """
        return self._form_fields

    @form_fields.setter
    def form_fields(self, form_fields):
        """Sets the form_fields of this FormFieldSetEntity.

        Associated form fields

        :param form_fields: The form_fields of this FormFieldSetEntity.
        :type form_fields: List[FormFieldEntity]
        """

        self._form_fields = form_fields

    @property
    def form_layout(self):
        """Gets the form_layout of this FormFieldSetEntity.

        Layout of the form

        :return: The form_layout of this FormFieldSetEntity.
        :rtype: List[int]
        """
        return self._form_layout

    @form_layout.setter
    def form_layout(self, form_layout):
        """Sets the form_layout of this FormFieldSetEntity.

        Layout of the form

        :param form_layout: The form_layout of this FormFieldSetEntity.
        :type form_layout: List[int]
        """

        self._form_layout = form_layout

    @property
    def id(self):
        """Gets the id of this FormFieldSetEntity.

        Form field set id

        :return: The id of this FormFieldSetEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormFieldSetEntity.

        Form field set id

        :param id: The id of this FormFieldSetEntity.
        :type id: int
        """

        self._id = id

    @property
    def skip_company(self):
        """Gets the skip_company of this FormFieldSetEntity.

        Any associated InboxRegistrations or BundleRegistrations can be saved without providing company

        :return: The skip_company of this FormFieldSetEntity.
        :rtype: bool
        """
        return self._skip_company

    @skip_company.setter
    def skip_company(self, skip_company):
        """Sets the skip_company of this FormFieldSetEntity.

        Any associated InboxRegistrations or BundleRegistrations can be saved without providing company

        :param skip_company: The skip_company of this FormFieldSetEntity.
        :type skip_company: bool
        """

        self._skip_company = skip_company

    @property
    def skip_email(self):
        """Gets the skip_email of this FormFieldSetEntity.

        Any associated InboxRegistrations or BundleRegistrations can be saved without providing email

        :return: The skip_email of this FormFieldSetEntity.
        :rtype: bool
        """
        return self._skip_email

    @skip_email.setter
    def skip_email(self, skip_email):
        """Sets the skip_email of this FormFieldSetEntity.

        Any associated InboxRegistrations or BundleRegistrations can be saved without providing email

        :param skip_email: The skip_email of this FormFieldSetEntity.
        :type skip_email: bool
        """

        self._skip_email = skip_email

    @property
    def skip_name(self):
        """Gets the skip_name of this FormFieldSetEntity.

        Any associated InboxRegistrations or BundleRegistrations can be saved without providing name

        :return: The skip_name of this FormFieldSetEntity.
        :rtype: bool
        """
        return self._skip_name

    @skip_name.setter
    def skip_name(self, skip_name):
        """Sets the skip_name of this FormFieldSetEntity.

        Any associated InboxRegistrations or BundleRegistrations can be saved without providing name

        :param skip_name: The skip_name of this FormFieldSetEntity.
        :type skip_name: bool
        """

        self._skip_name = skip_name

    @property
    def title(self):
        """Gets the title of this FormFieldSetEntity.

        Title to be displayed

        :return: The title of this FormFieldSetEntity.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FormFieldSetEntity.

        Title to be displayed

        :param title: The title of this FormFieldSetEntity.
        :type title: str
        """

        self._title = title
