# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomationEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automation: str=None, deleted: bool=None, description: str=None, destination_replace_from: str=None, destination_replace_to: str=None, destinations: List[str]=None, disabled: bool=None, group_ids: List[int]=None, id: int=None, interval: str=None, last_modified_at: datetime=None, name: str=None, path: str=None, recurring_day: int=None, schedule: object=None, source: str=None, sync_ids: List[int]=None, trigger: str=None, trigger_actions: List[str]=None, user_id: int=None, user_ids: List[int]=None, value: object=None, webhook_url: str=None):
        """AutomationEntity - a model defined in OpenAPI

        :param automation: The automation of this AutomationEntity.
        :param deleted: The deleted of this AutomationEntity.
        :param description: The description of this AutomationEntity.
        :param destination_replace_from: The destination_replace_from of this AutomationEntity.
        :param destination_replace_to: The destination_replace_to of this AutomationEntity.
        :param destinations: The destinations of this AutomationEntity.
        :param disabled: The disabled of this AutomationEntity.
        :param group_ids: The group_ids of this AutomationEntity.
        :param id: The id of this AutomationEntity.
        :param interval: The interval of this AutomationEntity.
        :param last_modified_at: The last_modified_at of this AutomationEntity.
        :param name: The name of this AutomationEntity.
        :param path: The path of this AutomationEntity.
        :param recurring_day: The recurring_day of this AutomationEntity.
        :param schedule: The schedule of this AutomationEntity.
        :param source: The source of this AutomationEntity.
        :param sync_ids: The sync_ids of this AutomationEntity.
        :param trigger: The trigger of this AutomationEntity.
        :param trigger_actions: The trigger_actions of this AutomationEntity.
        :param user_id: The user_id of this AutomationEntity.
        :param user_ids: The user_ids of this AutomationEntity.
        :param value: The value of this AutomationEntity.
        :param webhook_url: The webhook_url of this AutomationEntity.
        """
        self.openapi_types = {
            'automation': str,
            'deleted': bool,
            'description': str,
            'destination_replace_from': str,
            'destination_replace_to': str,
            'destinations': List[str],
            'disabled': bool,
            'group_ids': List[int],
            'id': int,
            'interval': str,
            'last_modified_at': datetime,
            'name': str,
            'path': str,
            'recurring_day': int,
            'schedule': object,
            'source': str,
            'sync_ids': List[int],
            'trigger': str,
            'trigger_actions': List[str],
            'user_id': int,
            'user_ids': List[int],
            'value': object,
            'webhook_url': str
        }

        self.attribute_map = {
            'automation': 'automation',
            'deleted': 'deleted',
            'description': 'description',
            'destination_replace_from': 'destination_replace_from',
            'destination_replace_to': 'destination_replace_to',
            'destinations': 'destinations',
            'disabled': 'disabled',
            'group_ids': 'group_ids',
            'id': 'id',
            'interval': 'interval',
            'last_modified_at': 'last_modified_at',
            'name': 'name',
            'path': 'path',
            'recurring_day': 'recurring_day',
            'schedule': 'schedule',
            'source': 'source',
            'sync_ids': 'sync_ids',
            'trigger': 'trigger',
            'trigger_actions': 'trigger_actions',
            'user_id': 'user_id',
            'user_ids': 'user_ids',
            'value': 'value',
            'webhook_url': 'webhook_url'
        }

        self._automation = automation
        self._deleted = deleted
        self._description = description
        self._destination_replace_from = destination_replace_from
        self._destination_replace_to = destination_replace_to
        self._destinations = destinations
        self._disabled = disabled
        self._group_ids = group_ids
        self._id = id
        self._interval = interval
        self._last_modified_at = last_modified_at
        self._name = name
        self._path = path
        self._recurring_day = recurring_day
        self._schedule = schedule
        self._source = source
        self._sync_ids = sync_ids
        self._trigger = trigger
        self._trigger_actions = trigger_actions
        self._user_id = user_id
        self._user_ids = user_ids
        self._value = value
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationEntity of this AutomationEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automation(self):
        """Gets the automation of this AutomationEntity.

        Automation type

        :return: The automation of this AutomationEntity.
        :rtype: str
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this AutomationEntity.

        Automation type

        :param automation: The automation of this AutomationEntity.
        :type automation: str
        """
        allowed_values = ["create_folder", "request_file", "request_move", "copy_newest_file", "delete_file", "copy_file", "move_file", "as2_send", "run_sync"]  # noqa: E501
        if automation not in allowed_values:
            raise ValueError(
                "Invalid value for `automation` ({0}), must be one of {1}"
                .format(automation, allowed_values)
            )

        self._automation = automation

    @property
    def deleted(self):
        """Gets the deleted of this AutomationEntity.

        Indicates if the automation has been deleted.

        :return: The deleted of this AutomationEntity.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AutomationEntity.

        Indicates if the automation has been deleted.

        :param deleted: The deleted of this AutomationEntity.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this AutomationEntity.

        Description for the this Automation.

        :return: The description of this AutomationEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutomationEntity.

        Description for the this Automation.

        :param description: The description of this AutomationEntity.
        :type description: str
        """

        self._description = description

    @property
    def destination_replace_from(self):
        """Gets the destination_replace_from of this AutomationEntity.

        If set, this string in the destination path will be replaced with the value in `destination_replace_to`.

        :return: The destination_replace_from of this AutomationEntity.
        :rtype: str
        """
        return self._destination_replace_from

    @destination_replace_from.setter
    def destination_replace_from(self, destination_replace_from):
        """Sets the destination_replace_from of this AutomationEntity.

        If set, this string in the destination path will be replaced with the value in `destination_replace_to`.

        :param destination_replace_from: The destination_replace_from of this AutomationEntity.
        :type destination_replace_from: str
        """

        self._destination_replace_from = destination_replace_from

    @property
    def destination_replace_to(self):
        """Gets the destination_replace_to of this AutomationEntity.

        If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.

        :return: The destination_replace_to of this AutomationEntity.
        :rtype: str
        """
        return self._destination_replace_to

    @destination_replace_to.setter
    def destination_replace_to(self, destination_replace_to):
        """Sets the destination_replace_to of this AutomationEntity.

        If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.

        :param destination_replace_to: The destination_replace_to of this AutomationEntity.
        :type destination_replace_to: str
        """

        self._destination_replace_to = destination_replace_to

    @property
    def destinations(self):
        """Gets the destinations of this AutomationEntity.

        Destination Path

        :return: The destinations of this AutomationEntity.
        :rtype: List[str]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this AutomationEntity.

        Destination Path

        :param destinations: The destinations of this AutomationEntity.
        :type destinations: List[str]
        """

        self._destinations = destinations

    @property
    def disabled(self):
        """Gets the disabled of this AutomationEntity.

        If true, this automation will not run.

        :return: The disabled of this AutomationEntity.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this AutomationEntity.

        If true, this automation will not run.

        :param disabled: The disabled of this AutomationEntity.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def group_ids(self):
        """Gets the group_ids of this AutomationEntity.

        IDs of Groups for the Automation (i.e. who to Request File from)

        :return: The group_ids of this AutomationEntity.
        :rtype: List[int]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this AutomationEntity.

        IDs of Groups for the Automation (i.e. who to Request File from)

        :param group_ids: The group_ids of this AutomationEntity.
        :type group_ids: List[int]
        """

        self._group_ids = group_ids

    @property
    def id(self):
        """Gets the id of this AutomationEntity.

        Automation ID

        :return: The id of this AutomationEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutomationEntity.

        Automation ID

        :param id: The id of this AutomationEntity.
        :type id: int
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this AutomationEntity.

        If trigger is `daily`, this specifies how often to run this automation.  One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`

        :return: The interval of this AutomationEntity.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this AutomationEntity.

        If trigger is `daily`, this specifies how often to run this automation.  One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`

        :param interval: The interval of this AutomationEntity.
        :type interval: str
        """

        self._interval = interval

    @property
    def last_modified_at(self):
        """Gets the last_modified_at of this AutomationEntity.

        Time when automation was last modified. Does not change for name or description updates.

        :return: The last_modified_at of this AutomationEntity.
        :rtype: datetime
        """
        return self._last_modified_at

    @last_modified_at.setter
    def last_modified_at(self, last_modified_at):
        """Sets the last_modified_at of this AutomationEntity.

        Time when automation was last modified. Does not change for name or description updates.

        :param last_modified_at: The last_modified_at of this AutomationEntity.
        :type last_modified_at: datetime
        """

        self._last_modified_at = last_modified_at

    @property
    def name(self):
        """Gets the name of this AutomationEntity.

        Name for this automation.

        :return: The name of this AutomationEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomationEntity.

        Name for this automation.

        :param name: The name of this AutomationEntity.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this AutomationEntity.

        Path on which this Automation runs.  Supports globs.

        :return: The path of this AutomationEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AutomationEntity.

        Path on which this Automation runs.  Supports globs.

        :param path: The path of this AutomationEntity.
        :type path: str
        """

        self._path = path

    @property
    def recurring_day(self):
        """Gets the recurring_day of this AutomationEntity.

        If trigger type is `daily`, this specifies a day number to run in one of the supported intervals: `week`, `month`, `quarter`, `year`.

        :return: The recurring_day of this AutomationEntity.
        :rtype: int
        """
        return self._recurring_day

    @recurring_day.setter
    def recurring_day(self, recurring_day):
        """Sets the recurring_day of this AutomationEntity.

        If trigger type is `daily`, this specifies a day number to run in one of the supported intervals: `week`, `month`, `quarter`, `year`.

        :param recurring_day: The recurring_day of this AutomationEntity.
        :type recurring_day: int
        """

        self._recurring_day = recurring_day

    @property
    def schedule(self):
        """Gets the schedule of this AutomationEntity.

        If trigger is `custom_schedule`, Custom schedule description for when the automation should be run.

        :return: The schedule of this AutomationEntity.
        :rtype: object
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this AutomationEntity.

        If trigger is `custom_schedule`, Custom schedule description for when the automation should be run.

        :param schedule: The schedule of this AutomationEntity.
        :type schedule: object
        """

        self._schedule = schedule

    @property
    def source(self):
        """Gets the source of this AutomationEntity.

        Source Path

        :return: The source of this AutomationEntity.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AutomationEntity.

        Source Path

        :param source: The source of this AutomationEntity.
        :type source: str
        """

        self._source = source

    @property
    def sync_ids(self):
        """Gets the sync_ids of this AutomationEntity.

        IDs of remote sync folder behaviors to run by this Automation

        :return: The sync_ids of this AutomationEntity.
        :rtype: List[int]
        """
        return self._sync_ids

    @sync_ids.setter
    def sync_ids(self, sync_ids):
        """Sets the sync_ids of this AutomationEntity.

        IDs of remote sync folder behaviors to run by this Automation

        :param sync_ids: The sync_ids of this AutomationEntity.
        :type sync_ids: List[int]
        """

        self._sync_ids = sync_ids

    @property
    def trigger(self):
        """Gets the trigger of this AutomationEntity.

        How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.

        :return: The trigger of this AutomationEntity.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this AutomationEntity.

        How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.

        :param trigger: The trigger of this AutomationEntity.
        :type trigger: str
        """
        allowed_values = ["realtime", "daily", "custom_schedule", "webhook", "email", "action"]  # noqa: E501
        if trigger not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger` ({0}), must be one of {1}"
                .format(trigger, allowed_values)
            )

        self._trigger = trigger

    @property
    def trigger_actions(self):
        """Gets the trigger_actions of this AutomationEntity.

        If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy

        :return: The trigger_actions of this AutomationEntity.
        :rtype: List[str]
        """
        return self._trigger_actions

    @trigger_actions.setter
    def trigger_actions(self, trigger_actions):
        """Sets the trigger_actions of this AutomationEntity.

        If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy

        :param trigger_actions: The trigger_actions of this AutomationEntity.
        :type trigger_actions: List[str]
        """

        self._trigger_actions = trigger_actions

    @property
    def user_id(self):
        """Gets the user_id of this AutomationEntity.

        User ID of the Automation's creator.

        :return: The user_id of this AutomationEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AutomationEntity.

        User ID of the Automation's creator.

        :param user_id: The user_id of this AutomationEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_ids(self):
        """Gets the user_ids of this AutomationEntity.

        IDs of Users for the Automation (i.e. who to Request File from)

        :return: The user_ids of this AutomationEntity.
        :rtype: List[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this AutomationEntity.

        IDs of Users for the Automation (i.e. who to Request File from)

        :param user_ids: The user_ids of this AutomationEntity.
        :type user_ids: List[int]
        """

        self._user_ids = user_ids

    @property
    def value(self):
        """Gets the value of this AutomationEntity.

        A Hash of attributes specific to the automation type.

        :return: The value of this AutomationEntity.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AutomationEntity.

        A Hash of attributes specific to the automation type.

        :param value: The value of this AutomationEntity.
        :type value: object
        """

        self._value = value

    @property
    def webhook_url(self):
        """Gets the webhook_url of this AutomationEntity.

        If trigger is `webhook`, this is the URL of the webhook to trigger the Automation.

        :return: The webhook_url of this AutomationEntity.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this AutomationEntity.

        If trigger is `webhook`, this is the URL of the webhook to trigger the Automation.

        :param webhook_url: The webhook_url of this AutomationEntity.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url
