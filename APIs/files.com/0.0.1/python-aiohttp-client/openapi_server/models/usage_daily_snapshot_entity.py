# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageDailySnapshotEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_usage_available: bool=None, current_storage: int=None, _date: date=None, deleted_files_counted_in_minimum: int=None, deleted_files_storage: int=None, id: int=None, read_api_usage: int=None, root_storage: int=None, usage_by_top_level_dir: object=None, user_count: int=None, write_api_usage: int=None):
        """UsageDailySnapshotEntity - a model defined in OpenAPI

        :param api_usage_available: The api_usage_available of this UsageDailySnapshotEntity.
        :param current_storage: The current_storage of this UsageDailySnapshotEntity.
        :param _date: The _date of this UsageDailySnapshotEntity.
        :param deleted_files_counted_in_minimum: The deleted_files_counted_in_minimum of this UsageDailySnapshotEntity.
        :param deleted_files_storage: The deleted_files_storage of this UsageDailySnapshotEntity.
        :param id: The id of this UsageDailySnapshotEntity.
        :param read_api_usage: The read_api_usage of this UsageDailySnapshotEntity.
        :param root_storage: The root_storage of this UsageDailySnapshotEntity.
        :param usage_by_top_level_dir: The usage_by_top_level_dir of this UsageDailySnapshotEntity.
        :param user_count: The user_count of this UsageDailySnapshotEntity.
        :param write_api_usage: The write_api_usage of this UsageDailySnapshotEntity.
        """
        self.openapi_types = {
            'api_usage_available': bool,
            'current_storage': int,
            '_date': date,
            'deleted_files_counted_in_minimum': int,
            'deleted_files_storage': int,
            'id': int,
            'read_api_usage': int,
            'root_storage': int,
            'usage_by_top_level_dir': object,
            'user_count': int,
            'write_api_usage': int
        }

        self.attribute_map = {
            'api_usage_available': 'api_usage_available',
            'current_storage': 'current_storage',
            '_date': 'date',
            'deleted_files_counted_in_minimum': 'deleted_files_counted_in_minimum',
            'deleted_files_storage': 'deleted_files_storage',
            'id': 'id',
            'read_api_usage': 'read_api_usage',
            'root_storage': 'root_storage',
            'usage_by_top_level_dir': 'usage_by_top_level_dir',
            'user_count': 'user_count',
            'write_api_usage': 'write_api_usage'
        }

        self._api_usage_available = api_usage_available
        self._current_storage = current_storage
        self.__date = _date
        self._deleted_files_counted_in_minimum = deleted_files_counted_in_minimum
        self._deleted_files_storage = deleted_files_storage
        self._id = id
        self._read_api_usage = read_api_usage
        self._root_storage = root_storage
        self._usage_by_top_level_dir = usage_by_top_level_dir
        self._user_count = user_count
        self._write_api_usage = write_api_usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageDailySnapshotEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageDailySnapshotEntity of this UsageDailySnapshotEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_usage_available(self):
        """Gets the api_usage_available of this UsageDailySnapshotEntity.

        True if the API usage fields `read_api_usage` and `write_api_usage` can be relied upon.  If this is false, we suggest hiding that value from any UI.

        :return: The api_usage_available of this UsageDailySnapshotEntity.
        :rtype: bool
        """
        return self._api_usage_available

    @api_usage_available.setter
    def api_usage_available(self, api_usage_available):
        """Sets the api_usage_available of this UsageDailySnapshotEntity.

        True if the API usage fields `read_api_usage` and `write_api_usage` can be relied upon.  If this is false, we suggest hiding that value from any UI.

        :param api_usage_available: The api_usage_available of this UsageDailySnapshotEntity.
        :type api_usage_available: bool
        """

        self._api_usage_available = api_usage_available

    @property
    def current_storage(self):
        """Gets the current_storage of this UsageDailySnapshotEntity.

        GB of Files Native Storage used on this day.

        :return: The current_storage of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._current_storage

    @current_storage.setter
    def current_storage(self, current_storage):
        """Sets the current_storage of this UsageDailySnapshotEntity.

        GB of Files Native Storage used on this day.

        :param current_storage: The current_storage of this UsageDailySnapshotEntity.
        :type current_storage: int
        """

        self._current_storage = current_storage

    @property
    def _date(self):
        """Gets the _date of this UsageDailySnapshotEntity.

        The date of this usage record

        :return: The _date of this UsageDailySnapshotEntity.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this UsageDailySnapshotEntity.

        The date of this usage record

        :param _date: The _date of this UsageDailySnapshotEntity.
        :type _date: date
        """

        self.__date = _date

    @property
    def deleted_files_counted_in_minimum(self):
        """Gets the deleted_files_counted_in_minimum of this UsageDailySnapshotEntity.

        GB of Files Native Storage used on this day for files that have been permanently deleted but were uploaded less than 30 days ago, and are still billable.

        :return: The deleted_files_counted_in_minimum of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._deleted_files_counted_in_minimum

    @deleted_files_counted_in_minimum.setter
    def deleted_files_counted_in_minimum(self, deleted_files_counted_in_minimum):
        """Sets the deleted_files_counted_in_minimum of this UsageDailySnapshotEntity.

        GB of Files Native Storage used on this day for files that have been permanently deleted but were uploaded less than 30 days ago, and are still billable.

        :param deleted_files_counted_in_minimum: The deleted_files_counted_in_minimum of this UsageDailySnapshotEntity.
        :type deleted_files_counted_in_minimum: int
        """

        self._deleted_files_counted_in_minimum = deleted_files_counted_in_minimum

    @property
    def deleted_files_storage(self):
        """Gets the deleted_files_storage of this UsageDailySnapshotEntity.

        GB of Files Native Storage used on this day for files that have been deleted and are stored as backups.

        :return: The deleted_files_storage of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._deleted_files_storage

    @deleted_files_storage.setter
    def deleted_files_storage(self, deleted_files_storage):
        """Sets the deleted_files_storage of this UsageDailySnapshotEntity.

        GB of Files Native Storage used on this day for files that have been deleted and are stored as backups.

        :param deleted_files_storage: The deleted_files_storage of this UsageDailySnapshotEntity.
        :type deleted_files_storage: int
        """

        self._deleted_files_storage = deleted_files_storage

    @property
    def id(self):
        """Gets the id of this UsageDailySnapshotEntity.

        ID of the usage record

        :return: The id of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsageDailySnapshotEntity.

        ID of the usage record

        :param id: The id of this UsageDailySnapshotEntity.
        :type id: int
        """

        self._id = id

    @property
    def read_api_usage(self):
        """Gets the read_api_usage of this UsageDailySnapshotEntity.

        Read API Calls used on this day. Note: only updated for days before the current day.

        :return: The read_api_usage of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._read_api_usage

    @read_api_usage.setter
    def read_api_usage(self, read_api_usage):
        """Sets the read_api_usage of this UsageDailySnapshotEntity.

        Read API Calls used on this day. Note: only updated for days before the current day.

        :param read_api_usage: The read_api_usage of this UsageDailySnapshotEntity.
        :type read_api_usage: int
        """

        self._read_api_usage = read_api_usage

    @property
    def root_storage(self):
        """Gets the root_storage of this UsageDailySnapshotEntity.

        GB of Files Native Storage used for the root folder.  Included here because this value will not be part of `usage_by_top_level_dir`

        :return: The root_storage of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._root_storage

    @root_storage.setter
    def root_storage(self, root_storage):
        """Sets the root_storage of this UsageDailySnapshotEntity.

        GB of Files Native Storage used for the root folder.  Included here because this value will not be part of `usage_by_top_level_dir`

        :param root_storage: The root_storage of this UsageDailySnapshotEntity.
        :type root_storage: int
        """

        self._root_storage = root_storage

    @property
    def usage_by_top_level_dir(self):
        """Gets the usage_by_top_level_dir of this UsageDailySnapshotEntity.

        Usage broken down by each top-level folder

        :return: The usage_by_top_level_dir of this UsageDailySnapshotEntity.
        :rtype: object
        """
        return self._usage_by_top_level_dir

    @usage_by_top_level_dir.setter
    def usage_by_top_level_dir(self, usage_by_top_level_dir):
        """Sets the usage_by_top_level_dir of this UsageDailySnapshotEntity.

        Usage broken down by each top-level folder

        :param usage_by_top_level_dir: The usage_by_top_level_dir of this UsageDailySnapshotEntity.
        :type usage_by_top_level_dir: object
        """

        self._usage_by_top_level_dir = usage_by_top_level_dir

    @property
    def user_count(self):
        """Gets the user_count of this UsageDailySnapshotEntity.

        Number of billable users as of this day.

        :return: The user_count of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this UsageDailySnapshotEntity.

        Number of billable users as of this day.

        :param user_count: The user_count of this UsageDailySnapshotEntity.
        :type user_count: int
        """

        self._user_count = user_count

    @property
    def write_api_usage(self):
        """Gets the write_api_usage of this UsageDailySnapshotEntity.

        Write API Calls used on this day. Note: only updated for days before the current day.

        :return: The write_api_usage of this UsageDailySnapshotEntity.
        :rtype: int
        """
        return self._write_api_usage

    @write_api_usage.setter
    def write_api_usage(self, write_api_usage):
        """Sets the write_api_usage of this UsageDailySnapshotEntity.

        Write API Calls used on this day. Note: only updated for days before the current day.

        :param write_api_usage: The write_api_usage of this UsageDailySnapshotEntity.
        :type write_api_usage: int
        """

        self._write_api_usage = write_api_usage
