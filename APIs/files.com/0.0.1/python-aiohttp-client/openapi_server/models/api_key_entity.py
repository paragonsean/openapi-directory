# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKeyEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, descriptive_label: str=None, expires_at: datetime=None, id: int=None, key: str=None, last_use_at: datetime=None, name: str=None, path: str=None, permission_set: str=None, platform: str=None, url: str=None, user_id: int=None):
        """ApiKeyEntity - a model defined in OpenAPI

        :param created_at: The created_at of this ApiKeyEntity.
        :param description: The description of this ApiKeyEntity.
        :param descriptive_label: The descriptive_label of this ApiKeyEntity.
        :param expires_at: The expires_at of this ApiKeyEntity.
        :param id: The id of this ApiKeyEntity.
        :param key: The key of this ApiKeyEntity.
        :param last_use_at: The last_use_at of this ApiKeyEntity.
        :param name: The name of this ApiKeyEntity.
        :param path: The path of this ApiKeyEntity.
        :param permission_set: The permission_set of this ApiKeyEntity.
        :param platform: The platform of this ApiKeyEntity.
        :param url: The url of this ApiKeyEntity.
        :param user_id: The user_id of this ApiKeyEntity.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'descriptive_label': str,
            'expires_at': datetime,
            'id': int,
            'key': str,
            'last_use_at': datetime,
            'name': str,
            'path': str,
            'permission_set': str,
            'platform': str,
            'url': str,
            'user_id': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'descriptive_label': 'descriptive_label',
            'expires_at': 'expires_at',
            'id': 'id',
            'key': 'key',
            'last_use_at': 'last_use_at',
            'name': 'name',
            'path': 'path',
            'permission_set': 'permission_set',
            'platform': 'platform',
            'url': 'url',
            'user_id': 'user_id'
        }

        self._created_at = created_at
        self._description = description
        self._descriptive_label = descriptive_label
        self._expires_at = expires_at
        self._id = id
        self._key = key
        self._last_use_at = last_use_at
        self._name = name
        self._path = path
        self._permission_set = permission_set
        self._platform = platform
        self._url = url
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKeyEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKeyEntity of this ApiKeyEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ApiKeyEntity.

        Time which API Key was created

        :return: The created_at of this ApiKeyEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApiKeyEntity.

        Time which API Key was created

        :param created_at: The created_at of this ApiKeyEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ApiKeyEntity.

        User-supplied description of API key.

        :return: The description of this ApiKeyEntity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiKeyEntity.

        User-supplied description of API key.

        :param description: The description of this ApiKeyEntity.
        :type description: str
        """

        self._description = description

    @property
    def descriptive_label(self):
        """Gets the descriptive_label of this ApiKeyEntity.

        Unique label that describes this API key.  Useful for external systems where you may have API keys from multiple accounts and want a human-readable label for each key.

        :return: The descriptive_label of this ApiKeyEntity.
        :rtype: str
        """
        return self._descriptive_label

    @descriptive_label.setter
    def descriptive_label(self, descriptive_label):
        """Sets the descriptive_label of this ApiKeyEntity.

        Unique label that describes this API key.  Useful for external systems where you may have API keys from multiple accounts and want a human-readable label for each key.

        :param descriptive_label: The descriptive_label of this ApiKeyEntity.
        :type descriptive_label: str
        """

        self._descriptive_label = descriptive_label

    @property
    def expires_at(self):
        """Gets the expires_at of this ApiKeyEntity.

        API Key expiration date

        :return: The expires_at of this ApiKeyEntity.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this ApiKeyEntity.

        API Key expiration date

        :param expires_at: The expires_at of this ApiKeyEntity.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this ApiKeyEntity.

        API Key ID

        :return: The id of this ApiKeyEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiKeyEntity.

        API Key ID

        :param id: The id of this ApiKeyEntity.
        :type id: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ApiKeyEntity.

        API Key actual key string

        :return: The key of this ApiKeyEntity.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ApiKeyEntity.

        API Key actual key string

        :param key: The key of this ApiKeyEntity.
        :type key: str
        """

        self._key = key

    @property
    def last_use_at(self):
        """Gets the last_use_at of this ApiKeyEntity.

        API Key last used - note this value is only updated once per 3 hour period, so the 'actual' time of last use may be up to 3 hours later than this timestamp.

        :return: The last_use_at of this ApiKeyEntity.
        :rtype: datetime
        """
        return self._last_use_at

    @last_use_at.setter
    def last_use_at(self, last_use_at):
        """Sets the last_use_at of this ApiKeyEntity.

        API Key last used - note this value is only updated once per 3 hour period, so the 'actual' time of last use may be up to 3 hours later than this timestamp.

        :param last_use_at: The last_use_at of this ApiKeyEntity.
        :type last_use_at: datetime
        """

        self._last_use_at = last_use_at

    @property
    def name(self):
        """Gets the name of this ApiKeyEntity.

        Internal name for the API Key.  For your use.

        :return: The name of this ApiKeyEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyEntity.

        Internal name for the API Key.  For your use.

        :param name: The name of this ApiKeyEntity.
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ApiKeyEntity.

        Folder path restriction for this api key.

        :return: The path of this ApiKeyEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiKeyEntity.

        Folder path restriction for this api key.

        :param path: The path of this ApiKeyEntity.
        :type path: str
        """

        self._path = path

    @property
    def permission_set(self):
        """Gets the permission_set of this ApiKeyEntity.

        Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.

        :return: The permission_set of this ApiKeyEntity.
        :rtype: str
        """
        return self._permission_set

    @permission_set.setter
    def permission_set(self, permission_set):
        """Sets the permission_set of this ApiKeyEntity.

        Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.

        :param permission_set: The permission_set of this ApiKeyEntity.
        :type permission_set: str
        """
        allowed_values = ["none", "full", "desktop_app", "sync_app", "office_integration", "mobile_app"]  # noqa: E501
        if permission_set not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_set` ({0}), must be one of {1}"
                .format(permission_set, allowed_values)
            )

        self._permission_set = permission_set

    @property
    def platform(self):
        """Gets the platform of this ApiKeyEntity.

        If this API key represents a Desktop app, what platform was it created on?

        :return: The platform of this ApiKeyEntity.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this ApiKeyEntity.

        If this API key represents a Desktop app, what platform was it created on?

        :param platform: The platform of this ApiKeyEntity.
        :type platform: str
        """

        self._platform = platform

    @property
    def url(self):
        """Gets the url of this ApiKeyEntity.

        URL for API host.

        :return: The url of this ApiKeyEntity.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApiKeyEntity.

        URL for API host.

        :param url: The url of this ApiKeyEntity.
        :type url: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this ApiKeyEntity.

        User ID for the owner of this API Key.  May be blank for Site-wide API Keys.

        :return: The user_id of this ApiKeyEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ApiKeyEntity.

        User ID for the owner of this API Key.  May be blank for Site-wide API Keys.

        :param user_id: The user_id of this ApiKeyEntity.
        :type user_id: int
        """

        self._user_id = user_id
