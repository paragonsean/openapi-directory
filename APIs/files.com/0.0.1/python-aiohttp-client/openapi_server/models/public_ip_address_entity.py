# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicIpAddressEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ftp_enabled: bool=None, ip_address: str=None, server_name: str=None, sftp_enabled: bool=None):
        """PublicIpAddressEntity - a model defined in OpenAPI

        :param ftp_enabled: The ftp_enabled of this PublicIpAddressEntity.
        :param ip_address: The ip_address of this PublicIpAddressEntity.
        :param server_name: The server_name of this PublicIpAddressEntity.
        :param sftp_enabled: The sftp_enabled of this PublicIpAddressEntity.
        """
        self.openapi_types = {
            'ftp_enabled': bool,
            'ip_address': str,
            'server_name': str,
            'sftp_enabled': bool
        }

        self.attribute_map = {
            'ftp_enabled': 'ftp_enabled',
            'ip_address': 'ip_address',
            'server_name': 'server_name',
            'sftp_enabled': 'sftp_enabled'
        }

        self._ftp_enabled = ftp_enabled
        self._ip_address = ip_address
        self._server_name = server_name
        self._sftp_enabled = sftp_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicIpAddressEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicIpAddressEntity of this PublicIpAddressEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ftp_enabled(self):
        """Gets the ftp_enabled of this PublicIpAddressEntity.


        :return: The ftp_enabled of this PublicIpAddressEntity.
        :rtype: bool
        """
        return self._ftp_enabled

    @ftp_enabled.setter
    def ftp_enabled(self, ftp_enabled):
        """Sets the ftp_enabled of this PublicIpAddressEntity.


        :param ftp_enabled: The ftp_enabled of this PublicIpAddressEntity.
        :type ftp_enabled: bool
        """

        self._ftp_enabled = ftp_enabled

    @property
    def ip_address(self):
        """Gets the ip_address of this PublicIpAddressEntity.

        The public IP address.

        :return: The ip_address of this PublicIpAddressEntity.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PublicIpAddressEntity.

        The public IP address.

        :param ip_address: The ip_address of this PublicIpAddressEntity.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def server_name(self):
        """Gets the server_name of this PublicIpAddressEntity.

        The name of the frontend server.

        :return: The server_name of this PublicIpAddressEntity.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this PublicIpAddressEntity.

        The name of the frontend server.

        :param server_name: The server_name of this PublicIpAddressEntity.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def sftp_enabled(self):
        """Gets the sftp_enabled of this PublicIpAddressEntity.


        :return: The sftp_enabled of this PublicIpAddressEntity.
        :rtype: bool
        """
        return self._sftp_enabled

    @sftp_enabled.setter
    def sftp_enabled(self, sftp_enabled):
        """Sets the sftp_enabled of this PublicIpAddressEntity.


        :param sftp_enabled: The sftp_enabled of this PublicIpAddressEntity.
        :type sftp_enabled: bool
        """

        self._sftp_enabled = sftp_enabled
