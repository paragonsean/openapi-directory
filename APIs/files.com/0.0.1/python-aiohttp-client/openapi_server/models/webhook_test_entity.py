# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_entity import AutoEntity
from openapi_server import util


class WebhookTestEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, data: AutoEntity=None, message: str=None, status: str=None, success: bool=None):
        """WebhookTestEntity - a model defined in OpenAPI

        :param code: The code of this WebhookTestEntity.
        :param data: The data of this WebhookTestEntity.
        :param message: The message of this WebhookTestEntity.
        :param status: The status of this WebhookTestEntity.
        :param success: The success of this WebhookTestEntity.
        """
        self.openapi_types = {
            'code': int,
            'data': AutoEntity,
            'message': str,
            'status': str,
            'success': bool
        }

        self.attribute_map = {
            'code': 'code',
            'data': 'data',
            'message': 'message',
            'status': 'status',
            'success': 'success'
        }

        self._code = code
        self._data = data
        self._message = message
        self._status = status
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookTestEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookTestEntity of this WebhookTestEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this WebhookTestEntity.

        Status HTTP code

        :return: The code of this WebhookTestEntity.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this WebhookTestEntity.

        Status HTTP code

        :param code: The code of this WebhookTestEntity.
        :type code: int
        """

        self._code = code

    @property
    def data(self):
        """Gets the data of this WebhookTestEntity.


        :return: The data of this WebhookTestEntity.
        :rtype: AutoEntity
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WebhookTestEntity.


        :param data: The data of this WebhookTestEntity.
        :type data: AutoEntity
        """

        self._data = data

    @property
    def message(self):
        """Gets the message of this WebhookTestEntity.

        Error message

        :return: The message of this WebhookTestEntity.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this WebhookTestEntity.

        Error message

        :param message: The message of this WebhookTestEntity.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this WebhookTestEntity.

        Status message

        :return: The status of this WebhookTestEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebhookTestEntity.

        Status message

        :param status: The status of this WebhookTestEntity.
        :type status: str
        """

        self._status = status

    @property
    def success(self):
        """Gets the success of this WebhookTestEntity.

        The success status of the webhook test

        :return: The success of this WebhookTestEntity.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this WebhookTestEntity.

        The success status of the webhook test

        :param success: The success of this WebhookTestEntity.
        :type success: bool
        """

        self._success = success
