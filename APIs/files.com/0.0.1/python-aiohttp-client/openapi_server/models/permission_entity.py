# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PermissionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, group_name: str=None, id: int=None, path: str=None, permission: str=None, recursive: bool=None, user_id: int=None, username: str=None):
        """PermissionEntity - a model defined in OpenAPI

        :param group_id: The group_id of this PermissionEntity.
        :param group_name: The group_name of this PermissionEntity.
        :param id: The id of this PermissionEntity.
        :param path: The path of this PermissionEntity.
        :param permission: The permission of this PermissionEntity.
        :param recursive: The recursive of this PermissionEntity.
        :param user_id: The user_id of this PermissionEntity.
        :param username: The username of this PermissionEntity.
        """
        self.openapi_types = {
            'group_id': int,
            'group_name': str,
            'id': int,
            'path': str,
            'permission': str,
            'recursive': bool,
            'user_id': int,
            'username': str
        }

        self.attribute_map = {
            'group_id': 'group_id',
            'group_name': 'group_name',
            'id': 'id',
            'path': 'path',
            'permission': 'permission',
            'recursive': 'recursive',
            'user_id': 'user_id',
            'username': 'username'
        }

        self._group_id = group_id
        self._group_name = group_name
        self._id = id
        self._path = path
        self._permission = permission
        self._recursive = recursive
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PermissionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PermissionEntity of this PermissionEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this PermissionEntity.

        Group ID

        :return: The group_id of this PermissionEntity.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PermissionEntity.

        Group ID

        :param group_id: The group_id of this PermissionEntity.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this PermissionEntity.

        Group name if applicable

        :return: The group_name of this PermissionEntity.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this PermissionEntity.

        Group name if applicable

        :param group_name: The group_name of this PermissionEntity.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """Gets the id of this PermissionEntity.

        Permission ID

        :return: The id of this PermissionEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PermissionEntity.

        Permission ID

        :param id: The id of this PermissionEntity.
        :type id: int
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this PermissionEntity.

        Folder path

        :return: The path of this PermissionEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this PermissionEntity.

        Folder path

        :param path: The path of this PermissionEntity.
        :type path: str
        """

        self._path = path

    @property
    def permission(self):
        """Gets the permission of this PermissionEntity.

        Permission type

        :return: The permission of this PermissionEntity.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this PermissionEntity.

        Permission type

        :param permission: The permission of this PermissionEntity.
        :type permission: str
        """
        allowed_values = ["full", "readonly", "writeonly", "list", "history", "admin", "bundle"]  # noqa: E501
        if permission not in allowed_values:
            raise ValueError(
                "Invalid value for `permission` ({0}), must be one of {1}"
                .format(permission, allowed_values)
            )

        self._permission = permission

    @property
    def recursive(self):
        """Gets the recursive of this PermissionEntity.

        Does this permission apply to subfolders?

        :return: The recursive of this PermissionEntity.
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this PermissionEntity.

        Does this permission apply to subfolders?

        :param recursive: The recursive of this PermissionEntity.
        :type recursive: bool
        """

        self._recursive = recursive

    @property
    def user_id(self):
        """Gets the user_id of this PermissionEntity.

        User ID

        :return: The user_id of this PermissionEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PermissionEntity.

        User ID

        :param user_id: The user_id of this PermissionEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this PermissionEntity.

        User's username

        :return: The username of this PermissionEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PermissionEntity.

        User's username

        :param username: The username of this PermissionEntity.
        :type username: str
        """

        self._username = username
