# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserCipherUseEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: int=None, interface: str=None, protocol_cipher: str=None, updated_at: datetime=None, user_id: int=None):
        """UserCipherUseEntity - a model defined in OpenAPI

        :param created_at: The created_at of this UserCipherUseEntity.
        :param id: The id of this UserCipherUseEntity.
        :param interface: The interface of this UserCipherUseEntity.
        :param protocol_cipher: The protocol_cipher of this UserCipherUseEntity.
        :param updated_at: The updated_at of this UserCipherUseEntity.
        :param user_id: The user_id of this UserCipherUseEntity.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': int,
            'interface': str,
            'protocol_cipher': str,
            'updated_at': datetime,
            'user_id': int
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'interface': 'interface',
            'protocol_cipher': 'protocol_cipher',
            'updated_at': 'updated_at',
            'user_id': 'user_id'
        }

        self._created_at = created_at
        self._id = id
        self._interface = interface
        self._protocol_cipher = protocol_cipher
        self._updated_at = updated_at
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCipherUseEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCipherUseEntity of this UserCipherUseEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this UserCipherUseEntity.

        The earliest recorded use of this combination of interface and protocol and cipher (for this user)

        :return: The created_at of this UserCipherUseEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserCipherUseEntity.

        The earliest recorded use of this combination of interface and protocol and cipher (for this user)

        :param created_at: The created_at of this UserCipherUseEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this UserCipherUseEntity.

        UserCipherUse ID

        :return: The id of this UserCipherUseEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserCipherUseEntity.

        UserCipherUse ID

        :param id: The id of this UserCipherUseEntity.
        :type id: int
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this UserCipherUseEntity.

        The interface accessed

        :return: The interface of this UserCipherUseEntity.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this UserCipherUseEntity.

        The interface accessed

        :param interface: The interface of this UserCipherUseEntity.
        :type interface: str
        """
        allowed_values = ["web", "ftp", "sftp", "dav", "desktop", "restapi", "robot", "jsapi"]  # noqa: E501
        if interface not in allowed_values:
            raise ValueError(
                "Invalid value for `interface` ({0}), must be one of {1}"
                .format(interface, allowed_values)
            )

        self._interface = interface

    @property
    def protocol_cipher(self):
        """Gets the protocol_cipher of this UserCipherUseEntity.

        The protocol and cipher employed

        :return: The protocol_cipher of this UserCipherUseEntity.
        :rtype: str
        """
        return self._protocol_cipher

    @protocol_cipher.setter
    def protocol_cipher(self, protocol_cipher):
        """Sets the protocol_cipher of this UserCipherUseEntity.

        The protocol and cipher employed

        :param protocol_cipher: The protocol_cipher of this UserCipherUseEntity.
        :type protocol_cipher: str
        """

        self._protocol_cipher = protocol_cipher

    @property
    def updated_at(self):
        """Gets the updated_at of this UserCipherUseEntity.

        The most recent use of this combination of interface and protocol and cipher (for this user)

        :return: The updated_at of this UserCipherUseEntity.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserCipherUseEntity.

        The most recent use of this combination of interface and protocol and cipher (for this user)

        :param updated_at: The updated_at of this UserCipherUseEntity.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this UserCipherUseEntity.

        ID of the user who performed this access

        :return: The user_id of this UserCipherUseEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserCipherUseEntity.

        ID of the user who performed this access

        :param user_id: The user_id of this UserCipherUseEntity.
        :type user_id: int
        """

        self._user_id = user_id
