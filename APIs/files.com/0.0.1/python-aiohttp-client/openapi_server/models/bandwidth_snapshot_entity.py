# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BandwidthSnapshotEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_received: float=None, bytes_sent: float=None, id: int=None, logged_at: datetime=None, requests_get: float=None, requests_other: float=None, requests_put: float=None, sync_bytes_received: float=None, sync_bytes_sent: float=None):
        """BandwidthSnapshotEntity - a model defined in OpenAPI

        :param bytes_received: The bytes_received of this BandwidthSnapshotEntity.
        :param bytes_sent: The bytes_sent of this BandwidthSnapshotEntity.
        :param id: The id of this BandwidthSnapshotEntity.
        :param logged_at: The logged_at of this BandwidthSnapshotEntity.
        :param requests_get: The requests_get of this BandwidthSnapshotEntity.
        :param requests_other: The requests_other of this BandwidthSnapshotEntity.
        :param requests_put: The requests_put of this BandwidthSnapshotEntity.
        :param sync_bytes_received: The sync_bytes_received of this BandwidthSnapshotEntity.
        :param sync_bytes_sent: The sync_bytes_sent of this BandwidthSnapshotEntity.
        """
        self.openapi_types = {
            'bytes_received': float,
            'bytes_sent': float,
            'id': int,
            'logged_at': datetime,
            'requests_get': float,
            'requests_other': float,
            'requests_put': float,
            'sync_bytes_received': float,
            'sync_bytes_sent': float
        }

        self.attribute_map = {
            'bytes_received': 'bytes_received',
            'bytes_sent': 'bytes_sent',
            'id': 'id',
            'logged_at': 'logged_at',
            'requests_get': 'requests_get',
            'requests_other': 'requests_other',
            'requests_put': 'requests_put',
            'sync_bytes_received': 'sync_bytes_received',
            'sync_bytes_sent': 'sync_bytes_sent'
        }

        self._bytes_received = bytes_received
        self._bytes_sent = bytes_sent
        self._id = id
        self._logged_at = logged_at
        self._requests_get = requests_get
        self._requests_other = requests_other
        self._requests_put = requests_put
        self._sync_bytes_received = sync_bytes_received
        self._sync_bytes_sent = sync_bytes_sent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BandwidthSnapshotEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BandwidthSnapshotEntity of this BandwidthSnapshotEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_received(self):
        """Gets the bytes_received of this BandwidthSnapshotEntity.

        Site bandwidth report bytes received

        :return: The bytes_received of this BandwidthSnapshotEntity.
        :rtype: float
        """
        return self._bytes_received

    @bytes_received.setter
    def bytes_received(self, bytes_received):
        """Sets the bytes_received of this BandwidthSnapshotEntity.

        Site bandwidth report bytes received

        :param bytes_received: The bytes_received of this BandwidthSnapshotEntity.
        :type bytes_received: float
        """

        self._bytes_received = bytes_received

    @property
    def bytes_sent(self):
        """Gets the bytes_sent of this BandwidthSnapshotEntity.

        Site bandwidth report bytes sent

        :return: The bytes_sent of this BandwidthSnapshotEntity.
        :rtype: float
        """
        return self._bytes_sent

    @bytes_sent.setter
    def bytes_sent(self, bytes_sent):
        """Sets the bytes_sent of this BandwidthSnapshotEntity.

        Site bandwidth report bytes sent

        :param bytes_sent: The bytes_sent of this BandwidthSnapshotEntity.
        :type bytes_sent: float
        """

        self._bytes_sent = bytes_sent

    @property
    def id(self):
        """Gets the id of this BandwidthSnapshotEntity.

        Site bandwidth ID

        :return: The id of this BandwidthSnapshotEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BandwidthSnapshotEntity.

        Site bandwidth ID

        :param id: The id of this BandwidthSnapshotEntity.
        :type id: int
        """

        self._id = id

    @property
    def logged_at(self):
        """Gets the logged_at of this BandwidthSnapshotEntity.

        Time the site bandwidth report was logged

        :return: The logged_at of this BandwidthSnapshotEntity.
        :rtype: datetime
        """
        return self._logged_at

    @logged_at.setter
    def logged_at(self, logged_at):
        """Sets the logged_at of this BandwidthSnapshotEntity.

        Time the site bandwidth report was logged

        :param logged_at: The logged_at of this BandwidthSnapshotEntity.
        :type logged_at: datetime
        """

        self._logged_at = logged_at

    @property
    def requests_get(self):
        """Gets the requests_get of this BandwidthSnapshotEntity.

        Site bandwidth report get requests

        :return: The requests_get of this BandwidthSnapshotEntity.
        :rtype: float
        """
        return self._requests_get

    @requests_get.setter
    def requests_get(self, requests_get):
        """Sets the requests_get of this BandwidthSnapshotEntity.

        Site bandwidth report get requests

        :param requests_get: The requests_get of this BandwidthSnapshotEntity.
        :type requests_get: float
        """

        self._requests_get = requests_get

    @property
    def requests_other(self):
        """Gets the requests_other of this BandwidthSnapshotEntity.

        Site bandwidth report other requests

        :return: The requests_other of this BandwidthSnapshotEntity.
        :rtype: float
        """
        return self._requests_other

    @requests_other.setter
    def requests_other(self, requests_other):
        """Sets the requests_other of this BandwidthSnapshotEntity.

        Site bandwidth report other requests

        :param requests_other: The requests_other of this BandwidthSnapshotEntity.
        :type requests_other: float
        """

        self._requests_other = requests_other

    @property
    def requests_put(self):
        """Gets the requests_put of this BandwidthSnapshotEntity.

        Site bandwidth report put requests

        :return: The requests_put of this BandwidthSnapshotEntity.
        :rtype: float
        """
        return self._requests_put

    @requests_put.setter
    def requests_put(self, requests_put):
        """Sets the requests_put of this BandwidthSnapshotEntity.

        Site bandwidth report put requests

        :param requests_put: The requests_put of this BandwidthSnapshotEntity.
        :type requests_put: float
        """

        self._requests_put = requests_put

    @property
    def sync_bytes_received(self):
        """Gets the sync_bytes_received of this BandwidthSnapshotEntity.

        Site sync bandwidth report bytes received

        :return: The sync_bytes_received of this BandwidthSnapshotEntity.
        :rtype: float
        """
        return self._sync_bytes_received

    @sync_bytes_received.setter
    def sync_bytes_received(self, sync_bytes_received):
        """Sets the sync_bytes_received of this BandwidthSnapshotEntity.

        Site sync bandwidth report bytes received

        :param sync_bytes_received: The sync_bytes_received of this BandwidthSnapshotEntity.
        :type sync_bytes_received: float
        """

        self._sync_bytes_received = sync_bytes_received

    @property
    def sync_bytes_sent(self):
        """Gets the sync_bytes_sent of this BandwidthSnapshotEntity.

        Site sync bandwidth report bytes sent

        :return: The sync_bytes_sent of this BandwidthSnapshotEntity.
        :rtype: float
        """
        return self._sync_bytes_sent

    @sync_bytes_sent.setter
    def sync_bytes_sent(self, sync_bytes_sent):
        """Sets the sync_bytes_sent of this BandwidthSnapshotEntity.

        Site sync bandwidth report bytes sent

        :param sync_bytes_sent: The sync_bytes_sent of this BandwidthSnapshotEntity.
        :type sync_bytes_sent: float
        """

        self._sync_bytes_sent = sync_bytes_sent
