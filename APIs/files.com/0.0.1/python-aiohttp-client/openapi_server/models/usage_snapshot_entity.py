# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageSnapshotEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_sent: float=None, current_storage: float=None, deleted_files_counted_in_minimum: float=None, deleted_files_storage: float=None, end_at: datetime=None, high_water_storage: float=None, high_water_user_count: float=None, id: int=None, root_storage: float=None, start_at: datetime=None, sync_bytes_received: float=None, sync_bytes_sent: float=None, total_billable_transfer_usage: float=None, total_billable_usage: float=None, usage_by_top_level_dir: object=None):
        """UsageSnapshotEntity - a model defined in OpenAPI

        :param bytes_sent: The bytes_sent of this UsageSnapshotEntity.
        :param current_storage: The current_storage of this UsageSnapshotEntity.
        :param deleted_files_counted_in_minimum: The deleted_files_counted_in_minimum of this UsageSnapshotEntity.
        :param deleted_files_storage: The deleted_files_storage of this UsageSnapshotEntity.
        :param end_at: The end_at of this UsageSnapshotEntity.
        :param high_water_storage: The high_water_storage of this UsageSnapshotEntity.
        :param high_water_user_count: The high_water_user_count of this UsageSnapshotEntity.
        :param id: The id of this UsageSnapshotEntity.
        :param root_storage: The root_storage of this UsageSnapshotEntity.
        :param start_at: The start_at of this UsageSnapshotEntity.
        :param sync_bytes_received: The sync_bytes_received of this UsageSnapshotEntity.
        :param sync_bytes_sent: The sync_bytes_sent of this UsageSnapshotEntity.
        :param total_billable_transfer_usage: The total_billable_transfer_usage of this UsageSnapshotEntity.
        :param total_billable_usage: The total_billable_usage of this UsageSnapshotEntity.
        :param usage_by_top_level_dir: The usage_by_top_level_dir of this UsageSnapshotEntity.
        """
        self.openapi_types = {
            'bytes_sent': float,
            'current_storage': float,
            'deleted_files_counted_in_minimum': float,
            'deleted_files_storage': float,
            'end_at': datetime,
            'high_water_storage': float,
            'high_water_user_count': float,
            'id': int,
            'root_storage': float,
            'start_at': datetime,
            'sync_bytes_received': float,
            'sync_bytes_sent': float,
            'total_billable_transfer_usage': float,
            'total_billable_usage': float,
            'usage_by_top_level_dir': object
        }

        self.attribute_map = {
            'bytes_sent': 'bytes_sent',
            'current_storage': 'current_storage',
            'deleted_files_counted_in_minimum': 'deleted_files_counted_in_minimum',
            'deleted_files_storage': 'deleted_files_storage',
            'end_at': 'end_at',
            'high_water_storage': 'high_water_storage',
            'high_water_user_count': 'high_water_user_count',
            'id': 'id',
            'root_storage': 'root_storage',
            'start_at': 'start_at',
            'sync_bytes_received': 'sync_bytes_received',
            'sync_bytes_sent': 'sync_bytes_sent',
            'total_billable_transfer_usage': 'total_billable_transfer_usage',
            'total_billable_usage': 'total_billable_usage',
            'usage_by_top_level_dir': 'usage_by_top_level_dir'
        }

        self._bytes_sent = bytes_sent
        self._current_storage = current_storage
        self._deleted_files_counted_in_minimum = deleted_files_counted_in_minimum
        self._deleted_files_storage = deleted_files_storage
        self._end_at = end_at
        self._high_water_storage = high_water_storage
        self._high_water_user_count = high_water_user_count
        self._id = id
        self._root_storage = root_storage
        self._start_at = start_at
        self._sync_bytes_received = sync_bytes_received
        self._sync_bytes_sent = sync_bytes_sent
        self._total_billable_transfer_usage = total_billable_transfer_usage
        self._total_billable_usage = total_billable_usage
        self._usage_by_top_level_dir = usage_by_top_level_dir

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageSnapshotEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageSnapshotEntity of this UsageSnapshotEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_sent(self):
        """Gets the bytes_sent of this UsageSnapshotEntity.

        Transfer Usage for period - Outbound GB from Files Native Storage

        :return: The bytes_sent of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._bytes_sent

    @bytes_sent.setter
    def bytes_sent(self, bytes_sent):
        """Sets the bytes_sent of this UsageSnapshotEntity.

        Transfer Usage for period - Outbound GB from Files Native Storage

        :param bytes_sent: The bytes_sent of this UsageSnapshotEntity.
        :type bytes_sent: float
        """

        self._bytes_sent = bytes_sent

    @property
    def current_storage(self):
        """Gets the current_storage of this UsageSnapshotEntity.

        Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)

        :return: The current_storage of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._current_storage

    @current_storage.setter
    def current_storage(self, current_storage):
        """Sets the current_storage of this UsageSnapshotEntity.

        Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)

        :param current_storage: The current_storage of this UsageSnapshotEntity.
        :type current_storage: float
        """

        self._current_storage = current_storage

    @property
    def deleted_files_counted_in_minimum(self):
        """Gets the deleted_files_counted_in_minimum of this UsageSnapshotEntity.

        Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)

        :return: The deleted_files_counted_in_minimum of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._deleted_files_counted_in_minimum

    @deleted_files_counted_in_minimum.setter
    def deleted_files_counted_in_minimum(self, deleted_files_counted_in_minimum):
        """Sets the deleted_files_counted_in_minimum of this UsageSnapshotEntity.

        Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)

        :param deleted_files_counted_in_minimum: The deleted_files_counted_in_minimum of this UsageSnapshotEntity.
        :type deleted_files_counted_in_minimum: float
        """

        self._deleted_files_counted_in_minimum = deleted_files_counted_in_minimum

    @property
    def deleted_files_storage(self):
        """Gets the deleted_files_storage of this UsageSnapshotEntity.

        Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)

        :return: The deleted_files_storage of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._deleted_files_storage

    @deleted_files_storage.setter
    def deleted_files_storage(self, deleted_files_storage):
        """Sets the deleted_files_storage of this UsageSnapshotEntity.

        Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)

        :param deleted_files_storage: The deleted_files_storage of this UsageSnapshotEntity.
        :type deleted_files_storage: float
        """

        self._deleted_files_storage = deleted_files_storage

    @property
    def end_at(self):
        """Gets the end_at of this UsageSnapshotEntity.

        Usage snapshot end date/time

        :return: The end_at of this UsageSnapshotEntity.
        :rtype: datetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this UsageSnapshotEntity.

        Usage snapshot end date/time

        :param end_at: The end_at of this UsageSnapshotEntity.
        :type end_at: datetime
        """

        self._end_at = end_at

    @property
    def high_water_storage(self):
        """Gets the high_water_storage of this UsageSnapshotEntity.

        Highest Storage Usage GB recorded in time period (used for billing)

        :return: The high_water_storage of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._high_water_storage

    @high_water_storage.setter
    def high_water_storage(self, high_water_storage):
        """Sets the high_water_storage of this UsageSnapshotEntity.

        Highest Storage Usage GB recorded in time period (used for billing)

        :param high_water_storage: The high_water_storage of this UsageSnapshotEntity.
        :type high_water_storage: float
        """

        self._high_water_storage = high_water_storage

    @property
    def high_water_user_count(self):
        """Gets the high_water_user_count of this UsageSnapshotEntity.

        Highest user count number in time period

        :return: The high_water_user_count of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._high_water_user_count

    @high_water_user_count.setter
    def high_water_user_count(self, high_water_user_count):
        """Sets the high_water_user_count of this UsageSnapshotEntity.

        Highest user count number in time period

        :param high_water_user_count: The high_water_user_count of this UsageSnapshotEntity.
        :type high_water_user_count: float
        """

        self._high_water_user_count = high_water_user_count

    @property
    def id(self):
        """Gets the id of this UsageSnapshotEntity.

        Usage snapshot ID

        :return: The id of this UsageSnapshotEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsageSnapshotEntity.

        Usage snapshot ID

        :param id: The id of this UsageSnapshotEntity.
        :type id: int
        """

        self._id = id

    @property
    def root_storage(self):
        """Gets the root_storage of this UsageSnapshotEntity.

        Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)

        :return: The root_storage of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._root_storage

    @root_storage.setter
    def root_storage(self, root_storage):
        """Sets the root_storage of this UsageSnapshotEntity.

        Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)

        :param root_storage: The root_storage of this UsageSnapshotEntity.
        :type root_storage: float
        """

        self._root_storage = root_storage

    @property
    def start_at(self):
        """Gets the start_at of this UsageSnapshotEntity.

        Usage snapshot start date/time

        :return: The start_at of this UsageSnapshotEntity.
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this UsageSnapshotEntity.

        Usage snapshot start date/time

        :param start_at: The start_at of this UsageSnapshotEntity.
        :type start_at: datetime
        """

        self._start_at = start_at

    @property
    def sync_bytes_received(self):
        """Gets the sync_bytes_received of this UsageSnapshotEntity.

        Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)

        :return: The sync_bytes_received of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._sync_bytes_received

    @sync_bytes_received.setter
    def sync_bytes_received(self, sync_bytes_received):
        """Sets the sync_bytes_received of this UsageSnapshotEntity.

        Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)

        :param sync_bytes_received: The sync_bytes_received of this UsageSnapshotEntity.
        :type sync_bytes_received: float
        """

        self._sync_bytes_received = sync_bytes_received

    @property
    def sync_bytes_sent(self):
        """Gets the sync_bytes_sent of this UsageSnapshotEntity.

        Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)

        :return: The sync_bytes_sent of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._sync_bytes_sent

    @sync_bytes_sent.setter
    def sync_bytes_sent(self, sync_bytes_sent):
        """Sets the sync_bytes_sent of this UsageSnapshotEntity.

        Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)

        :param sync_bytes_sent: The sync_bytes_sent of this UsageSnapshotEntity.
        :type sync_bytes_sent: float
        """

        self._sync_bytes_sent = sync_bytes_sent

    @property
    def total_billable_transfer_usage(self):
        """Gets the total_billable_transfer_usage of this UsageSnapshotEntity.

        Transfer usage for period - Total Billable amount

        :return: The total_billable_transfer_usage of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._total_billable_transfer_usage

    @total_billable_transfer_usage.setter
    def total_billable_transfer_usage(self, total_billable_transfer_usage):
        """Sets the total_billable_transfer_usage of this UsageSnapshotEntity.

        Transfer usage for period - Total Billable amount

        :param total_billable_transfer_usage: The total_billable_transfer_usage of this UsageSnapshotEntity.
        :type total_billable_transfer_usage: float
        """

        self._total_billable_transfer_usage = total_billable_transfer_usage

    @property
    def total_billable_usage(self):
        """Gets the total_billable_usage of this UsageSnapshotEntity.

        Storage + Transfer Usage - Total Billable amount

        :return: The total_billable_usage of this UsageSnapshotEntity.
        :rtype: float
        """
        return self._total_billable_usage

    @total_billable_usage.setter
    def total_billable_usage(self, total_billable_usage):
        """Sets the total_billable_usage of this UsageSnapshotEntity.

        Storage + Transfer Usage - Total Billable amount

        :param total_billable_usage: The total_billable_usage of this UsageSnapshotEntity.
        :type total_billable_usage: float
        """

        self._total_billable_usage = total_billable_usage

    @property
    def usage_by_top_level_dir(self):
        """Gets the usage_by_top_level_dir of this UsageSnapshotEntity.

        Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)

        :return: The usage_by_top_level_dir of this UsageSnapshotEntity.
        :rtype: object
        """
        return self._usage_by_top_level_dir

    @usage_by_top_level_dir.setter
    def usage_by_top_level_dir(self, usage_by_top_level_dir):
        """Sets the usage_by_top_level_dir of this UsageSnapshotEntity.

        Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)

        :param usage_by_top_level_dir: The usage_by_top_level_dir of this UsageSnapshotEntity.
        :type usage_by_top_level_dir: object
        """

        self._usage_by_top_level_dir = usage_by_top_level_dir
