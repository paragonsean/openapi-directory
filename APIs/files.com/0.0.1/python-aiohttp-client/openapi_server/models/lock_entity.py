# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LockEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_access_by_any_user: bool=None, depth: str=None, exclusive: bool=None, owner: str=None, path: str=None, recursive: bool=None, scope: str=None, timeout: int=None, token: str=None, type: str=None, user_id: int=None, username: str=None):
        """LockEntity - a model defined in OpenAPI

        :param allow_access_by_any_user: The allow_access_by_any_user of this LockEntity.
        :param depth: The depth of this LockEntity.
        :param exclusive: The exclusive of this LockEntity.
        :param owner: The owner of this LockEntity.
        :param path: The path of this LockEntity.
        :param recursive: The recursive of this LockEntity.
        :param scope: The scope of this LockEntity.
        :param timeout: The timeout of this LockEntity.
        :param token: The token of this LockEntity.
        :param type: The type of this LockEntity.
        :param user_id: The user_id of this LockEntity.
        :param username: The username of this LockEntity.
        """
        self.openapi_types = {
            'allow_access_by_any_user': bool,
            'depth': str,
            'exclusive': bool,
            'owner': str,
            'path': str,
            'recursive': bool,
            'scope': str,
            'timeout': int,
            'token': str,
            'type': str,
            'user_id': int,
            'username': str
        }

        self.attribute_map = {
            'allow_access_by_any_user': 'allow_access_by_any_user',
            'depth': 'depth',
            'exclusive': 'exclusive',
            'owner': 'owner',
            'path': 'path',
            'recursive': 'recursive',
            'scope': 'scope',
            'timeout': 'timeout',
            'token': 'token',
            'type': 'type',
            'user_id': 'user_id',
            'username': 'username'
        }

        self._allow_access_by_any_user = allow_access_by_any_user
        self._depth = depth
        self._exclusive = exclusive
        self._owner = owner
        self._path = path
        self._recursive = recursive
        self._scope = scope
        self._timeout = timeout
        self._token = token
        self._type = type
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LockEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LockEntity of this LockEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_access_by_any_user(self):
        """Gets the allow_access_by_any_user of this LockEntity.

        Can lock be modified by users other than its creator?

        :return: The allow_access_by_any_user of this LockEntity.
        :rtype: bool
        """
        return self._allow_access_by_any_user

    @allow_access_by_any_user.setter
    def allow_access_by_any_user(self, allow_access_by_any_user):
        """Sets the allow_access_by_any_user of this LockEntity.

        Can lock be modified by users other than its creator?

        :param allow_access_by_any_user: The allow_access_by_any_user of this LockEntity.
        :type allow_access_by_any_user: bool
        """

        self._allow_access_by_any_user = allow_access_by_any_user

    @property
    def depth(self):
        """Gets the depth of this LockEntity.

        DEPRECATED: Lock depth

        :return: The depth of this LockEntity.
        :rtype: str
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this LockEntity.

        DEPRECATED: Lock depth

        :param depth: The depth of this LockEntity.
        :type depth: str
        """

        self._depth = depth

    @property
    def exclusive(self):
        """Gets the exclusive of this LockEntity.

        Is lock exclusive?

        :return: The exclusive of this LockEntity.
        :rtype: bool
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this LockEntity.

        Is lock exclusive?

        :param exclusive: The exclusive of this LockEntity.
        :type exclusive: bool
        """

        self._exclusive = exclusive

    @property
    def owner(self):
        """Gets the owner of this LockEntity.

        Owner of the lock.  This can be any arbitrary string.

        :return: The owner of this LockEntity.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this LockEntity.

        Owner of the lock.  This can be any arbitrary string.

        :param owner: The owner of this LockEntity.
        :type owner: str
        """

        self._owner = owner

    @property
    def path(self):
        """Gets the path of this LockEntity.

        Path

        :return: The path of this LockEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LockEntity.

        Path

        :param path: The path of this LockEntity.
        :type path: str
        """

        self._path = path

    @property
    def recursive(self):
        """Gets the recursive of this LockEntity.

        Does lock apply to subfolders?

        :return: The recursive of this LockEntity.
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this LockEntity.

        Does lock apply to subfolders?

        :param recursive: The recursive of this LockEntity.
        :type recursive: bool
        """

        self._recursive = recursive

    @property
    def scope(self):
        """Gets the scope of this LockEntity.

        DEPRECATED: Lock scope

        :return: The scope of this LockEntity.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this LockEntity.

        DEPRECATED: Lock scope

        :param scope: The scope of this LockEntity.
        :type scope: str
        """

        self._scope = scope

    @property
    def timeout(self):
        """Gets the timeout of this LockEntity.

        Lock timeout in seconds

        :return: The timeout of this LockEntity.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this LockEntity.

        Lock timeout in seconds

        :param timeout: The timeout of this LockEntity.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def token(self):
        """Gets the token of this LockEntity.

        Lock token.  Use to release lock.

        :return: The token of this LockEntity.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LockEntity.

        Lock token.  Use to release lock.

        :param token: The token of this LockEntity.
        :type token: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this LockEntity.

        DEPRECATED: Lock type

        :return: The type of this LockEntity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LockEntity.

        DEPRECATED: Lock type

        :param type: The type of this LockEntity.
        :type type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this LockEntity.

        Lock creator user ID

        :return: The user_id of this LockEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LockEntity.

        Lock creator user ID

        :param user_id: The user_id of this LockEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this LockEntity.

        Lock creator username

        :return: The username of this LockEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LockEntity.

        Lock creator username

        :param username: The username of this LockEntity.
        :type username: str
        """

        self._username = username
