# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_access: str=None, id: int=None):
        """ProjectEntity - a model defined in OpenAPI

        :param global_access: The global_access of this ProjectEntity.
        :param id: The id of this ProjectEntity.
        """
        self.openapi_types = {
            'global_access': str,
            'id': int
        }

        self.attribute_map = {
            'global_access': 'global_access',
            'id': 'id'
        }

        self._global_access = global_access
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectEntity of this ProjectEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_access(self):
        """Gets the global_access of this ProjectEntity.

        Global access settings

        :return: The global_access of this ProjectEntity.
        :rtype: str
        """
        return self._global_access

    @global_access.setter
    def global_access(self, global_access):
        """Sets the global_access of this ProjectEntity.

        Global access settings

        :param global_access: The global_access of this ProjectEntity.
        :type global_access: str
        """
        allowed_values = ["none", "anyone_with_read", "anyone_with_full"]  # noqa: E501
        if global_access not in allowed_values:
            raise ValueError(
                "Invalid value for `global_access` ({0}), must be one of {1}"
                .format(global_access, allowed_values)
            )

        self._global_access = global_access

    @property
    def id(self):
        """Gets the id of this ProjectEntity.

        Project ID

        :return: The id of this ProjectEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectEntity.

        Project ID

        :param id: The id of this ProjectEntity.
        :type id: int
        """

        self._id = id
