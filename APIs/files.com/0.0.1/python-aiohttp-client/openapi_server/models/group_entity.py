# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_ids: str=None, id: int=None, name: str=None, notes: str=None, user_ids: str=None, usernames: str=None):
        """GroupEntity - a model defined in OpenAPI

        :param admin_ids: The admin_ids of this GroupEntity.
        :param id: The id of this GroupEntity.
        :param name: The name of this GroupEntity.
        :param notes: The notes of this GroupEntity.
        :param user_ids: The user_ids of this GroupEntity.
        :param usernames: The usernames of this GroupEntity.
        """
        self.openapi_types = {
            'admin_ids': str,
            'id': int,
            'name': str,
            'notes': str,
            'user_ids': str,
            'usernames': str
        }

        self.attribute_map = {
            'admin_ids': 'admin_ids',
            'id': 'id',
            'name': 'name',
            'notes': 'notes',
            'user_ids': 'user_ids',
            'usernames': 'usernames'
        }

        self._admin_ids = admin_ids
        self._id = id
        self._name = name
        self._notes = notes
        self._user_ids = user_ids
        self._usernames = usernames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupEntity of this GroupEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_ids(self):
        """Gets the admin_ids of this GroupEntity.

        Comma-delimited list of user IDs who are group administrators (separated by commas)

        :return: The admin_ids of this GroupEntity.
        :rtype: str
        """
        return self._admin_ids

    @admin_ids.setter
    def admin_ids(self, admin_ids):
        """Sets the admin_ids of this GroupEntity.

        Comma-delimited list of user IDs who are group administrators (separated by commas)

        :param admin_ids: The admin_ids of this GroupEntity.
        :type admin_ids: str
        """

        self._admin_ids = admin_ids

    @property
    def id(self):
        """Gets the id of this GroupEntity.

        Group ID

        :return: The id of this GroupEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupEntity.

        Group ID

        :param id: The id of this GroupEntity.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GroupEntity.

        Group name

        :return: The name of this GroupEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupEntity.

        Group name

        :param name: The name of this GroupEntity.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this GroupEntity.

        Notes about this group

        :return: The notes of this GroupEntity.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this GroupEntity.

        Notes about this group

        :param notes: The notes of this GroupEntity.
        :type notes: str
        """

        self._notes = notes

    @property
    def user_ids(self):
        """Gets the user_ids of this GroupEntity.

        Comma-delimited list of user IDs who belong to this group (separated by commas)

        :return: The user_ids of this GroupEntity.
        :rtype: str
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this GroupEntity.

        Comma-delimited list of user IDs who belong to this group (separated by commas)

        :param user_ids: The user_ids of this GroupEntity.
        :type user_ids: str
        """

        self._user_ids = user_ids

    @property
    def usernames(self):
        """Gets the usernames of this GroupEntity.

        Comma-delimited list of usernames who belong to this group (separated by commas)

        :return: The usernames of this GroupEntity.
        :rtype: str
        """
        return self._usernames

    @usernames.setter
    def usernames(self, usernames):
        """Sets the usernames of this GroupEntity.

        Comma-delimited list of usernames who belong to this group (separated by commas)

        :param usernames: The usernames of this GroupEntity.
        :type usernames: str
        """

        self._usernames = usernames
