# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileUploadPartEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, ask_about_overwrites: bool=None, available_parts: int=None, expires: str=None, headers: object=None, http_method: str=None, next_partsize: int=None, parallel_parts: bool=None, parameters: object=None, part_number: int=None, partsize: int=None, path: str=None, ref: str=None, retry_parts: bool=None, send: object=None, upload_uri: str=None):
        """FileUploadPartEntity - a model defined in OpenAPI

        :param action: The action of this FileUploadPartEntity.
        :param ask_about_overwrites: The ask_about_overwrites of this FileUploadPartEntity.
        :param available_parts: The available_parts of this FileUploadPartEntity.
        :param expires: The expires of this FileUploadPartEntity.
        :param headers: The headers of this FileUploadPartEntity.
        :param http_method: The http_method of this FileUploadPartEntity.
        :param next_partsize: The next_partsize of this FileUploadPartEntity.
        :param parallel_parts: The parallel_parts of this FileUploadPartEntity.
        :param parameters: The parameters of this FileUploadPartEntity.
        :param part_number: The part_number of this FileUploadPartEntity.
        :param partsize: The partsize of this FileUploadPartEntity.
        :param path: The path of this FileUploadPartEntity.
        :param ref: The ref of this FileUploadPartEntity.
        :param retry_parts: The retry_parts of this FileUploadPartEntity.
        :param send: The send of this FileUploadPartEntity.
        :param upload_uri: The upload_uri of this FileUploadPartEntity.
        """
        self.openapi_types = {
            'action': str,
            'ask_about_overwrites': bool,
            'available_parts': int,
            'expires': str,
            'headers': object,
            'http_method': str,
            'next_partsize': int,
            'parallel_parts': bool,
            'parameters': object,
            'part_number': int,
            'partsize': int,
            'path': str,
            'ref': str,
            'retry_parts': bool,
            'send': object,
            'upload_uri': str
        }

        self.attribute_map = {
            'action': 'action',
            'ask_about_overwrites': 'ask_about_overwrites',
            'available_parts': 'available_parts',
            'expires': 'expires',
            'headers': 'headers',
            'http_method': 'http_method',
            'next_partsize': 'next_partsize',
            'parallel_parts': 'parallel_parts',
            'parameters': 'parameters',
            'part_number': 'part_number',
            'partsize': 'partsize',
            'path': 'path',
            'ref': 'ref',
            'retry_parts': 'retry_parts',
            'send': 'send',
            'upload_uri': 'upload_uri'
        }

        self._action = action
        self._ask_about_overwrites = ask_about_overwrites
        self._available_parts = available_parts
        self._expires = expires
        self._headers = headers
        self._http_method = http_method
        self._next_partsize = next_partsize
        self._parallel_parts = parallel_parts
        self._parameters = parameters
        self._part_number = part_number
        self._partsize = partsize
        self._path = path
        self._ref = ref
        self._retry_parts = retry_parts
        self._send = send
        self._upload_uri = upload_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileUploadPartEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileUploadPartEntity of this FileUploadPartEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this FileUploadPartEntity.

        Type of upload

        :return: The action of this FileUploadPartEntity.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this FileUploadPartEntity.

        Type of upload

        :param action: The action of this FileUploadPartEntity.
        :type action: str
        """

        self._action = action

    @property
    def ask_about_overwrites(self):
        """Gets the ask_about_overwrites of this FileUploadPartEntity.

        If `true`, this file exists and you may wish to ask the user for overwrite confirmation

        :return: The ask_about_overwrites of this FileUploadPartEntity.
        :rtype: bool
        """
        return self._ask_about_overwrites

    @ask_about_overwrites.setter
    def ask_about_overwrites(self, ask_about_overwrites):
        """Sets the ask_about_overwrites of this FileUploadPartEntity.

        If `true`, this file exists and you may wish to ask the user for overwrite confirmation

        :param ask_about_overwrites: The ask_about_overwrites of this FileUploadPartEntity.
        :type ask_about_overwrites: bool
        """

        self._ask_about_overwrites = ask_about_overwrites

    @property
    def available_parts(self):
        """Gets the available_parts of this FileUploadPartEntity.

        Number of parts in the upload

        :return: The available_parts of this FileUploadPartEntity.
        :rtype: int
        """
        return self._available_parts

    @available_parts.setter
    def available_parts(self, available_parts):
        """Sets the available_parts of this FileUploadPartEntity.

        Number of parts in the upload

        :param available_parts: The available_parts of this FileUploadPartEntity.
        :type available_parts: int
        """

        self._available_parts = available_parts

    @property
    def expires(self):
        """Gets the expires of this FileUploadPartEntity.

        Date/time of when this Upload part expires and the URL cannot be used any more

        :return: The expires of this FileUploadPartEntity.
        :rtype: str
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this FileUploadPartEntity.

        Date/time of when this Upload part expires and the URL cannot be used any more

        :param expires: The expires of this FileUploadPartEntity.
        :type expires: str
        """

        self._expires = expires

    @property
    def headers(self):
        """Gets the headers of this FileUploadPartEntity.

        Additional upload headers to provide as part of the upload

        :return: The headers of this FileUploadPartEntity.
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this FileUploadPartEntity.

        Additional upload headers to provide as part of the upload

        :param headers: The headers of this FileUploadPartEntity.
        :type headers: object
        """

        self._headers = headers

    @property
    def http_method(self):
        """Gets the http_method of this FileUploadPartEntity.

        HTTP Method to use for uploading the part, usually `PUT`

        :return: The http_method of this FileUploadPartEntity.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this FileUploadPartEntity.

        HTTP Method to use for uploading the part, usually `PUT`

        :param http_method: The http_method of this FileUploadPartEntity.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def next_partsize(self):
        """Gets the next_partsize of this FileUploadPartEntity.

        Size in bytes for this part

        :return: The next_partsize of this FileUploadPartEntity.
        :rtype: int
        """
        return self._next_partsize

    @next_partsize.setter
    def next_partsize(self, next_partsize):
        """Sets the next_partsize of this FileUploadPartEntity.

        Size in bytes for this part

        :param next_partsize: The next_partsize of this FileUploadPartEntity.
        :type next_partsize: int
        """

        self._next_partsize = next_partsize

    @property
    def parallel_parts(self):
        """Gets the parallel_parts of this FileUploadPartEntity.

        If `true`, multiple parts may be uploaded in parallel.  If `false`, be sure to only upload one part at a time, in order.

        :return: The parallel_parts of this FileUploadPartEntity.
        :rtype: bool
        """
        return self._parallel_parts

    @parallel_parts.setter
    def parallel_parts(self, parallel_parts):
        """Sets the parallel_parts of this FileUploadPartEntity.

        If `true`, multiple parts may be uploaded in parallel.  If `false`, be sure to only upload one part at a time, in order.

        :param parallel_parts: The parallel_parts of this FileUploadPartEntity.
        :type parallel_parts: bool
        """

        self._parallel_parts = parallel_parts

    @property
    def parameters(self):
        """Gets the parameters of this FileUploadPartEntity.

        Additional HTTP parameters to send with the upload

        :return: The parameters of this FileUploadPartEntity.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this FileUploadPartEntity.

        Additional HTTP parameters to send with the upload

        :param parameters: The parameters of this FileUploadPartEntity.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def part_number(self):
        """Gets the part_number of this FileUploadPartEntity.

        Number of this upload part

        :return: The part_number of this FileUploadPartEntity.
        :rtype: int
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this FileUploadPartEntity.

        Number of this upload part

        :param part_number: The part_number of this FileUploadPartEntity.
        :type part_number: int
        """

        self._part_number = part_number

    @property
    def partsize(self):
        """Gets the partsize of this FileUploadPartEntity.

        Size in bytes for the next upload part

        :return: The partsize of this FileUploadPartEntity.
        :rtype: int
        """
        return self._partsize

    @partsize.setter
    def partsize(self, partsize):
        """Sets the partsize of this FileUploadPartEntity.

        Size in bytes for the next upload part

        :param partsize: The partsize of this FileUploadPartEntity.
        :type partsize: int
        """

        self._partsize = partsize

    @property
    def path(self):
        """Gets the path of this FileUploadPartEntity.

        New file path

        :return: The path of this FileUploadPartEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileUploadPartEntity.

        New file path

        :param path: The path of this FileUploadPartEntity.
        :type path: str
        """

        self._path = path

    @property
    def ref(self):
        """Gets the ref of this FileUploadPartEntity.

        Reference name for this upload part

        :return: The ref of this FileUploadPartEntity.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this FileUploadPartEntity.

        Reference name for this upload part

        :param ref: The ref of this FileUploadPartEntity.
        :type ref: str
        """

        self._ref = ref

    @property
    def retry_parts(self):
        """Gets the retry_parts of this FileUploadPartEntity.

        If `true`, parts may be retried. If `false`, a part cannot be retried and the upload should be restarted.

        :return: The retry_parts of this FileUploadPartEntity.
        :rtype: bool
        """
        return self._retry_parts

    @retry_parts.setter
    def retry_parts(self, retry_parts):
        """Sets the retry_parts of this FileUploadPartEntity.

        If `true`, parts may be retried. If `false`, a part cannot be retried and the upload should be restarted.

        :param retry_parts: The retry_parts of this FileUploadPartEntity.
        :type retry_parts: bool
        """

        self._retry_parts = retry_parts

    @property
    def send(self):
        """Gets the send of this FileUploadPartEntity.

        Content-Type and File to send

        :return: The send of this FileUploadPartEntity.
        :rtype: object
        """
        return self._send

    @send.setter
    def send(self, send):
        """Sets the send of this FileUploadPartEntity.

        Content-Type and File to send

        :param send: The send of this FileUploadPartEntity.
        :type send: object
        """

        self._send = send

    @property
    def upload_uri(self):
        """Gets the upload_uri of this FileUploadPartEntity.

        URI to upload this part to

        :return: The upload_uri of this FileUploadPartEntity.
        :rtype: str
        """
        return self._upload_uri

    @upload_uri.setter
    def upload_uri(self, upload_uri):
        """Sets the upload_uri of this FileUploadPartEntity.

        URI to upload this part to

        :param upload_uri: The upload_uri of this FileUploadPartEntity.
        :type upload_uri: str
        """

        self._upload_uri = upload_uri
