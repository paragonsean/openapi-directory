# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, language: str=None, read_only: bool=None, sftp_insecure_ciphers: bool=None):
        """SessionEntity - a model defined in OpenAPI

        :param id: The id of this SessionEntity.
        :param language: The language of this SessionEntity.
        :param read_only: The read_only of this SessionEntity.
        :param sftp_insecure_ciphers: The sftp_insecure_ciphers of this SessionEntity.
        """
        self.openapi_types = {
            'id': str,
            'language': str,
            'read_only': bool,
            'sftp_insecure_ciphers': bool
        }

        self.attribute_map = {
            'id': 'id',
            'language': 'language',
            'read_only': 'read_only',
            'sftp_insecure_ciphers': 'sftp_insecure_ciphers'
        }

        self._id = id
        self._language = language
        self._read_only = read_only
        self._sftp_insecure_ciphers = sftp_insecure_ciphers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionEntity of this SessionEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SessionEntity.

        Session ID

        :return: The id of this SessionEntity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionEntity.

        Session ID

        :param id: The id of this SessionEntity.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this SessionEntity.

        Session language

        :return: The language of this SessionEntity.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SessionEntity.

        Session language

        :param language: The language of this SessionEntity.
        :type language: str
        """

        self._language = language

    @property
    def read_only(self):
        """Gets the read_only of this SessionEntity.

        Is this session read only?

        :return: The read_only of this SessionEntity.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this SessionEntity.

        Is this session read only?

        :param read_only: The read_only of this SessionEntity.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def sftp_insecure_ciphers(self):
        """Gets the sftp_insecure_ciphers of this SessionEntity.

        Are insecure SFTP ciphers allowed for this user? (If this is set to true, the site administrator has signaled that it is ok to use less secure SSH ciphers for this user.)

        :return: The sftp_insecure_ciphers of this SessionEntity.
        :rtype: bool
        """
        return self._sftp_insecure_ciphers

    @sftp_insecure_ciphers.setter
    def sftp_insecure_ciphers(self, sftp_insecure_ciphers):
        """Sets the sftp_insecure_ciphers of this SessionEntity.

        Are insecure SFTP ciphers allowed for this user? (If this is set to true, the site administrator has signaled that it is ok to use less secure SSH ciphers for this user.)

        :param sftp_insecure_ciphers: The sftp_insecure_ciphers of this SessionEntity.
        :type sftp_insecure_ciphers: bool
        """

        self._sftp_insecure_ciphers = sftp_insecure_ciphers
