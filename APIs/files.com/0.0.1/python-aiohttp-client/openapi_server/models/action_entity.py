# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, destination: str=None, display: str=None, failure_type: str=None, id: int=None, interface: str=None, ip: str=None, path: str=None, source: str=None, targets: List[object]=None, user_id: int=None, username: str=None, when: datetime=None):
        """ActionEntity - a model defined in OpenAPI

        :param action: The action of this ActionEntity.
        :param destination: The destination of this ActionEntity.
        :param display: The display of this ActionEntity.
        :param failure_type: The failure_type of this ActionEntity.
        :param id: The id of this ActionEntity.
        :param interface: The interface of this ActionEntity.
        :param ip: The ip of this ActionEntity.
        :param path: The path of this ActionEntity.
        :param source: The source of this ActionEntity.
        :param targets: The targets of this ActionEntity.
        :param user_id: The user_id of this ActionEntity.
        :param username: The username of this ActionEntity.
        :param when: The when of this ActionEntity.
        """
        self.openapi_types = {
            'action': str,
            'destination': str,
            'display': str,
            'failure_type': str,
            'id': int,
            'interface': str,
            'ip': str,
            'path': str,
            'source': str,
            'targets': List[object],
            'user_id': int,
            'username': str,
            'when': datetime
        }

        self.attribute_map = {
            'action': 'action',
            'destination': 'destination',
            'display': 'display',
            'failure_type': 'failure_type',
            'id': 'id',
            'interface': 'interface',
            'ip': 'ip',
            'path': 'path',
            'source': 'source',
            'targets': 'targets',
            'user_id': 'user_id',
            'username': 'username',
            'when': 'when'
        }

        self._action = action
        self._destination = destination
        self._display = display
        self._failure_type = failure_type
        self._id = id
        self._interface = interface
        self._ip = ip
        self._path = path
        self._source = source
        self._targets = targets
        self._user_id = user_id
        self._username = username
        self._when = when

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionEntity of this ActionEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ActionEntity.

        Type of action

        :return: The action of this ActionEntity.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ActionEntity.

        Type of action

        :param action: The action of this ActionEntity.
        :type action: str
        """
        allowed_values = ["create", "read", "update", "destroy", "move", "login", "failedlogin", "copy", "user_create", "user_update", "user_destroy", "group_create", "group_update", "group_destroy", "permission_create", "permission_destroy", "api_key_create", "api_key_update", "api_key_destroy"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def destination(self):
        """Gets the destination of this ActionEntity.

        The destination path for this action, if applicable

        :return: The destination of this ActionEntity.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ActionEntity.

        The destination path for this action, if applicable

        :param destination: The destination of this ActionEntity.
        :type destination: str
        """

        self._destination = destination

    @property
    def display(self):
        """Gets the display of this ActionEntity.

        Friendly displayed output

        :return: The display of this ActionEntity.
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ActionEntity.

        Friendly displayed output

        :param display: The display of this ActionEntity.
        :type display: str
        """

        self._display = display

    @property
    def failure_type(self):
        """Gets the failure_type of this ActionEntity.

        Failure type.  If action was a user login or session failure, why did it fail?

        :return: The failure_type of this ActionEntity.
        :rtype: str
        """
        return self._failure_type

    @failure_type.setter
    def failure_type(self, failure_type):
        """Sets the failure_type of this ActionEntity.

        Failure type.  If action was a user login or session failure, why did it fail?

        :param failure_type: The failure_type of this ActionEntity.
        :type failure_type: str
        """
        allowed_values = ["expired_trial", "account_overdue", "locked_out", "ip_mismatch", "password_mismatch", "site_mismatch", "username_not_found", "none", "no_ftp_permission", "no_web_permission", "no_directory", "errno_enoent", "no_sftp_permission", "no_dav_permission", "no_restapi_permission", "key_mismatch", "region_mismatch", "expired_access", "desktop_ip_mismatch", "desktop_api_key_not_used_quickly_enough", "disabled", "country_mismatch"]  # noqa: E501
        if failure_type not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_type` ({0}), must be one of {1}"
                .format(failure_type, allowed_values)
            )

        self._failure_type = failure_type

    @property
    def id(self):
        """Gets the id of this ActionEntity.

        Action ID

        :return: The id of this ActionEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionEntity.

        Action ID

        :param id: The id of this ActionEntity.
        :type id: int
        """

        self._id = id

    @property
    def interface(self):
        """Gets the interface of this ActionEntity.

        Interface on which this action occurred.

        :return: The interface of this ActionEntity.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this ActionEntity.

        Interface on which this action occurred.

        :param interface: The interface of this ActionEntity.
        :type interface: str
        """
        allowed_values = ["web", "ftp", "robot", "jsapi", "webdesktopapi", "sftp", "dav", "desktop", "restapi", "scim", "office", "mobile", "as2", "inbound_email", "remote"]  # noqa: E501
        if interface not in allowed_values:
            raise ValueError(
                "Invalid value for `interface` ({0}), must be one of {1}"
                .format(interface, allowed_values)
            )

        self._interface = interface

    @property
    def ip(self):
        """Gets the ip of this ActionEntity.

        IP Address that performed this action

        :return: The ip of this ActionEntity.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ActionEntity.

        IP Address that performed this action

        :param ip: The ip of this ActionEntity.
        :type ip: str
        """

        self._ip = ip

    @property
    def path(self):
        """Gets the path of this ActionEntity.

        Path

        :return: The path of this ActionEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ActionEntity.

        Path

        :param path: The path of this ActionEntity.
        :type path: str
        """

        self._path = path

    @property
    def source(self):
        """Gets the source of this ActionEntity.

        The source path for this action, if applicable

        :return: The source of this ActionEntity.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ActionEntity.

        The source path for this action, if applicable

        :param source: The source of this ActionEntity.
        :type source: str
        """

        self._source = source

    @property
    def targets(self):
        """Gets the targets of this ActionEntity.

        Targets

        :return: The targets of this ActionEntity.
        :rtype: List[object]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this ActionEntity.

        Targets

        :param targets: The targets of this ActionEntity.
        :type targets: List[object]
        """

        self._targets = targets

    @property
    def user_id(self):
        """Gets the user_id of this ActionEntity.

        User ID

        :return: The user_id of this ActionEntity.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActionEntity.

        User ID

        :param user_id: The user_id of this ActionEntity.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this ActionEntity.

        Username

        :return: The username of this ActionEntity.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ActionEntity.

        Username

        :param username: The username of this ActionEntity.
        :type username: str
        """

        self._username = username

    @property
    def when(self):
        """Gets the when of this ActionEntity.

        Action occurrence date/time

        :return: The when of this ActionEntity.
        :rtype: datetime
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this ActionEntity.

        Action occurrence date/time

        :param when: The when of this ActionEntity.
        :type when: datetime
        """

        self._when = when
