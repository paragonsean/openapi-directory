# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_form_field_sets_form_fields_inner import PatchFormFieldSetsFormFieldsInner
from openapi_server import util


class PatchFormFieldSets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_fields: List[PatchFormFieldSetsFormFieldsInner]=None, skip_company: bool=None, skip_email: bool=None, skip_name: bool=None, title: str=None):
        """PatchFormFieldSets - a model defined in OpenAPI

        :param form_fields: The form_fields of this PatchFormFieldSets.
        :param skip_company: The skip_company of this PatchFormFieldSets.
        :param skip_email: The skip_email of this PatchFormFieldSets.
        :param skip_name: The skip_name of this PatchFormFieldSets.
        :param title: The title of this PatchFormFieldSets.
        """
        self.openapi_types = {
            'form_fields': List[PatchFormFieldSetsFormFieldsInner],
            'skip_company': bool,
            'skip_email': bool,
            'skip_name': bool,
            'title': str
        }

        self.attribute_map = {
            'form_fields': 'form_fields',
            'skip_company': 'skip_company',
            'skip_email': 'skip_email',
            'skip_name': 'skip_name',
            'title': 'title'
        }

        self._form_fields = form_fields
        self._skip_company = skip_company
        self._skip_email = skip_email
        self._skip_name = skip_name
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchFormFieldSets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The patchFormFieldSets of this PatchFormFieldSets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_fields(self):
        """Gets the form_fields of this PatchFormFieldSets.


        :return: The form_fields of this PatchFormFieldSets.
        :rtype: List[PatchFormFieldSetsFormFieldsInner]
        """
        return self._form_fields

    @form_fields.setter
    def form_fields(self, form_fields):
        """Sets the form_fields of this PatchFormFieldSets.


        :param form_fields: The form_fields of this PatchFormFieldSets.
        :type form_fields: List[PatchFormFieldSetsFormFieldsInner]
        """

        self._form_fields = form_fields

    @property
    def skip_company(self):
        """Gets the skip_company of this PatchFormFieldSets.

        Skip validating company

        :return: The skip_company of this PatchFormFieldSets.
        :rtype: bool
        """
        return self._skip_company

    @skip_company.setter
    def skip_company(self, skip_company):
        """Sets the skip_company of this PatchFormFieldSets.

        Skip validating company

        :param skip_company: The skip_company of this PatchFormFieldSets.
        :type skip_company: bool
        """

        self._skip_company = skip_company

    @property
    def skip_email(self):
        """Gets the skip_email of this PatchFormFieldSets.

        Skip validating form email

        :return: The skip_email of this PatchFormFieldSets.
        :rtype: bool
        """
        return self._skip_email

    @skip_email.setter
    def skip_email(self, skip_email):
        """Sets the skip_email of this PatchFormFieldSets.

        Skip validating form email

        :param skip_email: The skip_email of this PatchFormFieldSets.
        :type skip_email: bool
        """

        self._skip_email = skip_email

    @property
    def skip_name(self):
        """Gets the skip_name of this PatchFormFieldSets.

        Skip validating form name

        :return: The skip_name of this PatchFormFieldSets.
        :rtype: bool
        """
        return self._skip_name

    @skip_name.setter
    def skip_name(self, skip_name):
        """Sets the skip_name of this PatchFormFieldSets.

        Skip validating form name

        :param skip_name: The skip_name of this PatchFormFieldSets.
        :type skip_name: bool
        """

        self._skip_name = skip_name

    @property
    def title(self):
        """Gets the title of this PatchFormFieldSets.

        Title to be displayed

        :return: The title of this PatchFormFieldSets.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PatchFormFieldSets.

        Title to be displayed

        :param title: The title of this PatchFormFieldSets.
        :type title: str
        """

        self._title = title
