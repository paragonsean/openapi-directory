# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileMigrationEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dest_path: str=None, files_moved: int=None, files_total: int=None, id: int=None, log_url: str=None, operation: str=None, path: str=None, region: str=None, status: str=None):
        """FileMigrationEntity - a model defined in OpenAPI

        :param dest_path: The dest_path of this FileMigrationEntity.
        :param files_moved: The files_moved of this FileMigrationEntity.
        :param files_total: The files_total of this FileMigrationEntity.
        :param id: The id of this FileMigrationEntity.
        :param log_url: The log_url of this FileMigrationEntity.
        :param operation: The operation of this FileMigrationEntity.
        :param path: The path of this FileMigrationEntity.
        :param region: The region of this FileMigrationEntity.
        :param status: The status of this FileMigrationEntity.
        """
        self.openapi_types = {
            'dest_path': str,
            'files_moved': int,
            'files_total': int,
            'id': int,
            'log_url': str,
            'operation': str,
            'path': str,
            'region': str,
            'status': str
        }

        self.attribute_map = {
            'dest_path': 'dest_path',
            'files_moved': 'files_moved',
            'files_total': 'files_total',
            'id': 'id',
            'log_url': 'log_url',
            'operation': 'operation',
            'path': 'path',
            'region': 'region',
            'status': 'status'
        }

        self._dest_path = dest_path
        self._files_moved = files_moved
        self._files_total = files_total
        self._id = id
        self._log_url = log_url
        self._operation = operation
        self._path = path
        self._region = region
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileMigrationEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileMigrationEntity of this FileMigrationEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dest_path(self):
        """Gets the dest_path of this FileMigrationEntity.

        Destination path

        :return: The dest_path of this FileMigrationEntity.
        :rtype: str
        """
        return self._dest_path

    @dest_path.setter
    def dest_path(self, dest_path):
        """Sets the dest_path of this FileMigrationEntity.

        Destination path

        :param dest_path: The dest_path of this FileMigrationEntity.
        :type dest_path: str
        """

        self._dest_path = dest_path

    @property
    def files_moved(self):
        """Gets the files_moved of this FileMigrationEntity.

        Number of files processed

        :return: The files_moved of this FileMigrationEntity.
        :rtype: int
        """
        return self._files_moved

    @files_moved.setter
    def files_moved(self, files_moved):
        """Sets the files_moved of this FileMigrationEntity.

        Number of files processed

        :param files_moved: The files_moved of this FileMigrationEntity.
        :type files_moved: int
        """

        self._files_moved = files_moved

    @property
    def files_total(self):
        """Gets the files_total of this FileMigrationEntity.

        Deprecated: used to return a count of the applicable files.  Currently returns 0 always.  On remote servers, it is not possible to reliably determine the number of affected files for every migration operation.

        :return: The files_total of this FileMigrationEntity.
        :rtype: int
        """
        return self._files_total

    @files_total.setter
    def files_total(self, files_total):
        """Sets the files_total of this FileMigrationEntity.

        Deprecated: used to return a count of the applicable files.  Currently returns 0 always.  On remote servers, it is not possible to reliably determine the number of affected files for every migration operation.

        :param files_total: The files_total of this FileMigrationEntity.
        :type files_total: int
        """

        self._files_total = files_total

    @property
    def id(self):
        """Gets the id of this FileMigrationEntity.

        File migration ID

        :return: The id of this FileMigrationEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileMigrationEntity.

        File migration ID

        :param id: The id of this FileMigrationEntity.
        :type id: int
        """

        self._id = id

    @property
    def log_url(self):
        """Gets the log_url of this FileMigrationEntity.

        Link to download the log file for this migration.

        :return: The log_url of this FileMigrationEntity.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this FileMigrationEntity.

        Link to download the log file for this migration.

        :param log_url: The log_url of this FileMigrationEntity.
        :type log_url: str
        """

        self._log_url = log_url

    @property
    def operation(self):
        """Gets the operation of this FileMigrationEntity.

        The type of operation

        :return: The operation of this FileMigrationEntity.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this FileMigrationEntity.

        The type of operation

        :param operation: The operation of this FileMigrationEntity.
        :type operation: str
        """
        allowed_values = ["delete", "move", "copy", "regional_migration"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def path(self):
        """Gets the path of this FileMigrationEntity.

        Source path

        :return: The path of this FileMigrationEntity.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileMigrationEntity.

        Source path

        :param path: The path of this FileMigrationEntity.
        :type path: str
        """

        self._path = path

    @property
    def region(self):
        """Gets the region of this FileMigrationEntity.

        Region

        :return: The region of this FileMigrationEntity.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this FileMigrationEntity.

        Region

        :param region: The region of this FileMigrationEntity.
        :type region: str
        """

        self._region = region

    @property
    def status(self):
        """Gets the status of this FileMigrationEntity.

        Status

        :return: The status of this FileMigrationEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileMigrationEntity.

        Status

        :param status: The status of this FileMigrationEntity.
        :type status: str
        """
        allowed_values = ["pending", "counting", "processing", "completed", "processing_subfolders", "finishing", "creating_dest_folder", "waiting_for_other_jobs", "waiting_for_all_files", "waiting_for_pending_subfolders", "waiting_for_all_subfolders", "failed", "waiting_for_enqueued_operations", "unused", "processing_recursively", "removing_deferred_folders"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
