# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomationRunEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automation_id: int=None, completed_at: datetime=None, created_at: datetime=None, id: int=None, status: str=None, status_messages_url: str=None):
        """AutomationRunEntity - a model defined in OpenAPI

        :param automation_id: The automation_id of this AutomationRunEntity.
        :param completed_at: The completed_at of this AutomationRunEntity.
        :param created_at: The created_at of this AutomationRunEntity.
        :param id: The id of this AutomationRunEntity.
        :param status: The status of this AutomationRunEntity.
        :param status_messages_url: The status_messages_url of this AutomationRunEntity.
        """
        self.openapi_types = {
            'automation_id': int,
            'completed_at': datetime,
            'created_at': datetime,
            'id': int,
            'status': str,
            'status_messages_url': str
        }

        self.attribute_map = {
            'automation_id': 'automation_id',
            'completed_at': 'completed_at',
            'created_at': 'created_at',
            'id': 'id',
            'status': 'status',
            'status_messages_url': 'status_messages_url'
        }

        self._automation_id = automation_id
        self._completed_at = completed_at
        self._created_at = created_at
        self._id = id
        self._status = status
        self._status_messages_url = status_messages_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationRunEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationRunEntity of this AutomationRunEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automation_id(self):
        """Gets the automation_id of this AutomationRunEntity.

        ID of the associated Automation.

        :return: The automation_id of this AutomationRunEntity.
        :rtype: int
        """
        return self._automation_id

    @automation_id.setter
    def automation_id(self, automation_id):
        """Sets the automation_id of this AutomationRunEntity.

        ID of the associated Automation.

        :param automation_id: The automation_id of this AutomationRunEntity.
        :type automation_id: int
        """

        self._automation_id = automation_id

    @property
    def completed_at(self):
        """Gets the completed_at of this AutomationRunEntity.

        Automation run completion/failure date/time.

        :return: The completed_at of this AutomationRunEntity.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this AutomationRunEntity.

        Automation run completion/failure date/time.

        :param completed_at: The completed_at of this AutomationRunEntity.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this AutomationRunEntity.

        Automation run start date/time.

        :return: The created_at of this AutomationRunEntity.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AutomationRunEntity.

        Automation run start date/time.

        :param created_at: The created_at of this AutomationRunEntity.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this AutomationRunEntity.

        ID.

        :return: The id of this AutomationRunEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutomationRunEntity.

        ID.

        :param id: The id of this AutomationRunEntity.
        :type id: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this AutomationRunEntity.

        The success status of the AutomationRun. One of `running`, `success`, `partial_failure`, or `failure`.

        :return: The status of this AutomationRunEntity.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutomationRunEntity.

        The success status of the AutomationRun. One of `running`, `success`, `partial_failure`, or `failure`.

        :param status: The status of this AutomationRunEntity.
        :type status: str
        """
        allowed_values = ["running", "success", "partial_failure", "failure", "skipped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_messages_url(self):
        """Gets the status_messages_url of this AutomationRunEntity.

        Link to status messages log file.

        :return: The status_messages_url of this AutomationRunEntity.
        :rtype: str
        """
        return self._status_messages_url

    @status_messages_url.setter
    def status_messages_url(self, status_messages_url):
        """Sets the status_messages_url of this AutomationRunEntity.

        Link to status messages log file.

        :param status_messages_url: The status_messages_url of this AutomationRunEntity.
        :type status_messages_url: str
        """

        self._status_messages_url = status_messages_url
