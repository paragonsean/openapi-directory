/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundleEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundleEntity::OAIBundleEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundleEntity::OAIBundleEntity() {
    this->initializeModel();
}

OAIBundleEntity::~OAIBundleEntity() {}

void OAIBundleEntity::initializeModel() {

    m_clickwrap_body_isSet = false;
    m_clickwrap_body_isValid = false;

    m_clickwrap_id_isSet = false;
    m_clickwrap_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dont_separate_submissions_by_folder_isSet = false;
    m_dont_separate_submissions_by_folder_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_form_field_set_isSet = false;
    m_form_field_set_isValid = false;

    m_has_inbox_isSet = false;
    m_has_inbox_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inbox_id_isSet = false;
    m_inbox_id_isValid = false;

    m_max_uses_isSet = false;
    m_max_uses_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_password_protected_isSet = false;
    m_password_protected_isValid = false;

    m_path_template_isSet = false;
    m_path_template_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_preview_only_isSet = false;
    m_preview_only_isValid = false;

    m_require_registration_isSet = false;
    m_require_registration_isValid = false;

    m_require_share_recipient_isSet = false;
    m_require_share_recipient_isValid = false;

    m_send_email_receipt_to_uploader_isSet = false;
    m_send_email_receipt_to_uploader_isValid = false;

    m_skip_company_isSet = false;
    m_skip_company_isValid = false;

    m_skip_email_isSet = false;
    m_skip_email_isValid = false;

    m_skip_name_isSet = false;
    m_skip_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_watermark_attachment_isSet = false;
    m_watermark_attachment_isValid = false;

    m_watermark_value_isSet = false;
    m_watermark_value_isValid = false;
}

void OAIBundleEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundleEntity::fromJsonObject(QJsonObject json) {

    m_clickwrap_body_isValid = ::OpenAPI::fromJsonValue(m_clickwrap_body, json[QString("clickwrap_body")]);
    m_clickwrap_body_isSet = !json[QString("clickwrap_body")].isNull() && m_clickwrap_body_isValid;

    m_clickwrap_id_isValid = ::OpenAPI::fromJsonValue(m_clickwrap_id, json[QString("clickwrap_id")]);
    m_clickwrap_id_isSet = !json[QString("clickwrap_id")].isNull() && m_clickwrap_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dont_separate_submissions_by_folder_isValid = ::OpenAPI::fromJsonValue(m_dont_separate_submissions_by_folder, json[QString("dont_separate_submissions_by_folder")]);
    m_dont_separate_submissions_by_folder_isSet = !json[QString("dont_separate_submissions_by_folder")].isNull() && m_dont_separate_submissions_by_folder_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_form_field_set_isValid = ::OpenAPI::fromJsonValue(m_form_field_set, json[QString("form_field_set")]);
    m_form_field_set_isSet = !json[QString("form_field_set")].isNull() && m_form_field_set_isValid;

    m_has_inbox_isValid = ::OpenAPI::fromJsonValue(m_has_inbox, json[QString("has_inbox")]);
    m_has_inbox_isSet = !json[QString("has_inbox")].isNull() && m_has_inbox_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inbox_id_isValid = ::OpenAPI::fromJsonValue(m_inbox_id, json[QString("inbox_id")]);
    m_inbox_id_isSet = !json[QString("inbox_id")].isNull() && m_inbox_id_isValid;

    m_max_uses_isValid = ::OpenAPI::fromJsonValue(m_max_uses, json[QString("max_uses")]);
    m_max_uses_isSet = !json[QString("max_uses")].isNull() && m_max_uses_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_password_protected_isValid = ::OpenAPI::fromJsonValue(m_password_protected, json[QString("password_protected")]);
    m_password_protected_isSet = !json[QString("password_protected")].isNull() && m_password_protected_isValid;

    m_path_template_isValid = ::OpenAPI::fromJsonValue(m_path_template, json[QString("path_template")]);
    m_path_template_isSet = !json[QString("path_template")].isNull() && m_path_template_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("paths")]);
    m_paths_isSet = !json[QString("paths")].isNull() && m_paths_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_preview_only_isValid = ::OpenAPI::fromJsonValue(m_preview_only, json[QString("preview_only")]);
    m_preview_only_isSet = !json[QString("preview_only")].isNull() && m_preview_only_isValid;

    m_require_registration_isValid = ::OpenAPI::fromJsonValue(m_require_registration, json[QString("require_registration")]);
    m_require_registration_isSet = !json[QString("require_registration")].isNull() && m_require_registration_isValid;

    m_require_share_recipient_isValid = ::OpenAPI::fromJsonValue(m_require_share_recipient, json[QString("require_share_recipient")]);
    m_require_share_recipient_isSet = !json[QString("require_share_recipient")].isNull() && m_require_share_recipient_isValid;

    m_send_email_receipt_to_uploader_isValid = ::OpenAPI::fromJsonValue(m_send_email_receipt_to_uploader, json[QString("send_email_receipt_to_uploader")]);
    m_send_email_receipt_to_uploader_isSet = !json[QString("send_email_receipt_to_uploader")].isNull() && m_send_email_receipt_to_uploader_isValid;

    m_skip_company_isValid = ::OpenAPI::fromJsonValue(m_skip_company, json[QString("skip_company")]);
    m_skip_company_isSet = !json[QString("skip_company")].isNull() && m_skip_company_isValid;

    m_skip_email_isValid = ::OpenAPI::fromJsonValue(m_skip_email, json[QString("skip_email")]);
    m_skip_email_isSet = !json[QString("skip_email")].isNull() && m_skip_email_isValid;

    m_skip_name_isValid = ::OpenAPI::fromJsonValue(m_skip_name, json[QString("skip_name")]);
    m_skip_name_isSet = !json[QString("skip_name")].isNull() && m_skip_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_watermark_attachment_isValid = ::OpenAPI::fromJsonValue(m_watermark_attachment, json[QString("watermark_attachment")]);
    m_watermark_attachment_isSet = !json[QString("watermark_attachment")].isNull() && m_watermark_attachment_isValid;

    m_watermark_value_isValid = ::OpenAPI::fromJsonValue(m_watermark_value, json[QString("watermark_value")]);
    m_watermark_value_isSet = !json[QString("watermark_value")].isNull() && m_watermark_value_isValid;
}

QString OAIBundleEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundleEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_clickwrap_body_isSet) {
        obj.insert(QString("clickwrap_body"), ::OpenAPI::toJsonValue(m_clickwrap_body));
    }
    if (m_clickwrap_id_isSet) {
        obj.insert(QString("clickwrap_id"), ::OpenAPI::toJsonValue(m_clickwrap_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dont_separate_submissions_by_folder_isSet) {
        obj.insert(QString("dont_separate_submissions_by_folder"), ::OpenAPI::toJsonValue(m_dont_separate_submissions_by_folder));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_form_field_set.isSet()) {
        obj.insert(QString("form_field_set"), ::OpenAPI::toJsonValue(m_form_field_set));
    }
    if (m_has_inbox_isSet) {
        obj.insert(QString("has_inbox"), ::OpenAPI::toJsonValue(m_has_inbox));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inbox_id_isSet) {
        obj.insert(QString("inbox_id"), ::OpenAPI::toJsonValue(m_inbox_id));
    }
    if (m_max_uses_isSet) {
        obj.insert(QString("max_uses"), ::OpenAPI::toJsonValue(m_max_uses));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_password_protected_isSet) {
        obj.insert(QString("password_protected"), ::OpenAPI::toJsonValue(m_password_protected));
    }
    if (m_path_template_isSet) {
        obj.insert(QString("path_template"), ::OpenAPI::toJsonValue(m_path_template));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_preview_only_isSet) {
        obj.insert(QString("preview_only"), ::OpenAPI::toJsonValue(m_preview_only));
    }
    if (m_require_registration_isSet) {
        obj.insert(QString("require_registration"), ::OpenAPI::toJsonValue(m_require_registration));
    }
    if (m_require_share_recipient_isSet) {
        obj.insert(QString("require_share_recipient"), ::OpenAPI::toJsonValue(m_require_share_recipient));
    }
    if (m_send_email_receipt_to_uploader_isSet) {
        obj.insert(QString("send_email_receipt_to_uploader"), ::OpenAPI::toJsonValue(m_send_email_receipt_to_uploader));
    }
    if (m_skip_company_isSet) {
        obj.insert(QString("skip_company"), ::OpenAPI::toJsonValue(m_skip_company));
    }
    if (m_skip_email_isSet) {
        obj.insert(QString("skip_email"), ::OpenAPI::toJsonValue(m_skip_email));
    }
    if (m_skip_name_isSet) {
        obj.insert(QString("skip_name"), ::OpenAPI::toJsonValue(m_skip_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_watermark_attachment.isSet()) {
        obj.insert(QString("watermark_attachment"), ::OpenAPI::toJsonValue(m_watermark_attachment));
    }
    if (m_watermark_value_isSet) {
        obj.insert(QString("watermark_value"), ::OpenAPI::toJsonValue(m_watermark_value));
    }
    return obj;
}

QString OAIBundleEntity::getClickwrapBody() const {
    return m_clickwrap_body;
}
void OAIBundleEntity::setClickwrapBody(const QString &clickwrap_body) {
    m_clickwrap_body = clickwrap_body;
    m_clickwrap_body_isSet = true;
}

bool OAIBundleEntity::is_clickwrap_body_Set() const{
    return m_clickwrap_body_isSet;
}

bool OAIBundleEntity::is_clickwrap_body_Valid() const{
    return m_clickwrap_body_isValid;
}

qint32 OAIBundleEntity::getClickwrapId() const {
    return m_clickwrap_id;
}
void OAIBundleEntity::setClickwrapId(const qint32 &clickwrap_id) {
    m_clickwrap_id = clickwrap_id;
    m_clickwrap_id_isSet = true;
}

bool OAIBundleEntity::is_clickwrap_id_Set() const{
    return m_clickwrap_id_isSet;
}

bool OAIBundleEntity::is_clickwrap_id_Valid() const{
    return m_clickwrap_id_isValid;
}

QString OAIBundleEntity::getCode() const {
    return m_code;
}
void OAIBundleEntity::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIBundleEntity::is_code_Set() const{
    return m_code_isSet;
}

bool OAIBundleEntity::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIBundleEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIBundleEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBundleEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBundleEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBundleEntity::getDescription() const {
    return m_description;
}
void OAIBundleEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBundleEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBundleEntity::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIBundleEntity::isDontSeparateSubmissionsByFolder() const {
    return m_dont_separate_submissions_by_folder;
}
void OAIBundleEntity::setDontSeparateSubmissionsByFolder(const bool &dont_separate_submissions_by_folder) {
    m_dont_separate_submissions_by_folder = dont_separate_submissions_by_folder;
    m_dont_separate_submissions_by_folder_isSet = true;
}

bool OAIBundleEntity::is_dont_separate_submissions_by_folder_Set() const{
    return m_dont_separate_submissions_by_folder_isSet;
}

bool OAIBundleEntity::is_dont_separate_submissions_by_folder_Valid() const{
    return m_dont_separate_submissions_by_folder_isValid;
}

QDateTime OAIBundleEntity::getExpiresAt() const {
    return m_expires_at;
}
void OAIBundleEntity::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIBundleEntity::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIBundleEntity::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

OAIFormFieldSetEntity OAIBundleEntity::getFormFieldSet() const {
    return m_form_field_set;
}
void OAIBundleEntity::setFormFieldSet(const OAIFormFieldSetEntity &form_field_set) {
    m_form_field_set = form_field_set;
    m_form_field_set_isSet = true;
}

bool OAIBundleEntity::is_form_field_set_Set() const{
    return m_form_field_set_isSet;
}

bool OAIBundleEntity::is_form_field_set_Valid() const{
    return m_form_field_set_isValid;
}

bool OAIBundleEntity::isHasInbox() const {
    return m_has_inbox;
}
void OAIBundleEntity::setHasInbox(const bool &has_inbox) {
    m_has_inbox = has_inbox;
    m_has_inbox_isSet = true;
}

bool OAIBundleEntity::is_has_inbox_Set() const{
    return m_has_inbox_isSet;
}

bool OAIBundleEntity::is_has_inbox_Valid() const{
    return m_has_inbox_isValid;
}

qint32 OAIBundleEntity::getId() const {
    return m_id;
}
void OAIBundleEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBundleEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBundleEntity::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIBundleEntity::getInboxId() const {
    return m_inbox_id;
}
void OAIBundleEntity::setInboxId(const qint32 &inbox_id) {
    m_inbox_id = inbox_id;
    m_inbox_id_isSet = true;
}

bool OAIBundleEntity::is_inbox_id_Set() const{
    return m_inbox_id_isSet;
}

bool OAIBundleEntity::is_inbox_id_Valid() const{
    return m_inbox_id_isValid;
}

qint32 OAIBundleEntity::getMaxUses() const {
    return m_max_uses;
}
void OAIBundleEntity::setMaxUses(const qint32 &max_uses) {
    m_max_uses = max_uses;
    m_max_uses_isSet = true;
}

bool OAIBundleEntity::is_max_uses_Set() const{
    return m_max_uses_isSet;
}

bool OAIBundleEntity::is_max_uses_Valid() const{
    return m_max_uses_isValid;
}

QString OAIBundleEntity::getNote() const {
    return m_note;
}
void OAIBundleEntity::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIBundleEntity::is_note_Set() const{
    return m_note_isSet;
}

bool OAIBundleEntity::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIBundleEntity::isPasswordProtected() const {
    return m_password_protected;
}
void OAIBundleEntity::setPasswordProtected(const bool &password_protected) {
    m_password_protected = password_protected;
    m_password_protected_isSet = true;
}

bool OAIBundleEntity::is_password_protected_Set() const{
    return m_password_protected_isSet;
}

bool OAIBundleEntity::is_password_protected_Valid() const{
    return m_password_protected_isValid;
}

QString OAIBundleEntity::getPathTemplate() const {
    return m_path_template;
}
void OAIBundleEntity::setPathTemplate(const QString &path_template) {
    m_path_template = path_template;
    m_path_template_isSet = true;
}

bool OAIBundleEntity::is_path_template_Set() const{
    return m_path_template_isSet;
}

bool OAIBundleEntity::is_path_template_Valid() const{
    return m_path_template_isValid;
}

QList<QString> OAIBundleEntity::getPaths() const {
    return m_paths;
}
void OAIBundleEntity::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIBundleEntity::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIBundleEntity::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAIBundleEntity::getPermissions() const {
    return m_permissions;
}
void OAIBundleEntity::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIBundleEntity::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIBundleEntity::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIBundleEntity::isPreviewOnly() const {
    return m_preview_only;
}
void OAIBundleEntity::setPreviewOnly(const bool &preview_only) {
    m_preview_only = preview_only;
    m_preview_only_isSet = true;
}

bool OAIBundleEntity::is_preview_only_Set() const{
    return m_preview_only_isSet;
}

bool OAIBundleEntity::is_preview_only_Valid() const{
    return m_preview_only_isValid;
}

bool OAIBundleEntity::isRequireRegistration() const {
    return m_require_registration;
}
void OAIBundleEntity::setRequireRegistration(const bool &require_registration) {
    m_require_registration = require_registration;
    m_require_registration_isSet = true;
}

bool OAIBundleEntity::is_require_registration_Set() const{
    return m_require_registration_isSet;
}

bool OAIBundleEntity::is_require_registration_Valid() const{
    return m_require_registration_isValid;
}

bool OAIBundleEntity::isRequireShareRecipient() const {
    return m_require_share_recipient;
}
void OAIBundleEntity::setRequireShareRecipient(const bool &require_share_recipient) {
    m_require_share_recipient = require_share_recipient;
    m_require_share_recipient_isSet = true;
}

bool OAIBundleEntity::is_require_share_recipient_Set() const{
    return m_require_share_recipient_isSet;
}

bool OAIBundleEntity::is_require_share_recipient_Valid() const{
    return m_require_share_recipient_isValid;
}

bool OAIBundleEntity::isSendEmailReceiptToUploader() const {
    return m_send_email_receipt_to_uploader;
}
void OAIBundleEntity::setSendEmailReceiptToUploader(const bool &send_email_receipt_to_uploader) {
    m_send_email_receipt_to_uploader = send_email_receipt_to_uploader;
    m_send_email_receipt_to_uploader_isSet = true;
}

bool OAIBundleEntity::is_send_email_receipt_to_uploader_Set() const{
    return m_send_email_receipt_to_uploader_isSet;
}

bool OAIBundleEntity::is_send_email_receipt_to_uploader_Valid() const{
    return m_send_email_receipt_to_uploader_isValid;
}

bool OAIBundleEntity::isSkipCompany() const {
    return m_skip_company;
}
void OAIBundleEntity::setSkipCompany(const bool &skip_company) {
    m_skip_company = skip_company;
    m_skip_company_isSet = true;
}

bool OAIBundleEntity::is_skip_company_Set() const{
    return m_skip_company_isSet;
}

bool OAIBundleEntity::is_skip_company_Valid() const{
    return m_skip_company_isValid;
}

bool OAIBundleEntity::isSkipEmail() const {
    return m_skip_email;
}
void OAIBundleEntity::setSkipEmail(const bool &skip_email) {
    m_skip_email = skip_email;
    m_skip_email_isSet = true;
}

bool OAIBundleEntity::is_skip_email_Set() const{
    return m_skip_email_isSet;
}

bool OAIBundleEntity::is_skip_email_Valid() const{
    return m_skip_email_isValid;
}

bool OAIBundleEntity::isSkipName() const {
    return m_skip_name;
}
void OAIBundleEntity::setSkipName(const bool &skip_name) {
    m_skip_name = skip_name;
    m_skip_name_isSet = true;
}

bool OAIBundleEntity::is_skip_name_Set() const{
    return m_skip_name_isSet;
}

bool OAIBundleEntity::is_skip_name_Valid() const{
    return m_skip_name_isValid;
}

QString OAIBundleEntity::getUrl() const {
    return m_url;
}
void OAIBundleEntity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBundleEntity::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBundleEntity::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIBundleEntity::getUserId() const {
    return m_user_id;
}
void OAIBundleEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIBundleEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIBundleEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIBundleEntity::getUsername() const {
    return m_username;
}
void OAIBundleEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIBundleEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIBundleEntity::is_username_Valid() const{
    return m_username_isValid;
}

OAIImageEntity OAIBundleEntity::getWatermarkAttachment() const {
    return m_watermark_attachment;
}
void OAIBundleEntity::setWatermarkAttachment(const OAIImageEntity &watermark_attachment) {
    m_watermark_attachment = watermark_attachment;
    m_watermark_attachment_isSet = true;
}

bool OAIBundleEntity::is_watermark_attachment_Set() const{
    return m_watermark_attachment_isSet;
}

bool OAIBundleEntity::is_watermark_attachment_Valid() const{
    return m_watermark_attachment_isValid;
}

OAIObject OAIBundleEntity::getWatermarkValue() const {
    return m_watermark_value;
}
void OAIBundleEntity::setWatermarkValue(const OAIObject &watermark_value) {
    m_watermark_value = watermark_value;
    m_watermark_value_isSet = true;
}

bool OAIBundleEntity::is_watermark_value_Set() const{
    return m_watermark_value_isSet;
}

bool OAIBundleEntity::is_watermark_value_Valid() const{
    return m_watermark_value_isValid;
}

bool OAIBundleEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clickwrap_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clickwrap_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dont_separate_submissions_by_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_field_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_inbox_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbox_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_uses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_share_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_email_receipt_to_uploader_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundleEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
