/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBehaviorsApi_H
#define OAI_OAIBehaviorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBehaviorEntity.h"
#include "OAIHttpFileElement.h"
#include "OAIStatusEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBehaviorsApi : public QObject {
    Q_OBJECT

public:
    OAIBehaviorsApi(const int timeOut = 0);
    ~OAIBehaviorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  path QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_prefix OAIObject [optional]
    * @param[in]  recursive QString [optional]
    * @param[in]  behavior QString [optional]
    */
    virtual void behaviorListForPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_prefix = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &recursive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &behavior = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteBehaviorsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  behavior QString [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_prefix OAIObject [optional]
    */
    virtual void getBehaviors(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &behavior = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_prefix = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getBehaviorsId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  attachment_delete bool [optional]
    * @param[in]  attachment_file OAIHttpFileElement [optional]
    * @param[in]  behavior QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  value QString [optional]
    */
    virtual void patchBehaviorsId(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &attachment_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &attachment_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &behavior = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  behavior QString [required]
    * @param[in]  path QString [required]
    * @param[in]  attachment_file OAIHttpFileElement [optional]
    * @param[in]  description QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  value QString [optional]
    */
    virtual void postBehaviors(const QString &behavior, const QString &path, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &attachment_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  body OAIObject [optional]
    * @param[in]  encoding QString [optional]
    * @param[in]  headers OAIObject [optional]
    * @param[in]  method QString [optional]
    */
    virtual void postBehaviorsWebhookTest(const QString &url, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &headers = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void behaviorListForPathCallback(OAIHttpRequestWorker *worker);
    void deleteBehaviorsIdCallback(OAIHttpRequestWorker *worker);
    void getBehaviorsCallback(OAIHttpRequestWorker *worker);
    void getBehaviorsIdCallback(OAIHttpRequestWorker *worker);
    void patchBehaviorsIdCallback(OAIHttpRequestWorker *worker);
    void postBehaviorsCallback(OAIHttpRequestWorker *worker);
    void postBehaviorsWebhookTestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void behaviorListForPathSignal(QList<OAIBehaviorEntity> summary);
    void deleteBehaviorsIdSignal();
    void getBehaviorsSignal(QList<OAIBehaviorEntity> summary);
    void getBehaviorsIdSignal(OAIBehaviorEntity summary);
    void patchBehaviorsIdSignal(OAIBehaviorEntity summary);
    void postBehaviorsSignal(OAIBehaviorEntity summary);
    void postBehaviorsWebhookTestSignal(OAIStatusEntity summary);


    void behaviorListForPathSignalFull(OAIHttpRequestWorker *worker, QList<OAIBehaviorEntity> summary);
    void deleteBehaviorsIdSignalFull(OAIHttpRequestWorker *worker);
    void getBehaviorsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBehaviorEntity> summary);
    void getBehaviorsIdSignalFull(OAIHttpRequestWorker *worker, OAIBehaviorEntity summary);
    void patchBehaviorsIdSignalFull(OAIHttpRequestWorker *worker, OAIBehaviorEntity summary);
    void postBehaviorsSignalFull(OAIHttpRequestWorker *worker, OAIBehaviorEntity summary);
    void postBehaviorsWebhookTestSignalFull(OAIHttpRequestWorker *worker, OAIStatusEntity summary);

    Q_DECL_DEPRECATED_X("Use behaviorListForPathSignalError() instead")
    void behaviorListForPathSignalE(QList<OAIBehaviorEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void behaviorListForPathSignalError(QList<OAIBehaviorEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBehaviorsIdSignalError() instead")
    void deleteBehaviorsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBehaviorsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBehaviorsSignalError() instead")
    void getBehaviorsSignalE(QList<OAIBehaviorEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBehaviorsSignalError(QList<OAIBehaviorEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBehaviorsIdSignalError() instead")
    void getBehaviorsIdSignalE(OAIBehaviorEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBehaviorsIdSignalError(OAIBehaviorEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBehaviorsIdSignalError() instead")
    void patchBehaviorsIdSignalE(OAIBehaviorEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBehaviorsIdSignalError(OAIBehaviorEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBehaviorsSignalError() instead")
    void postBehaviorsSignalE(OAIBehaviorEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBehaviorsSignalError(OAIBehaviorEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBehaviorsWebhookTestSignalError() instead")
    void postBehaviorsWebhookTestSignalE(OAIStatusEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBehaviorsWebhookTestSignalError(OAIStatusEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use behaviorListForPathSignalErrorFull() instead")
    void behaviorListForPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void behaviorListForPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBehaviorsIdSignalErrorFull() instead")
    void deleteBehaviorsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBehaviorsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBehaviorsSignalErrorFull() instead")
    void getBehaviorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBehaviorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBehaviorsIdSignalErrorFull() instead")
    void getBehaviorsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBehaviorsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBehaviorsIdSignalErrorFull() instead")
    void patchBehaviorsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBehaviorsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBehaviorsSignalErrorFull() instead")
    void postBehaviorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBehaviorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBehaviorsWebhookTestSignalErrorFull() instead")
    void postBehaviorsWebhookTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBehaviorsWebhookTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
