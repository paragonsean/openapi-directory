/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomationEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomationEntity::OAIAutomationEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomationEntity::OAIAutomationEntity() {
    this->initializeModel();
}

OAIAutomationEntity::~OAIAutomationEntity() {}

void OAIAutomationEntity::initializeModel() {

    m_automation_isSet = false;
    m_automation_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_replace_from_isSet = false;
    m_destination_replace_from_isValid = false;

    m_destination_replace_to_isSet = false;
    m_destination_replace_to_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_last_modified_at_isSet = false;
    m_last_modified_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_recurring_day_isSet = false;
    m_recurring_day_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_sync_ids_isSet = false;
    m_sync_ids_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_trigger_actions_isSet = false;
    m_trigger_actions_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_ids_isSet = false;
    m_user_ids_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAIAutomationEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomationEntity::fromJsonObject(QJsonObject json) {

    m_automation_isValid = ::OpenAPI::fromJsonValue(m_automation, json[QString("automation")]);
    m_automation_isSet = !json[QString("automation")].isNull() && m_automation_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_replace_from_isValid = ::OpenAPI::fromJsonValue(m_destination_replace_from, json[QString("destination_replace_from")]);
    m_destination_replace_from_isSet = !json[QString("destination_replace_from")].isNull() && m_destination_replace_from_isValid;

    m_destination_replace_to_isValid = ::OpenAPI::fromJsonValue(m_destination_replace_to, json[QString("destination_replace_to")]);
    m_destination_replace_to_isSet = !json[QString("destination_replace_to")].isNull() && m_destination_replace_to_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("group_ids")]);
    m_group_ids_isSet = !json[QString("group_ids")].isNull() && m_group_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_last_modified_at_isValid = ::OpenAPI::fromJsonValue(m_last_modified_at, json[QString("last_modified_at")]);
    m_last_modified_at_isSet = !json[QString("last_modified_at")].isNull() && m_last_modified_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_recurring_day_isValid = ::OpenAPI::fromJsonValue(m_recurring_day, json[QString("recurring_day")]);
    m_recurring_day_isSet = !json[QString("recurring_day")].isNull() && m_recurring_day_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_sync_ids_isValid = ::OpenAPI::fromJsonValue(m_sync_ids, json[QString("sync_ids")]);
    m_sync_ids_isSet = !json[QString("sync_ids")].isNull() && m_sync_ids_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_trigger_actions_isValid = ::OpenAPI::fromJsonValue(m_trigger_actions, json[QString("trigger_actions")]);
    m_trigger_actions_isSet = !json[QString("trigger_actions")].isNull() && m_trigger_actions_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_ids_isValid = ::OpenAPI::fromJsonValue(m_user_ids, json[QString("user_ids")]);
    m_user_ids_isSet = !json[QString("user_ids")].isNull() && m_user_ids_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;
}

QString OAIAutomationEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomationEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_automation_isSet) {
        obj.insert(QString("automation"), ::OpenAPI::toJsonValue(m_automation));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_replace_from_isSet) {
        obj.insert(QString("destination_replace_from"), ::OpenAPI::toJsonValue(m_destination_replace_from));
    }
    if (m_destination_replace_to_isSet) {
        obj.insert(QString("destination_replace_to"), ::OpenAPI::toJsonValue(m_destination_replace_to));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_group_ids.size() > 0) {
        obj.insert(QString("group_ids"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_last_modified_at_isSet) {
        obj.insert(QString("last_modified_at"), ::OpenAPI::toJsonValue(m_last_modified_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_recurring_day_isSet) {
        obj.insert(QString("recurring_day"), ::OpenAPI::toJsonValue(m_recurring_day));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_sync_ids.size() > 0) {
        obj.insert(QString("sync_ids"), ::OpenAPI::toJsonValue(m_sync_ids));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_trigger_actions.size() > 0) {
        obj.insert(QString("trigger_actions"), ::OpenAPI::toJsonValue(m_trigger_actions));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_ids.size() > 0) {
        obj.insert(QString("user_ids"), ::OpenAPI::toJsonValue(m_user_ids));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

QString OAIAutomationEntity::getAutomation() const {
    return m_automation;
}
void OAIAutomationEntity::setAutomation(const QString &automation) {
    m_automation = automation;
    m_automation_isSet = true;
}

bool OAIAutomationEntity::is_automation_Set() const{
    return m_automation_isSet;
}

bool OAIAutomationEntity::is_automation_Valid() const{
    return m_automation_isValid;
}

bool OAIAutomationEntity::isDeleted() const {
    return m_deleted;
}
void OAIAutomationEntity::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIAutomationEntity::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIAutomationEntity::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIAutomationEntity::getDescription() const {
    return m_description;
}
void OAIAutomationEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAutomationEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAutomationEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAutomationEntity::getDestinationReplaceFrom() const {
    return m_destination_replace_from;
}
void OAIAutomationEntity::setDestinationReplaceFrom(const QString &destination_replace_from) {
    m_destination_replace_from = destination_replace_from;
    m_destination_replace_from_isSet = true;
}

bool OAIAutomationEntity::is_destination_replace_from_Set() const{
    return m_destination_replace_from_isSet;
}

bool OAIAutomationEntity::is_destination_replace_from_Valid() const{
    return m_destination_replace_from_isValid;
}

QString OAIAutomationEntity::getDestinationReplaceTo() const {
    return m_destination_replace_to;
}
void OAIAutomationEntity::setDestinationReplaceTo(const QString &destination_replace_to) {
    m_destination_replace_to = destination_replace_to;
    m_destination_replace_to_isSet = true;
}

bool OAIAutomationEntity::is_destination_replace_to_Set() const{
    return m_destination_replace_to_isSet;
}

bool OAIAutomationEntity::is_destination_replace_to_Valid() const{
    return m_destination_replace_to_isValid;
}

QList<QString> OAIAutomationEntity::getDestinations() const {
    return m_destinations;
}
void OAIAutomationEntity::setDestinations(const QList<QString> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIAutomationEntity::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIAutomationEntity::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAIAutomationEntity::isDisabled() const {
    return m_disabled;
}
void OAIAutomationEntity::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIAutomationEntity::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIAutomationEntity::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QList<qint32> OAIAutomationEntity::getGroupIds() const {
    return m_group_ids;
}
void OAIAutomationEntity::setGroupIds(const QList<qint32> &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAIAutomationEntity::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAIAutomationEntity::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

qint32 OAIAutomationEntity::getId() const {
    return m_id;
}
void OAIAutomationEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAutomationEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAutomationEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAutomationEntity::getInterval() const {
    return m_interval;
}
void OAIAutomationEntity::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIAutomationEntity::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIAutomationEntity::is_interval_Valid() const{
    return m_interval_isValid;
}

QDateTime OAIAutomationEntity::getLastModifiedAt() const {
    return m_last_modified_at;
}
void OAIAutomationEntity::setLastModifiedAt(const QDateTime &last_modified_at) {
    m_last_modified_at = last_modified_at;
    m_last_modified_at_isSet = true;
}

bool OAIAutomationEntity::is_last_modified_at_Set() const{
    return m_last_modified_at_isSet;
}

bool OAIAutomationEntity::is_last_modified_at_Valid() const{
    return m_last_modified_at_isValid;
}

QString OAIAutomationEntity::getName() const {
    return m_name;
}
void OAIAutomationEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAutomationEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAutomationEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAutomationEntity::getPath() const {
    return m_path;
}
void OAIAutomationEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAutomationEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAutomationEntity::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIAutomationEntity::getRecurringDay() const {
    return m_recurring_day;
}
void OAIAutomationEntity::setRecurringDay(const qint32 &recurring_day) {
    m_recurring_day = recurring_day;
    m_recurring_day_isSet = true;
}

bool OAIAutomationEntity::is_recurring_day_Set() const{
    return m_recurring_day_isSet;
}

bool OAIAutomationEntity::is_recurring_day_Valid() const{
    return m_recurring_day_isValid;
}

OAIObject OAIAutomationEntity::getSchedule() const {
    return m_schedule;
}
void OAIAutomationEntity::setSchedule(const OAIObject &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIAutomationEntity::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIAutomationEntity::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIAutomationEntity::getSource() const {
    return m_source;
}
void OAIAutomationEntity::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAutomationEntity::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAutomationEntity::is_source_Valid() const{
    return m_source_isValid;
}

QList<qint32> OAIAutomationEntity::getSyncIds() const {
    return m_sync_ids;
}
void OAIAutomationEntity::setSyncIds(const QList<qint32> &sync_ids) {
    m_sync_ids = sync_ids;
    m_sync_ids_isSet = true;
}

bool OAIAutomationEntity::is_sync_ids_Set() const{
    return m_sync_ids_isSet;
}

bool OAIAutomationEntity::is_sync_ids_Valid() const{
    return m_sync_ids_isValid;
}

QString OAIAutomationEntity::getTrigger() const {
    return m_trigger;
}
void OAIAutomationEntity::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIAutomationEntity::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIAutomationEntity::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QList<QString> OAIAutomationEntity::getTriggerActions() const {
    return m_trigger_actions;
}
void OAIAutomationEntity::setTriggerActions(const QList<QString> &trigger_actions) {
    m_trigger_actions = trigger_actions;
    m_trigger_actions_isSet = true;
}

bool OAIAutomationEntity::is_trigger_actions_Set() const{
    return m_trigger_actions_isSet;
}

bool OAIAutomationEntity::is_trigger_actions_Valid() const{
    return m_trigger_actions_isValid;
}

qint32 OAIAutomationEntity::getUserId() const {
    return m_user_id;
}
void OAIAutomationEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAutomationEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAutomationEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QList<qint32> OAIAutomationEntity::getUserIds() const {
    return m_user_ids;
}
void OAIAutomationEntity::setUserIds(const QList<qint32> &user_ids) {
    m_user_ids = user_ids;
    m_user_ids_isSet = true;
}

bool OAIAutomationEntity::is_user_ids_Set() const{
    return m_user_ids_isSet;
}

bool OAIAutomationEntity::is_user_ids_Valid() const{
    return m_user_ids_isValid;
}

OAIObject OAIAutomationEntity::getValue() const {
    return m_value;
}
void OAIAutomationEntity::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAutomationEntity::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAutomationEntity::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIAutomationEntity::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIAutomationEntity::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIAutomationEntity::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIAutomationEntity::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAIAutomationEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_replace_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_replace_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomationEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
