/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKeyEntity.h"
#include "OAIGroupUserEntity.h"
#include "OAIHttpFileElement.h"
#include "OAIPermissionEntity.h"
#include "OAIPublicKeyEntity.h"
#include "OAIUserCipherUseEntity.h"
#include "OAIUserEntity.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteUsersId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_gt OAIObject [optional]
    * @param[in]  filter_gteq OAIObject [optional]
    * @param[in]  filter_prefix OAIObject [optional]
    * @param[in]  filter_lt OAIObject [optional]
    * @param[in]  filter_lteq OAIObject [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  q_username QString [optional]
    * @param[in]  q_email QString [optional]
    * @param[in]  q_notes QString [optional]
    * @param[in]  q_admin QString [optional]
    * @param[in]  q_allowed_ips QString [optional]
    * @param[in]  q_password_validity_days QString [optional]
    * @param[in]  q_ssl_required QString [optional]
    * @param[in]  search QString [optional]
    */
    virtual void getUsers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_prefix = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_admin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_allowed_ips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_password_validity_days = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_ssl_required = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getUsersId(const qint32 &id);

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_gt OAIObject [optional]
    * @param[in]  filter_gteq OAIObject [optional]
    * @param[in]  filter_lt OAIObject [optional]
    * @param[in]  filter_lteq OAIObject [optional]
    */
    virtual void getUsersUserIdApiKeys(const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lteq = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUsersUserIdCipherUses(const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  group_id qint32 [optional]
    */
    virtual void getUsersUserIdGroups(const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_prefix OAIObject [optional]
    * @param[in]  path QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  include_groups bool [optional]
    */
    virtual void getUsersUserIdPermissions(const QString &user_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_prefix = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_groups = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUsersUserIdPublicKeys(const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  allowed_ips QString [optional]
    * @param[in]  announcements_read bool [optional]
    * @param[in]  attachments_permission bool [optional]
    * @param[in]  authenticate_until QDateTime [optional]
    * @param[in]  authentication_method QString [optional]
    * @param[in]  avatar_delete bool [optional]
    * @param[in]  avatar_file OAIHttpFileElement [optional]
    * @param[in]  billing_permission bool [optional]
    * @param[in]  bypass_inactive_disable bool [optional]
    * @param[in]  bypass_site_allowed_ips bool [optional]
    * @param[in]  change_password QString [optional]
    * @param[in]  change_password_confirmation QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  dav_permission bool [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  email QString [optional]
    * @param[in]  ftp_permission bool [optional]
    * @param[in]  grant_permission QString [optional]
    * @param[in]  group_id qint32 [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  header_text QString [optional]
    * @param[in]  imported_password_hash QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  notification_daily_send_time qint32 [optional]
    * @param[in]  office_integration_enabled bool [optional]
    * @param[in]  password QString [optional]
    * @param[in]  password_confirmation QString [optional]
    * @param[in]  password_validity_days qint32 [optional]
    * @param[in]  receive_admin_alerts bool [optional]
    * @param[in]  require_2fa QString [optional]
    * @param[in]  require_password_change bool [optional]
    * @param[in]  restapi_permission bool [optional]
    * @param[in]  self_managed bool [optional]
    * @param[in]  sftp_permission bool [optional]
    * @param[in]  site_admin bool [optional]
    * @param[in]  skip_welcome_screen bool [optional]
    * @param[in]  ssl_required QString [optional]
    * @param[in]  sso_strategy_id qint32 [optional]
    * @param[in]  subscribe_to_newsletter bool [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  user_root QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void patchUsersId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &allowed_ips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &announcements_read = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &attachments_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &authenticate_until = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &authentication_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avatar_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &avatar_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &billing_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_inactive_disable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_site_allowed_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &change_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dav_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &grant_permission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &header_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imported_password_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &notification_daily_send_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &office_integration_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &password_validity_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &receive_admin_alerts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &require_2fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &require_password_change = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &restapi_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &self_managed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &site_admin = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_welcome_screen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ssl_required = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &sso_strategy_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &subscribe_to_newsletter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  allowed_ips QString [optional]
    * @param[in]  announcements_read bool [optional]
    * @param[in]  attachments_permission bool [optional]
    * @param[in]  authenticate_until QDateTime [optional]
    * @param[in]  authentication_method QString [optional]
    * @param[in]  avatar_delete bool [optional]
    * @param[in]  avatar_file OAIHttpFileElement [optional]
    * @param[in]  billing_permission bool [optional]
    * @param[in]  bypass_inactive_disable bool [optional]
    * @param[in]  bypass_site_allowed_ips bool [optional]
    * @param[in]  change_password QString [optional]
    * @param[in]  change_password_confirmation QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  dav_permission bool [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  email QString [optional]
    * @param[in]  ftp_permission bool [optional]
    * @param[in]  grant_permission QString [optional]
    * @param[in]  group_id qint32 [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  header_text QString [optional]
    * @param[in]  imported_password_hash QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  notification_daily_send_time qint32 [optional]
    * @param[in]  office_integration_enabled bool [optional]
    * @param[in]  password QString [optional]
    * @param[in]  password_confirmation QString [optional]
    * @param[in]  password_validity_days qint32 [optional]
    * @param[in]  receive_admin_alerts bool [optional]
    * @param[in]  require_2fa QString [optional]
    * @param[in]  require_password_change bool [optional]
    * @param[in]  restapi_permission bool [optional]
    * @param[in]  self_managed bool [optional]
    * @param[in]  sftp_permission bool [optional]
    * @param[in]  site_admin bool [optional]
    * @param[in]  skip_welcome_screen bool [optional]
    * @param[in]  ssl_required QString [optional]
    * @param[in]  sso_strategy_id qint32 [optional]
    * @param[in]  subscribe_to_newsletter bool [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  user_root QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void postUsers(const ::OpenAPI::OptionalParam<QString> &allowed_ips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &announcements_read = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &attachments_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &authenticate_until = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &authentication_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avatar_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &avatar_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &billing_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_inactive_disable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_site_allowed_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &change_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dav_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &grant_permission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &header_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imported_password_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &notification_daily_send_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &office_integration_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &password_validity_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &receive_admin_alerts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &require_2fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &require_password_change = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &restapi_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &self_managed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &site_admin = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_welcome_screen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ssl_required = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &sso_strategy_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &subscribe_to_newsletter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void postUsersId2faReset(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void postUsersIdResendWelcomeEmail(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void postUsersIdUnlock(const qint32 &id);

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  description QString [optional]
    * @param[in]  expires_at QDateTime [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  permission_set QString [optional]
    */
    virtual void postUsersUserIdApiKeys(const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &expires_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_set = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  public_key QString [required]
    * @param[in]  title QString [required]
    */
    virtual void postUsersUserIdPublicKeys(const qint32 &user_id, const QString &public_key, const QString &title);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUsersIdCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void getUsersIdCallback(OAIHttpRequestWorker *worker);
    void getUsersUserIdApiKeysCallback(OAIHttpRequestWorker *worker);
    void getUsersUserIdCipherUsesCallback(OAIHttpRequestWorker *worker);
    void getUsersUserIdGroupsCallback(OAIHttpRequestWorker *worker);
    void getUsersUserIdPermissionsCallback(OAIHttpRequestWorker *worker);
    void getUsersUserIdPublicKeysCallback(OAIHttpRequestWorker *worker);
    void patchUsersIdCallback(OAIHttpRequestWorker *worker);
    void postUsersCallback(OAIHttpRequestWorker *worker);
    void postUsersId2faResetCallback(OAIHttpRequestWorker *worker);
    void postUsersIdResendWelcomeEmailCallback(OAIHttpRequestWorker *worker);
    void postUsersIdUnlockCallback(OAIHttpRequestWorker *worker);
    void postUsersUserIdApiKeysCallback(OAIHttpRequestWorker *worker);
    void postUsersUserIdPublicKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUsersIdSignal();
    void getUsersSignal(QList<OAIUserEntity> summary);
    void getUsersIdSignal(OAIUserEntity summary);
    void getUsersUserIdApiKeysSignal(QList<OAIApiKeyEntity> summary);
    void getUsersUserIdCipherUsesSignal(QList<OAIUserCipherUseEntity> summary);
    void getUsersUserIdGroupsSignal(QList<OAIGroupUserEntity> summary);
    void getUsersUserIdPermissionsSignal(QList<OAIPermissionEntity> summary);
    void getUsersUserIdPublicKeysSignal(QList<OAIPublicKeyEntity> summary);
    void patchUsersIdSignal(OAIUserEntity summary);
    void postUsersSignal(OAIUserEntity summary);
    void postUsersId2faResetSignal();
    void postUsersIdResendWelcomeEmailSignal();
    void postUsersIdUnlockSignal();
    void postUsersUserIdApiKeysSignal(OAIApiKeyEntity summary);
    void postUsersUserIdPublicKeysSignal(OAIPublicKeyEntity summary);


    void deleteUsersIdSignalFull(OAIHttpRequestWorker *worker);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserEntity> summary);
    void getUsersIdSignalFull(OAIHttpRequestWorker *worker, OAIUserEntity summary);
    void getUsersUserIdApiKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKeyEntity> summary);
    void getUsersUserIdCipherUsesSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserCipherUseEntity> summary);
    void getUsersUserIdGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupUserEntity> summary);
    void getUsersUserIdPermissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPermissionEntity> summary);
    void getUsersUserIdPublicKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublicKeyEntity> summary);
    void patchUsersIdSignalFull(OAIHttpRequestWorker *worker, OAIUserEntity summary);
    void postUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserEntity summary);
    void postUsersId2faResetSignalFull(OAIHttpRequestWorker *worker);
    void postUsersIdResendWelcomeEmailSignalFull(OAIHttpRequestWorker *worker);
    void postUsersIdUnlockSignalFull(OAIHttpRequestWorker *worker);
    void postUsersUserIdApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyEntity summary);
    void postUsersUserIdPublicKeysSignalFull(OAIHttpRequestWorker *worker, OAIPublicKeyEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteUsersIdSignalError() instead")
    void deleteUsersIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(QList<OAIUserEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(QList<OAIUserEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdSignalError() instead")
    void getUsersIdSignalE(OAIUserEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdSignalError(OAIUserEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdApiKeysSignalError() instead")
    void getUsersUserIdApiKeysSignalE(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdApiKeysSignalError(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdCipherUsesSignalError() instead")
    void getUsersUserIdCipherUsesSignalE(QList<OAIUserCipherUseEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdCipherUsesSignalError(QList<OAIUserCipherUseEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdGroupsSignalError() instead")
    void getUsersUserIdGroupsSignalE(QList<OAIGroupUserEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdGroupsSignalError(QList<OAIGroupUserEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdPermissionsSignalError() instead")
    void getUsersUserIdPermissionsSignalE(QList<OAIPermissionEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdPermissionsSignalError(QList<OAIPermissionEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdPublicKeysSignalError() instead")
    void getUsersUserIdPublicKeysSignalE(QList<OAIPublicKeyEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdPublicKeysSignalError(QList<OAIPublicKeyEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUsersIdSignalError() instead")
    void patchUsersIdSignalE(OAIUserEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUsersIdSignalError(OAIUserEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersSignalError() instead")
    void postUsersSignalE(OAIUserEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersSignalError(OAIUserEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersId2faResetSignalError() instead")
    void postUsersId2faResetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersId2faResetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIdResendWelcomeEmailSignalError() instead")
    void postUsersIdResendWelcomeEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIdResendWelcomeEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIdUnlockSignalError() instead")
    void postUsersIdUnlockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIdUnlockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersUserIdApiKeysSignalError() instead")
    void postUsersUserIdApiKeysSignalE(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersUserIdApiKeysSignalError(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersUserIdPublicKeysSignalError() instead")
    void postUsersUserIdPublicKeysSignalE(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersUserIdPublicKeysSignalError(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUsersIdSignalErrorFull() instead")
    void deleteUsersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersIdSignalErrorFull() instead")
    void getUsersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdApiKeysSignalErrorFull() instead")
    void getUsersUserIdApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdCipherUsesSignalErrorFull() instead")
    void getUsersUserIdCipherUsesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdCipherUsesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdGroupsSignalErrorFull() instead")
    void getUsersUserIdGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdPermissionsSignalErrorFull() instead")
    void getUsersUserIdPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersUserIdPublicKeysSignalErrorFull() instead")
    void getUsersUserIdPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersUserIdPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUsersIdSignalErrorFull() instead")
    void patchUsersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUsersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersSignalErrorFull() instead")
    void postUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersId2faResetSignalErrorFull() instead")
    void postUsersId2faResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersId2faResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIdResendWelcomeEmailSignalErrorFull() instead")
    void postUsersIdResendWelcomeEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIdResendWelcomeEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersIdUnlockSignalErrorFull() instead")
    void postUsersIdUnlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersIdUnlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersUserIdApiKeysSignalErrorFull() instead")
    void postUsersUserIdApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersUserIdApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUsersUserIdPublicKeysSignalErrorFull() instead")
    void postUsersUserIdPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUsersUserIdPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
