/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookTestEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookTestEntity::OAIWebhookTestEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookTestEntity::OAIWebhookTestEntity() {
    this->initializeModel();
}

OAIWebhookTestEntity::~OAIWebhookTestEntity() {}

void OAIWebhookTestEntity::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIWebhookTestEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookTestEntity::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIWebhookTestEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookTestEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

qint32 OAIWebhookTestEntity::getCode() const {
    return m_code;
}
void OAIWebhookTestEntity::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIWebhookTestEntity::is_code_Set() const{
    return m_code_isSet;
}

bool OAIWebhookTestEntity::is_code_Valid() const{
    return m_code_isValid;
}

OAIAutoEntity OAIWebhookTestEntity::getData() const {
    return m_data;
}
void OAIWebhookTestEntity::setData(const OAIAutoEntity &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIWebhookTestEntity::is_data_Set() const{
    return m_data_isSet;
}

bool OAIWebhookTestEntity::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIWebhookTestEntity::getMessage() const {
    return m_message;
}
void OAIWebhookTestEntity::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWebhookTestEntity::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWebhookTestEntity::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIWebhookTestEntity::getStatus() const {
    return m_status;
}
void OAIWebhookTestEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWebhookTestEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWebhookTestEntity::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIWebhookTestEntity::isSuccess() const {
    return m_success;
}
void OAIWebhookTestEntity::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIWebhookTestEntity::is_success_Set() const{
    return m_success_isSet;
}

bool OAIWebhookTestEntity::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIWebhookTestEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookTestEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
