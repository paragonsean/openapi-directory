/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupUserEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupUserEntity::OAIGroupUserEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupUserEntity::OAIGroupUserEntity() {
    this->initializeModel();
}

OAIGroupUserEntity::~OAIGroupUserEntity() {}

void OAIGroupUserEntity::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_usernames_isSet = false;
    m_usernames_isValid = false;
}

void OAIGroupUserEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupUserEntity::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("group_name")]);
    m_group_name_isSet = !json[QString("group_name")].isNull() && m_group_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_usernames_isValid = ::OpenAPI::fromJsonValue(m_usernames, json[QString("usernames")]);
    m_usernames_isSet = !json[QString("usernames")].isNull() && m_usernames_isValid;
}

QString OAIGroupUserEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupUserEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_isSet) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("group_name"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_usernames.size() > 0) {
        obj.insert(QString("usernames"), ::OpenAPI::toJsonValue(m_usernames));
    }
    return obj;
}

bool OAIGroupUserEntity::isAdmin() const {
    return m_admin;
}
void OAIGroupUserEntity::setAdmin(const bool &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIGroupUserEntity::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIGroupUserEntity::is_admin_Valid() const{
    return m_admin_isValid;
}

qint32 OAIGroupUserEntity::getGroupId() const {
    return m_group_id;
}
void OAIGroupUserEntity::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIGroupUserEntity::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIGroupUserEntity::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIGroupUserEntity::getGroupName() const {
    return m_group_name;
}
void OAIGroupUserEntity::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGroupUserEntity::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGroupUserEntity::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint32 OAIGroupUserEntity::getUserId() const {
    return m_user_id;
}
void OAIGroupUserEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGroupUserEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGroupUserEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QList<QString> OAIGroupUserEntity::getUsernames() const {
    return m_usernames;
}
void OAIGroupUserEntity::setUsernames(const QList<QString> &usernames) {
    m_usernames = usernames;
    m_usernames_isSet = true;
}

bool OAIGroupUserEntity::is_usernames_Set() const{
    return m_usernames_isSet;
}

bool OAIGroupUserEntity::is_usernames_Valid() const{
    return m_usernames_isValid;
}

bool OAIGroupUserEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usernames.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupUserEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
