/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryExportsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIHistoryExportsApi::OAIHistoryExportsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIHistoryExportsApi::~OAIHistoryExportsApi() {
}

void OAIHistoryExportsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("//app.files.com/api/rest/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getHistoryExportsId", defaultConf);
    _serverIndices.insert("getHistoryExportsId", 0);
    _serverConfigs.insert("postHistoryExports", defaultConf);
    _serverIndices.insert("postHistoryExports", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIHistoryExportsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIHistoryExportsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIHistoryExportsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIHistoryExportsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIHistoryExportsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIHistoryExportsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIHistoryExportsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIHistoryExportsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIHistoryExportsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIHistoryExportsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHistoryExportsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHistoryExportsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIHistoryExportsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIHistoryExportsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIHistoryExportsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIHistoryExportsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIHistoryExportsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIHistoryExportsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIHistoryExportsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIHistoryExportsApi::getHistoryExportsId(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["getHistoryExportsId"][_serverIndices.value("getHistoryExportsId")].URL()+"/history_exports/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHistoryExportsApi::getHistoryExportsIdCallback);
    connect(this, &OAIHistoryExportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHistoryExportsApi::getHistoryExportsIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHistoryExportEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHistoryExportsIdSignal(output);
        Q_EMIT getHistoryExportsIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHistoryExportsIdSignalE(output, error_type, error_str);
        Q_EMIT getHistoryExportsIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHistoryExportsIdSignalError(output, error_type, error_str);
        Q_EMIT getHistoryExportsIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHistoryExportsApi::postHistoryExports(const ::OpenAPI::OptionalParam<QDateTime> &end_at, const ::OpenAPI::OptionalParam<QString> &query_action, const ::OpenAPI::OptionalParam<QString> &query_destination, const ::OpenAPI::OptionalParam<QString> &query_failure_type, const ::OpenAPI::OptionalParam<QString> &query_file_id, const ::OpenAPI::OptionalParam<QString> &query_folder, const ::OpenAPI::OptionalParam<QString> &query_interface, const ::OpenAPI::OptionalParam<QString> &query_ip, const ::OpenAPI::OptionalParam<QString> &query_parent_id, const ::OpenAPI::OptionalParam<QString> &query_path, const ::OpenAPI::OptionalParam<QString> &query_src, const ::OpenAPI::OptionalParam<QString> &query_target_id, const ::OpenAPI::OptionalParam<QString> &query_target_name, const ::OpenAPI::OptionalParam<QString> &query_target_permission, const ::OpenAPI::OptionalParam<QString> &query_target_permission_set, const ::OpenAPI::OptionalParam<QString> &query_target_platform, const ::OpenAPI::OptionalParam<QString> &query_target_user_id, const ::OpenAPI::OptionalParam<QString> &query_target_username, const ::OpenAPI::OptionalParam<QString> &query_user_id, const ::OpenAPI::OptionalParam<QString> &query_username, const ::OpenAPI::OptionalParam<QDateTime> &start_at, const ::OpenAPI::OptionalParam<qint32> &user_id) {
    QString fullPath = QString(_serverConfigs["postHistoryExports"][_serverIndices.value("postHistoryExports")].URL()+"/history_exports");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (end_at.hasValue())
    {
        input.add_var("end_at", ::OpenAPI::toStringValue(end_at.value()));
    }
    if (query_action.hasValue())
    {
        input.add_var("query_action", ::OpenAPI::toStringValue(query_action.value()));
    }
    if (query_destination.hasValue())
    {
        input.add_var("query_destination", ::OpenAPI::toStringValue(query_destination.value()));
    }
    if (query_failure_type.hasValue())
    {
        input.add_var("query_failure_type", ::OpenAPI::toStringValue(query_failure_type.value()));
    }
    if (query_file_id.hasValue())
    {
        input.add_var("query_file_id", ::OpenAPI::toStringValue(query_file_id.value()));
    }
    if (query_folder.hasValue())
    {
        input.add_var("query_folder", ::OpenAPI::toStringValue(query_folder.value()));
    }
    if (query_interface.hasValue())
    {
        input.add_var("query_interface", ::OpenAPI::toStringValue(query_interface.value()));
    }
    if (query_ip.hasValue())
    {
        input.add_var("query_ip", ::OpenAPI::toStringValue(query_ip.value()));
    }
    if (query_parent_id.hasValue())
    {
        input.add_var("query_parent_id", ::OpenAPI::toStringValue(query_parent_id.value()));
    }
    if (query_path.hasValue())
    {
        input.add_var("query_path", ::OpenAPI::toStringValue(query_path.value()));
    }
    if (query_src.hasValue())
    {
        input.add_var("query_src", ::OpenAPI::toStringValue(query_src.value()));
    }
    if (query_target_id.hasValue())
    {
        input.add_var("query_target_id", ::OpenAPI::toStringValue(query_target_id.value()));
    }
    if (query_target_name.hasValue())
    {
        input.add_var("query_target_name", ::OpenAPI::toStringValue(query_target_name.value()));
    }
    if (query_target_permission.hasValue())
    {
        input.add_var("query_target_permission", ::OpenAPI::toStringValue(query_target_permission.value()));
    }
    if (query_target_permission_set.hasValue())
    {
        input.add_var("query_target_permission_set", ::OpenAPI::toStringValue(query_target_permission_set.value()));
    }
    if (query_target_platform.hasValue())
    {
        input.add_var("query_target_platform", ::OpenAPI::toStringValue(query_target_platform.value()));
    }
    if (query_target_user_id.hasValue())
    {
        input.add_var("query_target_user_id", ::OpenAPI::toStringValue(query_target_user_id.value()));
    }
    if (query_target_username.hasValue())
    {
        input.add_var("query_target_username", ::OpenAPI::toStringValue(query_target_username.value()));
    }
    if (query_user_id.hasValue())
    {
        input.add_var("query_user_id", ::OpenAPI::toStringValue(query_user_id.value()));
    }
    if (query_username.hasValue())
    {
        input.add_var("query_username", ::OpenAPI::toStringValue(query_username.value()));
    }
    if (start_at.hasValue())
    {
        input.add_var("start_at", ::OpenAPI::toStringValue(start_at.value()));
    }
    if (user_id.hasValue())
    {
        input.add_var("user_id", ::OpenAPI::toStringValue(user_id.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHistoryExportsApi::postHistoryExportsCallback);
    connect(this, &OAIHistoryExportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHistoryExportsApi::postHistoryExportsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHistoryExportEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postHistoryExportsSignal(output);
        Q_EMIT postHistoryExportsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postHistoryExportsSignalE(output, error_type, error_str);
        Q_EMIT postHistoryExportsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postHistoryExportsSignalError(output, error_type, error_str);
        Q_EMIT postHistoryExportsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHistoryExportsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
