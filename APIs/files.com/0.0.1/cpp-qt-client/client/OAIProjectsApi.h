/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProjectEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteProjectsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getProjects(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getProjectsId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  global_access QString [required]
    */
    virtual void patchProjectsId(const qint32 &id, const QString &global_access);

    /**
    * @param[in]  global_access QString [required]
    */
    virtual void postProjects(const QString &global_access);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteProjectsIdCallback(OAIHttpRequestWorker *worker);
    void getProjectsCallback(OAIHttpRequestWorker *worker);
    void getProjectsIdCallback(OAIHttpRequestWorker *worker);
    void patchProjectsIdCallback(OAIHttpRequestWorker *worker);
    void postProjectsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteProjectsIdSignal();
    void getProjectsSignal(QList<OAIProjectEntity> summary);
    void getProjectsIdSignal(OAIProjectEntity summary);
    void patchProjectsIdSignal(OAIProjectEntity summary);
    void postProjectsSignal(OAIProjectEntity summary);


    void deleteProjectsIdSignalFull(OAIHttpRequestWorker *worker);
    void getProjectsSignalFull(OAIHttpRequestWorker *worker, QList<OAIProjectEntity> summary);
    void getProjectsIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectEntity summary);
    void patchProjectsIdSignalFull(OAIHttpRequestWorker *worker, OAIProjectEntity summary);
    void postProjectsSignalFull(OAIHttpRequestWorker *worker, OAIProjectEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteProjectsIdSignalError() instead")
    void deleteProjectsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalError() instead")
    void getProjectsSignalE(QList<OAIProjectEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalError(QList<OAIProjectEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsIdSignalError() instead")
    void getProjectsIdSignalE(OAIProjectEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsIdSignalError(OAIProjectEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProjectsIdSignalError() instead")
    void patchProjectsIdSignalE(OAIProjectEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProjectsIdSignalError(OAIProjectEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProjectsSignalError() instead")
    void postProjectsSignalE(OAIProjectEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postProjectsSignalError(OAIProjectEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteProjectsIdSignalErrorFull() instead")
    void deleteProjectsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsSignalErrorFull() instead")
    void getProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectsIdSignalErrorFull() instead")
    void getProjectsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProjectsIdSignalErrorFull() instead")
    void patchProjectsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProjectsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProjectsSignalErrorFull() instead")
    void postProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
