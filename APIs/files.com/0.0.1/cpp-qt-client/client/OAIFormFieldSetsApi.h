/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFormFieldSetsApi_H
#define OAI_OAIFormFieldSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFormFieldSetEntity.h"
#include "OAIPatchFormFieldSets.h"
#include "OAIPostFormFieldSets.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFormFieldSetsApi : public QObject {
    Q_OBJECT

public:
    OAIFormFieldSetsApi(const int timeOut = 0);
    ~OAIFormFieldSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteFormFieldSetsId(const qint32 &id);

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getFormFieldSets(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getFormFieldSetsId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  oai_patch_form_field_sets OAIPatchFormFieldSets [required]
    */
    virtual void patchFormFieldSetsId(const qint32 &id, const OAIPatchFormFieldSets &oai_patch_form_field_sets);

    /**
    * @param[in]  oai_post_form_field_sets OAIPostFormFieldSets [required]
    */
    virtual void postFormFieldSets(const OAIPostFormFieldSets &oai_post_form_field_sets);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteFormFieldSetsIdCallback(OAIHttpRequestWorker *worker);
    void getFormFieldSetsCallback(OAIHttpRequestWorker *worker);
    void getFormFieldSetsIdCallback(OAIHttpRequestWorker *worker);
    void patchFormFieldSetsIdCallback(OAIHttpRequestWorker *worker);
    void postFormFieldSetsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteFormFieldSetsIdSignal();
    void getFormFieldSetsSignal(QList<OAIFormFieldSetEntity> summary);
    void getFormFieldSetsIdSignal(OAIFormFieldSetEntity summary);
    void patchFormFieldSetsIdSignal(OAIFormFieldSetEntity summary);
    void postFormFieldSetsSignal(OAIFormFieldSetEntity summary);


    void deleteFormFieldSetsIdSignalFull(OAIHttpRequestWorker *worker);
    void getFormFieldSetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFormFieldSetEntity> summary);
    void getFormFieldSetsIdSignalFull(OAIHttpRequestWorker *worker, OAIFormFieldSetEntity summary);
    void patchFormFieldSetsIdSignalFull(OAIHttpRequestWorker *worker, OAIFormFieldSetEntity summary);
    void postFormFieldSetsSignalFull(OAIHttpRequestWorker *worker, OAIFormFieldSetEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteFormFieldSetsIdSignalError() instead")
    void deleteFormFieldSetsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFormFieldSetsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFormFieldSetsSignalError() instead")
    void getFormFieldSetsSignalE(QList<OAIFormFieldSetEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFormFieldSetsSignalError(QList<OAIFormFieldSetEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFormFieldSetsIdSignalError() instead")
    void getFormFieldSetsIdSignalE(OAIFormFieldSetEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFormFieldSetsIdSignalError(OAIFormFieldSetEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFormFieldSetsIdSignalError() instead")
    void patchFormFieldSetsIdSignalE(OAIFormFieldSetEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchFormFieldSetsIdSignalError(OAIFormFieldSetEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFormFieldSetsSignalError() instead")
    void postFormFieldSetsSignalE(OAIFormFieldSetEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postFormFieldSetsSignalError(OAIFormFieldSetEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteFormFieldSetsIdSignalErrorFull() instead")
    void deleteFormFieldSetsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFormFieldSetsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFormFieldSetsSignalErrorFull() instead")
    void getFormFieldSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFormFieldSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFormFieldSetsIdSignalErrorFull() instead")
    void getFormFieldSetsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFormFieldSetsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFormFieldSetsIdSignalErrorFull() instead")
    void patchFormFieldSetsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchFormFieldSetsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFormFieldSetsSignalErrorFull() instead")
    void postFormFieldSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFormFieldSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
