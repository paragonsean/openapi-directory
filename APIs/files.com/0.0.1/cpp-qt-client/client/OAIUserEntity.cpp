/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserEntity::OAIUserEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserEntity::OAIUserEntity() {
    this->initializeModel();
}

OAIUserEntity::~OAIUserEntity() {}

void OAIUserEntity::initializeModel() {

    m_active_2fa_isSet = false;
    m_active_2fa_isValid = false;

    m_admin_group_ids_isSet = false;
    m_admin_group_ids_isValid = false;

    m_allowed_ips_isSet = false;
    m_allowed_ips_isValid = false;

    m_api_keys_count_isSet = false;
    m_api_keys_count_isValid = false;

    m_attachments_permission_isSet = false;
    m_attachments_permission_isValid = false;

    m_authenticate_until_isSet = false;
    m_authenticate_until_isValid = false;

    m_authentication_method_isSet = false;
    m_authentication_method_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_billing_permission_isSet = false;
    m_billing_permission_isValid = false;

    m_bypass_inactive_disable_isSet = false;
    m_bypass_inactive_disable_isValid = false;

    m_bypass_site_allowed_ips_isSet = false;
    m_bypass_site_allowed_ips_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dav_permission_isSet = false;
    m_dav_permission_isValid = false;

    m_days_remaining_until_password_expire_isSet = false;
    m_days_remaining_until_password_expire_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_externally_managed_isSet = false;
    m_externally_managed_isValid = false;

    m_first_login_at_isSet = false;
    m_first_login_at_isValid = false;

    m_ftp_permission_isSet = false;
    m_ftp_permission_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_header_text_isSet = false;
    m_header_text_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_active_at_isSet = false;
    m_last_active_at_isValid = false;

    m_last_api_use_at_isSet = false;
    m_last_api_use_at_isValid = false;

    m_last_dav_login_at_isSet = false;
    m_last_dav_login_at_isValid = false;

    m_last_desktop_login_at_isSet = false;
    m_last_desktop_login_at_isValid = false;

    m_last_ftp_login_at_isSet = false;
    m_last_ftp_login_at_isValid = false;

    m_last_login_at_isSet = false;
    m_last_login_at_isValid = false;

    m_last_protocol_cipher_isSet = false;
    m_last_protocol_cipher_isValid = false;

    m_last_restapi_login_at_isSet = false;
    m_last_restapi_login_at_isValid = false;

    m_last_sftp_login_at_isSet = false;
    m_last_sftp_login_at_isValid = false;

    m_last_web_login_at_isSet = false;
    m_last_web_login_at_isValid = false;

    m_lockout_expires_isSet = false;
    m_lockout_expires_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_notification_daily_send_time_isSet = false;
    m_notification_daily_send_time_isValid = false;

    m_office_integration_enabled_isSet = false;
    m_office_integration_enabled_isValid = false;

    m_password_expire_at_isSet = false;
    m_password_expire_at_isValid = false;

    m_password_expired_isSet = false;
    m_password_expired_isValid = false;

    m_password_set_at_isSet = false;
    m_password_set_at_isValid = false;

    m_password_validity_days_isSet = false;
    m_password_validity_days_isValid = false;

    m_public_keys_count_isSet = false;
    m_public_keys_count_isValid = false;

    m_receive_admin_alerts_isSet = false;
    m_receive_admin_alerts_isValid = false;

    m_require_2fa_isSet = false;
    m_require_2fa_isValid = false;

    m_require_password_change_isSet = false;
    m_require_password_change_isValid = false;

    m_restapi_permission_isSet = false;
    m_restapi_permission_isValid = false;

    m_self_managed_isSet = false;
    m_self_managed_isValid = false;

    m_sftp_permission_isSet = false;
    m_sftp_permission_isValid = false;

    m_site_admin_isSet = false;
    m_site_admin_isValid = false;

    m_skip_welcome_screen_isSet = false;
    m_skip_welcome_screen_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;

    m_sso_strategy_id_isSet = false;
    m_sso_strategy_id_isValid = false;

    m_subscribe_to_newsletter_isSet = false;
    m_subscribe_to_newsletter_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_type_of_2fa_isSet = false;
    m_type_of_2fa_isValid = false;

    m_user_root_isSet = false;
    m_user_root_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserEntity::fromJsonObject(QJsonObject json) {

    m_active_2fa_isValid = ::OpenAPI::fromJsonValue(m_active_2fa, json[QString("active_2fa")]);
    m_active_2fa_isSet = !json[QString("active_2fa")].isNull() && m_active_2fa_isValid;

    m_admin_group_ids_isValid = ::OpenAPI::fromJsonValue(m_admin_group_ids, json[QString("admin_group_ids")]);
    m_admin_group_ids_isSet = !json[QString("admin_group_ids")].isNull() && m_admin_group_ids_isValid;

    m_allowed_ips_isValid = ::OpenAPI::fromJsonValue(m_allowed_ips, json[QString("allowed_ips")]);
    m_allowed_ips_isSet = !json[QString("allowed_ips")].isNull() && m_allowed_ips_isValid;

    m_api_keys_count_isValid = ::OpenAPI::fromJsonValue(m_api_keys_count, json[QString("api_keys_count")]);
    m_api_keys_count_isSet = !json[QString("api_keys_count")].isNull() && m_api_keys_count_isValid;

    m_attachments_permission_isValid = ::OpenAPI::fromJsonValue(m_attachments_permission, json[QString("attachments_permission")]);
    m_attachments_permission_isSet = !json[QString("attachments_permission")].isNull() && m_attachments_permission_isValid;

    m_authenticate_until_isValid = ::OpenAPI::fromJsonValue(m_authenticate_until, json[QString("authenticate_until")]);
    m_authenticate_until_isSet = !json[QString("authenticate_until")].isNull() && m_authenticate_until_isValid;

    m_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_authentication_method, json[QString("authentication_method")]);
    m_authentication_method_isSet = !json[QString("authentication_method")].isNull() && m_authentication_method_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_billing_permission_isValid = ::OpenAPI::fromJsonValue(m_billing_permission, json[QString("billing_permission")]);
    m_billing_permission_isSet = !json[QString("billing_permission")].isNull() && m_billing_permission_isValid;

    m_bypass_inactive_disable_isValid = ::OpenAPI::fromJsonValue(m_bypass_inactive_disable, json[QString("bypass_inactive_disable")]);
    m_bypass_inactive_disable_isSet = !json[QString("bypass_inactive_disable")].isNull() && m_bypass_inactive_disable_isValid;

    m_bypass_site_allowed_ips_isValid = ::OpenAPI::fromJsonValue(m_bypass_site_allowed_ips, json[QString("bypass_site_allowed_ips")]);
    m_bypass_site_allowed_ips_isSet = !json[QString("bypass_site_allowed_ips")].isNull() && m_bypass_site_allowed_ips_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dav_permission_isValid = ::OpenAPI::fromJsonValue(m_dav_permission, json[QString("dav_permission")]);
    m_dav_permission_isSet = !json[QString("dav_permission")].isNull() && m_dav_permission_isValid;

    m_days_remaining_until_password_expire_isValid = ::OpenAPI::fromJsonValue(m_days_remaining_until_password_expire, json[QString("days_remaining_until_password_expire")]);
    m_days_remaining_until_password_expire_isSet = !json[QString("days_remaining_until_password_expire")].isNull() && m_days_remaining_until_password_expire_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_externally_managed_isValid = ::OpenAPI::fromJsonValue(m_externally_managed, json[QString("externally_managed")]);
    m_externally_managed_isSet = !json[QString("externally_managed")].isNull() && m_externally_managed_isValid;

    m_first_login_at_isValid = ::OpenAPI::fromJsonValue(m_first_login_at, json[QString("first_login_at")]);
    m_first_login_at_isSet = !json[QString("first_login_at")].isNull() && m_first_login_at_isValid;

    m_ftp_permission_isValid = ::OpenAPI::fromJsonValue(m_ftp_permission, json[QString("ftp_permission")]);
    m_ftp_permission_isSet = !json[QString("ftp_permission")].isNull() && m_ftp_permission_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("group_ids")]);
    m_group_ids_isSet = !json[QString("group_ids")].isNull() && m_group_ids_isValid;

    m_header_text_isValid = ::OpenAPI::fromJsonValue(m_header_text, json[QString("header_text")]);
    m_header_text_isSet = !json[QString("header_text")].isNull() && m_header_text_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_active_at_isValid = ::OpenAPI::fromJsonValue(m_last_active_at, json[QString("last_active_at")]);
    m_last_active_at_isSet = !json[QString("last_active_at")].isNull() && m_last_active_at_isValid;

    m_last_api_use_at_isValid = ::OpenAPI::fromJsonValue(m_last_api_use_at, json[QString("last_api_use_at")]);
    m_last_api_use_at_isSet = !json[QString("last_api_use_at")].isNull() && m_last_api_use_at_isValid;

    m_last_dav_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_dav_login_at, json[QString("last_dav_login_at")]);
    m_last_dav_login_at_isSet = !json[QString("last_dav_login_at")].isNull() && m_last_dav_login_at_isValid;

    m_last_desktop_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_desktop_login_at, json[QString("last_desktop_login_at")]);
    m_last_desktop_login_at_isSet = !json[QString("last_desktop_login_at")].isNull() && m_last_desktop_login_at_isValid;

    m_last_ftp_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_ftp_login_at, json[QString("last_ftp_login_at")]);
    m_last_ftp_login_at_isSet = !json[QString("last_ftp_login_at")].isNull() && m_last_ftp_login_at_isValid;

    m_last_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_login_at, json[QString("last_login_at")]);
    m_last_login_at_isSet = !json[QString("last_login_at")].isNull() && m_last_login_at_isValid;

    m_last_protocol_cipher_isValid = ::OpenAPI::fromJsonValue(m_last_protocol_cipher, json[QString("last_protocol_cipher")]);
    m_last_protocol_cipher_isSet = !json[QString("last_protocol_cipher")].isNull() && m_last_protocol_cipher_isValid;

    m_last_restapi_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_restapi_login_at, json[QString("last_restapi_login_at")]);
    m_last_restapi_login_at_isSet = !json[QString("last_restapi_login_at")].isNull() && m_last_restapi_login_at_isValid;

    m_last_sftp_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_sftp_login_at, json[QString("last_sftp_login_at")]);
    m_last_sftp_login_at_isSet = !json[QString("last_sftp_login_at")].isNull() && m_last_sftp_login_at_isValid;

    m_last_web_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_web_login_at, json[QString("last_web_login_at")]);
    m_last_web_login_at_isSet = !json[QString("last_web_login_at")].isNull() && m_last_web_login_at_isValid;

    m_lockout_expires_isValid = ::OpenAPI::fromJsonValue(m_lockout_expires, json[QString("lockout_expires")]);
    m_lockout_expires_isSet = !json[QString("lockout_expires")].isNull() && m_lockout_expires_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_notification_daily_send_time_isValid = ::OpenAPI::fromJsonValue(m_notification_daily_send_time, json[QString("notification_daily_send_time")]);
    m_notification_daily_send_time_isSet = !json[QString("notification_daily_send_time")].isNull() && m_notification_daily_send_time_isValid;

    m_office_integration_enabled_isValid = ::OpenAPI::fromJsonValue(m_office_integration_enabled, json[QString("office_integration_enabled")]);
    m_office_integration_enabled_isSet = !json[QString("office_integration_enabled")].isNull() && m_office_integration_enabled_isValid;

    m_password_expire_at_isValid = ::OpenAPI::fromJsonValue(m_password_expire_at, json[QString("password_expire_at")]);
    m_password_expire_at_isSet = !json[QString("password_expire_at")].isNull() && m_password_expire_at_isValid;

    m_password_expired_isValid = ::OpenAPI::fromJsonValue(m_password_expired, json[QString("password_expired")]);
    m_password_expired_isSet = !json[QString("password_expired")].isNull() && m_password_expired_isValid;

    m_password_set_at_isValid = ::OpenAPI::fromJsonValue(m_password_set_at, json[QString("password_set_at")]);
    m_password_set_at_isSet = !json[QString("password_set_at")].isNull() && m_password_set_at_isValid;

    m_password_validity_days_isValid = ::OpenAPI::fromJsonValue(m_password_validity_days, json[QString("password_validity_days")]);
    m_password_validity_days_isSet = !json[QString("password_validity_days")].isNull() && m_password_validity_days_isValid;

    m_public_keys_count_isValid = ::OpenAPI::fromJsonValue(m_public_keys_count, json[QString("public_keys_count")]);
    m_public_keys_count_isSet = !json[QString("public_keys_count")].isNull() && m_public_keys_count_isValid;

    m_receive_admin_alerts_isValid = ::OpenAPI::fromJsonValue(m_receive_admin_alerts, json[QString("receive_admin_alerts")]);
    m_receive_admin_alerts_isSet = !json[QString("receive_admin_alerts")].isNull() && m_receive_admin_alerts_isValid;

    m_require_2fa_isValid = ::OpenAPI::fromJsonValue(m_require_2fa, json[QString("require_2fa")]);
    m_require_2fa_isSet = !json[QString("require_2fa")].isNull() && m_require_2fa_isValid;

    m_require_password_change_isValid = ::OpenAPI::fromJsonValue(m_require_password_change, json[QString("require_password_change")]);
    m_require_password_change_isSet = !json[QString("require_password_change")].isNull() && m_require_password_change_isValid;

    m_restapi_permission_isValid = ::OpenAPI::fromJsonValue(m_restapi_permission, json[QString("restapi_permission")]);
    m_restapi_permission_isSet = !json[QString("restapi_permission")].isNull() && m_restapi_permission_isValid;

    m_self_managed_isValid = ::OpenAPI::fromJsonValue(m_self_managed, json[QString("self_managed")]);
    m_self_managed_isSet = !json[QString("self_managed")].isNull() && m_self_managed_isValid;

    m_sftp_permission_isValid = ::OpenAPI::fromJsonValue(m_sftp_permission, json[QString("sftp_permission")]);
    m_sftp_permission_isSet = !json[QString("sftp_permission")].isNull() && m_sftp_permission_isValid;

    m_site_admin_isValid = ::OpenAPI::fromJsonValue(m_site_admin, json[QString("site_admin")]);
    m_site_admin_isSet = !json[QString("site_admin")].isNull() && m_site_admin_isValid;

    m_skip_welcome_screen_isValid = ::OpenAPI::fromJsonValue(m_skip_welcome_screen, json[QString("skip_welcome_screen")]);
    m_skip_welcome_screen_isSet = !json[QString("skip_welcome_screen")].isNull() && m_skip_welcome_screen_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("ssl_required")]);
    m_ssl_required_isSet = !json[QString("ssl_required")].isNull() && m_ssl_required_isValid;

    m_sso_strategy_id_isValid = ::OpenAPI::fromJsonValue(m_sso_strategy_id, json[QString("sso_strategy_id")]);
    m_sso_strategy_id_isSet = !json[QString("sso_strategy_id")].isNull() && m_sso_strategy_id_isValid;

    m_subscribe_to_newsletter_isValid = ::OpenAPI::fromJsonValue(m_subscribe_to_newsletter, json[QString("subscribe_to_newsletter")]);
    m_subscribe_to_newsletter_isSet = !json[QString("subscribe_to_newsletter")].isNull() && m_subscribe_to_newsletter_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("time_zone")]);
    m_time_zone_isSet = !json[QString("time_zone")].isNull() && m_time_zone_isValid;

    m_type_of_2fa_isValid = ::OpenAPI::fromJsonValue(m_type_of_2fa, json[QString("type_of_2fa")]);
    m_type_of_2fa_isSet = !json[QString("type_of_2fa")].isNull() && m_type_of_2fa_isValid;

    m_user_root_isValid = ::OpenAPI::fromJsonValue(m_user_root, json[QString("user_root")]);
    m_user_root_isSet = !json[QString("user_root")].isNull() && m_user_root_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUserEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_active_2fa_isSet) {
        obj.insert(QString("active_2fa"), ::OpenAPI::toJsonValue(m_active_2fa));
    }
    if (m_admin_group_ids.size() > 0) {
        obj.insert(QString("admin_group_ids"), ::OpenAPI::toJsonValue(m_admin_group_ids));
    }
    if (m_allowed_ips_isSet) {
        obj.insert(QString("allowed_ips"), ::OpenAPI::toJsonValue(m_allowed_ips));
    }
    if (m_api_keys_count_isSet) {
        obj.insert(QString("api_keys_count"), ::OpenAPI::toJsonValue(m_api_keys_count));
    }
    if (m_attachments_permission_isSet) {
        obj.insert(QString("attachments_permission"), ::OpenAPI::toJsonValue(m_attachments_permission));
    }
    if (m_authenticate_until_isSet) {
        obj.insert(QString("authenticate_until"), ::OpenAPI::toJsonValue(m_authenticate_until));
    }
    if (m_authentication_method_isSet) {
        obj.insert(QString("authentication_method"), ::OpenAPI::toJsonValue(m_authentication_method));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_billing_permission_isSet) {
        obj.insert(QString("billing_permission"), ::OpenAPI::toJsonValue(m_billing_permission));
    }
    if (m_bypass_inactive_disable_isSet) {
        obj.insert(QString("bypass_inactive_disable"), ::OpenAPI::toJsonValue(m_bypass_inactive_disable));
    }
    if (m_bypass_site_allowed_ips_isSet) {
        obj.insert(QString("bypass_site_allowed_ips"), ::OpenAPI::toJsonValue(m_bypass_site_allowed_ips));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dav_permission_isSet) {
        obj.insert(QString("dav_permission"), ::OpenAPI::toJsonValue(m_dav_permission));
    }
    if (m_days_remaining_until_password_expire_isSet) {
        obj.insert(QString("days_remaining_until_password_expire"), ::OpenAPI::toJsonValue(m_days_remaining_until_password_expire));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_externally_managed_isSet) {
        obj.insert(QString("externally_managed"), ::OpenAPI::toJsonValue(m_externally_managed));
    }
    if (m_first_login_at_isSet) {
        obj.insert(QString("first_login_at"), ::OpenAPI::toJsonValue(m_first_login_at));
    }
    if (m_ftp_permission_isSet) {
        obj.insert(QString("ftp_permission"), ::OpenAPI::toJsonValue(m_ftp_permission));
    }
    if (m_group_ids_isSet) {
        obj.insert(QString("group_ids"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_header_text_isSet) {
        obj.insert(QString("header_text"), ::OpenAPI::toJsonValue(m_header_text));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_active_at_isSet) {
        obj.insert(QString("last_active_at"), ::OpenAPI::toJsonValue(m_last_active_at));
    }
    if (m_last_api_use_at_isSet) {
        obj.insert(QString("last_api_use_at"), ::OpenAPI::toJsonValue(m_last_api_use_at));
    }
    if (m_last_dav_login_at_isSet) {
        obj.insert(QString("last_dav_login_at"), ::OpenAPI::toJsonValue(m_last_dav_login_at));
    }
    if (m_last_desktop_login_at_isSet) {
        obj.insert(QString("last_desktop_login_at"), ::OpenAPI::toJsonValue(m_last_desktop_login_at));
    }
    if (m_last_ftp_login_at_isSet) {
        obj.insert(QString("last_ftp_login_at"), ::OpenAPI::toJsonValue(m_last_ftp_login_at));
    }
    if (m_last_login_at_isSet) {
        obj.insert(QString("last_login_at"), ::OpenAPI::toJsonValue(m_last_login_at));
    }
    if (m_last_protocol_cipher_isSet) {
        obj.insert(QString("last_protocol_cipher"), ::OpenAPI::toJsonValue(m_last_protocol_cipher));
    }
    if (m_last_restapi_login_at_isSet) {
        obj.insert(QString("last_restapi_login_at"), ::OpenAPI::toJsonValue(m_last_restapi_login_at));
    }
    if (m_last_sftp_login_at_isSet) {
        obj.insert(QString("last_sftp_login_at"), ::OpenAPI::toJsonValue(m_last_sftp_login_at));
    }
    if (m_last_web_login_at_isSet) {
        obj.insert(QString("last_web_login_at"), ::OpenAPI::toJsonValue(m_last_web_login_at));
    }
    if (m_lockout_expires_isSet) {
        obj.insert(QString("lockout_expires"), ::OpenAPI::toJsonValue(m_lockout_expires));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_notification_daily_send_time_isSet) {
        obj.insert(QString("notification_daily_send_time"), ::OpenAPI::toJsonValue(m_notification_daily_send_time));
    }
    if (m_office_integration_enabled_isSet) {
        obj.insert(QString("office_integration_enabled"), ::OpenAPI::toJsonValue(m_office_integration_enabled));
    }
    if (m_password_expire_at_isSet) {
        obj.insert(QString("password_expire_at"), ::OpenAPI::toJsonValue(m_password_expire_at));
    }
    if (m_password_expired_isSet) {
        obj.insert(QString("password_expired"), ::OpenAPI::toJsonValue(m_password_expired));
    }
    if (m_password_set_at_isSet) {
        obj.insert(QString("password_set_at"), ::OpenAPI::toJsonValue(m_password_set_at));
    }
    if (m_password_validity_days_isSet) {
        obj.insert(QString("password_validity_days"), ::OpenAPI::toJsonValue(m_password_validity_days));
    }
    if (m_public_keys_count_isSet) {
        obj.insert(QString("public_keys_count"), ::OpenAPI::toJsonValue(m_public_keys_count));
    }
    if (m_receive_admin_alerts_isSet) {
        obj.insert(QString("receive_admin_alerts"), ::OpenAPI::toJsonValue(m_receive_admin_alerts));
    }
    if (m_require_2fa_isSet) {
        obj.insert(QString("require_2fa"), ::OpenAPI::toJsonValue(m_require_2fa));
    }
    if (m_require_password_change_isSet) {
        obj.insert(QString("require_password_change"), ::OpenAPI::toJsonValue(m_require_password_change));
    }
    if (m_restapi_permission_isSet) {
        obj.insert(QString("restapi_permission"), ::OpenAPI::toJsonValue(m_restapi_permission));
    }
    if (m_self_managed_isSet) {
        obj.insert(QString("self_managed"), ::OpenAPI::toJsonValue(m_self_managed));
    }
    if (m_sftp_permission_isSet) {
        obj.insert(QString("sftp_permission"), ::OpenAPI::toJsonValue(m_sftp_permission));
    }
    if (m_site_admin_isSet) {
        obj.insert(QString("site_admin"), ::OpenAPI::toJsonValue(m_site_admin));
    }
    if (m_skip_welcome_screen_isSet) {
        obj.insert(QString("skip_welcome_screen"), ::OpenAPI::toJsonValue(m_skip_welcome_screen));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("ssl_required"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    if (m_sso_strategy_id_isSet) {
        obj.insert(QString("sso_strategy_id"), ::OpenAPI::toJsonValue(m_sso_strategy_id));
    }
    if (m_subscribe_to_newsletter_isSet) {
        obj.insert(QString("subscribe_to_newsletter"), ::OpenAPI::toJsonValue(m_subscribe_to_newsletter));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("time_zone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_type_of_2fa_isSet) {
        obj.insert(QString("type_of_2fa"), ::OpenAPI::toJsonValue(m_type_of_2fa));
    }
    if (m_user_root_isSet) {
        obj.insert(QString("user_root"), ::OpenAPI::toJsonValue(m_user_root));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIUserEntity::isActive2fa() const {
    return m_active_2fa;
}
void OAIUserEntity::setActive2fa(const bool &active_2fa) {
    m_active_2fa = active_2fa;
    m_active_2fa_isSet = true;
}

bool OAIUserEntity::is_active_2fa_Set() const{
    return m_active_2fa_isSet;
}

bool OAIUserEntity::is_active_2fa_Valid() const{
    return m_active_2fa_isValid;
}

QList<qint32> OAIUserEntity::getAdminGroupIds() const {
    return m_admin_group_ids;
}
void OAIUserEntity::setAdminGroupIds(const QList<qint32> &admin_group_ids) {
    m_admin_group_ids = admin_group_ids;
    m_admin_group_ids_isSet = true;
}

bool OAIUserEntity::is_admin_group_ids_Set() const{
    return m_admin_group_ids_isSet;
}

bool OAIUserEntity::is_admin_group_ids_Valid() const{
    return m_admin_group_ids_isValid;
}

QString OAIUserEntity::getAllowedIps() const {
    return m_allowed_ips;
}
void OAIUserEntity::setAllowedIps(const QString &allowed_ips) {
    m_allowed_ips = allowed_ips;
    m_allowed_ips_isSet = true;
}

bool OAIUserEntity::is_allowed_ips_Set() const{
    return m_allowed_ips_isSet;
}

bool OAIUserEntity::is_allowed_ips_Valid() const{
    return m_allowed_ips_isValid;
}

qint32 OAIUserEntity::getApiKeysCount() const {
    return m_api_keys_count;
}
void OAIUserEntity::setApiKeysCount(const qint32 &api_keys_count) {
    m_api_keys_count = api_keys_count;
    m_api_keys_count_isSet = true;
}

bool OAIUserEntity::is_api_keys_count_Set() const{
    return m_api_keys_count_isSet;
}

bool OAIUserEntity::is_api_keys_count_Valid() const{
    return m_api_keys_count_isValid;
}

bool OAIUserEntity::isAttachmentsPermission() const {
    return m_attachments_permission;
}
void OAIUserEntity::setAttachmentsPermission(const bool &attachments_permission) {
    m_attachments_permission = attachments_permission;
    m_attachments_permission_isSet = true;
}

bool OAIUserEntity::is_attachments_permission_Set() const{
    return m_attachments_permission_isSet;
}

bool OAIUserEntity::is_attachments_permission_Valid() const{
    return m_attachments_permission_isValid;
}

QDateTime OAIUserEntity::getAuthenticateUntil() const {
    return m_authenticate_until;
}
void OAIUserEntity::setAuthenticateUntil(const QDateTime &authenticate_until) {
    m_authenticate_until = authenticate_until;
    m_authenticate_until_isSet = true;
}

bool OAIUserEntity::is_authenticate_until_Set() const{
    return m_authenticate_until_isSet;
}

bool OAIUserEntity::is_authenticate_until_Valid() const{
    return m_authenticate_until_isValid;
}

QString OAIUserEntity::getAuthenticationMethod() const {
    return m_authentication_method;
}
void OAIUserEntity::setAuthenticationMethod(const QString &authentication_method) {
    m_authentication_method = authentication_method;
    m_authentication_method_isSet = true;
}

bool OAIUserEntity::is_authentication_method_Set() const{
    return m_authentication_method_isSet;
}

bool OAIUserEntity::is_authentication_method_Valid() const{
    return m_authentication_method_isValid;
}

QString OAIUserEntity::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUserEntity::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUserEntity::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUserEntity::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

bool OAIUserEntity::isBillingPermission() const {
    return m_billing_permission;
}
void OAIUserEntity::setBillingPermission(const bool &billing_permission) {
    m_billing_permission = billing_permission;
    m_billing_permission_isSet = true;
}

bool OAIUserEntity::is_billing_permission_Set() const{
    return m_billing_permission_isSet;
}

bool OAIUserEntity::is_billing_permission_Valid() const{
    return m_billing_permission_isValid;
}

bool OAIUserEntity::isBypassInactiveDisable() const {
    return m_bypass_inactive_disable;
}
void OAIUserEntity::setBypassInactiveDisable(const bool &bypass_inactive_disable) {
    m_bypass_inactive_disable = bypass_inactive_disable;
    m_bypass_inactive_disable_isSet = true;
}

bool OAIUserEntity::is_bypass_inactive_disable_Set() const{
    return m_bypass_inactive_disable_isSet;
}

bool OAIUserEntity::is_bypass_inactive_disable_Valid() const{
    return m_bypass_inactive_disable_isValid;
}

bool OAIUserEntity::isBypassSiteAllowedIps() const {
    return m_bypass_site_allowed_ips;
}
void OAIUserEntity::setBypassSiteAllowedIps(const bool &bypass_site_allowed_ips) {
    m_bypass_site_allowed_ips = bypass_site_allowed_ips;
    m_bypass_site_allowed_ips_isSet = true;
}

bool OAIUserEntity::is_bypass_site_allowed_ips_Set() const{
    return m_bypass_site_allowed_ips_isSet;
}

bool OAIUserEntity::is_bypass_site_allowed_ips_Valid() const{
    return m_bypass_site_allowed_ips_isValid;
}

QString OAIUserEntity::getCompany() const {
    return m_company;
}
void OAIUserEntity::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIUserEntity::is_company_Set() const{
    return m_company_isSet;
}

bool OAIUserEntity::is_company_Valid() const{
    return m_company_isValid;
}

QDateTime OAIUserEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIUserEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUserEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUserEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIUserEntity::isDavPermission() const {
    return m_dav_permission;
}
void OAIUserEntity::setDavPermission(const bool &dav_permission) {
    m_dav_permission = dav_permission;
    m_dav_permission_isSet = true;
}

bool OAIUserEntity::is_dav_permission_Set() const{
    return m_dav_permission_isSet;
}

bool OAIUserEntity::is_dav_permission_Valid() const{
    return m_dav_permission_isValid;
}

qint32 OAIUserEntity::getDaysRemainingUntilPasswordExpire() const {
    return m_days_remaining_until_password_expire;
}
void OAIUserEntity::setDaysRemainingUntilPasswordExpire(const qint32 &days_remaining_until_password_expire) {
    m_days_remaining_until_password_expire = days_remaining_until_password_expire;
    m_days_remaining_until_password_expire_isSet = true;
}

bool OAIUserEntity::is_days_remaining_until_password_expire_Set() const{
    return m_days_remaining_until_password_expire_isSet;
}

bool OAIUserEntity::is_days_remaining_until_password_expire_Valid() const{
    return m_days_remaining_until_password_expire_isValid;
}

bool OAIUserEntity::isDisabled() const {
    return m_disabled;
}
void OAIUserEntity::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIUserEntity::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIUserEntity::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIUserEntity::getEmail() const {
    return m_email;
}
void OAIUserEntity::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserEntity::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserEntity::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUserEntity::isExternallyManaged() const {
    return m_externally_managed;
}
void OAIUserEntity::setExternallyManaged(const bool &externally_managed) {
    m_externally_managed = externally_managed;
    m_externally_managed_isSet = true;
}

bool OAIUserEntity::is_externally_managed_Set() const{
    return m_externally_managed_isSet;
}

bool OAIUserEntity::is_externally_managed_Valid() const{
    return m_externally_managed_isValid;
}

QDateTime OAIUserEntity::getFirstLoginAt() const {
    return m_first_login_at;
}
void OAIUserEntity::setFirstLoginAt(const QDateTime &first_login_at) {
    m_first_login_at = first_login_at;
    m_first_login_at_isSet = true;
}

bool OAIUserEntity::is_first_login_at_Set() const{
    return m_first_login_at_isSet;
}

bool OAIUserEntity::is_first_login_at_Valid() const{
    return m_first_login_at_isValid;
}

bool OAIUserEntity::isFtpPermission() const {
    return m_ftp_permission;
}
void OAIUserEntity::setFtpPermission(const bool &ftp_permission) {
    m_ftp_permission = ftp_permission;
    m_ftp_permission_isSet = true;
}

bool OAIUserEntity::is_ftp_permission_Set() const{
    return m_ftp_permission_isSet;
}

bool OAIUserEntity::is_ftp_permission_Valid() const{
    return m_ftp_permission_isValid;
}

QString OAIUserEntity::getGroupIds() const {
    return m_group_ids;
}
void OAIUserEntity::setGroupIds(const QString &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAIUserEntity::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAIUserEntity::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QString OAIUserEntity::getHeaderText() const {
    return m_header_text;
}
void OAIUserEntity::setHeaderText(const QString &header_text) {
    m_header_text = header_text;
    m_header_text_isSet = true;
}

bool OAIUserEntity::is_header_text_Set() const{
    return m_header_text_isSet;
}

bool OAIUserEntity::is_header_text_Valid() const{
    return m_header_text_isValid;
}

qint32 OAIUserEntity::getId() const {
    return m_id;
}
void OAIUserEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserEntity::getLanguage() const {
    return m_language;
}
void OAIUserEntity::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIUserEntity::is_language_Set() const{
    return m_language_isSet;
}

bool OAIUserEntity::is_language_Valid() const{
    return m_language_isValid;
}

QDateTime OAIUserEntity::getLastActiveAt() const {
    return m_last_active_at;
}
void OAIUserEntity::setLastActiveAt(const QDateTime &last_active_at) {
    m_last_active_at = last_active_at;
    m_last_active_at_isSet = true;
}

bool OAIUserEntity::is_last_active_at_Set() const{
    return m_last_active_at_isSet;
}

bool OAIUserEntity::is_last_active_at_Valid() const{
    return m_last_active_at_isValid;
}

QDateTime OAIUserEntity::getLastApiUseAt() const {
    return m_last_api_use_at;
}
void OAIUserEntity::setLastApiUseAt(const QDateTime &last_api_use_at) {
    m_last_api_use_at = last_api_use_at;
    m_last_api_use_at_isSet = true;
}

bool OAIUserEntity::is_last_api_use_at_Set() const{
    return m_last_api_use_at_isSet;
}

bool OAIUserEntity::is_last_api_use_at_Valid() const{
    return m_last_api_use_at_isValid;
}

QDateTime OAIUserEntity::getLastDavLoginAt() const {
    return m_last_dav_login_at;
}
void OAIUserEntity::setLastDavLoginAt(const QDateTime &last_dav_login_at) {
    m_last_dav_login_at = last_dav_login_at;
    m_last_dav_login_at_isSet = true;
}

bool OAIUserEntity::is_last_dav_login_at_Set() const{
    return m_last_dav_login_at_isSet;
}

bool OAIUserEntity::is_last_dav_login_at_Valid() const{
    return m_last_dav_login_at_isValid;
}

QDateTime OAIUserEntity::getLastDesktopLoginAt() const {
    return m_last_desktop_login_at;
}
void OAIUserEntity::setLastDesktopLoginAt(const QDateTime &last_desktop_login_at) {
    m_last_desktop_login_at = last_desktop_login_at;
    m_last_desktop_login_at_isSet = true;
}

bool OAIUserEntity::is_last_desktop_login_at_Set() const{
    return m_last_desktop_login_at_isSet;
}

bool OAIUserEntity::is_last_desktop_login_at_Valid() const{
    return m_last_desktop_login_at_isValid;
}

QDateTime OAIUserEntity::getLastFtpLoginAt() const {
    return m_last_ftp_login_at;
}
void OAIUserEntity::setLastFtpLoginAt(const QDateTime &last_ftp_login_at) {
    m_last_ftp_login_at = last_ftp_login_at;
    m_last_ftp_login_at_isSet = true;
}

bool OAIUserEntity::is_last_ftp_login_at_Set() const{
    return m_last_ftp_login_at_isSet;
}

bool OAIUserEntity::is_last_ftp_login_at_Valid() const{
    return m_last_ftp_login_at_isValid;
}

QDateTime OAIUserEntity::getLastLoginAt() const {
    return m_last_login_at;
}
void OAIUserEntity::setLastLoginAt(const QDateTime &last_login_at) {
    m_last_login_at = last_login_at;
    m_last_login_at_isSet = true;
}

bool OAIUserEntity::is_last_login_at_Set() const{
    return m_last_login_at_isSet;
}

bool OAIUserEntity::is_last_login_at_Valid() const{
    return m_last_login_at_isValid;
}

QString OAIUserEntity::getLastProtocolCipher() const {
    return m_last_protocol_cipher;
}
void OAIUserEntity::setLastProtocolCipher(const QString &last_protocol_cipher) {
    m_last_protocol_cipher = last_protocol_cipher;
    m_last_protocol_cipher_isSet = true;
}

bool OAIUserEntity::is_last_protocol_cipher_Set() const{
    return m_last_protocol_cipher_isSet;
}

bool OAIUserEntity::is_last_protocol_cipher_Valid() const{
    return m_last_protocol_cipher_isValid;
}

QDateTime OAIUserEntity::getLastRestapiLoginAt() const {
    return m_last_restapi_login_at;
}
void OAIUserEntity::setLastRestapiLoginAt(const QDateTime &last_restapi_login_at) {
    m_last_restapi_login_at = last_restapi_login_at;
    m_last_restapi_login_at_isSet = true;
}

bool OAIUserEntity::is_last_restapi_login_at_Set() const{
    return m_last_restapi_login_at_isSet;
}

bool OAIUserEntity::is_last_restapi_login_at_Valid() const{
    return m_last_restapi_login_at_isValid;
}

QDateTime OAIUserEntity::getLastSftpLoginAt() const {
    return m_last_sftp_login_at;
}
void OAIUserEntity::setLastSftpLoginAt(const QDateTime &last_sftp_login_at) {
    m_last_sftp_login_at = last_sftp_login_at;
    m_last_sftp_login_at_isSet = true;
}

bool OAIUserEntity::is_last_sftp_login_at_Set() const{
    return m_last_sftp_login_at_isSet;
}

bool OAIUserEntity::is_last_sftp_login_at_Valid() const{
    return m_last_sftp_login_at_isValid;
}

QDateTime OAIUserEntity::getLastWebLoginAt() const {
    return m_last_web_login_at;
}
void OAIUserEntity::setLastWebLoginAt(const QDateTime &last_web_login_at) {
    m_last_web_login_at = last_web_login_at;
    m_last_web_login_at_isSet = true;
}

bool OAIUserEntity::is_last_web_login_at_Set() const{
    return m_last_web_login_at_isSet;
}

bool OAIUserEntity::is_last_web_login_at_Valid() const{
    return m_last_web_login_at_isValid;
}

QDateTime OAIUserEntity::getLockoutExpires() const {
    return m_lockout_expires;
}
void OAIUserEntity::setLockoutExpires(const QDateTime &lockout_expires) {
    m_lockout_expires = lockout_expires;
    m_lockout_expires_isSet = true;
}

bool OAIUserEntity::is_lockout_expires_Set() const{
    return m_lockout_expires_isSet;
}

bool OAIUserEntity::is_lockout_expires_Valid() const{
    return m_lockout_expires_isValid;
}

QString OAIUserEntity::getName() const {
    return m_name;
}
void OAIUserEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserEntity::getNotes() const {
    return m_notes;
}
void OAIUserEntity::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIUserEntity::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIUserEntity::is_notes_Valid() const{
    return m_notes_isValid;
}

qint32 OAIUserEntity::getNotificationDailySendTime() const {
    return m_notification_daily_send_time;
}
void OAIUserEntity::setNotificationDailySendTime(const qint32 &notification_daily_send_time) {
    m_notification_daily_send_time = notification_daily_send_time;
    m_notification_daily_send_time_isSet = true;
}

bool OAIUserEntity::is_notification_daily_send_time_Set() const{
    return m_notification_daily_send_time_isSet;
}

bool OAIUserEntity::is_notification_daily_send_time_Valid() const{
    return m_notification_daily_send_time_isValid;
}

bool OAIUserEntity::isOfficeIntegrationEnabled() const {
    return m_office_integration_enabled;
}
void OAIUserEntity::setOfficeIntegrationEnabled(const bool &office_integration_enabled) {
    m_office_integration_enabled = office_integration_enabled;
    m_office_integration_enabled_isSet = true;
}

bool OAIUserEntity::is_office_integration_enabled_Set() const{
    return m_office_integration_enabled_isSet;
}

bool OAIUserEntity::is_office_integration_enabled_Valid() const{
    return m_office_integration_enabled_isValid;
}

QDateTime OAIUserEntity::getPasswordExpireAt() const {
    return m_password_expire_at;
}
void OAIUserEntity::setPasswordExpireAt(const QDateTime &password_expire_at) {
    m_password_expire_at = password_expire_at;
    m_password_expire_at_isSet = true;
}

bool OAIUserEntity::is_password_expire_at_Set() const{
    return m_password_expire_at_isSet;
}

bool OAIUserEntity::is_password_expire_at_Valid() const{
    return m_password_expire_at_isValid;
}

bool OAIUserEntity::isPasswordExpired() const {
    return m_password_expired;
}
void OAIUserEntity::setPasswordExpired(const bool &password_expired) {
    m_password_expired = password_expired;
    m_password_expired_isSet = true;
}

bool OAIUserEntity::is_password_expired_Set() const{
    return m_password_expired_isSet;
}

bool OAIUserEntity::is_password_expired_Valid() const{
    return m_password_expired_isValid;
}

QDateTime OAIUserEntity::getPasswordSetAt() const {
    return m_password_set_at;
}
void OAIUserEntity::setPasswordSetAt(const QDateTime &password_set_at) {
    m_password_set_at = password_set_at;
    m_password_set_at_isSet = true;
}

bool OAIUserEntity::is_password_set_at_Set() const{
    return m_password_set_at_isSet;
}

bool OAIUserEntity::is_password_set_at_Valid() const{
    return m_password_set_at_isValid;
}

qint32 OAIUserEntity::getPasswordValidityDays() const {
    return m_password_validity_days;
}
void OAIUserEntity::setPasswordValidityDays(const qint32 &password_validity_days) {
    m_password_validity_days = password_validity_days;
    m_password_validity_days_isSet = true;
}

bool OAIUserEntity::is_password_validity_days_Set() const{
    return m_password_validity_days_isSet;
}

bool OAIUserEntity::is_password_validity_days_Valid() const{
    return m_password_validity_days_isValid;
}

qint32 OAIUserEntity::getPublicKeysCount() const {
    return m_public_keys_count;
}
void OAIUserEntity::setPublicKeysCount(const qint32 &public_keys_count) {
    m_public_keys_count = public_keys_count;
    m_public_keys_count_isSet = true;
}

bool OAIUserEntity::is_public_keys_count_Set() const{
    return m_public_keys_count_isSet;
}

bool OAIUserEntity::is_public_keys_count_Valid() const{
    return m_public_keys_count_isValid;
}

bool OAIUserEntity::isReceiveAdminAlerts() const {
    return m_receive_admin_alerts;
}
void OAIUserEntity::setReceiveAdminAlerts(const bool &receive_admin_alerts) {
    m_receive_admin_alerts = receive_admin_alerts;
    m_receive_admin_alerts_isSet = true;
}

bool OAIUserEntity::is_receive_admin_alerts_Set() const{
    return m_receive_admin_alerts_isSet;
}

bool OAIUserEntity::is_receive_admin_alerts_Valid() const{
    return m_receive_admin_alerts_isValid;
}

QString OAIUserEntity::getRequire2fa() const {
    return m_require_2fa;
}
void OAIUserEntity::setRequire2fa(const QString &require_2fa) {
    m_require_2fa = require_2fa;
    m_require_2fa_isSet = true;
}

bool OAIUserEntity::is_require_2fa_Set() const{
    return m_require_2fa_isSet;
}

bool OAIUserEntity::is_require_2fa_Valid() const{
    return m_require_2fa_isValid;
}

bool OAIUserEntity::isRequirePasswordChange() const {
    return m_require_password_change;
}
void OAIUserEntity::setRequirePasswordChange(const bool &require_password_change) {
    m_require_password_change = require_password_change;
    m_require_password_change_isSet = true;
}

bool OAIUserEntity::is_require_password_change_Set() const{
    return m_require_password_change_isSet;
}

bool OAIUserEntity::is_require_password_change_Valid() const{
    return m_require_password_change_isValid;
}

bool OAIUserEntity::isRestapiPermission() const {
    return m_restapi_permission;
}
void OAIUserEntity::setRestapiPermission(const bool &restapi_permission) {
    m_restapi_permission = restapi_permission;
    m_restapi_permission_isSet = true;
}

bool OAIUserEntity::is_restapi_permission_Set() const{
    return m_restapi_permission_isSet;
}

bool OAIUserEntity::is_restapi_permission_Valid() const{
    return m_restapi_permission_isValid;
}

bool OAIUserEntity::isSelfManaged() const {
    return m_self_managed;
}
void OAIUserEntity::setSelfManaged(const bool &self_managed) {
    m_self_managed = self_managed;
    m_self_managed_isSet = true;
}

bool OAIUserEntity::is_self_managed_Set() const{
    return m_self_managed_isSet;
}

bool OAIUserEntity::is_self_managed_Valid() const{
    return m_self_managed_isValid;
}

bool OAIUserEntity::isSftpPermission() const {
    return m_sftp_permission;
}
void OAIUserEntity::setSftpPermission(const bool &sftp_permission) {
    m_sftp_permission = sftp_permission;
    m_sftp_permission_isSet = true;
}

bool OAIUserEntity::is_sftp_permission_Set() const{
    return m_sftp_permission_isSet;
}

bool OAIUserEntity::is_sftp_permission_Valid() const{
    return m_sftp_permission_isValid;
}

bool OAIUserEntity::isSiteAdmin() const {
    return m_site_admin;
}
void OAIUserEntity::setSiteAdmin(const bool &site_admin) {
    m_site_admin = site_admin;
    m_site_admin_isSet = true;
}

bool OAIUserEntity::is_site_admin_Set() const{
    return m_site_admin_isSet;
}

bool OAIUserEntity::is_site_admin_Valid() const{
    return m_site_admin_isValid;
}

bool OAIUserEntity::isSkipWelcomeScreen() const {
    return m_skip_welcome_screen;
}
void OAIUserEntity::setSkipWelcomeScreen(const bool &skip_welcome_screen) {
    m_skip_welcome_screen = skip_welcome_screen;
    m_skip_welcome_screen_isSet = true;
}

bool OAIUserEntity::is_skip_welcome_screen_Set() const{
    return m_skip_welcome_screen_isSet;
}

bool OAIUserEntity::is_skip_welcome_screen_Valid() const{
    return m_skip_welcome_screen_isValid;
}

QString OAIUserEntity::getSslRequired() const {
    return m_ssl_required;
}
void OAIUserEntity::setSslRequired(const QString &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAIUserEntity::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAIUserEntity::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

qint32 OAIUserEntity::getSsoStrategyId() const {
    return m_sso_strategy_id;
}
void OAIUserEntity::setSsoStrategyId(const qint32 &sso_strategy_id) {
    m_sso_strategy_id = sso_strategy_id;
    m_sso_strategy_id_isSet = true;
}

bool OAIUserEntity::is_sso_strategy_id_Set() const{
    return m_sso_strategy_id_isSet;
}

bool OAIUserEntity::is_sso_strategy_id_Valid() const{
    return m_sso_strategy_id_isValid;
}

bool OAIUserEntity::isSubscribeToNewsletter() const {
    return m_subscribe_to_newsletter;
}
void OAIUserEntity::setSubscribeToNewsletter(const bool &subscribe_to_newsletter) {
    m_subscribe_to_newsletter = subscribe_to_newsletter;
    m_subscribe_to_newsletter_isSet = true;
}

bool OAIUserEntity::is_subscribe_to_newsletter_Set() const{
    return m_subscribe_to_newsletter_isSet;
}

bool OAIUserEntity::is_subscribe_to_newsletter_Valid() const{
    return m_subscribe_to_newsletter_isValid;
}

QString OAIUserEntity::getTimeZone() const {
    return m_time_zone;
}
void OAIUserEntity::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIUserEntity::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIUserEntity::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIUserEntity::getTypeOf2fa() const {
    return m_type_of_2fa;
}
void OAIUserEntity::setTypeOf2fa(const QString &type_of_2fa) {
    m_type_of_2fa = type_of_2fa;
    m_type_of_2fa_isSet = true;
}

bool OAIUserEntity::is_type_of_2fa_Set() const{
    return m_type_of_2fa_isSet;
}

bool OAIUserEntity::is_type_of_2fa_Valid() const{
    return m_type_of_2fa_isValid;
}

QString OAIUserEntity::getUserRoot() const {
    return m_user_root;
}
void OAIUserEntity::setUserRoot(const QString &user_root) {
    m_user_root = user_root;
    m_user_root_isSet = true;
}

bool OAIUserEntity::is_user_root_Set() const{
    return m_user_root_isSet;
}

bool OAIUserEntity::is_user_root_Valid() const{
    return m_user_root_isValid;
}

QString OAIUserEntity::getUsername() const {
    return m_username;
}
void OAIUserEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserEntity::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_2fa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_keys_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authenticate_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bypass_inactive_disable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bypass_site_allowed_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dav_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_remaining_until_password_expire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_externally_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftp_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_active_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_api_use_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_dav_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_desktop_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_ftp_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_protocol_cipher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_restapi_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sftp_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_web_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lockout_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_daily_send_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_integration_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_set_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_validity_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_keys_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_admin_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_2fa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_password_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restapi_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_welcome_screen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_strategy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribe_to_newsletter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_of_2fa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
