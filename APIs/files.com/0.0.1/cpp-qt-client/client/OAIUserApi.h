/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKeyEntity.h"
#include "OAIGroupUserEntity.h"
#include "OAIHttpFileElement.h"
#include "OAIPublicKeyEntity.h"
#include "OAIUserEntity.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_gt OAIObject [optional]
    * @param[in]  filter_gteq OAIObject [optional]
    * @param[in]  filter_lt OAIObject [optional]
    * @param[in]  filter_lteq OAIObject [optional]
    */
    virtual void getUserApiKeys(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lteq = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  group_id qint32 [optional]
    */
    virtual void getUserGroups(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserPublicKeys(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  allowed_ips QString [optional]
    * @param[in]  announcements_read bool [optional]
    * @param[in]  attachments_permission bool [optional]
    * @param[in]  authenticate_until QDateTime [optional]
    * @param[in]  authentication_method QString [optional]
    * @param[in]  avatar_delete bool [optional]
    * @param[in]  avatar_file OAIHttpFileElement [optional]
    * @param[in]  billing_permission bool [optional]
    * @param[in]  bypass_inactive_disable bool [optional]
    * @param[in]  bypass_site_allowed_ips bool [optional]
    * @param[in]  change_password QString [optional]
    * @param[in]  change_password_confirmation QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  dav_permission bool [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  email QString [optional]
    * @param[in]  ftp_permission bool [optional]
    * @param[in]  grant_permission QString [optional]
    * @param[in]  group_id qint32 [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  header_text QString [optional]
    * @param[in]  imported_password_hash QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  notification_daily_send_time qint32 [optional]
    * @param[in]  office_integration_enabled bool [optional]
    * @param[in]  password QString [optional]
    * @param[in]  password_confirmation QString [optional]
    * @param[in]  password_validity_days qint32 [optional]
    * @param[in]  receive_admin_alerts bool [optional]
    * @param[in]  require_2fa QString [optional]
    * @param[in]  require_password_change bool [optional]
    * @param[in]  restapi_permission bool [optional]
    * @param[in]  self_managed bool [optional]
    * @param[in]  sftp_permission bool [optional]
    * @param[in]  site_admin bool [optional]
    * @param[in]  skip_welcome_screen bool [optional]
    * @param[in]  ssl_required QString [optional]
    * @param[in]  sso_strategy_id qint32 [optional]
    * @param[in]  subscribe_to_newsletter bool [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  user_root QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void patchUser(const ::OpenAPI::OptionalParam<QString> &allowed_ips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &announcements_read = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &attachments_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &authenticate_until = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &authentication_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avatar_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &avatar_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &billing_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_inactive_disable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_site_allowed_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &change_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dav_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &grant_permission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &group_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &header_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imported_password_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &notification_daily_send_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &office_integration_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &password_validity_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &receive_admin_alerts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &require_2fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &require_password_change = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &restapi_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &self_managed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &site_admin = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_welcome_screen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ssl_required = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &sso_strategy_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &subscribe_to_newsletter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  expires_at QDateTime [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  permission_set QString [optional]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void postUserApiKeys(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &expires_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  public_key QString [required]
    * @param[in]  title QString [required]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void postUserPublicKeys(const QString &public_key, const QString &title, const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getUserApiKeysCallback(OAIHttpRequestWorker *worker);
    void getUserGroupsCallback(OAIHttpRequestWorker *worker);
    void getUserPublicKeysCallback(OAIHttpRequestWorker *worker);
    void patchUserCallback(OAIHttpRequestWorker *worker);
    void postUserApiKeysCallback(OAIHttpRequestWorker *worker);
    void postUserPublicKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getUserApiKeysSignal(QList<OAIApiKeyEntity> summary);
    void getUserGroupsSignal(QList<OAIGroupUserEntity> summary);
    void getUserPublicKeysSignal(QList<OAIPublicKeyEntity> summary);
    void patchUserSignal(OAIUserEntity summary);
    void postUserApiKeysSignal(OAIApiKeyEntity summary);
    void postUserPublicKeysSignal(OAIPublicKeyEntity summary);


    void getUserApiKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKeyEntity> summary);
    void getUserGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupUserEntity> summary);
    void getUserPublicKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublicKeyEntity> summary);
    void patchUserSignalFull(OAIHttpRequestWorker *worker, OAIUserEntity summary);
    void postUserApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyEntity summary);
    void postUserPublicKeysSignalFull(OAIHttpRequestWorker *worker, OAIPublicKeyEntity summary);

    Q_DECL_DEPRECATED_X("Use getUserApiKeysSignalError() instead")
    void getUserApiKeysSignalE(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserApiKeysSignalError(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserGroupsSignalError() instead")
    void getUserGroupsSignalE(QList<OAIGroupUserEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalError(QList<OAIGroupUserEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPublicKeysSignalError() instead")
    void getUserPublicKeysSignalE(QList<OAIPublicKeyEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPublicKeysSignalError(QList<OAIPublicKeyEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUserSignalError() instead")
    void patchUserSignalE(OAIUserEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUserSignalError(OAIUserEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserApiKeysSignalError() instead")
    void postUserApiKeysSignalE(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserApiKeysSignalError(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserPublicKeysSignalError() instead")
    void postUserPublicKeysSignalE(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserPublicKeysSignalError(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getUserApiKeysSignalErrorFull() instead")
    void getUserApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserGroupsSignalErrorFull() instead")
    void getUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPublicKeysSignalErrorFull() instead")
    void getUserPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUserSignalErrorFull() instead")
    void patchUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserApiKeysSignalErrorFull() instead")
    void postUserApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserPublicKeysSignalErrorFull() instead")
    void postUserPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
