/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundleNotificationEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundleNotificationEntity::OAIBundleNotificationEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundleNotificationEntity::OAIBundleNotificationEntity() {
    this->initializeModel();
}

OAIBundleNotificationEntity::~OAIBundleNotificationEntity() {}

void OAIBundleNotificationEntity::initializeModel() {

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_notify_on_registration_isSet = false;
    m_notify_on_registration_isValid = false;

    m_notify_on_upload_isSet = false;
    m_notify_on_upload_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIBundleNotificationEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundleNotificationEntity::fromJsonObject(QJsonObject json) {

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("bundle_id")]);
    m_bundle_id_isSet = !json[QString("bundle_id")].isNull() && m_bundle_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_notify_on_registration_isValid = ::OpenAPI::fromJsonValue(m_notify_on_registration, json[QString("notify_on_registration")]);
    m_notify_on_registration_isSet = !json[QString("notify_on_registration")].isNull() && m_notify_on_registration_isValid;

    m_notify_on_upload_isValid = ::OpenAPI::fromJsonValue(m_notify_on_upload, json[QString("notify_on_upload")]);
    m_notify_on_upload_isSet = !json[QString("notify_on_upload")].isNull() && m_notify_on_upload_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIBundleNotificationEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundleNotificationEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_id_isSet) {
        obj.insert(QString("bundle_id"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_notify_on_registration_isSet) {
        obj.insert(QString("notify_on_registration"), ::OpenAPI::toJsonValue(m_notify_on_registration));
    }
    if (m_notify_on_upload_isSet) {
        obj.insert(QString("notify_on_upload"), ::OpenAPI::toJsonValue(m_notify_on_upload));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIBundleNotificationEntity::getBundleId() const {
    return m_bundle_id;
}
void OAIBundleNotificationEntity::setBundleId(const qint32 &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIBundleNotificationEntity::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIBundleNotificationEntity::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

qint32 OAIBundleNotificationEntity::getId() const {
    return m_id;
}
void OAIBundleNotificationEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBundleNotificationEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBundleNotificationEntity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIBundleNotificationEntity::isNotifyOnRegistration() const {
    return m_notify_on_registration;
}
void OAIBundleNotificationEntity::setNotifyOnRegistration(const bool &notify_on_registration) {
    m_notify_on_registration = notify_on_registration;
    m_notify_on_registration_isSet = true;
}

bool OAIBundleNotificationEntity::is_notify_on_registration_Set() const{
    return m_notify_on_registration_isSet;
}

bool OAIBundleNotificationEntity::is_notify_on_registration_Valid() const{
    return m_notify_on_registration_isValid;
}

bool OAIBundleNotificationEntity::isNotifyOnUpload() const {
    return m_notify_on_upload;
}
void OAIBundleNotificationEntity::setNotifyOnUpload(const bool &notify_on_upload) {
    m_notify_on_upload = notify_on_upload;
    m_notify_on_upload_isSet = true;
}

bool OAIBundleNotificationEntity::is_notify_on_upload_Set() const{
    return m_notify_on_upload_isSet;
}

bool OAIBundleNotificationEntity::is_notify_on_upload_Valid() const{
    return m_notify_on_upload_isValid;
}

qint32 OAIBundleNotificationEntity::getUserId() const {
    return m_user_id;
}
void OAIBundleNotificationEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIBundleNotificationEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIBundleNotificationEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIBundleNotificationEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundleNotificationEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
