/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileUploadPartEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileUploadPartEntity::OAIFileUploadPartEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileUploadPartEntity::OAIFileUploadPartEntity() {
    this->initializeModel();
}

OAIFileUploadPartEntity::~OAIFileUploadPartEntity() {}

void OAIFileUploadPartEntity::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_ask_about_overwrites_isSet = false;
    m_ask_about_overwrites_isValid = false;

    m_available_parts_isSet = false;
    m_available_parts_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_next_partsize_isSet = false;
    m_next_partsize_isValid = false;

    m_parallel_parts_isSet = false;
    m_parallel_parts_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;

    m_partsize_isSet = false;
    m_partsize_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_retry_parts_isSet = false;
    m_retry_parts_isValid = false;

    m_send_isSet = false;
    m_send_isValid = false;

    m_upload_uri_isSet = false;
    m_upload_uri_isValid = false;
}

void OAIFileUploadPartEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileUploadPartEntity::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_ask_about_overwrites_isValid = ::OpenAPI::fromJsonValue(m_ask_about_overwrites, json[QString("ask_about_overwrites")]);
    m_ask_about_overwrites_isSet = !json[QString("ask_about_overwrites")].isNull() && m_ask_about_overwrites_isValid;

    m_available_parts_isValid = ::OpenAPI::fromJsonValue(m_available_parts, json[QString("available_parts")]);
    m_available_parts_isSet = !json[QString("available_parts")].isNull() && m_available_parts_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("http_method")]);
    m_http_method_isSet = !json[QString("http_method")].isNull() && m_http_method_isValid;

    m_next_partsize_isValid = ::OpenAPI::fromJsonValue(m_next_partsize, json[QString("next_partsize")]);
    m_next_partsize_isSet = !json[QString("next_partsize")].isNull() && m_next_partsize_isValid;

    m_parallel_parts_isValid = ::OpenAPI::fromJsonValue(m_parallel_parts, json[QString("parallel_parts")]);
    m_parallel_parts_isSet = !json[QString("parallel_parts")].isNull() && m_parallel_parts_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("part_number")]);
    m_part_number_isSet = !json[QString("part_number")].isNull() && m_part_number_isValid;

    m_partsize_isValid = ::OpenAPI::fromJsonValue(m_partsize, json[QString("partsize")]);
    m_partsize_isSet = !json[QString("partsize")].isNull() && m_partsize_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_retry_parts_isValid = ::OpenAPI::fromJsonValue(m_retry_parts, json[QString("retry_parts")]);
    m_retry_parts_isSet = !json[QString("retry_parts")].isNull() && m_retry_parts_isValid;

    m_send_isValid = ::OpenAPI::fromJsonValue(m_send, json[QString("send")]);
    m_send_isSet = !json[QString("send")].isNull() && m_send_isValid;

    m_upload_uri_isValid = ::OpenAPI::fromJsonValue(m_upload_uri, json[QString("upload_uri")]);
    m_upload_uri_isSet = !json[QString("upload_uri")].isNull() && m_upload_uri_isValid;
}

QString OAIFileUploadPartEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileUploadPartEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_ask_about_overwrites_isSet) {
        obj.insert(QString("ask_about_overwrites"), ::OpenAPI::toJsonValue(m_ask_about_overwrites));
    }
    if (m_available_parts_isSet) {
        obj.insert(QString("available_parts"), ::OpenAPI::toJsonValue(m_available_parts));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("http_method"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_next_partsize_isSet) {
        obj.insert(QString("next_partsize"), ::OpenAPI::toJsonValue(m_next_partsize));
    }
    if (m_parallel_parts_isSet) {
        obj.insert(QString("parallel_parts"), ::OpenAPI::toJsonValue(m_parallel_parts));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("part_number"), ::OpenAPI::toJsonValue(m_part_number));
    }
    if (m_partsize_isSet) {
        obj.insert(QString("partsize"), ::OpenAPI::toJsonValue(m_partsize));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_retry_parts_isSet) {
        obj.insert(QString("retry_parts"), ::OpenAPI::toJsonValue(m_retry_parts));
    }
    if (m_send_isSet) {
        obj.insert(QString("send"), ::OpenAPI::toJsonValue(m_send));
    }
    if (m_upload_uri_isSet) {
        obj.insert(QString("upload_uri"), ::OpenAPI::toJsonValue(m_upload_uri));
    }
    return obj;
}

QString OAIFileUploadPartEntity::getAction() const {
    return m_action;
}
void OAIFileUploadPartEntity::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIFileUploadPartEntity::is_action_Set() const{
    return m_action_isSet;
}

bool OAIFileUploadPartEntity::is_action_Valid() const{
    return m_action_isValid;
}

bool OAIFileUploadPartEntity::isAskAboutOverwrites() const {
    return m_ask_about_overwrites;
}
void OAIFileUploadPartEntity::setAskAboutOverwrites(const bool &ask_about_overwrites) {
    m_ask_about_overwrites = ask_about_overwrites;
    m_ask_about_overwrites_isSet = true;
}

bool OAIFileUploadPartEntity::is_ask_about_overwrites_Set() const{
    return m_ask_about_overwrites_isSet;
}

bool OAIFileUploadPartEntity::is_ask_about_overwrites_Valid() const{
    return m_ask_about_overwrites_isValid;
}

qint32 OAIFileUploadPartEntity::getAvailableParts() const {
    return m_available_parts;
}
void OAIFileUploadPartEntity::setAvailableParts(const qint32 &available_parts) {
    m_available_parts = available_parts;
    m_available_parts_isSet = true;
}

bool OAIFileUploadPartEntity::is_available_parts_Set() const{
    return m_available_parts_isSet;
}

bool OAIFileUploadPartEntity::is_available_parts_Valid() const{
    return m_available_parts_isValid;
}

QString OAIFileUploadPartEntity::getExpires() const {
    return m_expires;
}
void OAIFileUploadPartEntity::setExpires(const QString &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIFileUploadPartEntity::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIFileUploadPartEntity::is_expires_Valid() const{
    return m_expires_isValid;
}

OAIObject OAIFileUploadPartEntity::getHeaders() const {
    return m_headers;
}
void OAIFileUploadPartEntity::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIFileUploadPartEntity::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIFileUploadPartEntity::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIFileUploadPartEntity::getHttpMethod() const {
    return m_http_method;
}
void OAIFileUploadPartEntity::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIFileUploadPartEntity::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIFileUploadPartEntity::is_http_method_Valid() const{
    return m_http_method_isValid;
}

qint32 OAIFileUploadPartEntity::getNextPartsize() const {
    return m_next_partsize;
}
void OAIFileUploadPartEntity::setNextPartsize(const qint32 &next_partsize) {
    m_next_partsize = next_partsize;
    m_next_partsize_isSet = true;
}

bool OAIFileUploadPartEntity::is_next_partsize_Set() const{
    return m_next_partsize_isSet;
}

bool OAIFileUploadPartEntity::is_next_partsize_Valid() const{
    return m_next_partsize_isValid;
}

bool OAIFileUploadPartEntity::isParallelParts() const {
    return m_parallel_parts;
}
void OAIFileUploadPartEntity::setParallelParts(const bool &parallel_parts) {
    m_parallel_parts = parallel_parts;
    m_parallel_parts_isSet = true;
}

bool OAIFileUploadPartEntity::is_parallel_parts_Set() const{
    return m_parallel_parts_isSet;
}

bool OAIFileUploadPartEntity::is_parallel_parts_Valid() const{
    return m_parallel_parts_isValid;
}

OAIObject OAIFileUploadPartEntity::getParameters() const {
    return m_parameters;
}
void OAIFileUploadPartEntity::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIFileUploadPartEntity::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIFileUploadPartEntity::is_parameters_Valid() const{
    return m_parameters_isValid;
}

qint32 OAIFileUploadPartEntity::getPartNumber() const {
    return m_part_number;
}
void OAIFileUploadPartEntity::setPartNumber(const qint32 &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIFileUploadPartEntity::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIFileUploadPartEntity::is_part_number_Valid() const{
    return m_part_number_isValid;
}

qint32 OAIFileUploadPartEntity::getPartsize() const {
    return m_partsize;
}
void OAIFileUploadPartEntity::setPartsize(const qint32 &partsize) {
    m_partsize = partsize;
    m_partsize_isSet = true;
}

bool OAIFileUploadPartEntity::is_partsize_Set() const{
    return m_partsize_isSet;
}

bool OAIFileUploadPartEntity::is_partsize_Valid() const{
    return m_partsize_isValid;
}

QString OAIFileUploadPartEntity::getPath() const {
    return m_path;
}
void OAIFileUploadPartEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIFileUploadPartEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIFileUploadPartEntity::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIFileUploadPartEntity::getRef() const {
    return m_ref;
}
void OAIFileUploadPartEntity::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIFileUploadPartEntity::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIFileUploadPartEntity::is_ref_Valid() const{
    return m_ref_isValid;
}

bool OAIFileUploadPartEntity::isRetryParts() const {
    return m_retry_parts;
}
void OAIFileUploadPartEntity::setRetryParts(const bool &retry_parts) {
    m_retry_parts = retry_parts;
    m_retry_parts_isSet = true;
}

bool OAIFileUploadPartEntity::is_retry_parts_Set() const{
    return m_retry_parts_isSet;
}

bool OAIFileUploadPartEntity::is_retry_parts_Valid() const{
    return m_retry_parts_isValid;
}

OAIObject OAIFileUploadPartEntity::getSend() const {
    return m_send;
}
void OAIFileUploadPartEntity::setSend(const OAIObject &send) {
    m_send = send;
    m_send_isSet = true;
}

bool OAIFileUploadPartEntity::is_send_Set() const{
    return m_send_isSet;
}

bool OAIFileUploadPartEntity::is_send_Valid() const{
    return m_send_isValid;
}

QString OAIFileUploadPartEntity::getUploadUri() const {
    return m_upload_uri;
}
void OAIFileUploadPartEntity::setUploadUri(const QString &upload_uri) {
    m_upload_uri = upload_uri;
    m_upload_uri_isSet = true;
}

bool OAIFileUploadPartEntity::is_upload_uri_Set() const{
    return m_upload_uri_isSet;
}

bool OAIFileUploadPartEntity::is_upload_uri_Valid() const{
    return m_upload_uri_isValid;
}

bool OAIFileUploadPartEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ask_about_overwrites_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_parts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_partsize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_parts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partsize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_parts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileUploadPartEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
