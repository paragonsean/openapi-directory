/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteServersApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIRemoteServersApi::OAIRemoteServersApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIRemoteServersApi::~OAIRemoteServersApi() {
}

void OAIRemoteServersApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("//app.files.com/api/rest/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteRemoteServersId", defaultConf);
    _serverIndices.insert("deleteRemoteServersId", 0);
    _serverConfigs.insert("getRemoteServers", defaultConf);
    _serverIndices.insert("getRemoteServers", 0);
    _serverConfigs.insert("getRemoteServersId", defaultConf);
    _serverIndices.insert("getRemoteServersId", 0);
    _serverConfigs.insert("getRemoteServersIdConfigurationFile", defaultConf);
    _serverIndices.insert("getRemoteServersIdConfigurationFile", 0);
    _serverConfigs.insert("patchRemoteServersId", defaultConf);
    _serverIndices.insert("patchRemoteServersId", 0);
    _serverConfigs.insert("postRemoteServers", defaultConf);
    _serverIndices.insert("postRemoteServers", 0);
    _serverConfigs.insert("postRemoteServersIdConfigurationFile", defaultConf);
    _serverIndices.insert("postRemoteServersIdConfigurationFile", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIRemoteServersApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIRemoteServersApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIRemoteServersApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIRemoteServersApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIRemoteServersApi::setUsername(const QString &username) {
    _username = username;
}

void OAIRemoteServersApi::setPassword(const QString &password) {
    _password = password;
}


void OAIRemoteServersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIRemoteServersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIRemoteServersApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIRemoteServersApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRemoteServersApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRemoteServersApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIRemoteServersApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIRemoteServersApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIRemoteServersApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIRemoteServersApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIRemoteServersApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIRemoteServersApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIRemoteServersApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIRemoteServersApi::deleteRemoteServersId(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["deleteRemoteServersId"][_serverIndices.value("deleteRemoteServersId")].URL()+"/remote_servers/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRemoteServersApi::deleteRemoteServersIdCallback);
    connect(this, &OAIRemoteServersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRemoteServersApi::deleteRemoteServersIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteRemoteServersIdSignal();
        Q_EMIT deleteRemoteServersIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteRemoteServersIdSignalE(error_type, error_str);
        Q_EMIT deleteRemoteServersIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteRemoteServersIdSignalError(error_type, error_str);
        Q_EMIT deleteRemoteServersIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRemoteServersApi::getRemoteServers(const ::OpenAPI::OptionalParam<QString> &cursor, const ::OpenAPI::OptionalParam<qint32> &per_page) {
    QString fullPath = QString(_serverConfigs["getRemoteServers"][_serverIndices.value("getRemoteServers")].URL()+"/remote_servers");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (cursor.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "cursor", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("cursor")).append(querySuffix).append(QUrl::toPercentEncoding(cursor.stringValue()));
    }
    if (per_page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "per_page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("per_page")).append(querySuffix).append(QUrl::toPercentEncoding(per_page.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRemoteServersApi::getRemoteServersCallback);
    connect(this, &OAIRemoteServersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRemoteServersApi::getRemoteServersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIRemoteServerEntity> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIRemoteServerEntity val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRemoteServersSignal(output);
        Q_EMIT getRemoteServersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRemoteServersSignalE(output, error_type, error_str);
        Q_EMIT getRemoteServersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRemoteServersSignalError(output, error_type, error_str);
        Q_EMIT getRemoteServersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRemoteServersApi::getRemoteServersId(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["getRemoteServersId"][_serverIndices.value("getRemoteServersId")].URL()+"/remote_servers/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRemoteServersApi::getRemoteServersIdCallback);
    connect(this, &OAIRemoteServersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRemoteServersApi::getRemoteServersIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRemoteServerEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRemoteServersIdSignal(output);
        Q_EMIT getRemoteServersIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRemoteServersIdSignalE(output, error_type, error_str);
        Q_EMIT getRemoteServersIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRemoteServersIdSignalError(output, error_type, error_str);
        Q_EMIT getRemoteServersIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRemoteServersApi::getRemoteServersIdConfigurationFile(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["getRemoteServersIdConfigurationFile"][_serverIndices.value("getRemoteServersIdConfigurationFile")].URL()+"/remote_servers/{id}/configuration_file");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRemoteServersApi::getRemoteServersIdConfigurationFileCallback);
    connect(this, &OAIRemoteServersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRemoteServersApi::getRemoteServersIdConfigurationFileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRemoteServerConfigurationFileEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getRemoteServersIdConfigurationFileSignal(output);
        Q_EMIT getRemoteServersIdConfigurationFileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getRemoteServersIdConfigurationFileSignalE(output, error_type, error_str);
        Q_EMIT getRemoteServersIdConfigurationFileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getRemoteServersIdConfigurationFileSignalError(output, error_type, error_str);
        Q_EMIT getRemoteServersIdConfigurationFileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRemoteServersApi::patchRemoteServersId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &aws_access_key, const ::OpenAPI::OptionalParam<QString> &aws_secret_key, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_access_key, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_account, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_container, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_sas_token, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_access_key, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_account, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_sas_token, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_share_name, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_application_key, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_bucket, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_key_id, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_s3_endpoint, const ::OpenAPI::OptionalParam<bool> &enable_dedicated_ips, const ::OpenAPI::OptionalParam<QString> &filebase_access_key, const ::OpenAPI::OptionalParam<QString> &filebase_bucket, const ::OpenAPI::OptionalParam<QString> &filebase_secret_key, const ::OpenAPI::OptionalParam<QString> &files_agent_permission_set, const ::OpenAPI::OptionalParam<QString> &files_agent_root, const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_bucket, const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_credentials_json, const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_project_id, const ::OpenAPI::OptionalParam<QString> &hostname, const ::OpenAPI::OptionalParam<qint32> &max_connections, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &one_drive_account_type, const ::OpenAPI::OptionalParam<QString> &password, const ::OpenAPI::OptionalParam<bool> &pin_to_site_region, const ::OpenAPI::OptionalParam<qint32> &port, const ::OpenAPI::OptionalParam<QString> &private_key, const ::OpenAPI::OptionalParam<QString> &private_key_passphrase, const ::OpenAPI::OptionalParam<QString> &rackspace_api_key, const ::OpenAPI::OptionalParam<QString> &rackspace_container, const ::OpenAPI::OptionalParam<QString> &rackspace_region, const ::OpenAPI::OptionalParam<QString> &rackspace_username, const ::OpenAPI::OptionalParam<bool> &reset_authentication, const ::OpenAPI::OptionalParam<QString> &s3_bucket, const ::OpenAPI::OptionalParam<QString> &s3_compatible_access_key, const ::OpenAPI::OptionalParam<QString> &s3_compatible_bucket, const ::OpenAPI::OptionalParam<QString> &s3_compatible_endpoint, const ::OpenAPI::OptionalParam<QString> &s3_compatible_region, const ::OpenAPI::OptionalParam<QString> &s3_compatible_secret_key, const ::OpenAPI::OptionalParam<QString> &s3_region, const ::OpenAPI::OptionalParam<QString> &server_certificate, const ::OpenAPI::OptionalParam<QString> &server_host_key, const ::OpenAPI::OptionalParam<QString> &server_type, const ::OpenAPI::OptionalParam<QString> &ssl, const ::OpenAPI::OptionalParam<QString> &ssl_certificate, const ::OpenAPI::OptionalParam<QString> &username, const ::OpenAPI::OptionalParam<QString> &wasabi_access_key, const ::OpenAPI::OptionalParam<QString> &wasabi_bucket, const ::OpenAPI::OptionalParam<QString> &wasabi_region, const ::OpenAPI::OptionalParam<QString> &wasabi_secret_key) {
    QString fullPath = QString(_serverConfigs["patchRemoteServersId"][_serverIndices.value("patchRemoteServersId")].URL()+"/remote_servers/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (aws_access_key.hasValue())
    {
        input.add_var("aws_access_key", ::OpenAPI::toStringValue(aws_access_key.value()));
    }
    if (aws_secret_key.hasValue())
    {
        input.add_var("aws_secret_key", ::OpenAPI::toStringValue(aws_secret_key.value()));
    }
    if (azure_blob_storage_access_key.hasValue())
    {
        input.add_var("azure_blob_storage_access_key", ::OpenAPI::toStringValue(azure_blob_storage_access_key.value()));
    }
    if (azure_blob_storage_account.hasValue())
    {
        input.add_var("azure_blob_storage_account", ::OpenAPI::toStringValue(azure_blob_storage_account.value()));
    }
    if (azure_blob_storage_container.hasValue())
    {
        input.add_var("azure_blob_storage_container", ::OpenAPI::toStringValue(azure_blob_storage_container.value()));
    }
    if (azure_blob_storage_sas_token.hasValue())
    {
        input.add_var("azure_blob_storage_sas_token", ::OpenAPI::toStringValue(azure_blob_storage_sas_token.value()));
    }
    if (azure_files_storage_access_key.hasValue())
    {
        input.add_var("azure_files_storage_access_key", ::OpenAPI::toStringValue(azure_files_storage_access_key.value()));
    }
    if (azure_files_storage_account.hasValue())
    {
        input.add_var("azure_files_storage_account", ::OpenAPI::toStringValue(azure_files_storage_account.value()));
    }
    if (azure_files_storage_sas_token.hasValue())
    {
        input.add_var("azure_files_storage_sas_token", ::OpenAPI::toStringValue(azure_files_storage_sas_token.value()));
    }
    if (azure_files_storage_share_name.hasValue())
    {
        input.add_var("azure_files_storage_share_name", ::OpenAPI::toStringValue(azure_files_storage_share_name.value()));
    }
    if (backblaze_b2_application_key.hasValue())
    {
        input.add_var("backblaze_b2_application_key", ::OpenAPI::toStringValue(backblaze_b2_application_key.value()));
    }
    if (backblaze_b2_bucket.hasValue())
    {
        input.add_var("backblaze_b2_bucket", ::OpenAPI::toStringValue(backblaze_b2_bucket.value()));
    }
    if (backblaze_b2_key_id.hasValue())
    {
        input.add_var("backblaze_b2_key_id", ::OpenAPI::toStringValue(backblaze_b2_key_id.value()));
    }
    if (backblaze_b2_s3_endpoint.hasValue())
    {
        input.add_var("backblaze_b2_s3_endpoint", ::OpenAPI::toStringValue(backblaze_b2_s3_endpoint.value()));
    }
    if (enable_dedicated_ips.hasValue())
    {
        input.add_var("enable_dedicated_ips", ::OpenAPI::toStringValue(enable_dedicated_ips.value()));
    }
    if (filebase_access_key.hasValue())
    {
        input.add_var("filebase_access_key", ::OpenAPI::toStringValue(filebase_access_key.value()));
    }
    if (filebase_bucket.hasValue())
    {
        input.add_var("filebase_bucket", ::OpenAPI::toStringValue(filebase_bucket.value()));
    }
    if (filebase_secret_key.hasValue())
    {
        input.add_var("filebase_secret_key", ::OpenAPI::toStringValue(filebase_secret_key.value()));
    }
    if (files_agent_permission_set.hasValue())
    {
        input.add_var("files_agent_permission_set", ::OpenAPI::toStringValue(files_agent_permission_set.value()));
    }
    if (files_agent_root.hasValue())
    {
        input.add_var("files_agent_root", ::OpenAPI::toStringValue(files_agent_root.value()));
    }
    if (google_cloud_storage_bucket.hasValue())
    {
        input.add_var("google_cloud_storage_bucket", ::OpenAPI::toStringValue(google_cloud_storage_bucket.value()));
    }
    if (google_cloud_storage_credentials_json.hasValue())
    {
        input.add_var("google_cloud_storage_credentials_json", ::OpenAPI::toStringValue(google_cloud_storage_credentials_json.value()));
    }
    if (google_cloud_storage_project_id.hasValue())
    {
        input.add_var("google_cloud_storage_project_id", ::OpenAPI::toStringValue(google_cloud_storage_project_id.value()));
    }
    if (hostname.hasValue())
    {
        input.add_var("hostname", ::OpenAPI::toStringValue(hostname.value()));
    }
    if (max_connections.hasValue())
    {
        input.add_var("max_connections", ::OpenAPI::toStringValue(max_connections.value()));
    }
    if (name.hasValue())
    {
        input.add_var("name", ::OpenAPI::toStringValue(name.value()));
    }
    if (one_drive_account_type.hasValue())
    {
        input.add_var("one_drive_account_type", ::OpenAPI::toStringValue(one_drive_account_type.value()));
    }
    if (password.hasValue())
    {
        input.add_var("password", ::OpenAPI::toStringValue(password.value()));
    }
    if (pin_to_site_region.hasValue())
    {
        input.add_var("pin_to_site_region", ::OpenAPI::toStringValue(pin_to_site_region.value()));
    }
    if (port.hasValue())
    {
        input.add_var("port", ::OpenAPI::toStringValue(port.value()));
    }
    if (private_key.hasValue())
    {
        input.add_var("private_key", ::OpenAPI::toStringValue(private_key.value()));
    }
    if (private_key_passphrase.hasValue())
    {
        input.add_var("private_key_passphrase", ::OpenAPI::toStringValue(private_key_passphrase.value()));
    }
    if (rackspace_api_key.hasValue())
    {
        input.add_var("rackspace_api_key", ::OpenAPI::toStringValue(rackspace_api_key.value()));
    }
    if (rackspace_container.hasValue())
    {
        input.add_var("rackspace_container", ::OpenAPI::toStringValue(rackspace_container.value()));
    }
    if (rackspace_region.hasValue())
    {
        input.add_var("rackspace_region", ::OpenAPI::toStringValue(rackspace_region.value()));
    }
    if (rackspace_username.hasValue())
    {
        input.add_var("rackspace_username", ::OpenAPI::toStringValue(rackspace_username.value()));
    }
    if (reset_authentication.hasValue())
    {
        input.add_var("reset_authentication", ::OpenAPI::toStringValue(reset_authentication.value()));
    }
    if (s3_bucket.hasValue())
    {
        input.add_var("s3_bucket", ::OpenAPI::toStringValue(s3_bucket.value()));
    }
    if (s3_compatible_access_key.hasValue())
    {
        input.add_var("s3_compatible_access_key", ::OpenAPI::toStringValue(s3_compatible_access_key.value()));
    }
    if (s3_compatible_bucket.hasValue())
    {
        input.add_var("s3_compatible_bucket", ::OpenAPI::toStringValue(s3_compatible_bucket.value()));
    }
    if (s3_compatible_endpoint.hasValue())
    {
        input.add_var("s3_compatible_endpoint", ::OpenAPI::toStringValue(s3_compatible_endpoint.value()));
    }
    if (s3_compatible_region.hasValue())
    {
        input.add_var("s3_compatible_region", ::OpenAPI::toStringValue(s3_compatible_region.value()));
    }
    if (s3_compatible_secret_key.hasValue())
    {
        input.add_var("s3_compatible_secret_key", ::OpenAPI::toStringValue(s3_compatible_secret_key.value()));
    }
    if (s3_region.hasValue())
    {
        input.add_var("s3_region", ::OpenAPI::toStringValue(s3_region.value()));
    }
    if (server_certificate.hasValue())
    {
        input.add_var("server_certificate", ::OpenAPI::toStringValue(server_certificate.value()));
    }
    if (server_host_key.hasValue())
    {
        input.add_var("server_host_key", ::OpenAPI::toStringValue(server_host_key.value()));
    }
    if (server_type.hasValue())
    {
        input.add_var("server_type", ::OpenAPI::toStringValue(server_type.value()));
    }
    if (ssl.hasValue())
    {
        input.add_var("ssl", ::OpenAPI::toStringValue(ssl.value()));
    }
    if (ssl_certificate.hasValue())
    {
        input.add_var("ssl_certificate", ::OpenAPI::toStringValue(ssl_certificate.value()));
    }
    if (username.hasValue())
    {
        input.add_var("username", ::OpenAPI::toStringValue(username.value()));
    }
    if (wasabi_access_key.hasValue())
    {
        input.add_var("wasabi_access_key", ::OpenAPI::toStringValue(wasabi_access_key.value()));
    }
    if (wasabi_bucket.hasValue())
    {
        input.add_var("wasabi_bucket", ::OpenAPI::toStringValue(wasabi_bucket.value()));
    }
    if (wasabi_region.hasValue())
    {
        input.add_var("wasabi_region", ::OpenAPI::toStringValue(wasabi_region.value()));
    }
    if (wasabi_secret_key.hasValue())
    {
        input.add_var("wasabi_secret_key", ::OpenAPI::toStringValue(wasabi_secret_key.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRemoteServersApi::patchRemoteServersIdCallback);
    connect(this, &OAIRemoteServersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRemoteServersApi::patchRemoteServersIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRemoteServerEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchRemoteServersIdSignal(output);
        Q_EMIT patchRemoteServersIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchRemoteServersIdSignalE(output, error_type, error_str);
        Q_EMIT patchRemoteServersIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchRemoteServersIdSignalError(output, error_type, error_str);
        Q_EMIT patchRemoteServersIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRemoteServersApi::postRemoteServers(const ::OpenAPI::OptionalParam<QString> &aws_access_key, const ::OpenAPI::OptionalParam<QString> &aws_secret_key, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_access_key, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_account, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_container, const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_sas_token, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_access_key, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_account, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_sas_token, const ::OpenAPI::OptionalParam<QString> &azure_files_storage_share_name, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_application_key, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_bucket, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_key_id, const ::OpenAPI::OptionalParam<QString> &backblaze_b2_s3_endpoint, const ::OpenAPI::OptionalParam<bool> &enable_dedicated_ips, const ::OpenAPI::OptionalParam<QString> &filebase_access_key, const ::OpenAPI::OptionalParam<QString> &filebase_bucket, const ::OpenAPI::OptionalParam<QString> &filebase_secret_key, const ::OpenAPI::OptionalParam<QString> &files_agent_permission_set, const ::OpenAPI::OptionalParam<QString> &files_agent_root, const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_bucket, const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_credentials_json, const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_project_id, const ::OpenAPI::OptionalParam<QString> &hostname, const ::OpenAPI::OptionalParam<qint32> &max_connections, const ::OpenAPI::OptionalParam<QString> &name, const ::OpenAPI::OptionalParam<QString> &one_drive_account_type, const ::OpenAPI::OptionalParam<QString> &password, const ::OpenAPI::OptionalParam<bool> &pin_to_site_region, const ::OpenAPI::OptionalParam<qint32> &port, const ::OpenAPI::OptionalParam<QString> &private_key, const ::OpenAPI::OptionalParam<QString> &private_key_passphrase, const ::OpenAPI::OptionalParam<QString> &rackspace_api_key, const ::OpenAPI::OptionalParam<QString> &rackspace_container, const ::OpenAPI::OptionalParam<QString> &rackspace_region, const ::OpenAPI::OptionalParam<QString> &rackspace_username, const ::OpenAPI::OptionalParam<bool> &reset_authentication, const ::OpenAPI::OptionalParam<QString> &s3_bucket, const ::OpenAPI::OptionalParam<QString> &s3_compatible_access_key, const ::OpenAPI::OptionalParam<QString> &s3_compatible_bucket, const ::OpenAPI::OptionalParam<QString> &s3_compatible_endpoint, const ::OpenAPI::OptionalParam<QString> &s3_compatible_region, const ::OpenAPI::OptionalParam<QString> &s3_compatible_secret_key, const ::OpenAPI::OptionalParam<QString> &s3_region, const ::OpenAPI::OptionalParam<QString> &server_certificate, const ::OpenAPI::OptionalParam<QString> &server_host_key, const ::OpenAPI::OptionalParam<QString> &server_type, const ::OpenAPI::OptionalParam<QString> &ssl, const ::OpenAPI::OptionalParam<QString> &ssl_certificate, const ::OpenAPI::OptionalParam<QString> &username, const ::OpenAPI::OptionalParam<QString> &wasabi_access_key, const ::OpenAPI::OptionalParam<QString> &wasabi_bucket, const ::OpenAPI::OptionalParam<QString> &wasabi_region, const ::OpenAPI::OptionalParam<QString> &wasabi_secret_key) {
    QString fullPath = QString(_serverConfigs["postRemoteServers"][_serverIndices.value("postRemoteServers")].URL()+"/remote_servers");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (aws_access_key.hasValue())
    {
        input.add_var("aws_access_key", ::OpenAPI::toStringValue(aws_access_key.value()));
    }
    if (aws_secret_key.hasValue())
    {
        input.add_var("aws_secret_key", ::OpenAPI::toStringValue(aws_secret_key.value()));
    }
    if (azure_blob_storage_access_key.hasValue())
    {
        input.add_var("azure_blob_storage_access_key", ::OpenAPI::toStringValue(azure_blob_storage_access_key.value()));
    }
    if (azure_blob_storage_account.hasValue())
    {
        input.add_var("azure_blob_storage_account", ::OpenAPI::toStringValue(azure_blob_storage_account.value()));
    }
    if (azure_blob_storage_container.hasValue())
    {
        input.add_var("azure_blob_storage_container", ::OpenAPI::toStringValue(azure_blob_storage_container.value()));
    }
    if (azure_blob_storage_sas_token.hasValue())
    {
        input.add_var("azure_blob_storage_sas_token", ::OpenAPI::toStringValue(azure_blob_storage_sas_token.value()));
    }
    if (azure_files_storage_access_key.hasValue())
    {
        input.add_var("azure_files_storage_access_key", ::OpenAPI::toStringValue(azure_files_storage_access_key.value()));
    }
    if (azure_files_storage_account.hasValue())
    {
        input.add_var("azure_files_storage_account", ::OpenAPI::toStringValue(azure_files_storage_account.value()));
    }
    if (azure_files_storage_sas_token.hasValue())
    {
        input.add_var("azure_files_storage_sas_token", ::OpenAPI::toStringValue(azure_files_storage_sas_token.value()));
    }
    if (azure_files_storage_share_name.hasValue())
    {
        input.add_var("azure_files_storage_share_name", ::OpenAPI::toStringValue(azure_files_storage_share_name.value()));
    }
    if (backblaze_b2_application_key.hasValue())
    {
        input.add_var("backblaze_b2_application_key", ::OpenAPI::toStringValue(backblaze_b2_application_key.value()));
    }
    if (backblaze_b2_bucket.hasValue())
    {
        input.add_var("backblaze_b2_bucket", ::OpenAPI::toStringValue(backblaze_b2_bucket.value()));
    }
    if (backblaze_b2_key_id.hasValue())
    {
        input.add_var("backblaze_b2_key_id", ::OpenAPI::toStringValue(backblaze_b2_key_id.value()));
    }
    if (backblaze_b2_s3_endpoint.hasValue())
    {
        input.add_var("backblaze_b2_s3_endpoint", ::OpenAPI::toStringValue(backblaze_b2_s3_endpoint.value()));
    }
    if (enable_dedicated_ips.hasValue())
    {
        input.add_var("enable_dedicated_ips", ::OpenAPI::toStringValue(enable_dedicated_ips.value()));
    }
    if (filebase_access_key.hasValue())
    {
        input.add_var("filebase_access_key", ::OpenAPI::toStringValue(filebase_access_key.value()));
    }
    if (filebase_bucket.hasValue())
    {
        input.add_var("filebase_bucket", ::OpenAPI::toStringValue(filebase_bucket.value()));
    }
    if (filebase_secret_key.hasValue())
    {
        input.add_var("filebase_secret_key", ::OpenAPI::toStringValue(filebase_secret_key.value()));
    }
    if (files_agent_permission_set.hasValue())
    {
        input.add_var("files_agent_permission_set", ::OpenAPI::toStringValue(files_agent_permission_set.value()));
    }
    if (files_agent_root.hasValue())
    {
        input.add_var("files_agent_root", ::OpenAPI::toStringValue(files_agent_root.value()));
    }
    if (google_cloud_storage_bucket.hasValue())
    {
        input.add_var("google_cloud_storage_bucket", ::OpenAPI::toStringValue(google_cloud_storage_bucket.value()));
    }
    if (google_cloud_storage_credentials_json.hasValue())
    {
        input.add_var("google_cloud_storage_credentials_json", ::OpenAPI::toStringValue(google_cloud_storage_credentials_json.value()));
    }
    if (google_cloud_storage_project_id.hasValue())
    {
        input.add_var("google_cloud_storage_project_id", ::OpenAPI::toStringValue(google_cloud_storage_project_id.value()));
    }
    if (hostname.hasValue())
    {
        input.add_var("hostname", ::OpenAPI::toStringValue(hostname.value()));
    }
    if (max_connections.hasValue())
    {
        input.add_var("max_connections", ::OpenAPI::toStringValue(max_connections.value()));
    }
    if (name.hasValue())
    {
        input.add_var("name", ::OpenAPI::toStringValue(name.value()));
    }
    if (one_drive_account_type.hasValue())
    {
        input.add_var("one_drive_account_type", ::OpenAPI::toStringValue(one_drive_account_type.value()));
    }
    if (password.hasValue())
    {
        input.add_var("password", ::OpenAPI::toStringValue(password.value()));
    }
    if (pin_to_site_region.hasValue())
    {
        input.add_var("pin_to_site_region", ::OpenAPI::toStringValue(pin_to_site_region.value()));
    }
    if (port.hasValue())
    {
        input.add_var("port", ::OpenAPI::toStringValue(port.value()));
    }
    if (private_key.hasValue())
    {
        input.add_var("private_key", ::OpenAPI::toStringValue(private_key.value()));
    }
    if (private_key_passphrase.hasValue())
    {
        input.add_var("private_key_passphrase", ::OpenAPI::toStringValue(private_key_passphrase.value()));
    }
    if (rackspace_api_key.hasValue())
    {
        input.add_var("rackspace_api_key", ::OpenAPI::toStringValue(rackspace_api_key.value()));
    }
    if (rackspace_container.hasValue())
    {
        input.add_var("rackspace_container", ::OpenAPI::toStringValue(rackspace_container.value()));
    }
    if (rackspace_region.hasValue())
    {
        input.add_var("rackspace_region", ::OpenAPI::toStringValue(rackspace_region.value()));
    }
    if (rackspace_username.hasValue())
    {
        input.add_var("rackspace_username", ::OpenAPI::toStringValue(rackspace_username.value()));
    }
    if (reset_authentication.hasValue())
    {
        input.add_var("reset_authentication", ::OpenAPI::toStringValue(reset_authentication.value()));
    }
    if (s3_bucket.hasValue())
    {
        input.add_var("s3_bucket", ::OpenAPI::toStringValue(s3_bucket.value()));
    }
    if (s3_compatible_access_key.hasValue())
    {
        input.add_var("s3_compatible_access_key", ::OpenAPI::toStringValue(s3_compatible_access_key.value()));
    }
    if (s3_compatible_bucket.hasValue())
    {
        input.add_var("s3_compatible_bucket", ::OpenAPI::toStringValue(s3_compatible_bucket.value()));
    }
    if (s3_compatible_endpoint.hasValue())
    {
        input.add_var("s3_compatible_endpoint", ::OpenAPI::toStringValue(s3_compatible_endpoint.value()));
    }
    if (s3_compatible_region.hasValue())
    {
        input.add_var("s3_compatible_region", ::OpenAPI::toStringValue(s3_compatible_region.value()));
    }
    if (s3_compatible_secret_key.hasValue())
    {
        input.add_var("s3_compatible_secret_key", ::OpenAPI::toStringValue(s3_compatible_secret_key.value()));
    }
    if (s3_region.hasValue())
    {
        input.add_var("s3_region", ::OpenAPI::toStringValue(s3_region.value()));
    }
    if (server_certificate.hasValue())
    {
        input.add_var("server_certificate", ::OpenAPI::toStringValue(server_certificate.value()));
    }
    if (server_host_key.hasValue())
    {
        input.add_var("server_host_key", ::OpenAPI::toStringValue(server_host_key.value()));
    }
    if (server_type.hasValue())
    {
        input.add_var("server_type", ::OpenAPI::toStringValue(server_type.value()));
    }
    if (ssl.hasValue())
    {
        input.add_var("ssl", ::OpenAPI::toStringValue(ssl.value()));
    }
    if (ssl_certificate.hasValue())
    {
        input.add_var("ssl_certificate", ::OpenAPI::toStringValue(ssl_certificate.value()));
    }
    if (username.hasValue())
    {
        input.add_var("username", ::OpenAPI::toStringValue(username.value()));
    }
    if (wasabi_access_key.hasValue())
    {
        input.add_var("wasabi_access_key", ::OpenAPI::toStringValue(wasabi_access_key.value()));
    }
    if (wasabi_bucket.hasValue())
    {
        input.add_var("wasabi_bucket", ::OpenAPI::toStringValue(wasabi_bucket.value()));
    }
    if (wasabi_region.hasValue())
    {
        input.add_var("wasabi_region", ::OpenAPI::toStringValue(wasabi_region.value()));
    }
    if (wasabi_secret_key.hasValue())
    {
        input.add_var("wasabi_secret_key", ::OpenAPI::toStringValue(wasabi_secret_key.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRemoteServersApi::postRemoteServersCallback);
    connect(this, &OAIRemoteServersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRemoteServersApi::postRemoteServersCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRemoteServerEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postRemoteServersSignal(output);
        Q_EMIT postRemoteServersSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postRemoteServersSignalE(output, error_type, error_str);
        Q_EMIT postRemoteServersSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postRemoteServersSignalError(output, error_type, error_str);
        Q_EMIT postRemoteServersSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRemoteServersApi::postRemoteServersIdConfigurationFile(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &api_token, const ::OpenAPI::OptionalParam<QString> &config_version, const ::OpenAPI::OptionalParam<QString> &hostname, const ::OpenAPI::OptionalParam<QString> &permission_set, const ::OpenAPI::OptionalParam<qint32> &port, const ::OpenAPI::OptionalParam<QString> &private_key, const ::OpenAPI::OptionalParam<QString> &public_key, const ::OpenAPI::OptionalParam<QString> &root, const ::OpenAPI::OptionalParam<QString> &server_host_key, const ::OpenAPI::OptionalParam<QString> &status, const ::OpenAPI::OptionalParam<QString> &subdomain) {
    QString fullPath = QString(_serverConfigs["postRemoteServersIdConfigurationFile"][_serverIndices.value("postRemoteServersIdConfigurationFile")].URL()+"/remote_servers/{id}/configuration_file");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (api_token.hasValue())
    {
        input.add_var("api_token", ::OpenAPI::toStringValue(api_token.value()));
    }
    if (config_version.hasValue())
    {
        input.add_var("config_version", ::OpenAPI::toStringValue(config_version.value()));
    }
    if (hostname.hasValue())
    {
        input.add_var("hostname", ::OpenAPI::toStringValue(hostname.value()));
    }
    if (permission_set.hasValue())
    {
        input.add_var("permission_set", ::OpenAPI::toStringValue(permission_set.value()));
    }
    if (port.hasValue())
    {
        input.add_var("port", ::OpenAPI::toStringValue(port.value()));
    }
    if (private_key.hasValue())
    {
        input.add_var("private_key", ::OpenAPI::toStringValue(private_key.value()));
    }
    if (public_key.hasValue())
    {
        input.add_var("public_key", ::OpenAPI::toStringValue(public_key.value()));
    }
    if (root.hasValue())
    {
        input.add_var("root", ::OpenAPI::toStringValue(root.value()));
    }
    if (server_host_key.hasValue())
    {
        input.add_var("server_host_key", ::OpenAPI::toStringValue(server_host_key.value()));
    }
    if (status.hasValue())
    {
        input.add_var("status", ::OpenAPI::toStringValue(status.value()));
    }
    if (subdomain.hasValue())
    {
        input.add_var("subdomain", ::OpenAPI::toStringValue(subdomain.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRemoteServersApi::postRemoteServersIdConfigurationFileCallback);
    connect(this, &OAIRemoteServersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRemoteServersApi::postRemoteServersIdConfigurationFileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRemoteServerConfigurationFileEntity output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postRemoteServersIdConfigurationFileSignal(output);
        Q_EMIT postRemoteServersIdConfigurationFileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postRemoteServersIdConfigurationFileSignalE(output, error_type, error_str);
        Q_EMIT postRemoteServersIdConfigurationFileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postRemoteServersIdConfigurationFileSignalError(output, error_type, error_str);
        Q_EMIT postRemoteServersIdConfigurationFileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRemoteServersApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
