/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRemoteServersApi_H
#define OAI_OAIRemoteServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRemoteServerConfigurationFileEntity.h"
#include "OAIRemoteServerEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRemoteServersApi : public QObject {
    Q_OBJECT

public:
    OAIRemoteServersApi(const int timeOut = 0);
    ~OAIRemoteServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteRemoteServersId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getRemoteServers(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getRemoteServersId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getRemoteServersIdConfigurationFile(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  aws_access_key QString [optional]
    * @param[in]  aws_secret_key QString [optional]
    * @param[in]  azure_blob_storage_access_key QString [optional]
    * @param[in]  azure_blob_storage_account QString [optional]
    * @param[in]  azure_blob_storage_container QString [optional]
    * @param[in]  azure_blob_storage_sas_token QString [optional]
    * @param[in]  azure_files_storage_access_key QString [optional]
    * @param[in]  azure_files_storage_account QString [optional]
    * @param[in]  azure_files_storage_sas_token QString [optional]
    * @param[in]  azure_files_storage_share_name QString [optional]
    * @param[in]  backblaze_b2_application_key QString [optional]
    * @param[in]  backblaze_b2_bucket QString [optional]
    * @param[in]  backblaze_b2_key_id QString [optional]
    * @param[in]  backblaze_b2_s3_endpoint QString [optional]
    * @param[in]  enable_dedicated_ips bool [optional]
    * @param[in]  filebase_access_key QString [optional]
    * @param[in]  filebase_bucket QString [optional]
    * @param[in]  filebase_secret_key QString [optional]
    * @param[in]  files_agent_permission_set QString [optional]
    * @param[in]  files_agent_root QString [optional]
    * @param[in]  google_cloud_storage_bucket QString [optional]
    * @param[in]  google_cloud_storage_credentials_json QString [optional]
    * @param[in]  google_cloud_storage_project_id QString [optional]
    * @param[in]  hostname QString [optional]
    * @param[in]  max_connections qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  one_drive_account_type QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  pin_to_site_region bool [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  private_key QString [optional]
    * @param[in]  private_key_passphrase QString [optional]
    * @param[in]  rackspace_api_key QString [optional]
    * @param[in]  rackspace_container QString [optional]
    * @param[in]  rackspace_region QString [optional]
    * @param[in]  rackspace_username QString [optional]
    * @param[in]  reset_authentication bool [optional]
    * @param[in]  s3_bucket QString [optional]
    * @param[in]  s3_compatible_access_key QString [optional]
    * @param[in]  s3_compatible_bucket QString [optional]
    * @param[in]  s3_compatible_endpoint QString [optional]
    * @param[in]  s3_compatible_region QString [optional]
    * @param[in]  s3_compatible_secret_key QString [optional]
    * @param[in]  s3_region QString [optional]
    * @param[in]  server_certificate QString [optional]
    * @param[in]  server_host_key QString [optional]
    * @param[in]  server_type QString [optional]
    * @param[in]  ssl QString [optional]
    * @param[in]  ssl_certificate QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  wasabi_access_key QString [optional]
    * @param[in]  wasabi_bucket QString [optional]
    * @param[in]  wasabi_region QString [optional]
    * @param[in]  wasabi_secret_key QString [optional]
    */
    virtual void patchRemoteServersId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &aws_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aws_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_sas_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_sas_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_share_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_application_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_s3_endpoint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_dedicated_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filebase_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filebase_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filebase_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &files_agent_permission_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &files_agent_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_credentials_json = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hostname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_connections = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &one_drive_account_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pin_to_site_region = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &private_key_passphrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reset_authentication = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &s3_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_endpoint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_host_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssl_certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_secret_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  aws_access_key QString [optional]
    * @param[in]  aws_secret_key QString [optional]
    * @param[in]  azure_blob_storage_access_key QString [optional]
    * @param[in]  azure_blob_storage_account QString [optional]
    * @param[in]  azure_blob_storage_container QString [optional]
    * @param[in]  azure_blob_storage_sas_token QString [optional]
    * @param[in]  azure_files_storage_access_key QString [optional]
    * @param[in]  azure_files_storage_account QString [optional]
    * @param[in]  azure_files_storage_sas_token QString [optional]
    * @param[in]  azure_files_storage_share_name QString [optional]
    * @param[in]  backblaze_b2_application_key QString [optional]
    * @param[in]  backblaze_b2_bucket QString [optional]
    * @param[in]  backblaze_b2_key_id QString [optional]
    * @param[in]  backblaze_b2_s3_endpoint QString [optional]
    * @param[in]  enable_dedicated_ips bool [optional]
    * @param[in]  filebase_access_key QString [optional]
    * @param[in]  filebase_bucket QString [optional]
    * @param[in]  filebase_secret_key QString [optional]
    * @param[in]  files_agent_permission_set QString [optional]
    * @param[in]  files_agent_root QString [optional]
    * @param[in]  google_cloud_storage_bucket QString [optional]
    * @param[in]  google_cloud_storage_credentials_json QString [optional]
    * @param[in]  google_cloud_storage_project_id QString [optional]
    * @param[in]  hostname QString [optional]
    * @param[in]  max_connections qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  one_drive_account_type QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  pin_to_site_region bool [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  private_key QString [optional]
    * @param[in]  private_key_passphrase QString [optional]
    * @param[in]  rackspace_api_key QString [optional]
    * @param[in]  rackspace_container QString [optional]
    * @param[in]  rackspace_region QString [optional]
    * @param[in]  rackspace_username QString [optional]
    * @param[in]  reset_authentication bool [optional]
    * @param[in]  s3_bucket QString [optional]
    * @param[in]  s3_compatible_access_key QString [optional]
    * @param[in]  s3_compatible_bucket QString [optional]
    * @param[in]  s3_compatible_endpoint QString [optional]
    * @param[in]  s3_compatible_region QString [optional]
    * @param[in]  s3_compatible_secret_key QString [optional]
    * @param[in]  s3_region QString [optional]
    * @param[in]  server_certificate QString [optional]
    * @param[in]  server_host_key QString [optional]
    * @param[in]  server_type QString [optional]
    * @param[in]  ssl QString [optional]
    * @param[in]  ssl_certificate QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  wasabi_access_key QString [optional]
    * @param[in]  wasabi_bucket QString [optional]
    * @param[in]  wasabi_region QString [optional]
    * @param[in]  wasabi_secret_key QString [optional]
    */
    virtual void postRemoteServers(const ::OpenAPI::OptionalParam<QString> &aws_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aws_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_blob_storage_sas_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_sas_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &azure_files_storage_share_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_application_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &backblaze_b2_s3_endpoint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_dedicated_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filebase_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filebase_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filebase_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &files_agent_permission_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &files_agent_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_credentials_json = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &google_cloud_storage_project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hostname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_connections = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &one_drive_account_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pin_to_site_region = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &private_key_passphrase = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_container = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rackspace_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &reset_authentication = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &s3_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_endpoint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_compatible_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &s3_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_host_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ssl_certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_bucket = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wasabi_secret_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  api_token QString [optional]
    * @param[in]  config_version QString [optional]
    * @param[in]  hostname QString [optional]
    * @param[in]  permission_set QString [optional]
    * @param[in]  port qint32 [optional]
    * @param[in]  private_key QString [optional]
    * @param[in]  public_key QString [optional]
    * @param[in]  root QString [optional]
    * @param[in]  server_host_key QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  subdomain QString [optional]
    */
    virtual void postRemoteServersIdConfigurationFile(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &api_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &config_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hostname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_host_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subdomain = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteRemoteServersIdCallback(OAIHttpRequestWorker *worker);
    void getRemoteServersCallback(OAIHttpRequestWorker *worker);
    void getRemoteServersIdCallback(OAIHttpRequestWorker *worker);
    void getRemoteServersIdConfigurationFileCallback(OAIHttpRequestWorker *worker);
    void patchRemoteServersIdCallback(OAIHttpRequestWorker *worker);
    void postRemoteServersCallback(OAIHttpRequestWorker *worker);
    void postRemoteServersIdConfigurationFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteRemoteServersIdSignal();
    void getRemoteServersSignal(QList<OAIRemoteServerEntity> summary);
    void getRemoteServersIdSignal(OAIRemoteServerEntity summary);
    void getRemoteServersIdConfigurationFileSignal(OAIRemoteServerConfigurationFileEntity summary);
    void patchRemoteServersIdSignal(OAIRemoteServerEntity summary);
    void postRemoteServersSignal(OAIRemoteServerEntity summary);
    void postRemoteServersIdConfigurationFileSignal(OAIRemoteServerConfigurationFileEntity summary);


    void deleteRemoteServersIdSignalFull(OAIHttpRequestWorker *worker);
    void getRemoteServersSignalFull(OAIHttpRequestWorker *worker, QList<OAIRemoteServerEntity> summary);
    void getRemoteServersIdSignalFull(OAIHttpRequestWorker *worker, OAIRemoteServerEntity summary);
    void getRemoteServersIdConfigurationFileSignalFull(OAIHttpRequestWorker *worker, OAIRemoteServerConfigurationFileEntity summary);
    void patchRemoteServersIdSignalFull(OAIHttpRequestWorker *worker, OAIRemoteServerEntity summary);
    void postRemoteServersSignalFull(OAIHttpRequestWorker *worker, OAIRemoteServerEntity summary);
    void postRemoteServersIdConfigurationFileSignalFull(OAIHttpRequestWorker *worker, OAIRemoteServerConfigurationFileEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteRemoteServersIdSignalError() instead")
    void deleteRemoteServersIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteServersIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteServersSignalError() instead")
    void getRemoteServersSignalE(QList<OAIRemoteServerEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteServersSignalError(QList<OAIRemoteServerEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteServersIdSignalError() instead")
    void getRemoteServersIdSignalE(OAIRemoteServerEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteServersIdSignalError(OAIRemoteServerEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteServersIdConfigurationFileSignalError() instead")
    void getRemoteServersIdConfigurationFileSignalE(OAIRemoteServerConfigurationFileEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteServersIdConfigurationFileSignalError(OAIRemoteServerConfigurationFileEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchRemoteServersIdSignalError() instead")
    void patchRemoteServersIdSignalE(OAIRemoteServerEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchRemoteServersIdSignalError(OAIRemoteServerEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRemoteServersSignalError() instead")
    void postRemoteServersSignalE(OAIRemoteServerEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRemoteServersSignalError(OAIRemoteServerEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRemoteServersIdConfigurationFileSignalError() instead")
    void postRemoteServersIdConfigurationFileSignalE(OAIRemoteServerConfigurationFileEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRemoteServersIdConfigurationFileSignalError(OAIRemoteServerConfigurationFileEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteRemoteServersIdSignalErrorFull() instead")
    void deleteRemoteServersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRemoteServersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteServersSignalErrorFull() instead")
    void getRemoteServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteServersIdSignalErrorFull() instead")
    void getRemoteServersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteServersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRemoteServersIdConfigurationFileSignalErrorFull() instead")
    void getRemoteServersIdConfigurationFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRemoteServersIdConfigurationFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchRemoteServersIdSignalErrorFull() instead")
    void patchRemoteServersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchRemoteServersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRemoteServersSignalErrorFull() instead")
    void postRemoteServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRemoteServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRemoteServersIdConfigurationFileSignalErrorFull() instead")
    void postRemoteServersIdConfigurationFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRemoteServersIdConfigurationFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
