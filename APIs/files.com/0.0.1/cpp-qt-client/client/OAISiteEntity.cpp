/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteEntity::OAISiteEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteEntity::OAISiteEntity() {
    this->initializeModel();
}

OAISiteEntity::~OAISiteEntity() {}

void OAISiteEntity::initializeModel() {

    m_active_sftp_host_key_id_isSet = false;
    m_active_sftp_host_key_id_isValid = false;

    m_admin_user_id_isSet = false;
    m_admin_user_id_isValid = false;

    m_allow_bundle_names_isSet = false;
    m_allow_bundle_names_isValid = false;

    m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isSet = false;
    m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isValid = false;

    m_allowed_2fa_method_sms_isSet = false;
    m_allowed_2fa_method_sms_isValid = false;

    m_allowed_2fa_method_totp_isSet = false;
    m_allowed_2fa_method_totp_isValid = false;

    m_allowed_2fa_method_u2f_isSet = false;
    m_allowed_2fa_method_u2f_isValid = false;

    m_allowed_2fa_method_webauthn_isSet = false;
    m_allowed_2fa_method_webauthn_isValid = false;

    m_allowed_2fa_method_yubi_isSet = false;
    m_allowed_2fa_method_yubi_isValid = false;

    m_allowed_countries_isSet = false;
    m_allowed_countries_isValid = false;

    m_allowed_ips_isSet = false;
    m_allowed_ips_isValid = false;

    m_ask_about_overwrites_isSet = false;
    m_ask_about_overwrites_isValid = false;

    m_bundle_activity_notifications_isSet = false;
    m_bundle_activity_notifications_isValid = false;

    m_bundle_expiration_isSet = false;
    m_bundle_expiration_isValid = false;

    m_bundle_password_required_isSet = false;
    m_bundle_password_required_isValid = false;

    m_bundle_registration_notifications_isSet = false;
    m_bundle_registration_notifications_isValid = false;

    m_bundle_require_share_recipient_isSet = false;
    m_bundle_require_share_recipient_isValid = false;

    m_bundle_upload_receipt_notifications_isSet = false;
    m_bundle_upload_receipt_notifications_isValid = false;

    m_bundle_watermark_attachment_isSet = false;
    m_bundle_watermark_attachment_isValid = false;

    m_bundle_watermark_value_isSet = false;
    m_bundle_watermark_value_isValid = false;

    m_color2_left_isSet = false;
    m_color2_left_isValid = false;

    m_color2_link_isSet = false;
    m_color2_link_isValid = false;

    m_color2_text_isSet = false;
    m_color2_text_isValid = false;

    m_color2_top_isSet = false;
    m_color2_top_isValid = false;

    m_color2_top_text_isSet = false;
    m_color2_top_text_isValid = false;

    m_contact_name_isSet = false;
    m_contact_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_namespace_isSet = false;
    m_custom_namespace_isValid = false;

    m_days_to_retain_backups_isSet = false;
    m_days_to_retain_backups_isValid = false;

    m_default_time_zone_isSet = false;
    m_default_time_zone_isValid = false;

    m_desktop_app_isSet = false;
    m_desktop_app_isValid = false;

    m_desktop_app_session_ip_pinning_isSet = false;
    m_desktop_app_session_ip_pinning_isValid = false;

    m_desktop_app_session_lifetime_isSet = false;
    m_desktop_app_session_lifetime_isValid = false;

    m_disable_files_certificate_generation_isSet = false;
    m_disable_files_certificate_generation_isValid = false;

    m_disable_notifications_isSet = false;
    m_disable_notifications_isValid = false;

    m_disable_password_reset_isSet = false;
    m_disable_password_reset_isValid = false;

    m_disable_users_from_inactivity_period_days_isSet = false;
    m_disable_users_from_inactivity_period_days_isValid = false;

    m_disallowed_countries_isSet = false;
    m_disallowed_countries_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_domain_hsts_header_isSet = false;
    m_domain_hsts_header_isValid = false;

    m_domain_letsencrypt_chain_isSet = false;
    m_domain_letsencrypt_chain_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_folder_permissions_groups_only_isSet = false;
    m_folder_permissions_groups_only_isValid = false;

    m_ftp_enabled_isSet = false;
    m_ftp_enabled_isValid = false;

    m_hipaa_isSet = false;
    m_hipaa_isValid = false;

    m_icon128_isSet = false;
    m_icon128_isValid = false;

    m_icon16_isSet = false;
    m_icon16_isValid = false;

    m_icon32_isSet = false;
    m_icon32_isValid = false;

    m_icon48_isSet = false;
    m_icon48_isValid = false;

    m_immutable_files_set_at_isSet = false;
    m_immutable_files_set_at_isValid = false;

    m_include_password_in_welcome_email_isSet = false;
    m_include_password_in_welcome_email_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_ldap_base_dn_isSet = false;
    m_ldap_base_dn_isValid = false;

    m_ldap_domain_isSet = false;
    m_ldap_domain_isValid = false;

    m_ldap_enabled_isSet = false;
    m_ldap_enabled_isValid = false;

    m_ldap_group_action_isSet = false;
    m_ldap_group_action_isValid = false;

    m_ldap_group_exclusion_isSet = false;
    m_ldap_group_exclusion_isValid = false;

    m_ldap_group_inclusion_isSet = false;
    m_ldap_group_inclusion_isValid = false;

    m_ldap_host_isSet = false;
    m_ldap_host_isValid = false;

    m_ldap_host_2_isSet = false;
    m_ldap_host_2_isValid = false;

    m_ldap_host_3_isSet = false;
    m_ldap_host_3_isValid = false;

    m_ldap_port_isSet = false;
    m_ldap_port_isValid = false;

    m_ldap_secure_isSet = false;
    m_ldap_secure_isValid = false;

    m_ldap_type_isSet = false;
    m_ldap_type_isValid = false;

    m_ldap_user_action_isSet = false;
    m_ldap_user_action_isValid = false;

    m_ldap_user_include_groups_isSet = false;
    m_ldap_user_include_groups_isValid = false;

    m_ldap_username_isSet = false;
    m_ldap_username_isValid = false;

    m_ldap_username_field_isSet = false;
    m_ldap_username_field_isValid = false;

    m_login_help_text_isSet = false;
    m_login_help_text_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_max_prior_passwords_isSet = false;
    m_max_prior_passwords_isValid = false;

    m_mobile_app_isSet = false;
    m_mobile_app_isValid = false;

    m_mobile_app_session_ip_pinning_isSet = false;
    m_mobile_app_session_ip_pinning_isValid = false;

    m_mobile_app_session_lifetime_isSet = false;
    m_mobile_app_session_lifetime_isValid = false;

    m_motd_text_isSet = false;
    m_motd_text_isValid = false;

    m_motd_use_for_ftp_isSet = false;
    m_motd_use_for_ftp_isValid = false;

    m_motd_use_for_sftp_isSet = false;
    m_motd_use_for_sftp_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_billing_amount_isSet = false;
    m_next_billing_amount_isValid = false;

    m_next_billing_date_isSet = false;
    m_next_billing_date_isValid = false;

    m_non_sso_groups_allowed_isSet = false;
    m_non_sso_groups_allowed_isValid = false;

    m_non_sso_users_allowed_isSet = false;
    m_non_sso_users_allowed_isValid = false;

    m_office_integration_available_isSet = false;
    m_office_integration_available_isValid = false;

    m_office_integration_type_isSet = false;
    m_office_integration_type_isValid = false;

    m_oncehub_link_isSet = false;
    m_oncehub_link_isValid = false;

    m_opt_out_global_isSet = false;
    m_opt_out_global_isValid = false;

    m_overdue_isSet = false;
    m_overdue_isValid = false;

    m_password_min_length_isSet = false;
    m_password_min_length_isValid = false;

    m_password_require_letter_isSet = false;
    m_password_require_letter_isValid = false;

    m_password_require_mixed_isSet = false;
    m_password_require_mixed_isValid = false;

    m_password_require_number_isSet = false;
    m_password_require_number_isValid = false;

    m_password_require_special_isSet = false;
    m_password_require_special_isValid = false;

    m_password_require_unbreached_isSet = false;
    m_password_require_unbreached_isValid = false;

    m_password_requirements_apply_to_bundles_isSet = false;
    m_password_requirements_apply_to_bundles_isValid = false;

    m_password_validity_days_isSet = false;
    m_password_validity_days_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_pin_all_remote_servers_to_site_region_isSet = false;
    m_pin_all_remote_servers_to_site_region_isValid = false;

    m_reply_to_email_isSet = false;
    m_reply_to_email_isValid = false;

    m_require_2fa_isSet = false;
    m_require_2fa_isValid = false;

    m_require_2fa_stop_time_isSet = false;
    m_require_2fa_stop_time_isValid = false;

    m_require_2fa_user_type_isSet = false;
    m_require_2fa_user_type_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_session_expiry_isSet = false;
    m_session_expiry_isValid = false;

    m_session_expiry_minutes_isSet = false;
    m_session_expiry_minutes_isValid = false;

    m_session_pinned_by_ip_isSet = false;
    m_session_pinned_by_ip_isValid = false;

    m_sftp_enabled_isSet = false;
    m_sftp_enabled_isValid = false;

    m_sftp_host_key_type_isSet = false;
    m_sftp_host_key_type_isValid = false;

    m_sftp_insecure_ciphers_isSet = false;
    m_sftp_insecure_ciphers_isValid = false;

    m_sftp_user_root_enabled_isSet = false;
    m_sftp_user_root_enabled_isValid = false;

    m_sharing_enabled_isSet = false;
    m_sharing_enabled_isValid = false;

    m_show_request_access_link_isSet = false;
    m_show_request_access_link_isValid = false;

    m_site_footer_isSet = false;
    m_site_footer_isValid = false;

    m_site_header_isSet = false;
    m_site_header_isValid = false;

    m_smtp_address_isSet = false;
    m_smtp_address_isValid = false;

    m_smtp_authentication_isSet = false;
    m_smtp_authentication_isValid = false;

    m_smtp_from_isSet = false;
    m_smtp_from_isValid = false;

    m_smtp_port_isSet = false;
    m_smtp_port_isValid = false;

    m_smtp_username_isSet = false;
    m_smtp_username_isValid = false;

    m_ssl_required_isSet = false;
    m_ssl_required_isValid = false;

    m_subdomain_isSet = false;
    m_subdomain_isValid = false;

    m_switch_to_plan_date_isSet = false;
    m_switch_to_plan_date_isValid = false;

    m_tls_disabled_isSet = false;
    m_tls_disabled_isValid = false;

    m_trial_days_left_isSet = false;
    m_trial_days_left_isValid = false;

    m_trial_until_isSet = false;
    m_trial_until_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_uploads_via_email_authentication_isSet = false;
    m_uploads_via_email_authentication_isValid = false;

    m_use_provided_modified_at_isSet = false;
    m_use_provided_modified_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_lockout_isSet = false;
    m_user_lockout_isValid = false;

    m_user_lockout_lock_period_isSet = false;
    m_user_lockout_lock_period_isValid = false;

    m_user_lockout_tries_isSet = false;
    m_user_lockout_tries_isValid = false;

    m_user_lockout_within_isSet = false;
    m_user_lockout_within_isValid = false;

    m_user_requests_enabled_isSet = false;
    m_user_requests_enabled_isValid = false;

    m_user_requests_notify_admins_isSet = false;
    m_user_requests_notify_admins_isValid = false;

    m_welcome_custom_text_isSet = false;
    m_welcome_custom_text_isValid = false;

    m_welcome_email_cc_isSet = false;
    m_welcome_email_cc_isValid = false;

    m_welcome_email_enabled_isSet = false;
    m_welcome_email_enabled_isValid = false;

    m_welcome_email_subject_isSet = false;
    m_welcome_email_subject_isValid = false;

    m_welcome_screen_isSet = false;
    m_welcome_screen_isValid = false;

    m_windows_mode_ftp_isSet = false;
    m_windows_mode_ftp_isValid = false;
}

void OAISiteEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteEntity::fromJsonObject(QJsonObject json) {

    m_active_sftp_host_key_id_isValid = ::OpenAPI::fromJsonValue(m_active_sftp_host_key_id, json[QString("active_sftp_host_key_id")]);
    m_active_sftp_host_key_id_isSet = !json[QString("active_sftp_host_key_id")].isNull() && m_active_sftp_host_key_id_isValid;

    m_admin_user_id_isValid = ::OpenAPI::fromJsonValue(m_admin_user_id, json[QString("admin_user_id")]);
    m_admin_user_id_isSet = !json[QString("admin_user_id")].isNull() && m_admin_user_id_isValid;

    m_allow_bundle_names_isValid = ::OpenAPI::fromJsonValue(m_allow_bundle_names, json[QString("allow_bundle_names")]);
    m_allow_bundle_names_isSet = !json[QString("allow_bundle_names")].isNull() && m_allow_bundle_names_isValid;

    m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isValid = ::OpenAPI::fromJsonValue(m_allowed_2fa_method_bypass_for_ftp_sftp_dav, json[QString("allowed_2fa_method_bypass_for_ftp_sftp_dav")]);
    m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isSet = !json[QString("allowed_2fa_method_bypass_for_ftp_sftp_dav")].isNull() && m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isValid;

    m_allowed_2fa_method_sms_isValid = ::OpenAPI::fromJsonValue(m_allowed_2fa_method_sms, json[QString("allowed_2fa_method_sms")]);
    m_allowed_2fa_method_sms_isSet = !json[QString("allowed_2fa_method_sms")].isNull() && m_allowed_2fa_method_sms_isValid;

    m_allowed_2fa_method_totp_isValid = ::OpenAPI::fromJsonValue(m_allowed_2fa_method_totp, json[QString("allowed_2fa_method_totp")]);
    m_allowed_2fa_method_totp_isSet = !json[QString("allowed_2fa_method_totp")].isNull() && m_allowed_2fa_method_totp_isValid;

    m_allowed_2fa_method_u2f_isValid = ::OpenAPI::fromJsonValue(m_allowed_2fa_method_u2f, json[QString("allowed_2fa_method_u2f")]);
    m_allowed_2fa_method_u2f_isSet = !json[QString("allowed_2fa_method_u2f")].isNull() && m_allowed_2fa_method_u2f_isValid;

    m_allowed_2fa_method_webauthn_isValid = ::OpenAPI::fromJsonValue(m_allowed_2fa_method_webauthn, json[QString("allowed_2fa_method_webauthn")]);
    m_allowed_2fa_method_webauthn_isSet = !json[QString("allowed_2fa_method_webauthn")].isNull() && m_allowed_2fa_method_webauthn_isValid;

    m_allowed_2fa_method_yubi_isValid = ::OpenAPI::fromJsonValue(m_allowed_2fa_method_yubi, json[QString("allowed_2fa_method_yubi")]);
    m_allowed_2fa_method_yubi_isSet = !json[QString("allowed_2fa_method_yubi")].isNull() && m_allowed_2fa_method_yubi_isValid;

    m_allowed_countries_isValid = ::OpenAPI::fromJsonValue(m_allowed_countries, json[QString("allowed_countries")]);
    m_allowed_countries_isSet = !json[QString("allowed_countries")].isNull() && m_allowed_countries_isValid;

    m_allowed_ips_isValid = ::OpenAPI::fromJsonValue(m_allowed_ips, json[QString("allowed_ips")]);
    m_allowed_ips_isSet = !json[QString("allowed_ips")].isNull() && m_allowed_ips_isValid;

    m_ask_about_overwrites_isValid = ::OpenAPI::fromJsonValue(m_ask_about_overwrites, json[QString("ask_about_overwrites")]);
    m_ask_about_overwrites_isSet = !json[QString("ask_about_overwrites")].isNull() && m_ask_about_overwrites_isValid;

    m_bundle_activity_notifications_isValid = ::OpenAPI::fromJsonValue(m_bundle_activity_notifications, json[QString("bundle_activity_notifications")]);
    m_bundle_activity_notifications_isSet = !json[QString("bundle_activity_notifications")].isNull() && m_bundle_activity_notifications_isValid;

    m_bundle_expiration_isValid = ::OpenAPI::fromJsonValue(m_bundle_expiration, json[QString("bundle_expiration")]);
    m_bundle_expiration_isSet = !json[QString("bundle_expiration")].isNull() && m_bundle_expiration_isValid;

    m_bundle_password_required_isValid = ::OpenAPI::fromJsonValue(m_bundle_password_required, json[QString("bundle_password_required")]);
    m_bundle_password_required_isSet = !json[QString("bundle_password_required")].isNull() && m_bundle_password_required_isValid;

    m_bundle_registration_notifications_isValid = ::OpenAPI::fromJsonValue(m_bundle_registration_notifications, json[QString("bundle_registration_notifications")]);
    m_bundle_registration_notifications_isSet = !json[QString("bundle_registration_notifications")].isNull() && m_bundle_registration_notifications_isValid;

    m_bundle_require_share_recipient_isValid = ::OpenAPI::fromJsonValue(m_bundle_require_share_recipient, json[QString("bundle_require_share_recipient")]);
    m_bundle_require_share_recipient_isSet = !json[QString("bundle_require_share_recipient")].isNull() && m_bundle_require_share_recipient_isValid;

    m_bundle_upload_receipt_notifications_isValid = ::OpenAPI::fromJsonValue(m_bundle_upload_receipt_notifications, json[QString("bundle_upload_receipt_notifications")]);
    m_bundle_upload_receipt_notifications_isSet = !json[QString("bundle_upload_receipt_notifications")].isNull() && m_bundle_upload_receipt_notifications_isValid;

    m_bundle_watermark_attachment_isValid = ::OpenAPI::fromJsonValue(m_bundle_watermark_attachment, json[QString("bundle_watermark_attachment")]);
    m_bundle_watermark_attachment_isSet = !json[QString("bundle_watermark_attachment")].isNull() && m_bundle_watermark_attachment_isValid;

    m_bundle_watermark_value_isValid = ::OpenAPI::fromJsonValue(m_bundle_watermark_value, json[QString("bundle_watermark_value")]);
    m_bundle_watermark_value_isSet = !json[QString("bundle_watermark_value")].isNull() && m_bundle_watermark_value_isValid;

    m_color2_left_isValid = ::OpenAPI::fromJsonValue(m_color2_left, json[QString("color2_left")]);
    m_color2_left_isSet = !json[QString("color2_left")].isNull() && m_color2_left_isValid;

    m_color2_link_isValid = ::OpenAPI::fromJsonValue(m_color2_link, json[QString("color2_link")]);
    m_color2_link_isSet = !json[QString("color2_link")].isNull() && m_color2_link_isValid;

    m_color2_text_isValid = ::OpenAPI::fromJsonValue(m_color2_text, json[QString("color2_text")]);
    m_color2_text_isSet = !json[QString("color2_text")].isNull() && m_color2_text_isValid;

    m_color2_top_isValid = ::OpenAPI::fromJsonValue(m_color2_top, json[QString("color2_top")]);
    m_color2_top_isSet = !json[QString("color2_top")].isNull() && m_color2_top_isValid;

    m_color2_top_text_isValid = ::OpenAPI::fromJsonValue(m_color2_top_text, json[QString("color2_top_text")]);
    m_color2_top_text_isSet = !json[QString("color2_top_text")].isNull() && m_color2_top_text_isValid;

    m_contact_name_isValid = ::OpenAPI::fromJsonValue(m_contact_name, json[QString("contact_name")]);
    m_contact_name_isSet = !json[QString("contact_name")].isNull() && m_contact_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_namespace_isValid = ::OpenAPI::fromJsonValue(m_custom_namespace, json[QString("custom_namespace")]);
    m_custom_namespace_isSet = !json[QString("custom_namespace")].isNull() && m_custom_namespace_isValid;

    m_days_to_retain_backups_isValid = ::OpenAPI::fromJsonValue(m_days_to_retain_backups, json[QString("days_to_retain_backups")]);
    m_days_to_retain_backups_isSet = !json[QString("days_to_retain_backups")].isNull() && m_days_to_retain_backups_isValid;

    m_default_time_zone_isValid = ::OpenAPI::fromJsonValue(m_default_time_zone, json[QString("default_time_zone")]);
    m_default_time_zone_isSet = !json[QString("default_time_zone")].isNull() && m_default_time_zone_isValid;

    m_desktop_app_isValid = ::OpenAPI::fromJsonValue(m_desktop_app, json[QString("desktop_app")]);
    m_desktop_app_isSet = !json[QString("desktop_app")].isNull() && m_desktop_app_isValid;

    m_desktop_app_session_ip_pinning_isValid = ::OpenAPI::fromJsonValue(m_desktop_app_session_ip_pinning, json[QString("desktop_app_session_ip_pinning")]);
    m_desktop_app_session_ip_pinning_isSet = !json[QString("desktop_app_session_ip_pinning")].isNull() && m_desktop_app_session_ip_pinning_isValid;

    m_desktop_app_session_lifetime_isValid = ::OpenAPI::fromJsonValue(m_desktop_app_session_lifetime, json[QString("desktop_app_session_lifetime")]);
    m_desktop_app_session_lifetime_isSet = !json[QString("desktop_app_session_lifetime")].isNull() && m_desktop_app_session_lifetime_isValid;

    m_disable_files_certificate_generation_isValid = ::OpenAPI::fromJsonValue(m_disable_files_certificate_generation, json[QString("disable_files_certificate_generation")]);
    m_disable_files_certificate_generation_isSet = !json[QString("disable_files_certificate_generation")].isNull() && m_disable_files_certificate_generation_isValid;

    m_disable_notifications_isValid = ::OpenAPI::fromJsonValue(m_disable_notifications, json[QString("disable_notifications")]);
    m_disable_notifications_isSet = !json[QString("disable_notifications")].isNull() && m_disable_notifications_isValid;

    m_disable_password_reset_isValid = ::OpenAPI::fromJsonValue(m_disable_password_reset, json[QString("disable_password_reset")]);
    m_disable_password_reset_isSet = !json[QString("disable_password_reset")].isNull() && m_disable_password_reset_isValid;

    m_disable_users_from_inactivity_period_days_isValid = ::OpenAPI::fromJsonValue(m_disable_users_from_inactivity_period_days, json[QString("disable_users_from_inactivity_period_days")]);
    m_disable_users_from_inactivity_period_days_isSet = !json[QString("disable_users_from_inactivity_period_days")].isNull() && m_disable_users_from_inactivity_period_days_isValid;

    m_disallowed_countries_isValid = ::OpenAPI::fromJsonValue(m_disallowed_countries, json[QString("disallowed_countries")]);
    m_disallowed_countries_isSet = !json[QString("disallowed_countries")].isNull() && m_disallowed_countries_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_domain_hsts_header_isValid = ::OpenAPI::fromJsonValue(m_domain_hsts_header, json[QString("domain_hsts_header")]);
    m_domain_hsts_header_isSet = !json[QString("domain_hsts_header")].isNull() && m_domain_hsts_header_isValid;

    m_domain_letsencrypt_chain_isValid = ::OpenAPI::fromJsonValue(m_domain_letsencrypt_chain, json[QString("domain_letsencrypt_chain")]);
    m_domain_letsencrypt_chain_isSet = !json[QString("domain_letsencrypt_chain")].isNull() && m_domain_letsencrypt_chain_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_folder_permissions_groups_only_isValid = ::OpenAPI::fromJsonValue(m_folder_permissions_groups_only, json[QString("folder_permissions_groups_only")]);
    m_folder_permissions_groups_only_isSet = !json[QString("folder_permissions_groups_only")].isNull() && m_folder_permissions_groups_only_isValid;

    m_ftp_enabled_isValid = ::OpenAPI::fromJsonValue(m_ftp_enabled, json[QString("ftp_enabled")]);
    m_ftp_enabled_isSet = !json[QString("ftp_enabled")].isNull() && m_ftp_enabled_isValid;

    m_hipaa_isValid = ::OpenAPI::fromJsonValue(m_hipaa, json[QString("hipaa")]);
    m_hipaa_isSet = !json[QString("hipaa")].isNull() && m_hipaa_isValid;

    m_icon128_isValid = ::OpenAPI::fromJsonValue(m_icon128, json[QString("icon128")]);
    m_icon128_isSet = !json[QString("icon128")].isNull() && m_icon128_isValid;

    m_icon16_isValid = ::OpenAPI::fromJsonValue(m_icon16, json[QString("icon16")]);
    m_icon16_isSet = !json[QString("icon16")].isNull() && m_icon16_isValid;

    m_icon32_isValid = ::OpenAPI::fromJsonValue(m_icon32, json[QString("icon32")]);
    m_icon32_isSet = !json[QString("icon32")].isNull() && m_icon32_isValid;

    m_icon48_isValid = ::OpenAPI::fromJsonValue(m_icon48, json[QString("icon48")]);
    m_icon48_isSet = !json[QString("icon48")].isNull() && m_icon48_isValid;

    m_immutable_files_set_at_isValid = ::OpenAPI::fromJsonValue(m_immutable_files_set_at, json[QString("immutable_files_set_at")]);
    m_immutable_files_set_at_isSet = !json[QString("immutable_files_set_at")].isNull() && m_immutable_files_set_at_isValid;

    m_include_password_in_welcome_email_isValid = ::OpenAPI::fromJsonValue(m_include_password_in_welcome_email, json[QString("include_password_in_welcome_email")]);
    m_include_password_in_welcome_email_isSet = !json[QString("include_password_in_welcome_email")].isNull() && m_include_password_in_welcome_email_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_ldap_base_dn_isValid = ::OpenAPI::fromJsonValue(m_ldap_base_dn, json[QString("ldap_base_dn")]);
    m_ldap_base_dn_isSet = !json[QString("ldap_base_dn")].isNull() && m_ldap_base_dn_isValid;

    m_ldap_domain_isValid = ::OpenAPI::fromJsonValue(m_ldap_domain, json[QString("ldap_domain")]);
    m_ldap_domain_isSet = !json[QString("ldap_domain")].isNull() && m_ldap_domain_isValid;

    m_ldap_enabled_isValid = ::OpenAPI::fromJsonValue(m_ldap_enabled, json[QString("ldap_enabled")]);
    m_ldap_enabled_isSet = !json[QString("ldap_enabled")].isNull() && m_ldap_enabled_isValid;

    m_ldap_group_action_isValid = ::OpenAPI::fromJsonValue(m_ldap_group_action, json[QString("ldap_group_action")]);
    m_ldap_group_action_isSet = !json[QString("ldap_group_action")].isNull() && m_ldap_group_action_isValid;

    m_ldap_group_exclusion_isValid = ::OpenAPI::fromJsonValue(m_ldap_group_exclusion, json[QString("ldap_group_exclusion")]);
    m_ldap_group_exclusion_isSet = !json[QString("ldap_group_exclusion")].isNull() && m_ldap_group_exclusion_isValid;

    m_ldap_group_inclusion_isValid = ::OpenAPI::fromJsonValue(m_ldap_group_inclusion, json[QString("ldap_group_inclusion")]);
    m_ldap_group_inclusion_isSet = !json[QString("ldap_group_inclusion")].isNull() && m_ldap_group_inclusion_isValid;

    m_ldap_host_isValid = ::OpenAPI::fromJsonValue(m_ldap_host, json[QString("ldap_host")]);
    m_ldap_host_isSet = !json[QString("ldap_host")].isNull() && m_ldap_host_isValid;

    m_ldap_host_2_isValid = ::OpenAPI::fromJsonValue(m_ldap_host_2, json[QString("ldap_host_2")]);
    m_ldap_host_2_isSet = !json[QString("ldap_host_2")].isNull() && m_ldap_host_2_isValid;

    m_ldap_host_3_isValid = ::OpenAPI::fromJsonValue(m_ldap_host_3, json[QString("ldap_host_3")]);
    m_ldap_host_3_isSet = !json[QString("ldap_host_3")].isNull() && m_ldap_host_3_isValid;

    m_ldap_port_isValid = ::OpenAPI::fromJsonValue(m_ldap_port, json[QString("ldap_port")]);
    m_ldap_port_isSet = !json[QString("ldap_port")].isNull() && m_ldap_port_isValid;

    m_ldap_secure_isValid = ::OpenAPI::fromJsonValue(m_ldap_secure, json[QString("ldap_secure")]);
    m_ldap_secure_isSet = !json[QString("ldap_secure")].isNull() && m_ldap_secure_isValid;

    m_ldap_type_isValid = ::OpenAPI::fromJsonValue(m_ldap_type, json[QString("ldap_type")]);
    m_ldap_type_isSet = !json[QString("ldap_type")].isNull() && m_ldap_type_isValid;

    m_ldap_user_action_isValid = ::OpenAPI::fromJsonValue(m_ldap_user_action, json[QString("ldap_user_action")]);
    m_ldap_user_action_isSet = !json[QString("ldap_user_action")].isNull() && m_ldap_user_action_isValid;

    m_ldap_user_include_groups_isValid = ::OpenAPI::fromJsonValue(m_ldap_user_include_groups, json[QString("ldap_user_include_groups")]);
    m_ldap_user_include_groups_isSet = !json[QString("ldap_user_include_groups")].isNull() && m_ldap_user_include_groups_isValid;

    m_ldap_username_isValid = ::OpenAPI::fromJsonValue(m_ldap_username, json[QString("ldap_username")]);
    m_ldap_username_isSet = !json[QString("ldap_username")].isNull() && m_ldap_username_isValid;

    m_ldap_username_field_isValid = ::OpenAPI::fromJsonValue(m_ldap_username_field, json[QString("ldap_username_field")]);
    m_ldap_username_field_isSet = !json[QString("ldap_username_field")].isNull() && m_ldap_username_field_isValid;

    m_login_help_text_isValid = ::OpenAPI::fromJsonValue(m_login_help_text, json[QString("login_help_text")]);
    m_login_help_text_isSet = !json[QString("login_help_text")].isNull() && m_login_help_text_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_max_prior_passwords_isValid = ::OpenAPI::fromJsonValue(m_max_prior_passwords, json[QString("max_prior_passwords")]);
    m_max_prior_passwords_isSet = !json[QString("max_prior_passwords")].isNull() && m_max_prior_passwords_isValid;

    m_mobile_app_isValid = ::OpenAPI::fromJsonValue(m_mobile_app, json[QString("mobile_app")]);
    m_mobile_app_isSet = !json[QString("mobile_app")].isNull() && m_mobile_app_isValid;

    m_mobile_app_session_ip_pinning_isValid = ::OpenAPI::fromJsonValue(m_mobile_app_session_ip_pinning, json[QString("mobile_app_session_ip_pinning")]);
    m_mobile_app_session_ip_pinning_isSet = !json[QString("mobile_app_session_ip_pinning")].isNull() && m_mobile_app_session_ip_pinning_isValid;

    m_mobile_app_session_lifetime_isValid = ::OpenAPI::fromJsonValue(m_mobile_app_session_lifetime, json[QString("mobile_app_session_lifetime")]);
    m_mobile_app_session_lifetime_isSet = !json[QString("mobile_app_session_lifetime")].isNull() && m_mobile_app_session_lifetime_isValid;

    m_motd_text_isValid = ::OpenAPI::fromJsonValue(m_motd_text, json[QString("motd_text")]);
    m_motd_text_isSet = !json[QString("motd_text")].isNull() && m_motd_text_isValid;

    m_motd_use_for_ftp_isValid = ::OpenAPI::fromJsonValue(m_motd_use_for_ftp, json[QString("motd_use_for_ftp")]);
    m_motd_use_for_ftp_isSet = !json[QString("motd_use_for_ftp")].isNull() && m_motd_use_for_ftp_isValid;

    m_motd_use_for_sftp_isValid = ::OpenAPI::fromJsonValue(m_motd_use_for_sftp, json[QString("motd_use_for_sftp")]);
    m_motd_use_for_sftp_isSet = !json[QString("motd_use_for_sftp")].isNull() && m_motd_use_for_sftp_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_billing_amount_isValid = ::OpenAPI::fromJsonValue(m_next_billing_amount, json[QString("next_billing_amount")]);
    m_next_billing_amount_isSet = !json[QString("next_billing_amount")].isNull() && m_next_billing_amount_isValid;

    m_next_billing_date_isValid = ::OpenAPI::fromJsonValue(m_next_billing_date, json[QString("next_billing_date")]);
    m_next_billing_date_isSet = !json[QString("next_billing_date")].isNull() && m_next_billing_date_isValid;

    m_non_sso_groups_allowed_isValid = ::OpenAPI::fromJsonValue(m_non_sso_groups_allowed, json[QString("non_sso_groups_allowed")]);
    m_non_sso_groups_allowed_isSet = !json[QString("non_sso_groups_allowed")].isNull() && m_non_sso_groups_allowed_isValid;

    m_non_sso_users_allowed_isValid = ::OpenAPI::fromJsonValue(m_non_sso_users_allowed, json[QString("non_sso_users_allowed")]);
    m_non_sso_users_allowed_isSet = !json[QString("non_sso_users_allowed")].isNull() && m_non_sso_users_allowed_isValid;

    m_office_integration_available_isValid = ::OpenAPI::fromJsonValue(m_office_integration_available, json[QString("office_integration_available")]);
    m_office_integration_available_isSet = !json[QString("office_integration_available")].isNull() && m_office_integration_available_isValid;

    m_office_integration_type_isValid = ::OpenAPI::fromJsonValue(m_office_integration_type, json[QString("office_integration_type")]);
    m_office_integration_type_isSet = !json[QString("office_integration_type")].isNull() && m_office_integration_type_isValid;

    m_oncehub_link_isValid = ::OpenAPI::fromJsonValue(m_oncehub_link, json[QString("oncehub_link")]);
    m_oncehub_link_isSet = !json[QString("oncehub_link")].isNull() && m_oncehub_link_isValid;

    m_opt_out_global_isValid = ::OpenAPI::fromJsonValue(m_opt_out_global, json[QString("opt_out_global")]);
    m_opt_out_global_isSet = !json[QString("opt_out_global")].isNull() && m_opt_out_global_isValid;

    m_overdue_isValid = ::OpenAPI::fromJsonValue(m_overdue, json[QString("overdue")]);
    m_overdue_isSet = !json[QString("overdue")].isNull() && m_overdue_isValid;

    m_password_min_length_isValid = ::OpenAPI::fromJsonValue(m_password_min_length, json[QString("password_min_length")]);
    m_password_min_length_isSet = !json[QString("password_min_length")].isNull() && m_password_min_length_isValid;

    m_password_require_letter_isValid = ::OpenAPI::fromJsonValue(m_password_require_letter, json[QString("password_require_letter")]);
    m_password_require_letter_isSet = !json[QString("password_require_letter")].isNull() && m_password_require_letter_isValid;

    m_password_require_mixed_isValid = ::OpenAPI::fromJsonValue(m_password_require_mixed, json[QString("password_require_mixed")]);
    m_password_require_mixed_isSet = !json[QString("password_require_mixed")].isNull() && m_password_require_mixed_isValid;

    m_password_require_number_isValid = ::OpenAPI::fromJsonValue(m_password_require_number, json[QString("password_require_number")]);
    m_password_require_number_isSet = !json[QString("password_require_number")].isNull() && m_password_require_number_isValid;

    m_password_require_special_isValid = ::OpenAPI::fromJsonValue(m_password_require_special, json[QString("password_require_special")]);
    m_password_require_special_isSet = !json[QString("password_require_special")].isNull() && m_password_require_special_isValid;

    m_password_require_unbreached_isValid = ::OpenAPI::fromJsonValue(m_password_require_unbreached, json[QString("password_require_unbreached")]);
    m_password_require_unbreached_isSet = !json[QString("password_require_unbreached")].isNull() && m_password_require_unbreached_isValid;

    m_password_requirements_apply_to_bundles_isValid = ::OpenAPI::fromJsonValue(m_password_requirements_apply_to_bundles, json[QString("password_requirements_apply_to_bundles")]);
    m_password_requirements_apply_to_bundles_isSet = !json[QString("password_requirements_apply_to_bundles")].isNull() && m_password_requirements_apply_to_bundles_isValid;

    m_password_validity_days_isValid = ::OpenAPI::fromJsonValue(m_password_validity_days, json[QString("password_validity_days")]);
    m_password_validity_days_isSet = !json[QString("password_validity_days")].isNull() && m_password_validity_days_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_pin_all_remote_servers_to_site_region_isValid = ::OpenAPI::fromJsonValue(m_pin_all_remote_servers_to_site_region, json[QString("pin_all_remote_servers_to_site_region")]);
    m_pin_all_remote_servers_to_site_region_isSet = !json[QString("pin_all_remote_servers_to_site_region")].isNull() && m_pin_all_remote_servers_to_site_region_isValid;

    m_reply_to_email_isValid = ::OpenAPI::fromJsonValue(m_reply_to_email, json[QString("reply_to_email")]);
    m_reply_to_email_isSet = !json[QString("reply_to_email")].isNull() && m_reply_to_email_isValid;

    m_require_2fa_isValid = ::OpenAPI::fromJsonValue(m_require_2fa, json[QString("require_2fa")]);
    m_require_2fa_isSet = !json[QString("require_2fa")].isNull() && m_require_2fa_isValid;

    m_require_2fa_stop_time_isValid = ::OpenAPI::fromJsonValue(m_require_2fa_stop_time, json[QString("require_2fa_stop_time")]);
    m_require_2fa_stop_time_isSet = !json[QString("require_2fa_stop_time")].isNull() && m_require_2fa_stop_time_isValid;

    m_require_2fa_user_type_isValid = ::OpenAPI::fromJsonValue(m_require_2fa_user_type, json[QString("require_2fa_user_type")]);
    m_require_2fa_user_type_isSet = !json[QString("require_2fa_user_type")].isNull() && m_require_2fa_user_type_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_session_expiry_isValid = ::OpenAPI::fromJsonValue(m_session_expiry, json[QString("session_expiry")]);
    m_session_expiry_isSet = !json[QString("session_expiry")].isNull() && m_session_expiry_isValid;

    m_session_expiry_minutes_isValid = ::OpenAPI::fromJsonValue(m_session_expiry_minutes, json[QString("session_expiry_minutes")]);
    m_session_expiry_minutes_isSet = !json[QString("session_expiry_minutes")].isNull() && m_session_expiry_minutes_isValid;

    m_session_pinned_by_ip_isValid = ::OpenAPI::fromJsonValue(m_session_pinned_by_ip, json[QString("session_pinned_by_ip")]);
    m_session_pinned_by_ip_isSet = !json[QString("session_pinned_by_ip")].isNull() && m_session_pinned_by_ip_isValid;

    m_sftp_enabled_isValid = ::OpenAPI::fromJsonValue(m_sftp_enabled, json[QString("sftp_enabled")]);
    m_sftp_enabled_isSet = !json[QString("sftp_enabled")].isNull() && m_sftp_enabled_isValid;

    m_sftp_host_key_type_isValid = ::OpenAPI::fromJsonValue(m_sftp_host_key_type, json[QString("sftp_host_key_type")]);
    m_sftp_host_key_type_isSet = !json[QString("sftp_host_key_type")].isNull() && m_sftp_host_key_type_isValid;

    m_sftp_insecure_ciphers_isValid = ::OpenAPI::fromJsonValue(m_sftp_insecure_ciphers, json[QString("sftp_insecure_ciphers")]);
    m_sftp_insecure_ciphers_isSet = !json[QString("sftp_insecure_ciphers")].isNull() && m_sftp_insecure_ciphers_isValid;

    m_sftp_user_root_enabled_isValid = ::OpenAPI::fromJsonValue(m_sftp_user_root_enabled, json[QString("sftp_user_root_enabled")]);
    m_sftp_user_root_enabled_isSet = !json[QString("sftp_user_root_enabled")].isNull() && m_sftp_user_root_enabled_isValid;

    m_sharing_enabled_isValid = ::OpenAPI::fromJsonValue(m_sharing_enabled, json[QString("sharing_enabled")]);
    m_sharing_enabled_isSet = !json[QString("sharing_enabled")].isNull() && m_sharing_enabled_isValid;

    m_show_request_access_link_isValid = ::OpenAPI::fromJsonValue(m_show_request_access_link, json[QString("show_request_access_link")]);
    m_show_request_access_link_isSet = !json[QString("show_request_access_link")].isNull() && m_show_request_access_link_isValid;

    m_site_footer_isValid = ::OpenAPI::fromJsonValue(m_site_footer, json[QString("site_footer")]);
    m_site_footer_isSet = !json[QString("site_footer")].isNull() && m_site_footer_isValid;

    m_site_header_isValid = ::OpenAPI::fromJsonValue(m_site_header, json[QString("site_header")]);
    m_site_header_isSet = !json[QString("site_header")].isNull() && m_site_header_isValid;

    m_smtp_address_isValid = ::OpenAPI::fromJsonValue(m_smtp_address, json[QString("smtp_address")]);
    m_smtp_address_isSet = !json[QString("smtp_address")].isNull() && m_smtp_address_isValid;

    m_smtp_authentication_isValid = ::OpenAPI::fromJsonValue(m_smtp_authentication, json[QString("smtp_authentication")]);
    m_smtp_authentication_isSet = !json[QString("smtp_authentication")].isNull() && m_smtp_authentication_isValid;

    m_smtp_from_isValid = ::OpenAPI::fromJsonValue(m_smtp_from, json[QString("smtp_from")]);
    m_smtp_from_isSet = !json[QString("smtp_from")].isNull() && m_smtp_from_isValid;

    m_smtp_port_isValid = ::OpenAPI::fromJsonValue(m_smtp_port, json[QString("smtp_port")]);
    m_smtp_port_isSet = !json[QString("smtp_port")].isNull() && m_smtp_port_isValid;

    m_smtp_username_isValid = ::OpenAPI::fromJsonValue(m_smtp_username, json[QString("smtp_username")]);
    m_smtp_username_isSet = !json[QString("smtp_username")].isNull() && m_smtp_username_isValid;

    m_ssl_required_isValid = ::OpenAPI::fromJsonValue(m_ssl_required, json[QString("ssl_required")]);
    m_ssl_required_isSet = !json[QString("ssl_required")].isNull() && m_ssl_required_isValid;

    m_subdomain_isValid = ::OpenAPI::fromJsonValue(m_subdomain, json[QString("subdomain")]);
    m_subdomain_isSet = !json[QString("subdomain")].isNull() && m_subdomain_isValid;

    m_switch_to_plan_date_isValid = ::OpenAPI::fromJsonValue(m_switch_to_plan_date, json[QString("switch_to_plan_date")]);
    m_switch_to_plan_date_isSet = !json[QString("switch_to_plan_date")].isNull() && m_switch_to_plan_date_isValid;

    m_tls_disabled_isValid = ::OpenAPI::fromJsonValue(m_tls_disabled, json[QString("tls_disabled")]);
    m_tls_disabled_isSet = !json[QString("tls_disabled")].isNull() && m_tls_disabled_isValid;

    m_trial_days_left_isValid = ::OpenAPI::fromJsonValue(m_trial_days_left, json[QString("trial_days_left")]);
    m_trial_days_left_isSet = !json[QString("trial_days_left")].isNull() && m_trial_days_left_isValid;

    m_trial_until_isValid = ::OpenAPI::fromJsonValue(m_trial_until, json[QString("trial_until")]);
    m_trial_until_isSet = !json[QString("trial_until")].isNull() && m_trial_until_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_uploads_via_email_authentication_isValid = ::OpenAPI::fromJsonValue(m_uploads_via_email_authentication, json[QString("uploads_via_email_authentication")]);
    m_uploads_via_email_authentication_isSet = !json[QString("uploads_via_email_authentication")].isNull() && m_uploads_via_email_authentication_isValid;

    m_use_provided_modified_at_isValid = ::OpenAPI::fromJsonValue(m_use_provided_modified_at, json[QString("use_provided_modified_at")]);
    m_use_provided_modified_at_isSet = !json[QString("use_provided_modified_at")].isNull() && m_use_provided_modified_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_lockout_isValid = ::OpenAPI::fromJsonValue(m_user_lockout, json[QString("user_lockout")]);
    m_user_lockout_isSet = !json[QString("user_lockout")].isNull() && m_user_lockout_isValid;

    m_user_lockout_lock_period_isValid = ::OpenAPI::fromJsonValue(m_user_lockout_lock_period, json[QString("user_lockout_lock_period")]);
    m_user_lockout_lock_period_isSet = !json[QString("user_lockout_lock_period")].isNull() && m_user_lockout_lock_period_isValid;

    m_user_lockout_tries_isValid = ::OpenAPI::fromJsonValue(m_user_lockout_tries, json[QString("user_lockout_tries")]);
    m_user_lockout_tries_isSet = !json[QString("user_lockout_tries")].isNull() && m_user_lockout_tries_isValid;

    m_user_lockout_within_isValid = ::OpenAPI::fromJsonValue(m_user_lockout_within, json[QString("user_lockout_within")]);
    m_user_lockout_within_isSet = !json[QString("user_lockout_within")].isNull() && m_user_lockout_within_isValid;

    m_user_requests_enabled_isValid = ::OpenAPI::fromJsonValue(m_user_requests_enabled, json[QString("user_requests_enabled")]);
    m_user_requests_enabled_isSet = !json[QString("user_requests_enabled")].isNull() && m_user_requests_enabled_isValid;

    m_user_requests_notify_admins_isValid = ::OpenAPI::fromJsonValue(m_user_requests_notify_admins, json[QString("user_requests_notify_admins")]);
    m_user_requests_notify_admins_isSet = !json[QString("user_requests_notify_admins")].isNull() && m_user_requests_notify_admins_isValid;

    m_welcome_custom_text_isValid = ::OpenAPI::fromJsonValue(m_welcome_custom_text, json[QString("welcome_custom_text")]);
    m_welcome_custom_text_isSet = !json[QString("welcome_custom_text")].isNull() && m_welcome_custom_text_isValid;

    m_welcome_email_cc_isValid = ::OpenAPI::fromJsonValue(m_welcome_email_cc, json[QString("welcome_email_cc")]);
    m_welcome_email_cc_isSet = !json[QString("welcome_email_cc")].isNull() && m_welcome_email_cc_isValid;

    m_welcome_email_enabled_isValid = ::OpenAPI::fromJsonValue(m_welcome_email_enabled, json[QString("welcome_email_enabled")]);
    m_welcome_email_enabled_isSet = !json[QString("welcome_email_enabled")].isNull() && m_welcome_email_enabled_isValid;

    m_welcome_email_subject_isValid = ::OpenAPI::fromJsonValue(m_welcome_email_subject, json[QString("welcome_email_subject")]);
    m_welcome_email_subject_isSet = !json[QString("welcome_email_subject")].isNull() && m_welcome_email_subject_isValid;

    m_welcome_screen_isValid = ::OpenAPI::fromJsonValue(m_welcome_screen, json[QString("welcome_screen")]);
    m_welcome_screen_isSet = !json[QString("welcome_screen")].isNull() && m_welcome_screen_isValid;

    m_windows_mode_ftp_isValid = ::OpenAPI::fromJsonValue(m_windows_mode_ftp, json[QString("windows_mode_ftp")]);
    m_windows_mode_ftp_isSet = !json[QString("windows_mode_ftp")].isNull() && m_windows_mode_ftp_isValid;
}

QString OAISiteEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_active_sftp_host_key_id_isSet) {
        obj.insert(QString("active_sftp_host_key_id"), ::OpenAPI::toJsonValue(m_active_sftp_host_key_id));
    }
    if (m_admin_user_id_isSet) {
        obj.insert(QString("admin_user_id"), ::OpenAPI::toJsonValue(m_admin_user_id));
    }
    if (m_allow_bundle_names_isSet) {
        obj.insert(QString("allow_bundle_names"), ::OpenAPI::toJsonValue(m_allow_bundle_names));
    }
    if (m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isSet) {
        obj.insert(QString("allowed_2fa_method_bypass_for_ftp_sftp_dav"), ::OpenAPI::toJsonValue(m_allowed_2fa_method_bypass_for_ftp_sftp_dav));
    }
    if (m_allowed_2fa_method_sms_isSet) {
        obj.insert(QString("allowed_2fa_method_sms"), ::OpenAPI::toJsonValue(m_allowed_2fa_method_sms));
    }
    if (m_allowed_2fa_method_totp_isSet) {
        obj.insert(QString("allowed_2fa_method_totp"), ::OpenAPI::toJsonValue(m_allowed_2fa_method_totp));
    }
    if (m_allowed_2fa_method_u2f_isSet) {
        obj.insert(QString("allowed_2fa_method_u2f"), ::OpenAPI::toJsonValue(m_allowed_2fa_method_u2f));
    }
    if (m_allowed_2fa_method_webauthn_isSet) {
        obj.insert(QString("allowed_2fa_method_webauthn"), ::OpenAPI::toJsonValue(m_allowed_2fa_method_webauthn));
    }
    if (m_allowed_2fa_method_yubi_isSet) {
        obj.insert(QString("allowed_2fa_method_yubi"), ::OpenAPI::toJsonValue(m_allowed_2fa_method_yubi));
    }
    if (m_allowed_countries_isSet) {
        obj.insert(QString("allowed_countries"), ::OpenAPI::toJsonValue(m_allowed_countries));
    }
    if (m_allowed_ips_isSet) {
        obj.insert(QString("allowed_ips"), ::OpenAPI::toJsonValue(m_allowed_ips));
    }
    if (m_ask_about_overwrites_isSet) {
        obj.insert(QString("ask_about_overwrites"), ::OpenAPI::toJsonValue(m_ask_about_overwrites));
    }
    if (m_bundle_activity_notifications_isSet) {
        obj.insert(QString("bundle_activity_notifications"), ::OpenAPI::toJsonValue(m_bundle_activity_notifications));
    }
    if (m_bundle_expiration_isSet) {
        obj.insert(QString("bundle_expiration"), ::OpenAPI::toJsonValue(m_bundle_expiration));
    }
    if (m_bundle_password_required_isSet) {
        obj.insert(QString("bundle_password_required"), ::OpenAPI::toJsonValue(m_bundle_password_required));
    }
    if (m_bundle_registration_notifications_isSet) {
        obj.insert(QString("bundle_registration_notifications"), ::OpenAPI::toJsonValue(m_bundle_registration_notifications));
    }
    if (m_bundle_require_share_recipient_isSet) {
        obj.insert(QString("bundle_require_share_recipient"), ::OpenAPI::toJsonValue(m_bundle_require_share_recipient));
    }
    if (m_bundle_upload_receipt_notifications_isSet) {
        obj.insert(QString("bundle_upload_receipt_notifications"), ::OpenAPI::toJsonValue(m_bundle_upload_receipt_notifications));
    }
    if (m_bundle_watermark_attachment.isSet()) {
        obj.insert(QString("bundle_watermark_attachment"), ::OpenAPI::toJsonValue(m_bundle_watermark_attachment));
    }
    if (m_bundle_watermark_value_isSet) {
        obj.insert(QString("bundle_watermark_value"), ::OpenAPI::toJsonValue(m_bundle_watermark_value));
    }
    if (m_color2_left_isSet) {
        obj.insert(QString("color2_left"), ::OpenAPI::toJsonValue(m_color2_left));
    }
    if (m_color2_link_isSet) {
        obj.insert(QString("color2_link"), ::OpenAPI::toJsonValue(m_color2_link));
    }
    if (m_color2_text_isSet) {
        obj.insert(QString("color2_text"), ::OpenAPI::toJsonValue(m_color2_text));
    }
    if (m_color2_top_isSet) {
        obj.insert(QString("color2_top"), ::OpenAPI::toJsonValue(m_color2_top));
    }
    if (m_color2_top_text_isSet) {
        obj.insert(QString("color2_top_text"), ::OpenAPI::toJsonValue(m_color2_top_text));
    }
    if (m_contact_name_isSet) {
        obj.insert(QString("contact_name"), ::OpenAPI::toJsonValue(m_contact_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_namespace_isSet) {
        obj.insert(QString("custom_namespace"), ::OpenAPI::toJsonValue(m_custom_namespace));
    }
    if (m_days_to_retain_backups_isSet) {
        obj.insert(QString("days_to_retain_backups"), ::OpenAPI::toJsonValue(m_days_to_retain_backups));
    }
    if (m_default_time_zone_isSet) {
        obj.insert(QString("default_time_zone"), ::OpenAPI::toJsonValue(m_default_time_zone));
    }
    if (m_desktop_app_isSet) {
        obj.insert(QString("desktop_app"), ::OpenAPI::toJsonValue(m_desktop_app));
    }
    if (m_desktop_app_session_ip_pinning_isSet) {
        obj.insert(QString("desktop_app_session_ip_pinning"), ::OpenAPI::toJsonValue(m_desktop_app_session_ip_pinning));
    }
    if (m_desktop_app_session_lifetime_isSet) {
        obj.insert(QString("desktop_app_session_lifetime"), ::OpenAPI::toJsonValue(m_desktop_app_session_lifetime));
    }
    if (m_disable_files_certificate_generation_isSet) {
        obj.insert(QString("disable_files_certificate_generation"), ::OpenAPI::toJsonValue(m_disable_files_certificate_generation));
    }
    if (m_disable_notifications_isSet) {
        obj.insert(QString("disable_notifications"), ::OpenAPI::toJsonValue(m_disable_notifications));
    }
    if (m_disable_password_reset_isSet) {
        obj.insert(QString("disable_password_reset"), ::OpenAPI::toJsonValue(m_disable_password_reset));
    }
    if (m_disable_users_from_inactivity_period_days_isSet) {
        obj.insert(QString("disable_users_from_inactivity_period_days"), ::OpenAPI::toJsonValue(m_disable_users_from_inactivity_period_days));
    }
    if (m_disallowed_countries_isSet) {
        obj.insert(QString("disallowed_countries"), ::OpenAPI::toJsonValue(m_disallowed_countries));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_domain_hsts_header_isSet) {
        obj.insert(QString("domain_hsts_header"), ::OpenAPI::toJsonValue(m_domain_hsts_header));
    }
    if (m_domain_letsencrypt_chain_isSet) {
        obj.insert(QString("domain_letsencrypt_chain"), ::OpenAPI::toJsonValue(m_domain_letsencrypt_chain));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_folder_permissions_groups_only_isSet) {
        obj.insert(QString("folder_permissions_groups_only"), ::OpenAPI::toJsonValue(m_folder_permissions_groups_only));
    }
    if (m_ftp_enabled_isSet) {
        obj.insert(QString("ftp_enabled"), ::OpenAPI::toJsonValue(m_ftp_enabled));
    }
    if (m_hipaa_isSet) {
        obj.insert(QString("hipaa"), ::OpenAPI::toJsonValue(m_hipaa));
    }
    if (m_icon128.isSet()) {
        obj.insert(QString("icon128"), ::OpenAPI::toJsonValue(m_icon128));
    }
    if (m_icon16.isSet()) {
        obj.insert(QString("icon16"), ::OpenAPI::toJsonValue(m_icon16));
    }
    if (m_icon32.isSet()) {
        obj.insert(QString("icon32"), ::OpenAPI::toJsonValue(m_icon32));
    }
    if (m_icon48.isSet()) {
        obj.insert(QString("icon48"), ::OpenAPI::toJsonValue(m_icon48));
    }
    if (m_immutable_files_set_at_isSet) {
        obj.insert(QString("immutable_files_set_at"), ::OpenAPI::toJsonValue(m_immutable_files_set_at));
    }
    if (m_include_password_in_welcome_email_isSet) {
        obj.insert(QString("include_password_in_welcome_email"), ::OpenAPI::toJsonValue(m_include_password_in_welcome_email));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_ldap_base_dn_isSet) {
        obj.insert(QString("ldap_base_dn"), ::OpenAPI::toJsonValue(m_ldap_base_dn));
    }
    if (m_ldap_domain_isSet) {
        obj.insert(QString("ldap_domain"), ::OpenAPI::toJsonValue(m_ldap_domain));
    }
    if (m_ldap_enabled_isSet) {
        obj.insert(QString("ldap_enabled"), ::OpenAPI::toJsonValue(m_ldap_enabled));
    }
    if (m_ldap_group_action_isSet) {
        obj.insert(QString("ldap_group_action"), ::OpenAPI::toJsonValue(m_ldap_group_action));
    }
    if (m_ldap_group_exclusion_isSet) {
        obj.insert(QString("ldap_group_exclusion"), ::OpenAPI::toJsonValue(m_ldap_group_exclusion));
    }
    if (m_ldap_group_inclusion_isSet) {
        obj.insert(QString("ldap_group_inclusion"), ::OpenAPI::toJsonValue(m_ldap_group_inclusion));
    }
    if (m_ldap_host_isSet) {
        obj.insert(QString("ldap_host"), ::OpenAPI::toJsonValue(m_ldap_host));
    }
    if (m_ldap_host_2_isSet) {
        obj.insert(QString("ldap_host_2"), ::OpenAPI::toJsonValue(m_ldap_host_2));
    }
    if (m_ldap_host_3_isSet) {
        obj.insert(QString("ldap_host_3"), ::OpenAPI::toJsonValue(m_ldap_host_3));
    }
    if (m_ldap_port_isSet) {
        obj.insert(QString("ldap_port"), ::OpenAPI::toJsonValue(m_ldap_port));
    }
    if (m_ldap_secure_isSet) {
        obj.insert(QString("ldap_secure"), ::OpenAPI::toJsonValue(m_ldap_secure));
    }
    if (m_ldap_type_isSet) {
        obj.insert(QString("ldap_type"), ::OpenAPI::toJsonValue(m_ldap_type));
    }
    if (m_ldap_user_action_isSet) {
        obj.insert(QString("ldap_user_action"), ::OpenAPI::toJsonValue(m_ldap_user_action));
    }
    if (m_ldap_user_include_groups_isSet) {
        obj.insert(QString("ldap_user_include_groups"), ::OpenAPI::toJsonValue(m_ldap_user_include_groups));
    }
    if (m_ldap_username_isSet) {
        obj.insert(QString("ldap_username"), ::OpenAPI::toJsonValue(m_ldap_username));
    }
    if (m_ldap_username_field_isSet) {
        obj.insert(QString("ldap_username_field"), ::OpenAPI::toJsonValue(m_ldap_username_field));
    }
    if (m_login_help_text_isSet) {
        obj.insert(QString("login_help_text"), ::OpenAPI::toJsonValue(m_login_help_text));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_max_prior_passwords_isSet) {
        obj.insert(QString("max_prior_passwords"), ::OpenAPI::toJsonValue(m_max_prior_passwords));
    }
    if (m_mobile_app_isSet) {
        obj.insert(QString("mobile_app"), ::OpenAPI::toJsonValue(m_mobile_app));
    }
    if (m_mobile_app_session_ip_pinning_isSet) {
        obj.insert(QString("mobile_app_session_ip_pinning"), ::OpenAPI::toJsonValue(m_mobile_app_session_ip_pinning));
    }
    if (m_mobile_app_session_lifetime_isSet) {
        obj.insert(QString("mobile_app_session_lifetime"), ::OpenAPI::toJsonValue(m_mobile_app_session_lifetime));
    }
    if (m_motd_text_isSet) {
        obj.insert(QString("motd_text"), ::OpenAPI::toJsonValue(m_motd_text));
    }
    if (m_motd_use_for_ftp_isSet) {
        obj.insert(QString("motd_use_for_ftp"), ::OpenAPI::toJsonValue(m_motd_use_for_ftp));
    }
    if (m_motd_use_for_sftp_isSet) {
        obj.insert(QString("motd_use_for_sftp"), ::OpenAPI::toJsonValue(m_motd_use_for_sftp));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_billing_amount_isSet) {
        obj.insert(QString("next_billing_amount"), ::OpenAPI::toJsonValue(m_next_billing_amount));
    }
    if (m_next_billing_date_isSet) {
        obj.insert(QString("next_billing_date"), ::OpenAPI::toJsonValue(m_next_billing_date));
    }
    if (m_non_sso_groups_allowed_isSet) {
        obj.insert(QString("non_sso_groups_allowed"), ::OpenAPI::toJsonValue(m_non_sso_groups_allowed));
    }
    if (m_non_sso_users_allowed_isSet) {
        obj.insert(QString("non_sso_users_allowed"), ::OpenAPI::toJsonValue(m_non_sso_users_allowed));
    }
    if (m_office_integration_available_isSet) {
        obj.insert(QString("office_integration_available"), ::OpenAPI::toJsonValue(m_office_integration_available));
    }
    if (m_office_integration_type_isSet) {
        obj.insert(QString("office_integration_type"), ::OpenAPI::toJsonValue(m_office_integration_type));
    }
    if (m_oncehub_link_isSet) {
        obj.insert(QString("oncehub_link"), ::OpenAPI::toJsonValue(m_oncehub_link));
    }
    if (m_opt_out_global_isSet) {
        obj.insert(QString("opt_out_global"), ::OpenAPI::toJsonValue(m_opt_out_global));
    }
    if (m_overdue_isSet) {
        obj.insert(QString("overdue"), ::OpenAPI::toJsonValue(m_overdue));
    }
    if (m_password_min_length_isSet) {
        obj.insert(QString("password_min_length"), ::OpenAPI::toJsonValue(m_password_min_length));
    }
    if (m_password_require_letter_isSet) {
        obj.insert(QString("password_require_letter"), ::OpenAPI::toJsonValue(m_password_require_letter));
    }
    if (m_password_require_mixed_isSet) {
        obj.insert(QString("password_require_mixed"), ::OpenAPI::toJsonValue(m_password_require_mixed));
    }
    if (m_password_require_number_isSet) {
        obj.insert(QString("password_require_number"), ::OpenAPI::toJsonValue(m_password_require_number));
    }
    if (m_password_require_special_isSet) {
        obj.insert(QString("password_require_special"), ::OpenAPI::toJsonValue(m_password_require_special));
    }
    if (m_password_require_unbreached_isSet) {
        obj.insert(QString("password_require_unbreached"), ::OpenAPI::toJsonValue(m_password_require_unbreached));
    }
    if (m_password_requirements_apply_to_bundles_isSet) {
        obj.insert(QString("password_requirements_apply_to_bundles"), ::OpenAPI::toJsonValue(m_password_requirements_apply_to_bundles));
    }
    if (m_password_validity_days_isSet) {
        obj.insert(QString("password_validity_days"), ::OpenAPI::toJsonValue(m_password_validity_days));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_pin_all_remote_servers_to_site_region_isSet) {
        obj.insert(QString("pin_all_remote_servers_to_site_region"), ::OpenAPI::toJsonValue(m_pin_all_remote_servers_to_site_region));
    }
    if (m_reply_to_email_isSet) {
        obj.insert(QString("reply_to_email"), ::OpenAPI::toJsonValue(m_reply_to_email));
    }
    if (m_require_2fa_isSet) {
        obj.insert(QString("require_2fa"), ::OpenAPI::toJsonValue(m_require_2fa));
    }
    if (m_require_2fa_stop_time_isSet) {
        obj.insert(QString("require_2fa_stop_time"), ::OpenAPI::toJsonValue(m_require_2fa_stop_time));
    }
    if (m_require_2fa_user_type_isSet) {
        obj.insert(QString("require_2fa_user_type"), ::OpenAPI::toJsonValue(m_require_2fa_user_type));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_session_expiry_isSet) {
        obj.insert(QString("session_expiry"), ::OpenAPI::toJsonValue(m_session_expiry));
    }
    if (m_session_expiry_minutes_isSet) {
        obj.insert(QString("session_expiry_minutes"), ::OpenAPI::toJsonValue(m_session_expiry_minutes));
    }
    if (m_session_pinned_by_ip_isSet) {
        obj.insert(QString("session_pinned_by_ip"), ::OpenAPI::toJsonValue(m_session_pinned_by_ip));
    }
    if (m_sftp_enabled_isSet) {
        obj.insert(QString("sftp_enabled"), ::OpenAPI::toJsonValue(m_sftp_enabled));
    }
    if (m_sftp_host_key_type_isSet) {
        obj.insert(QString("sftp_host_key_type"), ::OpenAPI::toJsonValue(m_sftp_host_key_type));
    }
    if (m_sftp_insecure_ciphers_isSet) {
        obj.insert(QString("sftp_insecure_ciphers"), ::OpenAPI::toJsonValue(m_sftp_insecure_ciphers));
    }
    if (m_sftp_user_root_enabled_isSet) {
        obj.insert(QString("sftp_user_root_enabled"), ::OpenAPI::toJsonValue(m_sftp_user_root_enabled));
    }
    if (m_sharing_enabled_isSet) {
        obj.insert(QString("sharing_enabled"), ::OpenAPI::toJsonValue(m_sharing_enabled));
    }
    if (m_show_request_access_link_isSet) {
        obj.insert(QString("show_request_access_link"), ::OpenAPI::toJsonValue(m_show_request_access_link));
    }
    if (m_site_footer_isSet) {
        obj.insert(QString("site_footer"), ::OpenAPI::toJsonValue(m_site_footer));
    }
    if (m_site_header_isSet) {
        obj.insert(QString("site_header"), ::OpenAPI::toJsonValue(m_site_header));
    }
    if (m_smtp_address_isSet) {
        obj.insert(QString("smtp_address"), ::OpenAPI::toJsonValue(m_smtp_address));
    }
    if (m_smtp_authentication_isSet) {
        obj.insert(QString("smtp_authentication"), ::OpenAPI::toJsonValue(m_smtp_authentication));
    }
    if (m_smtp_from_isSet) {
        obj.insert(QString("smtp_from"), ::OpenAPI::toJsonValue(m_smtp_from));
    }
    if (m_smtp_port_isSet) {
        obj.insert(QString("smtp_port"), ::OpenAPI::toJsonValue(m_smtp_port));
    }
    if (m_smtp_username_isSet) {
        obj.insert(QString("smtp_username"), ::OpenAPI::toJsonValue(m_smtp_username));
    }
    if (m_ssl_required_isSet) {
        obj.insert(QString("ssl_required"), ::OpenAPI::toJsonValue(m_ssl_required));
    }
    if (m_subdomain_isSet) {
        obj.insert(QString("subdomain"), ::OpenAPI::toJsonValue(m_subdomain));
    }
    if (m_switch_to_plan_date_isSet) {
        obj.insert(QString("switch_to_plan_date"), ::OpenAPI::toJsonValue(m_switch_to_plan_date));
    }
    if (m_tls_disabled_isSet) {
        obj.insert(QString("tls_disabled"), ::OpenAPI::toJsonValue(m_tls_disabled));
    }
    if (m_trial_days_left_isSet) {
        obj.insert(QString("trial_days_left"), ::OpenAPI::toJsonValue(m_trial_days_left));
    }
    if (m_trial_until_isSet) {
        obj.insert(QString("trial_until"), ::OpenAPI::toJsonValue(m_trial_until));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_uploads_via_email_authentication_isSet) {
        obj.insert(QString("uploads_via_email_authentication"), ::OpenAPI::toJsonValue(m_uploads_via_email_authentication));
    }
    if (m_use_provided_modified_at_isSet) {
        obj.insert(QString("use_provided_modified_at"), ::OpenAPI::toJsonValue(m_use_provided_modified_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_lockout_isSet) {
        obj.insert(QString("user_lockout"), ::OpenAPI::toJsonValue(m_user_lockout));
    }
    if (m_user_lockout_lock_period_isSet) {
        obj.insert(QString("user_lockout_lock_period"), ::OpenAPI::toJsonValue(m_user_lockout_lock_period));
    }
    if (m_user_lockout_tries_isSet) {
        obj.insert(QString("user_lockout_tries"), ::OpenAPI::toJsonValue(m_user_lockout_tries));
    }
    if (m_user_lockout_within_isSet) {
        obj.insert(QString("user_lockout_within"), ::OpenAPI::toJsonValue(m_user_lockout_within));
    }
    if (m_user_requests_enabled_isSet) {
        obj.insert(QString("user_requests_enabled"), ::OpenAPI::toJsonValue(m_user_requests_enabled));
    }
    if (m_user_requests_notify_admins_isSet) {
        obj.insert(QString("user_requests_notify_admins"), ::OpenAPI::toJsonValue(m_user_requests_notify_admins));
    }
    if (m_welcome_custom_text_isSet) {
        obj.insert(QString("welcome_custom_text"), ::OpenAPI::toJsonValue(m_welcome_custom_text));
    }
    if (m_welcome_email_cc_isSet) {
        obj.insert(QString("welcome_email_cc"), ::OpenAPI::toJsonValue(m_welcome_email_cc));
    }
    if (m_welcome_email_enabled_isSet) {
        obj.insert(QString("welcome_email_enabled"), ::OpenAPI::toJsonValue(m_welcome_email_enabled));
    }
    if (m_welcome_email_subject_isSet) {
        obj.insert(QString("welcome_email_subject"), ::OpenAPI::toJsonValue(m_welcome_email_subject));
    }
    if (m_welcome_screen_isSet) {
        obj.insert(QString("welcome_screen"), ::OpenAPI::toJsonValue(m_welcome_screen));
    }
    if (m_windows_mode_ftp_isSet) {
        obj.insert(QString("windows_mode_ftp"), ::OpenAPI::toJsonValue(m_windows_mode_ftp));
    }
    return obj;
}

qint32 OAISiteEntity::getActiveSftpHostKeyId() const {
    return m_active_sftp_host_key_id;
}
void OAISiteEntity::setActiveSftpHostKeyId(const qint32 &active_sftp_host_key_id) {
    m_active_sftp_host_key_id = active_sftp_host_key_id;
    m_active_sftp_host_key_id_isSet = true;
}

bool OAISiteEntity::is_active_sftp_host_key_id_Set() const{
    return m_active_sftp_host_key_id_isSet;
}

bool OAISiteEntity::is_active_sftp_host_key_id_Valid() const{
    return m_active_sftp_host_key_id_isValid;
}

qint32 OAISiteEntity::getAdminUserId() const {
    return m_admin_user_id;
}
void OAISiteEntity::setAdminUserId(const qint32 &admin_user_id) {
    m_admin_user_id = admin_user_id;
    m_admin_user_id_isSet = true;
}

bool OAISiteEntity::is_admin_user_id_Set() const{
    return m_admin_user_id_isSet;
}

bool OAISiteEntity::is_admin_user_id_Valid() const{
    return m_admin_user_id_isValid;
}

bool OAISiteEntity::isAllowBundleNames() const {
    return m_allow_bundle_names;
}
void OAISiteEntity::setAllowBundleNames(const bool &allow_bundle_names) {
    m_allow_bundle_names = allow_bundle_names;
    m_allow_bundle_names_isSet = true;
}

bool OAISiteEntity::is_allow_bundle_names_Set() const{
    return m_allow_bundle_names_isSet;
}

bool OAISiteEntity::is_allow_bundle_names_Valid() const{
    return m_allow_bundle_names_isValid;
}

bool OAISiteEntity::isAllowed2faMethodBypassForFtpSftpDav() const {
    return m_allowed_2fa_method_bypass_for_ftp_sftp_dav;
}
void OAISiteEntity::setAllowed2faMethodBypassForFtpSftpDav(const bool &allowed_2fa_method_bypass_for_ftp_sftp_dav) {
    m_allowed_2fa_method_bypass_for_ftp_sftp_dav = allowed_2fa_method_bypass_for_ftp_sftp_dav;
    m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isSet = true;
}

bool OAISiteEntity::is_allowed_2fa_method_bypass_for_ftp_sftp_dav_Set() const{
    return m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isSet;
}

bool OAISiteEntity::is_allowed_2fa_method_bypass_for_ftp_sftp_dav_Valid() const{
    return m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isValid;
}

bool OAISiteEntity::isAllowed2faMethodSms() const {
    return m_allowed_2fa_method_sms;
}
void OAISiteEntity::setAllowed2faMethodSms(const bool &allowed_2fa_method_sms) {
    m_allowed_2fa_method_sms = allowed_2fa_method_sms;
    m_allowed_2fa_method_sms_isSet = true;
}

bool OAISiteEntity::is_allowed_2fa_method_sms_Set() const{
    return m_allowed_2fa_method_sms_isSet;
}

bool OAISiteEntity::is_allowed_2fa_method_sms_Valid() const{
    return m_allowed_2fa_method_sms_isValid;
}

bool OAISiteEntity::isAllowed2faMethodTotp() const {
    return m_allowed_2fa_method_totp;
}
void OAISiteEntity::setAllowed2faMethodTotp(const bool &allowed_2fa_method_totp) {
    m_allowed_2fa_method_totp = allowed_2fa_method_totp;
    m_allowed_2fa_method_totp_isSet = true;
}

bool OAISiteEntity::is_allowed_2fa_method_totp_Set() const{
    return m_allowed_2fa_method_totp_isSet;
}

bool OAISiteEntity::is_allowed_2fa_method_totp_Valid() const{
    return m_allowed_2fa_method_totp_isValid;
}

bool OAISiteEntity::isAllowed2faMethodU2f() const {
    return m_allowed_2fa_method_u2f;
}
void OAISiteEntity::setAllowed2faMethodU2f(const bool &allowed_2fa_method_u2f) {
    m_allowed_2fa_method_u2f = allowed_2fa_method_u2f;
    m_allowed_2fa_method_u2f_isSet = true;
}

bool OAISiteEntity::is_allowed_2fa_method_u2f_Set() const{
    return m_allowed_2fa_method_u2f_isSet;
}

bool OAISiteEntity::is_allowed_2fa_method_u2f_Valid() const{
    return m_allowed_2fa_method_u2f_isValid;
}

bool OAISiteEntity::isAllowed2faMethodWebauthn() const {
    return m_allowed_2fa_method_webauthn;
}
void OAISiteEntity::setAllowed2faMethodWebauthn(const bool &allowed_2fa_method_webauthn) {
    m_allowed_2fa_method_webauthn = allowed_2fa_method_webauthn;
    m_allowed_2fa_method_webauthn_isSet = true;
}

bool OAISiteEntity::is_allowed_2fa_method_webauthn_Set() const{
    return m_allowed_2fa_method_webauthn_isSet;
}

bool OAISiteEntity::is_allowed_2fa_method_webauthn_Valid() const{
    return m_allowed_2fa_method_webauthn_isValid;
}

bool OAISiteEntity::isAllowed2faMethodYubi() const {
    return m_allowed_2fa_method_yubi;
}
void OAISiteEntity::setAllowed2faMethodYubi(const bool &allowed_2fa_method_yubi) {
    m_allowed_2fa_method_yubi = allowed_2fa_method_yubi;
    m_allowed_2fa_method_yubi_isSet = true;
}

bool OAISiteEntity::is_allowed_2fa_method_yubi_Set() const{
    return m_allowed_2fa_method_yubi_isSet;
}

bool OAISiteEntity::is_allowed_2fa_method_yubi_Valid() const{
    return m_allowed_2fa_method_yubi_isValid;
}

QString OAISiteEntity::getAllowedCountries() const {
    return m_allowed_countries;
}
void OAISiteEntity::setAllowedCountries(const QString &allowed_countries) {
    m_allowed_countries = allowed_countries;
    m_allowed_countries_isSet = true;
}

bool OAISiteEntity::is_allowed_countries_Set() const{
    return m_allowed_countries_isSet;
}

bool OAISiteEntity::is_allowed_countries_Valid() const{
    return m_allowed_countries_isValid;
}

QString OAISiteEntity::getAllowedIps() const {
    return m_allowed_ips;
}
void OAISiteEntity::setAllowedIps(const QString &allowed_ips) {
    m_allowed_ips = allowed_ips;
    m_allowed_ips_isSet = true;
}

bool OAISiteEntity::is_allowed_ips_Set() const{
    return m_allowed_ips_isSet;
}

bool OAISiteEntity::is_allowed_ips_Valid() const{
    return m_allowed_ips_isValid;
}

bool OAISiteEntity::isAskAboutOverwrites() const {
    return m_ask_about_overwrites;
}
void OAISiteEntity::setAskAboutOverwrites(const bool &ask_about_overwrites) {
    m_ask_about_overwrites = ask_about_overwrites;
    m_ask_about_overwrites_isSet = true;
}

bool OAISiteEntity::is_ask_about_overwrites_Set() const{
    return m_ask_about_overwrites_isSet;
}

bool OAISiteEntity::is_ask_about_overwrites_Valid() const{
    return m_ask_about_overwrites_isValid;
}

QString OAISiteEntity::getBundleActivityNotifications() const {
    return m_bundle_activity_notifications;
}
void OAISiteEntity::setBundleActivityNotifications(const QString &bundle_activity_notifications) {
    m_bundle_activity_notifications = bundle_activity_notifications;
    m_bundle_activity_notifications_isSet = true;
}

bool OAISiteEntity::is_bundle_activity_notifications_Set() const{
    return m_bundle_activity_notifications_isSet;
}

bool OAISiteEntity::is_bundle_activity_notifications_Valid() const{
    return m_bundle_activity_notifications_isValid;
}

qint32 OAISiteEntity::getBundleExpiration() const {
    return m_bundle_expiration;
}
void OAISiteEntity::setBundleExpiration(const qint32 &bundle_expiration) {
    m_bundle_expiration = bundle_expiration;
    m_bundle_expiration_isSet = true;
}

bool OAISiteEntity::is_bundle_expiration_Set() const{
    return m_bundle_expiration_isSet;
}

bool OAISiteEntity::is_bundle_expiration_Valid() const{
    return m_bundle_expiration_isValid;
}

bool OAISiteEntity::isBundlePasswordRequired() const {
    return m_bundle_password_required;
}
void OAISiteEntity::setBundlePasswordRequired(const bool &bundle_password_required) {
    m_bundle_password_required = bundle_password_required;
    m_bundle_password_required_isSet = true;
}

bool OAISiteEntity::is_bundle_password_required_Set() const{
    return m_bundle_password_required_isSet;
}

bool OAISiteEntity::is_bundle_password_required_Valid() const{
    return m_bundle_password_required_isValid;
}

QString OAISiteEntity::getBundleRegistrationNotifications() const {
    return m_bundle_registration_notifications;
}
void OAISiteEntity::setBundleRegistrationNotifications(const QString &bundle_registration_notifications) {
    m_bundle_registration_notifications = bundle_registration_notifications;
    m_bundle_registration_notifications_isSet = true;
}

bool OAISiteEntity::is_bundle_registration_notifications_Set() const{
    return m_bundle_registration_notifications_isSet;
}

bool OAISiteEntity::is_bundle_registration_notifications_Valid() const{
    return m_bundle_registration_notifications_isValid;
}

bool OAISiteEntity::isBundleRequireShareRecipient() const {
    return m_bundle_require_share_recipient;
}
void OAISiteEntity::setBundleRequireShareRecipient(const bool &bundle_require_share_recipient) {
    m_bundle_require_share_recipient = bundle_require_share_recipient;
    m_bundle_require_share_recipient_isSet = true;
}

bool OAISiteEntity::is_bundle_require_share_recipient_Set() const{
    return m_bundle_require_share_recipient_isSet;
}

bool OAISiteEntity::is_bundle_require_share_recipient_Valid() const{
    return m_bundle_require_share_recipient_isValid;
}

QString OAISiteEntity::getBundleUploadReceiptNotifications() const {
    return m_bundle_upload_receipt_notifications;
}
void OAISiteEntity::setBundleUploadReceiptNotifications(const QString &bundle_upload_receipt_notifications) {
    m_bundle_upload_receipt_notifications = bundle_upload_receipt_notifications;
    m_bundle_upload_receipt_notifications_isSet = true;
}

bool OAISiteEntity::is_bundle_upload_receipt_notifications_Set() const{
    return m_bundle_upload_receipt_notifications_isSet;
}

bool OAISiteEntity::is_bundle_upload_receipt_notifications_Valid() const{
    return m_bundle_upload_receipt_notifications_isValid;
}

OAIImageEntity OAISiteEntity::getBundleWatermarkAttachment() const {
    return m_bundle_watermark_attachment;
}
void OAISiteEntity::setBundleWatermarkAttachment(const OAIImageEntity &bundle_watermark_attachment) {
    m_bundle_watermark_attachment = bundle_watermark_attachment;
    m_bundle_watermark_attachment_isSet = true;
}

bool OAISiteEntity::is_bundle_watermark_attachment_Set() const{
    return m_bundle_watermark_attachment_isSet;
}

bool OAISiteEntity::is_bundle_watermark_attachment_Valid() const{
    return m_bundle_watermark_attachment_isValid;
}

OAIObject OAISiteEntity::getBundleWatermarkValue() const {
    return m_bundle_watermark_value;
}
void OAISiteEntity::setBundleWatermarkValue(const OAIObject &bundle_watermark_value) {
    m_bundle_watermark_value = bundle_watermark_value;
    m_bundle_watermark_value_isSet = true;
}

bool OAISiteEntity::is_bundle_watermark_value_Set() const{
    return m_bundle_watermark_value_isSet;
}

bool OAISiteEntity::is_bundle_watermark_value_Valid() const{
    return m_bundle_watermark_value_isValid;
}

QString OAISiteEntity::getColor2Left() const {
    return m_color2_left;
}
void OAISiteEntity::setColor2Left(const QString &color2_left) {
    m_color2_left = color2_left;
    m_color2_left_isSet = true;
}

bool OAISiteEntity::is_color2_left_Set() const{
    return m_color2_left_isSet;
}

bool OAISiteEntity::is_color2_left_Valid() const{
    return m_color2_left_isValid;
}

QString OAISiteEntity::getColor2Link() const {
    return m_color2_link;
}
void OAISiteEntity::setColor2Link(const QString &color2_link) {
    m_color2_link = color2_link;
    m_color2_link_isSet = true;
}

bool OAISiteEntity::is_color2_link_Set() const{
    return m_color2_link_isSet;
}

bool OAISiteEntity::is_color2_link_Valid() const{
    return m_color2_link_isValid;
}

QString OAISiteEntity::getColor2Text() const {
    return m_color2_text;
}
void OAISiteEntity::setColor2Text(const QString &color2_text) {
    m_color2_text = color2_text;
    m_color2_text_isSet = true;
}

bool OAISiteEntity::is_color2_text_Set() const{
    return m_color2_text_isSet;
}

bool OAISiteEntity::is_color2_text_Valid() const{
    return m_color2_text_isValid;
}

QString OAISiteEntity::getColor2Top() const {
    return m_color2_top;
}
void OAISiteEntity::setColor2Top(const QString &color2_top) {
    m_color2_top = color2_top;
    m_color2_top_isSet = true;
}

bool OAISiteEntity::is_color2_top_Set() const{
    return m_color2_top_isSet;
}

bool OAISiteEntity::is_color2_top_Valid() const{
    return m_color2_top_isValid;
}

QString OAISiteEntity::getColor2TopText() const {
    return m_color2_top_text;
}
void OAISiteEntity::setColor2TopText(const QString &color2_top_text) {
    m_color2_top_text = color2_top_text;
    m_color2_top_text_isSet = true;
}

bool OAISiteEntity::is_color2_top_text_Set() const{
    return m_color2_top_text_isSet;
}

bool OAISiteEntity::is_color2_top_text_Valid() const{
    return m_color2_top_text_isValid;
}

QString OAISiteEntity::getContactName() const {
    return m_contact_name;
}
void OAISiteEntity::setContactName(const QString &contact_name) {
    m_contact_name = contact_name;
    m_contact_name_isSet = true;
}

bool OAISiteEntity::is_contact_name_Set() const{
    return m_contact_name_isSet;
}

bool OAISiteEntity::is_contact_name_Valid() const{
    return m_contact_name_isValid;
}

QDateTime OAISiteEntity::getCreatedAt() const {
    return m_created_at;
}
void OAISiteEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISiteEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISiteEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISiteEntity::getCurrency() const {
    return m_currency;
}
void OAISiteEntity::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISiteEntity::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISiteEntity::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAISiteEntity::isCustomNamespace() const {
    return m_custom_namespace;
}
void OAISiteEntity::setCustomNamespace(const bool &custom_namespace) {
    m_custom_namespace = custom_namespace;
    m_custom_namespace_isSet = true;
}

bool OAISiteEntity::is_custom_namespace_Set() const{
    return m_custom_namespace_isSet;
}

bool OAISiteEntity::is_custom_namespace_Valid() const{
    return m_custom_namespace_isValid;
}

qint32 OAISiteEntity::getDaysToRetainBackups() const {
    return m_days_to_retain_backups;
}
void OAISiteEntity::setDaysToRetainBackups(const qint32 &days_to_retain_backups) {
    m_days_to_retain_backups = days_to_retain_backups;
    m_days_to_retain_backups_isSet = true;
}

bool OAISiteEntity::is_days_to_retain_backups_Set() const{
    return m_days_to_retain_backups_isSet;
}

bool OAISiteEntity::is_days_to_retain_backups_Valid() const{
    return m_days_to_retain_backups_isValid;
}

QString OAISiteEntity::getDefaultTimeZone() const {
    return m_default_time_zone;
}
void OAISiteEntity::setDefaultTimeZone(const QString &default_time_zone) {
    m_default_time_zone = default_time_zone;
    m_default_time_zone_isSet = true;
}

bool OAISiteEntity::is_default_time_zone_Set() const{
    return m_default_time_zone_isSet;
}

bool OAISiteEntity::is_default_time_zone_Valid() const{
    return m_default_time_zone_isValid;
}

bool OAISiteEntity::isDesktopApp() const {
    return m_desktop_app;
}
void OAISiteEntity::setDesktopApp(const bool &desktop_app) {
    m_desktop_app = desktop_app;
    m_desktop_app_isSet = true;
}

bool OAISiteEntity::is_desktop_app_Set() const{
    return m_desktop_app_isSet;
}

bool OAISiteEntity::is_desktop_app_Valid() const{
    return m_desktop_app_isValid;
}

bool OAISiteEntity::isDesktopAppSessionIpPinning() const {
    return m_desktop_app_session_ip_pinning;
}
void OAISiteEntity::setDesktopAppSessionIpPinning(const bool &desktop_app_session_ip_pinning) {
    m_desktop_app_session_ip_pinning = desktop_app_session_ip_pinning;
    m_desktop_app_session_ip_pinning_isSet = true;
}

bool OAISiteEntity::is_desktop_app_session_ip_pinning_Set() const{
    return m_desktop_app_session_ip_pinning_isSet;
}

bool OAISiteEntity::is_desktop_app_session_ip_pinning_Valid() const{
    return m_desktop_app_session_ip_pinning_isValid;
}

qint32 OAISiteEntity::getDesktopAppSessionLifetime() const {
    return m_desktop_app_session_lifetime;
}
void OAISiteEntity::setDesktopAppSessionLifetime(const qint32 &desktop_app_session_lifetime) {
    m_desktop_app_session_lifetime = desktop_app_session_lifetime;
    m_desktop_app_session_lifetime_isSet = true;
}

bool OAISiteEntity::is_desktop_app_session_lifetime_Set() const{
    return m_desktop_app_session_lifetime_isSet;
}

bool OAISiteEntity::is_desktop_app_session_lifetime_Valid() const{
    return m_desktop_app_session_lifetime_isValid;
}

bool OAISiteEntity::isDisableFilesCertificateGeneration() const {
    return m_disable_files_certificate_generation;
}
void OAISiteEntity::setDisableFilesCertificateGeneration(const bool &disable_files_certificate_generation) {
    m_disable_files_certificate_generation = disable_files_certificate_generation;
    m_disable_files_certificate_generation_isSet = true;
}

bool OAISiteEntity::is_disable_files_certificate_generation_Set() const{
    return m_disable_files_certificate_generation_isSet;
}

bool OAISiteEntity::is_disable_files_certificate_generation_Valid() const{
    return m_disable_files_certificate_generation_isValid;
}

bool OAISiteEntity::isDisableNotifications() const {
    return m_disable_notifications;
}
void OAISiteEntity::setDisableNotifications(const bool &disable_notifications) {
    m_disable_notifications = disable_notifications;
    m_disable_notifications_isSet = true;
}

bool OAISiteEntity::is_disable_notifications_Set() const{
    return m_disable_notifications_isSet;
}

bool OAISiteEntity::is_disable_notifications_Valid() const{
    return m_disable_notifications_isValid;
}

bool OAISiteEntity::isDisablePasswordReset() const {
    return m_disable_password_reset;
}
void OAISiteEntity::setDisablePasswordReset(const bool &disable_password_reset) {
    m_disable_password_reset = disable_password_reset;
    m_disable_password_reset_isSet = true;
}

bool OAISiteEntity::is_disable_password_reset_Set() const{
    return m_disable_password_reset_isSet;
}

bool OAISiteEntity::is_disable_password_reset_Valid() const{
    return m_disable_password_reset_isValid;
}

qint32 OAISiteEntity::getDisableUsersFromInactivityPeriodDays() const {
    return m_disable_users_from_inactivity_period_days;
}
void OAISiteEntity::setDisableUsersFromInactivityPeriodDays(const qint32 &disable_users_from_inactivity_period_days) {
    m_disable_users_from_inactivity_period_days = disable_users_from_inactivity_period_days;
    m_disable_users_from_inactivity_period_days_isSet = true;
}

bool OAISiteEntity::is_disable_users_from_inactivity_period_days_Set() const{
    return m_disable_users_from_inactivity_period_days_isSet;
}

bool OAISiteEntity::is_disable_users_from_inactivity_period_days_Valid() const{
    return m_disable_users_from_inactivity_period_days_isValid;
}

QString OAISiteEntity::getDisallowedCountries() const {
    return m_disallowed_countries;
}
void OAISiteEntity::setDisallowedCountries(const QString &disallowed_countries) {
    m_disallowed_countries = disallowed_countries;
    m_disallowed_countries_isSet = true;
}

bool OAISiteEntity::is_disallowed_countries_Set() const{
    return m_disallowed_countries_isSet;
}

bool OAISiteEntity::is_disallowed_countries_Valid() const{
    return m_disallowed_countries_isValid;
}

QString OAISiteEntity::getDomain() const {
    return m_domain;
}
void OAISiteEntity::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAISiteEntity::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAISiteEntity::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAISiteEntity::isDomainHstsHeader() const {
    return m_domain_hsts_header;
}
void OAISiteEntity::setDomainHstsHeader(const bool &domain_hsts_header) {
    m_domain_hsts_header = domain_hsts_header;
    m_domain_hsts_header_isSet = true;
}

bool OAISiteEntity::is_domain_hsts_header_Set() const{
    return m_domain_hsts_header_isSet;
}

bool OAISiteEntity::is_domain_hsts_header_Valid() const{
    return m_domain_hsts_header_isValid;
}

QString OAISiteEntity::getDomainLetsencryptChain() const {
    return m_domain_letsencrypt_chain;
}
void OAISiteEntity::setDomainLetsencryptChain(const QString &domain_letsencrypt_chain) {
    m_domain_letsencrypt_chain = domain_letsencrypt_chain;
    m_domain_letsencrypt_chain_isSet = true;
}

bool OAISiteEntity::is_domain_letsencrypt_chain_Set() const{
    return m_domain_letsencrypt_chain_isSet;
}

bool OAISiteEntity::is_domain_letsencrypt_chain_Valid() const{
    return m_domain_letsencrypt_chain_isValid;
}

QString OAISiteEntity::getEmail() const {
    return m_email;
}
void OAISiteEntity::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISiteEntity::is_email_Set() const{
    return m_email_isSet;
}

bool OAISiteEntity::is_email_Valid() const{
    return m_email_isValid;
}

bool OAISiteEntity::isFolderPermissionsGroupsOnly() const {
    return m_folder_permissions_groups_only;
}
void OAISiteEntity::setFolderPermissionsGroupsOnly(const bool &folder_permissions_groups_only) {
    m_folder_permissions_groups_only = folder_permissions_groups_only;
    m_folder_permissions_groups_only_isSet = true;
}

bool OAISiteEntity::is_folder_permissions_groups_only_Set() const{
    return m_folder_permissions_groups_only_isSet;
}

bool OAISiteEntity::is_folder_permissions_groups_only_Valid() const{
    return m_folder_permissions_groups_only_isValid;
}

bool OAISiteEntity::isFtpEnabled() const {
    return m_ftp_enabled;
}
void OAISiteEntity::setFtpEnabled(const bool &ftp_enabled) {
    m_ftp_enabled = ftp_enabled;
    m_ftp_enabled_isSet = true;
}

bool OAISiteEntity::is_ftp_enabled_Set() const{
    return m_ftp_enabled_isSet;
}

bool OAISiteEntity::is_ftp_enabled_Valid() const{
    return m_ftp_enabled_isValid;
}

bool OAISiteEntity::isHipaa() const {
    return m_hipaa;
}
void OAISiteEntity::setHipaa(const bool &hipaa) {
    m_hipaa = hipaa;
    m_hipaa_isSet = true;
}

bool OAISiteEntity::is_hipaa_Set() const{
    return m_hipaa_isSet;
}

bool OAISiteEntity::is_hipaa_Valid() const{
    return m_hipaa_isValid;
}

OAIImageEntity OAISiteEntity::getIcon128() const {
    return m_icon128;
}
void OAISiteEntity::setIcon128(const OAIImageEntity &icon128) {
    m_icon128 = icon128;
    m_icon128_isSet = true;
}

bool OAISiteEntity::is_icon128_Set() const{
    return m_icon128_isSet;
}

bool OAISiteEntity::is_icon128_Valid() const{
    return m_icon128_isValid;
}

OAIImageEntity OAISiteEntity::getIcon16() const {
    return m_icon16;
}
void OAISiteEntity::setIcon16(const OAIImageEntity &icon16) {
    m_icon16 = icon16;
    m_icon16_isSet = true;
}

bool OAISiteEntity::is_icon16_Set() const{
    return m_icon16_isSet;
}

bool OAISiteEntity::is_icon16_Valid() const{
    return m_icon16_isValid;
}

OAIImageEntity OAISiteEntity::getIcon32() const {
    return m_icon32;
}
void OAISiteEntity::setIcon32(const OAIImageEntity &icon32) {
    m_icon32 = icon32;
    m_icon32_isSet = true;
}

bool OAISiteEntity::is_icon32_Set() const{
    return m_icon32_isSet;
}

bool OAISiteEntity::is_icon32_Valid() const{
    return m_icon32_isValid;
}

OAIImageEntity OAISiteEntity::getIcon48() const {
    return m_icon48;
}
void OAISiteEntity::setIcon48(const OAIImageEntity &icon48) {
    m_icon48 = icon48;
    m_icon48_isSet = true;
}

bool OAISiteEntity::is_icon48_Set() const{
    return m_icon48_isSet;
}

bool OAISiteEntity::is_icon48_Valid() const{
    return m_icon48_isValid;
}

QDateTime OAISiteEntity::getImmutableFilesSetAt() const {
    return m_immutable_files_set_at;
}
void OAISiteEntity::setImmutableFilesSetAt(const QDateTime &immutable_files_set_at) {
    m_immutable_files_set_at = immutable_files_set_at;
    m_immutable_files_set_at_isSet = true;
}

bool OAISiteEntity::is_immutable_files_set_at_Set() const{
    return m_immutable_files_set_at_isSet;
}

bool OAISiteEntity::is_immutable_files_set_at_Valid() const{
    return m_immutable_files_set_at_isValid;
}

bool OAISiteEntity::isIncludePasswordInWelcomeEmail() const {
    return m_include_password_in_welcome_email;
}
void OAISiteEntity::setIncludePasswordInWelcomeEmail(const bool &include_password_in_welcome_email) {
    m_include_password_in_welcome_email = include_password_in_welcome_email;
    m_include_password_in_welcome_email_isSet = true;
}

bool OAISiteEntity::is_include_password_in_welcome_email_Set() const{
    return m_include_password_in_welcome_email_isSet;
}

bool OAISiteEntity::is_include_password_in_welcome_email_Valid() const{
    return m_include_password_in_welcome_email_isValid;
}

QString OAISiteEntity::getLanguage() const {
    return m_language;
}
void OAISiteEntity::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISiteEntity::is_language_Set() const{
    return m_language_isSet;
}

bool OAISiteEntity::is_language_Valid() const{
    return m_language_isValid;
}

QString OAISiteEntity::getLdapBaseDn() const {
    return m_ldap_base_dn;
}
void OAISiteEntity::setLdapBaseDn(const QString &ldap_base_dn) {
    m_ldap_base_dn = ldap_base_dn;
    m_ldap_base_dn_isSet = true;
}

bool OAISiteEntity::is_ldap_base_dn_Set() const{
    return m_ldap_base_dn_isSet;
}

bool OAISiteEntity::is_ldap_base_dn_Valid() const{
    return m_ldap_base_dn_isValid;
}

QString OAISiteEntity::getLdapDomain() const {
    return m_ldap_domain;
}
void OAISiteEntity::setLdapDomain(const QString &ldap_domain) {
    m_ldap_domain = ldap_domain;
    m_ldap_domain_isSet = true;
}

bool OAISiteEntity::is_ldap_domain_Set() const{
    return m_ldap_domain_isSet;
}

bool OAISiteEntity::is_ldap_domain_Valid() const{
    return m_ldap_domain_isValid;
}

bool OAISiteEntity::isLdapEnabled() const {
    return m_ldap_enabled;
}
void OAISiteEntity::setLdapEnabled(const bool &ldap_enabled) {
    m_ldap_enabled = ldap_enabled;
    m_ldap_enabled_isSet = true;
}

bool OAISiteEntity::is_ldap_enabled_Set() const{
    return m_ldap_enabled_isSet;
}

bool OAISiteEntity::is_ldap_enabled_Valid() const{
    return m_ldap_enabled_isValid;
}

QString OAISiteEntity::getLdapGroupAction() const {
    return m_ldap_group_action;
}
void OAISiteEntity::setLdapGroupAction(const QString &ldap_group_action) {
    m_ldap_group_action = ldap_group_action;
    m_ldap_group_action_isSet = true;
}

bool OAISiteEntity::is_ldap_group_action_Set() const{
    return m_ldap_group_action_isSet;
}

bool OAISiteEntity::is_ldap_group_action_Valid() const{
    return m_ldap_group_action_isValid;
}

QString OAISiteEntity::getLdapGroupExclusion() const {
    return m_ldap_group_exclusion;
}
void OAISiteEntity::setLdapGroupExclusion(const QString &ldap_group_exclusion) {
    m_ldap_group_exclusion = ldap_group_exclusion;
    m_ldap_group_exclusion_isSet = true;
}

bool OAISiteEntity::is_ldap_group_exclusion_Set() const{
    return m_ldap_group_exclusion_isSet;
}

bool OAISiteEntity::is_ldap_group_exclusion_Valid() const{
    return m_ldap_group_exclusion_isValid;
}

QString OAISiteEntity::getLdapGroupInclusion() const {
    return m_ldap_group_inclusion;
}
void OAISiteEntity::setLdapGroupInclusion(const QString &ldap_group_inclusion) {
    m_ldap_group_inclusion = ldap_group_inclusion;
    m_ldap_group_inclusion_isSet = true;
}

bool OAISiteEntity::is_ldap_group_inclusion_Set() const{
    return m_ldap_group_inclusion_isSet;
}

bool OAISiteEntity::is_ldap_group_inclusion_Valid() const{
    return m_ldap_group_inclusion_isValid;
}

QString OAISiteEntity::getLdapHost() const {
    return m_ldap_host;
}
void OAISiteEntity::setLdapHost(const QString &ldap_host) {
    m_ldap_host = ldap_host;
    m_ldap_host_isSet = true;
}

bool OAISiteEntity::is_ldap_host_Set() const{
    return m_ldap_host_isSet;
}

bool OAISiteEntity::is_ldap_host_Valid() const{
    return m_ldap_host_isValid;
}

QString OAISiteEntity::getLdapHost2() const {
    return m_ldap_host_2;
}
void OAISiteEntity::setLdapHost2(const QString &ldap_host_2) {
    m_ldap_host_2 = ldap_host_2;
    m_ldap_host_2_isSet = true;
}

bool OAISiteEntity::is_ldap_host_2_Set() const{
    return m_ldap_host_2_isSet;
}

bool OAISiteEntity::is_ldap_host_2_Valid() const{
    return m_ldap_host_2_isValid;
}

QString OAISiteEntity::getLdapHost3() const {
    return m_ldap_host_3;
}
void OAISiteEntity::setLdapHost3(const QString &ldap_host_3) {
    m_ldap_host_3 = ldap_host_3;
    m_ldap_host_3_isSet = true;
}

bool OAISiteEntity::is_ldap_host_3_Set() const{
    return m_ldap_host_3_isSet;
}

bool OAISiteEntity::is_ldap_host_3_Valid() const{
    return m_ldap_host_3_isValid;
}

qint32 OAISiteEntity::getLdapPort() const {
    return m_ldap_port;
}
void OAISiteEntity::setLdapPort(const qint32 &ldap_port) {
    m_ldap_port = ldap_port;
    m_ldap_port_isSet = true;
}

bool OAISiteEntity::is_ldap_port_Set() const{
    return m_ldap_port_isSet;
}

bool OAISiteEntity::is_ldap_port_Valid() const{
    return m_ldap_port_isValid;
}

bool OAISiteEntity::isLdapSecure() const {
    return m_ldap_secure;
}
void OAISiteEntity::setLdapSecure(const bool &ldap_secure) {
    m_ldap_secure = ldap_secure;
    m_ldap_secure_isSet = true;
}

bool OAISiteEntity::is_ldap_secure_Set() const{
    return m_ldap_secure_isSet;
}

bool OAISiteEntity::is_ldap_secure_Valid() const{
    return m_ldap_secure_isValid;
}

QString OAISiteEntity::getLdapType() const {
    return m_ldap_type;
}
void OAISiteEntity::setLdapType(const QString &ldap_type) {
    m_ldap_type = ldap_type;
    m_ldap_type_isSet = true;
}

bool OAISiteEntity::is_ldap_type_Set() const{
    return m_ldap_type_isSet;
}

bool OAISiteEntity::is_ldap_type_Valid() const{
    return m_ldap_type_isValid;
}

QString OAISiteEntity::getLdapUserAction() const {
    return m_ldap_user_action;
}
void OAISiteEntity::setLdapUserAction(const QString &ldap_user_action) {
    m_ldap_user_action = ldap_user_action;
    m_ldap_user_action_isSet = true;
}

bool OAISiteEntity::is_ldap_user_action_Set() const{
    return m_ldap_user_action_isSet;
}

bool OAISiteEntity::is_ldap_user_action_Valid() const{
    return m_ldap_user_action_isValid;
}

QString OAISiteEntity::getLdapUserIncludeGroups() const {
    return m_ldap_user_include_groups;
}
void OAISiteEntity::setLdapUserIncludeGroups(const QString &ldap_user_include_groups) {
    m_ldap_user_include_groups = ldap_user_include_groups;
    m_ldap_user_include_groups_isSet = true;
}

bool OAISiteEntity::is_ldap_user_include_groups_Set() const{
    return m_ldap_user_include_groups_isSet;
}

bool OAISiteEntity::is_ldap_user_include_groups_Valid() const{
    return m_ldap_user_include_groups_isValid;
}

QString OAISiteEntity::getLdapUsername() const {
    return m_ldap_username;
}
void OAISiteEntity::setLdapUsername(const QString &ldap_username) {
    m_ldap_username = ldap_username;
    m_ldap_username_isSet = true;
}

bool OAISiteEntity::is_ldap_username_Set() const{
    return m_ldap_username_isSet;
}

bool OAISiteEntity::is_ldap_username_Valid() const{
    return m_ldap_username_isValid;
}

QString OAISiteEntity::getLdapUsernameField() const {
    return m_ldap_username_field;
}
void OAISiteEntity::setLdapUsernameField(const QString &ldap_username_field) {
    m_ldap_username_field = ldap_username_field;
    m_ldap_username_field_isSet = true;
}

bool OAISiteEntity::is_ldap_username_field_Set() const{
    return m_ldap_username_field_isSet;
}

bool OAISiteEntity::is_ldap_username_field_Valid() const{
    return m_ldap_username_field_isValid;
}

QString OAISiteEntity::getLoginHelpText() const {
    return m_login_help_text;
}
void OAISiteEntity::setLoginHelpText(const QString &login_help_text) {
    m_login_help_text = login_help_text;
    m_login_help_text_isSet = true;
}

bool OAISiteEntity::is_login_help_text_Set() const{
    return m_login_help_text_isSet;
}

bool OAISiteEntity::is_login_help_text_Valid() const{
    return m_login_help_text_isValid;
}

OAIImageEntity OAISiteEntity::getLogo() const {
    return m_logo;
}
void OAISiteEntity::setLogo(const OAIImageEntity &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAISiteEntity::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAISiteEntity::is_logo_Valid() const{
    return m_logo_isValid;
}

qint32 OAISiteEntity::getMaxPriorPasswords() const {
    return m_max_prior_passwords;
}
void OAISiteEntity::setMaxPriorPasswords(const qint32 &max_prior_passwords) {
    m_max_prior_passwords = max_prior_passwords;
    m_max_prior_passwords_isSet = true;
}

bool OAISiteEntity::is_max_prior_passwords_Set() const{
    return m_max_prior_passwords_isSet;
}

bool OAISiteEntity::is_max_prior_passwords_Valid() const{
    return m_max_prior_passwords_isValid;
}

bool OAISiteEntity::isMobileApp() const {
    return m_mobile_app;
}
void OAISiteEntity::setMobileApp(const bool &mobile_app) {
    m_mobile_app = mobile_app;
    m_mobile_app_isSet = true;
}

bool OAISiteEntity::is_mobile_app_Set() const{
    return m_mobile_app_isSet;
}

bool OAISiteEntity::is_mobile_app_Valid() const{
    return m_mobile_app_isValid;
}

bool OAISiteEntity::isMobileAppSessionIpPinning() const {
    return m_mobile_app_session_ip_pinning;
}
void OAISiteEntity::setMobileAppSessionIpPinning(const bool &mobile_app_session_ip_pinning) {
    m_mobile_app_session_ip_pinning = mobile_app_session_ip_pinning;
    m_mobile_app_session_ip_pinning_isSet = true;
}

bool OAISiteEntity::is_mobile_app_session_ip_pinning_Set() const{
    return m_mobile_app_session_ip_pinning_isSet;
}

bool OAISiteEntity::is_mobile_app_session_ip_pinning_Valid() const{
    return m_mobile_app_session_ip_pinning_isValid;
}

qint32 OAISiteEntity::getMobileAppSessionLifetime() const {
    return m_mobile_app_session_lifetime;
}
void OAISiteEntity::setMobileAppSessionLifetime(const qint32 &mobile_app_session_lifetime) {
    m_mobile_app_session_lifetime = mobile_app_session_lifetime;
    m_mobile_app_session_lifetime_isSet = true;
}

bool OAISiteEntity::is_mobile_app_session_lifetime_Set() const{
    return m_mobile_app_session_lifetime_isSet;
}

bool OAISiteEntity::is_mobile_app_session_lifetime_Valid() const{
    return m_mobile_app_session_lifetime_isValid;
}

QString OAISiteEntity::getMotdText() const {
    return m_motd_text;
}
void OAISiteEntity::setMotdText(const QString &motd_text) {
    m_motd_text = motd_text;
    m_motd_text_isSet = true;
}

bool OAISiteEntity::is_motd_text_Set() const{
    return m_motd_text_isSet;
}

bool OAISiteEntity::is_motd_text_Valid() const{
    return m_motd_text_isValid;
}

bool OAISiteEntity::isMotdUseForFtp() const {
    return m_motd_use_for_ftp;
}
void OAISiteEntity::setMotdUseForFtp(const bool &motd_use_for_ftp) {
    m_motd_use_for_ftp = motd_use_for_ftp;
    m_motd_use_for_ftp_isSet = true;
}

bool OAISiteEntity::is_motd_use_for_ftp_Set() const{
    return m_motd_use_for_ftp_isSet;
}

bool OAISiteEntity::is_motd_use_for_ftp_Valid() const{
    return m_motd_use_for_ftp_isValid;
}

bool OAISiteEntity::isMotdUseForSftp() const {
    return m_motd_use_for_sftp;
}
void OAISiteEntity::setMotdUseForSftp(const bool &motd_use_for_sftp) {
    m_motd_use_for_sftp = motd_use_for_sftp;
    m_motd_use_for_sftp_isSet = true;
}

bool OAISiteEntity::is_motd_use_for_sftp_Set() const{
    return m_motd_use_for_sftp_isSet;
}

bool OAISiteEntity::is_motd_use_for_sftp_Valid() const{
    return m_motd_use_for_sftp_isValid;
}

QString OAISiteEntity::getName() const {
    return m_name;
}
void OAISiteEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISiteEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAISiteEntity::is_name_Valid() const{
    return m_name_isValid;
}

double OAISiteEntity::getNextBillingAmount() const {
    return m_next_billing_amount;
}
void OAISiteEntity::setNextBillingAmount(const double &next_billing_amount) {
    m_next_billing_amount = next_billing_amount;
    m_next_billing_amount_isSet = true;
}

bool OAISiteEntity::is_next_billing_amount_Set() const{
    return m_next_billing_amount_isSet;
}

bool OAISiteEntity::is_next_billing_amount_Valid() const{
    return m_next_billing_amount_isValid;
}

QString OAISiteEntity::getNextBillingDate() const {
    return m_next_billing_date;
}
void OAISiteEntity::setNextBillingDate(const QString &next_billing_date) {
    m_next_billing_date = next_billing_date;
    m_next_billing_date_isSet = true;
}

bool OAISiteEntity::is_next_billing_date_Set() const{
    return m_next_billing_date_isSet;
}

bool OAISiteEntity::is_next_billing_date_Valid() const{
    return m_next_billing_date_isValid;
}

bool OAISiteEntity::isNonSsoGroupsAllowed() const {
    return m_non_sso_groups_allowed;
}
void OAISiteEntity::setNonSsoGroupsAllowed(const bool &non_sso_groups_allowed) {
    m_non_sso_groups_allowed = non_sso_groups_allowed;
    m_non_sso_groups_allowed_isSet = true;
}

bool OAISiteEntity::is_non_sso_groups_allowed_Set() const{
    return m_non_sso_groups_allowed_isSet;
}

bool OAISiteEntity::is_non_sso_groups_allowed_Valid() const{
    return m_non_sso_groups_allowed_isValid;
}

bool OAISiteEntity::isNonSsoUsersAllowed() const {
    return m_non_sso_users_allowed;
}
void OAISiteEntity::setNonSsoUsersAllowed(const bool &non_sso_users_allowed) {
    m_non_sso_users_allowed = non_sso_users_allowed;
    m_non_sso_users_allowed_isSet = true;
}

bool OAISiteEntity::is_non_sso_users_allowed_Set() const{
    return m_non_sso_users_allowed_isSet;
}

bool OAISiteEntity::is_non_sso_users_allowed_Valid() const{
    return m_non_sso_users_allowed_isValid;
}

bool OAISiteEntity::isOfficeIntegrationAvailable() const {
    return m_office_integration_available;
}
void OAISiteEntity::setOfficeIntegrationAvailable(const bool &office_integration_available) {
    m_office_integration_available = office_integration_available;
    m_office_integration_available_isSet = true;
}

bool OAISiteEntity::is_office_integration_available_Set() const{
    return m_office_integration_available_isSet;
}

bool OAISiteEntity::is_office_integration_available_Valid() const{
    return m_office_integration_available_isValid;
}

QString OAISiteEntity::getOfficeIntegrationType() const {
    return m_office_integration_type;
}
void OAISiteEntity::setOfficeIntegrationType(const QString &office_integration_type) {
    m_office_integration_type = office_integration_type;
    m_office_integration_type_isSet = true;
}

bool OAISiteEntity::is_office_integration_type_Set() const{
    return m_office_integration_type_isSet;
}

bool OAISiteEntity::is_office_integration_type_Valid() const{
    return m_office_integration_type_isValid;
}

QString OAISiteEntity::getOncehubLink() const {
    return m_oncehub_link;
}
void OAISiteEntity::setOncehubLink(const QString &oncehub_link) {
    m_oncehub_link = oncehub_link;
    m_oncehub_link_isSet = true;
}

bool OAISiteEntity::is_oncehub_link_Set() const{
    return m_oncehub_link_isSet;
}

bool OAISiteEntity::is_oncehub_link_Valid() const{
    return m_oncehub_link_isValid;
}

bool OAISiteEntity::isOptOutGlobal() const {
    return m_opt_out_global;
}
void OAISiteEntity::setOptOutGlobal(const bool &opt_out_global) {
    m_opt_out_global = opt_out_global;
    m_opt_out_global_isSet = true;
}

bool OAISiteEntity::is_opt_out_global_Set() const{
    return m_opt_out_global_isSet;
}

bool OAISiteEntity::is_opt_out_global_Valid() const{
    return m_opt_out_global_isValid;
}

bool OAISiteEntity::isOverdue() const {
    return m_overdue;
}
void OAISiteEntity::setOverdue(const bool &overdue) {
    m_overdue = overdue;
    m_overdue_isSet = true;
}

bool OAISiteEntity::is_overdue_Set() const{
    return m_overdue_isSet;
}

bool OAISiteEntity::is_overdue_Valid() const{
    return m_overdue_isValid;
}

qint32 OAISiteEntity::getPasswordMinLength() const {
    return m_password_min_length;
}
void OAISiteEntity::setPasswordMinLength(const qint32 &password_min_length) {
    m_password_min_length = password_min_length;
    m_password_min_length_isSet = true;
}

bool OAISiteEntity::is_password_min_length_Set() const{
    return m_password_min_length_isSet;
}

bool OAISiteEntity::is_password_min_length_Valid() const{
    return m_password_min_length_isValid;
}

bool OAISiteEntity::isPasswordRequireLetter() const {
    return m_password_require_letter;
}
void OAISiteEntity::setPasswordRequireLetter(const bool &password_require_letter) {
    m_password_require_letter = password_require_letter;
    m_password_require_letter_isSet = true;
}

bool OAISiteEntity::is_password_require_letter_Set() const{
    return m_password_require_letter_isSet;
}

bool OAISiteEntity::is_password_require_letter_Valid() const{
    return m_password_require_letter_isValid;
}

bool OAISiteEntity::isPasswordRequireMixed() const {
    return m_password_require_mixed;
}
void OAISiteEntity::setPasswordRequireMixed(const bool &password_require_mixed) {
    m_password_require_mixed = password_require_mixed;
    m_password_require_mixed_isSet = true;
}

bool OAISiteEntity::is_password_require_mixed_Set() const{
    return m_password_require_mixed_isSet;
}

bool OAISiteEntity::is_password_require_mixed_Valid() const{
    return m_password_require_mixed_isValid;
}

bool OAISiteEntity::isPasswordRequireNumber() const {
    return m_password_require_number;
}
void OAISiteEntity::setPasswordRequireNumber(const bool &password_require_number) {
    m_password_require_number = password_require_number;
    m_password_require_number_isSet = true;
}

bool OAISiteEntity::is_password_require_number_Set() const{
    return m_password_require_number_isSet;
}

bool OAISiteEntity::is_password_require_number_Valid() const{
    return m_password_require_number_isValid;
}

bool OAISiteEntity::isPasswordRequireSpecial() const {
    return m_password_require_special;
}
void OAISiteEntity::setPasswordRequireSpecial(const bool &password_require_special) {
    m_password_require_special = password_require_special;
    m_password_require_special_isSet = true;
}

bool OAISiteEntity::is_password_require_special_Set() const{
    return m_password_require_special_isSet;
}

bool OAISiteEntity::is_password_require_special_Valid() const{
    return m_password_require_special_isValid;
}

bool OAISiteEntity::isPasswordRequireUnbreached() const {
    return m_password_require_unbreached;
}
void OAISiteEntity::setPasswordRequireUnbreached(const bool &password_require_unbreached) {
    m_password_require_unbreached = password_require_unbreached;
    m_password_require_unbreached_isSet = true;
}

bool OAISiteEntity::is_password_require_unbreached_Set() const{
    return m_password_require_unbreached_isSet;
}

bool OAISiteEntity::is_password_require_unbreached_Valid() const{
    return m_password_require_unbreached_isValid;
}

bool OAISiteEntity::isPasswordRequirementsApplyToBundles() const {
    return m_password_requirements_apply_to_bundles;
}
void OAISiteEntity::setPasswordRequirementsApplyToBundles(const bool &password_requirements_apply_to_bundles) {
    m_password_requirements_apply_to_bundles = password_requirements_apply_to_bundles;
    m_password_requirements_apply_to_bundles_isSet = true;
}

bool OAISiteEntity::is_password_requirements_apply_to_bundles_Set() const{
    return m_password_requirements_apply_to_bundles_isSet;
}

bool OAISiteEntity::is_password_requirements_apply_to_bundles_Valid() const{
    return m_password_requirements_apply_to_bundles_isValid;
}

qint32 OAISiteEntity::getPasswordValidityDays() const {
    return m_password_validity_days;
}
void OAISiteEntity::setPasswordValidityDays(const qint32 &password_validity_days) {
    m_password_validity_days = password_validity_days;
    m_password_validity_days_isSet = true;
}

bool OAISiteEntity::is_password_validity_days_Set() const{
    return m_password_validity_days_isSet;
}

bool OAISiteEntity::is_password_validity_days_Valid() const{
    return m_password_validity_days_isValid;
}

QString OAISiteEntity::getPhone() const {
    return m_phone;
}
void OAISiteEntity::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAISiteEntity::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAISiteEntity::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAISiteEntity::isPinAllRemoteServersToSiteRegion() const {
    return m_pin_all_remote_servers_to_site_region;
}
void OAISiteEntity::setPinAllRemoteServersToSiteRegion(const bool &pin_all_remote_servers_to_site_region) {
    m_pin_all_remote_servers_to_site_region = pin_all_remote_servers_to_site_region;
    m_pin_all_remote_servers_to_site_region_isSet = true;
}

bool OAISiteEntity::is_pin_all_remote_servers_to_site_region_Set() const{
    return m_pin_all_remote_servers_to_site_region_isSet;
}

bool OAISiteEntity::is_pin_all_remote_servers_to_site_region_Valid() const{
    return m_pin_all_remote_servers_to_site_region_isValid;
}

QString OAISiteEntity::getReplyToEmail() const {
    return m_reply_to_email;
}
void OAISiteEntity::setReplyToEmail(const QString &reply_to_email) {
    m_reply_to_email = reply_to_email;
    m_reply_to_email_isSet = true;
}

bool OAISiteEntity::is_reply_to_email_Set() const{
    return m_reply_to_email_isSet;
}

bool OAISiteEntity::is_reply_to_email_Valid() const{
    return m_reply_to_email_isValid;
}

bool OAISiteEntity::isRequire2fa() const {
    return m_require_2fa;
}
void OAISiteEntity::setRequire2fa(const bool &require_2fa) {
    m_require_2fa = require_2fa;
    m_require_2fa_isSet = true;
}

bool OAISiteEntity::is_require_2fa_Set() const{
    return m_require_2fa_isSet;
}

bool OAISiteEntity::is_require_2fa_Valid() const{
    return m_require_2fa_isValid;
}

QDateTime OAISiteEntity::getRequire2faStopTime() const {
    return m_require_2fa_stop_time;
}
void OAISiteEntity::setRequire2faStopTime(const QDateTime &require_2fa_stop_time) {
    m_require_2fa_stop_time = require_2fa_stop_time;
    m_require_2fa_stop_time_isSet = true;
}

bool OAISiteEntity::is_require_2fa_stop_time_Set() const{
    return m_require_2fa_stop_time_isSet;
}

bool OAISiteEntity::is_require_2fa_stop_time_Valid() const{
    return m_require_2fa_stop_time_isValid;
}

QString OAISiteEntity::getRequire2faUserType() const {
    return m_require_2fa_user_type;
}
void OAISiteEntity::setRequire2faUserType(const QString &require_2fa_user_type) {
    m_require_2fa_user_type = require_2fa_user_type;
    m_require_2fa_user_type_isSet = true;
}

bool OAISiteEntity::is_require_2fa_user_type_Set() const{
    return m_require_2fa_user_type_isSet;
}

bool OAISiteEntity::is_require_2fa_user_type_Valid() const{
    return m_require_2fa_user_type_isValid;
}

OAISessionEntity OAISiteEntity::getSession() const {
    return m_session;
}
void OAISiteEntity::setSession(const OAISessionEntity &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAISiteEntity::is_session_Set() const{
    return m_session_isSet;
}

bool OAISiteEntity::is_session_Valid() const{
    return m_session_isValid;
}

double OAISiteEntity::getSessionExpiry() const {
    return m_session_expiry;
}
void OAISiteEntity::setSessionExpiry(const double &session_expiry) {
    m_session_expiry = session_expiry;
    m_session_expiry_isSet = true;
}

bool OAISiteEntity::is_session_expiry_Set() const{
    return m_session_expiry_isSet;
}

bool OAISiteEntity::is_session_expiry_Valid() const{
    return m_session_expiry_isValid;
}

qint32 OAISiteEntity::getSessionExpiryMinutes() const {
    return m_session_expiry_minutes;
}
void OAISiteEntity::setSessionExpiryMinutes(const qint32 &session_expiry_minutes) {
    m_session_expiry_minutes = session_expiry_minutes;
    m_session_expiry_minutes_isSet = true;
}

bool OAISiteEntity::is_session_expiry_minutes_Set() const{
    return m_session_expiry_minutes_isSet;
}

bool OAISiteEntity::is_session_expiry_minutes_Valid() const{
    return m_session_expiry_minutes_isValid;
}

bool OAISiteEntity::isSessionPinnedByIp() const {
    return m_session_pinned_by_ip;
}
void OAISiteEntity::setSessionPinnedByIp(const bool &session_pinned_by_ip) {
    m_session_pinned_by_ip = session_pinned_by_ip;
    m_session_pinned_by_ip_isSet = true;
}

bool OAISiteEntity::is_session_pinned_by_ip_Set() const{
    return m_session_pinned_by_ip_isSet;
}

bool OAISiteEntity::is_session_pinned_by_ip_Valid() const{
    return m_session_pinned_by_ip_isValid;
}

bool OAISiteEntity::isSftpEnabled() const {
    return m_sftp_enabled;
}
void OAISiteEntity::setSftpEnabled(const bool &sftp_enabled) {
    m_sftp_enabled = sftp_enabled;
    m_sftp_enabled_isSet = true;
}

bool OAISiteEntity::is_sftp_enabled_Set() const{
    return m_sftp_enabled_isSet;
}

bool OAISiteEntity::is_sftp_enabled_Valid() const{
    return m_sftp_enabled_isValid;
}

QString OAISiteEntity::getSftpHostKeyType() const {
    return m_sftp_host_key_type;
}
void OAISiteEntity::setSftpHostKeyType(const QString &sftp_host_key_type) {
    m_sftp_host_key_type = sftp_host_key_type;
    m_sftp_host_key_type_isSet = true;
}

bool OAISiteEntity::is_sftp_host_key_type_Set() const{
    return m_sftp_host_key_type_isSet;
}

bool OAISiteEntity::is_sftp_host_key_type_Valid() const{
    return m_sftp_host_key_type_isValid;
}

bool OAISiteEntity::isSftpInsecureCiphers() const {
    return m_sftp_insecure_ciphers;
}
void OAISiteEntity::setSftpInsecureCiphers(const bool &sftp_insecure_ciphers) {
    m_sftp_insecure_ciphers = sftp_insecure_ciphers;
    m_sftp_insecure_ciphers_isSet = true;
}

bool OAISiteEntity::is_sftp_insecure_ciphers_Set() const{
    return m_sftp_insecure_ciphers_isSet;
}

bool OAISiteEntity::is_sftp_insecure_ciphers_Valid() const{
    return m_sftp_insecure_ciphers_isValid;
}

bool OAISiteEntity::isSftpUserRootEnabled() const {
    return m_sftp_user_root_enabled;
}
void OAISiteEntity::setSftpUserRootEnabled(const bool &sftp_user_root_enabled) {
    m_sftp_user_root_enabled = sftp_user_root_enabled;
    m_sftp_user_root_enabled_isSet = true;
}

bool OAISiteEntity::is_sftp_user_root_enabled_Set() const{
    return m_sftp_user_root_enabled_isSet;
}

bool OAISiteEntity::is_sftp_user_root_enabled_Valid() const{
    return m_sftp_user_root_enabled_isValid;
}

bool OAISiteEntity::isSharingEnabled() const {
    return m_sharing_enabled;
}
void OAISiteEntity::setSharingEnabled(const bool &sharing_enabled) {
    m_sharing_enabled = sharing_enabled;
    m_sharing_enabled_isSet = true;
}

bool OAISiteEntity::is_sharing_enabled_Set() const{
    return m_sharing_enabled_isSet;
}

bool OAISiteEntity::is_sharing_enabled_Valid() const{
    return m_sharing_enabled_isValid;
}

bool OAISiteEntity::isShowRequestAccessLink() const {
    return m_show_request_access_link;
}
void OAISiteEntity::setShowRequestAccessLink(const bool &show_request_access_link) {
    m_show_request_access_link = show_request_access_link;
    m_show_request_access_link_isSet = true;
}

bool OAISiteEntity::is_show_request_access_link_Set() const{
    return m_show_request_access_link_isSet;
}

bool OAISiteEntity::is_show_request_access_link_Valid() const{
    return m_show_request_access_link_isValid;
}

QString OAISiteEntity::getSiteFooter() const {
    return m_site_footer;
}
void OAISiteEntity::setSiteFooter(const QString &site_footer) {
    m_site_footer = site_footer;
    m_site_footer_isSet = true;
}

bool OAISiteEntity::is_site_footer_Set() const{
    return m_site_footer_isSet;
}

bool OAISiteEntity::is_site_footer_Valid() const{
    return m_site_footer_isValid;
}

QString OAISiteEntity::getSiteHeader() const {
    return m_site_header;
}
void OAISiteEntity::setSiteHeader(const QString &site_header) {
    m_site_header = site_header;
    m_site_header_isSet = true;
}

bool OAISiteEntity::is_site_header_Set() const{
    return m_site_header_isSet;
}

bool OAISiteEntity::is_site_header_Valid() const{
    return m_site_header_isValid;
}

QString OAISiteEntity::getSmtpAddress() const {
    return m_smtp_address;
}
void OAISiteEntity::setSmtpAddress(const QString &smtp_address) {
    m_smtp_address = smtp_address;
    m_smtp_address_isSet = true;
}

bool OAISiteEntity::is_smtp_address_Set() const{
    return m_smtp_address_isSet;
}

bool OAISiteEntity::is_smtp_address_Valid() const{
    return m_smtp_address_isValid;
}

QString OAISiteEntity::getSmtpAuthentication() const {
    return m_smtp_authentication;
}
void OAISiteEntity::setSmtpAuthentication(const QString &smtp_authentication) {
    m_smtp_authentication = smtp_authentication;
    m_smtp_authentication_isSet = true;
}

bool OAISiteEntity::is_smtp_authentication_Set() const{
    return m_smtp_authentication_isSet;
}

bool OAISiteEntity::is_smtp_authentication_Valid() const{
    return m_smtp_authentication_isValid;
}

QString OAISiteEntity::getSmtpFrom() const {
    return m_smtp_from;
}
void OAISiteEntity::setSmtpFrom(const QString &smtp_from) {
    m_smtp_from = smtp_from;
    m_smtp_from_isSet = true;
}

bool OAISiteEntity::is_smtp_from_Set() const{
    return m_smtp_from_isSet;
}

bool OAISiteEntity::is_smtp_from_Valid() const{
    return m_smtp_from_isValid;
}

qint32 OAISiteEntity::getSmtpPort() const {
    return m_smtp_port;
}
void OAISiteEntity::setSmtpPort(const qint32 &smtp_port) {
    m_smtp_port = smtp_port;
    m_smtp_port_isSet = true;
}

bool OAISiteEntity::is_smtp_port_Set() const{
    return m_smtp_port_isSet;
}

bool OAISiteEntity::is_smtp_port_Valid() const{
    return m_smtp_port_isValid;
}

QString OAISiteEntity::getSmtpUsername() const {
    return m_smtp_username;
}
void OAISiteEntity::setSmtpUsername(const QString &smtp_username) {
    m_smtp_username = smtp_username;
    m_smtp_username_isSet = true;
}

bool OAISiteEntity::is_smtp_username_Set() const{
    return m_smtp_username_isSet;
}

bool OAISiteEntity::is_smtp_username_Valid() const{
    return m_smtp_username_isValid;
}

bool OAISiteEntity::isSslRequired() const {
    return m_ssl_required;
}
void OAISiteEntity::setSslRequired(const bool &ssl_required) {
    m_ssl_required = ssl_required;
    m_ssl_required_isSet = true;
}

bool OAISiteEntity::is_ssl_required_Set() const{
    return m_ssl_required_isSet;
}

bool OAISiteEntity::is_ssl_required_Valid() const{
    return m_ssl_required_isValid;
}

QString OAISiteEntity::getSubdomain() const {
    return m_subdomain;
}
void OAISiteEntity::setSubdomain(const QString &subdomain) {
    m_subdomain = subdomain;
    m_subdomain_isSet = true;
}

bool OAISiteEntity::is_subdomain_Set() const{
    return m_subdomain_isSet;
}

bool OAISiteEntity::is_subdomain_Valid() const{
    return m_subdomain_isValid;
}

QDateTime OAISiteEntity::getSwitchToPlanDate() const {
    return m_switch_to_plan_date;
}
void OAISiteEntity::setSwitchToPlanDate(const QDateTime &switch_to_plan_date) {
    m_switch_to_plan_date = switch_to_plan_date;
    m_switch_to_plan_date_isSet = true;
}

bool OAISiteEntity::is_switch_to_plan_date_Set() const{
    return m_switch_to_plan_date_isSet;
}

bool OAISiteEntity::is_switch_to_plan_date_Valid() const{
    return m_switch_to_plan_date_isValid;
}

bool OAISiteEntity::isTlsDisabled() const {
    return m_tls_disabled;
}
void OAISiteEntity::setTlsDisabled(const bool &tls_disabled) {
    m_tls_disabled = tls_disabled;
    m_tls_disabled_isSet = true;
}

bool OAISiteEntity::is_tls_disabled_Set() const{
    return m_tls_disabled_isSet;
}

bool OAISiteEntity::is_tls_disabled_Valid() const{
    return m_tls_disabled_isValid;
}

qint32 OAISiteEntity::getTrialDaysLeft() const {
    return m_trial_days_left;
}
void OAISiteEntity::setTrialDaysLeft(const qint32 &trial_days_left) {
    m_trial_days_left = trial_days_left;
    m_trial_days_left_isSet = true;
}

bool OAISiteEntity::is_trial_days_left_Set() const{
    return m_trial_days_left_isSet;
}

bool OAISiteEntity::is_trial_days_left_Valid() const{
    return m_trial_days_left_isValid;
}

QDateTime OAISiteEntity::getTrialUntil() const {
    return m_trial_until;
}
void OAISiteEntity::setTrialUntil(const QDateTime &trial_until) {
    m_trial_until = trial_until;
    m_trial_until_isSet = true;
}

bool OAISiteEntity::is_trial_until_Set() const{
    return m_trial_until_isSet;
}

bool OAISiteEntity::is_trial_until_Valid() const{
    return m_trial_until_isValid;
}

QDateTime OAISiteEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAISiteEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISiteEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISiteEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISiteEntity::isUploadsViaEmailAuthentication() const {
    return m_uploads_via_email_authentication;
}
void OAISiteEntity::setUploadsViaEmailAuthentication(const bool &uploads_via_email_authentication) {
    m_uploads_via_email_authentication = uploads_via_email_authentication;
    m_uploads_via_email_authentication_isSet = true;
}

bool OAISiteEntity::is_uploads_via_email_authentication_Set() const{
    return m_uploads_via_email_authentication_isSet;
}

bool OAISiteEntity::is_uploads_via_email_authentication_Valid() const{
    return m_uploads_via_email_authentication_isValid;
}

bool OAISiteEntity::isUseProvidedModifiedAt() const {
    return m_use_provided_modified_at;
}
void OAISiteEntity::setUseProvidedModifiedAt(const bool &use_provided_modified_at) {
    m_use_provided_modified_at = use_provided_modified_at;
    m_use_provided_modified_at_isSet = true;
}

bool OAISiteEntity::is_use_provided_modified_at_Set() const{
    return m_use_provided_modified_at_isSet;
}

bool OAISiteEntity::is_use_provided_modified_at_Valid() const{
    return m_use_provided_modified_at_isValid;
}

OAIUserEntity OAISiteEntity::getUser() const {
    return m_user;
}
void OAISiteEntity::setUser(const OAIUserEntity &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISiteEntity::is_user_Set() const{
    return m_user_isSet;
}

bool OAISiteEntity::is_user_Valid() const{
    return m_user_isValid;
}

bool OAISiteEntity::isUserLockout() const {
    return m_user_lockout;
}
void OAISiteEntity::setUserLockout(const bool &user_lockout) {
    m_user_lockout = user_lockout;
    m_user_lockout_isSet = true;
}

bool OAISiteEntity::is_user_lockout_Set() const{
    return m_user_lockout_isSet;
}

bool OAISiteEntity::is_user_lockout_Valid() const{
    return m_user_lockout_isValid;
}

qint32 OAISiteEntity::getUserLockoutLockPeriod() const {
    return m_user_lockout_lock_period;
}
void OAISiteEntity::setUserLockoutLockPeriod(const qint32 &user_lockout_lock_period) {
    m_user_lockout_lock_period = user_lockout_lock_period;
    m_user_lockout_lock_period_isSet = true;
}

bool OAISiteEntity::is_user_lockout_lock_period_Set() const{
    return m_user_lockout_lock_period_isSet;
}

bool OAISiteEntity::is_user_lockout_lock_period_Valid() const{
    return m_user_lockout_lock_period_isValid;
}

qint32 OAISiteEntity::getUserLockoutTries() const {
    return m_user_lockout_tries;
}
void OAISiteEntity::setUserLockoutTries(const qint32 &user_lockout_tries) {
    m_user_lockout_tries = user_lockout_tries;
    m_user_lockout_tries_isSet = true;
}

bool OAISiteEntity::is_user_lockout_tries_Set() const{
    return m_user_lockout_tries_isSet;
}

bool OAISiteEntity::is_user_lockout_tries_Valid() const{
    return m_user_lockout_tries_isValid;
}

qint32 OAISiteEntity::getUserLockoutWithin() const {
    return m_user_lockout_within;
}
void OAISiteEntity::setUserLockoutWithin(const qint32 &user_lockout_within) {
    m_user_lockout_within = user_lockout_within;
    m_user_lockout_within_isSet = true;
}

bool OAISiteEntity::is_user_lockout_within_Set() const{
    return m_user_lockout_within_isSet;
}

bool OAISiteEntity::is_user_lockout_within_Valid() const{
    return m_user_lockout_within_isValid;
}

bool OAISiteEntity::isUserRequestsEnabled() const {
    return m_user_requests_enabled;
}
void OAISiteEntity::setUserRequestsEnabled(const bool &user_requests_enabled) {
    m_user_requests_enabled = user_requests_enabled;
    m_user_requests_enabled_isSet = true;
}

bool OAISiteEntity::is_user_requests_enabled_Set() const{
    return m_user_requests_enabled_isSet;
}

bool OAISiteEntity::is_user_requests_enabled_Valid() const{
    return m_user_requests_enabled_isValid;
}

bool OAISiteEntity::isUserRequestsNotifyAdmins() const {
    return m_user_requests_notify_admins;
}
void OAISiteEntity::setUserRequestsNotifyAdmins(const bool &user_requests_notify_admins) {
    m_user_requests_notify_admins = user_requests_notify_admins;
    m_user_requests_notify_admins_isSet = true;
}

bool OAISiteEntity::is_user_requests_notify_admins_Set() const{
    return m_user_requests_notify_admins_isSet;
}

bool OAISiteEntity::is_user_requests_notify_admins_Valid() const{
    return m_user_requests_notify_admins_isValid;
}

QString OAISiteEntity::getWelcomeCustomText() const {
    return m_welcome_custom_text;
}
void OAISiteEntity::setWelcomeCustomText(const QString &welcome_custom_text) {
    m_welcome_custom_text = welcome_custom_text;
    m_welcome_custom_text_isSet = true;
}

bool OAISiteEntity::is_welcome_custom_text_Set() const{
    return m_welcome_custom_text_isSet;
}

bool OAISiteEntity::is_welcome_custom_text_Valid() const{
    return m_welcome_custom_text_isValid;
}

QString OAISiteEntity::getWelcomeEmailCc() const {
    return m_welcome_email_cc;
}
void OAISiteEntity::setWelcomeEmailCc(const QString &welcome_email_cc) {
    m_welcome_email_cc = welcome_email_cc;
    m_welcome_email_cc_isSet = true;
}

bool OAISiteEntity::is_welcome_email_cc_Set() const{
    return m_welcome_email_cc_isSet;
}

bool OAISiteEntity::is_welcome_email_cc_Valid() const{
    return m_welcome_email_cc_isValid;
}

bool OAISiteEntity::isWelcomeEmailEnabled() const {
    return m_welcome_email_enabled;
}
void OAISiteEntity::setWelcomeEmailEnabled(const bool &welcome_email_enabled) {
    m_welcome_email_enabled = welcome_email_enabled;
    m_welcome_email_enabled_isSet = true;
}

bool OAISiteEntity::is_welcome_email_enabled_Set() const{
    return m_welcome_email_enabled_isSet;
}

bool OAISiteEntity::is_welcome_email_enabled_Valid() const{
    return m_welcome_email_enabled_isValid;
}

QString OAISiteEntity::getWelcomeEmailSubject() const {
    return m_welcome_email_subject;
}
void OAISiteEntity::setWelcomeEmailSubject(const QString &welcome_email_subject) {
    m_welcome_email_subject = welcome_email_subject;
    m_welcome_email_subject_isSet = true;
}

bool OAISiteEntity::is_welcome_email_subject_Set() const{
    return m_welcome_email_subject_isSet;
}

bool OAISiteEntity::is_welcome_email_subject_Valid() const{
    return m_welcome_email_subject_isValid;
}

QString OAISiteEntity::getWelcomeScreen() const {
    return m_welcome_screen;
}
void OAISiteEntity::setWelcomeScreen(const QString &welcome_screen) {
    m_welcome_screen = welcome_screen;
    m_welcome_screen_isSet = true;
}

bool OAISiteEntity::is_welcome_screen_Set() const{
    return m_welcome_screen_isSet;
}

bool OAISiteEntity::is_welcome_screen_Valid() const{
    return m_welcome_screen_isValid;
}

bool OAISiteEntity::isWindowsModeFtp() const {
    return m_windows_mode_ftp;
}
void OAISiteEntity::setWindowsModeFtp(const bool &windows_mode_ftp) {
    m_windows_mode_ftp = windows_mode_ftp;
    m_windows_mode_ftp_isSet = true;
}

bool OAISiteEntity::is_windows_mode_ftp_Set() const{
    return m_windows_mode_ftp_isSet;
}

bool OAISiteEntity::is_windows_mode_ftp_Valid() const{
    return m_windows_mode_ftp_isValid;
}

bool OAISiteEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_sftp_host_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_bundle_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_2fa_method_bypass_for_ftp_sftp_dav_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_2fa_method_sms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_2fa_method_totp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_2fa_method_u2f_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_2fa_method_webauthn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_2fa_method_yubi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_countries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ask_about_overwrites_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_activity_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_password_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_registration_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_require_share_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_upload_receipt_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_watermark_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_watermark_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color2_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color2_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color2_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color2_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color2_top_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_to_retain_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desktop_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desktop_app_session_ip_pinning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desktop_app_session_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_files_certificate_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_password_reset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_users_from_inactivity_period_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disallowed_countries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_hsts_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_letsencrypt_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_permissions_groups_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ftp_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hipaa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon128.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon16.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon32.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon48.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_immutable_files_set_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_password_in_welcome_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_base_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_group_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_group_exclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_group_inclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_host_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_host_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_secure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_user_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_user_include_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_username_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_help_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_prior_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_app_session_ip_pinning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_app_session_lifetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motd_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motd_use_for_ftp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_motd_use_for_sftp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_billing_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_billing_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_sso_groups_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_sso_users_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_integration_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_office_integration_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oncehub_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_global_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overdue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_require_letter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_require_mixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_require_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_require_special_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_require_unbreached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_requirements_apply_to_bundles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_validity_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_all_remote_servers_to_site_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_2fa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_2fa_stop_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_2fa_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_expiry_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_pinned_by_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_host_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_insecure_ciphers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_user_root_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_request_access_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_switch_to_plan_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_days_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploads_via_email_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_provided_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_lockout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_lockout_lock_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_lockout_tries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_lockout_within_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_requests_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_requests_notify_admins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_custom_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_email_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_email_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_email_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_screen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_mode_ftp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
