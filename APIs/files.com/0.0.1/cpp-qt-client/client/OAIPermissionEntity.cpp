/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionEntity::OAIPermissionEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionEntity::OAIPermissionEntity() {
    this->initializeModel();
}

OAIPermissionEntity::~OAIPermissionEntity() {}

void OAIPermissionEntity::initializeModel() {

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_recursive_isSet = false;
    m_recursive_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIPermissionEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermissionEntity::fromJsonObject(QJsonObject json) {

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("group_name")]);
    m_group_name_isSet = !json[QString("group_name")].isNull() && m_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_recursive_isValid = ::OpenAPI::fromJsonValue(m_recursive, json[QString("recursive")]);
    m_recursive_isSet = !json[QString("recursive")].isNull() && m_recursive_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIPermissionEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermissionEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("group_name"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_recursive_isSet) {
        obj.insert(QString("recursive"), ::OpenAPI::toJsonValue(m_recursive));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

qint32 OAIPermissionEntity::getGroupId() const {
    return m_group_id;
}
void OAIPermissionEntity::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIPermissionEntity::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIPermissionEntity::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIPermissionEntity::getGroupName() const {
    return m_group_name;
}
void OAIPermissionEntity::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIPermissionEntity::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIPermissionEntity::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint32 OAIPermissionEntity::getId() const {
    return m_id;
}
void OAIPermissionEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPermissionEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPermissionEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPermissionEntity::getPath() const {
    return m_path;
}
void OAIPermissionEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPermissionEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPermissionEntity::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPermissionEntity::getPermission() const {
    return m_permission;
}
void OAIPermissionEntity::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIPermissionEntity::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIPermissionEntity::is_permission_Valid() const{
    return m_permission_isValid;
}

bool OAIPermissionEntity::isRecursive() const {
    return m_recursive;
}
void OAIPermissionEntity::setRecursive(const bool &recursive) {
    m_recursive = recursive;
    m_recursive_isSet = true;
}

bool OAIPermissionEntity::is_recursive_Set() const{
    return m_recursive_isSet;
}

bool OAIPermissionEntity::is_recursive_Valid() const{
    return m_recursive_isValid;
}

qint32 OAIPermissionEntity::getUserId() const {
    return m_user_id;
}
void OAIPermissionEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPermissionEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPermissionEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIPermissionEntity::getUsername() const {
    return m_username;
}
void OAIPermissionEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPermissionEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPermissionEntity::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIPermissionEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermissionEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
