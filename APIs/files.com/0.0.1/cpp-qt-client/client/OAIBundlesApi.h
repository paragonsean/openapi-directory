/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBundlesApi_H
#define OAI_OAIBundlesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBundleEntity.h"
#include "OAIHttpFileElement.h"
#include "OAIObject.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBundlesApi : public QObject {
    Q_OBJECT

public:
    OAIBundlesApi(const int timeOut = 0);
    ~OAIBundlesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteBundlesId(const qint32 &id);

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_gt OAIObject [optional]
    * @param[in]  filter_gteq OAIObject [optional]
    * @param[in]  filter_lt OAIObject [optional]
    * @param[in]  filter_lteq OAIObject [optional]
    */
    virtual void getBundles(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lteq = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getBundlesId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  clickwrap_id qint32 [optional]
    * @param[in]  code QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  dont_separate_submissions_by_folder bool [optional]
    * @param[in]  expires_at QDateTime [optional]
    * @param[in]  form_field_set_id qint32 [optional]
    * @param[in]  inbox_id qint32 [optional]
    * @param[in]  max_uses qint32 [optional]
    * @param[in]  note QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  path_template QString [optional]
    * @param[in]  paths QList<QString> [optional]
    * @param[in]  permissions QString [optional]
    * @param[in]  preview_only bool [optional]
    * @param[in]  require_registration bool [optional]
    * @param[in]  require_share_recipient bool [optional]
    * @param[in]  send_email_receipt_to_uploader bool [optional]
    * @param[in]  skip_company bool [optional]
    * @param[in]  skip_email bool [optional]
    * @param[in]  skip_name bool [optional]
    * @param[in]  watermark_attachment_delete bool [optional]
    * @param[in]  watermark_attachment_file OAIHttpFileElement [optional]
    */
    virtual void patchBundlesId(const qint32 &id, const ::OpenAPI::OptionalParam<qint32> &clickwrap_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dont_separate_submissions_by_folder = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &expires_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &form_field_set_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &inbox_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_uses = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &note = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &paths = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &permissions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &preview_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_registration = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_share_recipient = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &send_email_receipt_to_uploader = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_company = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_name = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &watermark_attachment_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &watermark_attachment_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  paths QList<QString> [required]
    * @param[in]  clickwrap_id qint32 [optional]
    * @param[in]  code QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  dont_separate_submissions_by_folder bool [optional]
    * @param[in]  expires_at QDateTime [optional]
    * @param[in]  form_field_set_id qint32 [optional]
    * @param[in]  inbox_id qint32 [optional]
    * @param[in]  max_uses qint32 [optional]
    * @param[in]  note QString [optional]
    * @param[in]  password QString [optional]
    * @param[in]  path_template QString [optional]
    * @param[in]  permissions QString [optional]
    * @param[in]  preview_only bool [optional]
    * @param[in]  require_registration bool [optional]
    * @param[in]  require_share_recipient bool [optional]
    * @param[in]  send_email_receipt_to_uploader bool [optional]
    * @param[in]  skip_company bool [optional]
    * @param[in]  skip_email bool [optional]
    * @param[in]  skip_name bool [optional]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  watermark_attachment_file OAIHttpFileElement [optional]
    */
    virtual void postBundles(const QList<QString> &paths, const ::OpenAPI::OptionalParam<qint32> &clickwrap_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dont_separate_submissions_by_folder = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &expires_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &form_field_set_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &inbox_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_uses = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &note = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path_template = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permissions = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &preview_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_registration = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &require_share_recipient = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &send_email_receipt_to_uploader = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_company = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_name = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &watermark_attachment_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  note QString [optional]
    * @param[in]  recipients QList<OAIObject> [optional]
    * @param[in]  to QList<QString> [optional]
    */
    virtual void postBundlesIdShare(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &note = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &recipients = ::OpenAPI::OptionalParam<QList<OAIObject>>(), const ::OpenAPI::OptionalParam<QList<QString>> &to = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteBundlesIdCallback(OAIHttpRequestWorker *worker);
    void getBundlesCallback(OAIHttpRequestWorker *worker);
    void getBundlesIdCallback(OAIHttpRequestWorker *worker);
    void patchBundlesIdCallback(OAIHttpRequestWorker *worker);
    void postBundlesCallback(OAIHttpRequestWorker *worker);
    void postBundlesIdShareCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteBundlesIdSignal();
    void getBundlesSignal(QList<OAIBundleEntity> summary);
    void getBundlesIdSignal(OAIBundleEntity summary);
    void patchBundlesIdSignal(OAIBundleEntity summary);
    void postBundlesSignal(OAIBundleEntity summary);
    void postBundlesIdShareSignal();


    void deleteBundlesIdSignalFull(OAIHttpRequestWorker *worker);
    void getBundlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBundleEntity> summary);
    void getBundlesIdSignalFull(OAIHttpRequestWorker *worker, OAIBundleEntity summary);
    void patchBundlesIdSignalFull(OAIHttpRequestWorker *worker, OAIBundleEntity summary);
    void postBundlesSignalFull(OAIHttpRequestWorker *worker, OAIBundleEntity summary);
    void postBundlesIdShareSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteBundlesIdSignalError() instead")
    void deleteBundlesIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBundlesIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBundlesSignalError() instead")
    void getBundlesSignalE(QList<OAIBundleEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBundlesSignalError(QList<OAIBundleEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBundlesIdSignalError() instead")
    void getBundlesIdSignalE(OAIBundleEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBundlesIdSignalError(OAIBundleEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBundlesIdSignalError() instead")
    void patchBundlesIdSignalE(OAIBundleEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBundlesIdSignalError(OAIBundleEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBundlesSignalError() instead")
    void postBundlesSignalE(OAIBundleEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBundlesSignalError(OAIBundleEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBundlesIdShareSignalError() instead")
    void postBundlesIdShareSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postBundlesIdShareSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteBundlesIdSignalErrorFull() instead")
    void deleteBundlesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBundlesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBundlesSignalErrorFull() instead")
    void getBundlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBundlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBundlesIdSignalErrorFull() instead")
    void getBundlesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBundlesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchBundlesIdSignalErrorFull() instead")
    void patchBundlesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchBundlesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBundlesSignalErrorFull() instead")
    void postBundlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBundlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBundlesIdShareSignalErrorFull() instead")
    void postBundlesIdShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBundlesIdShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
