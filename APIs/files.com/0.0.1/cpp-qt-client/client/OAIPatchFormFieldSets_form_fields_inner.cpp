/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchFormFieldSets_form_fields_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchFormFieldSets_form_fields_inner::OAIPatchFormFieldSets_form_fields_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchFormFieldSets_form_fields_inner::OAIPatchFormFieldSets_form_fields_inner() {
    this->initializeModel();
}

OAIPatchFormFieldSets_form_fields_inner::~OAIPatchFormFieldSets_form_fields_inner() {}

void OAIPatchFormFieldSets_form_fields_inner::initializeModel() {

    m_default_option_isSet = false;
    m_default_option_isValid = false;

    m_field_type_isSet = false;
    m_field_type_isValid = false;

    m_help_text_isSet = false;
    m_help_text_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_options_for_select_isSet = false;
    m_options_for_select_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;
}

void OAIPatchFormFieldSets_form_fields_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchFormFieldSets_form_fields_inner::fromJsonObject(QJsonObject json) {

    m_default_option_isValid = ::OpenAPI::fromJsonValue(m_default_option, json[QString("default_option")]);
    m_default_option_isSet = !json[QString("default_option")].isNull() && m_default_option_isValid;

    m_field_type_isValid = ::OpenAPI::fromJsonValue(m_field_type, json[QString("field_type")]);
    m_field_type_isSet = !json[QString("field_type")].isNull() && m_field_type_isValid;

    m_help_text_isValid = ::OpenAPI::fromJsonValue(m_help_text, json[QString("help_text")]);
    m_help_text_isSet = !json[QString("help_text")].isNull() && m_help_text_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_options_for_select_isValid = ::OpenAPI::fromJsonValue(m_options_for_select, json[QString("options_for_select")]);
    m_options_for_select_isSet = !json[QString("options_for_select")].isNull() && m_options_for_select_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;
}

QString OAIPatchFormFieldSets_form_fields_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchFormFieldSets_form_fields_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_default_option_isSet) {
        obj.insert(QString("default_option"), ::OpenAPI::toJsonValue(m_default_option));
    }
    if (m_field_type_isSet) {
        obj.insert(QString("field_type"), ::OpenAPI::toJsonValue(m_field_type));
    }
    if (m_help_text_isSet) {
        obj.insert(QString("help_text"), ::OpenAPI::toJsonValue(m_help_text));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_options_for_select_isSet) {
        obj.insert(QString("options_for_select"), ::OpenAPI::toJsonValue(m_options_for_select));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    return obj;
}

QString OAIPatchFormFieldSets_form_fields_inner::getDefaultOption() const {
    return m_default_option;
}
void OAIPatchFormFieldSets_form_fields_inner::setDefaultOption(const QString &default_option) {
    m_default_option = default_option;
    m_default_option_isSet = true;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_default_option_Set() const{
    return m_default_option_isSet;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_default_option_Valid() const{
    return m_default_option_isValid;
}

QString OAIPatchFormFieldSets_form_fields_inner::getFieldType() const {
    return m_field_type;
}
void OAIPatchFormFieldSets_form_fields_inner::setFieldType(const QString &field_type) {
    m_field_type = field_type;
    m_field_type_isSet = true;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_field_type_Set() const{
    return m_field_type_isSet;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_field_type_Valid() const{
    return m_field_type_isValid;
}

QString OAIPatchFormFieldSets_form_fields_inner::getHelpText() const {
    return m_help_text;
}
void OAIPatchFormFieldSets_form_fields_inner::setHelpText(const QString &help_text) {
    m_help_text = help_text;
    m_help_text_isSet = true;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_help_text_Set() const{
    return m_help_text_isSet;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_help_text_Valid() const{
    return m_help_text_isValid;
}

qint32 OAIPatchFormFieldSets_form_fields_inner::getId() const {
    return m_id;
}
void OAIPatchFormFieldSets_form_fields_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPatchFormFieldSets_form_fields_inner::getLabel() const {
    return m_label;
}
void OAIPatchFormFieldSets_form_fields_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIPatchFormFieldSets_form_fields_inner::getOptionsForSelect() const {
    return m_options_for_select;
}
void OAIPatchFormFieldSets_form_fields_inner::setOptionsForSelect(const QString &options_for_select) {
    m_options_for_select = options_for_select;
    m_options_for_select_isSet = true;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_options_for_select_Set() const{
    return m_options_for_select_isSet;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_options_for_select_Valid() const{
    return m_options_for_select_isValid;
}

bool OAIPatchFormFieldSets_form_fields_inner::isRequired() const {
    return m_required;
}
void OAIPatchFormFieldSets_form_fields_inner::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_required_Set() const{
    return m_required_isSet;
}

bool OAIPatchFormFieldSets_form_fields_inner::is_required_Valid() const{
    return m_required_isValid;
}

bool OAIPatchFormFieldSets_form_fields_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_for_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchFormFieldSets_form_fields_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
