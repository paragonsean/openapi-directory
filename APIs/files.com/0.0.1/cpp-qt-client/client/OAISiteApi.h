/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISiteApi_H
#define OAI_OAISiteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKeyEntity.h"
#include "OAIDnsRecordEntity.h"
#include "OAIHttpFileElement.h"
#include "OAIIpAddressEntity.h"
#include "OAISiteEntity.h"
#include "OAIStatusEntity.h"
#include "OAIUsageSnapshotEntity.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISiteApi : public QObject {
    Q_OBJECT

public:
    OAISiteApi(const int timeOut = 0);
    ~OAISiteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getSite();

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_gt OAIObject [optional]
    * @param[in]  filter_gteq OAIObject [optional]
    * @param[in]  filter_lt OAIObject [optional]
    * @param[in]  filter_lteq OAIObject [optional]
    */
    virtual void getSiteApiKeys(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lteq = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getSiteDnsRecords(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getSiteIpAddresses(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());


    virtual void getSiteUsage();

    /**
    * @param[in]  active_sftp_host_key_id qint32 [optional]
    * @param[in]  allow_bundle_names bool [optional]
    * @param[in]  allowed_2fa_method_bypass_for_ftp_sftp_dav bool [optional]
    * @param[in]  allowed_2fa_method_sms bool [optional]
    * @param[in]  allowed_2fa_method_totp bool [optional]
    * @param[in]  allowed_2fa_method_u2f bool [optional]
    * @param[in]  allowed_2fa_method_webauthn bool [optional]
    * @param[in]  allowed_2fa_method_yubi bool [optional]
    * @param[in]  allowed_countries QString [optional]
    * @param[in]  allowed_ips QString [optional]
    * @param[in]  ask_about_overwrites bool [optional]
    * @param[in]  bundle_activity_notifications QString [optional]
    * @param[in]  bundle_expiration qint32 [optional]
    * @param[in]  bundle_password_required bool [optional]
    * @param[in]  bundle_registration_notifications QString [optional]
    * @param[in]  bundle_require_share_recipient bool [optional]
    * @param[in]  bundle_upload_receipt_notifications QString [optional]
    * @param[in]  bundle_watermark_attachment_delete bool [optional]
    * @param[in]  bundle_watermark_attachment_file OAIHttpFileElement [optional]
    * @param[in]  bundle_watermark_value OAIObject [optional]
    * @param[in]  color2_left QString [optional]
    * @param[in]  color2_link QString [optional]
    * @param[in]  color2_text QString [optional]
    * @param[in]  color2_top QString [optional]
    * @param[in]  color2_top_text QString [optional]
    * @param[in]  custom_namespace bool [optional]
    * @param[in]  days_to_retain_backups qint32 [optional]
    * @param[in]  default_time_zone QString [optional]
    * @param[in]  desktop_app bool [optional]
    * @param[in]  desktop_app_session_ip_pinning bool [optional]
    * @param[in]  desktop_app_session_lifetime qint32 [optional]
    * @param[in]  disable_2fa_with_delay bool [optional]
    * @param[in]  disable_files_certificate_generation bool [optional]
    * @param[in]  disable_password_reset bool [optional]
    * @param[in]  disable_users_from_inactivity_period_days qint32 [optional]
    * @param[in]  disallowed_countries QString [optional]
    * @param[in]  domain QString [optional]
    * @param[in]  domain_hsts_header bool [optional]
    * @param[in]  domain_letsencrypt_chain QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  folder_permissions_groups_only bool [optional]
    * @param[in]  ftp_enabled bool [optional]
    * @param[in]  icon128_delete bool [optional]
    * @param[in]  icon128_file OAIHttpFileElement [optional]
    * @param[in]  icon16_delete bool [optional]
    * @param[in]  icon16_file OAIHttpFileElement [optional]
    * @param[in]  icon32_delete bool [optional]
    * @param[in]  icon32_file OAIHttpFileElement [optional]
    * @param[in]  icon48_delete bool [optional]
    * @param[in]  icon48_file OAIHttpFileElement [optional]
    * @param[in]  immutable_files bool [optional]
    * @param[in]  include_password_in_welcome_email bool [optional]
    * @param[in]  language QString [optional]
    * @param[in]  ldap_base_dn QString [optional]
    * @param[in]  ldap_domain QString [optional]
    * @param[in]  ldap_enabled bool [optional]
    * @param[in]  ldap_group_action QString [optional]
    * @param[in]  ldap_group_exclusion QString [optional]
    * @param[in]  ldap_group_inclusion QString [optional]
    * @param[in]  ldap_host QString [optional]
    * @param[in]  ldap_host_2 QString [optional]
    * @param[in]  ldap_host_3 QString [optional]
    * @param[in]  ldap_password_change QString [optional]
    * @param[in]  ldap_password_change_confirmation QString [optional]
    * @param[in]  ldap_port qint32 [optional]
    * @param[in]  ldap_secure bool [optional]
    * @param[in]  ldap_type QString [optional]
    * @param[in]  ldap_user_action QString [optional]
    * @param[in]  ldap_user_include_groups QString [optional]
    * @param[in]  ldap_username QString [optional]
    * @param[in]  ldap_username_field QString [optional]
    * @param[in]  login_help_text QString [optional]
    * @param[in]  logo_delete bool [optional]
    * @param[in]  logo_file OAIHttpFileElement [optional]
    * @param[in]  max_prior_passwords qint32 [optional]
    * @param[in]  mobile_app bool [optional]
    * @param[in]  mobile_app_session_ip_pinning bool [optional]
    * @param[in]  mobile_app_session_lifetime qint32 [optional]
    * @param[in]  motd_text QString [optional]
    * @param[in]  motd_use_for_ftp bool [optional]
    * @param[in]  motd_use_for_sftp bool [optional]
    * @param[in]  name QString [optional]
    * @param[in]  non_sso_groups_allowed bool [optional]
    * @param[in]  non_sso_users_allowed bool [optional]
    * @param[in]  office_integration_available bool [optional]
    * @param[in]  office_integration_type QString [optional]
    * @param[in]  opt_out_global bool [optional]
    * @param[in]  password_min_length qint32 [optional]
    * @param[in]  password_require_letter bool [optional]
    * @param[in]  password_require_mixed bool [optional]
    * @param[in]  password_require_number bool [optional]
    * @param[in]  password_require_special bool [optional]
    * @param[in]  password_require_unbreached bool [optional]
    * @param[in]  password_requirements_apply_to_bundles bool [optional]
    * @param[in]  password_validity_days qint32 [optional]
    * @param[in]  pin_all_remote_servers_to_site_region bool [optional]
    * @param[in]  reply_to_email QString [optional]
    * @param[in]  require_2fa bool [optional]
    * @param[in]  require_2fa_user_type QString [optional]
    * @param[in]  session_expiry double [optional]
    * @param[in]  session_expiry_minutes qint32 [optional]
    * @param[in]  session_pinned_by_ip bool [optional]
    * @param[in]  sftp_enabled bool [optional]
    * @param[in]  sftp_host_key_type QString [optional]
    * @param[in]  sftp_insecure_ciphers bool [optional]
    * @param[in]  sftp_user_root_enabled bool [optional]
    * @param[in]  sharing_enabled bool [optional]
    * @param[in]  show_request_access_link bool [optional]
    * @param[in]  site_footer QString [optional]
    * @param[in]  site_header QString [optional]
    * @param[in]  smtp_address QString [optional]
    * @param[in]  smtp_authentication QString [optional]
    * @param[in]  smtp_from QString [optional]
    * @param[in]  smtp_password QString [optional]
    * @param[in]  smtp_port qint32 [optional]
    * @param[in]  smtp_username QString [optional]
    * @param[in]  ssl_required bool [optional]
    * @param[in]  subdomain QString [optional]
    * @param[in]  tls_disabled bool [optional]
    * @param[in]  uploads_via_email_authentication bool [optional]
    * @param[in]  use_provided_modified_at bool [optional]
    * @param[in]  user_lockout bool [optional]
    * @param[in]  user_lockout_lock_period qint32 [optional]
    * @param[in]  user_lockout_tries qint32 [optional]
    * @param[in]  user_lockout_within qint32 [optional]
    * @param[in]  user_requests_enabled bool [optional]
    * @param[in]  user_requests_notify_admins bool [optional]
    * @param[in]  welcome_custom_text QString [optional]
    * @param[in]  welcome_email_cc QString [optional]
    * @param[in]  welcome_email_enabled bool [optional]
    * @param[in]  welcome_email_subject QString [optional]
    * @param[in]  welcome_screen QString [optional]
    * @param[in]  windows_mode_ftp bool [optional]
    */
    virtual void patchSite(const ::OpenAPI::OptionalParam<qint32> &active_sftp_host_key_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &allow_bundle_names = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allowed_2fa_method_bypass_for_ftp_sftp_dav = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allowed_2fa_method_sms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allowed_2fa_method_totp = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allowed_2fa_method_u2f = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allowed_2fa_method_webauthn = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allowed_2fa_method_yubi = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &allowed_countries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allowed_ips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ask_about_overwrites = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bundle_activity_notifications = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &bundle_expiration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &bundle_password_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bundle_registration_notifications = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &bundle_require_share_recipient = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &bundle_upload_receipt_notifications = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &bundle_watermark_attachment_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &bundle_watermark_attachment_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<OAIObject> &bundle_watermark_value = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &color2_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color2_link = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color2_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color2_top = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color2_top_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &custom_namespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &days_to_retain_backups = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &default_time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &desktop_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &desktop_app_session_ip_pinning = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &desktop_app_session_lifetime = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &disable_2fa_with_delay = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disable_files_certificate_generation = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disable_password_reset = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &disable_users_from_inactivity_period_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &disallowed_countries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &domain_hsts_header = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &domain_letsencrypt_chain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &folder_permissions_groups_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ftp_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &icon128_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &icon128_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &icon16_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &icon16_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &icon32_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &icon32_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &icon48_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &icon48_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &immutable_files = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_password_in_welcome_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_base_dn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ldap_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ldap_group_action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_group_exclusion = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_group_inclusion = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_host_2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_host_3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_password_change = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_password_change_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ldap_port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &ldap_secure = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ldap_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_user_action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_user_include_groups = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ldap_username_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &login_help_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &logo_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &logo_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<qint32> &max_prior_passwords = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &mobile_app = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &mobile_app_session_ip_pinning = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &mobile_app_session_lifetime = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &motd_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &motd_use_for_ftp = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &motd_use_for_sftp = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &non_sso_groups_allowed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &non_sso_users_allowed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &office_integration_available = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &office_integration_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &opt_out_global = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &password_min_length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &password_require_letter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &password_require_mixed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &password_require_number = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &password_require_special = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &password_require_unbreached = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &password_requirements_apply_to_bundles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &password_validity_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &pin_all_remote_servers_to_site_region = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &reply_to_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &require_2fa = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &require_2fa_user_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &session_expiry = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &session_expiry_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &session_pinned_by_ip = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sftp_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sftp_host_key_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sftp_insecure_ciphers = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sftp_user_root_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sharing_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &show_request_access_link = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &site_footer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_header = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &smtp_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &smtp_authentication = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &smtp_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &smtp_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &smtp_port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &smtp_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ssl_required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &subdomain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &tls_disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &uploads_via_email_authentication = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_provided_modified_at = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &user_lockout = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &user_lockout_lock_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_lockout_tries = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &user_lockout_within = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &user_requests_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &user_requests_notify_admins = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &welcome_custom_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &welcome_email_cc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &welcome_email_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &welcome_email_subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &welcome_screen = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &windows_mode_ftp = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  expires_at QDateTime [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  permission_set QString [optional]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void postSiteApiKeys(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &expires_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  url QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  body OAIObject [optional]
    * @param[in]  encoding QString [optional]
    * @param[in]  headers OAIObject [optional]
    * @param[in]  method QString [optional]
    */
    virtual void postSiteTestWebhook(const QString &url, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &encoding = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &headers = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &method = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getSiteCallback(OAIHttpRequestWorker *worker);
    void getSiteApiKeysCallback(OAIHttpRequestWorker *worker);
    void getSiteDnsRecordsCallback(OAIHttpRequestWorker *worker);
    void getSiteIpAddressesCallback(OAIHttpRequestWorker *worker);
    void getSiteUsageCallback(OAIHttpRequestWorker *worker);
    void patchSiteCallback(OAIHttpRequestWorker *worker);
    void postSiteApiKeysCallback(OAIHttpRequestWorker *worker);
    void postSiteTestWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getSiteSignal(OAISiteEntity summary);
    void getSiteApiKeysSignal(QList<OAIApiKeyEntity> summary);
    void getSiteDnsRecordsSignal(QList<OAIDnsRecordEntity> summary);
    void getSiteIpAddressesSignal(QList<OAIIpAddressEntity> summary);
    void getSiteUsageSignal(OAIUsageSnapshotEntity summary);
    void patchSiteSignal(OAISiteEntity summary);
    void postSiteApiKeysSignal(OAIApiKeyEntity summary);
    void postSiteTestWebhookSignal(OAIStatusEntity summary);


    void getSiteSignalFull(OAIHttpRequestWorker *worker, OAISiteEntity summary);
    void getSiteApiKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKeyEntity> summary);
    void getSiteDnsRecordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDnsRecordEntity> summary);
    void getSiteIpAddressesSignalFull(OAIHttpRequestWorker *worker, QList<OAIIpAddressEntity> summary);
    void getSiteUsageSignalFull(OAIHttpRequestWorker *worker, OAIUsageSnapshotEntity summary);
    void patchSiteSignalFull(OAIHttpRequestWorker *worker, OAISiteEntity summary);
    void postSiteApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyEntity summary);
    void postSiteTestWebhookSignalFull(OAIHttpRequestWorker *worker, OAIStatusEntity summary);

    Q_DECL_DEPRECATED_X("Use getSiteSignalError() instead")
    void getSiteSignalE(OAISiteEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteSignalError(OAISiteEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteApiKeysSignalError() instead")
    void getSiteApiKeysSignalE(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteApiKeysSignalError(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteDnsRecordsSignalError() instead")
    void getSiteDnsRecordsSignalE(QList<OAIDnsRecordEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteDnsRecordsSignalError(QList<OAIDnsRecordEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteIpAddressesSignalError() instead")
    void getSiteIpAddressesSignalE(QList<OAIIpAddressEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteIpAddressesSignalError(QList<OAIIpAddressEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteUsageSignalError() instead")
    void getSiteUsageSignalE(OAIUsageSnapshotEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteUsageSignalError(OAIUsageSnapshotEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSiteSignalError() instead")
    void patchSiteSignalE(OAISiteEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSiteSignalError(OAISiteEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSiteApiKeysSignalError() instead")
    void postSiteApiKeysSignalE(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSiteApiKeysSignalError(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSiteTestWebhookSignalError() instead")
    void postSiteTestWebhookSignalE(OAIStatusEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSiteTestWebhookSignalError(OAIStatusEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getSiteSignalErrorFull() instead")
    void getSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteApiKeysSignalErrorFull() instead")
    void getSiteApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteDnsRecordsSignalErrorFull() instead")
    void getSiteDnsRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteDnsRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteIpAddressesSignalErrorFull() instead")
    void getSiteIpAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteIpAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteUsageSignalErrorFull() instead")
    void getSiteUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSiteSignalErrorFull() instead")
    void patchSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSiteApiKeysSignalErrorFull() instead")
    void postSiteApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSiteApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSiteTestWebhookSignalErrorFull() instead")
    void postSiteTestWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSiteTestWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
