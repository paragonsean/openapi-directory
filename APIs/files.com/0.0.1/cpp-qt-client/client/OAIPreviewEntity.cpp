/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreviewEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreviewEntity::OAIPreviewEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreviewEntity::OAIPreviewEntity() {
    this->initializeModel();
}

OAIPreviewEntity::~OAIPreviewEntity() {}

void OAIPreviewEntity::initializeModel() {

    m_download_uri_isSet = false;
    m_download_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPreviewEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreviewEntity::fromJsonObject(QJsonObject json) {

    m_download_uri_isValid = ::OpenAPI::fromJsonValue(m_download_uri, json[QString("download_uri")]);
    m_download_uri_isSet = !json[QString("download_uri")].isNull() && m_download_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPreviewEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreviewEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_download_uri_isSet) {
        obj.insert(QString("download_uri"), ::OpenAPI::toJsonValue(m_download_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPreviewEntity::getDownloadUri() const {
    return m_download_uri;
}
void OAIPreviewEntity::setDownloadUri(const QString &download_uri) {
    m_download_uri = download_uri;
    m_download_uri_isSet = true;
}

bool OAIPreviewEntity::is_download_uri_Set() const{
    return m_download_uri_isSet;
}

bool OAIPreviewEntity::is_download_uri_Valid() const{
    return m_download_uri_isValid;
}

qint32 OAIPreviewEntity::getId() const {
    return m_id;
}
void OAIPreviewEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPreviewEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPreviewEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPreviewEntity::getSize() const {
    return m_size;
}
void OAIPreviewEntity::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPreviewEntity::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPreviewEntity::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIPreviewEntity::getStatus() const {
    return m_status;
}
void OAIPreviewEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPreviewEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPreviewEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPreviewEntity::getType() const {
    return m_type;
}
void OAIPreviewEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPreviewEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPreviewEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPreviewEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreviewEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
