/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStyleEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStyleEntity::OAIStyleEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStyleEntity::OAIStyleEntity() {
    this->initializeModel();
}

OAIStyleEntity::~OAIStyleEntity() {}

void OAIStyleEntity::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAIStyleEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStyleEntity::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAIStyleEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStyleEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo.isSet()) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

qint32 OAIStyleEntity::getId() const {
    return m_id;
}
void OAIStyleEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStyleEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStyleEntity::is_id_Valid() const{
    return m_id_isValid;
}

OAIImageEntity OAIStyleEntity::getLogo() const {
    return m_logo;
}
void OAIStyleEntity::setLogo(const OAIImageEntity &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIStyleEntity::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIStyleEntity::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIStyleEntity::getPath() const {
    return m_path;
}
void OAIStyleEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIStyleEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIStyleEntity::is_path_Valid() const{
    return m_path_isValid;
}

OAIImageEntity OAIStyleEntity::getThumbnail() const {
    return m_thumbnail;
}
void OAIStyleEntity::setThumbnail(const OAIImageEntity &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIStyleEntity::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIStyleEntity::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAIStyleEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStyleEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
