/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileEntity::OAIFileEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileEntity::OAIFileEntity() {
    this->initializeModel();
}

OAIFileEntity::~OAIFileEntity() {}

void OAIFileEntity::initializeModel() {

    m_crc32_isSet = false;
    m_crc32_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_download_uri_isSet = false;
    m_download_uri_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_md5_isSet = false;
    m_md5_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_mtime_isSet = false;
    m_mtime_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_preview_id_isSet = false;
    m_preview_id_isValid = false;

    m_priority_color_isSet = false;
    m_priority_color_isValid = false;

    m_provided_mtime_isSet = false;
    m_provided_mtime_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_subfolders_locked_isSet = false;
    m_subfolders_locked_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFileEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileEntity::fromJsonObject(QJsonObject json) {

    m_crc32_isValid = ::OpenAPI::fromJsonValue(m_crc32, json[QString("crc32")]);
    m_crc32_isSet = !json[QString("crc32")].isNull() && m_crc32_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_download_uri_isValid = ::OpenAPI::fromJsonValue(m_download_uri, json[QString("download_uri")]);
    m_download_uri_isSet = !json[QString("download_uri")].isNull() && m_download_uri_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("is_locked")]);
    m_is_locked_isSet = !json[QString("is_locked")].isNull() && m_is_locked_isValid;

    m_md5_isValid = ::OpenAPI::fromJsonValue(m_md5, json[QString("md5")]);
    m_md5_isSet = !json[QString("md5")].isNull() && m_md5_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_mtime_isValid = ::OpenAPI::fromJsonValue(m_mtime, json[QString("mtime")]);
    m_mtime_isSet = !json[QString("mtime")].isNull() && m_mtime_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_preview_id_isValid = ::OpenAPI::fromJsonValue(m_preview_id, json[QString("preview_id")]);
    m_preview_id_isSet = !json[QString("preview_id")].isNull() && m_preview_id_isValid;

    m_priority_color_isValid = ::OpenAPI::fromJsonValue(m_priority_color, json[QString("priority_color")]);
    m_priority_color_isSet = !json[QString("priority_color")].isNull() && m_priority_color_isValid;

    m_provided_mtime_isValid = ::OpenAPI::fromJsonValue(m_provided_mtime, json[QString("provided_mtime")]);
    m_provided_mtime_isSet = !json[QString("provided_mtime")].isNull() && m_provided_mtime_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_subfolders_locked_isValid = ::OpenAPI::fromJsonValue(m_subfolders_locked, json[QString("subfolders_locked?")]);
    m_subfolders_locked_isSet = !json[QString("subfolders_locked?")].isNull() && m_subfolders_locked_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFileEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_crc32_isSet) {
        obj.insert(QString("crc32"), ::OpenAPI::toJsonValue(m_crc32));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_download_uri_isSet) {
        obj.insert(QString("download_uri"), ::OpenAPI::toJsonValue(m_download_uri));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("is_locked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_md5_isSet) {
        obj.insert(QString("md5"), ::OpenAPI::toJsonValue(m_md5));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_mtime_isSet) {
        obj.insert(QString("mtime"), ::OpenAPI::toJsonValue(m_mtime));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_preview.isSet()) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_preview_id_isSet) {
        obj.insert(QString("preview_id"), ::OpenAPI::toJsonValue(m_preview_id));
    }
    if (m_priority_color_isSet) {
        obj.insert(QString("priority_color"), ::OpenAPI::toJsonValue(m_priority_color));
    }
    if (m_provided_mtime_isSet) {
        obj.insert(QString("provided_mtime"), ::OpenAPI::toJsonValue(m_provided_mtime));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_subfolders_locked_isSet) {
        obj.insert(QString("subfolders_locked?"), ::OpenAPI::toJsonValue(m_subfolders_locked));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIFileEntity::getCrc32() const {
    return m_crc32;
}
void OAIFileEntity::setCrc32(const QString &crc32) {
    m_crc32 = crc32;
    m_crc32_isSet = true;
}

bool OAIFileEntity::is_crc32_Set() const{
    return m_crc32_isSet;
}

bool OAIFileEntity::is_crc32_Valid() const{
    return m_crc32_isValid;
}

QDateTime OAIFileEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIFileEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFileEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFileEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIFileEntity::getDisplayName() const {
    return m_display_name;
}
void OAIFileEntity::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIFileEntity::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIFileEntity::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIFileEntity::getDownloadUri() const {
    return m_download_uri;
}
void OAIFileEntity::setDownloadUri(const QString &download_uri) {
    m_download_uri = download_uri;
    m_download_uri_isSet = true;
}

bool OAIFileEntity::is_download_uri_Set() const{
    return m_download_uri_isSet;
}

bool OAIFileEntity::is_download_uri_Valid() const{
    return m_download_uri_isValid;
}

bool OAIFileEntity::isIsLocked() const {
    return m_is_locked;
}
void OAIFileEntity::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIFileEntity::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIFileEntity::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

QString OAIFileEntity::getMd5() const {
    return m_md5;
}
void OAIFileEntity::setMd5(const QString &md5) {
    m_md5 = md5;
    m_md5_isSet = true;
}

bool OAIFileEntity::is_md5_Set() const{
    return m_md5_isSet;
}

bool OAIFileEntity::is_md5_Valid() const{
    return m_md5_isValid;
}

QString OAIFileEntity::getMimeType() const {
    return m_mime_type;
}
void OAIFileEntity::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIFileEntity::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIFileEntity::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QDateTime OAIFileEntity::getMtime() const {
    return m_mtime;
}
void OAIFileEntity::setMtime(const QDateTime &mtime) {
    m_mtime = mtime;
    m_mtime_isSet = true;
}

bool OAIFileEntity::is_mtime_Set() const{
    return m_mtime_isSet;
}

bool OAIFileEntity::is_mtime_Valid() const{
    return m_mtime_isValid;
}

QString OAIFileEntity::getPath() const {
    return m_path;
}
void OAIFileEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIFileEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIFileEntity::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIFileEntity::getPermissions() const {
    return m_permissions;
}
void OAIFileEntity::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIFileEntity::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIFileEntity::is_permissions_Valid() const{
    return m_permissions_isValid;
}

OAIPreviewEntity OAIFileEntity::getPreview() const {
    return m_preview;
}
void OAIFileEntity::setPreview(const OAIPreviewEntity &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIFileEntity::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIFileEntity::is_preview_Valid() const{
    return m_preview_isValid;
}

qint32 OAIFileEntity::getPreviewId() const {
    return m_preview_id;
}
void OAIFileEntity::setPreviewId(const qint32 &preview_id) {
    m_preview_id = preview_id;
    m_preview_id_isSet = true;
}

bool OAIFileEntity::is_preview_id_Set() const{
    return m_preview_id_isSet;
}

bool OAIFileEntity::is_preview_id_Valid() const{
    return m_preview_id_isValid;
}

QString OAIFileEntity::getPriorityColor() const {
    return m_priority_color;
}
void OAIFileEntity::setPriorityColor(const QString &priority_color) {
    m_priority_color = priority_color;
    m_priority_color_isSet = true;
}

bool OAIFileEntity::is_priority_color_Set() const{
    return m_priority_color_isSet;
}

bool OAIFileEntity::is_priority_color_Valid() const{
    return m_priority_color_isValid;
}

QDateTime OAIFileEntity::getProvidedMtime() const {
    return m_provided_mtime;
}
void OAIFileEntity::setProvidedMtime(const QDateTime &provided_mtime) {
    m_provided_mtime = provided_mtime;
    m_provided_mtime_isSet = true;
}

bool OAIFileEntity::is_provided_mtime_Set() const{
    return m_provided_mtime_isSet;
}

bool OAIFileEntity::is_provided_mtime_Valid() const{
    return m_provided_mtime_isValid;
}

QString OAIFileEntity::getRegion() const {
    return m_region;
}
void OAIFileEntity::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIFileEntity::is_region_Set() const{
    return m_region_isSet;
}

bool OAIFileEntity::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAIFileEntity::getSize() const {
    return m_size;
}
void OAIFileEntity::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFileEntity::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFileEntity::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIFileEntity::isSubfoldersLocked() const {
    return m_subfolders_locked;
}
void OAIFileEntity::setSubfoldersLocked(const bool &subfolders_locked) {
    m_subfolders_locked = subfolders_locked;
    m_subfolders_locked_isSet = true;
}

bool OAIFileEntity::is_subfolders_locked_Set() const{
    return m_subfolders_locked_isSet;
}

bool OAIFileEntity::is_subfolders_locked_Valid() const{
    return m_subfolders_locked_isValid;
}

QString OAIFileEntity::getType() const {
    return m_type;
}
void OAIFileEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFileEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFileEntity::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFileEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crc32_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provided_mtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subfolders_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
