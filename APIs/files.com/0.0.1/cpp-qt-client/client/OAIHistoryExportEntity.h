/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHistoryExportEntity.h
 *
 * Show History Export
 */

#ifndef OAIHistoryExportEntity_H
#define OAIHistoryExportEntity_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHistoryExportEntity : public OAIObject {
public:
    OAIHistoryExportEntity();
    OAIHistoryExportEntity(QString json);
    ~OAIHistoryExportEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndAt() const;
    void setEndAt(const QDateTime &end_at);
    bool is_end_at_Set() const;
    bool is_end_at_Valid() const;

    QString getHistoryVersion() const;
    void setHistoryVersion(const QString &history_version);
    bool is_history_version_Set() const;
    bool is_history_version_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getQueryAction() const;
    void setQueryAction(const QString &query_action);
    bool is_query_action_Set() const;
    bool is_query_action_Valid() const;

    QString getQueryDestination() const;
    void setQueryDestination(const QString &query_destination);
    bool is_query_destination_Set() const;
    bool is_query_destination_Valid() const;

    QString getQueryFailureType() const;
    void setQueryFailureType(const QString &query_failure_type);
    bool is_query_failure_type_Set() const;
    bool is_query_failure_type_Valid() const;

    QString getQueryFileId() const;
    void setQueryFileId(const QString &query_file_id);
    bool is_query_file_id_Set() const;
    bool is_query_file_id_Valid() const;

    QString getQueryFolder() const;
    void setQueryFolder(const QString &query_folder);
    bool is_query_folder_Set() const;
    bool is_query_folder_Valid() const;

    QString getQueryInterface() const;
    void setQueryInterface(const QString &query_interface);
    bool is_query_interface_Set() const;
    bool is_query_interface_Valid() const;

    QString getQueryIp() const;
    void setQueryIp(const QString &query_ip);
    bool is_query_ip_Set() const;
    bool is_query_ip_Valid() const;

    QString getQueryParentId() const;
    void setQueryParentId(const QString &query_parent_id);
    bool is_query_parent_id_Set() const;
    bool is_query_parent_id_Valid() const;

    QString getQueryPath() const;
    void setQueryPath(const QString &query_path);
    bool is_query_path_Set() const;
    bool is_query_path_Valid() const;

    QString getQuerySrc() const;
    void setQuerySrc(const QString &query_src);
    bool is_query_src_Set() const;
    bool is_query_src_Valid() const;

    QString getQueryTargetId() const;
    void setQueryTargetId(const QString &query_target_id);
    bool is_query_target_id_Set() const;
    bool is_query_target_id_Valid() const;

    QString getQueryTargetName() const;
    void setQueryTargetName(const QString &query_target_name);
    bool is_query_target_name_Set() const;
    bool is_query_target_name_Valid() const;

    QString getQueryTargetPermission() const;
    void setQueryTargetPermission(const QString &query_target_permission);
    bool is_query_target_permission_Set() const;
    bool is_query_target_permission_Valid() const;

    QString getQueryTargetPermissionSet() const;
    void setQueryTargetPermissionSet(const QString &query_target_permission_set);
    bool is_query_target_permission_set_Set() const;
    bool is_query_target_permission_set_Valid() const;

    QString getQueryTargetPlatform() const;
    void setQueryTargetPlatform(const QString &query_target_platform);
    bool is_query_target_platform_Set() const;
    bool is_query_target_platform_Valid() const;

    QString getQueryTargetUserId() const;
    void setQueryTargetUserId(const QString &query_target_user_id);
    bool is_query_target_user_id_Set() const;
    bool is_query_target_user_id_Valid() const;

    QString getQueryTargetUsername() const;
    void setQueryTargetUsername(const QString &query_target_username);
    bool is_query_target_username_Set() const;
    bool is_query_target_username_Valid() const;

    QString getQueryUserId() const;
    void setQueryUserId(const QString &query_user_id);
    bool is_query_user_id_Set() const;
    bool is_query_user_id_Valid() const;

    QString getQueryUsername() const;
    void setQueryUsername(const QString &query_username);
    bool is_query_username_Set() const;
    bool is_query_username_Valid() const;

    QString getResultsUrl() const;
    void setResultsUrl(const QString &results_url);
    bool is_results_url_Set() const;
    bool is_results_url_Valid() const;

    QDateTime getStartAt() const;
    void setStartAt(const QDateTime &start_at);
    bool is_start_at_Set() const;
    bool is_start_at_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_at;
    bool m_end_at_isSet;
    bool m_end_at_isValid;

    QString m_history_version;
    bool m_history_version_isSet;
    bool m_history_version_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_query_action;
    bool m_query_action_isSet;
    bool m_query_action_isValid;

    QString m_query_destination;
    bool m_query_destination_isSet;
    bool m_query_destination_isValid;

    QString m_query_failure_type;
    bool m_query_failure_type_isSet;
    bool m_query_failure_type_isValid;

    QString m_query_file_id;
    bool m_query_file_id_isSet;
    bool m_query_file_id_isValid;

    QString m_query_folder;
    bool m_query_folder_isSet;
    bool m_query_folder_isValid;

    QString m_query_interface;
    bool m_query_interface_isSet;
    bool m_query_interface_isValid;

    QString m_query_ip;
    bool m_query_ip_isSet;
    bool m_query_ip_isValid;

    QString m_query_parent_id;
    bool m_query_parent_id_isSet;
    bool m_query_parent_id_isValid;

    QString m_query_path;
    bool m_query_path_isSet;
    bool m_query_path_isValid;

    QString m_query_src;
    bool m_query_src_isSet;
    bool m_query_src_isValid;

    QString m_query_target_id;
    bool m_query_target_id_isSet;
    bool m_query_target_id_isValid;

    QString m_query_target_name;
    bool m_query_target_name_isSet;
    bool m_query_target_name_isValid;

    QString m_query_target_permission;
    bool m_query_target_permission_isSet;
    bool m_query_target_permission_isValid;

    QString m_query_target_permission_set;
    bool m_query_target_permission_set_isSet;
    bool m_query_target_permission_set_isValid;

    QString m_query_target_platform;
    bool m_query_target_platform_isSet;
    bool m_query_target_platform_isValid;

    QString m_query_target_user_id;
    bool m_query_target_user_id_isSet;
    bool m_query_target_user_id_isValid;

    QString m_query_target_username;
    bool m_query_target_username_isSet;
    bool m_query_target_username_isValid;

    QString m_query_user_id;
    bool m_query_user_id_isSet;
    bool m_query_user_id_isValid;

    QString m_query_username;
    bool m_query_username_isSet;
    bool m_query_username_isValid;

    QString m_results_url;
    bool m_results_url_isSet;
    bool m_results_url_isValid;

    QDateTime m_start_at;
    bool m_start_at_isSet;
    bool m_start_at_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHistoryExportEntity)

#endif // OAIHistoryExportEntity_H
