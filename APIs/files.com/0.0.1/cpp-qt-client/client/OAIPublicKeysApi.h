/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicKeysApi_H
#define OAI_OAIPublicKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPublicKeyEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicKeysApi : public QObject {
    Q_OBJECT

public:
    OAIPublicKeysApi(const int timeOut = 0);
    ~OAIPublicKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deletePublicKeysId(const qint32 &id);

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getPublicKeys(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getPublicKeysId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  title QString [required]
    */
    virtual void patchPublicKeysId(const qint32 &id, const QString &title);

    /**
    * @param[in]  public_key QString [required]
    * @param[in]  title QString [required]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void postPublicKeys(const QString &public_key, const QString &title, const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePublicKeysIdCallback(OAIHttpRequestWorker *worker);
    void getPublicKeysCallback(OAIHttpRequestWorker *worker);
    void getPublicKeysIdCallback(OAIHttpRequestWorker *worker);
    void patchPublicKeysIdCallback(OAIHttpRequestWorker *worker);
    void postPublicKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePublicKeysIdSignal();
    void getPublicKeysSignal(QList<OAIPublicKeyEntity> summary);
    void getPublicKeysIdSignal(OAIPublicKeyEntity summary);
    void patchPublicKeysIdSignal(OAIPublicKeyEntity summary);
    void postPublicKeysSignal(OAIPublicKeyEntity summary);


    void deletePublicKeysIdSignalFull(OAIHttpRequestWorker *worker);
    void getPublicKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIPublicKeyEntity> summary);
    void getPublicKeysIdSignalFull(OAIHttpRequestWorker *worker, OAIPublicKeyEntity summary);
    void patchPublicKeysIdSignalFull(OAIHttpRequestWorker *worker, OAIPublicKeyEntity summary);
    void postPublicKeysSignalFull(OAIHttpRequestWorker *worker, OAIPublicKeyEntity summary);

    Q_DECL_DEPRECATED_X("Use deletePublicKeysIdSignalError() instead")
    void deletePublicKeysIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKeysIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeysSignalError() instead")
    void getPublicKeysSignalE(QList<OAIPublicKeyEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeysSignalError(QList<OAIPublicKeyEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeysIdSignalError() instead")
    void getPublicKeysIdSignalE(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeysIdSignalError(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPublicKeysIdSignalError() instead")
    void patchPublicKeysIdSignalE(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPublicKeysIdSignalError(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPublicKeysSignalError() instead")
    void postPublicKeysSignalE(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPublicKeysSignalError(OAIPublicKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePublicKeysIdSignalErrorFull() instead")
    void deletePublicKeysIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePublicKeysIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeysSignalErrorFull() instead")
    void getPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPublicKeysIdSignalErrorFull() instead")
    void getPublicKeysIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPublicKeysIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPublicKeysIdSignalErrorFull() instead")
    void patchPublicKeysIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPublicKeysIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPublicKeysSignalErrorFull() instead")
    void postPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
