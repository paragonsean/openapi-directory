/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationEntity::OAINotificationEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationEntity::OAINotificationEntity() {
    this->initializeModel();
}

OAINotificationEntity::~OAINotificationEntity() {}

void OAINotificationEntity::initializeModel() {

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_notify_on_copy_isSet = false;
    m_notify_on_copy_isValid = false;

    m_notify_on_delete_isSet = false;
    m_notify_on_delete_isValid = false;

    m_notify_on_download_isSet = false;
    m_notify_on_download_isValid = false;

    m_notify_on_move_isSet = false;
    m_notify_on_move_isValid = false;

    m_notify_on_upload_isSet = false;
    m_notify_on_upload_isValid = false;

    m_notify_user_actions_isSet = false;
    m_notify_user_actions_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_recursive_isSet = false;
    m_recursive_isValid = false;

    m_send_interval_isSet = false;
    m_send_interval_isValid = false;

    m_suppressed_email_isSet = false;
    m_suppressed_email_isValid = false;

    m_trigger_by_share_recipients_isSet = false;
    m_trigger_by_share_recipients_isValid = false;

    m_triggering_filenames_isSet = false;
    m_triggering_filenames_isValid = false;

    m_triggering_group_ids_isSet = false;
    m_triggering_group_ids_isValid = false;

    m_triggering_user_ids_isSet = false;
    m_triggering_user_ids_isValid = false;

    m_unsubscribed_isSet = false;
    m_unsubscribed_isValid = false;

    m_unsubscribed_reason_isSet = false;
    m_unsubscribed_reason_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAINotificationEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationEntity::fromJsonObject(QJsonObject json) {

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("group_name")]);
    m_group_name_isSet = !json[QString("group_name")].isNull() && m_group_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_notify_on_copy_isValid = ::OpenAPI::fromJsonValue(m_notify_on_copy, json[QString("notify_on_copy")]);
    m_notify_on_copy_isSet = !json[QString("notify_on_copy")].isNull() && m_notify_on_copy_isValid;

    m_notify_on_delete_isValid = ::OpenAPI::fromJsonValue(m_notify_on_delete, json[QString("notify_on_delete")]);
    m_notify_on_delete_isSet = !json[QString("notify_on_delete")].isNull() && m_notify_on_delete_isValid;

    m_notify_on_download_isValid = ::OpenAPI::fromJsonValue(m_notify_on_download, json[QString("notify_on_download")]);
    m_notify_on_download_isSet = !json[QString("notify_on_download")].isNull() && m_notify_on_download_isValid;

    m_notify_on_move_isValid = ::OpenAPI::fromJsonValue(m_notify_on_move, json[QString("notify_on_move")]);
    m_notify_on_move_isSet = !json[QString("notify_on_move")].isNull() && m_notify_on_move_isValid;

    m_notify_on_upload_isValid = ::OpenAPI::fromJsonValue(m_notify_on_upload, json[QString("notify_on_upload")]);
    m_notify_on_upload_isSet = !json[QString("notify_on_upload")].isNull() && m_notify_on_upload_isValid;

    m_notify_user_actions_isValid = ::OpenAPI::fromJsonValue(m_notify_user_actions, json[QString("notify_user_actions")]);
    m_notify_user_actions_isSet = !json[QString("notify_user_actions")].isNull() && m_notify_user_actions_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_recursive_isValid = ::OpenAPI::fromJsonValue(m_recursive, json[QString("recursive")]);
    m_recursive_isSet = !json[QString("recursive")].isNull() && m_recursive_isValid;

    m_send_interval_isValid = ::OpenAPI::fromJsonValue(m_send_interval, json[QString("send_interval")]);
    m_send_interval_isSet = !json[QString("send_interval")].isNull() && m_send_interval_isValid;

    m_suppressed_email_isValid = ::OpenAPI::fromJsonValue(m_suppressed_email, json[QString("suppressed_email")]);
    m_suppressed_email_isSet = !json[QString("suppressed_email")].isNull() && m_suppressed_email_isValid;

    m_trigger_by_share_recipients_isValid = ::OpenAPI::fromJsonValue(m_trigger_by_share_recipients, json[QString("trigger_by_share_recipients")]);
    m_trigger_by_share_recipients_isSet = !json[QString("trigger_by_share_recipients")].isNull() && m_trigger_by_share_recipients_isValid;

    m_triggering_filenames_isValid = ::OpenAPI::fromJsonValue(m_triggering_filenames, json[QString("triggering_filenames")]);
    m_triggering_filenames_isSet = !json[QString("triggering_filenames")].isNull() && m_triggering_filenames_isValid;

    m_triggering_group_ids_isValid = ::OpenAPI::fromJsonValue(m_triggering_group_ids, json[QString("triggering_group_ids")]);
    m_triggering_group_ids_isSet = !json[QString("triggering_group_ids")].isNull() && m_triggering_group_ids_isValid;

    m_triggering_user_ids_isValid = ::OpenAPI::fromJsonValue(m_triggering_user_ids, json[QString("triggering_user_ids")]);
    m_triggering_user_ids_isSet = !json[QString("triggering_user_ids")].isNull() && m_triggering_user_ids_isValid;

    m_unsubscribed_isValid = ::OpenAPI::fromJsonValue(m_unsubscribed, json[QString("unsubscribed")]);
    m_unsubscribed_isSet = !json[QString("unsubscribed")].isNull() && m_unsubscribed_isValid;

    m_unsubscribed_reason_isValid = ::OpenAPI::fromJsonValue(m_unsubscribed_reason, json[QString("unsubscribed_reason")]);
    m_unsubscribed_reason_isSet = !json[QString("unsubscribed_reason")].isNull() && m_unsubscribed_reason_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAINotificationEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("group_name"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_notify_on_copy_isSet) {
        obj.insert(QString("notify_on_copy"), ::OpenAPI::toJsonValue(m_notify_on_copy));
    }
    if (m_notify_on_delete_isSet) {
        obj.insert(QString("notify_on_delete"), ::OpenAPI::toJsonValue(m_notify_on_delete));
    }
    if (m_notify_on_download_isSet) {
        obj.insert(QString("notify_on_download"), ::OpenAPI::toJsonValue(m_notify_on_download));
    }
    if (m_notify_on_move_isSet) {
        obj.insert(QString("notify_on_move"), ::OpenAPI::toJsonValue(m_notify_on_move));
    }
    if (m_notify_on_upload_isSet) {
        obj.insert(QString("notify_on_upload"), ::OpenAPI::toJsonValue(m_notify_on_upload));
    }
    if (m_notify_user_actions_isSet) {
        obj.insert(QString("notify_user_actions"), ::OpenAPI::toJsonValue(m_notify_user_actions));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_recursive_isSet) {
        obj.insert(QString("recursive"), ::OpenAPI::toJsonValue(m_recursive));
    }
    if (m_send_interval_isSet) {
        obj.insert(QString("send_interval"), ::OpenAPI::toJsonValue(m_send_interval));
    }
    if (m_suppressed_email_isSet) {
        obj.insert(QString("suppressed_email"), ::OpenAPI::toJsonValue(m_suppressed_email));
    }
    if (m_trigger_by_share_recipients_isSet) {
        obj.insert(QString("trigger_by_share_recipients"), ::OpenAPI::toJsonValue(m_trigger_by_share_recipients));
    }
    if (m_triggering_filenames.size() > 0) {
        obj.insert(QString("triggering_filenames"), ::OpenAPI::toJsonValue(m_triggering_filenames));
    }
    if (m_triggering_group_ids.size() > 0) {
        obj.insert(QString("triggering_group_ids"), ::OpenAPI::toJsonValue(m_triggering_group_ids));
    }
    if (m_triggering_user_ids.size() > 0) {
        obj.insert(QString("triggering_user_ids"), ::OpenAPI::toJsonValue(m_triggering_user_ids));
    }
    if (m_unsubscribed_isSet) {
        obj.insert(QString("unsubscribed"), ::OpenAPI::toJsonValue(m_unsubscribed));
    }
    if (m_unsubscribed_reason_isSet) {
        obj.insert(QString("unsubscribed_reason"), ::OpenAPI::toJsonValue(m_unsubscribed_reason));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

qint32 OAINotificationEntity::getGroupId() const {
    return m_group_id;
}
void OAINotificationEntity::setGroupId(const qint32 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAINotificationEntity::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAINotificationEntity::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAINotificationEntity::getGroupName() const {
    return m_group_name;
}
void OAINotificationEntity::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAINotificationEntity::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAINotificationEntity::is_group_name_Valid() const{
    return m_group_name_isValid;
}

qint32 OAINotificationEntity::getId() const {
    return m_id;
}
void OAINotificationEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINotificationEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAINotificationEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINotificationEntity::getMessage() const {
    return m_message;
}
void OAINotificationEntity::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINotificationEntity::is_message_Set() const{
    return m_message_isSet;
}

bool OAINotificationEntity::is_message_Valid() const{
    return m_message_isValid;
}

bool OAINotificationEntity::isNotifyOnCopy() const {
    return m_notify_on_copy;
}
void OAINotificationEntity::setNotifyOnCopy(const bool &notify_on_copy) {
    m_notify_on_copy = notify_on_copy;
    m_notify_on_copy_isSet = true;
}

bool OAINotificationEntity::is_notify_on_copy_Set() const{
    return m_notify_on_copy_isSet;
}

bool OAINotificationEntity::is_notify_on_copy_Valid() const{
    return m_notify_on_copy_isValid;
}

bool OAINotificationEntity::isNotifyOnDelete() const {
    return m_notify_on_delete;
}
void OAINotificationEntity::setNotifyOnDelete(const bool &notify_on_delete) {
    m_notify_on_delete = notify_on_delete;
    m_notify_on_delete_isSet = true;
}

bool OAINotificationEntity::is_notify_on_delete_Set() const{
    return m_notify_on_delete_isSet;
}

bool OAINotificationEntity::is_notify_on_delete_Valid() const{
    return m_notify_on_delete_isValid;
}

bool OAINotificationEntity::isNotifyOnDownload() const {
    return m_notify_on_download;
}
void OAINotificationEntity::setNotifyOnDownload(const bool &notify_on_download) {
    m_notify_on_download = notify_on_download;
    m_notify_on_download_isSet = true;
}

bool OAINotificationEntity::is_notify_on_download_Set() const{
    return m_notify_on_download_isSet;
}

bool OAINotificationEntity::is_notify_on_download_Valid() const{
    return m_notify_on_download_isValid;
}

bool OAINotificationEntity::isNotifyOnMove() const {
    return m_notify_on_move;
}
void OAINotificationEntity::setNotifyOnMove(const bool &notify_on_move) {
    m_notify_on_move = notify_on_move;
    m_notify_on_move_isSet = true;
}

bool OAINotificationEntity::is_notify_on_move_Set() const{
    return m_notify_on_move_isSet;
}

bool OAINotificationEntity::is_notify_on_move_Valid() const{
    return m_notify_on_move_isValid;
}

bool OAINotificationEntity::isNotifyOnUpload() const {
    return m_notify_on_upload;
}
void OAINotificationEntity::setNotifyOnUpload(const bool &notify_on_upload) {
    m_notify_on_upload = notify_on_upload;
    m_notify_on_upload_isSet = true;
}

bool OAINotificationEntity::is_notify_on_upload_Set() const{
    return m_notify_on_upload_isSet;
}

bool OAINotificationEntity::is_notify_on_upload_Valid() const{
    return m_notify_on_upload_isValid;
}

bool OAINotificationEntity::isNotifyUserActions() const {
    return m_notify_user_actions;
}
void OAINotificationEntity::setNotifyUserActions(const bool &notify_user_actions) {
    m_notify_user_actions = notify_user_actions;
    m_notify_user_actions_isSet = true;
}

bool OAINotificationEntity::is_notify_user_actions_Set() const{
    return m_notify_user_actions_isSet;
}

bool OAINotificationEntity::is_notify_user_actions_Valid() const{
    return m_notify_user_actions_isValid;
}

QString OAINotificationEntity::getPath() const {
    return m_path;
}
void OAINotificationEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAINotificationEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAINotificationEntity::is_path_Valid() const{
    return m_path_isValid;
}

bool OAINotificationEntity::isRecursive() const {
    return m_recursive;
}
void OAINotificationEntity::setRecursive(const bool &recursive) {
    m_recursive = recursive;
    m_recursive_isSet = true;
}

bool OAINotificationEntity::is_recursive_Set() const{
    return m_recursive_isSet;
}

bool OAINotificationEntity::is_recursive_Valid() const{
    return m_recursive_isValid;
}

QString OAINotificationEntity::getSendInterval() const {
    return m_send_interval;
}
void OAINotificationEntity::setSendInterval(const QString &send_interval) {
    m_send_interval = send_interval;
    m_send_interval_isSet = true;
}

bool OAINotificationEntity::is_send_interval_Set() const{
    return m_send_interval_isSet;
}

bool OAINotificationEntity::is_send_interval_Valid() const{
    return m_send_interval_isValid;
}

bool OAINotificationEntity::isSuppressedEmail() const {
    return m_suppressed_email;
}
void OAINotificationEntity::setSuppressedEmail(const bool &suppressed_email) {
    m_suppressed_email = suppressed_email;
    m_suppressed_email_isSet = true;
}

bool OAINotificationEntity::is_suppressed_email_Set() const{
    return m_suppressed_email_isSet;
}

bool OAINotificationEntity::is_suppressed_email_Valid() const{
    return m_suppressed_email_isValid;
}

bool OAINotificationEntity::isTriggerByShareRecipients() const {
    return m_trigger_by_share_recipients;
}
void OAINotificationEntity::setTriggerByShareRecipients(const bool &trigger_by_share_recipients) {
    m_trigger_by_share_recipients = trigger_by_share_recipients;
    m_trigger_by_share_recipients_isSet = true;
}

bool OAINotificationEntity::is_trigger_by_share_recipients_Set() const{
    return m_trigger_by_share_recipients_isSet;
}

bool OAINotificationEntity::is_trigger_by_share_recipients_Valid() const{
    return m_trigger_by_share_recipients_isValid;
}

QList<QString> OAINotificationEntity::getTriggeringFilenames() const {
    return m_triggering_filenames;
}
void OAINotificationEntity::setTriggeringFilenames(const QList<QString> &triggering_filenames) {
    m_triggering_filenames = triggering_filenames;
    m_triggering_filenames_isSet = true;
}

bool OAINotificationEntity::is_triggering_filenames_Set() const{
    return m_triggering_filenames_isSet;
}

bool OAINotificationEntity::is_triggering_filenames_Valid() const{
    return m_triggering_filenames_isValid;
}

QList<qint32> OAINotificationEntity::getTriggeringGroupIds() const {
    return m_triggering_group_ids;
}
void OAINotificationEntity::setTriggeringGroupIds(const QList<qint32> &triggering_group_ids) {
    m_triggering_group_ids = triggering_group_ids;
    m_triggering_group_ids_isSet = true;
}

bool OAINotificationEntity::is_triggering_group_ids_Set() const{
    return m_triggering_group_ids_isSet;
}

bool OAINotificationEntity::is_triggering_group_ids_Valid() const{
    return m_triggering_group_ids_isValid;
}

QList<qint32> OAINotificationEntity::getTriggeringUserIds() const {
    return m_triggering_user_ids;
}
void OAINotificationEntity::setTriggeringUserIds(const QList<qint32> &triggering_user_ids) {
    m_triggering_user_ids = triggering_user_ids;
    m_triggering_user_ids_isSet = true;
}

bool OAINotificationEntity::is_triggering_user_ids_Set() const{
    return m_triggering_user_ids_isSet;
}

bool OAINotificationEntity::is_triggering_user_ids_Valid() const{
    return m_triggering_user_ids_isValid;
}

bool OAINotificationEntity::isUnsubscribed() const {
    return m_unsubscribed;
}
void OAINotificationEntity::setUnsubscribed(const bool &unsubscribed) {
    m_unsubscribed = unsubscribed;
    m_unsubscribed_isSet = true;
}

bool OAINotificationEntity::is_unsubscribed_Set() const{
    return m_unsubscribed_isSet;
}

bool OAINotificationEntity::is_unsubscribed_Valid() const{
    return m_unsubscribed_isValid;
}

QString OAINotificationEntity::getUnsubscribedReason() const {
    return m_unsubscribed_reason;
}
void OAINotificationEntity::setUnsubscribedReason(const QString &unsubscribed_reason) {
    m_unsubscribed_reason = unsubscribed_reason;
    m_unsubscribed_reason_isSet = true;
}

bool OAINotificationEntity::is_unsubscribed_reason_Set() const{
    return m_unsubscribed_reason_isSet;
}

bool OAINotificationEntity::is_unsubscribed_reason_Valid() const{
    return m_unsubscribed_reason_isValid;
}

qint32 OAINotificationEntity::getUserId() const {
    return m_user_id;
}
void OAINotificationEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAINotificationEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAINotificationEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAINotificationEntity::getUsername() const {
    return m_username;
}
void OAINotificationEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAINotificationEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAINotificationEntity::is_username_Valid() const{
    return m_username_isValid;
}

bool OAINotificationEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_move_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_on_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_user_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppressed_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_by_share_recipients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggering_filenames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggering_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggering_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubscribed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsubscribed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
