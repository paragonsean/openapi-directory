/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUsageSnapshotEntity.h
 *
 * List Usage Snapshots
 */

#ifndef OAIUsageSnapshotEntity_H
#define OAIUsageSnapshotEntity_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUsageSnapshotEntity : public OAIObject {
public:
    OAIUsageSnapshotEntity();
    OAIUsageSnapshotEntity(QString json);
    ~OAIUsageSnapshotEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getBytesSent() const;
    void setBytesSent(const double &bytes_sent);
    bool is_bytes_sent_Set() const;
    bool is_bytes_sent_Valid() const;

    double getCurrentStorage() const;
    void setCurrentStorage(const double &current_storage);
    bool is_current_storage_Set() const;
    bool is_current_storage_Valid() const;

    double getDeletedFilesCountedInMinimum() const;
    void setDeletedFilesCountedInMinimum(const double &deleted_files_counted_in_minimum);
    bool is_deleted_files_counted_in_minimum_Set() const;
    bool is_deleted_files_counted_in_minimum_Valid() const;

    double getDeletedFilesStorage() const;
    void setDeletedFilesStorage(const double &deleted_files_storage);
    bool is_deleted_files_storage_Set() const;
    bool is_deleted_files_storage_Valid() const;

    QDateTime getEndAt() const;
    void setEndAt(const QDateTime &end_at);
    bool is_end_at_Set() const;
    bool is_end_at_Valid() const;

    double getHighWaterStorage() const;
    void setHighWaterStorage(const double &high_water_storage);
    bool is_high_water_storage_Set() const;
    bool is_high_water_storage_Valid() const;

    double getHighWaterUserCount() const;
    void setHighWaterUserCount(const double &high_water_user_count);
    bool is_high_water_user_count_Set() const;
    bool is_high_water_user_count_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getRootStorage() const;
    void setRootStorage(const double &root_storage);
    bool is_root_storage_Set() const;
    bool is_root_storage_Valid() const;

    QDateTime getStartAt() const;
    void setStartAt(const QDateTime &start_at);
    bool is_start_at_Set() const;
    bool is_start_at_Valid() const;

    double getSyncBytesReceived() const;
    void setSyncBytesReceived(const double &sync_bytes_received);
    bool is_sync_bytes_received_Set() const;
    bool is_sync_bytes_received_Valid() const;

    double getSyncBytesSent() const;
    void setSyncBytesSent(const double &sync_bytes_sent);
    bool is_sync_bytes_sent_Set() const;
    bool is_sync_bytes_sent_Valid() const;

    double getTotalBillableTransferUsage() const;
    void setTotalBillableTransferUsage(const double &total_billable_transfer_usage);
    bool is_total_billable_transfer_usage_Set() const;
    bool is_total_billable_transfer_usage_Valid() const;

    double getTotalBillableUsage() const;
    void setTotalBillableUsage(const double &total_billable_usage);
    bool is_total_billable_usage_Set() const;
    bool is_total_billable_usage_Valid() const;

    OAIObject getUsageByTopLevelDir() const;
    void setUsageByTopLevelDir(const OAIObject &usage_by_top_level_dir);
    bool is_usage_by_top_level_dir_Set() const;
    bool is_usage_by_top_level_dir_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_bytes_sent;
    bool m_bytes_sent_isSet;
    bool m_bytes_sent_isValid;

    double m_current_storage;
    bool m_current_storage_isSet;
    bool m_current_storage_isValid;

    double m_deleted_files_counted_in_minimum;
    bool m_deleted_files_counted_in_minimum_isSet;
    bool m_deleted_files_counted_in_minimum_isValid;

    double m_deleted_files_storage;
    bool m_deleted_files_storage_isSet;
    bool m_deleted_files_storage_isValid;

    QDateTime m_end_at;
    bool m_end_at_isSet;
    bool m_end_at_isValid;

    double m_high_water_storage;
    bool m_high_water_storage_isSet;
    bool m_high_water_storage_isValid;

    double m_high_water_user_count;
    bool m_high_water_user_count_isSet;
    bool m_high_water_user_count_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_root_storage;
    bool m_root_storage_isSet;
    bool m_root_storage_isValid;

    QDateTime m_start_at;
    bool m_start_at_isSet;
    bool m_start_at_isValid;

    double m_sync_bytes_received;
    bool m_sync_bytes_received_isSet;
    bool m_sync_bytes_received_isValid;

    double m_sync_bytes_sent;
    bool m_sync_bytes_sent_isSet;
    bool m_sync_bytes_sent_isValid;

    double m_total_billable_transfer_usage;
    bool m_total_billable_transfer_usage_isSet;
    bool m_total_billable_transfer_usage_isValid;

    double m_total_billable_usage;
    bool m_total_billable_usage_isSet;
    bool m_total_billable_usage_isValid;

    OAIObject m_usage_by_top_level_dir;
    bool m_usage_by_top_level_dir_isSet;
    bool m_usage_by_top_level_dir_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUsageSnapshotEntity)

#endif // OAIUsageSnapshotEntity_H
