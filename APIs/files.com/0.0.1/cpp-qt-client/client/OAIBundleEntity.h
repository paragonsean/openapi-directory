/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBundleEntity.h
 *
 * Create Bundle
 */

#ifndef OAIBundleEntity_H
#define OAIBundleEntity_H

#include <QJsonObject>

#include "OAIFormFieldSetEntity.h"
#include "OAIImageEntity.h"
#include "OAIObject.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFormFieldSetEntity;
class OAIImageEntity;

class OAIBundleEntity : public OAIObject {
public:
    OAIBundleEntity();
    OAIBundleEntity(QString json);
    ~OAIBundleEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClickwrapBody() const;
    void setClickwrapBody(const QString &clickwrap_body);
    bool is_clickwrap_body_Set() const;
    bool is_clickwrap_body_Valid() const;

    qint32 getClickwrapId() const;
    void setClickwrapId(const qint32 &clickwrap_id);
    bool is_clickwrap_id_Set() const;
    bool is_clickwrap_id_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDontSeparateSubmissionsByFolder() const;
    void setDontSeparateSubmissionsByFolder(const bool &dont_separate_submissions_by_folder);
    bool is_dont_separate_submissions_by_folder_Set() const;
    bool is_dont_separate_submissions_by_folder_Valid() const;

    QDateTime getExpiresAt() const;
    void setExpiresAt(const QDateTime &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    OAIFormFieldSetEntity getFormFieldSet() const;
    void setFormFieldSet(const OAIFormFieldSetEntity &form_field_set);
    bool is_form_field_set_Set() const;
    bool is_form_field_set_Valid() const;

    bool isHasInbox() const;
    void setHasInbox(const bool &has_inbox);
    bool is_has_inbox_Set() const;
    bool is_has_inbox_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getInboxId() const;
    void setInboxId(const qint32 &inbox_id);
    bool is_inbox_id_Set() const;
    bool is_inbox_id_Valid() const;

    qint32 getMaxUses() const;
    void setMaxUses(const qint32 &max_uses);
    bool is_max_uses_Set() const;
    bool is_max_uses_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    bool isPasswordProtected() const;
    void setPasswordProtected(const bool &password_protected);
    bool is_password_protected_Set() const;
    bool is_password_protected_Valid() const;

    QString getPathTemplate() const;
    void setPathTemplate(const QString &path_template);
    bool is_path_template_Set() const;
    bool is_path_template_Valid() const;

    QList<QString> getPaths() const;
    void setPaths(const QList<QString> &paths);
    bool is_paths_Set() const;
    bool is_paths_Valid() const;

    QString getPermissions() const;
    void setPermissions(const QString &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    bool isPreviewOnly() const;
    void setPreviewOnly(const bool &preview_only);
    bool is_preview_only_Set() const;
    bool is_preview_only_Valid() const;

    bool isRequireRegistration() const;
    void setRequireRegistration(const bool &require_registration);
    bool is_require_registration_Set() const;
    bool is_require_registration_Valid() const;

    bool isRequireShareRecipient() const;
    void setRequireShareRecipient(const bool &require_share_recipient);
    bool is_require_share_recipient_Set() const;
    bool is_require_share_recipient_Valid() const;

    bool isSendEmailReceiptToUploader() const;
    void setSendEmailReceiptToUploader(const bool &send_email_receipt_to_uploader);
    bool is_send_email_receipt_to_uploader_Set() const;
    bool is_send_email_receipt_to_uploader_Valid() const;

    bool isSkipCompany() const;
    void setSkipCompany(const bool &skip_company);
    bool is_skip_company_Set() const;
    bool is_skip_company_Valid() const;

    bool isSkipEmail() const;
    void setSkipEmail(const bool &skip_email);
    bool is_skip_email_Set() const;
    bool is_skip_email_Valid() const;

    bool isSkipName() const;
    void setSkipName(const bool &skip_name);
    bool is_skip_name_Set() const;
    bool is_skip_name_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    OAIImageEntity getWatermarkAttachment() const;
    void setWatermarkAttachment(const OAIImageEntity &watermark_attachment);
    bool is_watermark_attachment_Set() const;
    bool is_watermark_attachment_Valid() const;

    OAIObject getWatermarkValue() const;
    void setWatermarkValue(const OAIObject &watermark_value);
    bool is_watermark_value_Set() const;
    bool is_watermark_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_clickwrap_body;
    bool m_clickwrap_body_isSet;
    bool m_clickwrap_body_isValid;

    qint32 m_clickwrap_id;
    bool m_clickwrap_id_isSet;
    bool m_clickwrap_id_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_dont_separate_submissions_by_folder;
    bool m_dont_separate_submissions_by_folder_isSet;
    bool m_dont_separate_submissions_by_folder_isValid;

    QDateTime m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    OAIFormFieldSetEntity m_form_field_set;
    bool m_form_field_set_isSet;
    bool m_form_field_set_isValid;

    bool m_has_inbox;
    bool m_has_inbox_isSet;
    bool m_has_inbox_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_inbox_id;
    bool m_inbox_id_isSet;
    bool m_inbox_id_isValid;

    qint32 m_max_uses;
    bool m_max_uses_isSet;
    bool m_max_uses_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    bool m_password_protected;
    bool m_password_protected_isSet;
    bool m_password_protected_isValid;

    QString m_path_template;
    bool m_path_template_isSet;
    bool m_path_template_isValid;

    QList<QString> m_paths;
    bool m_paths_isSet;
    bool m_paths_isValid;

    QString m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    bool m_preview_only;
    bool m_preview_only_isSet;
    bool m_preview_only_isValid;

    bool m_require_registration;
    bool m_require_registration_isSet;
    bool m_require_registration_isValid;

    bool m_require_share_recipient;
    bool m_require_share_recipient_isSet;
    bool m_require_share_recipient_isValid;

    bool m_send_email_receipt_to_uploader;
    bool m_send_email_receipt_to_uploader_isSet;
    bool m_send_email_receipt_to_uploader_isValid;

    bool m_skip_company;
    bool m_skip_company_isSet;
    bool m_skip_company_isValid;

    bool m_skip_email;
    bool m_skip_email_isSet;
    bool m_skip_email_isValid;

    bool m_skip_name;
    bool m_skip_name_isSet;
    bool m_skip_name_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    OAIImageEntity m_watermark_attachment;
    bool m_watermark_attachment_isSet;
    bool m_watermark_attachment_isValid;

    OAIObject m_watermark_value;
    bool m_watermark_value_isSet;
    bool m_watermark_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBundleEntity)

#endif // OAIBundleEntity_H
