/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserRequestsApi_H
#define OAI_OAIUserRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUserRequestEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserRequestsApi : public QObject {
    Q_OBJECT

public:
    OAIUserRequestsApi(const int timeOut = 0);
    ~OAIUserRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteUserRequestsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUserRequests(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getUserRequestsId(const qint32 &id);

    /**
    * @param[in]  details QString [required]
    * @param[in]  email QString [required]
    * @param[in]  name QString [required]
    */
    virtual void postUserRequests(const QString &details, const QString &email, const QString &name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUserRequestsIdCallback(OAIHttpRequestWorker *worker);
    void getUserRequestsCallback(OAIHttpRequestWorker *worker);
    void getUserRequestsIdCallback(OAIHttpRequestWorker *worker);
    void postUserRequestsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUserRequestsIdSignal();
    void getUserRequestsSignal(QList<OAIUserRequestEntity> summary);
    void getUserRequestsIdSignal(OAIUserRequestEntity summary);
    void postUserRequestsSignal(OAIUserRequestEntity summary);


    void deleteUserRequestsIdSignalFull(OAIHttpRequestWorker *worker);
    void getUserRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserRequestEntity> summary);
    void getUserRequestsIdSignalFull(OAIHttpRequestWorker *worker, OAIUserRequestEntity summary);
    void postUserRequestsSignalFull(OAIHttpRequestWorker *worker, OAIUserRequestEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteUserRequestsIdSignalError() instead")
    void deleteUserRequestsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserRequestsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRequestsSignalError() instead")
    void getUserRequestsSignalE(QList<OAIUserRequestEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRequestsSignalError(QList<OAIUserRequestEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRequestsIdSignalError() instead")
    void getUserRequestsIdSignalE(OAIUserRequestEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRequestsIdSignalError(OAIUserRequestEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserRequestsSignalError() instead")
    void postUserRequestsSignalE(OAIUserRequestEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserRequestsSignalError(OAIUserRequestEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUserRequestsIdSignalErrorFull() instead")
    void deleteUserRequestsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserRequestsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRequestsSignalErrorFull() instead")
    void getUserRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRequestsIdSignalErrorFull() instead")
    void getUserRequestsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRequestsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserRequestsSignalErrorFull() instead")
    void postUserRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
