/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryExportEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryExportEntity::OAIHistoryExportEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryExportEntity::OAIHistoryExportEntity() {
    this->initializeModel();
}

OAIHistoryExportEntity::~OAIHistoryExportEntity() {}

void OAIHistoryExportEntity::initializeModel() {

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_history_version_isSet = false;
    m_history_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_query_action_isSet = false;
    m_query_action_isValid = false;

    m_query_destination_isSet = false;
    m_query_destination_isValid = false;

    m_query_failure_type_isSet = false;
    m_query_failure_type_isValid = false;

    m_query_file_id_isSet = false;
    m_query_file_id_isValid = false;

    m_query_folder_isSet = false;
    m_query_folder_isValid = false;

    m_query_interface_isSet = false;
    m_query_interface_isValid = false;

    m_query_ip_isSet = false;
    m_query_ip_isValid = false;

    m_query_parent_id_isSet = false;
    m_query_parent_id_isValid = false;

    m_query_path_isSet = false;
    m_query_path_isValid = false;

    m_query_src_isSet = false;
    m_query_src_isValid = false;

    m_query_target_id_isSet = false;
    m_query_target_id_isValid = false;

    m_query_target_name_isSet = false;
    m_query_target_name_isValid = false;

    m_query_target_permission_isSet = false;
    m_query_target_permission_isValid = false;

    m_query_target_permission_set_isSet = false;
    m_query_target_permission_set_isValid = false;

    m_query_target_platform_isSet = false;
    m_query_target_platform_isValid = false;

    m_query_target_user_id_isSet = false;
    m_query_target_user_id_isValid = false;

    m_query_target_username_isSet = false;
    m_query_target_username_isValid = false;

    m_query_user_id_isSet = false;
    m_query_user_id_isValid = false;

    m_query_username_isSet = false;
    m_query_username_isValid = false;

    m_results_url_isSet = false;
    m_results_url_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIHistoryExportEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryExportEntity::fromJsonObject(QJsonObject json) {

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("end_at")]);
    m_end_at_isSet = !json[QString("end_at")].isNull() && m_end_at_isValid;

    m_history_version_isValid = ::OpenAPI::fromJsonValue(m_history_version, json[QString("history_version")]);
    m_history_version_isSet = !json[QString("history_version")].isNull() && m_history_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_query_action_isValid = ::OpenAPI::fromJsonValue(m_query_action, json[QString("query_action")]);
    m_query_action_isSet = !json[QString("query_action")].isNull() && m_query_action_isValid;

    m_query_destination_isValid = ::OpenAPI::fromJsonValue(m_query_destination, json[QString("query_destination")]);
    m_query_destination_isSet = !json[QString("query_destination")].isNull() && m_query_destination_isValid;

    m_query_failure_type_isValid = ::OpenAPI::fromJsonValue(m_query_failure_type, json[QString("query_failure_type")]);
    m_query_failure_type_isSet = !json[QString("query_failure_type")].isNull() && m_query_failure_type_isValid;

    m_query_file_id_isValid = ::OpenAPI::fromJsonValue(m_query_file_id, json[QString("query_file_id")]);
    m_query_file_id_isSet = !json[QString("query_file_id")].isNull() && m_query_file_id_isValid;

    m_query_folder_isValid = ::OpenAPI::fromJsonValue(m_query_folder, json[QString("query_folder")]);
    m_query_folder_isSet = !json[QString("query_folder")].isNull() && m_query_folder_isValid;

    m_query_interface_isValid = ::OpenAPI::fromJsonValue(m_query_interface, json[QString("query_interface")]);
    m_query_interface_isSet = !json[QString("query_interface")].isNull() && m_query_interface_isValid;

    m_query_ip_isValid = ::OpenAPI::fromJsonValue(m_query_ip, json[QString("query_ip")]);
    m_query_ip_isSet = !json[QString("query_ip")].isNull() && m_query_ip_isValid;

    m_query_parent_id_isValid = ::OpenAPI::fromJsonValue(m_query_parent_id, json[QString("query_parent_id")]);
    m_query_parent_id_isSet = !json[QString("query_parent_id")].isNull() && m_query_parent_id_isValid;

    m_query_path_isValid = ::OpenAPI::fromJsonValue(m_query_path, json[QString("query_path")]);
    m_query_path_isSet = !json[QString("query_path")].isNull() && m_query_path_isValid;

    m_query_src_isValid = ::OpenAPI::fromJsonValue(m_query_src, json[QString("query_src")]);
    m_query_src_isSet = !json[QString("query_src")].isNull() && m_query_src_isValid;

    m_query_target_id_isValid = ::OpenAPI::fromJsonValue(m_query_target_id, json[QString("query_target_id")]);
    m_query_target_id_isSet = !json[QString("query_target_id")].isNull() && m_query_target_id_isValid;

    m_query_target_name_isValid = ::OpenAPI::fromJsonValue(m_query_target_name, json[QString("query_target_name")]);
    m_query_target_name_isSet = !json[QString("query_target_name")].isNull() && m_query_target_name_isValid;

    m_query_target_permission_isValid = ::OpenAPI::fromJsonValue(m_query_target_permission, json[QString("query_target_permission")]);
    m_query_target_permission_isSet = !json[QString("query_target_permission")].isNull() && m_query_target_permission_isValid;

    m_query_target_permission_set_isValid = ::OpenAPI::fromJsonValue(m_query_target_permission_set, json[QString("query_target_permission_set")]);
    m_query_target_permission_set_isSet = !json[QString("query_target_permission_set")].isNull() && m_query_target_permission_set_isValid;

    m_query_target_platform_isValid = ::OpenAPI::fromJsonValue(m_query_target_platform, json[QString("query_target_platform")]);
    m_query_target_platform_isSet = !json[QString("query_target_platform")].isNull() && m_query_target_platform_isValid;

    m_query_target_user_id_isValid = ::OpenAPI::fromJsonValue(m_query_target_user_id, json[QString("query_target_user_id")]);
    m_query_target_user_id_isSet = !json[QString("query_target_user_id")].isNull() && m_query_target_user_id_isValid;

    m_query_target_username_isValid = ::OpenAPI::fromJsonValue(m_query_target_username, json[QString("query_target_username")]);
    m_query_target_username_isSet = !json[QString("query_target_username")].isNull() && m_query_target_username_isValid;

    m_query_user_id_isValid = ::OpenAPI::fromJsonValue(m_query_user_id, json[QString("query_user_id")]);
    m_query_user_id_isSet = !json[QString("query_user_id")].isNull() && m_query_user_id_isValid;

    m_query_username_isValid = ::OpenAPI::fromJsonValue(m_query_username, json[QString("query_username")]);
    m_query_username_isSet = !json[QString("query_username")].isNull() && m_query_username_isValid;

    m_results_url_isValid = ::OpenAPI::fromJsonValue(m_results_url, json[QString("results_url")]);
    m_results_url_isSet = !json[QString("results_url")].isNull() && m_results_url_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("start_at")]);
    m_start_at_isSet = !json[QString("start_at")].isNull() && m_start_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIHistoryExportEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryExportEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_end_at_isSet) {
        obj.insert(QString("end_at"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_history_version_isSet) {
        obj.insert(QString("history_version"), ::OpenAPI::toJsonValue(m_history_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_query_action_isSet) {
        obj.insert(QString("query_action"), ::OpenAPI::toJsonValue(m_query_action));
    }
    if (m_query_destination_isSet) {
        obj.insert(QString("query_destination"), ::OpenAPI::toJsonValue(m_query_destination));
    }
    if (m_query_failure_type_isSet) {
        obj.insert(QString("query_failure_type"), ::OpenAPI::toJsonValue(m_query_failure_type));
    }
    if (m_query_file_id_isSet) {
        obj.insert(QString("query_file_id"), ::OpenAPI::toJsonValue(m_query_file_id));
    }
    if (m_query_folder_isSet) {
        obj.insert(QString("query_folder"), ::OpenAPI::toJsonValue(m_query_folder));
    }
    if (m_query_interface_isSet) {
        obj.insert(QString("query_interface"), ::OpenAPI::toJsonValue(m_query_interface));
    }
    if (m_query_ip_isSet) {
        obj.insert(QString("query_ip"), ::OpenAPI::toJsonValue(m_query_ip));
    }
    if (m_query_parent_id_isSet) {
        obj.insert(QString("query_parent_id"), ::OpenAPI::toJsonValue(m_query_parent_id));
    }
    if (m_query_path_isSet) {
        obj.insert(QString("query_path"), ::OpenAPI::toJsonValue(m_query_path));
    }
    if (m_query_src_isSet) {
        obj.insert(QString("query_src"), ::OpenAPI::toJsonValue(m_query_src));
    }
    if (m_query_target_id_isSet) {
        obj.insert(QString("query_target_id"), ::OpenAPI::toJsonValue(m_query_target_id));
    }
    if (m_query_target_name_isSet) {
        obj.insert(QString("query_target_name"), ::OpenAPI::toJsonValue(m_query_target_name));
    }
    if (m_query_target_permission_isSet) {
        obj.insert(QString("query_target_permission"), ::OpenAPI::toJsonValue(m_query_target_permission));
    }
    if (m_query_target_permission_set_isSet) {
        obj.insert(QString("query_target_permission_set"), ::OpenAPI::toJsonValue(m_query_target_permission_set));
    }
    if (m_query_target_platform_isSet) {
        obj.insert(QString("query_target_platform"), ::OpenAPI::toJsonValue(m_query_target_platform));
    }
    if (m_query_target_user_id_isSet) {
        obj.insert(QString("query_target_user_id"), ::OpenAPI::toJsonValue(m_query_target_user_id));
    }
    if (m_query_target_username_isSet) {
        obj.insert(QString("query_target_username"), ::OpenAPI::toJsonValue(m_query_target_username));
    }
    if (m_query_user_id_isSet) {
        obj.insert(QString("query_user_id"), ::OpenAPI::toJsonValue(m_query_user_id));
    }
    if (m_query_username_isSet) {
        obj.insert(QString("query_username"), ::OpenAPI::toJsonValue(m_query_username));
    }
    if (m_results_url_isSet) {
        obj.insert(QString("results_url"), ::OpenAPI::toJsonValue(m_results_url));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("start_at"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAIHistoryExportEntity::getEndAt() const {
    return m_end_at;
}
void OAIHistoryExportEntity::setEndAt(const QDateTime &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAIHistoryExportEntity::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAIHistoryExportEntity::is_end_at_Valid() const{
    return m_end_at_isValid;
}

QString OAIHistoryExportEntity::getHistoryVersion() const {
    return m_history_version;
}
void OAIHistoryExportEntity::setHistoryVersion(const QString &history_version) {
    m_history_version = history_version;
    m_history_version_isSet = true;
}

bool OAIHistoryExportEntity::is_history_version_Set() const{
    return m_history_version_isSet;
}

bool OAIHistoryExportEntity::is_history_version_Valid() const{
    return m_history_version_isValid;
}

qint32 OAIHistoryExportEntity::getId() const {
    return m_id;
}
void OAIHistoryExportEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHistoryExportEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHistoryExportEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIHistoryExportEntity::getQueryAction() const {
    return m_query_action;
}
void OAIHistoryExportEntity::setQueryAction(const QString &query_action) {
    m_query_action = query_action;
    m_query_action_isSet = true;
}

bool OAIHistoryExportEntity::is_query_action_Set() const{
    return m_query_action_isSet;
}

bool OAIHistoryExportEntity::is_query_action_Valid() const{
    return m_query_action_isValid;
}

QString OAIHistoryExportEntity::getQueryDestination() const {
    return m_query_destination;
}
void OAIHistoryExportEntity::setQueryDestination(const QString &query_destination) {
    m_query_destination = query_destination;
    m_query_destination_isSet = true;
}

bool OAIHistoryExportEntity::is_query_destination_Set() const{
    return m_query_destination_isSet;
}

bool OAIHistoryExportEntity::is_query_destination_Valid() const{
    return m_query_destination_isValid;
}

QString OAIHistoryExportEntity::getQueryFailureType() const {
    return m_query_failure_type;
}
void OAIHistoryExportEntity::setQueryFailureType(const QString &query_failure_type) {
    m_query_failure_type = query_failure_type;
    m_query_failure_type_isSet = true;
}

bool OAIHistoryExportEntity::is_query_failure_type_Set() const{
    return m_query_failure_type_isSet;
}

bool OAIHistoryExportEntity::is_query_failure_type_Valid() const{
    return m_query_failure_type_isValid;
}

QString OAIHistoryExportEntity::getQueryFileId() const {
    return m_query_file_id;
}
void OAIHistoryExportEntity::setQueryFileId(const QString &query_file_id) {
    m_query_file_id = query_file_id;
    m_query_file_id_isSet = true;
}

bool OAIHistoryExportEntity::is_query_file_id_Set() const{
    return m_query_file_id_isSet;
}

bool OAIHistoryExportEntity::is_query_file_id_Valid() const{
    return m_query_file_id_isValid;
}

QString OAIHistoryExportEntity::getQueryFolder() const {
    return m_query_folder;
}
void OAIHistoryExportEntity::setQueryFolder(const QString &query_folder) {
    m_query_folder = query_folder;
    m_query_folder_isSet = true;
}

bool OAIHistoryExportEntity::is_query_folder_Set() const{
    return m_query_folder_isSet;
}

bool OAIHistoryExportEntity::is_query_folder_Valid() const{
    return m_query_folder_isValid;
}

QString OAIHistoryExportEntity::getQueryInterface() const {
    return m_query_interface;
}
void OAIHistoryExportEntity::setQueryInterface(const QString &query_interface) {
    m_query_interface = query_interface;
    m_query_interface_isSet = true;
}

bool OAIHistoryExportEntity::is_query_interface_Set() const{
    return m_query_interface_isSet;
}

bool OAIHistoryExportEntity::is_query_interface_Valid() const{
    return m_query_interface_isValid;
}

QString OAIHistoryExportEntity::getQueryIp() const {
    return m_query_ip;
}
void OAIHistoryExportEntity::setQueryIp(const QString &query_ip) {
    m_query_ip = query_ip;
    m_query_ip_isSet = true;
}

bool OAIHistoryExportEntity::is_query_ip_Set() const{
    return m_query_ip_isSet;
}

bool OAIHistoryExportEntity::is_query_ip_Valid() const{
    return m_query_ip_isValid;
}

QString OAIHistoryExportEntity::getQueryParentId() const {
    return m_query_parent_id;
}
void OAIHistoryExportEntity::setQueryParentId(const QString &query_parent_id) {
    m_query_parent_id = query_parent_id;
    m_query_parent_id_isSet = true;
}

bool OAIHistoryExportEntity::is_query_parent_id_Set() const{
    return m_query_parent_id_isSet;
}

bool OAIHistoryExportEntity::is_query_parent_id_Valid() const{
    return m_query_parent_id_isValid;
}

QString OAIHistoryExportEntity::getQueryPath() const {
    return m_query_path;
}
void OAIHistoryExportEntity::setQueryPath(const QString &query_path) {
    m_query_path = query_path;
    m_query_path_isSet = true;
}

bool OAIHistoryExportEntity::is_query_path_Set() const{
    return m_query_path_isSet;
}

bool OAIHistoryExportEntity::is_query_path_Valid() const{
    return m_query_path_isValid;
}

QString OAIHistoryExportEntity::getQuerySrc() const {
    return m_query_src;
}
void OAIHistoryExportEntity::setQuerySrc(const QString &query_src) {
    m_query_src = query_src;
    m_query_src_isSet = true;
}

bool OAIHistoryExportEntity::is_query_src_Set() const{
    return m_query_src_isSet;
}

bool OAIHistoryExportEntity::is_query_src_Valid() const{
    return m_query_src_isValid;
}

QString OAIHistoryExportEntity::getQueryTargetId() const {
    return m_query_target_id;
}
void OAIHistoryExportEntity::setQueryTargetId(const QString &query_target_id) {
    m_query_target_id = query_target_id;
    m_query_target_id_isSet = true;
}

bool OAIHistoryExportEntity::is_query_target_id_Set() const{
    return m_query_target_id_isSet;
}

bool OAIHistoryExportEntity::is_query_target_id_Valid() const{
    return m_query_target_id_isValid;
}

QString OAIHistoryExportEntity::getQueryTargetName() const {
    return m_query_target_name;
}
void OAIHistoryExportEntity::setQueryTargetName(const QString &query_target_name) {
    m_query_target_name = query_target_name;
    m_query_target_name_isSet = true;
}

bool OAIHistoryExportEntity::is_query_target_name_Set() const{
    return m_query_target_name_isSet;
}

bool OAIHistoryExportEntity::is_query_target_name_Valid() const{
    return m_query_target_name_isValid;
}

QString OAIHistoryExportEntity::getQueryTargetPermission() const {
    return m_query_target_permission;
}
void OAIHistoryExportEntity::setQueryTargetPermission(const QString &query_target_permission) {
    m_query_target_permission = query_target_permission;
    m_query_target_permission_isSet = true;
}

bool OAIHistoryExportEntity::is_query_target_permission_Set() const{
    return m_query_target_permission_isSet;
}

bool OAIHistoryExportEntity::is_query_target_permission_Valid() const{
    return m_query_target_permission_isValid;
}

QString OAIHistoryExportEntity::getQueryTargetPermissionSet() const {
    return m_query_target_permission_set;
}
void OAIHistoryExportEntity::setQueryTargetPermissionSet(const QString &query_target_permission_set) {
    m_query_target_permission_set = query_target_permission_set;
    m_query_target_permission_set_isSet = true;
}

bool OAIHistoryExportEntity::is_query_target_permission_set_Set() const{
    return m_query_target_permission_set_isSet;
}

bool OAIHistoryExportEntity::is_query_target_permission_set_Valid() const{
    return m_query_target_permission_set_isValid;
}

QString OAIHistoryExportEntity::getQueryTargetPlatform() const {
    return m_query_target_platform;
}
void OAIHistoryExportEntity::setQueryTargetPlatform(const QString &query_target_platform) {
    m_query_target_platform = query_target_platform;
    m_query_target_platform_isSet = true;
}

bool OAIHistoryExportEntity::is_query_target_platform_Set() const{
    return m_query_target_platform_isSet;
}

bool OAIHistoryExportEntity::is_query_target_platform_Valid() const{
    return m_query_target_platform_isValid;
}

QString OAIHistoryExportEntity::getQueryTargetUserId() const {
    return m_query_target_user_id;
}
void OAIHistoryExportEntity::setQueryTargetUserId(const QString &query_target_user_id) {
    m_query_target_user_id = query_target_user_id;
    m_query_target_user_id_isSet = true;
}

bool OAIHistoryExportEntity::is_query_target_user_id_Set() const{
    return m_query_target_user_id_isSet;
}

bool OAIHistoryExportEntity::is_query_target_user_id_Valid() const{
    return m_query_target_user_id_isValid;
}

QString OAIHistoryExportEntity::getQueryTargetUsername() const {
    return m_query_target_username;
}
void OAIHistoryExportEntity::setQueryTargetUsername(const QString &query_target_username) {
    m_query_target_username = query_target_username;
    m_query_target_username_isSet = true;
}

bool OAIHistoryExportEntity::is_query_target_username_Set() const{
    return m_query_target_username_isSet;
}

bool OAIHistoryExportEntity::is_query_target_username_Valid() const{
    return m_query_target_username_isValid;
}

QString OAIHistoryExportEntity::getQueryUserId() const {
    return m_query_user_id;
}
void OAIHistoryExportEntity::setQueryUserId(const QString &query_user_id) {
    m_query_user_id = query_user_id;
    m_query_user_id_isSet = true;
}

bool OAIHistoryExportEntity::is_query_user_id_Set() const{
    return m_query_user_id_isSet;
}

bool OAIHistoryExportEntity::is_query_user_id_Valid() const{
    return m_query_user_id_isValid;
}

QString OAIHistoryExportEntity::getQueryUsername() const {
    return m_query_username;
}
void OAIHistoryExportEntity::setQueryUsername(const QString &query_username) {
    m_query_username = query_username;
    m_query_username_isSet = true;
}

bool OAIHistoryExportEntity::is_query_username_Set() const{
    return m_query_username_isSet;
}

bool OAIHistoryExportEntity::is_query_username_Valid() const{
    return m_query_username_isValid;
}

QString OAIHistoryExportEntity::getResultsUrl() const {
    return m_results_url;
}
void OAIHistoryExportEntity::setResultsUrl(const QString &results_url) {
    m_results_url = results_url;
    m_results_url_isSet = true;
}

bool OAIHistoryExportEntity::is_results_url_Set() const{
    return m_results_url_isSet;
}

bool OAIHistoryExportEntity::is_results_url_Valid() const{
    return m_results_url_isValid;
}

QDateTime OAIHistoryExportEntity::getStartAt() const {
    return m_start_at;
}
void OAIHistoryExportEntity::setStartAt(const QDateTime &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIHistoryExportEntity::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIHistoryExportEntity::is_start_at_Valid() const{
    return m_start_at_isValid;
}

QString OAIHistoryExportEntity::getStatus() const {
    return m_status;
}
void OAIHistoryExportEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIHistoryExportEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIHistoryExportEntity::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIHistoryExportEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_failure_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_src_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_target_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_target_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_target_permission_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_target_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_target_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_target_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryExportEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
