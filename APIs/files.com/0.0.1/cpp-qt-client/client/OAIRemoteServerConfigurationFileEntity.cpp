/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteServerConfigurationFileEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteServerConfigurationFileEntity::OAIRemoteServerConfigurationFileEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteServerConfigurationFileEntity::OAIRemoteServerConfigurationFileEntity() {
    this->initializeModel();
}

OAIRemoteServerConfigurationFileEntity::~OAIRemoteServerConfigurationFileEntity() {}

void OAIRemoteServerConfigurationFileEntity::initializeModel() {

    m_api_token_isSet = false;
    m_api_token_isValid = false;

    m_config_version_isSet = false;
    m_config_version_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_permission_set_isSet = false;
    m_permission_set_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_server_host_key_isSet = false;
    m_server_host_key_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subdomain_isSet = false;
    m_subdomain_isValid = false;
}

void OAIRemoteServerConfigurationFileEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteServerConfigurationFileEntity::fromJsonObject(QJsonObject json) {

    m_api_token_isValid = ::OpenAPI::fromJsonValue(m_api_token, json[QString("api_token")]);
    m_api_token_isSet = !json[QString("api_token")].isNull() && m_api_token_isValid;

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("config_version")]);
    m_config_version_isSet = !json[QString("config_version")].isNull() && m_config_version_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_permission_set_isValid = ::OpenAPI::fromJsonValue(m_permission_set, json[QString("permission_set")]);
    m_permission_set_isSet = !json[QString("permission_set")].isNull() && m_permission_set_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("private_key")]);
    m_private_key_isSet = !json[QString("private_key")].isNull() && m_private_key_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("public_key")]);
    m_public_key_isSet = !json[QString("public_key")].isNull() && m_public_key_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;

    m_server_host_key_isValid = ::OpenAPI::fromJsonValue(m_server_host_key, json[QString("server_host_key")]);
    m_server_host_key_isSet = !json[QString("server_host_key")].isNull() && m_server_host_key_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subdomain_isValid = ::OpenAPI::fromJsonValue(m_subdomain, json[QString("subdomain")]);
    m_subdomain_isSet = !json[QString("subdomain")].isNull() && m_subdomain_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteServerConfigurationFileEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_api_token_isSet) {
        obj.insert(QString("api_token"), ::OpenAPI::toJsonValue(m_api_token));
    }
    if (m_config_version_isSet) {
        obj.insert(QString("config_version"), ::OpenAPI::toJsonValue(m_config_version));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_permission_set_isSet) {
        obj.insert(QString("permission_set"), ::OpenAPI::toJsonValue(m_permission_set));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("private_key"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("public_key"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    if (m_server_host_key_isSet) {
        obj.insert(QString("server_host_key"), ::OpenAPI::toJsonValue(m_server_host_key));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subdomain_isSet) {
        obj.insert(QString("subdomain"), ::OpenAPI::toJsonValue(m_subdomain));
    }
    return obj;
}

QString OAIRemoteServerConfigurationFileEntity::getApiToken() const {
    return m_api_token;
}
void OAIRemoteServerConfigurationFileEntity::setApiToken(const QString &api_token) {
    m_api_token = api_token;
    m_api_token_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_api_token_Set() const{
    return m_api_token_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_api_token_Valid() const{
    return m_api_token_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getConfigVersion() const {
    return m_config_version;
}
void OAIRemoteServerConfigurationFileEntity::setConfigVersion(const QString &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_config_version_Valid() const{
    return m_config_version_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getHostname() const {
    return m_hostname;
}
void OAIRemoteServerConfigurationFileEntity::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_hostname_Valid() const{
    return m_hostname_isValid;
}

qint32 OAIRemoteServerConfigurationFileEntity::getId() const {
    return m_id;
}
void OAIRemoteServerConfigurationFileEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getPermissionSet() const {
    return m_permission_set;
}
void OAIRemoteServerConfigurationFileEntity::setPermissionSet(const QString &permission_set) {
    m_permission_set = permission_set;
    m_permission_set_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_permission_set_Set() const{
    return m_permission_set_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_permission_set_Valid() const{
    return m_permission_set_isValid;
}

qint32 OAIRemoteServerConfigurationFileEntity::getPort() const {
    return m_port;
}
void OAIRemoteServerConfigurationFileEntity::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getPrivateKey() const {
    return m_private_key;
}
void OAIRemoteServerConfigurationFileEntity::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getPublicKey() const {
    return m_public_key;
}
void OAIRemoteServerConfigurationFileEntity::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getRoot() const {
    return m_root;
}
void OAIRemoteServerConfigurationFileEntity::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_root_Set() const{
    return m_root_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_root_Valid() const{
    return m_root_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getServerHostKey() const {
    return m_server_host_key;
}
void OAIRemoteServerConfigurationFileEntity::setServerHostKey(const QString &server_host_key) {
    m_server_host_key = server_host_key;
    m_server_host_key_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_server_host_key_Set() const{
    return m_server_host_key_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_server_host_key_Valid() const{
    return m_server_host_key_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getStatus() const {
    return m_status;
}
void OAIRemoteServerConfigurationFileEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRemoteServerConfigurationFileEntity::getSubdomain() const {
    return m_subdomain;
}
void OAIRemoteServerConfigurationFileEntity::setSubdomain(const QString &subdomain) {
    m_subdomain = subdomain;
    m_subdomain_isSet = true;
}

bool OAIRemoteServerConfigurationFileEntity::is_subdomain_Set() const{
    return m_subdomain_isSet;
}

bool OAIRemoteServerConfigurationFileEntity::is_subdomain_Valid() const{
    return m_subdomain_isValid;
}

bool OAIRemoteServerConfigurationFileEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_host_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteServerConfigurationFileEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
