/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteServerEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteServerEntity::OAIRemoteServerEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteServerEntity::OAIRemoteServerEntity() {
    this->initializeModel();
}

OAIRemoteServerEntity::~OAIRemoteServerEntity() {}

void OAIRemoteServerEntity::initializeModel() {

    m_auth_account_name_isSet = false;
    m_auth_account_name_isValid = false;

    m_auth_setup_link_isSet = false;
    m_auth_setup_link_isValid = false;

    m_auth_status_isSet = false;
    m_auth_status_isValid = false;

    m_authentication_method_isSet = false;
    m_authentication_method_isValid = false;

    m_aws_access_key_isSet = false;
    m_aws_access_key_isValid = false;

    m_azure_blob_storage_account_isSet = false;
    m_azure_blob_storage_account_isValid = false;

    m_azure_blob_storage_container_isSet = false;
    m_azure_blob_storage_container_isValid = false;

    m_azure_blob_storage_sas_token_isSet = false;
    m_azure_blob_storage_sas_token_isValid = false;

    m_azure_files_storage_account_isSet = false;
    m_azure_files_storage_account_isValid = false;

    m_azure_files_storage_sas_token_isSet = false;
    m_azure_files_storage_sas_token_isValid = false;

    m_azure_files_storage_share_name_isSet = false;
    m_azure_files_storage_share_name_isValid = false;

    m_backblaze_b2_bucket_isSet = false;
    m_backblaze_b2_bucket_isValid = false;

    m_backblaze_b2_s3_endpoint_isSet = false;
    m_backblaze_b2_s3_endpoint_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_enable_dedicated_ips_isSet = false;
    m_enable_dedicated_ips_isValid = false;

    m_filebase_access_key_isSet = false;
    m_filebase_access_key_isValid = false;

    m_filebase_bucket_isSet = false;
    m_filebase_bucket_isValid = false;

    m_files_agent_api_token_isSet = false;
    m_files_agent_api_token_isValid = false;

    m_files_agent_permission_set_isSet = false;
    m_files_agent_permission_set_isValid = false;

    m_files_agent_root_isSet = false;
    m_files_agent_root_isValid = false;

    m_google_cloud_storage_bucket_isSet = false;
    m_google_cloud_storage_bucket_isValid = false;

    m_google_cloud_storage_project_id_isSet = false;
    m_google_cloud_storage_project_id_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_connections_isSet = false;
    m_max_connections_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_one_drive_account_type_isSet = false;
    m_one_drive_account_type_isValid = false;

    m_pin_to_site_region_isSet = false;
    m_pin_to_site_region_isValid = false;

    m_pinned_region_isSet = false;
    m_pinned_region_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_rackspace_container_isSet = false;
    m_rackspace_container_isValid = false;

    m_rackspace_region_isSet = false;
    m_rackspace_region_isValid = false;

    m_rackspace_username_isSet = false;
    m_rackspace_username_isValid = false;

    m_remote_home_path_isSet = false;
    m_remote_home_path_isValid = false;

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_compatible_access_key_isSet = false;
    m_s3_compatible_access_key_isValid = false;

    m_s3_compatible_bucket_isSet = false;
    m_s3_compatible_bucket_isValid = false;

    m_s3_compatible_endpoint_isSet = false;
    m_s3_compatible_endpoint_isValid = false;

    m_s3_compatible_region_isSet = false;
    m_s3_compatible_region_isValid = false;

    m_s3_region_isSet = false;
    m_s3_region_isValid = false;

    m_server_certificate_isSet = false;
    m_server_certificate_isValid = false;

    m_server_host_key_isSet = false;
    m_server_host_key_isValid = false;

    m_server_type_isSet = false;
    m_server_type_isValid = false;

    m_ssl_isSet = false;
    m_ssl_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_wasabi_access_key_isSet = false;
    m_wasabi_access_key_isValid = false;

    m_wasabi_bucket_isSet = false;
    m_wasabi_bucket_isValid = false;

    m_wasabi_region_isSet = false;
    m_wasabi_region_isValid = false;
}

void OAIRemoteServerEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteServerEntity::fromJsonObject(QJsonObject json) {

    m_auth_account_name_isValid = ::OpenAPI::fromJsonValue(m_auth_account_name, json[QString("auth_account_name")]);
    m_auth_account_name_isSet = !json[QString("auth_account_name")].isNull() && m_auth_account_name_isValid;

    m_auth_setup_link_isValid = ::OpenAPI::fromJsonValue(m_auth_setup_link, json[QString("auth_setup_link")]);
    m_auth_setup_link_isSet = !json[QString("auth_setup_link")].isNull() && m_auth_setup_link_isValid;

    m_auth_status_isValid = ::OpenAPI::fromJsonValue(m_auth_status, json[QString("auth_status")]);
    m_auth_status_isSet = !json[QString("auth_status")].isNull() && m_auth_status_isValid;

    m_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_authentication_method, json[QString("authentication_method")]);
    m_authentication_method_isSet = !json[QString("authentication_method")].isNull() && m_authentication_method_isValid;

    m_aws_access_key_isValid = ::OpenAPI::fromJsonValue(m_aws_access_key, json[QString("aws_access_key")]);
    m_aws_access_key_isSet = !json[QString("aws_access_key")].isNull() && m_aws_access_key_isValid;

    m_azure_blob_storage_account_isValid = ::OpenAPI::fromJsonValue(m_azure_blob_storage_account, json[QString("azure_blob_storage_account")]);
    m_azure_blob_storage_account_isSet = !json[QString("azure_blob_storage_account")].isNull() && m_azure_blob_storage_account_isValid;

    m_azure_blob_storage_container_isValid = ::OpenAPI::fromJsonValue(m_azure_blob_storage_container, json[QString("azure_blob_storage_container")]);
    m_azure_blob_storage_container_isSet = !json[QString("azure_blob_storage_container")].isNull() && m_azure_blob_storage_container_isValid;

    m_azure_blob_storage_sas_token_isValid = ::OpenAPI::fromJsonValue(m_azure_blob_storage_sas_token, json[QString("azure_blob_storage_sas_token")]);
    m_azure_blob_storage_sas_token_isSet = !json[QString("azure_blob_storage_sas_token")].isNull() && m_azure_blob_storage_sas_token_isValid;

    m_azure_files_storage_account_isValid = ::OpenAPI::fromJsonValue(m_azure_files_storage_account, json[QString("azure_files_storage_account")]);
    m_azure_files_storage_account_isSet = !json[QString("azure_files_storage_account")].isNull() && m_azure_files_storage_account_isValid;

    m_azure_files_storage_sas_token_isValid = ::OpenAPI::fromJsonValue(m_azure_files_storage_sas_token, json[QString("azure_files_storage_sas_token")]);
    m_azure_files_storage_sas_token_isSet = !json[QString("azure_files_storage_sas_token")].isNull() && m_azure_files_storage_sas_token_isValid;

    m_azure_files_storage_share_name_isValid = ::OpenAPI::fromJsonValue(m_azure_files_storage_share_name, json[QString("azure_files_storage_share_name")]);
    m_azure_files_storage_share_name_isSet = !json[QString("azure_files_storage_share_name")].isNull() && m_azure_files_storage_share_name_isValid;

    m_backblaze_b2_bucket_isValid = ::OpenAPI::fromJsonValue(m_backblaze_b2_bucket, json[QString("backblaze_b2_bucket")]);
    m_backblaze_b2_bucket_isSet = !json[QString("backblaze_b2_bucket")].isNull() && m_backblaze_b2_bucket_isValid;

    m_backblaze_b2_s3_endpoint_isValid = ::OpenAPI::fromJsonValue(m_backblaze_b2_s3_endpoint, json[QString("backblaze_b2_s3_endpoint")]);
    m_backblaze_b2_s3_endpoint_isSet = !json[QString("backblaze_b2_s3_endpoint")].isNull() && m_backblaze_b2_s3_endpoint_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_enable_dedicated_ips_isValid = ::OpenAPI::fromJsonValue(m_enable_dedicated_ips, json[QString("enable_dedicated_ips")]);
    m_enable_dedicated_ips_isSet = !json[QString("enable_dedicated_ips")].isNull() && m_enable_dedicated_ips_isValid;

    m_filebase_access_key_isValid = ::OpenAPI::fromJsonValue(m_filebase_access_key, json[QString("filebase_access_key")]);
    m_filebase_access_key_isSet = !json[QString("filebase_access_key")].isNull() && m_filebase_access_key_isValid;

    m_filebase_bucket_isValid = ::OpenAPI::fromJsonValue(m_filebase_bucket, json[QString("filebase_bucket")]);
    m_filebase_bucket_isSet = !json[QString("filebase_bucket")].isNull() && m_filebase_bucket_isValid;

    m_files_agent_api_token_isValid = ::OpenAPI::fromJsonValue(m_files_agent_api_token, json[QString("files_agent_api_token")]);
    m_files_agent_api_token_isSet = !json[QString("files_agent_api_token")].isNull() && m_files_agent_api_token_isValid;

    m_files_agent_permission_set_isValid = ::OpenAPI::fromJsonValue(m_files_agent_permission_set, json[QString("files_agent_permission_set")]);
    m_files_agent_permission_set_isSet = !json[QString("files_agent_permission_set")].isNull() && m_files_agent_permission_set_isValid;

    m_files_agent_root_isValid = ::OpenAPI::fromJsonValue(m_files_agent_root, json[QString("files_agent_root")]);
    m_files_agent_root_isSet = !json[QString("files_agent_root")].isNull() && m_files_agent_root_isValid;

    m_google_cloud_storage_bucket_isValid = ::OpenAPI::fromJsonValue(m_google_cloud_storage_bucket, json[QString("google_cloud_storage_bucket")]);
    m_google_cloud_storage_bucket_isSet = !json[QString("google_cloud_storage_bucket")].isNull() && m_google_cloud_storage_bucket_isValid;

    m_google_cloud_storage_project_id_isValid = ::OpenAPI::fromJsonValue(m_google_cloud_storage_project_id, json[QString("google_cloud_storage_project_id")]);
    m_google_cloud_storage_project_id_isSet = !json[QString("google_cloud_storage_project_id")].isNull() && m_google_cloud_storage_project_id_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_connections_isValid = ::OpenAPI::fromJsonValue(m_max_connections, json[QString("max_connections")]);
    m_max_connections_isSet = !json[QString("max_connections")].isNull() && m_max_connections_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_one_drive_account_type_isValid = ::OpenAPI::fromJsonValue(m_one_drive_account_type, json[QString("one_drive_account_type")]);
    m_one_drive_account_type_isSet = !json[QString("one_drive_account_type")].isNull() && m_one_drive_account_type_isValid;

    m_pin_to_site_region_isValid = ::OpenAPI::fromJsonValue(m_pin_to_site_region, json[QString("pin_to_site_region")]);
    m_pin_to_site_region_isSet = !json[QString("pin_to_site_region")].isNull() && m_pin_to_site_region_isValid;

    m_pinned_region_isValid = ::OpenAPI::fromJsonValue(m_pinned_region, json[QString("pinned_region")]);
    m_pinned_region_isSet = !json[QString("pinned_region")].isNull() && m_pinned_region_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_rackspace_container_isValid = ::OpenAPI::fromJsonValue(m_rackspace_container, json[QString("rackspace_container")]);
    m_rackspace_container_isSet = !json[QString("rackspace_container")].isNull() && m_rackspace_container_isValid;

    m_rackspace_region_isValid = ::OpenAPI::fromJsonValue(m_rackspace_region, json[QString("rackspace_region")]);
    m_rackspace_region_isSet = !json[QString("rackspace_region")].isNull() && m_rackspace_region_isValid;

    m_rackspace_username_isValid = ::OpenAPI::fromJsonValue(m_rackspace_username, json[QString("rackspace_username")]);
    m_rackspace_username_isSet = !json[QString("rackspace_username")].isNull() && m_rackspace_username_isValid;

    m_remote_home_path_isValid = ::OpenAPI::fromJsonValue(m_remote_home_path, json[QString("remote_home_path")]);
    m_remote_home_path_isSet = !json[QString("remote_home_path")].isNull() && m_remote_home_path_isValid;

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("s3_bucket")]);
    m_s3_bucket_isSet = !json[QString("s3_bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_compatible_access_key_isValid = ::OpenAPI::fromJsonValue(m_s3_compatible_access_key, json[QString("s3_compatible_access_key")]);
    m_s3_compatible_access_key_isSet = !json[QString("s3_compatible_access_key")].isNull() && m_s3_compatible_access_key_isValid;

    m_s3_compatible_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_compatible_bucket, json[QString("s3_compatible_bucket")]);
    m_s3_compatible_bucket_isSet = !json[QString("s3_compatible_bucket")].isNull() && m_s3_compatible_bucket_isValid;

    m_s3_compatible_endpoint_isValid = ::OpenAPI::fromJsonValue(m_s3_compatible_endpoint, json[QString("s3_compatible_endpoint")]);
    m_s3_compatible_endpoint_isSet = !json[QString("s3_compatible_endpoint")].isNull() && m_s3_compatible_endpoint_isValid;

    m_s3_compatible_region_isValid = ::OpenAPI::fromJsonValue(m_s3_compatible_region, json[QString("s3_compatible_region")]);
    m_s3_compatible_region_isSet = !json[QString("s3_compatible_region")].isNull() && m_s3_compatible_region_isValid;

    m_s3_region_isValid = ::OpenAPI::fromJsonValue(m_s3_region, json[QString("s3_region")]);
    m_s3_region_isSet = !json[QString("s3_region")].isNull() && m_s3_region_isValid;

    m_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_server_certificate, json[QString("server_certificate")]);
    m_server_certificate_isSet = !json[QString("server_certificate")].isNull() && m_server_certificate_isValid;

    m_server_host_key_isValid = ::OpenAPI::fromJsonValue(m_server_host_key, json[QString("server_host_key")]);
    m_server_host_key_isSet = !json[QString("server_host_key")].isNull() && m_server_host_key_isValid;

    m_server_type_isValid = ::OpenAPI::fromJsonValue(m_server_type, json[QString("server_type")]);
    m_server_type_isSet = !json[QString("server_type")].isNull() && m_server_type_isValid;

    m_ssl_isValid = ::OpenAPI::fromJsonValue(m_ssl, json[QString("ssl")]);
    m_ssl_isSet = !json[QString("ssl")].isNull() && m_ssl_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_wasabi_access_key_isValid = ::OpenAPI::fromJsonValue(m_wasabi_access_key, json[QString("wasabi_access_key")]);
    m_wasabi_access_key_isSet = !json[QString("wasabi_access_key")].isNull() && m_wasabi_access_key_isValid;

    m_wasabi_bucket_isValid = ::OpenAPI::fromJsonValue(m_wasabi_bucket, json[QString("wasabi_bucket")]);
    m_wasabi_bucket_isSet = !json[QString("wasabi_bucket")].isNull() && m_wasabi_bucket_isValid;

    m_wasabi_region_isValid = ::OpenAPI::fromJsonValue(m_wasabi_region, json[QString("wasabi_region")]);
    m_wasabi_region_isSet = !json[QString("wasabi_region")].isNull() && m_wasabi_region_isValid;
}

QString OAIRemoteServerEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteServerEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_account_name_isSet) {
        obj.insert(QString("auth_account_name"), ::OpenAPI::toJsonValue(m_auth_account_name));
    }
    if (m_auth_setup_link_isSet) {
        obj.insert(QString("auth_setup_link"), ::OpenAPI::toJsonValue(m_auth_setup_link));
    }
    if (m_auth_status_isSet) {
        obj.insert(QString("auth_status"), ::OpenAPI::toJsonValue(m_auth_status));
    }
    if (m_authentication_method_isSet) {
        obj.insert(QString("authentication_method"), ::OpenAPI::toJsonValue(m_authentication_method));
    }
    if (m_aws_access_key_isSet) {
        obj.insert(QString("aws_access_key"), ::OpenAPI::toJsonValue(m_aws_access_key));
    }
    if (m_azure_blob_storage_account_isSet) {
        obj.insert(QString("azure_blob_storage_account"), ::OpenAPI::toJsonValue(m_azure_blob_storage_account));
    }
    if (m_azure_blob_storage_container_isSet) {
        obj.insert(QString("azure_blob_storage_container"), ::OpenAPI::toJsonValue(m_azure_blob_storage_container));
    }
    if (m_azure_blob_storage_sas_token_isSet) {
        obj.insert(QString("azure_blob_storage_sas_token"), ::OpenAPI::toJsonValue(m_azure_blob_storage_sas_token));
    }
    if (m_azure_files_storage_account_isSet) {
        obj.insert(QString("azure_files_storage_account"), ::OpenAPI::toJsonValue(m_azure_files_storage_account));
    }
    if (m_azure_files_storage_sas_token_isSet) {
        obj.insert(QString("azure_files_storage_sas_token"), ::OpenAPI::toJsonValue(m_azure_files_storage_sas_token));
    }
    if (m_azure_files_storage_share_name_isSet) {
        obj.insert(QString("azure_files_storage_share_name"), ::OpenAPI::toJsonValue(m_azure_files_storage_share_name));
    }
    if (m_backblaze_b2_bucket_isSet) {
        obj.insert(QString("backblaze_b2_bucket"), ::OpenAPI::toJsonValue(m_backblaze_b2_bucket));
    }
    if (m_backblaze_b2_s3_endpoint_isSet) {
        obj.insert(QString("backblaze_b2_s3_endpoint"), ::OpenAPI::toJsonValue(m_backblaze_b2_s3_endpoint));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_enable_dedicated_ips_isSet) {
        obj.insert(QString("enable_dedicated_ips"), ::OpenAPI::toJsonValue(m_enable_dedicated_ips));
    }
    if (m_filebase_access_key_isSet) {
        obj.insert(QString("filebase_access_key"), ::OpenAPI::toJsonValue(m_filebase_access_key));
    }
    if (m_filebase_bucket_isSet) {
        obj.insert(QString("filebase_bucket"), ::OpenAPI::toJsonValue(m_filebase_bucket));
    }
    if (m_files_agent_api_token_isSet) {
        obj.insert(QString("files_agent_api_token"), ::OpenAPI::toJsonValue(m_files_agent_api_token));
    }
    if (m_files_agent_permission_set_isSet) {
        obj.insert(QString("files_agent_permission_set"), ::OpenAPI::toJsonValue(m_files_agent_permission_set));
    }
    if (m_files_agent_root_isSet) {
        obj.insert(QString("files_agent_root"), ::OpenAPI::toJsonValue(m_files_agent_root));
    }
    if (m_google_cloud_storage_bucket_isSet) {
        obj.insert(QString("google_cloud_storage_bucket"), ::OpenAPI::toJsonValue(m_google_cloud_storage_bucket));
    }
    if (m_google_cloud_storage_project_id_isSet) {
        obj.insert(QString("google_cloud_storage_project_id"), ::OpenAPI::toJsonValue(m_google_cloud_storage_project_id));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_connections_isSet) {
        obj.insert(QString("max_connections"), ::OpenAPI::toJsonValue(m_max_connections));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_one_drive_account_type_isSet) {
        obj.insert(QString("one_drive_account_type"), ::OpenAPI::toJsonValue(m_one_drive_account_type));
    }
    if (m_pin_to_site_region_isSet) {
        obj.insert(QString("pin_to_site_region"), ::OpenAPI::toJsonValue(m_pin_to_site_region));
    }
    if (m_pinned_region_isSet) {
        obj.insert(QString("pinned_region"), ::OpenAPI::toJsonValue(m_pinned_region));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_rackspace_container_isSet) {
        obj.insert(QString("rackspace_container"), ::OpenAPI::toJsonValue(m_rackspace_container));
    }
    if (m_rackspace_region_isSet) {
        obj.insert(QString("rackspace_region"), ::OpenAPI::toJsonValue(m_rackspace_region));
    }
    if (m_rackspace_username_isSet) {
        obj.insert(QString("rackspace_username"), ::OpenAPI::toJsonValue(m_rackspace_username));
    }
    if (m_remote_home_path_isSet) {
        obj.insert(QString("remote_home_path"), ::OpenAPI::toJsonValue(m_remote_home_path));
    }
    if (m_s3_bucket_isSet) {
        obj.insert(QString("s3_bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_compatible_access_key_isSet) {
        obj.insert(QString("s3_compatible_access_key"), ::OpenAPI::toJsonValue(m_s3_compatible_access_key));
    }
    if (m_s3_compatible_bucket_isSet) {
        obj.insert(QString("s3_compatible_bucket"), ::OpenAPI::toJsonValue(m_s3_compatible_bucket));
    }
    if (m_s3_compatible_endpoint_isSet) {
        obj.insert(QString("s3_compatible_endpoint"), ::OpenAPI::toJsonValue(m_s3_compatible_endpoint));
    }
    if (m_s3_compatible_region_isSet) {
        obj.insert(QString("s3_compatible_region"), ::OpenAPI::toJsonValue(m_s3_compatible_region));
    }
    if (m_s3_region_isSet) {
        obj.insert(QString("s3_region"), ::OpenAPI::toJsonValue(m_s3_region));
    }
    if (m_server_certificate_isSet) {
        obj.insert(QString("server_certificate"), ::OpenAPI::toJsonValue(m_server_certificate));
    }
    if (m_server_host_key_isSet) {
        obj.insert(QString("server_host_key"), ::OpenAPI::toJsonValue(m_server_host_key));
    }
    if (m_server_type_isSet) {
        obj.insert(QString("server_type"), ::OpenAPI::toJsonValue(m_server_type));
    }
    if (m_ssl_isSet) {
        obj.insert(QString("ssl"), ::OpenAPI::toJsonValue(m_ssl));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_wasabi_access_key_isSet) {
        obj.insert(QString("wasabi_access_key"), ::OpenAPI::toJsonValue(m_wasabi_access_key));
    }
    if (m_wasabi_bucket_isSet) {
        obj.insert(QString("wasabi_bucket"), ::OpenAPI::toJsonValue(m_wasabi_bucket));
    }
    if (m_wasabi_region_isSet) {
        obj.insert(QString("wasabi_region"), ::OpenAPI::toJsonValue(m_wasabi_region));
    }
    return obj;
}

QString OAIRemoteServerEntity::getAuthAccountName() const {
    return m_auth_account_name;
}
void OAIRemoteServerEntity::setAuthAccountName(const QString &auth_account_name) {
    m_auth_account_name = auth_account_name;
    m_auth_account_name_isSet = true;
}

bool OAIRemoteServerEntity::is_auth_account_name_Set() const{
    return m_auth_account_name_isSet;
}

bool OAIRemoteServerEntity::is_auth_account_name_Valid() const{
    return m_auth_account_name_isValid;
}

QString OAIRemoteServerEntity::getAuthSetupLink() const {
    return m_auth_setup_link;
}
void OAIRemoteServerEntity::setAuthSetupLink(const QString &auth_setup_link) {
    m_auth_setup_link = auth_setup_link;
    m_auth_setup_link_isSet = true;
}

bool OAIRemoteServerEntity::is_auth_setup_link_Set() const{
    return m_auth_setup_link_isSet;
}

bool OAIRemoteServerEntity::is_auth_setup_link_Valid() const{
    return m_auth_setup_link_isValid;
}

QString OAIRemoteServerEntity::getAuthStatus() const {
    return m_auth_status;
}
void OAIRemoteServerEntity::setAuthStatus(const QString &auth_status) {
    m_auth_status = auth_status;
    m_auth_status_isSet = true;
}

bool OAIRemoteServerEntity::is_auth_status_Set() const{
    return m_auth_status_isSet;
}

bool OAIRemoteServerEntity::is_auth_status_Valid() const{
    return m_auth_status_isValid;
}

QString OAIRemoteServerEntity::getAuthenticationMethod() const {
    return m_authentication_method;
}
void OAIRemoteServerEntity::setAuthenticationMethod(const QString &authentication_method) {
    m_authentication_method = authentication_method;
    m_authentication_method_isSet = true;
}

bool OAIRemoteServerEntity::is_authentication_method_Set() const{
    return m_authentication_method_isSet;
}

bool OAIRemoteServerEntity::is_authentication_method_Valid() const{
    return m_authentication_method_isValid;
}

QString OAIRemoteServerEntity::getAwsAccessKey() const {
    return m_aws_access_key;
}
void OAIRemoteServerEntity::setAwsAccessKey(const QString &aws_access_key) {
    m_aws_access_key = aws_access_key;
    m_aws_access_key_isSet = true;
}

bool OAIRemoteServerEntity::is_aws_access_key_Set() const{
    return m_aws_access_key_isSet;
}

bool OAIRemoteServerEntity::is_aws_access_key_Valid() const{
    return m_aws_access_key_isValid;
}

QString OAIRemoteServerEntity::getAzureBlobStorageAccount() const {
    return m_azure_blob_storage_account;
}
void OAIRemoteServerEntity::setAzureBlobStorageAccount(const QString &azure_blob_storage_account) {
    m_azure_blob_storage_account = azure_blob_storage_account;
    m_azure_blob_storage_account_isSet = true;
}

bool OAIRemoteServerEntity::is_azure_blob_storage_account_Set() const{
    return m_azure_blob_storage_account_isSet;
}

bool OAIRemoteServerEntity::is_azure_blob_storage_account_Valid() const{
    return m_azure_blob_storage_account_isValid;
}

QString OAIRemoteServerEntity::getAzureBlobStorageContainer() const {
    return m_azure_blob_storage_container;
}
void OAIRemoteServerEntity::setAzureBlobStorageContainer(const QString &azure_blob_storage_container) {
    m_azure_blob_storage_container = azure_blob_storage_container;
    m_azure_blob_storage_container_isSet = true;
}

bool OAIRemoteServerEntity::is_azure_blob_storage_container_Set() const{
    return m_azure_blob_storage_container_isSet;
}

bool OAIRemoteServerEntity::is_azure_blob_storage_container_Valid() const{
    return m_azure_blob_storage_container_isValid;
}

QString OAIRemoteServerEntity::getAzureBlobStorageSasToken() const {
    return m_azure_blob_storage_sas_token;
}
void OAIRemoteServerEntity::setAzureBlobStorageSasToken(const QString &azure_blob_storage_sas_token) {
    m_azure_blob_storage_sas_token = azure_blob_storage_sas_token;
    m_azure_blob_storage_sas_token_isSet = true;
}

bool OAIRemoteServerEntity::is_azure_blob_storage_sas_token_Set() const{
    return m_azure_blob_storage_sas_token_isSet;
}

bool OAIRemoteServerEntity::is_azure_blob_storage_sas_token_Valid() const{
    return m_azure_blob_storage_sas_token_isValid;
}

QString OAIRemoteServerEntity::getAzureFilesStorageAccount() const {
    return m_azure_files_storage_account;
}
void OAIRemoteServerEntity::setAzureFilesStorageAccount(const QString &azure_files_storage_account) {
    m_azure_files_storage_account = azure_files_storage_account;
    m_azure_files_storage_account_isSet = true;
}

bool OAIRemoteServerEntity::is_azure_files_storage_account_Set() const{
    return m_azure_files_storage_account_isSet;
}

bool OAIRemoteServerEntity::is_azure_files_storage_account_Valid() const{
    return m_azure_files_storage_account_isValid;
}

QString OAIRemoteServerEntity::getAzureFilesStorageSasToken() const {
    return m_azure_files_storage_sas_token;
}
void OAIRemoteServerEntity::setAzureFilesStorageSasToken(const QString &azure_files_storage_sas_token) {
    m_azure_files_storage_sas_token = azure_files_storage_sas_token;
    m_azure_files_storage_sas_token_isSet = true;
}

bool OAIRemoteServerEntity::is_azure_files_storage_sas_token_Set() const{
    return m_azure_files_storage_sas_token_isSet;
}

bool OAIRemoteServerEntity::is_azure_files_storage_sas_token_Valid() const{
    return m_azure_files_storage_sas_token_isValid;
}

QString OAIRemoteServerEntity::getAzureFilesStorageShareName() const {
    return m_azure_files_storage_share_name;
}
void OAIRemoteServerEntity::setAzureFilesStorageShareName(const QString &azure_files_storage_share_name) {
    m_azure_files_storage_share_name = azure_files_storage_share_name;
    m_azure_files_storage_share_name_isSet = true;
}

bool OAIRemoteServerEntity::is_azure_files_storage_share_name_Set() const{
    return m_azure_files_storage_share_name_isSet;
}

bool OAIRemoteServerEntity::is_azure_files_storage_share_name_Valid() const{
    return m_azure_files_storage_share_name_isValid;
}

QString OAIRemoteServerEntity::getBackblazeB2Bucket() const {
    return m_backblaze_b2_bucket;
}
void OAIRemoteServerEntity::setBackblazeB2Bucket(const QString &backblaze_b2_bucket) {
    m_backblaze_b2_bucket = backblaze_b2_bucket;
    m_backblaze_b2_bucket_isSet = true;
}

bool OAIRemoteServerEntity::is_backblaze_b2_bucket_Set() const{
    return m_backblaze_b2_bucket_isSet;
}

bool OAIRemoteServerEntity::is_backblaze_b2_bucket_Valid() const{
    return m_backblaze_b2_bucket_isValid;
}

QString OAIRemoteServerEntity::getBackblazeB2S3Endpoint() const {
    return m_backblaze_b2_s3_endpoint;
}
void OAIRemoteServerEntity::setBackblazeB2S3Endpoint(const QString &backblaze_b2_s3_endpoint) {
    m_backblaze_b2_s3_endpoint = backblaze_b2_s3_endpoint;
    m_backblaze_b2_s3_endpoint_isSet = true;
}

bool OAIRemoteServerEntity::is_backblaze_b2_s3_endpoint_Set() const{
    return m_backblaze_b2_s3_endpoint_isSet;
}

bool OAIRemoteServerEntity::is_backblaze_b2_s3_endpoint_Valid() const{
    return m_backblaze_b2_s3_endpoint_isValid;
}

bool OAIRemoteServerEntity::isDisabled() const {
    return m_disabled;
}
void OAIRemoteServerEntity::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIRemoteServerEntity::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIRemoteServerEntity::is_disabled_Valid() const{
    return m_disabled_isValid;
}

bool OAIRemoteServerEntity::isEnableDedicatedIps() const {
    return m_enable_dedicated_ips;
}
void OAIRemoteServerEntity::setEnableDedicatedIps(const bool &enable_dedicated_ips) {
    m_enable_dedicated_ips = enable_dedicated_ips;
    m_enable_dedicated_ips_isSet = true;
}

bool OAIRemoteServerEntity::is_enable_dedicated_ips_Set() const{
    return m_enable_dedicated_ips_isSet;
}

bool OAIRemoteServerEntity::is_enable_dedicated_ips_Valid() const{
    return m_enable_dedicated_ips_isValid;
}

QString OAIRemoteServerEntity::getFilebaseAccessKey() const {
    return m_filebase_access_key;
}
void OAIRemoteServerEntity::setFilebaseAccessKey(const QString &filebase_access_key) {
    m_filebase_access_key = filebase_access_key;
    m_filebase_access_key_isSet = true;
}

bool OAIRemoteServerEntity::is_filebase_access_key_Set() const{
    return m_filebase_access_key_isSet;
}

bool OAIRemoteServerEntity::is_filebase_access_key_Valid() const{
    return m_filebase_access_key_isValid;
}

QString OAIRemoteServerEntity::getFilebaseBucket() const {
    return m_filebase_bucket;
}
void OAIRemoteServerEntity::setFilebaseBucket(const QString &filebase_bucket) {
    m_filebase_bucket = filebase_bucket;
    m_filebase_bucket_isSet = true;
}

bool OAIRemoteServerEntity::is_filebase_bucket_Set() const{
    return m_filebase_bucket_isSet;
}

bool OAIRemoteServerEntity::is_filebase_bucket_Valid() const{
    return m_filebase_bucket_isValid;
}

QString OAIRemoteServerEntity::getFilesAgentApiToken() const {
    return m_files_agent_api_token;
}
void OAIRemoteServerEntity::setFilesAgentApiToken(const QString &files_agent_api_token) {
    m_files_agent_api_token = files_agent_api_token;
    m_files_agent_api_token_isSet = true;
}

bool OAIRemoteServerEntity::is_files_agent_api_token_Set() const{
    return m_files_agent_api_token_isSet;
}

bool OAIRemoteServerEntity::is_files_agent_api_token_Valid() const{
    return m_files_agent_api_token_isValid;
}

QString OAIRemoteServerEntity::getFilesAgentPermissionSet() const {
    return m_files_agent_permission_set;
}
void OAIRemoteServerEntity::setFilesAgentPermissionSet(const QString &files_agent_permission_set) {
    m_files_agent_permission_set = files_agent_permission_set;
    m_files_agent_permission_set_isSet = true;
}

bool OAIRemoteServerEntity::is_files_agent_permission_set_Set() const{
    return m_files_agent_permission_set_isSet;
}

bool OAIRemoteServerEntity::is_files_agent_permission_set_Valid() const{
    return m_files_agent_permission_set_isValid;
}

QString OAIRemoteServerEntity::getFilesAgentRoot() const {
    return m_files_agent_root;
}
void OAIRemoteServerEntity::setFilesAgentRoot(const QString &files_agent_root) {
    m_files_agent_root = files_agent_root;
    m_files_agent_root_isSet = true;
}

bool OAIRemoteServerEntity::is_files_agent_root_Set() const{
    return m_files_agent_root_isSet;
}

bool OAIRemoteServerEntity::is_files_agent_root_Valid() const{
    return m_files_agent_root_isValid;
}

QString OAIRemoteServerEntity::getGoogleCloudStorageBucket() const {
    return m_google_cloud_storage_bucket;
}
void OAIRemoteServerEntity::setGoogleCloudStorageBucket(const QString &google_cloud_storage_bucket) {
    m_google_cloud_storage_bucket = google_cloud_storage_bucket;
    m_google_cloud_storage_bucket_isSet = true;
}

bool OAIRemoteServerEntity::is_google_cloud_storage_bucket_Set() const{
    return m_google_cloud_storage_bucket_isSet;
}

bool OAIRemoteServerEntity::is_google_cloud_storage_bucket_Valid() const{
    return m_google_cloud_storage_bucket_isValid;
}

QString OAIRemoteServerEntity::getGoogleCloudStorageProjectId() const {
    return m_google_cloud_storage_project_id;
}
void OAIRemoteServerEntity::setGoogleCloudStorageProjectId(const QString &google_cloud_storage_project_id) {
    m_google_cloud_storage_project_id = google_cloud_storage_project_id;
    m_google_cloud_storage_project_id_isSet = true;
}

bool OAIRemoteServerEntity::is_google_cloud_storage_project_id_Set() const{
    return m_google_cloud_storage_project_id_isSet;
}

bool OAIRemoteServerEntity::is_google_cloud_storage_project_id_Valid() const{
    return m_google_cloud_storage_project_id_isValid;
}

QString OAIRemoteServerEntity::getHostname() const {
    return m_hostname;
}
void OAIRemoteServerEntity::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIRemoteServerEntity::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIRemoteServerEntity::is_hostname_Valid() const{
    return m_hostname_isValid;
}

qint32 OAIRemoteServerEntity::getId() const {
    return m_id;
}
void OAIRemoteServerEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRemoteServerEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRemoteServerEntity::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIRemoteServerEntity::getMaxConnections() const {
    return m_max_connections;
}
void OAIRemoteServerEntity::setMaxConnections(const qint32 &max_connections) {
    m_max_connections = max_connections;
    m_max_connections_isSet = true;
}

bool OAIRemoteServerEntity::is_max_connections_Set() const{
    return m_max_connections_isSet;
}

bool OAIRemoteServerEntity::is_max_connections_Valid() const{
    return m_max_connections_isValid;
}

QString OAIRemoteServerEntity::getName() const {
    return m_name;
}
void OAIRemoteServerEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRemoteServerEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRemoteServerEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRemoteServerEntity::getOneDriveAccountType() const {
    return m_one_drive_account_type;
}
void OAIRemoteServerEntity::setOneDriveAccountType(const QString &one_drive_account_type) {
    m_one_drive_account_type = one_drive_account_type;
    m_one_drive_account_type_isSet = true;
}

bool OAIRemoteServerEntity::is_one_drive_account_type_Set() const{
    return m_one_drive_account_type_isSet;
}

bool OAIRemoteServerEntity::is_one_drive_account_type_Valid() const{
    return m_one_drive_account_type_isValid;
}

bool OAIRemoteServerEntity::isPinToSiteRegion() const {
    return m_pin_to_site_region;
}
void OAIRemoteServerEntity::setPinToSiteRegion(const bool &pin_to_site_region) {
    m_pin_to_site_region = pin_to_site_region;
    m_pin_to_site_region_isSet = true;
}

bool OAIRemoteServerEntity::is_pin_to_site_region_Set() const{
    return m_pin_to_site_region_isSet;
}

bool OAIRemoteServerEntity::is_pin_to_site_region_Valid() const{
    return m_pin_to_site_region_isValid;
}

QString OAIRemoteServerEntity::getPinnedRegion() const {
    return m_pinned_region;
}
void OAIRemoteServerEntity::setPinnedRegion(const QString &pinned_region) {
    m_pinned_region = pinned_region;
    m_pinned_region_isSet = true;
}

bool OAIRemoteServerEntity::is_pinned_region_Set() const{
    return m_pinned_region_isSet;
}

bool OAIRemoteServerEntity::is_pinned_region_Valid() const{
    return m_pinned_region_isValid;
}

qint32 OAIRemoteServerEntity::getPort() const {
    return m_port;
}
void OAIRemoteServerEntity::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRemoteServerEntity::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRemoteServerEntity::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRemoteServerEntity::getRackspaceContainer() const {
    return m_rackspace_container;
}
void OAIRemoteServerEntity::setRackspaceContainer(const QString &rackspace_container) {
    m_rackspace_container = rackspace_container;
    m_rackspace_container_isSet = true;
}

bool OAIRemoteServerEntity::is_rackspace_container_Set() const{
    return m_rackspace_container_isSet;
}

bool OAIRemoteServerEntity::is_rackspace_container_Valid() const{
    return m_rackspace_container_isValid;
}

QString OAIRemoteServerEntity::getRackspaceRegion() const {
    return m_rackspace_region;
}
void OAIRemoteServerEntity::setRackspaceRegion(const QString &rackspace_region) {
    m_rackspace_region = rackspace_region;
    m_rackspace_region_isSet = true;
}

bool OAIRemoteServerEntity::is_rackspace_region_Set() const{
    return m_rackspace_region_isSet;
}

bool OAIRemoteServerEntity::is_rackspace_region_Valid() const{
    return m_rackspace_region_isValid;
}

QString OAIRemoteServerEntity::getRackspaceUsername() const {
    return m_rackspace_username;
}
void OAIRemoteServerEntity::setRackspaceUsername(const QString &rackspace_username) {
    m_rackspace_username = rackspace_username;
    m_rackspace_username_isSet = true;
}

bool OAIRemoteServerEntity::is_rackspace_username_Set() const{
    return m_rackspace_username_isSet;
}

bool OAIRemoteServerEntity::is_rackspace_username_Valid() const{
    return m_rackspace_username_isValid;
}

QString OAIRemoteServerEntity::getRemoteHomePath() const {
    return m_remote_home_path;
}
void OAIRemoteServerEntity::setRemoteHomePath(const QString &remote_home_path) {
    m_remote_home_path = remote_home_path;
    m_remote_home_path_isSet = true;
}

bool OAIRemoteServerEntity::is_remote_home_path_Set() const{
    return m_remote_home_path_isSet;
}

bool OAIRemoteServerEntity::is_remote_home_path_Valid() const{
    return m_remote_home_path_isValid;
}

QString OAIRemoteServerEntity::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIRemoteServerEntity::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIRemoteServerEntity::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIRemoteServerEntity::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QString OAIRemoteServerEntity::getS3CompatibleAccessKey() const {
    return m_s3_compatible_access_key;
}
void OAIRemoteServerEntity::setS3CompatibleAccessKey(const QString &s3_compatible_access_key) {
    m_s3_compatible_access_key = s3_compatible_access_key;
    m_s3_compatible_access_key_isSet = true;
}

bool OAIRemoteServerEntity::is_s3_compatible_access_key_Set() const{
    return m_s3_compatible_access_key_isSet;
}

bool OAIRemoteServerEntity::is_s3_compatible_access_key_Valid() const{
    return m_s3_compatible_access_key_isValid;
}

QString OAIRemoteServerEntity::getS3CompatibleBucket() const {
    return m_s3_compatible_bucket;
}
void OAIRemoteServerEntity::setS3CompatibleBucket(const QString &s3_compatible_bucket) {
    m_s3_compatible_bucket = s3_compatible_bucket;
    m_s3_compatible_bucket_isSet = true;
}

bool OAIRemoteServerEntity::is_s3_compatible_bucket_Set() const{
    return m_s3_compatible_bucket_isSet;
}

bool OAIRemoteServerEntity::is_s3_compatible_bucket_Valid() const{
    return m_s3_compatible_bucket_isValid;
}

QString OAIRemoteServerEntity::getS3CompatibleEndpoint() const {
    return m_s3_compatible_endpoint;
}
void OAIRemoteServerEntity::setS3CompatibleEndpoint(const QString &s3_compatible_endpoint) {
    m_s3_compatible_endpoint = s3_compatible_endpoint;
    m_s3_compatible_endpoint_isSet = true;
}

bool OAIRemoteServerEntity::is_s3_compatible_endpoint_Set() const{
    return m_s3_compatible_endpoint_isSet;
}

bool OAIRemoteServerEntity::is_s3_compatible_endpoint_Valid() const{
    return m_s3_compatible_endpoint_isValid;
}

QString OAIRemoteServerEntity::getS3CompatibleRegion() const {
    return m_s3_compatible_region;
}
void OAIRemoteServerEntity::setS3CompatibleRegion(const QString &s3_compatible_region) {
    m_s3_compatible_region = s3_compatible_region;
    m_s3_compatible_region_isSet = true;
}

bool OAIRemoteServerEntity::is_s3_compatible_region_Set() const{
    return m_s3_compatible_region_isSet;
}

bool OAIRemoteServerEntity::is_s3_compatible_region_Valid() const{
    return m_s3_compatible_region_isValid;
}

QString OAIRemoteServerEntity::getS3Region() const {
    return m_s3_region;
}
void OAIRemoteServerEntity::setS3Region(const QString &s3_region) {
    m_s3_region = s3_region;
    m_s3_region_isSet = true;
}

bool OAIRemoteServerEntity::is_s3_region_Set() const{
    return m_s3_region_isSet;
}

bool OAIRemoteServerEntity::is_s3_region_Valid() const{
    return m_s3_region_isValid;
}

QString OAIRemoteServerEntity::getServerCertificate() const {
    return m_server_certificate;
}
void OAIRemoteServerEntity::setServerCertificate(const QString &server_certificate) {
    m_server_certificate = server_certificate;
    m_server_certificate_isSet = true;
}

bool OAIRemoteServerEntity::is_server_certificate_Set() const{
    return m_server_certificate_isSet;
}

bool OAIRemoteServerEntity::is_server_certificate_Valid() const{
    return m_server_certificate_isValid;
}

QString OAIRemoteServerEntity::getServerHostKey() const {
    return m_server_host_key;
}
void OAIRemoteServerEntity::setServerHostKey(const QString &server_host_key) {
    m_server_host_key = server_host_key;
    m_server_host_key_isSet = true;
}

bool OAIRemoteServerEntity::is_server_host_key_Set() const{
    return m_server_host_key_isSet;
}

bool OAIRemoteServerEntity::is_server_host_key_Valid() const{
    return m_server_host_key_isValid;
}

QString OAIRemoteServerEntity::getServerType() const {
    return m_server_type;
}
void OAIRemoteServerEntity::setServerType(const QString &server_type) {
    m_server_type = server_type;
    m_server_type_isSet = true;
}

bool OAIRemoteServerEntity::is_server_type_Set() const{
    return m_server_type_isSet;
}

bool OAIRemoteServerEntity::is_server_type_Valid() const{
    return m_server_type_isValid;
}

QString OAIRemoteServerEntity::getSsl() const {
    return m_ssl;
}
void OAIRemoteServerEntity::setSsl(const QString &ssl) {
    m_ssl = ssl;
    m_ssl_isSet = true;
}

bool OAIRemoteServerEntity::is_ssl_Set() const{
    return m_ssl_isSet;
}

bool OAIRemoteServerEntity::is_ssl_Valid() const{
    return m_ssl_isValid;
}

QString OAIRemoteServerEntity::getUsername() const {
    return m_username;
}
void OAIRemoteServerEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIRemoteServerEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIRemoteServerEntity::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIRemoteServerEntity::getWasabiAccessKey() const {
    return m_wasabi_access_key;
}
void OAIRemoteServerEntity::setWasabiAccessKey(const QString &wasabi_access_key) {
    m_wasabi_access_key = wasabi_access_key;
    m_wasabi_access_key_isSet = true;
}

bool OAIRemoteServerEntity::is_wasabi_access_key_Set() const{
    return m_wasabi_access_key_isSet;
}

bool OAIRemoteServerEntity::is_wasabi_access_key_Valid() const{
    return m_wasabi_access_key_isValid;
}

QString OAIRemoteServerEntity::getWasabiBucket() const {
    return m_wasabi_bucket;
}
void OAIRemoteServerEntity::setWasabiBucket(const QString &wasabi_bucket) {
    m_wasabi_bucket = wasabi_bucket;
    m_wasabi_bucket_isSet = true;
}

bool OAIRemoteServerEntity::is_wasabi_bucket_Set() const{
    return m_wasabi_bucket_isSet;
}

bool OAIRemoteServerEntity::is_wasabi_bucket_Valid() const{
    return m_wasabi_bucket_isValid;
}

QString OAIRemoteServerEntity::getWasabiRegion() const {
    return m_wasabi_region;
}
void OAIRemoteServerEntity::setWasabiRegion(const QString &wasabi_region) {
    m_wasabi_region = wasabi_region;
    m_wasabi_region_isSet = true;
}

bool OAIRemoteServerEntity::is_wasabi_region_Set() const{
    return m_wasabi_region_isSet;
}

bool OAIRemoteServerEntity::is_wasabi_region_Valid() const{
    return m_wasabi_region_isValid;
}

bool OAIRemoteServerEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_setup_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_blob_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_blob_storage_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_blob_storage_sas_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_files_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_files_storage_sas_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_files_storage_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backblaze_b2_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backblaze_b2_s3_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_dedicated_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filebase_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filebase_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_agent_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_agent_permission_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_agent_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_cloud_storage_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_cloud_storage_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_connections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_drive_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_to_site_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rackspace_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rackspace_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rackspace_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_home_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_compatible_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_compatible_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_compatible_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_compatible_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_host_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wasabi_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wasabi_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wasabi_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteServerEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
