/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHistoryExportResultEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHistoryExportResultEntity::OAIHistoryExportResultEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHistoryExportResultEntity::OAIHistoryExportResultEntity() {
    this->initializeModel();
}

OAIHistoryExportResultEntity::~OAIHistoryExportResultEntity() {}

void OAIHistoryExportResultEntity::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_at_iso8601_isSet = false;
    m_created_at_iso8601_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_failure_type_isSet = false;
    m_failure_type_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_src_isSet = false;
    m_src_isValid = false;

    m_target_expires_at_isSet = false;
    m_target_expires_at_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_name_isSet = false;
    m_target_name_isValid = false;

    m_target_permission_isSet = false;
    m_target_permission_isValid = false;

    m_target_permission_set_isSet = false;
    m_target_permission_set_isValid = false;

    m_target_platform_isSet = false;
    m_target_platform_isValid = false;

    m_target_recursive_isSet = false;
    m_target_recursive_isValid = false;

    m_target_user_id_isSet = false;
    m_target_user_id_isValid = false;

    m_target_username_isSet = false;
    m_target_username_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIHistoryExportResultEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHistoryExportResultEntity::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_at_iso8601_isValid = ::OpenAPI::fromJsonValue(m_created_at_iso8601, json[QString("created_at_iso8601")]);
    m_created_at_iso8601_isSet = !json[QString("created_at_iso8601")].isNull() && m_created_at_iso8601_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_failure_type_isValid = ::OpenAPI::fromJsonValue(m_failure_type, json[QString("failure_type")]);
    m_failure_type_isSet = !json[QString("failure_type")].isNull() && m_failure_type_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_src_isValid = ::OpenAPI::fromJsonValue(m_src, json[QString("src")]);
    m_src_isSet = !json[QString("src")].isNull() && m_src_isValid;

    m_target_expires_at_isValid = ::OpenAPI::fromJsonValue(m_target_expires_at, json[QString("target_expires_at")]);
    m_target_expires_at_isSet = !json[QString("target_expires_at")].isNull() && m_target_expires_at_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("target_id")]);
    m_target_id_isSet = !json[QString("target_id")].isNull() && m_target_id_isValid;

    m_target_name_isValid = ::OpenAPI::fromJsonValue(m_target_name, json[QString("target_name")]);
    m_target_name_isSet = !json[QString("target_name")].isNull() && m_target_name_isValid;

    m_target_permission_isValid = ::OpenAPI::fromJsonValue(m_target_permission, json[QString("target_permission")]);
    m_target_permission_isSet = !json[QString("target_permission")].isNull() && m_target_permission_isValid;

    m_target_permission_set_isValid = ::OpenAPI::fromJsonValue(m_target_permission_set, json[QString("target_permission_set")]);
    m_target_permission_set_isSet = !json[QString("target_permission_set")].isNull() && m_target_permission_set_isValid;

    m_target_platform_isValid = ::OpenAPI::fromJsonValue(m_target_platform, json[QString("target_platform")]);
    m_target_platform_isSet = !json[QString("target_platform")].isNull() && m_target_platform_isValid;

    m_target_recursive_isValid = ::OpenAPI::fromJsonValue(m_target_recursive, json[QString("target_recursive")]);
    m_target_recursive_isSet = !json[QString("target_recursive")].isNull() && m_target_recursive_isValid;

    m_target_user_id_isValid = ::OpenAPI::fromJsonValue(m_target_user_id, json[QString("target_user_id")]);
    m_target_user_id_isSet = !json[QString("target_user_id")].isNull() && m_target_user_id_isValid;

    m_target_username_isValid = ::OpenAPI::fromJsonValue(m_target_username, json[QString("target_username")]);
    m_target_username_isSet = !json[QString("target_username")].isNull() && m_target_username_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIHistoryExportResultEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHistoryExportResultEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_at_iso8601_isSet) {
        obj.insert(QString("created_at_iso8601"), ::OpenAPI::toJsonValue(m_created_at_iso8601));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_failure_type_isSet) {
        obj.insert(QString("failure_type"), ::OpenAPI::toJsonValue(m_failure_type));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_folder_isSet) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_src_isSet) {
        obj.insert(QString("src"), ::OpenAPI::toJsonValue(m_src));
    }
    if (m_target_expires_at_isSet) {
        obj.insert(QString("target_expires_at"), ::OpenAPI::toJsonValue(m_target_expires_at));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("target_id"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_name_isSet) {
        obj.insert(QString("target_name"), ::OpenAPI::toJsonValue(m_target_name));
    }
    if (m_target_permission_isSet) {
        obj.insert(QString("target_permission"), ::OpenAPI::toJsonValue(m_target_permission));
    }
    if (m_target_permission_set_isSet) {
        obj.insert(QString("target_permission_set"), ::OpenAPI::toJsonValue(m_target_permission_set));
    }
    if (m_target_platform_isSet) {
        obj.insert(QString("target_platform"), ::OpenAPI::toJsonValue(m_target_platform));
    }
    if (m_target_recursive_isSet) {
        obj.insert(QString("target_recursive"), ::OpenAPI::toJsonValue(m_target_recursive));
    }
    if (m_target_user_id_isSet) {
        obj.insert(QString("target_user_id"), ::OpenAPI::toJsonValue(m_target_user_id));
    }
    if (m_target_username_isSet) {
        obj.insert(QString("target_username"), ::OpenAPI::toJsonValue(m_target_username));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIHistoryExportResultEntity::getAction() const {
    return m_action;
}
void OAIHistoryExportResultEntity::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIHistoryExportResultEntity::is_action_Set() const{
    return m_action_isSet;
}

bool OAIHistoryExportResultEntity::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIHistoryExportResultEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIHistoryExportResultEntity::setCreatedAt(const qint32 &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIHistoryExportResultEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIHistoryExportResultEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIHistoryExportResultEntity::getCreatedAtIso8601() const {
    return m_created_at_iso8601;
}
void OAIHistoryExportResultEntity::setCreatedAtIso8601(const qint32 &created_at_iso8601) {
    m_created_at_iso8601 = created_at_iso8601;
    m_created_at_iso8601_isSet = true;
}

bool OAIHistoryExportResultEntity::is_created_at_iso8601_Set() const{
    return m_created_at_iso8601_isSet;
}

bool OAIHistoryExportResultEntity::is_created_at_iso8601_Valid() const{
    return m_created_at_iso8601_isValid;
}

QString OAIHistoryExportResultEntity::getDestination() const {
    return m_destination;
}
void OAIHistoryExportResultEntity::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIHistoryExportResultEntity::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIHistoryExportResultEntity::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIHistoryExportResultEntity::getFailureType() const {
    return m_failure_type;
}
void OAIHistoryExportResultEntity::setFailureType(const QString &failure_type) {
    m_failure_type = failure_type;
    m_failure_type_isSet = true;
}

bool OAIHistoryExportResultEntity::is_failure_type_Set() const{
    return m_failure_type_isSet;
}

bool OAIHistoryExportResultEntity::is_failure_type_Valid() const{
    return m_failure_type_isValid;
}

qint32 OAIHistoryExportResultEntity::getFileId() const {
    return m_file_id;
}
void OAIHistoryExportResultEntity::setFileId(const qint32 &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIHistoryExportResultEntity::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIHistoryExportResultEntity::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIHistoryExportResultEntity::getFolder() const {
    return m_folder;
}
void OAIHistoryExportResultEntity::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIHistoryExportResultEntity::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIHistoryExportResultEntity::is_folder_Valid() const{
    return m_folder_isValid;
}

qint32 OAIHistoryExportResultEntity::getId() const {
    return m_id;
}
void OAIHistoryExportResultEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHistoryExportResultEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHistoryExportResultEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIHistoryExportResultEntity::getInterface() const {
    return m_interface;
}
void OAIHistoryExportResultEntity::setInterface(const QString &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIHistoryExportResultEntity::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIHistoryExportResultEntity::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIHistoryExportResultEntity::getIp() const {
    return m_ip;
}
void OAIHistoryExportResultEntity::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIHistoryExportResultEntity::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIHistoryExportResultEntity::is_ip_Valid() const{
    return m_ip_isValid;
}

qint32 OAIHistoryExportResultEntity::getParentId() const {
    return m_parent_id;
}
void OAIHistoryExportResultEntity::setParentId(const qint32 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIHistoryExportResultEntity::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIHistoryExportResultEntity::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIHistoryExportResultEntity::getPath() const {
    return m_path;
}
void OAIHistoryExportResultEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHistoryExportResultEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHistoryExportResultEntity::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIHistoryExportResultEntity::getSrc() const {
    return m_src;
}
void OAIHistoryExportResultEntity::setSrc(const QString &src) {
    m_src = src;
    m_src_isSet = true;
}

bool OAIHistoryExportResultEntity::is_src_Set() const{
    return m_src_isSet;
}

bool OAIHistoryExportResultEntity::is_src_Valid() const{
    return m_src_isValid;
}

qint32 OAIHistoryExportResultEntity::getTargetExpiresAt() const {
    return m_target_expires_at;
}
void OAIHistoryExportResultEntity::setTargetExpiresAt(const qint32 &target_expires_at) {
    m_target_expires_at = target_expires_at;
    m_target_expires_at_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_expires_at_Set() const{
    return m_target_expires_at_isSet;
}

bool OAIHistoryExportResultEntity::is_target_expires_at_Valid() const{
    return m_target_expires_at_isValid;
}

qint32 OAIHistoryExportResultEntity::getTargetId() const {
    return m_target_id;
}
void OAIHistoryExportResultEntity::setTargetId(const qint32 &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIHistoryExportResultEntity::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIHistoryExportResultEntity::getTargetName() const {
    return m_target_name;
}
void OAIHistoryExportResultEntity::setTargetName(const QString &target_name) {
    m_target_name = target_name;
    m_target_name_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_name_Set() const{
    return m_target_name_isSet;
}

bool OAIHistoryExportResultEntity::is_target_name_Valid() const{
    return m_target_name_isValid;
}

QString OAIHistoryExportResultEntity::getTargetPermission() const {
    return m_target_permission;
}
void OAIHistoryExportResultEntity::setTargetPermission(const QString &target_permission) {
    m_target_permission = target_permission;
    m_target_permission_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_permission_Set() const{
    return m_target_permission_isSet;
}

bool OAIHistoryExportResultEntity::is_target_permission_Valid() const{
    return m_target_permission_isValid;
}

QString OAIHistoryExportResultEntity::getTargetPermissionSet() const {
    return m_target_permission_set;
}
void OAIHistoryExportResultEntity::setTargetPermissionSet(const QString &target_permission_set) {
    m_target_permission_set = target_permission_set;
    m_target_permission_set_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_permission_set_Set() const{
    return m_target_permission_set_isSet;
}

bool OAIHistoryExportResultEntity::is_target_permission_set_Valid() const{
    return m_target_permission_set_isValid;
}

QString OAIHistoryExportResultEntity::getTargetPlatform() const {
    return m_target_platform;
}
void OAIHistoryExportResultEntity::setTargetPlatform(const QString &target_platform) {
    m_target_platform = target_platform;
    m_target_platform_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_platform_Set() const{
    return m_target_platform_isSet;
}

bool OAIHistoryExportResultEntity::is_target_platform_Valid() const{
    return m_target_platform_isValid;
}

bool OAIHistoryExportResultEntity::isTargetRecursive() const {
    return m_target_recursive;
}
void OAIHistoryExportResultEntity::setTargetRecursive(const bool &target_recursive) {
    m_target_recursive = target_recursive;
    m_target_recursive_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_recursive_Set() const{
    return m_target_recursive_isSet;
}

bool OAIHistoryExportResultEntity::is_target_recursive_Valid() const{
    return m_target_recursive_isValid;
}

qint32 OAIHistoryExportResultEntity::getTargetUserId() const {
    return m_target_user_id;
}
void OAIHistoryExportResultEntity::setTargetUserId(const qint32 &target_user_id) {
    m_target_user_id = target_user_id;
    m_target_user_id_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_user_id_Set() const{
    return m_target_user_id_isSet;
}

bool OAIHistoryExportResultEntity::is_target_user_id_Valid() const{
    return m_target_user_id_isValid;
}

QString OAIHistoryExportResultEntity::getTargetUsername() const {
    return m_target_username;
}
void OAIHistoryExportResultEntity::setTargetUsername(const QString &target_username) {
    m_target_username = target_username;
    m_target_username_isSet = true;
}

bool OAIHistoryExportResultEntity::is_target_username_Set() const{
    return m_target_username_isSet;
}

bool OAIHistoryExportResultEntity::is_target_username_Valid() const{
    return m_target_username_isValid;
}

qint32 OAIHistoryExportResultEntity::getUserId() const {
    return m_user_id;
}
void OAIHistoryExportResultEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIHistoryExportResultEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIHistoryExportResultEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIHistoryExportResultEntity::getUsername() const {
    return m_username;
}
void OAIHistoryExportResultEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIHistoryExportResultEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIHistoryExportResultEntity::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIHistoryExportResultEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_iso8601_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_permission_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_recursive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHistoryExportResultEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
