/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGroupEntity.h"
#include "OAIGroupUserEntity.h"
#include "OAIHttpFileElement.h"
#include "OAIPermissionEntity.h"
#include "OAIUserEntity.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id qint32 [required]
    * @param[in]  user_id qint32 [required]
    */
    virtual void deleteGroupsGroupIdMembershipsUserId(const qint32 &group_id, const qint32 &user_id);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteGroupsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_prefix OAIObject [optional]
    * @param[in]  ids QString [optional]
    */
    virtual void getGroups(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_prefix = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_prefix OAIObject [optional]
    * @param[in]  path QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  include_groups bool [optional]
    */
    virtual void getGroupsGroupIdPermissions(const QString &group_id, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_prefix = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_groups = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  group_id qint32 [required]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getGroupsGroupIdUsers(const qint32 &group_id, const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getGroupsId(const qint32 &id);

    /**
    * @param[in]  group_id qint32 [required]
    * @param[in]  user_id qint32 [required]
    * @param[in]  admin bool [optional]
    */
    virtual void patchGroupsGroupIdMembershipsUserId(const qint32 &group_id, const qint32 &user_id, const ::OpenAPI::OptionalParam<bool> &admin = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  admin_ids QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  user_ids QString [optional]
    */
    virtual void patchGroupsId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &admin_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  admin_ids QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  user_ids QString [optional]
    */
    virtual void postGroups(const ::OpenAPI::OptionalParam<QString> &admin_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint32 [required]
    * @param[in]  allowed_ips QString [optional]
    * @param[in]  announcements_read bool [optional]
    * @param[in]  attachments_permission bool [optional]
    * @param[in]  authenticate_until QDateTime [optional]
    * @param[in]  authentication_method QString [optional]
    * @param[in]  avatar_delete bool [optional]
    * @param[in]  avatar_file OAIHttpFileElement [optional]
    * @param[in]  billing_permission bool [optional]
    * @param[in]  bypass_inactive_disable bool [optional]
    * @param[in]  bypass_site_allowed_ips bool [optional]
    * @param[in]  change_password QString [optional]
    * @param[in]  change_password_confirmation QString [optional]
    * @param[in]  company QString [optional]
    * @param[in]  dav_permission bool [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  email QString [optional]
    * @param[in]  ftp_permission bool [optional]
    * @param[in]  grant_permission QString [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  header_text QString [optional]
    * @param[in]  imported_password_hash QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  notes QString [optional]
    * @param[in]  notification_daily_send_time qint32 [optional]
    * @param[in]  office_integration_enabled bool [optional]
    * @param[in]  password QString [optional]
    * @param[in]  password_confirmation QString [optional]
    * @param[in]  password_validity_days qint32 [optional]
    * @param[in]  receive_admin_alerts bool [optional]
    * @param[in]  require_2fa QString [optional]
    * @param[in]  require_password_change bool [optional]
    * @param[in]  restapi_permission bool [optional]
    * @param[in]  self_managed bool [optional]
    * @param[in]  sftp_permission bool [optional]
    * @param[in]  site_admin bool [optional]
    * @param[in]  skip_welcome_screen bool [optional]
    * @param[in]  ssl_required QString [optional]
    * @param[in]  sso_strategy_id qint32 [optional]
    * @param[in]  subscribe_to_newsletter bool [optional]
    * @param[in]  time_zone QString [optional]
    * @param[in]  user_root QString [optional]
    * @param[in]  username QString [optional]
    */
    virtual void postGroupsGroupIdUsers(const qint32 &group_id, const ::OpenAPI::OptionalParam<QString> &allowed_ips = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &announcements_read = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &attachments_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &authenticate_until = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &authentication_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avatar_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &avatar_file = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<bool> &billing_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_inactive_disable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &bypass_site_allowed_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &change_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &company = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dav_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &grant_permission = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &header_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &imported_password_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &notification_daily_send_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &office_integration_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &password_confirmation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &password_validity_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &receive_admin_alerts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &require_2fa = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &require_password_change = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &restapi_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &self_managed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &sftp_permission = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &site_admin = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &skip_welcome_screen = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ssl_required = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &sso_strategy_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &subscribe_to_newsletter = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &time_zone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteGroupsGroupIdMembershipsUserIdCallback(OAIHttpRequestWorker *worker);
    void deleteGroupsIdCallback(OAIHttpRequestWorker *worker);
    void getGroupsCallback(OAIHttpRequestWorker *worker);
    void getGroupsGroupIdPermissionsCallback(OAIHttpRequestWorker *worker);
    void getGroupsGroupIdUsersCallback(OAIHttpRequestWorker *worker);
    void getGroupsIdCallback(OAIHttpRequestWorker *worker);
    void patchGroupsGroupIdMembershipsUserIdCallback(OAIHttpRequestWorker *worker);
    void patchGroupsIdCallback(OAIHttpRequestWorker *worker);
    void postGroupsCallback(OAIHttpRequestWorker *worker);
    void postGroupsGroupIdUsersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteGroupsGroupIdMembershipsUserIdSignal();
    void deleteGroupsIdSignal();
    void getGroupsSignal(QList<OAIGroupEntity> summary);
    void getGroupsGroupIdPermissionsSignal(QList<OAIPermissionEntity> summary);
    void getGroupsGroupIdUsersSignal(QList<OAIGroupUserEntity> summary);
    void getGroupsIdSignal(OAIGroupEntity summary);
    void patchGroupsGroupIdMembershipsUserIdSignal(OAIGroupUserEntity summary);
    void patchGroupsIdSignal(OAIGroupEntity summary);
    void postGroupsSignal(OAIGroupEntity summary);
    void postGroupsGroupIdUsersSignal(OAIUserEntity summary);


    void deleteGroupsGroupIdMembershipsUserIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteGroupsIdSignalFull(OAIHttpRequestWorker *worker);
    void getGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupEntity> summary);
    void getGroupsGroupIdPermissionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPermissionEntity> summary);
    void getGroupsGroupIdUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroupUserEntity> summary);
    void getGroupsIdSignalFull(OAIHttpRequestWorker *worker, OAIGroupEntity summary);
    void patchGroupsGroupIdMembershipsUserIdSignalFull(OAIHttpRequestWorker *worker, OAIGroupUserEntity summary);
    void patchGroupsIdSignalFull(OAIHttpRequestWorker *worker, OAIGroupEntity summary);
    void postGroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroupEntity summary);
    void postGroupsGroupIdUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteGroupsGroupIdMembershipsUserIdSignalError() instead")
    void deleteGroupsGroupIdMembershipsUserIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupsGroupIdMembershipsUserIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupsIdSignalError() instead")
    void deleteGroupsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsSignalError() instead")
    void getGroupsSignalE(QList<OAIGroupEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsSignalError(QList<OAIGroupEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsGroupIdPermissionsSignalError() instead")
    void getGroupsGroupIdPermissionsSignalE(QList<OAIPermissionEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsGroupIdPermissionsSignalError(QList<OAIPermissionEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsGroupIdUsersSignalError() instead")
    void getGroupsGroupIdUsersSignalE(QList<OAIGroupUserEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsGroupIdUsersSignalError(QList<OAIGroupUserEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsIdSignalError() instead")
    void getGroupsIdSignalE(OAIGroupEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsIdSignalError(OAIGroupEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchGroupsGroupIdMembershipsUserIdSignalError() instead")
    void patchGroupsGroupIdMembershipsUserIdSignalE(OAIGroupUserEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchGroupsGroupIdMembershipsUserIdSignalError(OAIGroupUserEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchGroupsIdSignalError() instead")
    void patchGroupsIdSignalE(OAIGroupEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchGroupsIdSignalError(OAIGroupEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGroupsSignalError() instead")
    void postGroupsSignalE(OAIGroupEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGroupsSignalError(OAIGroupEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGroupsGroupIdUsersSignalError() instead")
    void postGroupsGroupIdUsersSignalE(OAIUserEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGroupsGroupIdUsersSignalError(OAIUserEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteGroupsGroupIdMembershipsUserIdSignalErrorFull() instead")
    void deleteGroupsGroupIdMembershipsUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupsGroupIdMembershipsUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGroupsIdSignalErrorFull() instead")
    void deleteGroupsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGroupsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsSignalErrorFull() instead")
    void getGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsGroupIdPermissionsSignalErrorFull() instead")
    void getGroupsGroupIdPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsGroupIdPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsGroupIdUsersSignalErrorFull() instead")
    void getGroupsGroupIdUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsGroupIdUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupsIdSignalErrorFull() instead")
    void getGroupsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchGroupsGroupIdMembershipsUserIdSignalErrorFull() instead")
    void patchGroupsGroupIdMembershipsUserIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchGroupsGroupIdMembershipsUserIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchGroupsIdSignalErrorFull() instead")
    void patchGroupsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchGroupsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGroupsSignalErrorFull() instead")
    void postGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGroupsGroupIdUsersSignalErrorFull() instead")
    void postGroupsGroupIdUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGroupsGroupIdUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
