/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRequestsApi_H
#define OAI_OAIRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRequestEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRequestsApi : public QObject {
    Q_OBJECT

public:
    OAIRequestsApi(const int timeOut = 0);
    ~OAIRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteRequestsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  mine bool [optional]
    * @param[in]  path QString [optional]
    */
    virtual void getRequests(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<bool> &mine = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  mine bool [optional]
    */
    virtual void getRequestsFoldersPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<bool> &mine = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  destination QString [required]
    * @param[in]  path QString [required]
    * @param[in]  group_ids QString [optional]
    * @param[in]  user_ids QString [optional]
    */
    virtual void postRequests(const QString &destination, const QString &path, const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ids = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteRequestsIdCallback(OAIHttpRequestWorker *worker);
    void getRequestsCallback(OAIHttpRequestWorker *worker);
    void getRequestsFoldersPathCallback(OAIHttpRequestWorker *worker);
    void postRequestsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteRequestsIdSignal();
    void getRequestsSignal(QList<OAIRequestEntity> summary);
    void getRequestsFoldersPathSignal(QList<OAIRequestEntity> summary);
    void postRequestsSignal(OAIRequestEntity summary);


    void deleteRequestsIdSignalFull(OAIHttpRequestWorker *worker);
    void getRequestsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRequestEntity> summary);
    void getRequestsFoldersPathSignalFull(OAIHttpRequestWorker *worker, QList<OAIRequestEntity> summary);
    void postRequestsSignalFull(OAIHttpRequestWorker *worker, OAIRequestEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteRequestsIdSignalError() instead")
    void deleteRequestsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRequestsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestsSignalError() instead")
    void getRequestsSignalE(QList<OAIRequestEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestsSignalError(QList<OAIRequestEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestsFoldersPathSignalError() instead")
    void getRequestsFoldersPathSignalE(QList<OAIRequestEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestsFoldersPathSignalError(QList<OAIRequestEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRequestsSignalError() instead")
    void postRequestsSignalE(OAIRequestEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRequestsSignalError(OAIRequestEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteRequestsIdSignalErrorFull() instead")
    void deleteRequestsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRequestsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestsSignalErrorFull() instead")
    void getRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRequestsFoldersPathSignalErrorFull() instead")
    void getRequestsFoldersPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRequestsFoldersPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRequestsSignalErrorFull() instead")
    void postRequestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRequestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
