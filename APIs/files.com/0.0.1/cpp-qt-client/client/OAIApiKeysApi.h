/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiKeysApi_H
#define OAI_OAIApiKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKeyEntity.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiKeysApi : public QObject {
    Q_OBJECT

public:
    OAIApiKeysApi(const int timeOut = 0);
    ~OAIApiKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteApiKeysId(const qint32 &id);

    /**
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_gt OAIObject [optional]
    * @param[in]  filter_gteq OAIObject [optional]
    * @param[in]  filter_lt OAIObject [optional]
    * @param[in]  filter_lteq OAIObject [optional]
    */
    virtual void getApiKeys(const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lteq = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getApiKeysId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  description QString [optional]
    * @param[in]  expires_at QDateTime [optional]
    * @param[in]  name QString [optional]
    * @param[in]  permission_set QString [optional]
    */
    virtual void patchApiKeysId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &expires_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_set = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  description QString [optional]
    * @param[in]  expires_at QDateTime [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  permission_set QString [optional]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void postApiKeys(const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &expires_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteApiKeysIdCallback(OAIHttpRequestWorker *worker);
    void getApiKeysCallback(OAIHttpRequestWorker *worker);
    void getApiKeysIdCallback(OAIHttpRequestWorker *worker);
    void patchApiKeysIdCallback(OAIHttpRequestWorker *worker);
    void postApiKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteApiKeysIdSignal();
    void getApiKeysSignal(QList<OAIApiKeyEntity> summary);
    void getApiKeysIdSignal(OAIApiKeyEntity summary);
    void patchApiKeysIdSignal(OAIApiKeyEntity summary);
    void postApiKeysSignal(OAIApiKeyEntity summary);


    void deleteApiKeysIdSignalFull(OAIHttpRequestWorker *worker);
    void getApiKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIApiKeyEntity> summary);
    void getApiKeysIdSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyEntity summary);
    void patchApiKeysIdSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyEntity summary);
    void postApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteApiKeysIdSignalError() instead")
    void deleteApiKeysIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeysIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysSignalError() instead")
    void getApiKeysSignalE(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysSignalError(QList<OAIApiKeyEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysIdSignalError() instead")
    void getApiKeysIdSignalE(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysIdSignalError(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchApiKeysIdSignalError() instead")
    void patchApiKeysIdSignalE(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchApiKeysIdSignalError(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiKeysSignalError() instead")
    void postApiKeysSignalE(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiKeysSignalError(OAIApiKeyEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteApiKeysIdSignalErrorFull() instead")
    void deleteApiKeysIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApiKeysIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysSignalErrorFull() instead")
    void getApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysIdSignalErrorFull() instead")
    void getApiKeysIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchApiKeysIdSignalErrorFull() instead")
    void patchApiKeysIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchApiKeysIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postApiKeysSignalErrorFull() instead")
    void postApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
