/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteBandwidthSnapshotEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteBandwidthSnapshotEntity::OAIRemoteBandwidthSnapshotEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteBandwidthSnapshotEntity::OAIRemoteBandwidthSnapshotEntity() {
    this->initializeModel();
}

OAIRemoteBandwidthSnapshotEntity::~OAIRemoteBandwidthSnapshotEntity() {}

void OAIRemoteBandwidthSnapshotEntity::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_logged_at_isSet = false;
    m_logged_at_isValid = false;

    m_remote_server_id_isSet = false;
    m_remote_server_id_isValid = false;

    m_sync_bytes_received_isSet = false;
    m_sync_bytes_received_isValid = false;

    m_sync_bytes_sent_isSet = false;
    m_sync_bytes_sent_isValid = false;
}

void OAIRemoteBandwidthSnapshotEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteBandwidthSnapshotEntity::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logged_at_isValid = ::OpenAPI::fromJsonValue(m_logged_at, json[QString("logged_at")]);
    m_logged_at_isSet = !json[QString("logged_at")].isNull() && m_logged_at_isValid;

    m_remote_server_id_isValid = ::OpenAPI::fromJsonValue(m_remote_server_id, json[QString("remote_server_id")]);
    m_remote_server_id_isSet = !json[QString("remote_server_id")].isNull() && m_remote_server_id_isValid;

    m_sync_bytes_received_isValid = ::OpenAPI::fromJsonValue(m_sync_bytes_received, json[QString("sync_bytes_received")]);
    m_sync_bytes_received_isSet = !json[QString("sync_bytes_received")].isNull() && m_sync_bytes_received_isValid;

    m_sync_bytes_sent_isValid = ::OpenAPI::fromJsonValue(m_sync_bytes_sent, json[QString("sync_bytes_sent")]);
    m_sync_bytes_sent_isSet = !json[QString("sync_bytes_sent")].isNull() && m_sync_bytes_sent_isValid;
}

QString OAIRemoteBandwidthSnapshotEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteBandwidthSnapshotEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logged_at_isSet) {
        obj.insert(QString("logged_at"), ::OpenAPI::toJsonValue(m_logged_at));
    }
    if (m_remote_server_id_isSet) {
        obj.insert(QString("remote_server_id"), ::OpenAPI::toJsonValue(m_remote_server_id));
    }
    if (m_sync_bytes_received_isSet) {
        obj.insert(QString("sync_bytes_received"), ::OpenAPI::toJsonValue(m_sync_bytes_received));
    }
    if (m_sync_bytes_sent_isSet) {
        obj.insert(QString("sync_bytes_sent"), ::OpenAPI::toJsonValue(m_sync_bytes_sent));
    }
    return obj;
}

qint32 OAIRemoteBandwidthSnapshotEntity::getId() const {
    return m_id;
}
void OAIRemoteBandwidthSnapshotEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRemoteBandwidthSnapshotEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRemoteBandwidthSnapshotEntity::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIRemoteBandwidthSnapshotEntity::getLoggedAt() const {
    return m_logged_at;
}
void OAIRemoteBandwidthSnapshotEntity::setLoggedAt(const QDateTime &logged_at) {
    m_logged_at = logged_at;
    m_logged_at_isSet = true;
}

bool OAIRemoteBandwidthSnapshotEntity::is_logged_at_Set() const{
    return m_logged_at_isSet;
}

bool OAIRemoteBandwidthSnapshotEntity::is_logged_at_Valid() const{
    return m_logged_at_isValid;
}

qint32 OAIRemoteBandwidthSnapshotEntity::getRemoteServerId() const {
    return m_remote_server_id;
}
void OAIRemoteBandwidthSnapshotEntity::setRemoteServerId(const qint32 &remote_server_id) {
    m_remote_server_id = remote_server_id;
    m_remote_server_id_isSet = true;
}

bool OAIRemoteBandwidthSnapshotEntity::is_remote_server_id_Set() const{
    return m_remote_server_id_isSet;
}

bool OAIRemoteBandwidthSnapshotEntity::is_remote_server_id_Valid() const{
    return m_remote_server_id_isValid;
}

double OAIRemoteBandwidthSnapshotEntity::getSyncBytesReceived() const {
    return m_sync_bytes_received;
}
void OAIRemoteBandwidthSnapshotEntity::setSyncBytesReceived(const double &sync_bytes_received) {
    m_sync_bytes_received = sync_bytes_received;
    m_sync_bytes_received_isSet = true;
}

bool OAIRemoteBandwidthSnapshotEntity::is_sync_bytes_received_Set() const{
    return m_sync_bytes_received_isSet;
}

bool OAIRemoteBandwidthSnapshotEntity::is_sync_bytes_received_Valid() const{
    return m_sync_bytes_received_isValid;
}

double OAIRemoteBandwidthSnapshotEntity::getSyncBytesSent() const {
    return m_sync_bytes_sent;
}
void OAIRemoteBandwidthSnapshotEntity::setSyncBytesSent(const double &sync_bytes_sent) {
    m_sync_bytes_sent = sync_bytes_sent;
    m_sync_bytes_sent_isSet = true;
}

bool OAIRemoteBandwidthSnapshotEntity::is_sync_bytes_sent_Set() const{
    return m_sync_bytes_sent_isSet;
}

bool OAIRemoteBandwidthSnapshotEntity::is_sync_bytes_sent_Valid() const{
    return m_sync_bytes_sent_isValid;
}

bool OAIRemoteBandwidthSnapshotEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logged_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_bytes_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_bytes_sent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteBandwidthSnapshotEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
