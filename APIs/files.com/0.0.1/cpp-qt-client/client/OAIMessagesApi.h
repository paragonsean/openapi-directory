/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesApi_H
#define OAI_OAIMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMessageEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIMessagesApi(const int timeOut = 0);
    ~OAIMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteMessagesId(const qint32 &id);

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  user_id qint32 [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getMessages(const qint32 &project_id, const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getMessagesId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body QString [required]
    * @param[in]  project_id qint32 [required]
    * @param[in]  subject QString [required]
    */
    virtual void patchMessagesId(const qint32 &id, const QString &body, const qint32 &project_id, const QString &subject);

    /**
    * @param[in]  body QString [required]
    * @param[in]  project_id qint32 [required]
    * @param[in]  subject QString [required]
    * @param[in]  user_id qint32 [optional]
    */
    virtual void postMessages(const QString &body, const qint32 &project_id, const QString &subject, const ::OpenAPI::OptionalParam<qint32> &user_id = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteMessagesIdCallback(OAIHttpRequestWorker *worker);
    void getMessagesCallback(OAIHttpRequestWorker *worker);
    void getMessagesIdCallback(OAIHttpRequestWorker *worker);
    void patchMessagesIdCallback(OAIHttpRequestWorker *worker);
    void postMessagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteMessagesIdSignal();
    void getMessagesSignal(QList<OAIMessageEntity> summary);
    void getMessagesIdSignal(OAIMessageEntity summary);
    void patchMessagesIdSignal(OAIMessageEntity summary);
    void postMessagesSignal(OAIMessageEntity summary);


    void deleteMessagesIdSignalFull(OAIHttpRequestWorker *worker);
    void getMessagesSignalFull(OAIHttpRequestWorker *worker, QList<OAIMessageEntity> summary);
    void getMessagesIdSignalFull(OAIHttpRequestWorker *worker, OAIMessageEntity summary);
    void patchMessagesIdSignalFull(OAIHttpRequestWorker *worker, OAIMessageEntity summary);
    void postMessagesSignalFull(OAIHttpRequestWorker *worker, OAIMessageEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteMessagesIdSignalError() instead")
    void deleteMessagesIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessagesIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagesSignalError() instead")
    void getMessagesSignalE(QList<OAIMessageEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesSignalError(QList<OAIMessageEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagesIdSignalError() instead")
    void getMessagesIdSignalE(OAIMessageEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesIdSignalError(OAIMessageEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMessagesIdSignalError() instead")
    void patchMessagesIdSignalE(OAIMessageEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMessagesIdSignalError(OAIMessageEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMessagesSignalError() instead")
    void postMessagesSignalE(OAIMessageEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMessagesSignalError(OAIMessageEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteMessagesIdSignalErrorFull() instead")
    void deleteMessagesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessagesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagesSignalErrorFull() instead")
    void getMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagesIdSignalErrorFull() instead")
    void getMessagesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMessagesIdSignalErrorFull() instead")
    void patchMessagesIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMessagesIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMessagesSignalErrorFull() instead")
    void postMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
