/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClickwrapsApi_H
#define OAI_OAIClickwrapsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClickwrapEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClickwrapsApi : public QObject {
    Q_OBJECT

public:
    OAIClickwrapsApi(const int timeOut = 0);
    ~OAIClickwrapsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteClickwrapsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getClickwraps(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getClickwrapsId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  body QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  use_with_bundles QString [optional]
    * @param[in]  use_with_inboxes QString [optional]
    * @param[in]  use_with_users QString [optional]
    */
    virtual void patchClickwrapsId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_with_bundles = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_with_inboxes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_with_users = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  body QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  use_with_bundles QString [optional]
    * @param[in]  use_with_inboxes QString [optional]
    * @param[in]  use_with_users QString [optional]
    */
    virtual void postClickwraps(const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_with_bundles = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_with_inboxes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &use_with_users = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteClickwrapsIdCallback(OAIHttpRequestWorker *worker);
    void getClickwrapsCallback(OAIHttpRequestWorker *worker);
    void getClickwrapsIdCallback(OAIHttpRequestWorker *worker);
    void patchClickwrapsIdCallback(OAIHttpRequestWorker *worker);
    void postClickwrapsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteClickwrapsIdSignal();
    void getClickwrapsSignal(QList<OAIClickwrapEntity> summary);
    void getClickwrapsIdSignal(OAIClickwrapEntity summary);
    void patchClickwrapsIdSignal(OAIClickwrapEntity summary);
    void postClickwrapsSignal(OAIClickwrapEntity summary);


    void deleteClickwrapsIdSignalFull(OAIHttpRequestWorker *worker);
    void getClickwrapsSignalFull(OAIHttpRequestWorker *worker, QList<OAIClickwrapEntity> summary);
    void getClickwrapsIdSignalFull(OAIHttpRequestWorker *worker, OAIClickwrapEntity summary);
    void patchClickwrapsIdSignalFull(OAIHttpRequestWorker *worker, OAIClickwrapEntity summary);
    void postClickwrapsSignalFull(OAIHttpRequestWorker *worker, OAIClickwrapEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteClickwrapsIdSignalError() instead")
    void deleteClickwrapsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteClickwrapsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClickwrapsSignalError() instead")
    void getClickwrapsSignalE(QList<OAIClickwrapEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClickwrapsSignalError(QList<OAIClickwrapEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClickwrapsIdSignalError() instead")
    void getClickwrapsIdSignalE(OAIClickwrapEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClickwrapsIdSignalError(OAIClickwrapEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchClickwrapsIdSignalError() instead")
    void patchClickwrapsIdSignalE(OAIClickwrapEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchClickwrapsIdSignalError(OAIClickwrapEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postClickwrapsSignalError() instead")
    void postClickwrapsSignalE(OAIClickwrapEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postClickwrapsSignalError(OAIClickwrapEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteClickwrapsIdSignalErrorFull() instead")
    void deleteClickwrapsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteClickwrapsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClickwrapsSignalErrorFull() instead")
    void getClickwrapsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClickwrapsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClickwrapsIdSignalErrorFull() instead")
    void getClickwrapsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClickwrapsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchClickwrapsIdSignalErrorFull() instead")
    void patchClickwrapsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchClickwrapsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postClickwrapsSignalErrorFull() instead")
    void postClickwrapsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postClickwrapsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
