/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKeyEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKeyEntity::OAIApiKeyEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKeyEntity::OAIApiKeyEntity() {
    this->initializeModel();
}

OAIApiKeyEntity::~OAIApiKeyEntity() {}

void OAIApiKeyEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_descriptive_label_isSet = false;
    m_descriptive_label_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_use_at_isSet = false;
    m_last_use_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_permission_set_isSet = false;
    m_permission_set_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIApiKeyEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKeyEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_descriptive_label_isValid = ::OpenAPI::fromJsonValue(m_descriptive_label, json[QString("descriptive_label")]);
    m_descriptive_label_isSet = !json[QString("descriptive_label")].isNull() && m_descriptive_label_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_use_at_isValid = ::OpenAPI::fromJsonValue(m_last_use_at, json[QString("last_use_at")]);
    m_last_use_at_isSet = !json[QString("last_use_at")].isNull() && m_last_use_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_permission_set_isValid = ::OpenAPI::fromJsonValue(m_permission_set, json[QString("permission_set")]);
    m_permission_set_isSet = !json[QString("permission_set")].isNull() && m_permission_set_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIApiKeyEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKeyEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_descriptive_label_isSet) {
        obj.insert(QString("descriptive_label"), ::OpenAPI::toJsonValue(m_descriptive_label));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_use_at_isSet) {
        obj.insert(QString("last_use_at"), ::OpenAPI::toJsonValue(m_last_use_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_permission_set_isSet) {
        obj.insert(QString("permission_set"), ::OpenAPI::toJsonValue(m_permission_set));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIApiKeyEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIApiKeyEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIApiKeyEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIApiKeyEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIApiKeyEntity::getDescription() const {
    return m_description;
}
void OAIApiKeyEntity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiKeyEntity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiKeyEntity::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiKeyEntity::getDescriptiveLabel() const {
    return m_descriptive_label;
}
void OAIApiKeyEntity::setDescriptiveLabel(const QString &descriptive_label) {
    m_descriptive_label = descriptive_label;
    m_descriptive_label_isSet = true;
}

bool OAIApiKeyEntity::is_descriptive_label_Set() const{
    return m_descriptive_label_isSet;
}

bool OAIApiKeyEntity::is_descriptive_label_Valid() const{
    return m_descriptive_label_isValid;
}

QDateTime OAIApiKeyEntity::getExpiresAt() const {
    return m_expires_at;
}
void OAIApiKeyEntity::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIApiKeyEntity::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIApiKeyEntity::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

qint32 OAIApiKeyEntity::getId() const {
    return m_id;
}
void OAIApiKeyEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApiKeyEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApiKeyEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApiKeyEntity::getKey() const {
    return m_key;
}
void OAIApiKeyEntity::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIApiKeyEntity::is_key_Set() const{
    return m_key_isSet;
}

bool OAIApiKeyEntity::is_key_Valid() const{
    return m_key_isValid;
}

QDateTime OAIApiKeyEntity::getLastUseAt() const {
    return m_last_use_at;
}
void OAIApiKeyEntity::setLastUseAt(const QDateTime &last_use_at) {
    m_last_use_at = last_use_at;
    m_last_use_at_isSet = true;
}

bool OAIApiKeyEntity::is_last_use_at_Set() const{
    return m_last_use_at_isSet;
}

bool OAIApiKeyEntity::is_last_use_at_Valid() const{
    return m_last_use_at_isValid;
}

QString OAIApiKeyEntity::getName() const {
    return m_name;
}
void OAIApiKeyEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApiKeyEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApiKeyEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApiKeyEntity::getPath() const {
    return m_path;
}
void OAIApiKeyEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIApiKeyEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIApiKeyEntity::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIApiKeyEntity::getPermissionSet() const {
    return m_permission_set;
}
void OAIApiKeyEntity::setPermissionSet(const QString &permission_set) {
    m_permission_set = permission_set;
    m_permission_set_isSet = true;
}

bool OAIApiKeyEntity::is_permission_set_Set() const{
    return m_permission_set_isSet;
}

bool OAIApiKeyEntity::is_permission_set_Valid() const{
    return m_permission_set_isValid;
}

QString OAIApiKeyEntity::getPlatform() const {
    return m_platform;
}
void OAIApiKeyEntity::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIApiKeyEntity::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIApiKeyEntity::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIApiKeyEntity::getUrl() const {
    return m_url;
}
void OAIApiKeyEntity::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIApiKeyEntity::is_url_Set() const{
    return m_url_isSet;
}

bool OAIApiKeyEntity::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIApiKeyEntity::getUserId() const {
    return m_user_id;
}
void OAIApiKeyEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIApiKeyEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIApiKeyEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIApiKeyEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptive_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_use_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKeyEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
