/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageDailySnapshotEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageDailySnapshotEntity::OAIUsageDailySnapshotEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageDailySnapshotEntity::OAIUsageDailySnapshotEntity() {
    this->initializeModel();
}

OAIUsageDailySnapshotEntity::~OAIUsageDailySnapshotEntity() {}

void OAIUsageDailySnapshotEntity::initializeModel() {

    m_api_usage_available_isSet = false;
    m_api_usage_available_isValid = false;

    m_current_storage_isSet = false;
    m_current_storage_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_deleted_files_counted_in_minimum_isSet = false;
    m_deleted_files_counted_in_minimum_isValid = false;

    m_deleted_files_storage_isSet = false;
    m_deleted_files_storage_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_read_api_usage_isSet = false;
    m_read_api_usage_isValid = false;

    m_root_storage_isSet = false;
    m_root_storage_isValid = false;

    m_usage_by_top_level_dir_isSet = false;
    m_usage_by_top_level_dir_isValid = false;

    m_user_count_isSet = false;
    m_user_count_isValid = false;

    m_write_api_usage_isSet = false;
    m_write_api_usage_isValid = false;
}

void OAIUsageDailySnapshotEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageDailySnapshotEntity::fromJsonObject(QJsonObject json) {

    m_api_usage_available_isValid = ::OpenAPI::fromJsonValue(m_api_usage_available, json[QString("api_usage_available")]);
    m_api_usage_available_isSet = !json[QString("api_usage_available")].isNull() && m_api_usage_available_isValid;

    m_current_storage_isValid = ::OpenAPI::fromJsonValue(m_current_storage, json[QString("current_storage")]);
    m_current_storage_isSet = !json[QString("current_storage")].isNull() && m_current_storage_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_deleted_files_counted_in_minimum_isValid = ::OpenAPI::fromJsonValue(m_deleted_files_counted_in_minimum, json[QString("deleted_files_counted_in_minimum")]);
    m_deleted_files_counted_in_minimum_isSet = !json[QString("deleted_files_counted_in_minimum")].isNull() && m_deleted_files_counted_in_minimum_isValid;

    m_deleted_files_storage_isValid = ::OpenAPI::fromJsonValue(m_deleted_files_storage, json[QString("deleted_files_storage")]);
    m_deleted_files_storage_isSet = !json[QString("deleted_files_storage")].isNull() && m_deleted_files_storage_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_read_api_usage_isValid = ::OpenAPI::fromJsonValue(m_read_api_usage, json[QString("read_api_usage")]);
    m_read_api_usage_isSet = !json[QString("read_api_usage")].isNull() && m_read_api_usage_isValid;

    m_root_storage_isValid = ::OpenAPI::fromJsonValue(m_root_storage, json[QString("root_storage")]);
    m_root_storage_isSet = !json[QString("root_storage")].isNull() && m_root_storage_isValid;

    m_usage_by_top_level_dir_isValid = ::OpenAPI::fromJsonValue(m_usage_by_top_level_dir, json[QString("usage_by_top_level_dir")]);
    m_usage_by_top_level_dir_isSet = !json[QString("usage_by_top_level_dir")].isNull() && m_usage_by_top_level_dir_isValid;

    m_user_count_isValid = ::OpenAPI::fromJsonValue(m_user_count, json[QString("user_count")]);
    m_user_count_isSet = !json[QString("user_count")].isNull() && m_user_count_isValid;

    m_write_api_usage_isValid = ::OpenAPI::fromJsonValue(m_write_api_usage, json[QString("write_api_usage")]);
    m_write_api_usage_isSet = !json[QString("write_api_usage")].isNull() && m_write_api_usage_isValid;
}

QString OAIUsageDailySnapshotEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageDailySnapshotEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_api_usage_available_isSet) {
        obj.insert(QString("api_usage_available"), ::OpenAPI::toJsonValue(m_api_usage_available));
    }
    if (m_current_storage_isSet) {
        obj.insert(QString("current_storage"), ::OpenAPI::toJsonValue(m_current_storage));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_deleted_files_counted_in_minimum_isSet) {
        obj.insert(QString("deleted_files_counted_in_minimum"), ::OpenAPI::toJsonValue(m_deleted_files_counted_in_minimum));
    }
    if (m_deleted_files_storage_isSet) {
        obj.insert(QString("deleted_files_storage"), ::OpenAPI::toJsonValue(m_deleted_files_storage));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_read_api_usage_isSet) {
        obj.insert(QString("read_api_usage"), ::OpenAPI::toJsonValue(m_read_api_usage));
    }
    if (m_root_storage_isSet) {
        obj.insert(QString("root_storage"), ::OpenAPI::toJsonValue(m_root_storage));
    }
    if (m_usage_by_top_level_dir_isSet) {
        obj.insert(QString("usage_by_top_level_dir"), ::OpenAPI::toJsonValue(m_usage_by_top_level_dir));
    }
    if (m_user_count_isSet) {
        obj.insert(QString("user_count"), ::OpenAPI::toJsonValue(m_user_count));
    }
    if (m_write_api_usage_isSet) {
        obj.insert(QString("write_api_usage"), ::OpenAPI::toJsonValue(m_write_api_usage));
    }
    return obj;
}

bool OAIUsageDailySnapshotEntity::isApiUsageAvailable() const {
    return m_api_usage_available;
}
void OAIUsageDailySnapshotEntity::setApiUsageAvailable(const bool &api_usage_available) {
    m_api_usage_available = api_usage_available;
    m_api_usage_available_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_api_usage_available_Set() const{
    return m_api_usage_available_isSet;
}

bool OAIUsageDailySnapshotEntity::is_api_usage_available_Valid() const{
    return m_api_usage_available_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getCurrentStorage() const {
    return m_current_storage;
}
void OAIUsageDailySnapshotEntity::setCurrentStorage(const qint32 &current_storage) {
    m_current_storage = current_storage;
    m_current_storage_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_current_storage_Set() const{
    return m_current_storage_isSet;
}

bool OAIUsageDailySnapshotEntity::is_current_storage_Valid() const{
    return m_current_storage_isValid;
}

QDate OAIUsageDailySnapshotEntity::getDate() const {
    return m_date;
}
void OAIUsageDailySnapshotEntity::setDate(const QDate &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_date_Set() const{
    return m_date_isSet;
}

bool OAIUsageDailySnapshotEntity::is_date_Valid() const{
    return m_date_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getDeletedFilesCountedInMinimum() const {
    return m_deleted_files_counted_in_minimum;
}
void OAIUsageDailySnapshotEntity::setDeletedFilesCountedInMinimum(const qint32 &deleted_files_counted_in_minimum) {
    m_deleted_files_counted_in_minimum = deleted_files_counted_in_minimum;
    m_deleted_files_counted_in_minimum_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_deleted_files_counted_in_minimum_Set() const{
    return m_deleted_files_counted_in_minimum_isSet;
}

bool OAIUsageDailySnapshotEntity::is_deleted_files_counted_in_minimum_Valid() const{
    return m_deleted_files_counted_in_minimum_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getDeletedFilesStorage() const {
    return m_deleted_files_storage;
}
void OAIUsageDailySnapshotEntity::setDeletedFilesStorage(const qint32 &deleted_files_storage) {
    m_deleted_files_storage = deleted_files_storage;
    m_deleted_files_storage_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_deleted_files_storage_Set() const{
    return m_deleted_files_storage_isSet;
}

bool OAIUsageDailySnapshotEntity::is_deleted_files_storage_Valid() const{
    return m_deleted_files_storage_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getId() const {
    return m_id;
}
void OAIUsageDailySnapshotEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUsageDailySnapshotEntity::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getReadApiUsage() const {
    return m_read_api_usage;
}
void OAIUsageDailySnapshotEntity::setReadApiUsage(const qint32 &read_api_usage) {
    m_read_api_usage = read_api_usage;
    m_read_api_usage_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_read_api_usage_Set() const{
    return m_read_api_usage_isSet;
}

bool OAIUsageDailySnapshotEntity::is_read_api_usage_Valid() const{
    return m_read_api_usage_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getRootStorage() const {
    return m_root_storage;
}
void OAIUsageDailySnapshotEntity::setRootStorage(const qint32 &root_storage) {
    m_root_storage = root_storage;
    m_root_storage_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_root_storage_Set() const{
    return m_root_storage_isSet;
}

bool OAIUsageDailySnapshotEntity::is_root_storage_Valid() const{
    return m_root_storage_isValid;
}

OAIObject OAIUsageDailySnapshotEntity::getUsageByTopLevelDir() const {
    return m_usage_by_top_level_dir;
}
void OAIUsageDailySnapshotEntity::setUsageByTopLevelDir(const OAIObject &usage_by_top_level_dir) {
    m_usage_by_top_level_dir = usage_by_top_level_dir;
    m_usage_by_top_level_dir_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_usage_by_top_level_dir_Set() const{
    return m_usage_by_top_level_dir_isSet;
}

bool OAIUsageDailySnapshotEntity::is_usage_by_top_level_dir_Valid() const{
    return m_usage_by_top_level_dir_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getUserCount() const {
    return m_user_count;
}
void OAIUsageDailySnapshotEntity::setUserCount(const qint32 &user_count) {
    m_user_count = user_count;
    m_user_count_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_user_count_Set() const{
    return m_user_count_isSet;
}

bool OAIUsageDailySnapshotEntity::is_user_count_Valid() const{
    return m_user_count_isValid;
}

qint32 OAIUsageDailySnapshotEntity::getWriteApiUsage() const {
    return m_write_api_usage;
}
void OAIUsageDailySnapshotEntity::setWriteApiUsage(const qint32 &write_api_usage) {
    m_write_api_usage = write_api_usage;
    m_write_api_usage_isSet = true;
}

bool OAIUsageDailySnapshotEntity::is_write_api_usage_Set() const{
    return m_write_api_usage_isSet;
}

bool OAIUsageDailySnapshotEntity::is_write_api_usage_Valid() const{
    return m_write_api_usage_isValid;
}

bool OAIUsageDailySnapshotEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_usage_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_files_counted_in_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_files_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_api_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_by_top_level_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_api_usage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageDailySnapshotEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
