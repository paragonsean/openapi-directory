/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageSnapshotEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageSnapshotEntity::OAIUsageSnapshotEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageSnapshotEntity::OAIUsageSnapshotEntity() {
    this->initializeModel();
}

OAIUsageSnapshotEntity::~OAIUsageSnapshotEntity() {}

void OAIUsageSnapshotEntity::initializeModel() {

    m_bytes_sent_isSet = false;
    m_bytes_sent_isValid = false;

    m_current_storage_isSet = false;
    m_current_storage_isValid = false;

    m_deleted_files_counted_in_minimum_isSet = false;
    m_deleted_files_counted_in_minimum_isValid = false;

    m_deleted_files_storage_isSet = false;
    m_deleted_files_storage_isValid = false;

    m_end_at_isSet = false;
    m_end_at_isValid = false;

    m_high_water_storage_isSet = false;
    m_high_water_storage_isValid = false;

    m_high_water_user_count_isSet = false;
    m_high_water_user_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_root_storage_isSet = false;
    m_root_storage_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;

    m_sync_bytes_received_isSet = false;
    m_sync_bytes_received_isValid = false;

    m_sync_bytes_sent_isSet = false;
    m_sync_bytes_sent_isValid = false;

    m_total_billable_transfer_usage_isSet = false;
    m_total_billable_transfer_usage_isValid = false;

    m_total_billable_usage_isSet = false;
    m_total_billable_usage_isValid = false;

    m_usage_by_top_level_dir_isSet = false;
    m_usage_by_top_level_dir_isValid = false;
}

void OAIUsageSnapshotEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageSnapshotEntity::fromJsonObject(QJsonObject json) {

    m_bytes_sent_isValid = ::OpenAPI::fromJsonValue(m_bytes_sent, json[QString("bytes_sent")]);
    m_bytes_sent_isSet = !json[QString("bytes_sent")].isNull() && m_bytes_sent_isValid;

    m_current_storage_isValid = ::OpenAPI::fromJsonValue(m_current_storage, json[QString("current_storage")]);
    m_current_storage_isSet = !json[QString("current_storage")].isNull() && m_current_storage_isValid;

    m_deleted_files_counted_in_minimum_isValid = ::OpenAPI::fromJsonValue(m_deleted_files_counted_in_minimum, json[QString("deleted_files_counted_in_minimum")]);
    m_deleted_files_counted_in_minimum_isSet = !json[QString("deleted_files_counted_in_minimum")].isNull() && m_deleted_files_counted_in_minimum_isValid;

    m_deleted_files_storage_isValid = ::OpenAPI::fromJsonValue(m_deleted_files_storage, json[QString("deleted_files_storage")]);
    m_deleted_files_storage_isSet = !json[QString("deleted_files_storage")].isNull() && m_deleted_files_storage_isValid;

    m_end_at_isValid = ::OpenAPI::fromJsonValue(m_end_at, json[QString("end_at")]);
    m_end_at_isSet = !json[QString("end_at")].isNull() && m_end_at_isValid;

    m_high_water_storage_isValid = ::OpenAPI::fromJsonValue(m_high_water_storage, json[QString("high_water_storage")]);
    m_high_water_storage_isSet = !json[QString("high_water_storage")].isNull() && m_high_water_storage_isValid;

    m_high_water_user_count_isValid = ::OpenAPI::fromJsonValue(m_high_water_user_count, json[QString("high_water_user_count")]);
    m_high_water_user_count_isSet = !json[QString("high_water_user_count")].isNull() && m_high_water_user_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_root_storage_isValid = ::OpenAPI::fromJsonValue(m_root_storage, json[QString("root_storage")]);
    m_root_storage_isSet = !json[QString("root_storage")].isNull() && m_root_storage_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("start_at")]);
    m_start_at_isSet = !json[QString("start_at")].isNull() && m_start_at_isValid;

    m_sync_bytes_received_isValid = ::OpenAPI::fromJsonValue(m_sync_bytes_received, json[QString("sync_bytes_received")]);
    m_sync_bytes_received_isSet = !json[QString("sync_bytes_received")].isNull() && m_sync_bytes_received_isValid;

    m_sync_bytes_sent_isValid = ::OpenAPI::fromJsonValue(m_sync_bytes_sent, json[QString("sync_bytes_sent")]);
    m_sync_bytes_sent_isSet = !json[QString("sync_bytes_sent")].isNull() && m_sync_bytes_sent_isValid;

    m_total_billable_transfer_usage_isValid = ::OpenAPI::fromJsonValue(m_total_billable_transfer_usage, json[QString("total_billable_transfer_usage")]);
    m_total_billable_transfer_usage_isSet = !json[QString("total_billable_transfer_usage")].isNull() && m_total_billable_transfer_usage_isValid;

    m_total_billable_usage_isValid = ::OpenAPI::fromJsonValue(m_total_billable_usage, json[QString("total_billable_usage")]);
    m_total_billable_usage_isSet = !json[QString("total_billable_usage")].isNull() && m_total_billable_usage_isValid;

    m_usage_by_top_level_dir_isValid = ::OpenAPI::fromJsonValue(m_usage_by_top_level_dir, json[QString("usage_by_top_level_dir")]);
    m_usage_by_top_level_dir_isSet = !json[QString("usage_by_top_level_dir")].isNull() && m_usage_by_top_level_dir_isValid;
}

QString OAIUsageSnapshotEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageSnapshotEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_sent_isSet) {
        obj.insert(QString("bytes_sent"), ::OpenAPI::toJsonValue(m_bytes_sent));
    }
    if (m_current_storage_isSet) {
        obj.insert(QString("current_storage"), ::OpenAPI::toJsonValue(m_current_storage));
    }
    if (m_deleted_files_counted_in_minimum_isSet) {
        obj.insert(QString("deleted_files_counted_in_minimum"), ::OpenAPI::toJsonValue(m_deleted_files_counted_in_minimum));
    }
    if (m_deleted_files_storage_isSet) {
        obj.insert(QString("deleted_files_storage"), ::OpenAPI::toJsonValue(m_deleted_files_storage));
    }
    if (m_end_at_isSet) {
        obj.insert(QString("end_at"), ::OpenAPI::toJsonValue(m_end_at));
    }
    if (m_high_water_storage_isSet) {
        obj.insert(QString("high_water_storage"), ::OpenAPI::toJsonValue(m_high_water_storage));
    }
    if (m_high_water_user_count_isSet) {
        obj.insert(QString("high_water_user_count"), ::OpenAPI::toJsonValue(m_high_water_user_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_root_storage_isSet) {
        obj.insert(QString("root_storage"), ::OpenAPI::toJsonValue(m_root_storage));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("start_at"), ::OpenAPI::toJsonValue(m_start_at));
    }
    if (m_sync_bytes_received_isSet) {
        obj.insert(QString("sync_bytes_received"), ::OpenAPI::toJsonValue(m_sync_bytes_received));
    }
    if (m_sync_bytes_sent_isSet) {
        obj.insert(QString("sync_bytes_sent"), ::OpenAPI::toJsonValue(m_sync_bytes_sent));
    }
    if (m_total_billable_transfer_usage_isSet) {
        obj.insert(QString("total_billable_transfer_usage"), ::OpenAPI::toJsonValue(m_total_billable_transfer_usage));
    }
    if (m_total_billable_usage_isSet) {
        obj.insert(QString("total_billable_usage"), ::OpenAPI::toJsonValue(m_total_billable_usage));
    }
    if (m_usage_by_top_level_dir_isSet) {
        obj.insert(QString("usage_by_top_level_dir"), ::OpenAPI::toJsonValue(m_usage_by_top_level_dir));
    }
    return obj;
}

double OAIUsageSnapshotEntity::getBytesSent() const {
    return m_bytes_sent;
}
void OAIUsageSnapshotEntity::setBytesSent(const double &bytes_sent) {
    m_bytes_sent = bytes_sent;
    m_bytes_sent_isSet = true;
}

bool OAIUsageSnapshotEntity::is_bytes_sent_Set() const{
    return m_bytes_sent_isSet;
}

bool OAIUsageSnapshotEntity::is_bytes_sent_Valid() const{
    return m_bytes_sent_isValid;
}

double OAIUsageSnapshotEntity::getCurrentStorage() const {
    return m_current_storage;
}
void OAIUsageSnapshotEntity::setCurrentStorage(const double &current_storage) {
    m_current_storage = current_storage;
    m_current_storage_isSet = true;
}

bool OAIUsageSnapshotEntity::is_current_storage_Set() const{
    return m_current_storage_isSet;
}

bool OAIUsageSnapshotEntity::is_current_storage_Valid() const{
    return m_current_storage_isValid;
}

double OAIUsageSnapshotEntity::getDeletedFilesCountedInMinimum() const {
    return m_deleted_files_counted_in_minimum;
}
void OAIUsageSnapshotEntity::setDeletedFilesCountedInMinimum(const double &deleted_files_counted_in_minimum) {
    m_deleted_files_counted_in_minimum = deleted_files_counted_in_minimum;
    m_deleted_files_counted_in_minimum_isSet = true;
}

bool OAIUsageSnapshotEntity::is_deleted_files_counted_in_minimum_Set() const{
    return m_deleted_files_counted_in_minimum_isSet;
}

bool OAIUsageSnapshotEntity::is_deleted_files_counted_in_minimum_Valid() const{
    return m_deleted_files_counted_in_minimum_isValid;
}

double OAIUsageSnapshotEntity::getDeletedFilesStorage() const {
    return m_deleted_files_storage;
}
void OAIUsageSnapshotEntity::setDeletedFilesStorage(const double &deleted_files_storage) {
    m_deleted_files_storage = deleted_files_storage;
    m_deleted_files_storage_isSet = true;
}

bool OAIUsageSnapshotEntity::is_deleted_files_storage_Set() const{
    return m_deleted_files_storage_isSet;
}

bool OAIUsageSnapshotEntity::is_deleted_files_storage_Valid() const{
    return m_deleted_files_storage_isValid;
}

QDateTime OAIUsageSnapshotEntity::getEndAt() const {
    return m_end_at;
}
void OAIUsageSnapshotEntity::setEndAt(const QDateTime &end_at) {
    m_end_at = end_at;
    m_end_at_isSet = true;
}

bool OAIUsageSnapshotEntity::is_end_at_Set() const{
    return m_end_at_isSet;
}

bool OAIUsageSnapshotEntity::is_end_at_Valid() const{
    return m_end_at_isValid;
}

double OAIUsageSnapshotEntity::getHighWaterStorage() const {
    return m_high_water_storage;
}
void OAIUsageSnapshotEntity::setHighWaterStorage(const double &high_water_storage) {
    m_high_water_storage = high_water_storage;
    m_high_water_storage_isSet = true;
}

bool OAIUsageSnapshotEntity::is_high_water_storage_Set() const{
    return m_high_water_storage_isSet;
}

bool OAIUsageSnapshotEntity::is_high_water_storage_Valid() const{
    return m_high_water_storage_isValid;
}

double OAIUsageSnapshotEntity::getHighWaterUserCount() const {
    return m_high_water_user_count;
}
void OAIUsageSnapshotEntity::setHighWaterUserCount(const double &high_water_user_count) {
    m_high_water_user_count = high_water_user_count;
    m_high_water_user_count_isSet = true;
}

bool OAIUsageSnapshotEntity::is_high_water_user_count_Set() const{
    return m_high_water_user_count_isSet;
}

bool OAIUsageSnapshotEntity::is_high_water_user_count_Valid() const{
    return m_high_water_user_count_isValid;
}

qint32 OAIUsageSnapshotEntity::getId() const {
    return m_id;
}
void OAIUsageSnapshotEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUsageSnapshotEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUsageSnapshotEntity::is_id_Valid() const{
    return m_id_isValid;
}

double OAIUsageSnapshotEntity::getRootStorage() const {
    return m_root_storage;
}
void OAIUsageSnapshotEntity::setRootStorage(const double &root_storage) {
    m_root_storage = root_storage;
    m_root_storage_isSet = true;
}

bool OAIUsageSnapshotEntity::is_root_storage_Set() const{
    return m_root_storage_isSet;
}

bool OAIUsageSnapshotEntity::is_root_storage_Valid() const{
    return m_root_storage_isValid;
}

QDateTime OAIUsageSnapshotEntity::getStartAt() const {
    return m_start_at;
}
void OAIUsageSnapshotEntity::setStartAt(const QDateTime &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAIUsageSnapshotEntity::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAIUsageSnapshotEntity::is_start_at_Valid() const{
    return m_start_at_isValid;
}

double OAIUsageSnapshotEntity::getSyncBytesReceived() const {
    return m_sync_bytes_received;
}
void OAIUsageSnapshotEntity::setSyncBytesReceived(const double &sync_bytes_received) {
    m_sync_bytes_received = sync_bytes_received;
    m_sync_bytes_received_isSet = true;
}

bool OAIUsageSnapshotEntity::is_sync_bytes_received_Set() const{
    return m_sync_bytes_received_isSet;
}

bool OAIUsageSnapshotEntity::is_sync_bytes_received_Valid() const{
    return m_sync_bytes_received_isValid;
}

double OAIUsageSnapshotEntity::getSyncBytesSent() const {
    return m_sync_bytes_sent;
}
void OAIUsageSnapshotEntity::setSyncBytesSent(const double &sync_bytes_sent) {
    m_sync_bytes_sent = sync_bytes_sent;
    m_sync_bytes_sent_isSet = true;
}

bool OAIUsageSnapshotEntity::is_sync_bytes_sent_Set() const{
    return m_sync_bytes_sent_isSet;
}

bool OAIUsageSnapshotEntity::is_sync_bytes_sent_Valid() const{
    return m_sync_bytes_sent_isValid;
}

double OAIUsageSnapshotEntity::getTotalBillableTransferUsage() const {
    return m_total_billable_transfer_usage;
}
void OAIUsageSnapshotEntity::setTotalBillableTransferUsage(const double &total_billable_transfer_usage) {
    m_total_billable_transfer_usage = total_billable_transfer_usage;
    m_total_billable_transfer_usage_isSet = true;
}

bool OAIUsageSnapshotEntity::is_total_billable_transfer_usage_Set() const{
    return m_total_billable_transfer_usage_isSet;
}

bool OAIUsageSnapshotEntity::is_total_billable_transfer_usage_Valid() const{
    return m_total_billable_transfer_usage_isValid;
}

double OAIUsageSnapshotEntity::getTotalBillableUsage() const {
    return m_total_billable_usage;
}
void OAIUsageSnapshotEntity::setTotalBillableUsage(const double &total_billable_usage) {
    m_total_billable_usage = total_billable_usage;
    m_total_billable_usage_isSet = true;
}

bool OAIUsageSnapshotEntity::is_total_billable_usage_Set() const{
    return m_total_billable_usage_isSet;
}

bool OAIUsageSnapshotEntity::is_total_billable_usage_Valid() const{
    return m_total_billable_usage_isValid;
}

OAIObject OAIUsageSnapshotEntity::getUsageByTopLevelDir() const {
    return m_usage_by_top_level_dir;
}
void OAIUsageSnapshotEntity::setUsageByTopLevelDir(const OAIObject &usage_by_top_level_dir) {
    m_usage_by_top_level_dir = usage_by_top_level_dir;
    m_usage_by_top_level_dir_isSet = true;
}

bool OAIUsageSnapshotEntity::is_usage_by_top_level_dir_Set() const{
    return m_usage_by_top_level_dir_isSet;
}

bool OAIUsageSnapshotEntity::is_usage_by_top_level_dir_Valid() const{
    return m_usage_by_top_level_dir_isValid;
}

bool OAIUsageSnapshotEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_files_counted_in_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_files_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_water_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_water_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_bytes_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_bytes_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_billable_transfer_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_billable_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_by_top_level_dir_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageSnapshotEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
