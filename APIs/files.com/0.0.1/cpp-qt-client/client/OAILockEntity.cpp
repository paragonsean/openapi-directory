/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILockEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILockEntity::OAILockEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILockEntity::OAILockEntity() {
    this->initializeModel();
}

OAILockEntity::~OAILockEntity() {}

void OAILockEntity::initializeModel() {

    m_allow_access_by_any_user_isSet = false;
    m_allow_access_by_any_user_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_exclusive_isSet = false;
    m_exclusive_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_recursive_isSet = false;
    m_recursive_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAILockEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILockEntity::fromJsonObject(QJsonObject json) {

    m_allow_access_by_any_user_isValid = ::OpenAPI::fromJsonValue(m_allow_access_by_any_user, json[QString("allow_access_by_any_user")]);
    m_allow_access_by_any_user_isSet = !json[QString("allow_access_by_any_user")].isNull() && m_allow_access_by_any_user_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_exclusive_isValid = ::OpenAPI::fromJsonValue(m_exclusive, json[QString("exclusive")]);
    m_exclusive_isSet = !json[QString("exclusive")].isNull() && m_exclusive_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_recursive_isValid = ::OpenAPI::fromJsonValue(m_recursive, json[QString("recursive")]);
    m_recursive_isSet = !json[QString("recursive")].isNull() && m_recursive_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAILockEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILockEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_access_by_any_user_isSet) {
        obj.insert(QString("allow_access_by_any_user"), ::OpenAPI::toJsonValue(m_allow_access_by_any_user));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_exclusive_isSet) {
        obj.insert(QString("exclusive"), ::OpenAPI::toJsonValue(m_exclusive));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_recursive_isSet) {
        obj.insert(QString("recursive"), ::OpenAPI::toJsonValue(m_recursive));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAILockEntity::isAllowAccessByAnyUser() const {
    return m_allow_access_by_any_user;
}
void OAILockEntity::setAllowAccessByAnyUser(const bool &allow_access_by_any_user) {
    m_allow_access_by_any_user = allow_access_by_any_user;
    m_allow_access_by_any_user_isSet = true;
}

bool OAILockEntity::is_allow_access_by_any_user_Set() const{
    return m_allow_access_by_any_user_isSet;
}

bool OAILockEntity::is_allow_access_by_any_user_Valid() const{
    return m_allow_access_by_any_user_isValid;
}

QString OAILockEntity::getDepth() const {
    return m_depth;
}
void OAILockEntity::setDepth(const QString &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAILockEntity::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAILockEntity::is_depth_Valid() const{
    return m_depth_isValid;
}

bool OAILockEntity::isExclusive() const {
    return m_exclusive;
}
void OAILockEntity::setExclusive(const bool &exclusive) {
    m_exclusive = exclusive;
    m_exclusive_isSet = true;
}

bool OAILockEntity::is_exclusive_Set() const{
    return m_exclusive_isSet;
}

bool OAILockEntity::is_exclusive_Valid() const{
    return m_exclusive_isValid;
}

QString OAILockEntity::getOwner() const {
    return m_owner;
}
void OAILockEntity::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAILockEntity::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAILockEntity::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAILockEntity::getPath() const {
    return m_path;
}
void OAILockEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAILockEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAILockEntity::is_path_Valid() const{
    return m_path_isValid;
}

bool OAILockEntity::isRecursive() const {
    return m_recursive;
}
void OAILockEntity::setRecursive(const bool &recursive) {
    m_recursive = recursive;
    m_recursive_isSet = true;
}

bool OAILockEntity::is_recursive_Set() const{
    return m_recursive_isSet;
}

bool OAILockEntity::is_recursive_Valid() const{
    return m_recursive_isValid;
}

QString OAILockEntity::getScope() const {
    return m_scope;
}
void OAILockEntity::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAILockEntity::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAILockEntity::is_scope_Valid() const{
    return m_scope_isValid;
}

qint32 OAILockEntity::getTimeout() const {
    return m_timeout;
}
void OAILockEntity::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAILockEntity::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAILockEntity::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAILockEntity::getToken() const {
    return m_token;
}
void OAILockEntity::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAILockEntity::is_token_Set() const{
    return m_token_isSet;
}

bool OAILockEntity::is_token_Valid() const{
    return m_token_isValid;
}

QString OAILockEntity::getType() const {
    return m_type;
}
void OAILockEntity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILockEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAILockEntity::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAILockEntity::getUserId() const {
    return m_user_id;
}
void OAILockEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAILockEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAILockEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAILockEntity::getUsername() const {
    return m_username;
}
void OAILockEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAILockEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAILockEntity::is_username_Valid() const{
    return m_username_isValid;
}

bool OAILockEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_access_by_any_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recursive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILockEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
