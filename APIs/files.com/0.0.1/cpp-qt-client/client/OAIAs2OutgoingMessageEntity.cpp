/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAs2OutgoingMessageEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAs2OutgoingMessageEntity::OAIAs2OutgoingMessageEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAs2OutgoingMessageEntity::OAIAs2OutgoingMessageEntity() {
    this->initializeModel();
}

OAIAs2OutgoingMessageEntity::~OAIAs2OutgoingMessageEntity() {}

void OAIAs2OutgoingMessageEntity::initializeModel() {

    m_activity_log_isSet = false;
    m_activity_log_isValid = false;

    m_as2_from_isSet = false;
    m_as2_from_isValid = false;

    m_as2_partner_id_isSet = false;
    m_as2_partner_id_isValid = false;

    m_as2_station_id_isSet = false;
    m_as2_station_id_isValid = false;

    m_as2_to_isSet = false;
    m_as2_to_isValid = false;

    m_attachment_filename_isSet = false;
    m_attachment_filename_isValid = false;

    m_body_size_isSet = false;
    m_body_size_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_encrypted_uri_isSet = false;
    m_encrypted_uri_isValid = false;

    m_http_headers_isSet = false;
    m_http_headers_isValid = false;

    m_http_response_code_isSet = false;
    m_http_response_code_isValid = false;

    m_http_response_headers_isSet = false;
    m_http_response_headers_isValid = false;

    m_http_transmission_duration_isSet = false;
    m_http_transmission_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mdn_message_id_matched_isSet = false;
    m_mdn_message_id_matched_isValid = false;

    m_mdn_mic_matched_isSet = false;
    m_mdn_mic_matched_isValid = false;

    m_mdn_processing_success_isSet = false;
    m_mdn_processing_success_isValid = false;

    m_mdn_received_isSet = false;
    m_mdn_received_isValid = false;

    m_mdn_response_uri_isSet = false;
    m_mdn_response_uri_isValid = false;

    m_mdn_signature_verified_isSet = false;
    m_mdn_signature_verified_isValid = false;

    m_mdn_valid_isSet = false;
    m_mdn_valid_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_mic_isSet = false;
    m_mic_isValid = false;

    m_mic_sha_256_isSet = false;
    m_mic_sha_256_isValid = false;

    m_processing_result_isSet = false;
    m_processing_result_isValid = false;

    m_processing_result_description_isSet = false;
    m_processing_result_description_isValid = false;

    m_raw_uri_isSet = false;
    m_raw_uri_isValid = false;

    m_smime_signed_uri_isSet = false;
    m_smime_signed_uri_isValid = false;

    m_smime_uri_isSet = false;
    m_smime_uri_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIAs2OutgoingMessageEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAs2OutgoingMessageEntity::fromJsonObject(QJsonObject json) {

    m_activity_log_isValid = ::OpenAPI::fromJsonValue(m_activity_log, json[QString("activity_log")]);
    m_activity_log_isSet = !json[QString("activity_log")].isNull() && m_activity_log_isValid;

    m_as2_from_isValid = ::OpenAPI::fromJsonValue(m_as2_from, json[QString("as2_from")]);
    m_as2_from_isSet = !json[QString("as2_from")].isNull() && m_as2_from_isValid;

    m_as2_partner_id_isValid = ::OpenAPI::fromJsonValue(m_as2_partner_id, json[QString("as2_partner_id")]);
    m_as2_partner_id_isSet = !json[QString("as2_partner_id")].isNull() && m_as2_partner_id_isValid;

    m_as2_station_id_isValid = ::OpenAPI::fromJsonValue(m_as2_station_id, json[QString("as2_station_id")]);
    m_as2_station_id_isSet = !json[QString("as2_station_id")].isNull() && m_as2_station_id_isValid;

    m_as2_to_isValid = ::OpenAPI::fromJsonValue(m_as2_to, json[QString("as2_to")]);
    m_as2_to_isSet = !json[QString("as2_to")].isNull() && m_as2_to_isValid;

    m_attachment_filename_isValid = ::OpenAPI::fromJsonValue(m_attachment_filename, json[QString("attachment_filename")]);
    m_attachment_filename_isSet = !json[QString("attachment_filename")].isNull() && m_attachment_filename_isValid;

    m_body_size_isValid = ::OpenAPI::fromJsonValue(m_body_size, json[QString("body_size")]);
    m_body_size_isSet = !json[QString("body_size")].isNull() && m_body_size_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_encrypted_uri_isValid = ::OpenAPI::fromJsonValue(m_encrypted_uri, json[QString("encrypted_uri")]);
    m_encrypted_uri_isSet = !json[QString("encrypted_uri")].isNull() && m_encrypted_uri_isValid;

    m_http_headers_isValid = ::OpenAPI::fromJsonValue(m_http_headers, json[QString("http_headers")]);
    m_http_headers_isSet = !json[QString("http_headers")].isNull() && m_http_headers_isValid;

    m_http_response_code_isValid = ::OpenAPI::fromJsonValue(m_http_response_code, json[QString("http_response_code")]);
    m_http_response_code_isSet = !json[QString("http_response_code")].isNull() && m_http_response_code_isValid;

    m_http_response_headers_isValid = ::OpenAPI::fromJsonValue(m_http_response_headers, json[QString("http_response_headers")]);
    m_http_response_headers_isSet = !json[QString("http_response_headers")].isNull() && m_http_response_headers_isValid;

    m_http_transmission_duration_isValid = ::OpenAPI::fromJsonValue(m_http_transmission_duration, json[QString("http_transmission_duration")]);
    m_http_transmission_duration_isSet = !json[QString("http_transmission_duration")].isNull() && m_http_transmission_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mdn_message_id_matched_isValid = ::OpenAPI::fromJsonValue(m_mdn_message_id_matched, json[QString("mdn_message_id_matched")]);
    m_mdn_message_id_matched_isSet = !json[QString("mdn_message_id_matched")].isNull() && m_mdn_message_id_matched_isValid;

    m_mdn_mic_matched_isValid = ::OpenAPI::fromJsonValue(m_mdn_mic_matched, json[QString("mdn_mic_matched")]);
    m_mdn_mic_matched_isSet = !json[QString("mdn_mic_matched")].isNull() && m_mdn_mic_matched_isValid;

    m_mdn_processing_success_isValid = ::OpenAPI::fromJsonValue(m_mdn_processing_success, json[QString("mdn_processing_success")]);
    m_mdn_processing_success_isSet = !json[QString("mdn_processing_success")].isNull() && m_mdn_processing_success_isValid;

    m_mdn_received_isValid = ::OpenAPI::fromJsonValue(m_mdn_received, json[QString("mdn_received")]);
    m_mdn_received_isSet = !json[QString("mdn_received")].isNull() && m_mdn_received_isValid;

    m_mdn_response_uri_isValid = ::OpenAPI::fromJsonValue(m_mdn_response_uri, json[QString("mdn_response_uri")]);
    m_mdn_response_uri_isSet = !json[QString("mdn_response_uri")].isNull() && m_mdn_response_uri_isValid;

    m_mdn_signature_verified_isValid = ::OpenAPI::fromJsonValue(m_mdn_signature_verified, json[QString("mdn_signature_verified")]);
    m_mdn_signature_verified_isSet = !json[QString("mdn_signature_verified")].isNull() && m_mdn_signature_verified_isValid;

    m_mdn_valid_isValid = ::OpenAPI::fromJsonValue(m_mdn_valid, json[QString("mdn_valid")]);
    m_mdn_valid_isSet = !json[QString("mdn_valid")].isNull() && m_mdn_valid_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_mic_isValid = ::OpenAPI::fromJsonValue(m_mic, json[QString("mic")]);
    m_mic_isSet = !json[QString("mic")].isNull() && m_mic_isValid;

    m_mic_sha_256_isValid = ::OpenAPI::fromJsonValue(m_mic_sha_256, json[QString("mic_sha_256")]);
    m_mic_sha_256_isSet = !json[QString("mic_sha_256")].isNull() && m_mic_sha_256_isValid;

    m_processing_result_isValid = ::OpenAPI::fromJsonValue(m_processing_result, json[QString("processing_result")]);
    m_processing_result_isSet = !json[QString("processing_result")].isNull() && m_processing_result_isValid;

    m_processing_result_description_isValid = ::OpenAPI::fromJsonValue(m_processing_result_description, json[QString("processing_result_description")]);
    m_processing_result_description_isSet = !json[QString("processing_result_description")].isNull() && m_processing_result_description_isValid;

    m_raw_uri_isValid = ::OpenAPI::fromJsonValue(m_raw_uri, json[QString("raw_uri")]);
    m_raw_uri_isSet = !json[QString("raw_uri")].isNull() && m_raw_uri_isValid;

    m_smime_signed_uri_isValid = ::OpenAPI::fromJsonValue(m_smime_signed_uri, json[QString("smime_signed_uri")]);
    m_smime_signed_uri_isSet = !json[QString("smime_signed_uri")].isNull() && m_smime_signed_uri_isValid;

    m_smime_uri_isValid = ::OpenAPI::fromJsonValue(m_smime_uri, json[QString("smime_uri")]);
    m_smime_uri_isSet = !json[QString("smime_uri")].isNull() && m_smime_uri_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIAs2OutgoingMessageEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAs2OutgoingMessageEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_log_isSet) {
        obj.insert(QString("activity_log"), ::OpenAPI::toJsonValue(m_activity_log));
    }
    if (m_as2_from_isSet) {
        obj.insert(QString("as2_from"), ::OpenAPI::toJsonValue(m_as2_from));
    }
    if (m_as2_partner_id_isSet) {
        obj.insert(QString("as2_partner_id"), ::OpenAPI::toJsonValue(m_as2_partner_id));
    }
    if (m_as2_station_id_isSet) {
        obj.insert(QString("as2_station_id"), ::OpenAPI::toJsonValue(m_as2_station_id));
    }
    if (m_as2_to_isSet) {
        obj.insert(QString("as2_to"), ::OpenAPI::toJsonValue(m_as2_to));
    }
    if (m_attachment_filename_isSet) {
        obj.insert(QString("attachment_filename"), ::OpenAPI::toJsonValue(m_attachment_filename));
    }
    if (m_body_size_isSet) {
        obj.insert(QString("body_size"), ::OpenAPI::toJsonValue(m_body_size));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_encrypted_uri_isSet) {
        obj.insert(QString("encrypted_uri"), ::OpenAPI::toJsonValue(m_encrypted_uri));
    }
    if (m_http_headers_isSet) {
        obj.insert(QString("http_headers"), ::OpenAPI::toJsonValue(m_http_headers));
    }
    if (m_http_response_code_isSet) {
        obj.insert(QString("http_response_code"), ::OpenAPI::toJsonValue(m_http_response_code));
    }
    if (m_http_response_headers_isSet) {
        obj.insert(QString("http_response_headers"), ::OpenAPI::toJsonValue(m_http_response_headers));
    }
    if (m_http_transmission_duration_isSet) {
        obj.insert(QString("http_transmission_duration"), ::OpenAPI::toJsonValue(m_http_transmission_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mdn_message_id_matched_isSet) {
        obj.insert(QString("mdn_message_id_matched"), ::OpenAPI::toJsonValue(m_mdn_message_id_matched));
    }
    if (m_mdn_mic_matched_isSet) {
        obj.insert(QString("mdn_mic_matched"), ::OpenAPI::toJsonValue(m_mdn_mic_matched));
    }
    if (m_mdn_processing_success_isSet) {
        obj.insert(QString("mdn_processing_success"), ::OpenAPI::toJsonValue(m_mdn_processing_success));
    }
    if (m_mdn_received_isSet) {
        obj.insert(QString("mdn_received"), ::OpenAPI::toJsonValue(m_mdn_received));
    }
    if (m_mdn_response_uri_isSet) {
        obj.insert(QString("mdn_response_uri"), ::OpenAPI::toJsonValue(m_mdn_response_uri));
    }
    if (m_mdn_signature_verified_isSet) {
        obj.insert(QString("mdn_signature_verified"), ::OpenAPI::toJsonValue(m_mdn_signature_verified));
    }
    if (m_mdn_valid_isSet) {
        obj.insert(QString("mdn_valid"), ::OpenAPI::toJsonValue(m_mdn_valid));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_mic_isSet) {
        obj.insert(QString("mic"), ::OpenAPI::toJsonValue(m_mic));
    }
    if (m_mic_sha_256_isSet) {
        obj.insert(QString("mic_sha_256"), ::OpenAPI::toJsonValue(m_mic_sha_256));
    }
    if (m_processing_result_isSet) {
        obj.insert(QString("processing_result"), ::OpenAPI::toJsonValue(m_processing_result));
    }
    if (m_processing_result_description_isSet) {
        obj.insert(QString("processing_result_description"), ::OpenAPI::toJsonValue(m_processing_result_description));
    }
    if (m_raw_uri_isSet) {
        obj.insert(QString("raw_uri"), ::OpenAPI::toJsonValue(m_raw_uri));
    }
    if (m_smime_signed_uri_isSet) {
        obj.insert(QString("smime_signed_uri"), ::OpenAPI::toJsonValue(m_smime_signed_uri));
    }
    if (m_smime_uri_isSet) {
        obj.insert(QString("smime_uri"), ::OpenAPI::toJsonValue(m_smime_uri));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIAs2OutgoingMessageEntity::getActivityLog() const {
    return m_activity_log;
}
void OAIAs2OutgoingMessageEntity::setActivityLog(const QString &activity_log) {
    m_activity_log = activity_log;
    m_activity_log_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_activity_log_Set() const{
    return m_activity_log_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_activity_log_Valid() const{
    return m_activity_log_isValid;
}

QString OAIAs2OutgoingMessageEntity::getAs2From() const {
    return m_as2_from;
}
void OAIAs2OutgoingMessageEntity::setAs2From(const QString &as2_from) {
    m_as2_from = as2_from;
    m_as2_from_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_as2_from_Set() const{
    return m_as2_from_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_as2_from_Valid() const{
    return m_as2_from_isValid;
}

qint32 OAIAs2OutgoingMessageEntity::getAs2PartnerId() const {
    return m_as2_partner_id;
}
void OAIAs2OutgoingMessageEntity::setAs2PartnerId(const qint32 &as2_partner_id) {
    m_as2_partner_id = as2_partner_id;
    m_as2_partner_id_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_as2_partner_id_Set() const{
    return m_as2_partner_id_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_as2_partner_id_Valid() const{
    return m_as2_partner_id_isValid;
}

qint32 OAIAs2OutgoingMessageEntity::getAs2StationId() const {
    return m_as2_station_id;
}
void OAIAs2OutgoingMessageEntity::setAs2StationId(const qint32 &as2_station_id) {
    m_as2_station_id = as2_station_id;
    m_as2_station_id_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_as2_station_id_Set() const{
    return m_as2_station_id_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_as2_station_id_Valid() const{
    return m_as2_station_id_isValid;
}

QString OAIAs2OutgoingMessageEntity::getAs2To() const {
    return m_as2_to;
}
void OAIAs2OutgoingMessageEntity::setAs2To(const QString &as2_to) {
    m_as2_to = as2_to;
    m_as2_to_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_as2_to_Set() const{
    return m_as2_to_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_as2_to_Valid() const{
    return m_as2_to_isValid;
}

QString OAIAs2OutgoingMessageEntity::getAttachmentFilename() const {
    return m_attachment_filename;
}
void OAIAs2OutgoingMessageEntity::setAttachmentFilename(const QString &attachment_filename) {
    m_attachment_filename = attachment_filename;
    m_attachment_filename_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_attachment_filename_Set() const{
    return m_attachment_filename_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_attachment_filename_Valid() const{
    return m_attachment_filename_isValid;
}

QString OAIAs2OutgoingMessageEntity::getBodySize() const {
    return m_body_size;
}
void OAIAs2OutgoingMessageEntity::setBodySize(const QString &body_size) {
    m_body_size = body_size;
    m_body_size_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_body_size_Set() const{
    return m_body_size_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_body_size_Valid() const{
    return m_body_size_isValid;
}

QDateTime OAIAs2OutgoingMessageEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIAs2OutgoingMessageEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAs2OutgoingMessageEntity::getDate() const {
    return m_date;
}
void OAIAs2OutgoingMessageEntity::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIAs2OutgoingMessageEntity::getEncryptedUri() const {
    return m_encrypted_uri;
}
void OAIAs2OutgoingMessageEntity::setEncryptedUri(const QString &encrypted_uri) {
    m_encrypted_uri = encrypted_uri;
    m_encrypted_uri_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_encrypted_uri_Set() const{
    return m_encrypted_uri_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_encrypted_uri_Valid() const{
    return m_encrypted_uri_isValid;
}

OAIObject OAIAs2OutgoingMessageEntity::getHttpHeaders() const {
    return m_http_headers;
}
void OAIAs2OutgoingMessageEntity::setHttpHeaders(const OAIObject &http_headers) {
    m_http_headers = http_headers;
    m_http_headers_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_http_headers_Set() const{
    return m_http_headers_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_http_headers_Valid() const{
    return m_http_headers_isValid;
}

QString OAIAs2OutgoingMessageEntity::getHttpResponseCode() const {
    return m_http_response_code;
}
void OAIAs2OutgoingMessageEntity::setHttpResponseCode(const QString &http_response_code) {
    m_http_response_code = http_response_code;
    m_http_response_code_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_http_response_code_Set() const{
    return m_http_response_code_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_http_response_code_Valid() const{
    return m_http_response_code_isValid;
}

OAIObject OAIAs2OutgoingMessageEntity::getHttpResponseHeaders() const {
    return m_http_response_headers;
}
void OAIAs2OutgoingMessageEntity::setHttpResponseHeaders(const OAIObject &http_response_headers) {
    m_http_response_headers = http_response_headers;
    m_http_response_headers_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_http_response_headers_Set() const{
    return m_http_response_headers_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_http_response_headers_Valid() const{
    return m_http_response_headers_isValid;
}

double OAIAs2OutgoingMessageEntity::getHttpTransmissionDuration() const {
    return m_http_transmission_duration;
}
void OAIAs2OutgoingMessageEntity::setHttpTransmissionDuration(const double &http_transmission_duration) {
    m_http_transmission_duration = http_transmission_duration;
    m_http_transmission_duration_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_http_transmission_duration_Set() const{
    return m_http_transmission_duration_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_http_transmission_duration_Valid() const{
    return m_http_transmission_duration_isValid;
}

qint32 OAIAs2OutgoingMessageEntity::getId() const {
    return m_id;
}
void OAIAs2OutgoingMessageEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAs2OutgoingMessageEntity::isMdnMessageIdMatched() const {
    return m_mdn_message_id_matched;
}
void OAIAs2OutgoingMessageEntity::setMdnMessageIdMatched(const bool &mdn_message_id_matched) {
    m_mdn_message_id_matched = mdn_message_id_matched;
    m_mdn_message_id_matched_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_message_id_matched_Set() const{
    return m_mdn_message_id_matched_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_message_id_matched_Valid() const{
    return m_mdn_message_id_matched_isValid;
}

bool OAIAs2OutgoingMessageEntity::isMdnMicMatched() const {
    return m_mdn_mic_matched;
}
void OAIAs2OutgoingMessageEntity::setMdnMicMatched(const bool &mdn_mic_matched) {
    m_mdn_mic_matched = mdn_mic_matched;
    m_mdn_mic_matched_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_mic_matched_Set() const{
    return m_mdn_mic_matched_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_mic_matched_Valid() const{
    return m_mdn_mic_matched_isValid;
}

bool OAIAs2OutgoingMessageEntity::isMdnProcessingSuccess() const {
    return m_mdn_processing_success;
}
void OAIAs2OutgoingMessageEntity::setMdnProcessingSuccess(const bool &mdn_processing_success) {
    m_mdn_processing_success = mdn_processing_success;
    m_mdn_processing_success_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_processing_success_Set() const{
    return m_mdn_processing_success_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_processing_success_Valid() const{
    return m_mdn_processing_success_isValid;
}

bool OAIAs2OutgoingMessageEntity::isMdnReceived() const {
    return m_mdn_received;
}
void OAIAs2OutgoingMessageEntity::setMdnReceived(const bool &mdn_received) {
    m_mdn_received = mdn_received;
    m_mdn_received_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_received_Set() const{
    return m_mdn_received_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_received_Valid() const{
    return m_mdn_received_isValid;
}

QString OAIAs2OutgoingMessageEntity::getMdnResponseUri() const {
    return m_mdn_response_uri;
}
void OAIAs2OutgoingMessageEntity::setMdnResponseUri(const QString &mdn_response_uri) {
    m_mdn_response_uri = mdn_response_uri;
    m_mdn_response_uri_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_response_uri_Set() const{
    return m_mdn_response_uri_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_response_uri_Valid() const{
    return m_mdn_response_uri_isValid;
}

bool OAIAs2OutgoingMessageEntity::isMdnSignatureVerified() const {
    return m_mdn_signature_verified;
}
void OAIAs2OutgoingMessageEntity::setMdnSignatureVerified(const bool &mdn_signature_verified) {
    m_mdn_signature_verified = mdn_signature_verified;
    m_mdn_signature_verified_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_signature_verified_Set() const{
    return m_mdn_signature_verified_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_signature_verified_Valid() const{
    return m_mdn_signature_verified_isValid;
}

bool OAIAs2OutgoingMessageEntity::isMdnValid() const {
    return m_mdn_valid;
}
void OAIAs2OutgoingMessageEntity::setMdnValid(const bool &mdn_valid) {
    m_mdn_valid = mdn_valid;
    m_mdn_valid_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_valid_Set() const{
    return m_mdn_valid_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mdn_valid_Valid() const{
    return m_mdn_valid_isValid;
}

QString OAIAs2OutgoingMessageEntity::getMessageId() const {
    return m_message_id;
}
void OAIAs2OutgoingMessageEntity::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIAs2OutgoingMessageEntity::getMic() const {
    return m_mic;
}
void OAIAs2OutgoingMessageEntity::setMic(const QString &mic) {
    m_mic = mic;
    m_mic_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mic_Set() const{
    return m_mic_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mic_Valid() const{
    return m_mic_isValid;
}

QString OAIAs2OutgoingMessageEntity::getMicSha256() const {
    return m_mic_sha_256;
}
void OAIAs2OutgoingMessageEntity::setMicSha256(const QString &mic_sha_256) {
    m_mic_sha_256 = mic_sha_256;
    m_mic_sha_256_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_mic_sha_256_Set() const{
    return m_mic_sha_256_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_mic_sha_256_Valid() const{
    return m_mic_sha_256_isValid;
}

QString OAIAs2OutgoingMessageEntity::getProcessingResult() const {
    return m_processing_result;
}
void OAIAs2OutgoingMessageEntity::setProcessingResult(const QString &processing_result) {
    m_processing_result = processing_result;
    m_processing_result_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_processing_result_Set() const{
    return m_processing_result_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_processing_result_Valid() const{
    return m_processing_result_isValid;
}

QString OAIAs2OutgoingMessageEntity::getProcessingResultDescription() const {
    return m_processing_result_description;
}
void OAIAs2OutgoingMessageEntity::setProcessingResultDescription(const QString &processing_result_description) {
    m_processing_result_description = processing_result_description;
    m_processing_result_description_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_processing_result_description_Set() const{
    return m_processing_result_description_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_processing_result_description_Valid() const{
    return m_processing_result_description_isValid;
}

QString OAIAs2OutgoingMessageEntity::getRawUri() const {
    return m_raw_uri;
}
void OAIAs2OutgoingMessageEntity::setRawUri(const QString &raw_uri) {
    m_raw_uri = raw_uri;
    m_raw_uri_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_raw_uri_Set() const{
    return m_raw_uri_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_raw_uri_Valid() const{
    return m_raw_uri_isValid;
}

QString OAIAs2OutgoingMessageEntity::getSmimeSignedUri() const {
    return m_smime_signed_uri;
}
void OAIAs2OutgoingMessageEntity::setSmimeSignedUri(const QString &smime_signed_uri) {
    m_smime_signed_uri = smime_signed_uri;
    m_smime_signed_uri_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_smime_signed_uri_Set() const{
    return m_smime_signed_uri_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_smime_signed_uri_Valid() const{
    return m_smime_signed_uri_isValid;
}

QString OAIAs2OutgoingMessageEntity::getSmimeUri() const {
    return m_smime_uri;
}
void OAIAs2OutgoingMessageEntity::setSmimeUri(const QString &smime_uri) {
    m_smime_uri = smime_uri;
    m_smime_uri_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_smime_uri_Set() const{
    return m_smime_uri_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_smime_uri_Valid() const{
    return m_smime_uri_isValid;
}

QString OAIAs2OutgoingMessageEntity::getUuid() const {
    return m_uuid;
}
void OAIAs2OutgoingMessageEntity::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIAs2OutgoingMessageEntity::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIAs2OutgoingMessageEntity::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIAs2OutgoingMessageEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as2_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as2_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as2_station_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as2_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_response_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_transmission_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_message_id_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_mic_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_processing_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_response_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_signature_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mic_sha_256_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_result_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smime_signed_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smime_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAs2OutgoingMessageEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
