/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileCommentEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileCommentEntity::OAIFileCommentEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileCommentEntity::OAIFileCommentEntity() {
    this->initializeModel();
}

OAIFileCommentEntity::~OAIFileCommentEntity() {}

void OAIFileCommentEntity::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;
}

void OAIFileCommentEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileCommentEntity::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;
}

QString OAIFileCommentEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileCommentEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reactions.size() > 0) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    return obj;
}

QString OAIFileCommentEntity::getBody() const {
    return m_body;
}
void OAIFileCommentEntity::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIFileCommentEntity::is_body_Set() const{
    return m_body_isSet;
}

bool OAIFileCommentEntity::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAIFileCommentEntity::getId() const {
    return m_id;
}
void OAIFileCommentEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFileCommentEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFileCommentEntity::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIFileCommentReactionEntity> OAIFileCommentEntity::getReactions() const {
    return m_reactions;
}
void OAIFileCommentEntity::setReactions(const QList<OAIFileCommentReactionEntity> &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIFileCommentEntity::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIFileCommentEntity::is_reactions_Valid() const{
    return m_reactions_isValid;
}

bool OAIFileCommentEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileCommentEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
