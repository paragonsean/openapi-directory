/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRemoteServerConfigurationFileEntity.h
 *
 * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
 */

#ifndef OAIRemoteServerConfigurationFileEntity_H
#define OAIRemoteServerConfigurationFileEntity_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRemoteServerConfigurationFileEntity : public OAIObject {
public:
    OAIRemoteServerConfigurationFileEntity();
    OAIRemoteServerConfigurationFileEntity(QString json);
    ~OAIRemoteServerConfigurationFileEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApiToken() const;
    void setApiToken(const QString &api_token);
    bool is_api_token_Set() const;
    bool is_api_token_Valid() const;

    QString getConfigVersion() const;
    void setConfigVersion(const QString &config_version);
    bool is_config_version_Set() const;
    bool is_config_version_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getPermissionSet() const;
    void setPermissionSet(const QString &permission_set);
    bool is_permission_set_Set() const;
    bool is_permission_set_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getPrivateKey() const;
    void setPrivateKey(const QString &private_key);
    bool is_private_key_Set() const;
    bool is_private_key_Valid() const;

    QString getPublicKey() const;
    void setPublicKey(const QString &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    QString getRoot() const;
    void setRoot(const QString &root);
    bool is_root_Set() const;
    bool is_root_Valid() const;

    QString getServerHostKey() const;
    void setServerHostKey(const QString &server_host_key);
    bool is_server_host_key_Set() const;
    bool is_server_host_key_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubdomain() const;
    void setSubdomain(const QString &subdomain);
    bool is_subdomain_Set() const;
    bool is_subdomain_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_api_token;
    bool m_api_token_isSet;
    bool m_api_token_isValid;

    QString m_config_version;
    bool m_config_version_isSet;
    bool m_config_version_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_permission_set;
    bool m_permission_set_isSet;
    bool m_permission_set_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_private_key;
    bool m_private_key_isSet;
    bool m_private_key_isValid;

    QString m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    QString m_root;
    bool m_root_isSet;
    bool m_root_isValid;

    QString m_server_host_key;
    bool m_server_host_key_isSet;
    bool m_server_host_key_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_subdomain;
    bool m_subdomain_isSet;
    bool m_subdomain_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRemoteServerConfigurationFileEntity)

#endif // OAIRemoteServerConfigurationFileEntity_H
