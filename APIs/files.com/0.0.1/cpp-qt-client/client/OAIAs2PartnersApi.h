/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAs2PartnersApi_H
#define OAI_OAIAs2PartnersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAs2PartnerEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAs2PartnersApi : public QObject {
    Q_OBJECT

public:
    OAIAs2PartnersApi(const int timeOut = 0);
    ~OAIAs2PartnersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteAs2PartnersId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getAs2Partners(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getAs2PartnersId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  enable_dedicated_ips bool [optional]
    * @param[in]  name QString [optional]
    * @param[in]  public_certificate QString [optional]
    * @param[in]  server_certificate QString [optional]
    * @param[in]  uri QString [optional]
    */
    virtual void patchAs2PartnersId(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &enable_dedicated_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &server_certificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &uri = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  as2_station_id qint32 [required]
    * @param[in]  name QString [required]
    * @param[in]  public_certificate QString [required]
    * @param[in]  uri QString [required]
    * @param[in]  enable_dedicated_ips bool [optional]
    * @param[in]  server_certificate QString [optional]
    */
    virtual void postAs2Partners(const qint32 &as2_station_id, const QString &name, const QString &public_certificate, const QString &uri, const ::OpenAPI::OptionalParam<bool> &enable_dedicated_ips = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &server_certificate = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAs2PartnersIdCallback(OAIHttpRequestWorker *worker);
    void getAs2PartnersCallback(OAIHttpRequestWorker *worker);
    void getAs2PartnersIdCallback(OAIHttpRequestWorker *worker);
    void patchAs2PartnersIdCallback(OAIHttpRequestWorker *worker);
    void postAs2PartnersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAs2PartnersIdSignal();
    void getAs2PartnersSignal(QList<OAIAs2PartnerEntity> summary);
    void getAs2PartnersIdSignal(OAIAs2PartnerEntity summary);
    void patchAs2PartnersIdSignal(OAIAs2PartnerEntity summary);
    void postAs2PartnersSignal(OAIAs2PartnerEntity summary);


    void deleteAs2PartnersIdSignalFull(OAIHttpRequestWorker *worker);
    void getAs2PartnersSignalFull(OAIHttpRequestWorker *worker, QList<OAIAs2PartnerEntity> summary);
    void getAs2PartnersIdSignalFull(OAIHttpRequestWorker *worker, OAIAs2PartnerEntity summary);
    void patchAs2PartnersIdSignalFull(OAIHttpRequestWorker *worker, OAIAs2PartnerEntity summary);
    void postAs2PartnersSignalFull(OAIHttpRequestWorker *worker, OAIAs2PartnerEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteAs2PartnersIdSignalError() instead")
    void deleteAs2PartnersIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAs2PartnersIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2PartnersSignalError() instead")
    void getAs2PartnersSignalE(QList<OAIAs2PartnerEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2PartnersSignalError(QList<OAIAs2PartnerEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2PartnersIdSignalError() instead")
    void getAs2PartnersIdSignalE(OAIAs2PartnerEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2PartnersIdSignalError(OAIAs2PartnerEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAs2PartnersIdSignalError() instead")
    void patchAs2PartnersIdSignalE(OAIAs2PartnerEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAs2PartnersIdSignalError(OAIAs2PartnerEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAs2PartnersSignalError() instead")
    void postAs2PartnersSignalE(OAIAs2PartnerEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAs2PartnersSignalError(OAIAs2PartnerEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAs2PartnersIdSignalErrorFull() instead")
    void deleteAs2PartnersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAs2PartnersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2PartnersSignalErrorFull() instead")
    void getAs2PartnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2PartnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2PartnersIdSignalErrorFull() instead")
    void getAs2PartnersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2PartnersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAs2PartnersIdSignalErrorFull() instead")
    void patchAs2PartnersIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAs2PartnersIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAs2PartnersSignalErrorFull() instead")
    void postAs2PartnersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAs2PartnersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
