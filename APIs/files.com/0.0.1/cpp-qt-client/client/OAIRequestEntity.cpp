/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestEntity::OAIRequestEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestEntity::OAIRequestEntity() {
    this->initializeModel();
}

OAIRequestEntity::~OAIRequestEntity() {}

void OAIRequestEntity::initializeModel() {

    m_automation_id_isSet = false;
    m_automation_id_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_user_display_name_isSet = false;
    m_user_display_name_isValid = false;
}

void OAIRequestEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestEntity::fromJsonObject(QJsonObject json) {

    m_automation_id_isValid = ::OpenAPI::fromJsonValue(m_automation_id, json[QString("automation_id")]);
    m_automation_id_isSet = !json[QString("automation_id")].isNull() && m_automation_id_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_user_display_name_isValid = ::OpenAPI::fromJsonValue(m_user_display_name, json[QString("user_display_name")]);
    m_user_display_name_isSet = !json[QString("user_display_name")].isNull() && m_user_display_name_isValid;
}

QString OAIRequestEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_automation_id_isSet) {
        obj.insert(QString("automation_id"), ::OpenAPI::toJsonValue(m_automation_id));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_user_display_name_isSet) {
        obj.insert(QString("user_display_name"), ::OpenAPI::toJsonValue(m_user_display_name));
    }
    return obj;
}

QString OAIRequestEntity::getAutomationId() const {
    return m_automation_id;
}
void OAIRequestEntity::setAutomationId(const QString &automation_id) {
    m_automation_id = automation_id;
    m_automation_id_isSet = true;
}

bool OAIRequestEntity::is_automation_id_Set() const{
    return m_automation_id_isSet;
}

bool OAIRequestEntity::is_automation_id_Valid() const{
    return m_automation_id_isValid;
}

QString OAIRequestEntity::getDestination() const {
    return m_destination;
}
void OAIRequestEntity::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIRequestEntity::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIRequestEntity::is_destination_Valid() const{
    return m_destination_isValid;
}

qint32 OAIRequestEntity::getId() const {
    return m_id;
}
void OAIRequestEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRequestEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRequestEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRequestEntity::getPath() const {
    return m_path;
}
void OAIRequestEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRequestEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRequestEntity::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIRequestEntity::getSource() const {
    return m_source;
}
void OAIRequestEntity::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRequestEntity::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRequestEntity::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIRequestEntity::getUserDisplayName() const {
    return m_user_display_name;
}
void OAIRequestEntity::setUserDisplayName(const QString &user_display_name) {
    m_user_display_name = user_display_name;
    m_user_display_name_isSet = true;
}

bool OAIRequestEntity::is_user_display_name_Set() const{
    return m_user_display_name_isSet;
}

bool OAIRequestEntity::is_user_display_name_Valid() const{
    return m_user_display_name_isValid;
}

bool OAIRequestEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
