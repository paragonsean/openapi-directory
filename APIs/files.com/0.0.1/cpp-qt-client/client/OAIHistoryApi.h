/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHistoryApi_H
#define OAI_OAIHistoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActionEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHistoryApi : public QObject {
    Q_OBJECT

public:
    OAIHistoryApi(const int timeOut = 0);
    ~OAIHistoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  start_at QDateTime [optional]
    * @param[in]  end_at QDateTime [optional]
    * @param[in]  display QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_prefix OAIObject [optional]
    */
    virtual void historyList(const ::OpenAPI::OptionalParam<QDateTime> &start_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_prefix = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  start_at QDateTime [optional]
    * @param[in]  end_at QDateTime [optional]
    * @param[in]  display QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void historyListForFile(const QString &path, const ::OpenAPI::OptionalParam<QDateTime> &start_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  start_at QDateTime [optional]
    * @param[in]  end_at QDateTime [optional]
    * @param[in]  display QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void historyListForFolder(const QString &path, const ::OpenAPI::OptionalParam<QDateTime> &start_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  start_at QDateTime [optional]
    * @param[in]  end_at QDateTime [optional]
    * @param[in]  display QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void historyListForUser(const qint32 &user_id, const ::OpenAPI::OptionalParam<QDateTime> &start_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  start_at QDateTime [optional]
    * @param[in]  end_at QDateTime [optional]
    * @param[in]  display QString [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    */
    virtual void historyListLogins(const ::OpenAPI::OptionalParam<QDateTime> &start_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_at = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &display = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void historyListCallback(OAIHttpRequestWorker *worker);
    void historyListForFileCallback(OAIHttpRequestWorker *worker);
    void historyListForFolderCallback(OAIHttpRequestWorker *worker);
    void historyListForUserCallback(OAIHttpRequestWorker *worker);
    void historyListLoginsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void historyListSignal(QList<OAIActionEntity> summary);
    void historyListForFileSignal(QList<OAIActionEntity> summary);
    void historyListForFolderSignal(QList<OAIActionEntity> summary);
    void historyListForUserSignal(QList<OAIActionEntity> summary);
    void historyListLoginsSignal(QList<OAIActionEntity> summary);


    void historyListSignalFull(OAIHttpRequestWorker *worker, QList<OAIActionEntity> summary);
    void historyListForFileSignalFull(OAIHttpRequestWorker *worker, QList<OAIActionEntity> summary);
    void historyListForFolderSignalFull(OAIHttpRequestWorker *worker, QList<OAIActionEntity> summary);
    void historyListForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIActionEntity> summary);
    void historyListLoginsSignalFull(OAIHttpRequestWorker *worker, QList<OAIActionEntity> summary);

    Q_DECL_DEPRECATED_X("Use historyListSignalError() instead")
    void historyListSignalE(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListSignalError(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListForFileSignalError() instead")
    void historyListForFileSignalE(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListForFileSignalError(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListForFolderSignalError() instead")
    void historyListForFolderSignalE(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListForFolderSignalError(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListForUserSignalError() instead")
    void historyListForUserSignalE(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListForUserSignalError(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListLoginsSignalError() instead")
    void historyListLoginsSignalE(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListLoginsSignalError(QList<OAIActionEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use historyListSignalErrorFull() instead")
    void historyListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListForFileSignalErrorFull() instead")
    void historyListForFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListForFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListForFolderSignalErrorFull() instead")
    void historyListForFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListForFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListForUserSignalErrorFull() instead")
    void historyListForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use historyListLoginsSignalErrorFull() instead")
    void historyListLoginsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void historyListLoginsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
