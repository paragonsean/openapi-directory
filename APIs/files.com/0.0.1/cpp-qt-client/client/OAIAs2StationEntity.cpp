/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAs2StationEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAs2StationEntity::OAIAs2StationEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAs2StationEntity::OAIAs2StationEntity() {
    this->initializeModel();
}

OAIAs2StationEntity::~OAIAs2StationEntity() {}

void OAIAs2StationEntity::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_hex_public_certificate_serial_isSet = false;
    m_hex_public_certificate_serial_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_private_key_md5_isSet = false;
    m_private_key_md5_isValid = false;

    m_private_key_password_md5_isSet = false;
    m_private_key_password_md5_isValid = false;

    m_public_certificate_issuer_isSet = false;
    m_public_certificate_issuer_isValid = false;

    m_public_certificate_md5_isSet = false;
    m_public_certificate_md5_isValid = false;

    m_public_certificate_not_after_isSet = false;
    m_public_certificate_not_after_isValid = false;

    m_public_certificate_not_before_isSet = false;
    m_public_certificate_not_before_isValid = false;

    m_public_certificate_serial_isSet = false;
    m_public_certificate_serial_isValid = false;

    m_public_certificate_subject_isSet = false;
    m_public_certificate_subject_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIAs2StationEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAs2StationEntity::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_hex_public_certificate_serial_isValid = ::OpenAPI::fromJsonValue(m_hex_public_certificate_serial, json[QString("hex_public_certificate_serial")]);
    m_hex_public_certificate_serial_isSet = !json[QString("hex_public_certificate_serial")].isNull() && m_hex_public_certificate_serial_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_private_key_md5_isValid = ::OpenAPI::fromJsonValue(m_private_key_md5, json[QString("private_key_md5")]);
    m_private_key_md5_isSet = !json[QString("private_key_md5")].isNull() && m_private_key_md5_isValid;

    m_private_key_password_md5_isValid = ::OpenAPI::fromJsonValue(m_private_key_password_md5, json[QString("private_key_password_md5")]);
    m_private_key_password_md5_isSet = !json[QString("private_key_password_md5")].isNull() && m_private_key_password_md5_isValid;

    m_public_certificate_issuer_isValid = ::OpenAPI::fromJsonValue(m_public_certificate_issuer, json[QString("public_certificate_issuer")]);
    m_public_certificate_issuer_isSet = !json[QString("public_certificate_issuer")].isNull() && m_public_certificate_issuer_isValid;

    m_public_certificate_md5_isValid = ::OpenAPI::fromJsonValue(m_public_certificate_md5, json[QString("public_certificate_md5")]);
    m_public_certificate_md5_isSet = !json[QString("public_certificate_md5")].isNull() && m_public_certificate_md5_isValid;

    m_public_certificate_not_after_isValid = ::OpenAPI::fromJsonValue(m_public_certificate_not_after, json[QString("public_certificate_not_after")]);
    m_public_certificate_not_after_isSet = !json[QString("public_certificate_not_after")].isNull() && m_public_certificate_not_after_isValid;

    m_public_certificate_not_before_isValid = ::OpenAPI::fromJsonValue(m_public_certificate_not_before, json[QString("public_certificate_not_before")]);
    m_public_certificate_not_before_isSet = !json[QString("public_certificate_not_before")].isNull() && m_public_certificate_not_before_isValid;

    m_public_certificate_serial_isValid = ::OpenAPI::fromJsonValue(m_public_certificate_serial, json[QString("public_certificate_serial")]);
    m_public_certificate_serial_isSet = !json[QString("public_certificate_serial")].isNull() && m_public_certificate_serial_isValid;

    m_public_certificate_subject_isValid = ::OpenAPI::fromJsonValue(m_public_certificate_subject, json[QString("public_certificate_subject")]);
    m_public_certificate_subject_isSet = !json[QString("public_certificate_subject")].isNull() && m_public_certificate_subject_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIAs2StationEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAs2StationEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_hex_public_certificate_serial_isSet) {
        obj.insert(QString("hex_public_certificate_serial"), ::OpenAPI::toJsonValue(m_hex_public_certificate_serial));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_private_key_md5_isSet) {
        obj.insert(QString("private_key_md5"), ::OpenAPI::toJsonValue(m_private_key_md5));
    }
    if (m_private_key_password_md5_isSet) {
        obj.insert(QString("private_key_password_md5"), ::OpenAPI::toJsonValue(m_private_key_password_md5));
    }
    if (m_public_certificate_issuer_isSet) {
        obj.insert(QString("public_certificate_issuer"), ::OpenAPI::toJsonValue(m_public_certificate_issuer));
    }
    if (m_public_certificate_md5_isSet) {
        obj.insert(QString("public_certificate_md5"), ::OpenAPI::toJsonValue(m_public_certificate_md5));
    }
    if (m_public_certificate_not_after_isSet) {
        obj.insert(QString("public_certificate_not_after"), ::OpenAPI::toJsonValue(m_public_certificate_not_after));
    }
    if (m_public_certificate_not_before_isSet) {
        obj.insert(QString("public_certificate_not_before"), ::OpenAPI::toJsonValue(m_public_certificate_not_before));
    }
    if (m_public_certificate_serial_isSet) {
        obj.insert(QString("public_certificate_serial"), ::OpenAPI::toJsonValue(m_public_certificate_serial));
    }
    if (m_public_certificate_subject_isSet) {
        obj.insert(QString("public_certificate_subject"), ::OpenAPI::toJsonValue(m_public_certificate_subject));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIAs2StationEntity::getDomain() const {
    return m_domain;
}
void OAIAs2StationEntity::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAs2StationEntity::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAs2StationEntity::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIAs2StationEntity::getHexPublicCertificateSerial() const {
    return m_hex_public_certificate_serial;
}
void OAIAs2StationEntity::setHexPublicCertificateSerial(const QString &hex_public_certificate_serial) {
    m_hex_public_certificate_serial = hex_public_certificate_serial;
    m_hex_public_certificate_serial_isSet = true;
}

bool OAIAs2StationEntity::is_hex_public_certificate_serial_Set() const{
    return m_hex_public_certificate_serial_isSet;
}

bool OAIAs2StationEntity::is_hex_public_certificate_serial_Valid() const{
    return m_hex_public_certificate_serial_isValid;
}

qint32 OAIAs2StationEntity::getId() const {
    return m_id;
}
void OAIAs2StationEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAs2StationEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAs2StationEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAs2StationEntity::getName() const {
    return m_name;
}
void OAIAs2StationEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAs2StationEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAs2StationEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAs2StationEntity::getPrivateKeyMd5() const {
    return m_private_key_md5;
}
void OAIAs2StationEntity::setPrivateKeyMd5(const QString &private_key_md5) {
    m_private_key_md5 = private_key_md5;
    m_private_key_md5_isSet = true;
}

bool OAIAs2StationEntity::is_private_key_md5_Set() const{
    return m_private_key_md5_isSet;
}

bool OAIAs2StationEntity::is_private_key_md5_Valid() const{
    return m_private_key_md5_isValid;
}

QString OAIAs2StationEntity::getPrivateKeyPasswordMd5() const {
    return m_private_key_password_md5;
}
void OAIAs2StationEntity::setPrivateKeyPasswordMd5(const QString &private_key_password_md5) {
    m_private_key_password_md5 = private_key_password_md5;
    m_private_key_password_md5_isSet = true;
}

bool OAIAs2StationEntity::is_private_key_password_md5_Set() const{
    return m_private_key_password_md5_isSet;
}

bool OAIAs2StationEntity::is_private_key_password_md5_Valid() const{
    return m_private_key_password_md5_isValid;
}

QString OAIAs2StationEntity::getPublicCertificateIssuer() const {
    return m_public_certificate_issuer;
}
void OAIAs2StationEntity::setPublicCertificateIssuer(const QString &public_certificate_issuer) {
    m_public_certificate_issuer = public_certificate_issuer;
    m_public_certificate_issuer_isSet = true;
}

bool OAIAs2StationEntity::is_public_certificate_issuer_Set() const{
    return m_public_certificate_issuer_isSet;
}

bool OAIAs2StationEntity::is_public_certificate_issuer_Valid() const{
    return m_public_certificate_issuer_isValid;
}

QString OAIAs2StationEntity::getPublicCertificateMd5() const {
    return m_public_certificate_md5;
}
void OAIAs2StationEntity::setPublicCertificateMd5(const QString &public_certificate_md5) {
    m_public_certificate_md5 = public_certificate_md5;
    m_public_certificate_md5_isSet = true;
}

bool OAIAs2StationEntity::is_public_certificate_md5_Set() const{
    return m_public_certificate_md5_isSet;
}

bool OAIAs2StationEntity::is_public_certificate_md5_Valid() const{
    return m_public_certificate_md5_isValid;
}

QString OAIAs2StationEntity::getPublicCertificateNotAfter() const {
    return m_public_certificate_not_after;
}
void OAIAs2StationEntity::setPublicCertificateNotAfter(const QString &public_certificate_not_after) {
    m_public_certificate_not_after = public_certificate_not_after;
    m_public_certificate_not_after_isSet = true;
}

bool OAIAs2StationEntity::is_public_certificate_not_after_Set() const{
    return m_public_certificate_not_after_isSet;
}

bool OAIAs2StationEntity::is_public_certificate_not_after_Valid() const{
    return m_public_certificate_not_after_isValid;
}

QString OAIAs2StationEntity::getPublicCertificateNotBefore() const {
    return m_public_certificate_not_before;
}
void OAIAs2StationEntity::setPublicCertificateNotBefore(const QString &public_certificate_not_before) {
    m_public_certificate_not_before = public_certificate_not_before;
    m_public_certificate_not_before_isSet = true;
}

bool OAIAs2StationEntity::is_public_certificate_not_before_Set() const{
    return m_public_certificate_not_before_isSet;
}

bool OAIAs2StationEntity::is_public_certificate_not_before_Valid() const{
    return m_public_certificate_not_before_isValid;
}

QString OAIAs2StationEntity::getPublicCertificateSerial() const {
    return m_public_certificate_serial;
}
void OAIAs2StationEntity::setPublicCertificateSerial(const QString &public_certificate_serial) {
    m_public_certificate_serial = public_certificate_serial;
    m_public_certificate_serial_isSet = true;
}

bool OAIAs2StationEntity::is_public_certificate_serial_Set() const{
    return m_public_certificate_serial_isSet;
}

bool OAIAs2StationEntity::is_public_certificate_serial_Valid() const{
    return m_public_certificate_serial_isValid;
}

QString OAIAs2StationEntity::getPublicCertificateSubject() const {
    return m_public_certificate_subject;
}
void OAIAs2StationEntity::setPublicCertificateSubject(const QString &public_certificate_subject) {
    m_public_certificate_subject = public_certificate_subject;
    m_public_certificate_subject_isSet = true;
}

bool OAIAs2StationEntity::is_public_certificate_subject_Set() const{
    return m_public_certificate_subject_isSet;
}

bool OAIAs2StationEntity::is_public_certificate_subject_Valid() const{
    return m_public_certificate_subject_isValid;
}

QString OAIAs2StationEntity::getUri() const {
    return m_uri;
}
void OAIAs2StationEntity::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIAs2StationEntity::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIAs2StationEntity::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIAs2StationEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_public_certificate_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_password_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_certificate_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_certificate_md5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_certificate_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_certificate_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_certificate_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_certificate_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAs2StationEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
