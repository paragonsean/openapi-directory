/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUsageDailySnapshotEntity.h
 *
 * List Usage Daily Snapshots
 */

#ifndef OAIUsageDailySnapshotEntity_H
#define OAIUsageDailySnapshotEntity_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDate>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUsageDailySnapshotEntity : public OAIObject {
public:
    OAIUsageDailySnapshotEntity();
    OAIUsageDailySnapshotEntity(QString json);
    ~OAIUsageDailySnapshotEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isApiUsageAvailable() const;
    void setApiUsageAvailable(const bool &api_usage_available);
    bool is_api_usage_available_Set() const;
    bool is_api_usage_available_Valid() const;

    qint32 getCurrentStorage() const;
    void setCurrentStorage(const qint32 &current_storage);
    bool is_current_storage_Set() const;
    bool is_current_storage_Valid() const;

    QDate getDate() const;
    void setDate(const QDate &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    qint32 getDeletedFilesCountedInMinimum() const;
    void setDeletedFilesCountedInMinimum(const qint32 &deleted_files_counted_in_minimum);
    bool is_deleted_files_counted_in_minimum_Set() const;
    bool is_deleted_files_counted_in_minimum_Valid() const;

    qint32 getDeletedFilesStorage() const;
    void setDeletedFilesStorage(const qint32 &deleted_files_storage);
    bool is_deleted_files_storage_Set() const;
    bool is_deleted_files_storage_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getReadApiUsage() const;
    void setReadApiUsage(const qint32 &read_api_usage);
    bool is_read_api_usage_Set() const;
    bool is_read_api_usage_Valid() const;

    qint32 getRootStorage() const;
    void setRootStorage(const qint32 &root_storage);
    bool is_root_storage_Set() const;
    bool is_root_storage_Valid() const;

    OAIObject getUsageByTopLevelDir() const;
    void setUsageByTopLevelDir(const OAIObject &usage_by_top_level_dir);
    bool is_usage_by_top_level_dir_Set() const;
    bool is_usage_by_top_level_dir_Valid() const;

    qint32 getUserCount() const;
    void setUserCount(const qint32 &user_count);
    bool is_user_count_Set() const;
    bool is_user_count_Valid() const;

    qint32 getWriteApiUsage() const;
    void setWriteApiUsage(const qint32 &write_api_usage);
    bool is_write_api_usage_Set() const;
    bool is_write_api_usage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_api_usage_available;
    bool m_api_usage_available_isSet;
    bool m_api_usage_available_isValid;

    qint32 m_current_storage;
    bool m_current_storage_isSet;
    bool m_current_storage_isValid;

    QDate m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    qint32 m_deleted_files_counted_in_minimum;
    bool m_deleted_files_counted_in_minimum_isSet;
    bool m_deleted_files_counted_in_minimum_isValid;

    qint32 m_deleted_files_storage;
    bool m_deleted_files_storage_isSet;
    bool m_deleted_files_storage_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_read_api_usage;
    bool m_read_api_usage_isSet;
    bool m_read_api_usage_isValid;

    qint32 m_root_storage;
    bool m_root_storage_isSet;
    bool m_root_storage_isValid;

    OAIObject m_usage_by_top_level_dir;
    bool m_usage_by_top_level_dir_isSet;
    bool m_usage_by_top_level_dir_isValid;

    qint32 m_user_count;
    bool m_user_count_isSet;
    bool m_user_count_isValid;

    qint32 m_write_api_usage;
    bool m_write_api_usage_isSet;
    bool m_write_api_usage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUsageDailySnapshotEntity)

#endif // OAIUsageDailySnapshotEntity_H
