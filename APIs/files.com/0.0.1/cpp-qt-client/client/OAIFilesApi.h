/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFileEntity.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  path QString [required]
    * @param[in]  recursive bool [optional]
    */
    virtual void deleteFilesPath(const QString &path, const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  action QString [optional]
    * @param[in]  preview_size QString [optional]
    * @param[in]  with_previews bool [optional]
    * @param[in]  with_priority_color bool [optional]
    */
    virtual void fileDownload(const QString &path, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preview_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &with_previews = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &with_priority_color = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  priority_color QString [optional]
    * @param[in]  provided_mtime QDateTime [optional]
    */
    virtual void patchFilesPath(const QString &path, const ::OpenAPI::OptionalParam<QString> &priority_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &provided_mtime = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  etags_etag QList<QString> [required]
    * @param[in]  etags_part QList<qint32> [required]
    * @param[in]  action QString [optional]
    * @param[in]  length qint32 [optional]
    * @param[in]  mkdir_parents bool [optional]
    * @param[in]  part qint32 [optional]
    * @param[in]  parts qint32 [optional]
    * @param[in]  provided_mtime QDateTime [optional]
    * @param[in]  ref QString [optional]
    * @param[in]  restart qint32 [optional]
    * @param[in]  size qint32 [optional]
    * @param[in]  structure QString [optional]
    * @param[in]  with_rename bool [optional]
    */
    virtual void postFilesPath(const QString &path, const QList<QString> &etags_etag, const QList<qint32> &etags_part, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &length = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &mkdir_parents = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &part = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &parts = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDateTime> &provided_mtime = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &ref = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &restart = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &structure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &with_rename = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteFilesPathCallback(OAIHttpRequestWorker *worker);
    void fileDownloadCallback(OAIHttpRequestWorker *worker);
    void patchFilesPathCallback(OAIHttpRequestWorker *worker);
    void postFilesPathCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteFilesPathSignal();
    void fileDownloadSignal(OAIFileEntity summary);
    void patchFilesPathSignal(OAIFileEntity summary);
    void postFilesPathSignal(OAIFileEntity summary);


    void deleteFilesPathSignalFull(OAIHttpRequestWorker *worker);
    void fileDownloadSignalFull(OAIHttpRequestWorker *worker, OAIFileEntity summary);
    void patchFilesPathSignalFull(OAIHttpRequestWorker *worker, OAIFileEntity summary);
    void postFilesPathSignalFull(OAIHttpRequestWorker *worker, OAIFileEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteFilesPathSignalError() instead")
    void deleteFilesPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFilesPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileDownloadSignalError() instead")
    void fileDownloadSignalE(OAIFileEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileDownloadSignalError(OAIFileEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFilesPathSignalError() instead")
    void patchFilesPathSignalE(OAIFileEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchFilesPathSignalError(OAIFileEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFilesPathSignalError() instead")
    void postFilesPathSignalE(OAIFileEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postFilesPathSignalError(OAIFileEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteFilesPathSignalErrorFull() instead")
    void deleteFilesPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFilesPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileDownloadSignalErrorFull() instead")
    void fileDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchFilesPathSignalErrorFull() instead")
    void patchFilesPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchFilesPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFilesPathSignalErrorFull() instead")
    void postFilesPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFilesPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
