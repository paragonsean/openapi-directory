/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserCipherUseEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserCipherUseEntity::OAIUserCipherUseEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserCipherUseEntity::OAIUserCipherUseEntity() {
    this->initializeModel();
}

OAIUserCipherUseEntity::~OAIUserCipherUseEntity() {}

void OAIUserCipherUseEntity::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_protocol_cipher_isSet = false;
    m_protocol_cipher_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUserCipherUseEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserCipherUseEntity::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_protocol_cipher_isValid = ::OpenAPI::fromJsonValue(m_protocol_cipher, json[QString("protocol_cipher")]);
    m_protocol_cipher_isSet = !json[QString("protocol_cipher")].isNull() && m_protocol_cipher_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIUserCipherUseEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserCipherUseEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_protocol_cipher_isSet) {
        obj.insert(QString("protocol_cipher"), ::OpenAPI::toJsonValue(m_protocol_cipher));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIUserCipherUseEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIUserCipherUseEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUserCipherUseEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUserCipherUseEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIUserCipherUseEntity::getId() const {
    return m_id;
}
void OAIUserCipherUseEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserCipherUseEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserCipherUseEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserCipherUseEntity::getInterface() const {
    return m_interface;
}
void OAIUserCipherUseEntity::setInterface(const QString &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIUserCipherUseEntity::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIUserCipherUseEntity::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIUserCipherUseEntity::getProtocolCipher() const {
    return m_protocol_cipher;
}
void OAIUserCipherUseEntity::setProtocolCipher(const QString &protocol_cipher) {
    m_protocol_cipher = protocol_cipher;
    m_protocol_cipher_isSet = true;
}

bool OAIUserCipherUseEntity::is_protocol_cipher_Set() const{
    return m_protocol_cipher_isSet;
}

bool OAIUserCipherUseEntity::is_protocol_cipher_Valid() const{
    return m_protocol_cipher_isValid;
}

QDateTime OAIUserCipherUseEntity::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUserCipherUseEntity::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUserCipherUseEntity::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUserCipherUseEntity::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

qint32 OAIUserCipherUseEntity::getUserId() const {
    return m_user_id;
}
void OAIUserCipherUseEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUserCipherUseEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUserCipherUseEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUserCipherUseEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_cipher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserCipherUseEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
