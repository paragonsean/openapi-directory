/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRemoteServerEntity.h
 *
 * Create Remote Server
 */

#ifndef OAIRemoteServerEntity_H
#define OAIRemoteServerEntity_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRemoteServerEntity : public OAIObject {
public:
    OAIRemoteServerEntity();
    OAIRemoteServerEntity(QString json);
    ~OAIRemoteServerEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthAccountName() const;
    void setAuthAccountName(const QString &auth_account_name);
    bool is_auth_account_name_Set() const;
    bool is_auth_account_name_Valid() const;

    QString getAuthSetupLink() const;
    void setAuthSetupLink(const QString &auth_setup_link);
    bool is_auth_setup_link_Set() const;
    bool is_auth_setup_link_Valid() const;

    QString getAuthStatus() const;
    void setAuthStatus(const QString &auth_status);
    bool is_auth_status_Set() const;
    bool is_auth_status_Valid() const;

    QString getAuthenticationMethod() const;
    void setAuthenticationMethod(const QString &authentication_method);
    bool is_authentication_method_Set() const;
    bool is_authentication_method_Valid() const;

    QString getAwsAccessKey() const;
    void setAwsAccessKey(const QString &aws_access_key);
    bool is_aws_access_key_Set() const;
    bool is_aws_access_key_Valid() const;

    QString getAzureBlobStorageAccount() const;
    void setAzureBlobStorageAccount(const QString &azure_blob_storage_account);
    bool is_azure_blob_storage_account_Set() const;
    bool is_azure_blob_storage_account_Valid() const;

    QString getAzureBlobStorageContainer() const;
    void setAzureBlobStorageContainer(const QString &azure_blob_storage_container);
    bool is_azure_blob_storage_container_Set() const;
    bool is_azure_blob_storage_container_Valid() const;

    QString getAzureBlobStorageSasToken() const;
    void setAzureBlobStorageSasToken(const QString &azure_blob_storage_sas_token);
    bool is_azure_blob_storage_sas_token_Set() const;
    bool is_azure_blob_storage_sas_token_Valid() const;

    QString getAzureFilesStorageAccount() const;
    void setAzureFilesStorageAccount(const QString &azure_files_storage_account);
    bool is_azure_files_storage_account_Set() const;
    bool is_azure_files_storage_account_Valid() const;

    QString getAzureFilesStorageSasToken() const;
    void setAzureFilesStorageSasToken(const QString &azure_files_storage_sas_token);
    bool is_azure_files_storage_sas_token_Set() const;
    bool is_azure_files_storage_sas_token_Valid() const;

    QString getAzureFilesStorageShareName() const;
    void setAzureFilesStorageShareName(const QString &azure_files_storage_share_name);
    bool is_azure_files_storage_share_name_Set() const;
    bool is_azure_files_storage_share_name_Valid() const;

    QString getBackblazeB2Bucket() const;
    void setBackblazeB2Bucket(const QString &backblaze_b2_bucket);
    bool is_backblaze_b2_bucket_Set() const;
    bool is_backblaze_b2_bucket_Valid() const;

    QString getBackblazeB2S3Endpoint() const;
    void setBackblazeB2S3Endpoint(const QString &backblaze_b2_s3_endpoint);
    bool is_backblaze_b2_s3_endpoint_Set() const;
    bool is_backblaze_b2_s3_endpoint_Valid() const;

    bool isDisabled() const;
    void setDisabled(const bool &disabled);
    bool is_disabled_Set() const;
    bool is_disabled_Valid() const;

    bool isEnableDedicatedIps() const;
    void setEnableDedicatedIps(const bool &enable_dedicated_ips);
    bool is_enable_dedicated_ips_Set() const;
    bool is_enable_dedicated_ips_Valid() const;

    QString getFilebaseAccessKey() const;
    void setFilebaseAccessKey(const QString &filebase_access_key);
    bool is_filebase_access_key_Set() const;
    bool is_filebase_access_key_Valid() const;

    QString getFilebaseBucket() const;
    void setFilebaseBucket(const QString &filebase_bucket);
    bool is_filebase_bucket_Set() const;
    bool is_filebase_bucket_Valid() const;

    QString getFilesAgentApiToken() const;
    void setFilesAgentApiToken(const QString &files_agent_api_token);
    bool is_files_agent_api_token_Set() const;
    bool is_files_agent_api_token_Valid() const;

    QString getFilesAgentPermissionSet() const;
    void setFilesAgentPermissionSet(const QString &files_agent_permission_set);
    bool is_files_agent_permission_set_Set() const;
    bool is_files_agent_permission_set_Valid() const;

    QString getFilesAgentRoot() const;
    void setFilesAgentRoot(const QString &files_agent_root);
    bool is_files_agent_root_Set() const;
    bool is_files_agent_root_Valid() const;

    QString getGoogleCloudStorageBucket() const;
    void setGoogleCloudStorageBucket(const QString &google_cloud_storage_bucket);
    bool is_google_cloud_storage_bucket_Set() const;
    bool is_google_cloud_storage_bucket_Valid() const;

    QString getGoogleCloudStorageProjectId() const;
    void setGoogleCloudStorageProjectId(const QString &google_cloud_storage_project_id);
    bool is_google_cloud_storage_project_id_Set() const;
    bool is_google_cloud_storage_project_id_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getMaxConnections() const;
    void setMaxConnections(const qint32 &max_connections);
    bool is_max_connections_Set() const;
    bool is_max_connections_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOneDriveAccountType() const;
    void setOneDriveAccountType(const QString &one_drive_account_type);
    bool is_one_drive_account_type_Set() const;
    bool is_one_drive_account_type_Valid() const;

    bool isPinToSiteRegion() const;
    void setPinToSiteRegion(const bool &pin_to_site_region);
    bool is_pin_to_site_region_Set() const;
    bool is_pin_to_site_region_Valid() const;

    QString getPinnedRegion() const;
    void setPinnedRegion(const QString &pinned_region);
    bool is_pinned_region_Set() const;
    bool is_pinned_region_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getRackspaceContainer() const;
    void setRackspaceContainer(const QString &rackspace_container);
    bool is_rackspace_container_Set() const;
    bool is_rackspace_container_Valid() const;

    QString getRackspaceRegion() const;
    void setRackspaceRegion(const QString &rackspace_region);
    bool is_rackspace_region_Set() const;
    bool is_rackspace_region_Valid() const;

    QString getRackspaceUsername() const;
    void setRackspaceUsername(const QString &rackspace_username);
    bool is_rackspace_username_Set() const;
    bool is_rackspace_username_Valid() const;

    QString getRemoteHomePath() const;
    void setRemoteHomePath(const QString &remote_home_path);
    bool is_remote_home_path_Set() const;
    bool is_remote_home_path_Valid() const;

    QString getS3Bucket() const;
    void setS3Bucket(const QString &s3_bucket);
    bool is_s3_bucket_Set() const;
    bool is_s3_bucket_Valid() const;

    QString getS3CompatibleAccessKey() const;
    void setS3CompatibleAccessKey(const QString &s3_compatible_access_key);
    bool is_s3_compatible_access_key_Set() const;
    bool is_s3_compatible_access_key_Valid() const;

    QString getS3CompatibleBucket() const;
    void setS3CompatibleBucket(const QString &s3_compatible_bucket);
    bool is_s3_compatible_bucket_Set() const;
    bool is_s3_compatible_bucket_Valid() const;

    QString getS3CompatibleEndpoint() const;
    void setS3CompatibleEndpoint(const QString &s3_compatible_endpoint);
    bool is_s3_compatible_endpoint_Set() const;
    bool is_s3_compatible_endpoint_Valid() const;

    QString getS3CompatibleRegion() const;
    void setS3CompatibleRegion(const QString &s3_compatible_region);
    bool is_s3_compatible_region_Set() const;
    bool is_s3_compatible_region_Valid() const;

    QString getS3Region() const;
    void setS3Region(const QString &s3_region);
    bool is_s3_region_Set() const;
    bool is_s3_region_Valid() const;

    QString getServerCertificate() const;
    void setServerCertificate(const QString &server_certificate);
    bool is_server_certificate_Set() const;
    bool is_server_certificate_Valid() const;

    QString getServerHostKey() const;
    void setServerHostKey(const QString &server_host_key);
    bool is_server_host_key_Set() const;
    bool is_server_host_key_Valid() const;

    QString getServerType() const;
    void setServerType(const QString &server_type);
    bool is_server_type_Set() const;
    bool is_server_type_Valid() const;

    QString getSsl() const;
    void setSsl(const QString &ssl);
    bool is_ssl_Set() const;
    bool is_ssl_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    QString getWasabiAccessKey() const;
    void setWasabiAccessKey(const QString &wasabi_access_key);
    bool is_wasabi_access_key_Set() const;
    bool is_wasabi_access_key_Valid() const;

    QString getWasabiBucket() const;
    void setWasabiBucket(const QString &wasabi_bucket);
    bool is_wasabi_bucket_Set() const;
    bool is_wasabi_bucket_Valid() const;

    QString getWasabiRegion() const;
    void setWasabiRegion(const QString &wasabi_region);
    bool is_wasabi_region_Set() const;
    bool is_wasabi_region_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auth_account_name;
    bool m_auth_account_name_isSet;
    bool m_auth_account_name_isValid;

    QString m_auth_setup_link;
    bool m_auth_setup_link_isSet;
    bool m_auth_setup_link_isValid;

    QString m_auth_status;
    bool m_auth_status_isSet;
    bool m_auth_status_isValid;

    QString m_authentication_method;
    bool m_authentication_method_isSet;
    bool m_authentication_method_isValid;

    QString m_aws_access_key;
    bool m_aws_access_key_isSet;
    bool m_aws_access_key_isValid;

    QString m_azure_blob_storage_account;
    bool m_azure_blob_storage_account_isSet;
    bool m_azure_blob_storage_account_isValid;

    QString m_azure_blob_storage_container;
    bool m_azure_blob_storage_container_isSet;
    bool m_azure_blob_storage_container_isValid;

    QString m_azure_blob_storage_sas_token;
    bool m_azure_blob_storage_sas_token_isSet;
    bool m_azure_blob_storage_sas_token_isValid;

    QString m_azure_files_storage_account;
    bool m_azure_files_storage_account_isSet;
    bool m_azure_files_storage_account_isValid;

    QString m_azure_files_storage_sas_token;
    bool m_azure_files_storage_sas_token_isSet;
    bool m_azure_files_storage_sas_token_isValid;

    QString m_azure_files_storage_share_name;
    bool m_azure_files_storage_share_name_isSet;
    bool m_azure_files_storage_share_name_isValid;

    QString m_backblaze_b2_bucket;
    bool m_backblaze_b2_bucket_isSet;
    bool m_backblaze_b2_bucket_isValid;

    QString m_backblaze_b2_s3_endpoint;
    bool m_backblaze_b2_s3_endpoint_isSet;
    bool m_backblaze_b2_s3_endpoint_isValid;

    bool m_disabled;
    bool m_disabled_isSet;
    bool m_disabled_isValid;

    bool m_enable_dedicated_ips;
    bool m_enable_dedicated_ips_isSet;
    bool m_enable_dedicated_ips_isValid;

    QString m_filebase_access_key;
    bool m_filebase_access_key_isSet;
    bool m_filebase_access_key_isValid;

    QString m_filebase_bucket;
    bool m_filebase_bucket_isSet;
    bool m_filebase_bucket_isValid;

    QString m_files_agent_api_token;
    bool m_files_agent_api_token_isSet;
    bool m_files_agent_api_token_isValid;

    QString m_files_agent_permission_set;
    bool m_files_agent_permission_set_isSet;
    bool m_files_agent_permission_set_isValid;

    QString m_files_agent_root;
    bool m_files_agent_root_isSet;
    bool m_files_agent_root_isValid;

    QString m_google_cloud_storage_bucket;
    bool m_google_cloud_storage_bucket_isSet;
    bool m_google_cloud_storage_bucket_isValid;

    QString m_google_cloud_storage_project_id;
    bool m_google_cloud_storage_project_id_isSet;
    bool m_google_cloud_storage_project_id_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_max_connections;
    bool m_max_connections_isSet;
    bool m_max_connections_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_one_drive_account_type;
    bool m_one_drive_account_type_isSet;
    bool m_one_drive_account_type_isValid;

    bool m_pin_to_site_region;
    bool m_pin_to_site_region_isSet;
    bool m_pin_to_site_region_isValid;

    QString m_pinned_region;
    bool m_pinned_region_isSet;
    bool m_pinned_region_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_rackspace_container;
    bool m_rackspace_container_isSet;
    bool m_rackspace_container_isValid;

    QString m_rackspace_region;
    bool m_rackspace_region_isSet;
    bool m_rackspace_region_isValid;

    QString m_rackspace_username;
    bool m_rackspace_username_isSet;
    bool m_rackspace_username_isValid;

    QString m_remote_home_path;
    bool m_remote_home_path_isSet;
    bool m_remote_home_path_isValid;

    QString m_s3_bucket;
    bool m_s3_bucket_isSet;
    bool m_s3_bucket_isValid;

    QString m_s3_compatible_access_key;
    bool m_s3_compatible_access_key_isSet;
    bool m_s3_compatible_access_key_isValid;

    QString m_s3_compatible_bucket;
    bool m_s3_compatible_bucket_isSet;
    bool m_s3_compatible_bucket_isValid;

    QString m_s3_compatible_endpoint;
    bool m_s3_compatible_endpoint_isSet;
    bool m_s3_compatible_endpoint_isValid;

    QString m_s3_compatible_region;
    bool m_s3_compatible_region_isSet;
    bool m_s3_compatible_region_isValid;

    QString m_s3_region;
    bool m_s3_region_isSet;
    bool m_s3_region_isValid;

    QString m_server_certificate;
    bool m_server_certificate_isSet;
    bool m_server_certificate_isValid;

    QString m_server_host_key;
    bool m_server_host_key_isSet;
    bool m_server_host_key_isValid;

    QString m_server_type;
    bool m_server_type_isSet;
    bool m_server_type_isValid;

    QString m_ssl;
    bool m_ssl_isSet;
    bool m_ssl_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QString m_wasabi_access_key;
    bool m_wasabi_access_key_isSet;
    bool m_wasabi_access_key_isValid;

    QString m_wasabi_bucket;
    bool m_wasabi_bucket_isSet;
    bool m_wasabi_bucket_isValid;

    QString m_wasabi_region;
    bool m_wasabi_region_isSet;
    bool m_wasabi_region_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRemoteServerEntity)

#endif // OAIRemoteServerEntity_H
