/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAutomationsApi_H
#define OAI_OAIAutomationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutomationEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAutomationsApi : public QObject {
    Q_OBJECT

public:
    OAIAutomationsApi(const int timeOut = 0);
    ~OAIAutomationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteAutomationsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort_by OAIObject [optional]
    * @param[in]  automation QString [optional]
    * @param[in]  filter OAIObject [optional]
    * @param[in]  filter_gt OAIObject [optional]
    * @param[in]  filter_gteq OAIObject [optional]
    * @param[in]  filter_lt OAIObject [optional]
    * @param[in]  filter_lteq OAIObject [optional]
    * @param[in]  with_deleted bool [optional]
    */
    virtual void getAutomations(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &sort_by = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &automation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &filter = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_gteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lt = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &filter_lteq = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<bool> &with_deleted = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getAutomationsId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  automation QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  destination QString [optional]
    * @param[in]  destination_replace_from QString [optional]
    * @param[in]  destination_replace_to QString [optional]
    * @param[in]  destinations QList<QString> [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  recurring_day qint32 [optional]
    * @param[in]  schedule OAIObject [optional]
    * @param[in]  source QString [optional]
    * @param[in]  sync_ids QString [optional]
    * @param[in]  trigger QString [optional]
    * @param[in]  trigger_actions QList<QString> [optional]
    * @param[in]  user_ids QString [optional]
    * @param[in]  value OAIObject [optional]
    */
    virtual void patchAutomationsId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &automation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_replace_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_replace_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &destinations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &recurring_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &schedule = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trigger = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &trigger_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &value = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  automation QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  destination QString [optional]
    * @param[in]  destination_replace_from QString [optional]
    * @param[in]  destination_replace_to QString [optional]
    * @param[in]  destinations QList<QString> [optional]
    * @param[in]  disabled bool [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  path QString [optional]
    * @param[in]  recurring_day qint32 [optional]
    * @param[in]  schedule OAIObject [optional]
    * @param[in]  source QString [optional]
    * @param[in]  sync_ids QString [optional]
    * @param[in]  trigger QString [optional]
    * @param[in]  trigger_actions QList<QString> [optional]
    * @param[in]  user_ids QString [optional]
    * @param[in]  value OAIObject [optional]
    */
    virtual void postAutomations(const QString &automation, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_replace_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &destination_replace_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &destinations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &disabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &recurring_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIObject> &schedule = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sync_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &trigger = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &trigger_actions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &user_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &value = ::OpenAPI::OptionalParam<OAIObject>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAutomationsIdCallback(OAIHttpRequestWorker *worker);
    void getAutomationsCallback(OAIHttpRequestWorker *worker);
    void getAutomationsIdCallback(OAIHttpRequestWorker *worker);
    void patchAutomationsIdCallback(OAIHttpRequestWorker *worker);
    void postAutomationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAutomationsIdSignal();
    void getAutomationsSignal(QList<OAIAutomationEntity> summary);
    void getAutomationsIdSignal(OAIAutomationEntity summary);
    void patchAutomationsIdSignal(OAIAutomationEntity summary);
    void postAutomationsSignal(OAIAutomationEntity summary);


    void deleteAutomationsIdSignalFull(OAIHttpRequestWorker *worker);
    void getAutomationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAutomationEntity> summary);
    void getAutomationsIdSignalFull(OAIHttpRequestWorker *worker, OAIAutomationEntity summary);
    void patchAutomationsIdSignalFull(OAIHttpRequestWorker *worker, OAIAutomationEntity summary);
    void postAutomationsSignalFull(OAIHttpRequestWorker *worker, OAIAutomationEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteAutomationsIdSignalError() instead")
    void deleteAutomationsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAutomationsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutomationsSignalError() instead")
    void getAutomationsSignalE(QList<OAIAutomationEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutomationsSignalError(QList<OAIAutomationEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutomationsIdSignalError() instead")
    void getAutomationsIdSignalE(OAIAutomationEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutomationsIdSignalError(OAIAutomationEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAutomationsIdSignalError() instead")
    void patchAutomationsIdSignalE(OAIAutomationEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAutomationsIdSignalError(OAIAutomationEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAutomationsSignalError() instead")
    void postAutomationsSignalE(OAIAutomationEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAutomationsSignalError(OAIAutomationEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAutomationsIdSignalErrorFull() instead")
    void deleteAutomationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAutomationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutomationsSignalErrorFull() instead")
    void getAutomationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutomationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAutomationsIdSignalErrorFull() instead")
    void getAutomationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAutomationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAutomationsIdSignalErrorFull() instead")
    void patchAutomationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAutomationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAutomationsSignalErrorFull() instead")
    void postAutomationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAutomationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
