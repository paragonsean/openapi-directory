/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAs2IncomingMessageEntity.h
 *
 * List As2 Incoming Messages
 */

#ifndef OAIAs2IncomingMessageEntity_H
#define OAIAs2IncomingMessageEntity_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAs2IncomingMessageEntity : public OAIObject {
public:
    OAIAs2IncomingMessageEntity();
    OAIAs2IncomingMessageEntity(QString json);
    ~OAIAs2IncomingMessageEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActivityLog() const;
    void setActivityLog(const QString &activity_log);
    bool is_activity_log_Set() const;
    bool is_activity_log_Valid() const;

    QString getAs2From() const;
    void setAs2From(const QString &as2_from);
    bool is_as2_from_Set() const;
    bool is_as2_from_Valid() const;

    qint32 getAs2PartnerId() const;
    void setAs2PartnerId(const qint32 &as2_partner_id);
    bool is_as2_partner_id_Set() const;
    bool is_as2_partner_id_Valid() const;

    qint32 getAs2StationId() const;
    void setAs2StationId(const qint32 &as2_station_id);
    bool is_as2_station_id_Set() const;
    bool is_as2_station_id_Valid() const;

    QString getAs2To() const;
    void setAs2To(const QString &as2_to);
    bool is_as2_to_Set() const;
    bool is_as2_to_Valid() const;

    QString getAttachmentFilename() const;
    void setAttachmentFilename(const QString &attachment_filename);
    bool is_attachment_filename_Set() const;
    bool is_attachment_filename_Valid() const;

    QString getBodySize() const;
    void setBodySize(const QString &body_size);
    bool is_body_size_Set() const;
    bool is_body_size_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDate() const;
    void setDate(const QString &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QString getEncryptedUri() const;
    void setEncryptedUri(const QString &encrypted_uri);
    bool is_encrypted_uri_Set() const;
    bool is_encrypted_uri_Valid() const;

    QString getHexRecipientSerial() const;
    void setHexRecipientSerial(const QString &hex_recipient_serial);
    bool is_hex_recipient_serial_Set() const;
    bool is_hex_recipient_serial_Valid() const;

    OAIObject getHttpHeaders() const;
    void setHttpHeaders(const OAIObject &http_headers);
    bool is_http_headers_Set() const;
    bool is_http_headers_Valid() const;

    QString getHttpResponseCode() const;
    void setHttpResponseCode(const QString &http_response_code);
    bool is_http_response_code_Set() const;
    bool is_http_response_code_Valid() const;

    OAIObject getHttpResponseHeaders() const;
    void setHttpResponseHeaders(const OAIObject &http_response_headers);
    bool is_http_response_headers_Set() const;
    bool is_http_response_headers_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIp() const;
    void setIp(const QString &ip);
    bool is_ip_Set() const;
    bool is_ip_Valid() const;

    QString getMdnResponseUri() const;
    void setMdnResponseUri(const QString &mdn_response_uri);
    bool is_mdn_response_uri_Set() const;
    bool is_mdn_response_uri_Valid() const;

    bool isMessageDecrypted() const;
    void setMessageDecrypted(const bool &message_decrypted);
    bool is_message_decrypted_Set() const;
    bool is_message_decrypted_Valid() const;

    QString getMessageId() const;
    void setMessageId(const QString &message_id);
    bool is_message_id_Set() const;
    bool is_message_id_Valid() const;

    bool isMessageMdnReturned() const;
    void setMessageMdnReturned(const bool &message_mdn_returned);
    bool is_message_mdn_returned_Set() const;
    bool is_message_mdn_returned_Valid() const;

    bool isMessageProcessingSuccess() const;
    void setMessageProcessingSuccess(const bool &message_processing_success);
    bool is_message_processing_success_Set() const;
    bool is_message_processing_success_Valid() const;

    bool isMessageReceived() const;
    void setMessageReceived(const bool &message_received);
    bool is_message_received_Set() const;
    bool is_message_received_Valid() const;

    bool isMessageSignatureVerified() const;
    void setMessageSignatureVerified(const bool &message_signature_verified);
    bool is_message_signature_verified_Set() const;
    bool is_message_signature_verified_Valid() const;

    QString getMic() const;
    void setMic(const QString &mic);
    bool is_mic_Set() const;
    bool is_mic_Valid() const;

    QString getMicAlgo() const;
    void setMicAlgo(const QString &mic_algo);
    bool is_mic_algo_Set() const;
    bool is_mic_algo_Valid() const;

    QString getProcessingResult() const;
    void setProcessingResult(const QString &processing_result);
    bool is_processing_result_Set() const;
    bool is_processing_result_Valid() const;

    QString getProcessingResultDescription() const;
    void setProcessingResultDescription(const QString &processing_result_description);
    bool is_processing_result_description_Set() const;
    bool is_processing_result_description_Valid() const;

    QString getRawUri() const;
    void setRawUri(const QString &raw_uri);
    bool is_raw_uri_Set() const;
    bool is_raw_uri_Valid() const;

    QString getRecipientIssuer() const;
    void setRecipientIssuer(const QString &recipient_issuer);
    bool is_recipient_issuer_Set() const;
    bool is_recipient_issuer_Valid() const;

    QString getRecipientSerial() const;
    void setRecipientSerial(const QString &recipient_serial);
    bool is_recipient_serial_Set() const;
    bool is_recipient_serial_Valid() const;

    QString getSmimeSignedUri() const;
    void setSmimeSignedUri(const QString &smime_signed_uri);
    bool is_smime_signed_uri_Set() const;
    bool is_smime_signed_uri_Valid() const;

    QString getSmimeUri() const;
    void setSmimeUri(const QString &smime_uri);
    bool is_smime_uri_Set() const;
    bool is_smime_uri_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_activity_log;
    bool m_activity_log_isSet;
    bool m_activity_log_isValid;

    QString m_as2_from;
    bool m_as2_from_isSet;
    bool m_as2_from_isValid;

    qint32 m_as2_partner_id;
    bool m_as2_partner_id_isSet;
    bool m_as2_partner_id_isValid;

    qint32 m_as2_station_id;
    bool m_as2_station_id_isSet;
    bool m_as2_station_id_isValid;

    QString m_as2_to;
    bool m_as2_to_isSet;
    bool m_as2_to_isValid;

    QString m_attachment_filename;
    bool m_attachment_filename_isSet;
    bool m_attachment_filename_isValid;

    QString m_body_size;
    bool m_body_size_isSet;
    bool m_body_size_isValid;

    QString m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QString m_encrypted_uri;
    bool m_encrypted_uri_isSet;
    bool m_encrypted_uri_isValid;

    QString m_hex_recipient_serial;
    bool m_hex_recipient_serial_isSet;
    bool m_hex_recipient_serial_isValid;

    OAIObject m_http_headers;
    bool m_http_headers_isSet;
    bool m_http_headers_isValid;

    QString m_http_response_code;
    bool m_http_response_code_isSet;
    bool m_http_response_code_isValid;

    OAIObject m_http_response_headers;
    bool m_http_response_headers_isSet;
    bool m_http_response_headers_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_ip;
    bool m_ip_isSet;
    bool m_ip_isValid;

    QString m_mdn_response_uri;
    bool m_mdn_response_uri_isSet;
    bool m_mdn_response_uri_isValid;

    bool m_message_decrypted;
    bool m_message_decrypted_isSet;
    bool m_message_decrypted_isValid;

    QString m_message_id;
    bool m_message_id_isSet;
    bool m_message_id_isValid;

    bool m_message_mdn_returned;
    bool m_message_mdn_returned_isSet;
    bool m_message_mdn_returned_isValid;

    bool m_message_processing_success;
    bool m_message_processing_success_isSet;
    bool m_message_processing_success_isValid;

    bool m_message_received;
    bool m_message_received_isSet;
    bool m_message_received_isValid;

    bool m_message_signature_verified;
    bool m_message_signature_verified_isSet;
    bool m_message_signature_verified_isValid;

    QString m_mic;
    bool m_mic_isSet;
    bool m_mic_isValid;

    QString m_mic_algo;
    bool m_mic_algo_isSet;
    bool m_mic_algo_isValid;

    QString m_processing_result;
    bool m_processing_result_isSet;
    bool m_processing_result_isValid;

    QString m_processing_result_description;
    bool m_processing_result_description_isSet;
    bool m_processing_result_description_isValid;

    QString m_raw_uri;
    bool m_raw_uri_isSet;
    bool m_raw_uri_isValid;

    QString m_recipient_issuer;
    bool m_recipient_issuer_isSet;
    bool m_recipient_issuer_isValid;

    QString m_recipient_serial;
    bool m_recipient_serial_isSet;
    bool m_recipient_serial_isValid;

    QString m_smime_signed_uri;
    bool m_smime_signed_uri_isSet;
    bool m_smime_signed_uri_isValid;

    QString m_smime_uri;
    bool m_smime_uri_isSet;
    bool m_smime_uri_isValid;

    QString m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAs2IncomingMessageEntity)

#endif // OAIAs2IncomingMessageEntity_H
