/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionEntity::OAISessionEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionEntity::OAISessionEntity() {
    this->initializeModel();
}

OAISessionEntity::~OAISessionEntity() {}

void OAISessionEntity::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_sftp_insecure_ciphers_isSet = false;
    m_sftp_insecure_ciphers_isValid = false;
}

void OAISessionEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionEntity::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("read_only")]);
    m_read_only_isSet = !json[QString("read_only")].isNull() && m_read_only_isValid;

    m_sftp_insecure_ciphers_isValid = ::OpenAPI::fromJsonValue(m_sftp_insecure_ciphers, json[QString("sftp_insecure_ciphers")]);
    m_sftp_insecure_ciphers_isSet = !json[QString("sftp_insecure_ciphers")].isNull() && m_sftp_insecure_ciphers_isValid;
}

QString OAISessionEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("read_only"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_sftp_insecure_ciphers_isSet) {
        obj.insert(QString("sftp_insecure_ciphers"), ::OpenAPI::toJsonValue(m_sftp_insecure_ciphers));
    }
    return obj;
}

QString OAISessionEntity::getId() const {
    return m_id;
}
void OAISessionEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISessionEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAISessionEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISessionEntity::getLanguage() const {
    return m_language;
}
void OAISessionEntity::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISessionEntity::is_language_Set() const{
    return m_language_isSet;
}

bool OAISessionEntity::is_language_Valid() const{
    return m_language_isValid;
}

bool OAISessionEntity::isReadOnly() const {
    return m_read_only;
}
void OAISessionEntity::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAISessionEntity::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAISessionEntity::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAISessionEntity::isSftpInsecureCiphers() const {
    return m_sftp_insecure_ciphers;
}
void OAISessionEntity::setSftpInsecureCiphers(const bool &sftp_insecure_ciphers) {
    m_sftp_insecure_ciphers = sftp_insecure_ciphers;
    m_sftp_insecure_ciphers_isSet = true;
}

bool OAISessionEntity::is_sftp_insecure_ciphers_Set() const{
    return m_sftp_insecure_ciphers_isSet;
}

bool OAISessionEntity::is_sftp_insecure_ciphers_Valid() const{
    return m_sftp_insecure_ciphers_isValid;
}

bool OAISessionEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sftp_insecure_ciphers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
