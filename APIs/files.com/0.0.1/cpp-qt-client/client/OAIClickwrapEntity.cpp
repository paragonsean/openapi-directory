/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClickwrapEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClickwrapEntity::OAIClickwrapEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClickwrapEntity::OAIClickwrapEntity() {
    this->initializeModel();
}

OAIClickwrapEntity::~OAIClickwrapEntity() {}

void OAIClickwrapEntity::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_use_with_bundles_isSet = false;
    m_use_with_bundles_isValid = false;

    m_use_with_inboxes_isSet = false;
    m_use_with_inboxes_isValid = false;

    m_use_with_users_isSet = false;
    m_use_with_users_isValid = false;
}

void OAIClickwrapEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClickwrapEntity::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_use_with_bundles_isValid = ::OpenAPI::fromJsonValue(m_use_with_bundles, json[QString("use_with_bundles")]);
    m_use_with_bundles_isSet = !json[QString("use_with_bundles")].isNull() && m_use_with_bundles_isValid;

    m_use_with_inboxes_isValid = ::OpenAPI::fromJsonValue(m_use_with_inboxes, json[QString("use_with_inboxes")]);
    m_use_with_inboxes_isSet = !json[QString("use_with_inboxes")].isNull() && m_use_with_inboxes_isValid;

    m_use_with_users_isValid = ::OpenAPI::fromJsonValue(m_use_with_users, json[QString("use_with_users")]);
    m_use_with_users_isSet = !json[QString("use_with_users")].isNull() && m_use_with_users_isValid;
}

QString OAIClickwrapEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClickwrapEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_use_with_bundles_isSet) {
        obj.insert(QString("use_with_bundles"), ::OpenAPI::toJsonValue(m_use_with_bundles));
    }
    if (m_use_with_inboxes_isSet) {
        obj.insert(QString("use_with_inboxes"), ::OpenAPI::toJsonValue(m_use_with_inboxes));
    }
    if (m_use_with_users_isSet) {
        obj.insert(QString("use_with_users"), ::OpenAPI::toJsonValue(m_use_with_users));
    }
    return obj;
}

QString OAIClickwrapEntity::getBody() const {
    return m_body;
}
void OAIClickwrapEntity::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIClickwrapEntity::is_body_Set() const{
    return m_body_isSet;
}

bool OAIClickwrapEntity::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAIClickwrapEntity::getId() const {
    return m_id;
}
void OAIClickwrapEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClickwrapEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClickwrapEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIClickwrapEntity::getName() const {
    return m_name;
}
void OAIClickwrapEntity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIClickwrapEntity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIClickwrapEntity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIClickwrapEntity::getUseWithBundles() const {
    return m_use_with_bundles;
}
void OAIClickwrapEntity::setUseWithBundles(const QString &use_with_bundles) {
    m_use_with_bundles = use_with_bundles;
    m_use_with_bundles_isSet = true;
}

bool OAIClickwrapEntity::is_use_with_bundles_Set() const{
    return m_use_with_bundles_isSet;
}

bool OAIClickwrapEntity::is_use_with_bundles_Valid() const{
    return m_use_with_bundles_isValid;
}

QString OAIClickwrapEntity::getUseWithInboxes() const {
    return m_use_with_inboxes;
}
void OAIClickwrapEntity::setUseWithInboxes(const QString &use_with_inboxes) {
    m_use_with_inboxes = use_with_inboxes;
    m_use_with_inboxes_isSet = true;
}

bool OAIClickwrapEntity::is_use_with_inboxes_Set() const{
    return m_use_with_inboxes_isSet;
}

bool OAIClickwrapEntity::is_use_with_inboxes_Valid() const{
    return m_use_with_inboxes_isValid;
}

QString OAIClickwrapEntity::getUseWithUsers() const {
    return m_use_with_users;
}
void OAIClickwrapEntity::setUseWithUsers(const QString &use_with_users) {
    m_use_with_users = use_with_users;
    m_use_with_users_isSet = true;
}

bool OAIClickwrapEntity::is_use_with_users_Set() const{
    return m_use_with_users_isSet;
}

bool OAIClickwrapEntity::is_use_with_users_Valid() const{
    return m_use_with_users_isValid;
}

bool OAIClickwrapEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_with_bundles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_with_inboxes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_with_users_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClickwrapEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
