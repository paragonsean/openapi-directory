/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAs2StationsApi_H
#define OAI_OAIAs2StationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAs2StationEntity.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAs2StationsApi : public QObject {
    Q_OBJECT

public:
    OAIAs2StationsApi(const int timeOut = 0);
    ~OAIAs2StationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void deleteAs2StationsId(const qint32 &id);

    /**
    * @param[in]  cursor QString [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getAs2Stations(const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void getAs2StationsId(const qint32 &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  name QString [optional]
    * @param[in]  private_key QString [optional]
    * @param[in]  private_key_password QString [optional]
    * @param[in]  public_certificate QString [optional]
    */
    virtual void patchAs2StationsId(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &private_key_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_certificate = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  private_key QString [required]
    * @param[in]  public_certificate QString [required]
    * @param[in]  private_key_password QString [optional]
    */
    virtual void postAs2Stations(const QString &name, const QString &private_key, const QString &public_certificate, const ::OpenAPI::OptionalParam<QString> &private_key_password = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAs2StationsIdCallback(OAIHttpRequestWorker *worker);
    void getAs2StationsCallback(OAIHttpRequestWorker *worker);
    void getAs2StationsIdCallback(OAIHttpRequestWorker *worker);
    void patchAs2StationsIdCallback(OAIHttpRequestWorker *worker);
    void postAs2StationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAs2StationsIdSignal();
    void getAs2StationsSignal(QList<OAIAs2StationEntity> summary);
    void getAs2StationsIdSignal(OAIAs2StationEntity summary);
    void patchAs2StationsIdSignal(OAIAs2StationEntity summary);
    void postAs2StationsSignal(OAIAs2StationEntity summary);


    void deleteAs2StationsIdSignalFull(OAIHttpRequestWorker *worker);
    void getAs2StationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAs2StationEntity> summary);
    void getAs2StationsIdSignalFull(OAIHttpRequestWorker *worker, OAIAs2StationEntity summary);
    void patchAs2StationsIdSignalFull(OAIHttpRequestWorker *worker, OAIAs2StationEntity summary);
    void postAs2StationsSignalFull(OAIHttpRequestWorker *worker, OAIAs2StationEntity summary);

    Q_DECL_DEPRECATED_X("Use deleteAs2StationsIdSignalError() instead")
    void deleteAs2StationsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAs2StationsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2StationsSignalError() instead")
    void getAs2StationsSignalE(QList<OAIAs2StationEntity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2StationsSignalError(QList<OAIAs2StationEntity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2StationsIdSignalError() instead")
    void getAs2StationsIdSignalE(OAIAs2StationEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2StationsIdSignalError(OAIAs2StationEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAs2StationsIdSignalError() instead")
    void patchAs2StationsIdSignalE(OAIAs2StationEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAs2StationsIdSignalError(OAIAs2StationEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAs2StationsSignalError() instead")
    void postAs2StationsSignalE(OAIAs2StationEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAs2StationsSignalError(OAIAs2StationEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAs2StationsIdSignalErrorFull() instead")
    void deleteAs2StationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAs2StationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2StationsSignalErrorFull() instead")
    void getAs2StationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2StationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAs2StationsIdSignalErrorFull() instead")
    void getAs2StationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAs2StationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchAs2StationsIdSignalErrorFull() instead")
    void patchAs2StationsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchAs2StationsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAs2StationsSignalErrorFull() instead")
    void postAs2StationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAs2StationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
