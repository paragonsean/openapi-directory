/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalEventEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalEventEntity::OAIExternalEventEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalEventEntity::OAIExternalEventEntity() {
    this->initializeModel();
}

OAIExternalEventEntity::~OAIExternalEventEntity() {}

void OAIExternalEventEntity::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_url_isSet = false;
    m_body_url_isValid = false;

    m_bytes_synced_isSet = false;
    m_bytes_synced_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_errored_files_isSet = false;
    m_errored_files_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_folder_behavior_id_isSet = false;
    m_folder_behavior_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_remote_server_type_isSet = false;
    m_remote_server_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_successful_files_isSet = false;
    m_successful_files_isValid = false;
}

void OAIExternalEventEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalEventEntity::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_url_isValid = ::OpenAPI::fromJsonValue(m_body_url, json[QString("body_url")]);
    m_body_url_isSet = !json[QString("body_url")].isNull() && m_body_url_isValid;

    m_bytes_synced_isValid = ::OpenAPI::fromJsonValue(m_bytes_synced, json[QString("bytes_synced")]);
    m_bytes_synced_isSet = !json[QString("bytes_synced")].isNull() && m_bytes_synced_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_errored_files_isValid = ::OpenAPI::fromJsonValue(m_errored_files, json[QString("errored_files")]);
    m_errored_files_isSet = !json[QString("errored_files")].isNull() && m_errored_files_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_folder_behavior_id_isValid = ::OpenAPI::fromJsonValue(m_folder_behavior_id, json[QString("folder_behavior_id")]);
    m_folder_behavior_id_isSet = !json[QString("folder_behavior_id")].isNull() && m_folder_behavior_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_remote_server_type_isValid = ::OpenAPI::fromJsonValue(m_remote_server_type, json[QString("remote_server_type")]);
    m_remote_server_type_isSet = !json[QString("remote_server_type")].isNull() && m_remote_server_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_successful_files_isValid = ::OpenAPI::fromJsonValue(m_successful_files, json[QString("successful_files")]);
    m_successful_files_isSet = !json[QString("successful_files")].isNull() && m_successful_files_isValid;
}

QString OAIExternalEventEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalEventEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_url_isSet) {
        obj.insert(QString("body_url"), ::OpenAPI::toJsonValue(m_body_url));
    }
    if (m_bytes_synced_isSet) {
        obj.insert(QString("bytes_synced"), ::OpenAPI::toJsonValue(m_bytes_synced));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_errored_files_isSet) {
        obj.insert(QString("errored_files"), ::OpenAPI::toJsonValue(m_errored_files));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_folder_behavior_id_isSet) {
        obj.insert(QString("folder_behavior_id"), ::OpenAPI::toJsonValue(m_folder_behavior_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_remote_server_type_isSet) {
        obj.insert(QString("remote_server_type"), ::OpenAPI::toJsonValue(m_remote_server_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_successful_files_isSet) {
        obj.insert(QString("successful_files"), ::OpenAPI::toJsonValue(m_successful_files));
    }
    return obj;
}

QString OAIExternalEventEntity::getBody() const {
    return m_body;
}
void OAIExternalEventEntity::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIExternalEventEntity::is_body_Set() const{
    return m_body_isSet;
}

bool OAIExternalEventEntity::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIExternalEventEntity::getBodyUrl() const {
    return m_body_url;
}
void OAIExternalEventEntity::setBodyUrl(const QString &body_url) {
    m_body_url = body_url;
    m_body_url_isSet = true;
}

bool OAIExternalEventEntity::is_body_url_Set() const{
    return m_body_url_isSet;
}

bool OAIExternalEventEntity::is_body_url_Valid() const{
    return m_body_url_isValid;
}

qint32 OAIExternalEventEntity::getBytesSynced() const {
    return m_bytes_synced;
}
void OAIExternalEventEntity::setBytesSynced(const qint32 &bytes_synced) {
    m_bytes_synced = bytes_synced;
    m_bytes_synced_isSet = true;
}

bool OAIExternalEventEntity::is_bytes_synced_Set() const{
    return m_bytes_synced_isSet;
}

bool OAIExternalEventEntity::is_bytes_synced_Valid() const{
    return m_bytes_synced_isValid;
}

QDateTime OAIExternalEventEntity::getCreatedAt() const {
    return m_created_at;
}
void OAIExternalEventEntity::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIExternalEventEntity::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIExternalEventEntity::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIExternalEventEntity::getErroredFiles() const {
    return m_errored_files;
}
void OAIExternalEventEntity::setErroredFiles(const qint32 &errored_files) {
    m_errored_files = errored_files;
    m_errored_files_isSet = true;
}

bool OAIExternalEventEntity::is_errored_files_Set() const{
    return m_errored_files_isSet;
}

bool OAIExternalEventEntity::is_errored_files_Valid() const{
    return m_errored_files_isValid;
}

QString OAIExternalEventEntity::getEventType() const {
    return m_event_type;
}
void OAIExternalEventEntity::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIExternalEventEntity::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIExternalEventEntity::is_event_type_Valid() const{
    return m_event_type_isValid;
}

qint32 OAIExternalEventEntity::getFolderBehaviorId() const {
    return m_folder_behavior_id;
}
void OAIExternalEventEntity::setFolderBehaviorId(const qint32 &folder_behavior_id) {
    m_folder_behavior_id = folder_behavior_id;
    m_folder_behavior_id_isSet = true;
}

bool OAIExternalEventEntity::is_folder_behavior_id_Set() const{
    return m_folder_behavior_id_isSet;
}

bool OAIExternalEventEntity::is_folder_behavior_id_Valid() const{
    return m_folder_behavior_id_isValid;
}

qint32 OAIExternalEventEntity::getId() const {
    return m_id;
}
void OAIExternalEventEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExternalEventEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExternalEventEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExternalEventEntity::getRemoteServerType() const {
    return m_remote_server_type;
}
void OAIExternalEventEntity::setRemoteServerType(const QString &remote_server_type) {
    m_remote_server_type = remote_server_type;
    m_remote_server_type_isSet = true;
}

bool OAIExternalEventEntity::is_remote_server_type_Set() const{
    return m_remote_server_type_isSet;
}

bool OAIExternalEventEntity::is_remote_server_type_Valid() const{
    return m_remote_server_type_isValid;
}

QString OAIExternalEventEntity::getStatus() const {
    return m_status;
}
void OAIExternalEventEntity::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExternalEventEntity::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExternalEventEntity::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIExternalEventEntity::getSuccessfulFiles() const {
    return m_successful_files;
}
void OAIExternalEventEntity::setSuccessfulFiles(const qint32 &successful_files) {
    m_successful_files = successful_files;
    m_successful_files_isSet = true;
}

bool OAIExternalEventEntity::is_successful_files_Set() const{
    return m_successful_files_isSet;
}

bool OAIExternalEventEntity::is_successful_files_Valid() const{
    return m_successful_files_isValid;
}

bool OAIExternalEventEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_synced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errored_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_behavior_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_server_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_files_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalEventEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
