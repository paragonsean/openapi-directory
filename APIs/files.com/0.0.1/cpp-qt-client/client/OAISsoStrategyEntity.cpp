/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISsoStrategyEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISsoStrategyEntity::OAISsoStrategyEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISsoStrategyEntity::OAISsoStrategyEntity() {
    this->initializeModel();
}

OAISsoStrategyEntity::~OAISsoStrategyEntity() {}

void OAISsoStrategyEntity::initializeModel() {

    m_deprovision_behavior_isSet = false;
    m_deprovision_behavior_isValid = false;

    m_deprovision_groups_isSet = false;
    m_deprovision_groups_isValid = false;

    m_deprovision_users_isSet = false;
    m_deprovision_users_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_ldap_base_dn_isSet = false;
    m_ldap_base_dn_isValid = false;

    m_ldap_domain_isSet = false;
    m_ldap_domain_isValid = false;

    m_ldap_host_isSet = false;
    m_ldap_host_isValid = false;

    m_ldap_host_2_isSet = false;
    m_ldap_host_2_isValid = false;

    m_ldap_host_3_isSet = false;
    m_ldap_host_3_isValid = false;

    m_ldap_port_isSet = false;
    m_ldap_port_isValid = false;

    m_ldap_secure_isSet = false;
    m_ldap_secure_isValid = false;

    m_ldap_username_isSet = false;
    m_ldap_username_isValid = false;

    m_ldap_username_field_isSet = false;
    m_ldap_username_field_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provision_attachments_permission_isSet = false;
    m_provision_attachments_permission_isValid = false;

    m_provision_company_isSet = false;
    m_provision_company_isValid = false;

    m_provision_dav_permission_isSet = false;
    m_provision_dav_permission_isValid = false;

    m_provision_email_signup_groups_isSet = false;
    m_provision_email_signup_groups_isValid = false;

    m_provision_ftp_permission_isSet = false;
    m_provision_ftp_permission_isValid = false;

    m_provision_group_default_isSet = false;
    m_provision_group_default_isValid = false;

    m_provision_group_exclusion_isSet = false;
    m_provision_group_exclusion_isValid = false;

    m_provision_group_inclusion_isSet = false;
    m_provision_group_inclusion_isValid = false;

    m_provision_group_required_isSet = false;
    m_provision_group_required_isValid = false;

    m_provision_groups_isSet = false;
    m_provision_groups_isValid = false;

    m_provision_sftp_permission_isSet = false;
    m_provision_sftp_permission_isValid = false;

    m_provision_site_admin_groups_isSet = false;
    m_provision_site_admin_groups_isValid = false;

    m_provision_time_zone_isSet = false;
    m_provision_time_zone_isValid = false;

    m_provision_users_isSet = false;
    m_provision_users_isValid = false;

    m_saml_provider_cert_fingerprint_isSet = false;
    m_saml_provider_cert_fingerprint_isValid = false;

    m_saml_provider_issuer_url_isSet = false;
    m_saml_provider_issuer_url_isValid = false;

    m_saml_provider_metadata_content_isSet = false;
    m_saml_provider_metadata_content_isValid = false;

    m_saml_provider_metadata_url_isSet = false;
    m_saml_provider_metadata_url_isValid = false;

    m_saml_provider_slo_target_url_isSet = false;
    m_saml_provider_slo_target_url_isValid = false;

    m_saml_provider_sso_target_url_isSet = false;
    m_saml_provider_sso_target_url_isValid = false;

    m_scim_authentication_method_isSet = false;
    m_scim_authentication_method_isValid = false;

    m_scim_oauth_access_token_isSet = false;
    m_scim_oauth_access_token_isValid = false;

    m_scim_oauth_access_token_expires_at_isSet = false;
    m_scim_oauth_access_token_expires_at_isValid = false;

    m_scim_username_isSet = false;
    m_scim_username_isValid = false;

    m_subdomain_isSet = false;
    m_subdomain_isValid = false;
}

void OAISsoStrategyEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISsoStrategyEntity::fromJsonObject(QJsonObject json) {

    m_deprovision_behavior_isValid = ::OpenAPI::fromJsonValue(m_deprovision_behavior, json[QString("deprovision_behavior")]);
    m_deprovision_behavior_isSet = !json[QString("deprovision_behavior")].isNull() && m_deprovision_behavior_isValid;

    m_deprovision_groups_isValid = ::OpenAPI::fromJsonValue(m_deprovision_groups, json[QString("deprovision_groups")]);
    m_deprovision_groups_isSet = !json[QString("deprovision_groups")].isNull() && m_deprovision_groups_isValid;

    m_deprovision_users_isValid = ::OpenAPI::fromJsonValue(m_deprovision_users, json[QString("deprovision_users")]);
    m_deprovision_users_isSet = !json[QString("deprovision_users")].isNull() && m_deprovision_users_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_ldap_base_dn_isValid = ::OpenAPI::fromJsonValue(m_ldap_base_dn, json[QString("ldap_base_dn")]);
    m_ldap_base_dn_isSet = !json[QString("ldap_base_dn")].isNull() && m_ldap_base_dn_isValid;

    m_ldap_domain_isValid = ::OpenAPI::fromJsonValue(m_ldap_domain, json[QString("ldap_domain")]);
    m_ldap_domain_isSet = !json[QString("ldap_domain")].isNull() && m_ldap_domain_isValid;

    m_ldap_host_isValid = ::OpenAPI::fromJsonValue(m_ldap_host, json[QString("ldap_host")]);
    m_ldap_host_isSet = !json[QString("ldap_host")].isNull() && m_ldap_host_isValid;

    m_ldap_host_2_isValid = ::OpenAPI::fromJsonValue(m_ldap_host_2, json[QString("ldap_host_2")]);
    m_ldap_host_2_isSet = !json[QString("ldap_host_2")].isNull() && m_ldap_host_2_isValid;

    m_ldap_host_3_isValid = ::OpenAPI::fromJsonValue(m_ldap_host_3, json[QString("ldap_host_3")]);
    m_ldap_host_3_isSet = !json[QString("ldap_host_3")].isNull() && m_ldap_host_3_isValid;

    m_ldap_port_isValid = ::OpenAPI::fromJsonValue(m_ldap_port, json[QString("ldap_port")]);
    m_ldap_port_isSet = !json[QString("ldap_port")].isNull() && m_ldap_port_isValid;

    m_ldap_secure_isValid = ::OpenAPI::fromJsonValue(m_ldap_secure, json[QString("ldap_secure")]);
    m_ldap_secure_isSet = !json[QString("ldap_secure")].isNull() && m_ldap_secure_isValid;

    m_ldap_username_isValid = ::OpenAPI::fromJsonValue(m_ldap_username, json[QString("ldap_username")]);
    m_ldap_username_isSet = !json[QString("ldap_username")].isNull() && m_ldap_username_isValid;

    m_ldap_username_field_isValid = ::OpenAPI::fromJsonValue(m_ldap_username_field, json[QString("ldap_username_field")]);
    m_ldap_username_field_isSet = !json[QString("ldap_username_field")].isNull() && m_ldap_username_field_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provision_attachments_permission_isValid = ::OpenAPI::fromJsonValue(m_provision_attachments_permission, json[QString("provision_attachments_permission")]);
    m_provision_attachments_permission_isSet = !json[QString("provision_attachments_permission")].isNull() && m_provision_attachments_permission_isValid;

    m_provision_company_isValid = ::OpenAPI::fromJsonValue(m_provision_company, json[QString("provision_company")]);
    m_provision_company_isSet = !json[QString("provision_company")].isNull() && m_provision_company_isValid;

    m_provision_dav_permission_isValid = ::OpenAPI::fromJsonValue(m_provision_dav_permission, json[QString("provision_dav_permission")]);
    m_provision_dav_permission_isSet = !json[QString("provision_dav_permission")].isNull() && m_provision_dav_permission_isValid;

    m_provision_email_signup_groups_isValid = ::OpenAPI::fromJsonValue(m_provision_email_signup_groups, json[QString("provision_email_signup_groups")]);
    m_provision_email_signup_groups_isSet = !json[QString("provision_email_signup_groups")].isNull() && m_provision_email_signup_groups_isValid;

    m_provision_ftp_permission_isValid = ::OpenAPI::fromJsonValue(m_provision_ftp_permission, json[QString("provision_ftp_permission")]);
    m_provision_ftp_permission_isSet = !json[QString("provision_ftp_permission")].isNull() && m_provision_ftp_permission_isValid;

    m_provision_group_default_isValid = ::OpenAPI::fromJsonValue(m_provision_group_default, json[QString("provision_group_default")]);
    m_provision_group_default_isSet = !json[QString("provision_group_default")].isNull() && m_provision_group_default_isValid;

    m_provision_group_exclusion_isValid = ::OpenAPI::fromJsonValue(m_provision_group_exclusion, json[QString("provision_group_exclusion")]);
    m_provision_group_exclusion_isSet = !json[QString("provision_group_exclusion")].isNull() && m_provision_group_exclusion_isValid;

    m_provision_group_inclusion_isValid = ::OpenAPI::fromJsonValue(m_provision_group_inclusion, json[QString("provision_group_inclusion")]);
    m_provision_group_inclusion_isSet = !json[QString("provision_group_inclusion")].isNull() && m_provision_group_inclusion_isValid;

    m_provision_group_required_isValid = ::OpenAPI::fromJsonValue(m_provision_group_required, json[QString("provision_group_required")]);
    m_provision_group_required_isSet = !json[QString("provision_group_required")].isNull() && m_provision_group_required_isValid;

    m_provision_groups_isValid = ::OpenAPI::fromJsonValue(m_provision_groups, json[QString("provision_groups")]);
    m_provision_groups_isSet = !json[QString("provision_groups")].isNull() && m_provision_groups_isValid;

    m_provision_sftp_permission_isValid = ::OpenAPI::fromJsonValue(m_provision_sftp_permission, json[QString("provision_sftp_permission")]);
    m_provision_sftp_permission_isSet = !json[QString("provision_sftp_permission")].isNull() && m_provision_sftp_permission_isValid;

    m_provision_site_admin_groups_isValid = ::OpenAPI::fromJsonValue(m_provision_site_admin_groups, json[QString("provision_site_admin_groups")]);
    m_provision_site_admin_groups_isSet = !json[QString("provision_site_admin_groups")].isNull() && m_provision_site_admin_groups_isValid;

    m_provision_time_zone_isValid = ::OpenAPI::fromJsonValue(m_provision_time_zone, json[QString("provision_time_zone")]);
    m_provision_time_zone_isSet = !json[QString("provision_time_zone")].isNull() && m_provision_time_zone_isValid;

    m_provision_users_isValid = ::OpenAPI::fromJsonValue(m_provision_users, json[QString("provision_users")]);
    m_provision_users_isSet = !json[QString("provision_users")].isNull() && m_provision_users_isValid;

    m_saml_provider_cert_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_saml_provider_cert_fingerprint, json[QString("saml_provider_cert_fingerprint")]);
    m_saml_provider_cert_fingerprint_isSet = !json[QString("saml_provider_cert_fingerprint")].isNull() && m_saml_provider_cert_fingerprint_isValid;

    m_saml_provider_issuer_url_isValid = ::OpenAPI::fromJsonValue(m_saml_provider_issuer_url, json[QString("saml_provider_issuer_url")]);
    m_saml_provider_issuer_url_isSet = !json[QString("saml_provider_issuer_url")].isNull() && m_saml_provider_issuer_url_isValid;

    m_saml_provider_metadata_content_isValid = ::OpenAPI::fromJsonValue(m_saml_provider_metadata_content, json[QString("saml_provider_metadata_content")]);
    m_saml_provider_metadata_content_isSet = !json[QString("saml_provider_metadata_content")].isNull() && m_saml_provider_metadata_content_isValid;

    m_saml_provider_metadata_url_isValid = ::OpenAPI::fromJsonValue(m_saml_provider_metadata_url, json[QString("saml_provider_metadata_url")]);
    m_saml_provider_metadata_url_isSet = !json[QString("saml_provider_metadata_url")].isNull() && m_saml_provider_metadata_url_isValid;

    m_saml_provider_slo_target_url_isValid = ::OpenAPI::fromJsonValue(m_saml_provider_slo_target_url, json[QString("saml_provider_slo_target_url")]);
    m_saml_provider_slo_target_url_isSet = !json[QString("saml_provider_slo_target_url")].isNull() && m_saml_provider_slo_target_url_isValid;

    m_saml_provider_sso_target_url_isValid = ::OpenAPI::fromJsonValue(m_saml_provider_sso_target_url, json[QString("saml_provider_sso_target_url")]);
    m_saml_provider_sso_target_url_isSet = !json[QString("saml_provider_sso_target_url")].isNull() && m_saml_provider_sso_target_url_isValid;

    m_scim_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_scim_authentication_method, json[QString("scim_authentication_method")]);
    m_scim_authentication_method_isSet = !json[QString("scim_authentication_method")].isNull() && m_scim_authentication_method_isValid;

    m_scim_oauth_access_token_isValid = ::OpenAPI::fromJsonValue(m_scim_oauth_access_token, json[QString("scim_oauth_access_token")]);
    m_scim_oauth_access_token_isSet = !json[QString("scim_oauth_access_token")].isNull() && m_scim_oauth_access_token_isValid;

    m_scim_oauth_access_token_expires_at_isValid = ::OpenAPI::fromJsonValue(m_scim_oauth_access_token_expires_at, json[QString("scim_oauth_access_token_expires_at")]);
    m_scim_oauth_access_token_expires_at_isSet = !json[QString("scim_oauth_access_token_expires_at")].isNull() && m_scim_oauth_access_token_expires_at_isValid;

    m_scim_username_isValid = ::OpenAPI::fromJsonValue(m_scim_username, json[QString("scim_username")]);
    m_scim_username_isSet = !json[QString("scim_username")].isNull() && m_scim_username_isValid;

    m_subdomain_isValid = ::OpenAPI::fromJsonValue(m_subdomain, json[QString("subdomain")]);
    m_subdomain_isSet = !json[QString("subdomain")].isNull() && m_subdomain_isValid;
}

QString OAISsoStrategyEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISsoStrategyEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_deprovision_behavior_isSet) {
        obj.insert(QString("deprovision_behavior"), ::OpenAPI::toJsonValue(m_deprovision_behavior));
    }
    if (m_deprovision_groups_isSet) {
        obj.insert(QString("deprovision_groups"), ::OpenAPI::toJsonValue(m_deprovision_groups));
    }
    if (m_deprovision_users_isSet) {
        obj.insert(QString("deprovision_users"), ::OpenAPI::toJsonValue(m_deprovision_users));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_ldap_base_dn_isSet) {
        obj.insert(QString("ldap_base_dn"), ::OpenAPI::toJsonValue(m_ldap_base_dn));
    }
    if (m_ldap_domain_isSet) {
        obj.insert(QString("ldap_domain"), ::OpenAPI::toJsonValue(m_ldap_domain));
    }
    if (m_ldap_host_isSet) {
        obj.insert(QString("ldap_host"), ::OpenAPI::toJsonValue(m_ldap_host));
    }
    if (m_ldap_host_2_isSet) {
        obj.insert(QString("ldap_host_2"), ::OpenAPI::toJsonValue(m_ldap_host_2));
    }
    if (m_ldap_host_3_isSet) {
        obj.insert(QString("ldap_host_3"), ::OpenAPI::toJsonValue(m_ldap_host_3));
    }
    if (m_ldap_port_isSet) {
        obj.insert(QString("ldap_port"), ::OpenAPI::toJsonValue(m_ldap_port));
    }
    if (m_ldap_secure_isSet) {
        obj.insert(QString("ldap_secure"), ::OpenAPI::toJsonValue(m_ldap_secure));
    }
    if (m_ldap_username_isSet) {
        obj.insert(QString("ldap_username"), ::OpenAPI::toJsonValue(m_ldap_username));
    }
    if (m_ldap_username_field_isSet) {
        obj.insert(QString("ldap_username_field"), ::OpenAPI::toJsonValue(m_ldap_username_field));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provision_attachments_permission_isSet) {
        obj.insert(QString("provision_attachments_permission"), ::OpenAPI::toJsonValue(m_provision_attachments_permission));
    }
    if (m_provision_company_isSet) {
        obj.insert(QString("provision_company"), ::OpenAPI::toJsonValue(m_provision_company));
    }
    if (m_provision_dav_permission_isSet) {
        obj.insert(QString("provision_dav_permission"), ::OpenAPI::toJsonValue(m_provision_dav_permission));
    }
    if (m_provision_email_signup_groups_isSet) {
        obj.insert(QString("provision_email_signup_groups"), ::OpenAPI::toJsonValue(m_provision_email_signup_groups));
    }
    if (m_provision_ftp_permission_isSet) {
        obj.insert(QString("provision_ftp_permission"), ::OpenAPI::toJsonValue(m_provision_ftp_permission));
    }
    if (m_provision_group_default_isSet) {
        obj.insert(QString("provision_group_default"), ::OpenAPI::toJsonValue(m_provision_group_default));
    }
    if (m_provision_group_exclusion_isSet) {
        obj.insert(QString("provision_group_exclusion"), ::OpenAPI::toJsonValue(m_provision_group_exclusion));
    }
    if (m_provision_group_inclusion_isSet) {
        obj.insert(QString("provision_group_inclusion"), ::OpenAPI::toJsonValue(m_provision_group_inclusion));
    }
    if (m_provision_group_required_isSet) {
        obj.insert(QString("provision_group_required"), ::OpenAPI::toJsonValue(m_provision_group_required));
    }
    if (m_provision_groups_isSet) {
        obj.insert(QString("provision_groups"), ::OpenAPI::toJsonValue(m_provision_groups));
    }
    if (m_provision_sftp_permission_isSet) {
        obj.insert(QString("provision_sftp_permission"), ::OpenAPI::toJsonValue(m_provision_sftp_permission));
    }
    if (m_provision_site_admin_groups_isSet) {
        obj.insert(QString("provision_site_admin_groups"), ::OpenAPI::toJsonValue(m_provision_site_admin_groups));
    }
    if (m_provision_time_zone_isSet) {
        obj.insert(QString("provision_time_zone"), ::OpenAPI::toJsonValue(m_provision_time_zone));
    }
    if (m_provision_users_isSet) {
        obj.insert(QString("provision_users"), ::OpenAPI::toJsonValue(m_provision_users));
    }
    if (m_saml_provider_cert_fingerprint_isSet) {
        obj.insert(QString("saml_provider_cert_fingerprint"), ::OpenAPI::toJsonValue(m_saml_provider_cert_fingerprint));
    }
    if (m_saml_provider_issuer_url_isSet) {
        obj.insert(QString("saml_provider_issuer_url"), ::OpenAPI::toJsonValue(m_saml_provider_issuer_url));
    }
    if (m_saml_provider_metadata_content_isSet) {
        obj.insert(QString("saml_provider_metadata_content"), ::OpenAPI::toJsonValue(m_saml_provider_metadata_content));
    }
    if (m_saml_provider_metadata_url_isSet) {
        obj.insert(QString("saml_provider_metadata_url"), ::OpenAPI::toJsonValue(m_saml_provider_metadata_url));
    }
    if (m_saml_provider_slo_target_url_isSet) {
        obj.insert(QString("saml_provider_slo_target_url"), ::OpenAPI::toJsonValue(m_saml_provider_slo_target_url));
    }
    if (m_saml_provider_sso_target_url_isSet) {
        obj.insert(QString("saml_provider_sso_target_url"), ::OpenAPI::toJsonValue(m_saml_provider_sso_target_url));
    }
    if (m_scim_authentication_method_isSet) {
        obj.insert(QString("scim_authentication_method"), ::OpenAPI::toJsonValue(m_scim_authentication_method));
    }
    if (m_scim_oauth_access_token_isSet) {
        obj.insert(QString("scim_oauth_access_token"), ::OpenAPI::toJsonValue(m_scim_oauth_access_token));
    }
    if (m_scim_oauth_access_token_expires_at_isSet) {
        obj.insert(QString("scim_oauth_access_token_expires_at"), ::OpenAPI::toJsonValue(m_scim_oauth_access_token_expires_at));
    }
    if (m_scim_username_isSet) {
        obj.insert(QString("scim_username"), ::OpenAPI::toJsonValue(m_scim_username));
    }
    if (m_subdomain_isSet) {
        obj.insert(QString("subdomain"), ::OpenAPI::toJsonValue(m_subdomain));
    }
    return obj;
}

QString OAISsoStrategyEntity::getDeprovisionBehavior() const {
    return m_deprovision_behavior;
}
void OAISsoStrategyEntity::setDeprovisionBehavior(const QString &deprovision_behavior) {
    m_deprovision_behavior = deprovision_behavior;
    m_deprovision_behavior_isSet = true;
}

bool OAISsoStrategyEntity::is_deprovision_behavior_Set() const{
    return m_deprovision_behavior_isSet;
}

bool OAISsoStrategyEntity::is_deprovision_behavior_Valid() const{
    return m_deprovision_behavior_isValid;
}

bool OAISsoStrategyEntity::isDeprovisionGroups() const {
    return m_deprovision_groups;
}
void OAISsoStrategyEntity::setDeprovisionGroups(const bool &deprovision_groups) {
    m_deprovision_groups = deprovision_groups;
    m_deprovision_groups_isSet = true;
}

bool OAISsoStrategyEntity::is_deprovision_groups_Set() const{
    return m_deprovision_groups_isSet;
}

bool OAISsoStrategyEntity::is_deprovision_groups_Valid() const{
    return m_deprovision_groups_isValid;
}

bool OAISsoStrategyEntity::isDeprovisionUsers() const {
    return m_deprovision_users;
}
void OAISsoStrategyEntity::setDeprovisionUsers(const bool &deprovision_users) {
    m_deprovision_users = deprovision_users;
    m_deprovision_users_isSet = true;
}

bool OAISsoStrategyEntity::is_deprovision_users_Set() const{
    return m_deprovision_users_isSet;
}

bool OAISsoStrategyEntity::is_deprovision_users_Valid() const{
    return m_deprovision_users_isValid;
}

bool OAISsoStrategyEntity::isEnabled() const {
    return m_enabled;
}
void OAISsoStrategyEntity::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISsoStrategyEntity::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISsoStrategyEntity::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAISsoStrategyEntity::getId() const {
    return m_id;
}
void OAISsoStrategyEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISsoStrategyEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAISsoStrategyEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISsoStrategyEntity::getLabel() const {
    return m_label;
}
void OAISsoStrategyEntity::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISsoStrategyEntity::is_label_Set() const{
    return m_label_isSet;
}

bool OAISsoStrategyEntity::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISsoStrategyEntity::getLdapBaseDn() const {
    return m_ldap_base_dn;
}
void OAISsoStrategyEntity::setLdapBaseDn(const QString &ldap_base_dn) {
    m_ldap_base_dn = ldap_base_dn;
    m_ldap_base_dn_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_base_dn_Set() const{
    return m_ldap_base_dn_isSet;
}

bool OAISsoStrategyEntity::is_ldap_base_dn_Valid() const{
    return m_ldap_base_dn_isValid;
}

QString OAISsoStrategyEntity::getLdapDomain() const {
    return m_ldap_domain;
}
void OAISsoStrategyEntity::setLdapDomain(const QString &ldap_domain) {
    m_ldap_domain = ldap_domain;
    m_ldap_domain_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_domain_Set() const{
    return m_ldap_domain_isSet;
}

bool OAISsoStrategyEntity::is_ldap_domain_Valid() const{
    return m_ldap_domain_isValid;
}

QString OAISsoStrategyEntity::getLdapHost() const {
    return m_ldap_host;
}
void OAISsoStrategyEntity::setLdapHost(const QString &ldap_host) {
    m_ldap_host = ldap_host;
    m_ldap_host_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_host_Set() const{
    return m_ldap_host_isSet;
}

bool OAISsoStrategyEntity::is_ldap_host_Valid() const{
    return m_ldap_host_isValid;
}

QString OAISsoStrategyEntity::getLdapHost2() const {
    return m_ldap_host_2;
}
void OAISsoStrategyEntity::setLdapHost2(const QString &ldap_host_2) {
    m_ldap_host_2 = ldap_host_2;
    m_ldap_host_2_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_host_2_Set() const{
    return m_ldap_host_2_isSet;
}

bool OAISsoStrategyEntity::is_ldap_host_2_Valid() const{
    return m_ldap_host_2_isValid;
}

QString OAISsoStrategyEntity::getLdapHost3() const {
    return m_ldap_host_3;
}
void OAISsoStrategyEntity::setLdapHost3(const QString &ldap_host_3) {
    m_ldap_host_3 = ldap_host_3;
    m_ldap_host_3_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_host_3_Set() const{
    return m_ldap_host_3_isSet;
}

bool OAISsoStrategyEntity::is_ldap_host_3_Valid() const{
    return m_ldap_host_3_isValid;
}

qint32 OAISsoStrategyEntity::getLdapPort() const {
    return m_ldap_port;
}
void OAISsoStrategyEntity::setLdapPort(const qint32 &ldap_port) {
    m_ldap_port = ldap_port;
    m_ldap_port_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_port_Set() const{
    return m_ldap_port_isSet;
}

bool OAISsoStrategyEntity::is_ldap_port_Valid() const{
    return m_ldap_port_isValid;
}

bool OAISsoStrategyEntity::isLdapSecure() const {
    return m_ldap_secure;
}
void OAISsoStrategyEntity::setLdapSecure(const bool &ldap_secure) {
    m_ldap_secure = ldap_secure;
    m_ldap_secure_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_secure_Set() const{
    return m_ldap_secure_isSet;
}

bool OAISsoStrategyEntity::is_ldap_secure_Valid() const{
    return m_ldap_secure_isValid;
}

QString OAISsoStrategyEntity::getLdapUsername() const {
    return m_ldap_username;
}
void OAISsoStrategyEntity::setLdapUsername(const QString &ldap_username) {
    m_ldap_username = ldap_username;
    m_ldap_username_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_username_Set() const{
    return m_ldap_username_isSet;
}

bool OAISsoStrategyEntity::is_ldap_username_Valid() const{
    return m_ldap_username_isValid;
}

QString OAISsoStrategyEntity::getLdapUsernameField() const {
    return m_ldap_username_field;
}
void OAISsoStrategyEntity::setLdapUsernameField(const QString &ldap_username_field) {
    m_ldap_username_field = ldap_username_field;
    m_ldap_username_field_isSet = true;
}

bool OAISsoStrategyEntity::is_ldap_username_field_Set() const{
    return m_ldap_username_field_isSet;
}

bool OAISsoStrategyEntity::is_ldap_username_field_Valid() const{
    return m_ldap_username_field_isValid;
}

QString OAISsoStrategyEntity::getLogoUrl() const {
    return m_logo_url;
}
void OAISsoStrategyEntity::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAISsoStrategyEntity::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAISsoStrategyEntity::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAISsoStrategyEntity::getProtocol() const {
    return m_protocol;
}
void OAISsoStrategyEntity::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISsoStrategyEntity::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISsoStrategyEntity::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAISsoStrategyEntity::getProvider() const {
    return m_provider;
}
void OAISsoStrategyEntity::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAISsoStrategyEntity::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAISsoStrategyEntity::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAISsoStrategyEntity::isProvisionAttachmentsPermission() const {
    return m_provision_attachments_permission;
}
void OAISsoStrategyEntity::setProvisionAttachmentsPermission(const bool &provision_attachments_permission) {
    m_provision_attachments_permission = provision_attachments_permission;
    m_provision_attachments_permission_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_attachments_permission_Set() const{
    return m_provision_attachments_permission_isSet;
}

bool OAISsoStrategyEntity::is_provision_attachments_permission_Valid() const{
    return m_provision_attachments_permission_isValid;
}

QString OAISsoStrategyEntity::getProvisionCompany() const {
    return m_provision_company;
}
void OAISsoStrategyEntity::setProvisionCompany(const QString &provision_company) {
    m_provision_company = provision_company;
    m_provision_company_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_company_Set() const{
    return m_provision_company_isSet;
}

bool OAISsoStrategyEntity::is_provision_company_Valid() const{
    return m_provision_company_isValid;
}

bool OAISsoStrategyEntity::isProvisionDavPermission() const {
    return m_provision_dav_permission;
}
void OAISsoStrategyEntity::setProvisionDavPermission(const bool &provision_dav_permission) {
    m_provision_dav_permission = provision_dav_permission;
    m_provision_dav_permission_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_dav_permission_Set() const{
    return m_provision_dav_permission_isSet;
}

bool OAISsoStrategyEntity::is_provision_dav_permission_Valid() const{
    return m_provision_dav_permission_isValid;
}

QString OAISsoStrategyEntity::getProvisionEmailSignupGroups() const {
    return m_provision_email_signup_groups;
}
void OAISsoStrategyEntity::setProvisionEmailSignupGroups(const QString &provision_email_signup_groups) {
    m_provision_email_signup_groups = provision_email_signup_groups;
    m_provision_email_signup_groups_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_email_signup_groups_Set() const{
    return m_provision_email_signup_groups_isSet;
}

bool OAISsoStrategyEntity::is_provision_email_signup_groups_Valid() const{
    return m_provision_email_signup_groups_isValid;
}

bool OAISsoStrategyEntity::isProvisionFtpPermission() const {
    return m_provision_ftp_permission;
}
void OAISsoStrategyEntity::setProvisionFtpPermission(const bool &provision_ftp_permission) {
    m_provision_ftp_permission = provision_ftp_permission;
    m_provision_ftp_permission_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_ftp_permission_Set() const{
    return m_provision_ftp_permission_isSet;
}

bool OAISsoStrategyEntity::is_provision_ftp_permission_Valid() const{
    return m_provision_ftp_permission_isValid;
}

QString OAISsoStrategyEntity::getProvisionGroupDefault() const {
    return m_provision_group_default;
}
void OAISsoStrategyEntity::setProvisionGroupDefault(const QString &provision_group_default) {
    m_provision_group_default = provision_group_default;
    m_provision_group_default_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_group_default_Set() const{
    return m_provision_group_default_isSet;
}

bool OAISsoStrategyEntity::is_provision_group_default_Valid() const{
    return m_provision_group_default_isValid;
}

QString OAISsoStrategyEntity::getProvisionGroupExclusion() const {
    return m_provision_group_exclusion;
}
void OAISsoStrategyEntity::setProvisionGroupExclusion(const QString &provision_group_exclusion) {
    m_provision_group_exclusion = provision_group_exclusion;
    m_provision_group_exclusion_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_group_exclusion_Set() const{
    return m_provision_group_exclusion_isSet;
}

bool OAISsoStrategyEntity::is_provision_group_exclusion_Valid() const{
    return m_provision_group_exclusion_isValid;
}

QString OAISsoStrategyEntity::getProvisionGroupInclusion() const {
    return m_provision_group_inclusion;
}
void OAISsoStrategyEntity::setProvisionGroupInclusion(const QString &provision_group_inclusion) {
    m_provision_group_inclusion = provision_group_inclusion;
    m_provision_group_inclusion_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_group_inclusion_Set() const{
    return m_provision_group_inclusion_isSet;
}

bool OAISsoStrategyEntity::is_provision_group_inclusion_Valid() const{
    return m_provision_group_inclusion_isValid;
}

QString OAISsoStrategyEntity::getProvisionGroupRequired() const {
    return m_provision_group_required;
}
void OAISsoStrategyEntity::setProvisionGroupRequired(const QString &provision_group_required) {
    m_provision_group_required = provision_group_required;
    m_provision_group_required_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_group_required_Set() const{
    return m_provision_group_required_isSet;
}

bool OAISsoStrategyEntity::is_provision_group_required_Valid() const{
    return m_provision_group_required_isValid;
}

bool OAISsoStrategyEntity::isProvisionGroups() const {
    return m_provision_groups;
}
void OAISsoStrategyEntity::setProvisionGroups(const bool &provision_groups) {
    m_provision_groups = provision_groups;
    m_provision_groups_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_groups_Set() const{
    return m_provision_groups_isSet;
}

bool OAISsoStrategyEntity::is_provision_groups_Valid() const{
    return m_provision_groups_isValid;
}

bool OAISsoStrategyEntity::isProvisionSftpPermission() const {
    return m_provision_sftp_permission;
}
void OAISsoStrategyEntity::setProvisionSftpPermission(const bool &provision_sftp_permission) {
    m_provision_sftp_permission = provision_sftp_permission;
    m_provision_sftp_permission_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_sftp_permission_Set() const{
    return m_provision_sftp_permission_isSet;
}

bool OAISsoStrategyEntity::is_provision_sftp_permission_Valid() const{
    return m_provision_sftp_permission_isValid;
}

QString OAISsoStrategyEntity::getProvisionSiteAdminGroups() const {
    return m_provision_site_admin_groups;
}
void OAISsoStrategyEntity::setProvisionSiteAdminGroups(const QString &provision_site_admin_groups) {
    m_provision_site_admin_groups = provision_site_admin_groups;
    m_provision_site_admin_groups_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_site_admin_groups_Set() const{
    return m_provision_site_admin_groups_isSet;
}

bool OAISsoStrategyEntity::is_provision_site_admin_groups_Valid() const{
    return m_provision_site_admin_groups_isValid;
}

QString OAISsoStrategyEntity::getProvisionTimeZone() const {
    return m_provision_time_zone;
}
void OAISsoStrategyEntity::setProvisionTimeZone(const QString &provision_time_zone) {
    m_provision_time_zone = provision_time_zone;
    m_provision_time_zone_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_time_zone_Set() const{
    return m_provision_time_zone_isSet;
}

bool OAISsoStrategyEntity::is_provision_time_zone_Valid() const{
    return m_provision_time_zone_isValid;
}

bool OAISsoStrategyEntity::isProvisionUsers() const {
    return m_provision_users;
}
void OAISsoStrategyEntity::setProvisionUsers(const bool &provision_users) {
    m_provision_users = provision_users;
    m_provision_users_isSet = true;
}

bool OAISsoStrategyEntity::is_provision_users_Set() const{
    return m_provision_users_isSet;
}

bool OAISsoStrategyEntity::is_provision_users_Valid() const{
    return m_provision_users_isValid;
}

QString OAISsoStrategyEntity::getSamlProviderCertFingerprint() const {
    return m_saml_provider_cert_fingerprint;
}
void OAISsoStrategyEntity::setSamlProviderCertFingerprint(const QString &saml_provider_cert_fingerprint) {
    m_saml_provider_cert_fingerprint = saml_provider_cert_fingerprint;
    m_saml_provider_cert_fingerprint_isSet = true;
}

bool OAISsoStrategyEntity::is_saml_provider_cert_fingerprint_Set() const{
    return m_saml_provider_cert_fingerprint_isSet;
}

bool OAISsoStrategyEntity::is_saml_provider_cert_fingerprint_Valid() const{
    return m_saml_provider_cert_fingerprint_isValid;
}

QString OAISsoStrategyEntity::getSamlProviderIssuerUrl() const {
    return m_saml_provider_issuer_url;
}
void OAISsoStrategyEntity::setSamlProviderIssuerUrl(const QString &saml_provider_issuer_url) {
    m_saml_provider_issuer_url = saml_provider_issuer_url;
    m_saml_provider_issuer_url_isSet = true;
}

bool OAISsoStrategyEntity::is_saml_provider_issuer_url_Set() const{
    return m_saml_provider_issuer_url_isSet;
}

bool OAISsoStrategyEntity::is_saml_provider_issuer_url_Valid() const{
    return m_saml_provider_issuer_url_isValid;
}

QString OAISsoStrategyEntity::getSamlProviderMetadataContent() const {
    return m_saml_provider_metadata_content;
}
void OAISsoStrategyEntity::setSamlProviderMetadataContent(const QString &saml_provider_metadata_content) {
    m_saml_provider_metadata_content = saml_provider_metadata_content;
    m_saml_provider_metadata_content_isSet = true;
}

bool OAISsoStrategyEntity::is_saml_provider_metadata_content_Set() const{
    return m_saml_provider_metadata_content_isSet;
}

bool OAISsoStrategyEntity::is_saml_provider_metadata_content_Valid() const{
    return m_saml_provider_metadata_content_isValid;
}

QString OAISsoStrategyEntity::getSamlProviderMetadataUrl() const {
    return m_saml_provider_metadata_url;
}
void OAISsoStrategyEntity::setSamlProviderMetadataUrl(const QString &saml_provider_metadata_url) {
    m_saml_provider_metadata_url = saml_provider_metadata_url;
    m_saml_provider_metadata_url_isSet = true;
}

bool OAISsoStrategyEntity::is_saml_provider_metadata_url_Set() const{
    return m_saml_provider_metadata_url_isSet;
}

bool OAISsoStrategyEntity::is_saml_provider_metadata_url_Valid() const{
    return m_saml_provider_metadata_url_isValid;
}

QString OAISsoStrategyEntity::getSamlProviderSloTargetUrl() const {
    return m_saml_provider_slo_target_url;
}
void OAISsoStrategyEntity::setSamlProviderSloTargetUrl(const QString &saml_provider_slo_target_url) {
    m_saml_provider_slo_target_url = saml_provider_slo_target_url;
    m_saml_provider_slo_target_url_isSet = true;
}

bool OAISsoStrategyEntity::is_saml_provider_slo_target_url_Set() const{
    return m_saml_provider_slo_target_url_isSet;
}

bool OAISsoStrategyEntity::is_saml_provider_slo_target_url_Valid() const{
    return m_saml_provider_slo_target_url_isValid;
}

QString OAISsoStrategyEntity::getSamlProviderSsoTargetUrl() const {
    return m_saml_provider_sso_target_url;
}
void OAISsoStrategyEntity::setSamlProviderSsoTargetUrl(const QString &saml_provider_sso_target_url) {
    m_saml_provider_sso_target_url = saml_provider_sso_target_url;
    m_saml_provider_sso_target_url_isSet = true;
}

bool OAISsoStrategyEntity::is_saml_provider_sso_target_url_Set() const{
    return m_saml_provider_sso_target_url_isSet;
}

bool OAISsoStrategyEntity::is_saml_provider_sso_target_url_Valid() const{
    return m_saml_provider_sso_target_url_isValid;
}

QString OAISsoStrategyEntity::getScimAuthenticationMethod() const {
    return m_scim_authentication_method;
}
void OAISsoStrategyEntity::setScimAuthenticationMethod(const QString &scim_authentication_method) {
    m_scim_authentication_method = scim_authentication_method;
    m_scim_authentication_method_isSet = true;
}

bool OAISsoStrategyEntity::is_scim_authentication_method_Set() const{
    return m_scim_authentication_method_isSet;
}

bool OAISsoStrategyEntity::is_scim_authentication_method_Valid() const{
    return m_scim_authentication_method_isValid;
}

QString OAISsoStrategyEntity::getScimOauthAccessToken() const {
    return m_scim_oauth_access_token;
}
void OAISsoStrategyEntity::setScimOauthAccessToken(const QString &scim_oauth_access_token) {
    m_scim_oauth_access_token = scim_oauth_access_token;
    m_scim_oauth_access_token_isSet = true;
}

bool OAISsoStrategyEntity::is_scim_oauth_access_token_Set() const{
    return m_scim_oauth_access_token_isSet;
}

bool OAISsoStrategyEntity::is_scim_oauth_access_token_Valid() const{
    return m_scim_oauth_access_token_isValid;
}

QString OAISsoStrategyEntity::getScimOauthAccessTokenExpiresAt() const {
    return m_scim_oauth_access_token_expires_at;
}
void OAISsoStrategyEntity::setScimOauthAccessTokenExpiresAt(const QString &scim_oauth_access_token_expires_at) {
    m_scim_oauth_access_token_expires_at = scim_oauth_access_token_expires_at;
    m_scim_oauth_access_token_expires_at_isSet = true;
}

bool OAISsoStrategyEntity::is_scim_oauth_access_token_expires_at_Set() const{
    return m_scim_oauth_access_token_expires_at_isSet;
}

bool OAISsoStrategyEntity::is_scim_oauth_access_token_expires_at_Valid() const{
    return m_scim_oauth_access_token_expires_at_isValid;
}

QString OAISsoStrategyEntity::getScimUsername() const {
    return m_scim_username;
}
void OAISsoStrategyEntity::setScimUsername(const QString &scim_username) {
    m_scim_username = scim_username;
    m_scim_username_isSet = true;
}

bool OAISsoStrategyEntity::is_scim_username_Set() const{
    return m_scim_username_isSet;
}

bool OAISsoStrategyEntity::is_scim_username_Valid() const{
    return m_scim_username_isValid;
}

QString OAISsoStrategyEntity::getSubdomain() const {
    return m_subdomain;
}
void OAISsoStrategyEntity::setSubdomain(const QString &subdomain) {
    m_subdomain = subdomain;
    m_subdomain_isSet = true;
}

bool OAISsoStrategyEntity::is_subdomain_Set() const{
    return m_subdomain_isSet;
}

bool OAISsoStrategyEntity::is_subdomain_Valid() const{
    return m_subdomain_isValid;
}

bool OAISsoStrategyEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprovision_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprovision_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprovision_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_base_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_host_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_host_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_secure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_username_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_attachments_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_dav_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_email_signup_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_ftp_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_group_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_group_exclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_group_inclusion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_group_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_sftp_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_site_admin_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_provider_cert_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_provider_issuer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_provider_metadata_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_provider_metadata_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_provider_slo_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_provider_sso_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scim_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scim_oauth_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scim_oauth_access_token_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scim_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISsoStrategyEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
