/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionEntity::OAIActionEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionEntity::OAIActionEntity() {
    this->initializeModel();
}

OAIActionEntity::~OAIActionEntity() {}

void OAIActionEntity::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_display_isSet = false;
    m_display_isValid = false;

    m_failure_type_isSet = false;
    m_failure_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_when_isSet = false;
    m_when_isValid = false;
}

void OAIActionEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActionEntity::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_display_isValid = ::OpenAPI::fromJsonValue(m_display, json[QString("display")]);
    m_display_isSet = !json[QString("display")].isNull() && m_display_isValid;

    m_failure_type_isValid = ::OpenAPI::fromJsonValue(m_failure_type, json[QString("failure_type")]);
    m_failure_type_isSet = !json[QString("failure_type")].isNull() && m_failure_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_when_isValid = ::OpenAPI::fromJsonValue(m_when, json[QString("when")]);
    m_when_isSet = !json[QString("when")].isNull() && m_when_isValid;
}

QString OAIActionEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActionEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_display_isSet) {
        obj.insert(QString("display"), ::OpenAPI::toJsonValue(m_display));
    }
    if (m_failure_type_isSet) {
        obj.insert(QString("failure_type"), ::OpenAPI::toJsonValue(m_failure_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_when_isSet) {
        obj.insert(QString("when"), ::OpenAPI::toJsonValue(m_when));
    }
    return obj;
}

QString OAIActionEntity::getAction() const {
    return m_action;
}
void OAIActionEntity::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIActionEntity::is_action_Set() const{
    return m_action_isSet;
}

bool OAIActionEntity::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIActionEntity::getDestination() const {
    return m_destination;
}
void OAIActionEntity::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIActionEntity::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIActionEntity::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIActionEntity::getDisplay() const {
    return m_display;
}
void OAIActionEntity::setDisplay(const QString &display) {
    m_display = display;
    m_display_isSet = true;
}

bool OAIActionEntity::is_display_Set() const{
    return m_display_isSet;
}

bool OAIActionEntity::is_display_Valid() const{
    return m_display_isValid;
}

QString OAIActionEntity::getFailureType() const {
    return m_failure_type;
}
void OAIActionEntity::setFailureType(const QString &failure_type) {
    m_failure_type = failure_type;
    m_failure_type_isSet = true;
}

bool OAIActionEntity::is_failure_type_Set() const{
    return m_failure_type_isSet;
}

bool OAIActionEntity::is_failure_type_Valid() const{
    return m_failure_type_isValid;
}

qint32 OAIActionEntity::getId() const {
    return m_id;
}
void OAIActionEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActionEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActionEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActionEntity::getInterface() const {
    return m_interface;
}
void OAIActionEntity::setInterface(const QString &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIActionEntity::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIActionEntity::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIActionEntity::getIp() const {
    return m_ip;
}
void OAIActionEntity::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIActionEntity::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIActionEntity::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIActionEntity::getPath() const {
    return m_path;
}
void OAIActionEntity::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIActionEntity::is_path_Set() const{
    return m_path_isSet;
}

bool OAIActionEntity::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIActionEntity::getSource() const {
    return m_source;
}
void OAIActionEntity::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIActionEntity::is_source_Set() const{
    return m_source_isSet;
}

bool OAIActionEntity::is_source_Valid() const{
    return m_source_isValid;
}

QList<OAIObject> OAIActionEntity::getTargets() const {
    return m_targets;
}
void OAIActionEntity::setTargets(const QList<OAIObject> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIActionEntity::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIActionEntity::is_targets_Valid() const{
    return m_targets_isValid;
}

qint32 OAIActionEntity::getUserId() const {
    return m_user_id;
}
void OAIActionEntity::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIActionEntity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIActionEntity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIActionEntity::getUsername() const {
    return m_username;
}
void OAIActionEntity::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIActionEntity::is_username_Set() const{
    return m_username_isSet;
}

bool OAIActionEntity::is_username_Valid() const{
    return m_username_isValid;
}

QDateTime OAIActionEntity::getWhen() const {
    return m_when;
}
void OAIActionEntity::setWhen(const QDateTime &when) {
    m_when = when;
    m_when_isSet = true;
}

bool OAIActionEntity::is_when_Set() const{
    return m_when_isSet;
}

bool OAIActionEntity::is_when_Valid() const{
    return m_when_isValid;
}

bool OAIActionEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_when_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActionEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
