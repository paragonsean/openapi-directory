/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsRecordEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsRecordEntity::OAIDnsRecordEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsRecordEntity::OAIDnsRecordEntity() {
    this->initializeModel();
}

OAIDnsRecordEntity::~OAIDnsRecordEntity() {}

void OAIDnsRecordEntity::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_rrtype_isSet = false;
    m_rrtype_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDnsRecordEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsRecordEntity::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_rrtype_isValid = ::OpenAPI::fromJsonValue(m_rrtype, json[QString("rrtype")]);
    m_rrtype_isSet = !json[QString("rrtype")].isNull() && m_rrtype_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDnsRecordEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsRecordEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_rrtype_isSet) {
        obj.insert(QString("rrtype"), ::OpenAPI::toJsonValue(m_rrtype));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDnsRecordEntity::getDomain() const {
    return m_domain;
}
void OAIDnsRecordEntity::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDnsRecordEntity::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDnsRecordEntity::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDnsRecordEntity::getId() const {
    return m_id;
}
void OAIDnsRecordEntity::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDnsRecordEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDnsRecordEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDnsRecordEntity::getRrtype() const {
    return m_rrtype;
}
void OAIDnsRecordEntity::setRrtype(const QString &rrtype) {
    m_rrtype = rrtype;
    m_rrtype_isSet = true;
}

bool OAIDnsRecordEntity::is_rrtype_Set() const{
    return m_rrtype_isSet;
}

bool OAIDnsRecordEntity::is_rrtype_Valid() const{
    return m_rrtype_isValid;
}

QString OAIDnsRecordEntity::getValue() const {
    return m_value;
}
void OAIDnsRecordEntity::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDnsRecordEntity::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDnsRecordEntity::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDnsRecordEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rrtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsRecordEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
