/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FilesComApi);
  }
}(this, function(expect, FilesComApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FilesComApi.AutomationEntity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AutomationEntity', function() {
    it('should create an instance of AutomationEntity', function() {
      // uncomment below and update the code to test AutomationEntity
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be.a(FilesComApi.AutomationEntity);
    });

    it('should have the property automation (base name: "automation")', function() {
      // uncomment below and update the code to test the property automation
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property deleted (base name: "deleted")', function() {
      // uncomment below and update the code to test the property deleted
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property destinationReplaceFrom (base name: "destination_replace_from")', function() {
      // uncomment below and update the code to test the property destinationReplaceFrom
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property destinationReplaceTo (base name: "destination_replace_to")', function() {
      // uncomment below and update the code to test the property destinationReplaceTo
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property destinations (base name: "destinations")', function() {
      // uncomment below and update the code to test the property destinations
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property groupIds (base name: "group_ids")', function() {
      // uncomment below and update the code to test the property groupIds
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property interval (base name: "interval")', function() {
      // uncomment below and update the code to test the property interval
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedAt (base name: "last_modified_at")', function() {
      // uncomment below and update the code to test the property lastModifiedAt
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property recurringDay (base name: "recurring_day")', function() {
      // uncomment below and update the code to test the property recurringDay
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property schedule (base name: "schedule")', function() {
      // uncomment below and update the code to test the property schedule
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property syncIds (base name: "sync_ids")', function() {
      // uncomment below and update the code to test the property syncIds
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property trigger (base name: "trigger")', function() {
      // uncomment below and update the code to test the property trigger
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property triggerActions (base name: "trigger_actions")', function() {
      // uncomment below and update the code to test the property triggerActions
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property userIds (base name: "user_ids")', function() {
      // uncomment below and update the code to test the property userIds
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property value (base name: "value")', function() {
      // uncomment below and update the code to test the property value
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

    it('should have the property webhookUrl (base name: "webhook_url")', function() {
      // uncomment below and update the code to test the property webhookUrl
      //var instance = new FilesComApi.AutomationEntity();
      //expect(instance).to.be();
    });

  });

}));
