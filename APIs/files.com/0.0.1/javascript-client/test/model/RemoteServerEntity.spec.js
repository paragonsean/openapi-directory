/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FilesComApi);
  }
}(this, function(expect, FilesComApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FilesComApi.RemoteServerEntity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RemoteServerEntity', function() {
    it('should create an instance of RemoteServerEntity', function() {
      // uncomment below and update the code to test RemoteServerEntity
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be.a(FilesComApi.RemoteServerEntity);
    });

    it('should have the property authAccountName (base name: "auth_account_name")', function() {
      // uncomment below and update the code to test the property authAccountName
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property authSetupLink (base name: "auth_setup_link")', function() {
      // uncomment below and update the code to test the property authSetupLink
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property authStatus (base name: "auth_status")', function() {
      // uncomment below and update the code to test the property authStatus
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property authenticationMethod (base name: "authentication_method")', function() {
      // uncomment below and update the code to test the property authenticationMethod
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property awsAccessKey (base name: "aws_access_key")', function() {
      // uncomment below and update the code to test the property awsAccessKey
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property azureBlobStorageAccount (base name: "azure_blob_storage_account")', function() {
      // uncomment below and update the code to test the property azureBlobStorageAccount
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property azureBlobStorageContainer (base name: "azure_blob_storage_container")', function() {
      // uncomment below and update the code to test the property azureBlobStorageContainer
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property azureBlobStorageSasToken (base name: "azure_blob_storage_sas_token")', function() {
      // uncomment below and update the code to test the property azureBlobStorageSasToken
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property azureFilesStorageAccount (base name: "azure_files_storage_account")', function() {
      // uncomment below and update the code to test the property azureFilesStorageAccount
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property azureFilesStorageSasToken (base name: "azure_files_storage_sas_token")', function() {
      // uncomment below and update the code to test the property azureFilesStorageSasToken
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property azureFilesStorageShareName (base name: "azure_files_storage_share_name")', function() {
      // uncomment below and update the code to test the property azureFilesStorageShareName
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property backblazeB2Bucket (base name: "backblaze_b2_bucket")', function() {
      // uncomment below and update the code to test the property backblazeB2Bucket
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property backblazeB2S3Endpoint (base name: "backblaze_b2_s3_endpoint")', function() {
      // uncomment below and update the code to test the property backblazeB2S3Endpoint
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property enableDedicatedIps (base name: "enable_dedicated_ips")', function() {
      // uncomment below and update the code to test the property enableDedicatedIps
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property filebaseAccessKey (base name: "filebase_access_key")', function() {
      // uncomment below and update the code to test the property filebaseAccessKey
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property filebaseBucket (base name: "filebase_bucket")', function() {
      // uncomment below and update the code to test the property filebaseBucket
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property filesAgentApiToken (base name: "files_agent_api_token")', function() {
      // uncomment below and update the code to test the property filesAgentApiToken
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property filesAgentPermissionSet (base name: "files_agent_permission_set")', function() {
      // uncomment below and update the code to test the property filesAgentPermissionSet
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property filesAgentRoot (base name: "files_agent_root")', function() {
      // uncomment below and update the code to test the property filesAgentRoot
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property googleCloudStorageBucket (base name: "google_cloud_storage_bucket")', function() {
      // uncomment below and update the code to test the property googleCloudStorageBucket
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property googleCloudStorageProjectId (base name: "google_cloud_storage_project_id")', function() {
      // uncomment below and update the code to test the property googleCloudStorageProjectId
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property maxConnections (base name: "max_connections")', function() {
      // uncomment below and update the code to test the property maxConnections
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property oneDriveAccountType (base name: "one_drive_account_type")', function() {
      // uncomment below and update the code to test the property oneDriveAccountType
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property pinToSiteRegion (base name: "pin_to_site_region")', function() {
      // uncomment below and update the code to test the property pinToSiteRegion
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property pinnedRegion (base name: "pinned_region")', function() {
      // uncomment below and update the code to test the property pinnedRegion
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property rackspaceContainer (base name: "rackspace_container")', function() {
      // uncomment below and update the code to test the property rackspaceContainer
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property rackspaceRegion (base name: "rackspace_region")', function() {
      // uncomment below and update the code to test the property rackspaceRegion
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property rackspaceUsername (base name: "rackspace_username")', function() {
      // uncomment below and update the code to test the property rackspaceUsername
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property remoteHomePath (base name: "remote_home_path")', function() {
      // uncomment below and update the code to test the property remoteHomePath
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property s3Bucket (base name: "s3_bucket")', function() {
      // uncomment below and update the code to test the property s3Bucket
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property s3CompatibleAccessKey (base name: "s3_compatible_access_key")', function() {
      // uncomment below and update the code to test the property s3CompatibleAccessKey
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property s3CompatibleBucket (base name: "s3_compatible_bucket")', function() {
      // uncomment below and update the code to test the property s3CompatibleBucket
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property s3CompatibleEndpoint (base name: "s3_compatible_endpoint")', function() {
      // uncomment below and update the code to test the property s3CompatibleEndpoint
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property s3CompatibleRegion (base name: "s3_compatible_region")', function() {
      // uncomment below and update the code to test the property s3CompatibleRegion
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property s3Region (base name: "s3_region")', function() {
      // uncomment below and update the code to test the property s3Region
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property serverCertificate (base name: "server_certificate")', function() {
      // uncomment below and update the code to test the property serverCertificate
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property serverHostKey (base name: "server_host_key")', function() {
      // uncomment below and update the code to test the property serverHostKey
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property serverType (base name: "server_type")', function() {
      // uncomment below and update the code to test the property serverType
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property ssl (base name: "ssl")', function() {
      // uncomment below and update the code to test the property ssl
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property wasabiAccessKey (base name: "wasabi_access_key")', function() {
      // uncomment below and update the code to test the property wasabiAccessKey
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property wasabiBucket (base name: "wasabi_bucket")', function() {
      // uncomment below and update the code to test the property wasabiBucket
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

    it('should have the property wasabiRegion (base name: "wasabi_region")', function() {
      // uncomment below and update the code to test the property wasabiRegion
      //var instance = new FilesComApi.RemoteServerEntity();
      //expect(instance).to.be();
    });

  });

}));
