/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FilesComApi);
  }
}(this, function(expect, FilesComApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FilesComApi.FileEntity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FileEntity', function() {
    it('should create an instance of FileEntity', function() {
      // uncomment below and update the code to test FileEntity
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be.a(FilesComApi.FileEntity);
    });

    it('should have the property crc32 (base name: "crc32")', function() {
      // uncomment below and update the code to test the property crc32
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "display_name")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property downloadUri (base name: "download_uri")', function() {
      // uncomment below and update the code to test the property downloadUri
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property isLocked (base name: "is_locked")', function() {
      // uncomment below and update the code to test the property isLocked
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property md5 (base name: "md5")', function() {
      // uncomment below and update the code to test the property md5
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property mimeType (base name: "mime_type")', function() {
      // uncomment below and update the code to test the property mimeType
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property mtime (base name: "mtime")', function() {
      // uncomment below and update the code to test the property mtime
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property preview (base name: "preview")', function() {
      // uncomment below and update the code to test the property preview
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property previewId (base name: "preview_id")', function() {
      // uncomment below and update the code to test the property previewId
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property priorityColor (base name: "priority_color")', function() {
      // uncomment below and update the code to test the property priorityColor
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property providedMtime (base name: "provided_mtime")', function() {
      // uncomment below and update the code to test the property providedMtime
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property subfoldersLocked (base name: "subfolders_locked?")', function() {
      // uncomment below and update the code to test the property subfoldersLocked
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new FilesComApi.FileEntity();
      //expect(instance).to.be();
    });

  });

}));
