/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FilesComApi);
  }
}(this, function(expect, FilesComApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FilesComApi.BundleEntity();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BundleEntity', function() {
    it('should create an instance of BundleEntity', function() {
      // uncomment below and update the code to test BundleEntity
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be.a(FilesComApi.BundleEntity);
    });

    it('should have the property clickwrapBody (base name: "clickwrap_body")', function() {
      // uncomment below and update the code to test the property clickwrapBody
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property clickwrapId (base name: "clickwrap_id")', function() {
      // uncomment below and update the code to test the property clickwrapId
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property dontSeparateSubmissionsByFolder (base name: "dont_separate_submissions_by_folder")', function() {
      // uncomment below and update the code to test the property dontSeparateSubmissionsByFolder
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property expiresAt (base name: "expires_at")', function() {
      // uncomment below and update the code to test the property expiresAt
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property formFieldSet (base name: "form_field_set")', function() {
      // uncomment below and update the code to test the property formFieldSet
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property hasInbox (base name: "has_inbox")', function() {
      // uncomment below and update the code to test the property hasInbox
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property inboxId (base name: "inbox_id")', function() {
      // uncomment below and update the code to test the property inboxId
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property maxUses (base name: "max_uses")', function() {
      // uncomment below and update the code to test the property maxUses
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property note (base name: "note")', function() {
      // uncomment below and update the code to test the property note
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property passwordProtected (base name: "password_protected")', function() {
      // uncomment below and update the code to test the property passwordProtected
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property pathTemplate (base name: "path_template")', function() {
      // uncomment below and update the code to test the property pathTemplate
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property paths (base name: "paths")', function() {
      // uncomment below and update the code to test the property paths
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property previewOnly (base name: "preview_only")', function() {
      // uncomment below and update the code to test the property previewOnly
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property requireRegistration (base name: "require_registration")', function() {
      // uncomment below and update the code to test the property requireRegistration
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property requireShareRecipient (base name: "require_share_recipient")', function() {
      // uncomment below and update the code to test the property requireShareRecipient
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property sendEmailReceiptToUploader (base name: "send_email_receipt_to_uploader")', function() {
      // uncomment below and update the code to test the property sendEmailReceiptToUploader
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property skipCompany (base name: "skip_company")', function() {
      // uncomment below and update the code to test the property skipCompany
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property skipEmail (base name: "skip_email")', function() {
      // uncomment below and update the code to test the property skipEmail
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property skipName (base name: "skip_name")', function() {
      // uncomment below and update the code to test the property skipName
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property watermarkAttachment (base name: "watermark_attachment")', function() {
      // uncomment below and update the code to test the property watermarkAttachment
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

    it('should have the property watermarkValue (base name: "watermark_value")', function() {
      // uncomment below and update the code to test the property watermarkValue
      //var instance = new FilesComApi.BundleEntity();
      //expect(instance).to.be();
    });

  });

}));
