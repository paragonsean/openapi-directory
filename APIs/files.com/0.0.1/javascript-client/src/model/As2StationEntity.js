/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The As2StationEntity model module.
 * @module model/As2StationEntity
 * @version 0.0.1
 */
class As2StationEntity {
    /**
     * Constructs a new <code>As2StationEntity</code>.
     * Create As2 Station
     * @alias module:model/As2StationEntity
     */
    constructor() { 
        
        As2StationEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>As2StationEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/As2StationEntity} obj Optional instance to populate.
     * @return {module:model/As2StationEntity} The populated <code>As2StationEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new As2StationEntity();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('hex_public_certificate_serial')) {
                obj['hex_public_certificate_serial'] = ApiClient.convertToType(data['hex_public_certificate_serial'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('private_key_md5')) {
                obj['private_key_md5'] = ApiClient.convertToType(data['private_key_md5'], 'String');
            }
            if (data.hasOwnProperty('private_key_password_md5')) {
                obj['private_key_password_md5'] = ApiClient.convertToType(data['private_key_password_md5'], 'String');
            }
            if (data.hasOwnProperty('public_certificate_issuer')) {
                obj['public_certificate_issuer'] = ApiClient.convertToType(data['public_certificate_issuer'], 'String');
            }
            if (data.hasOwnProperty('public_certificate_md5')) {
                obj['public_certificate_md5'] = ApiClient.convertToType(data['public_certificate_md5'], 'String');
            }
            if (data.hasOwnProperty('public_certificate_not_after')) {
                obj['public_certificate_not_after'] = ApiClient.convertToType(data['public_certificate_not_after'], 'String');
            }
            if (data.hasOwnProperty('public_certificate_not_before')) {
                obj['public_certificate_not_before'] = ApiClient.convertToType(data['public_certificate_not_before'], 'String');
            }
            if (data.hasOwnProperty('public_certificate_serial')) {
                obj['public_certificate_serial'] = ApiClient.convertToType(data['public_certificate_serial'], 'String');
            }
            if (data.hasOwnProperty('public_certificate_subject')) {
                obj['public_certificate_subject'] = ApiClient.convertToType(data['public_certificate_subject'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>As2StationEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>As2StationEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['hex_public_certificate_serial'] && !(typeof data['hex_public_certificate_serial'] === 'string' || data['hex_public_certificate_serial'] instanceof String)) {
            throw new Error("Expected the field `hex_public_certificate_serial` to be a primitive type in the JSON string but got " + data['hex_public_certificate_serial']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['private_key_md5'] && !(typeof data['private_key_md5'] === 'string' || data['private_key_md5'] instanceof String)) {
            throw new Error("Expected the field `private_key_md5` to be a primitive type in the JSON string but got " + data['private_key_md5']);
        }
        // ensure the json data is a string
        if (data['private_key_password_md5'] && !(typeof data['private_key_password_md5'] === 'string' || data['private_key_password_md5'] instanceof String)) {
            throw new Error("Expected the field `private_key_password_md5` to be a primitive type in the JSON string but got " + data['private_key_password_md5']);
        }
        // ensure the json data is a string
        if (data['public_certificate_issuer'] && !(typeof data['public_certificate_issuer'] === 'string' || data['public_certificate_issuer'] instanceof String)) {
            throw new Error("Expected the field `public_certificate_issuer` to be a primitive type in the JSON string but got " + data['public_certificate_issuer']);
        }
        // ensure the json data is a string
        if (data['public_certificate_md5'] && !(typeof data['public_certificate_md5'] === 'string' || data['public_certificate_md5'] instanceof String)) {
            throw new Error("Expected the field `public_certificate_md5` to be a primitive type in the JSON string but got " + data['public_certificate_md5']);
        }
        // ensure the json data is a string
        if (data['public_certificate_not_after'] && !(typeof data['public_certificate_not_after'] === 'string' || data['public_certificate_not_after'] instanceof String)) {
            throw new Error("Expected the field `public_certificate_not_after` to be a primitive type in the JSON string but got " + data['public_certificate_not_after']);
        }
        // ensure the json data is a string
        if (data['public_certificate_not_before'] && !(typeof data['public_certificate_not_before'] === 'string' || data['public_certificate_not_before'] instanceof String)) {
            throw new Error("Expected the field `public_certificate_not_before` to be a primitive type in the JSON string but got " + data['public_certificate_not_before']);
        }
        // ensure the json data is a string
        if (data['public_certificate_serial'] && !(typeof data['public_certificate_serial'] === 'string' || data['public_certificate_serial'] instanceof String)) {
            throw new Error("Expected the field `public_certificate_serial` to be a primitive type in the JSON string but got " + data['public_certificate_serial']);
        }
        // ensure the json data is a string
        if (data['public_certificate_subject'] && !(typeof data['public_certificate_subject'] === 'string' || data['public_certificate_subject'] instanceof String)) {
            throw new Error("Expected the field `public_certificate_subject` to be a primitive type in the JSON string but got " + data['public_certificate_subject']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * The station's AS2 domain name.
 * @member {String} domain
 */
As2StationEntity.prototype['domain'] = undefined;

/**
 * Serial of public certificate used for message security in hex format.
 * @member {String} hex_public_certificate_serial
 */
As2StationEntity.prototype['hex_public_certificate_serial'] = undefined;

/**
 * Id of the AS2 Station.
 * @member {Number} id
 */
As2StationEntity.prototype['id'] = undefined;

/**
 * The station's formal AS2 name.
 * @member {String} name
 */
As2StationEntity.prototype['name'] = undefined;

/**
 * MD5 hash of private key used for message security.
 * @member {String} private_key_md5
 */
As2StationEntity.prototype['private_key_md5'] = undefined;

/**
 * MD5 hash of private key password used for message security.
 * @member {String} private_key_password_md5
 */
As2StationEntity.prototype['private_key_password_md5'] = undefined;

/**
 * Issuer of public certificate used for message security.
 * @member {String} public_certificate_issuer
 */
As2StationEntity.prototype['public_certificate_issuer'] = undefined;

/**
 * MD5 hash of public certificate used for message security.
 * @member {String} public_certificate_md5
 */
As2StationEntity.prototype['public_certificate_md5'] = undefined;

/**
 * Not after value of public certificate used for message security.
 * @member {String} public_certificate_not_after
 */
As2StationEntity.prototype['public_certificate_not_after'] = undefined;

/**
 * Not before value of public certificate used for message security.
 * @member {String} public_certificate_not_before
 */
As2StationEntity.prototype['public_certificate_not_before'] = undefined;

/**
 * Serial of public certificate used for message security.
 * @member {String} public_certificate_serial
 */
As2StationEntity.prototype['public_certificate_serial'] = undefined;

/**
 * Subject of public certificate used for message security.
 * @member {String} public_certificate_subject
 */
As2StationEntity.prototype['public_certificate_subject'] = undefined;

/**
 * Public URI for sending AS2 message to.
 * @member {String} uri
 */
As2StationEntity.prototype['uri'] = undefined;






export default As2StationEntity;

