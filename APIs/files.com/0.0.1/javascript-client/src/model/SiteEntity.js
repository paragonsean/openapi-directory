/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageEntity from './ImageEntity';
import SessionEntity from './SessionEntity';
import UserEntity from './UserEntity';

/**
 * The SiteEntity model module.
 * @module model/SiteEntity
 * @version 0.0.1
 */
class SiteEntity {
    /**
     * Constructs a new <code>SiteEntity</code>.
     * Show site settings
     * @alias module:model/SiteEntity
     */
    constructor() { 
        
        SiteEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SiteEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SiteEntity} obj Optional instance to populate.
     * @return {module:model/SiteEntity} The populated <code>SiteEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SiteEntity();

            if (data.hasOwnProperty('active_sftp_host_key_id')) {
                obj['active_sftp_host_key_id'] = ApiClient.convertToType(data['active_sftp_host_key_id'], 'Number');
            }
            if (data.hasOwnProperty('admin_user_id')) {
                obj['admin_user_id'] = ApiClient.convertToType(data['admin_user_id'], 'Number');
            }
            if (data.hasOwnProperty('allow_bundle_names')) {
                obj['allow_bundle_names'] = ApiClient.convertToType(data['allow_bundle_names'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_2fa_method_bypass_for_ftp_sftp_dav')) {
                obj['allowed_2fa_method_bypass_for_ftp_sftp_dav'] = ApiClient.convertToType(data['allowed_2fa_method_bypass_for_ftp_sftp_dav'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_2fa_method_sms')) {
                obj['allowed_2fa_method_sms'] = ApiClient.convertToType(data['allowed_2fa_method_sms'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_2fa_method_totp')) {
                obj['allowed_2fa_method_totp'] = ApiClient.convertToType(data['allowed_2fa_method_totp'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_2fa_method_u2f')) {
                obj['allowed_2fa_method_u2f'] = ApiClient.convertToType(data['allowed_2fa_method_u2f'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_2fa_method_webauthn')) {
                obj['allowed_2fa_method_webauthn'] = ApiClient.convertToType(data['allowed_2fa_method_webauthn'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_2fa_method_yubi')) {
                obj['allowed_2fa_method_yubi'] = ApiClient.convertToType(data['allowed_2fa_method_yubi'], 'Boolean');
            }
            if (data.hasOwnProperty('allowed_countries')) {
                obj['allowed_countries'] = ApiClient.convertToType(data['allowed_countries'], 'String');
            }
            if (data.hasOwnProperty('allowed_ips')) {
                obj['allowed_ips'] = ApiClient.convertToType(data['allowed_ips'], 'String');
            }
            if (data.hasOwnProperty('ask_about_overwrites')) {
                obj['ask_about_overwrites'] = ApiClient.convertToType(data['ask_about_overwrites'], 'Boolean');
            }
            if (data.hasOwnProperty('bundle_activity_notifications')) {
                obj['bundle_activity_notifications'] = ApiClient.convertToType(data['bundle_activity_notifications'], 'String');
            }
            if (data.hasOwnProperty('bundle_expiration')) {
                obj['bundle_expiration'] = ApiClient.convertToType(data['bundle_expiration'], 'Number');
            }
            if (data.hasOwnProperty('bundle_password_required')) {
                obj['bundle_password_required'] = ApiClient.convertToType(data['bundle_password_required'], 'Boolean');
            }
            if (data.hasOwnProperty('bundle_registration_notifications')) {
                obj['bundle_registration_notifications'] = ApiClient.convertToType(data['bundle_registration_notifications'], 'String');
            }
            if (data.hasOwnProperty('bundle_require_share_recipient')) {
                obj['bundle_require_share_recipient'] = ApiClient.convertToType(data['bundle_require_share_recipient'], 'Boolean');
            }
            if (data.hasOwnProperty('bundle_upload_receipt_notifications')) {
                obj['bundle_upload_receipt_notifications'] = ApiClient.convertToType(data['bundle_upload_receipt_notifications'], 'String');
            }
            if (data.hasOwnProperty('bundle_watermark_attachment')) {
                obj['bundle_watermark_attachment'] = ImageEntity.constructFromObject(data['bundle_watermark_attachment']);
            }
            if (data.hasOwnProperty('bundle_watermark_value')) {
                obj['bundle_watermark_value'] = ApiClient.convertToType(data['bundle_watermark_value'], Object);
            }
            if (data.hasOwnProperty('color2_left')) {
                obj['color2_left'] = ApiClient.convertToType(data['color2_left'], 'String');
            }
            if (data.hasOwnProperty('color2_link')) {
                obj['color2_link'] = ApiClient.convertToType(data['color2_link'], 'String');
            }
            if (data.hasOwnProperty('color2_text')) {
                obj['color2_text'] = ApiClient.convertToType(data['color2_text'], 'String');
            }
            if (data.hasOwnProperty('color2_top')) {
                obj['color2_top'] = ApiClient.convertToType(data['color2_top'], 'String');
            }
            if (data.hasOwnProperty('color2_top_text')) {
                obj['color2_top_text'] = ApiClient.convertToType(data['color2_top_text'], 'String');
            }
            if (data.hasOwnProperty('contact_name')) {
                obj['contact_name'] = ApiClient.convertToType(data['contact_name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('custom_namespace')) {
                obj['custom_namespace'] = ApiClient.convertToType(data['custom_namespace'], 'Boolean');
            }
            if (data.hasOwnProperty('days_to_retain_backups')) {
                obj['days_to_retain_backups'] = ApiClient.convertToType(data['days_to_retain_backups'], 'Number');
            }
            if (data.hasOwnProperty('default_time_zone')) {
                obj['default_time_zone'] = ApiClient.convertToType(data['default_time_zone'], 'String');
            }
            if (data.hasOwnProperty('desktop_app')) {
                obj['desktop_app'] = ApiClient.convertToType(data['desktop_app'], 'Boolean');
            }
            if (data.hasOwnProperty('desktop_app_session_ip_pinning')) {
                obj['desktop_app_session_ip_pinning'] = ApiClient.convertToType(data['desktop_app_session_ip_pinning'], 'Boolean');
            }
            if (data.hasOwnProperty('desktop_app_session_lifetime')) {
                obj['desktop_app_session_lifetime'] = ApiClient.convertToType(data['desktop_app_session_lifetime'], 'Number');
            }
            if (data.hasOwnProperty('disable_files_certificate_generation')) {
                obj['disable_files_certificate_generation'] = ApiClient.convertToType(data['disable_files_certificate_generation'], 'Boolean');
            }
            if (data.hasOwnProperty('disable_notifications')) {
                obj['disable_notifications'] = ApiClient.convertToType(data['disable_notifications'], 'Boolean');
            }
            if (data.hasOwnProperty('disable_password_reset')) {
                obj['disable_password_reset'] = ApiClient.convertToType(data['disable_password_reset'], 'Boolean');
            }
            if (data.hasOwnProperty('disable_users_from_inactivity_period_days')) {
                obj['disable_users_from_inactivity_period_days'] = ApiClient.convertToType(data['disable_users_from_inactivity_period_days'], 'Number');
            }
            if (data.hasOwnProperty('disallowed_countries')) {
                obj['disallowed_countries'] = ApiClient.convertToType(data['disallowed_countries'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('domain_hsts_header')) {
                obj['domain_hsts_header'] = ApiClient.convertToType(data['domain_hsts_header'], 'Boolean');
            }
            if (data.hasOwnProperty('domain_letsencrypt_chain')) {
                obj['domain_letsencrypt_chain'] = ApiClient.convertToType(data['domain_letsencrypt_chain'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('folder_permissions_groups_only')) {
                obj['folder_permissions_groups_only'] = ApiClient.convertToType(data['folder_permissions_groups_only'], 'Boolean');
            }
            if (data.hasOwnProperty('ftp_enabled')) {
                obj['ftp_enabled'] = ApiClient.convertToType(data['ftp_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('hipaa')) {
                obj['hipaa'] = ApiClient.convertToType(data['hipaa'], 'Boolean');
            }
            if (data.hasOwnProperty('icon128')) {
                obj['icon128'] = ImageEntity.constructFromObject(data['icon128']);
            }
            if (data.hasOwnProperty('icon16')) {
                obj['icon16'] = ImageEntity.constructFromObject(data['icon16']);
            }
            if (data.hasOwnProperty('icon32')) {
                obj['icon32'] = ImageEntity.constructFromObject(data['icon32']);
            }
            if (data.hasOwnProperty('icon48')) {
                obj['icon48'] = ImageEntity.constructFromObject(data['icon48']);
            }
            if (data.hasOwnProperty('immutable_files_set_at')) {
                obj['immutable_files_set_at'] = ApiClient.convertToType(data['immutable_files_set_at'], 'Date');
            }
            if (data.hasOwnProperty('include_password_in_welcome_email')) {
                obj['include_password_in_welcome_email'] = ApiClient.convertToType(data['include_password_in_welcome_email'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('ldap_base_dn')) {
                obj['ldap_base_dn'] = ApiClient.convertToType(data['ldap_base_dn'], 'String');
            }
            if (data.hasOwnProperty('ldap_domain')) {
                obj['ldap_domain'] = ApiClient.convertToType(data['ldap_domain'], 'String');
            }
            if (data.hasOwnProperty('ldap_enabled')) {
                obj['ldap_enabled'] = ApiClient.convertToType(data['ldap_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ldap_group_action')) {
                obj['ldap_group_action'] = ApiClient.convertToType(data['ldap_group_action'], 'String');
            }
            if (data.hasOwnProperty('ldap_group_exclusion')) {
                obj['ldap_group_exclusion'] = ApiClient.convertToType(data['ldap_group_exclusion'], 'String');
            }
            if (data.hasOwnProperty('ldap_group_inclusion')) {
                obj['ldap_group_inclusion'] = ApiClient.convertToType(data['ldap_group_inclusion'], 'String');
            }
            if (data.hasOwnProperty('ldap_host')) {
                obj['ldap_host'] = ApiClient.convertToType(data['ldap_host'], 'String');
            }
            if (data.hasOwnProperty('ldap_host_2')) {
                obj['ldap_host_2'] = ApiClient.convertToType(data['ldap_host_2'], 'String');
            }
            if (data.hasOwnProperty('ldap_host_3')) {
                obj['ldap_host_3'] = ApiClient.convertToType(data['ldap_host_3'], 'String');
            }
            if (data.hasOwnProperty('ldap_port')) {
                obj['ldap_port'] = ApiClient.convertToType(data['ldap_port'], 'Number');
            }
            if (data.hasOwnProperty('ldap_secure')) {
                obj['ldap_secure'] = ApiClient.convertToType(data['ldap_secure'], 'Boolean');
            }
            if (data.hasOwnProperty('ldap_type')) {
                obj['ldap_type'] = ApiClient.convertToType(data['ldap_type'], 'String');
            }
            if (data.hasOwnProperty('ldap_user_action')) {
                obj['ldap_user_action'] = ApiClient.convertToType(data['ldap_user_action'], 'String');
            }
            if (data.hasOwnProperty('ldap_user_include_groups')) {
                obj['ldap_user_include_groups'] = ApiClient.convertToType(data['ldap_user_include_groups'], 'String');
            }
            if (data.hasOwnProperty('ldap_username')) {
                obj['ldap_username'] = ApiClient.convertToType(data['ldap_username'], 'String');
            }
            if (data.hasOwnProperty('ldap_username_field')) {
                obj['ldap_username_field'] = ApiClient.convertToType(data['ldap_username_field'], 'String');
            }
            if (data.hasOwnProperty('login_help_text')) {
                obj['login_help_text'] = ApiClient.convertToType(data['login_help_text'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ImageEntity.constructFromObject(data['logo']);
            }
            if (data.hasOwnProperty('max_prior_passwords')) {
                obj['max_prior_passwords'] = ApiClient.convertToType(data['max_prior_passwords'], 'Number');
            }
            if (data.hasOwnProperty('mobile_app')) {
                obj['mobile_app'] = ApiClient.convertToType(data['mobile_app'], 'Boolean');
            }
            if (data.hasOwnProperty('mobile_app_session_ip_pinning')) {
                obj['mobile_app_session_ip_pinning'] = ApiClient.convertToType(data['mobile_app_session_ip_pinning'], 'Boolean');
            }
            if (data.hasOwnProperty('mobile_app_session_lifetime')) {
                obj['mobile_app_session_lifetime'] = ApiClient.convertToType(data['mobile_app_session_lifetime'], 'Number');
            }
            if (data.hasOwnProperty('motd_text')) {
                obj['motd_text'] = ApiClient.convertToType(data['motd_text'], 'String');
            }
            if (data.hasOwnProperty('motd_use_for_ftp')) {
                obj['motd_use_for_ftp'] = ApiClient.convertToType(data['motd_use_for_ftp'], 'Boolean');
            }
            if (data.hasOwnProperty('motd_use_for_sftp')) {
                obj['motd_use_for_sftp'] = ApiClient.convertToType(data['motd_use_for_sftp'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('next_billing_amount')) {
                obj['next_billing_amount'] = ApiClient.convertToType(data['next_billing_amount'], 'Number');
            }
            if (data.hasOwnProperty('next_billing_date')) {
                obj['next_billing_date'] = ApiClient.convertToType(data['next_billing_date'], 'String');
            }
            if (data.hasOwnProperty('non_sso_groups_allowed')) {
                obj['non_sso_groups_allowed'] = ApiClient.convertToType(data['non_sso_groups_allowed'], 'Boolean');
            }
            if (data.hasOwnProperty('non_sso_users_allowed')) {
                obj['non_sso_users_allowed'] = ApiClient.convertToType(data['non_sso_users_allowed'], 'Boolean');
            }
            if (data.hasOwnProperty('office_integration_available')) {
                obj['office_integration_available'] = ApiClient.convertToType(data['office_integration_available'], 'Boolean');
            }
            if (data.hasOwnProperty('office_integration_type')) {
                obj['office_integration_type'] = ApiClient.convertToType(data['office_integration_type'], 'String');
            }
            if (data.hasOwnProperty('oncehub_link')) {
                obj['oncehub_link'] = ApiClient.convertToType(data['oncehub_link'], 'String');
            }
            if (data.hasOwnProperty('opt_out_global')) {
                obj['opt_out_global'] = ApiClient.convertToType(data['opt_out_global'], 'Boolean');
            }
            if (data.hasOwnProperty('overdue')) {
                obj['overdue'] = ApiClient.convertToType(data['overdue'], 'Boolean');
            }
            if (data.hasOwnProperty('password_min_length')) {
                obj['password_min_length'] = ApiClient.convertToType(data['password_min_length'], 'Number');
            }
            if (data.hasOwnProperty('password_require_letter')) {
                obj['password_require_letter'] = ApiClient.convertToType(data['password_require_letter'], 'Boolean');
            }
            if (data.hasOwnProperty('password_require_mixed')) {
                obj['password_require_mixed'] = ApiClient.convertToType(data['password_require_mixed'], 'Boolean');
            }
            if (data.hasOwnProperty('password_require_number')) {
                obj['password_require_number'] = ApiClient.convertToType(data['password_require_number'], 'Boolean');
            }
            if (data.hasOwnProperty('password_require_special')) {
                obj['password_require_special'] = ApiClient.convertToType(data['password_require_special'], 'Boolean');
            }
            if (data.hasOwnProperty('password_require_unbreached')) {
                obj['password_require_unbreached'] = ApiClient.convertToType(data['password_require_unbreached'], 'Boolean');
            }
            if (data.hasOwnProperty('password_requirements_apply_to_bundles')) {
                obj['password_requirements_apply_to_bundles'] = ApiClient.convertToType(data['password_requirements_apply_to_bundles'], 'Boolean');
            }
            if (data.hasOwnProperty('password_validity_days')) {
                obj['password_validity_days'] = ApiClient.convertToType(data['password_validity_days'], 'Number');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('pin_all_remote_servers_to_site_region')) {
                obj['pin_all_remote_servers_to_site_region'] = ApiClient.convertToType(data['pin_all_remote_servers_to_site_region'], 'Boolean');
            }
            if (data.hasOwnProperty('reply_to_email')) {
                obj['reply_to_email'] = ApiClient.convertToType(data['reply_to_email'], 'String');
            }
            if (data.hasOwnProperty('require_2fa')) {
                obj['require_2fa'] = ApiClient.convertToType(data['require_2fa'], 'Boolean');
            }
            if (data.hasOwnProperty('require_2fa_stop_time')) {
                obj['require_2fa_stop_time'] = ApiClient.convertToType(data['require_2fa_stop_time'], 'Date');
            }
            if (data.hasOwnProperty('require_2fa_user_type')) {
                obj['require_2fa_user_type'] = ApiClient.convertToType(data['require_2fa_user_type'], 'String');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = SessionEntity.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('session_expiry')) {
                obj['session_expiry'] = ApiClient.convertToType(data['session_expiry'], 'Number');
            }
            if (data.hasOwnProperty('session_expiry_minutes')) {
                obj['session_expiry_minutes'] = ApiClient.convertToType(data['session_expiry_minutes'], 'Number');
            }
            if (data.hasOwnProperty('session_pinned_by_ip')) {
                obj['session_pinned_by_ip'] = ApiClient.convertToType(data['session_pinned_by_ip'], 'Boolean');
            }
            if (data.hasOwnProperty('sftp_enabled')) {
                obj['sftp_enabled'] = ApiClient.convertToType(data['sftp_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('sftp_host_key_type')) {
                obj['sftp_host_key_type'] = ApiClient.convertToType(data['sftp_host_key_type'], 'String');
            }
            if (data.hasOwnProperty('sftp_insecure_ciphers')) {
                obj['sftp_insecure_ciphers'] = ApiClient.convertToType(data['sftp_insecure_ciphers'], 'Boolean');
            }
            if (data.hasOwnProperty('sftp_user_root_enabled')) {
                obj['sftp_user_root_enabled'] = ApiClient.convertToType(data['sftp_user_root_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('sharing_enabled')) {
                obj['sharing_enabled'] = ApiClient.convertToType(data['sharing_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('show_request_access_link')) {
                obj['show_request_access_link'] = ApiClient.convertToType(data['show_request_access_link'], 'Boolean');
            }
            if (data.hasOwnProperty('site_footer')) {
                obj['site_footer'] = ApiClient.convertToType(data['site_footer'], 'String');
            }
            if (data.hasOwnProperty('site_header')) {
                obj['site_header'] = ApiClient.convertToType(data['site_header'], 'String');
            }
            if (data.hasOwnProperty('smtp_address')) {
                obj['smtp_address'] = ApiClient.convertToType(data['smtp_address'], 'String');
            }
            if (data.hasOwnProperty('smtp_authentication')) {
                obj['smtp_authentication'] = ApiClient.convertToType(data['smtp_authentication'], 'String');
            }
            if (data.hasOwnProperty('smtp_from')) {
                obj['smtp_from'] = ApiClient.convertToType(data['smtp_from'], 'String');
            }
            if (data.hasOwnProperty('smtp_port')) {
                obj['smtp_port'] = ApiClient.convertToType(data['smtp_port'], 'Number');
            }
            if (data.hasOwnProperty('smtp_username')) {
                obj['smtp_username'] = ApiClient.convertToType(data['smtp_username'], 'String');
            }
            if (data.hasOwnProperty('ssl_required')) {
                obj['ssl_required'] = ApiClient.convertToType(data['ssl_required'], 'Boolean');
            }
            if (data.hasOwnProperty('subdomain')) {
                obj['subdomain'] = ApiClient.convertToType(data['subdomain'], 'String');
            }
            if (data.hasOwnProperty('switch_to_plan_date')) {
                obj['switch_to_plan_date'] = ApiClient.convertToType(data['switch_to_plan_date'], 'Date');
            }
            if (data.hasOwnProperty('tls_disabled')) {
                obj['tls_disabled'] = ApiClient.convertToType(data['tls_disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('trial_days_left')) {
                obj['trial_days_left'] = ApiClient.convertToType(data['trial_days_left'], 'Number');
            }
            if (data.hasOwnProperty('trial_until')) {
                obj['trial_until'] = ApiClient.convertToType(data['trial_until'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('uploads_via_email_authentication')) {
                obj['uploads_via_email_authentication'] = ApiClient.convertToType(data['uploads_via_email_authentication'], 'Boolean');
            }
            if (data.hasOwnProperty('use_provided_modified_at')) {
                obj['use_provided_modified_at'] = ApiClient.convertToType(data['use_provided_modified_at'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserEntity.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_lockout')) {
                obj['user_lockout'] = ApiClient.convertToType(data['user_lockout'], 'Boolean');
            }
            if (data.hasOwnProperty('user_lockout_lock_period')) {
                obj['user_lockout_lock_period'] = ApiClient.convertToType(data['user_lockout_lock_period'], 'Number');
            }
            if (data.hasOwnProperty('user_lockout_tries')) {
                obj['user_lockout_tries'] = ApiClient.convertToType(data['user_lockout_tries'], 'Number');
            }
            if (data.hasOwnProperty('user_lockout_within')) {
                obj['user_lockout_within'] = ApiClient.convertToType(data['user_lockout_within'], 'Number');
            }
            if (data.hasOwnProperty('user_requests_enabled')) {
                obj['user_requests_enabled'] = ApiClient.convertToType(data['user_requests_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('user_requests_notify_admins')) {
                obj['user_requests_notify_admins'] = ApiClient.convertToType(data['user_requests_notify_admins'], 'Boolean');
            }
            if (data.hasOwnProperty('welcome_custom_text')) {
                obj['welcome_custom_text'] = ApiClient.convertToType(data['welcome_custom_text'], 'String');
            }
            if (data.hasOwnProperty('welcome_email_cc')) {
                obj['welcome_email_cc'] = ApiClient.convertToType(data['welcome_email_cc'], 'String');
            }
            if (data.hasOwnProperty('welcome_email_enabled')) {
                obj['welcome_email_enabled'] = ApiClient.convertToType(data['welcome_email_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('welcome_email_subject')) {
                obj['welcome_email_subject'] = ApiClient.convertToType(data['welcome_email_subject'], 'String');
            }
            if (data.hasOwnProperty('welcome_screen')) {
                obj['welcome_screen'] = ApiClient.convertToType(data['welcome_screen'], 'String');
            }
            if (data.hasOwnProperty('windows_mode_ftp')) {
                obj['windows_mode_ftp'] = ApiClient.convertToType(data['windows_mode_ftp'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SiteEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SiteEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allowed_countries'] && !(typeof data['allowed_countries'] === 'string' || data['allowed_countries'] instanceof String)) {
            throw new Error("Expected the field `allowed_countries` to be a primitive type in the JSON string but got " + data['allowed_countries']);
        }
        // ensure the json data is a string
        if (data['allowed_ips'] && !(typeof data['allowed_ips'] === 'string' || data['allowed_ips'] instanceof String)) {
            throw new Error("Expected the field `allowed_ips` to be a primitive type in the JSON string but got " + data['allowed_ips']);
        }
        // ensure the json data is a string
        if (data['bundle_activity_notifications'] && !(typeof data['bundle_activity_notifications'] === 'string' || data['bundle_activity_notifications'] instanceof String)) {
            throw new Error("Expected the field `bundle_activity_notifications` to be a primitive type in the JSON string but got " + data['bundle_activity_notifications']);
        }
        // ensure the json data is a string
        if (data['bundle_registration_notifications'] && !(typeof data['bundle_registration_notifications'] === 'string' || data['bundle_registration_notifications'] instanceof String)) {
            throw new Error("Expected the field `bundle_registration_notifications` to be a primitive type in the JSON string but got " + data['bundle_registration_notifications']);
        }
        // ensure the json data is a string
        if (data['bundle_upload_receipt_notifications'] && !(typeof data['bundle_upload_receipt_notifications'] === 'string' || data['bundle_upload_receipt_notifications'] instanceof String)) {
            throw new Error("Expected the field `bundle_upload_receipt_notifications` to be a primitive type in the JSON string but got " + data['bundle_upload_receipt_notifications']);
        }
        // validate the optional field `bundle_watermark_attachment`
        if (data['bundle_watermark_attachment']) { // data not null
          ImageEntity.validateJSON(data['bundle_watermark_attachment']);
        }
        // ensure the json data is a string
        if (data['color2_left'] && !(typeof data['color2_left'] === 'string' || data['color2_left'] instanceof String)) {
            throw new Error("Expected the field `color2_left` to be a primitive type in the JSON string but got " + data['color2_left']);
        }
        // ensure the json data is a string
        if (data['color2_link'] && !(typeof data['color2_link'] === 'string' || data['color2_link'] instanceof String)) {
            throw new Error("Expected the field `color2_link` to be a primitive type in the JSON string but got " + data['color2_link']);
        }
        // ensure the json data is a string
        if (data['color2_text'] && !(typeof data['color2_text'] === 'string' || data['color2_text'] instanceof String)) {
            throw new Error("Expected the field `color2_text` to be a primitive type in the JSON string but got " + data['color2_text']);
        }
        // ensure the json data is a string
        if (data['color2_top'] && !(typeof data['color2_top'] === 'string' || data['color2_top'] instanceof String)) {
            throw new Error("Expected the field `color2_top` to be a primitive type in the JSON string but got " + data['color2_top']);
        }
        // ensure the json data is a string
        if (data['color2_top_text'] && !(typeof data['color2_top_text'] === 'string' || data['color2_top_text'] instanceof String)) {
            throw new Error("Expected the field `color2_top_text` to be a primitive type in the JSON string but got " + data['color2_top_text']);
        }
        // ensure the json data is a string
        if (data['contact_name'] && !(typeof data['contact_name'] === 'string' || data['contact_name'] instanceof String)) {
            throw new Error("Expected the field `contact_name` to be a primitive type in the JSON string but got " + data['contact_name']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['default_time_zone'] && !(typeof data['default_time_zone'] === 'string' || data['default_time_zone'] instanceof String)) {
            throw new Error("Expected the field `default_time_zone` to be a primitive type in the JSON string but got " + data['default_time_zone']);
        }
        // ensure the json data is a string
        if (data['disallowed_countries'] && !(typeof data['disallowed_countries'] === 'string' || data['disallowed_countries'] instanceof String)) {
            throw new Error("Expected the field `disallowed_countries` to be a primitive type in the JSON string but got " + data['disallowed_countries']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['domain_letsencrypt_chain'] && !(typeof data['domain_letsencrypt_chain'] === 'string' || data['domain_letsencrypt_chain'] instanceof String)) {
            throw new Error("Expected the field `domain_letsencrypt_chain` to be a primitive type in the JSON string but got " + data['domain_letsencrypt_chain']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // validate the optional field `icon128`
        if (data['icon128']) { // data not null
          ImageEntity.validateJSON(data['icon128']);
        }
        // validate the optional field `icon16`
        if (data['icon16']) { // data not null
          ImageEntity.validateJSON(data['icon16']);
        }
        // validate the optional field `icon32`
        if (data['icon32']) { // data not null
          ImageEntity.validateJSON(data['icon32']);
        }
        // validate the optional field `icon48`
        if (data['icon48']) { // data not null
          ImageEntity.validateJSON(data['icon48']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['ldap_base_dn'] && !(typeof data['ldap_base_dn'] === 'string' || data['ldap_base_dn'] instanceof String)) {
            throw new Error("Expected the field `ldap_base_dn` to be a primitive type in the JSON string but got " + data['ldap_base_dn']);
        }
        // ensure the json data is a string
        if (data['ldap_domain'] && !(typeof data['ldap_domain'] === 'string' || data['ldap_domain'] instanceof String)) {
            throw new Error("Expected the field `ldap_domain` to be a primitive type in the JSON string but got " + data['ldap_domain']);
        }
        // ensure the json data is a string
        if (data['ldap_group_action'] && !(typeof data['ldap_group_action'] === 'string' || data['ldap_group_action'] instanceof String)) {
            throw new Error("Expected the field `ldap_group_action` to be a primitive type in the JSON string but got " + data['ldap_group_action']);
        }
        // ensure the json data is a string
        if (data['ldap_group_exclusion'] && !(typeof data['ldap_group_exclusion'] === 'string' || data['ldap_group_exclusion'] instanceof String)) {
            throw new Error("Expected the field `ldap_group_exclusion` to be a primitive type in the JSON string but got " + data['ldap_group_exclusion']);
        }
        // ensure the json data is a string
        if (data['ldap_group_inclusion'] && !(typeof data['ldap_group_inclusion'] === 'string' || data['ldap_group_inclusion'] instanceof String)) {
            throw new Error("Expected the field `ldap_group_inclusion` to be a primitive type in the JSON string but got " + data['ldap_group_inclusion']);
        }
        // ensure the json data is a string
        if (data['ldap_host'] && !(typeof data['ldap_host'] === 'string' || data['ldap_host'] instanceof String)) {
            throw new Error("Expected the field `ldap_host` to be a primitive type in the JSON string but got " + data['ldap_host']);
        }
        // ensure the json data is a string
        if (data['ldap_host_2'] && !(typeof data['ldap_host_2'] === 'string' || data['ldap_host_2'] instanceof String)) {
            throw new Error("Expected the field `ldap_host_2` to be a primitive type in the JSON string but got " + data['ldap_host_2']);
        }
        // ensure the json data is a string
        if (data['ldap_host_3'] && !(typeof data['ldap_host_3'] === 'string' || data['ldap_host_3'] instanceof String)) {
            throw new Error("Expected the field `ldap_host_3` to be a primitive type in the JSON string but got " + data['ldap_host_3']);
        }
        // ensure the json data is a string
        if (data['ldap_type'] && !(typeof data['ldap_type'] === 'string' || data['ldap_type'] instanceof String)) {
            throw new Error("Expected the field `ldap_type` to be a primitive type in the JSON string but got " + data['ldap_type']);
        }
        // ensure the json data is a string
        if (data['ldap_user_action'] && !(typeof data['ldap_user_action'] === 'string' || data['ldap_user_action'] instanceof String)) {
            throw new Error("Expected the field `ldap_user_action` to be a primitive type in the JSON string but got " + data['ldap_user_action']);
        }
        // ensure the json data is a string
        if (data['ldap_user_include_groups'] && !(typeof data['ldap_user_include_groups'] === 'string' || data['ldap_user_include_groups'] instanceof String)) {
            throw new Error("Expected the field `ldap_user_include_groups` to be a primitive type in the JSON string but got " + data['ldap_user_include_groups']);
        }
        // ensure the json data is a string
        if (data['ldap_username'] && !(typeof data['ldap_username'] === 'string' || data['ldap_username'] instanceof String)) {
            throw new Error("Expected the field `ldap_username` to be a primitive type in the JSON string but got " + data['ldap_username']);
        }
        // ensure the json data is a string
        if (data['ldap_username_field'] && !(typeof data['ldap_username_field'] === 'string' || data['ldap_username_field'] instanceof String)) {
            throw new Error("Expected the field `ldap_username_field` to be a primitive type in the JSON string but got " + data['ldap_username_field']);
        }
        // ensure the json data is a string
        if (data['login_help_text'] && !(typeof data['login_help_text'] === 'string' || data['login_help_text'] instanceof String)) {
            throw new Error("Expected the field `login_help_text` to be a primitive type in the JSON string but got " + data['login_help_text']);
        }
        // validate the optional field `logo`
        if (data['logo']) { // data not null
          ImageEntity.validateJSON(data['logo']);
        }
        // ensure the json data is a string
        if (data['motd_text'] && !(typeof data['motd_text'] === 'string' || data['motd_text'] instanceof String)) {
            throw new Error("Expected the field `motd_text` to be a primitive type in the JSON string but got " + data['motd_text']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['next_billing_date'] && !(typeof data['next_billing_date'] === 'string' || data['next_billing_date'] instanceof String)) {
            throw new Error("Expected the field `next_billing_date` to be a primitive type in the JSON string but got " + data['next_billing_date']);
        }
        // ensure the json data is a string
        if (data['office_integration_type'] && !(typeof data['office_integration_type'] === 'string' || data['office_integration_type'] instanceof String)) {
            throw new Error("Expected the field `office_integration_type` to be a primitive type in the JSON string but got " + data['office_integration_type']);
        }
        // ensure the json data is a string
        if (data['oncehub_link'] && !(typeof data['oncehub_link'] === 'string' || data['oncehub_link'] instanceof String)) {
            throw new Error("Expected the field `oncehub_link` to be a primitive type in the JSON string but got " + data['oncehub_link']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['reply_to_email'] && !(typeof data['reply_to_email'] === 'string' || data['reply_to_email'] instanceof String)) {
            throw new Error("Expected the field `reply_to_email` to be a primitive type in the JSON string but got " + data['reply_to_email']);
        }
        // ensure the json data is a string
        if (data['require_2fa_user_type'] && !(typeof data['require_2fa_user_type'] === 'string' || data['require_2fa_user_type'] instanceof String)) {
            throw new Error("Expected the field `require_2fa_user_type` to be a primitive type in the JSON string but got " + data['require_2fa_user_type']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          SessionEntity.validateJSON(data['session']);
        }
        // ensure the json data is a string
        if (data['sftp_host_key_type'] && !(typeof data['sftp_host_key_type'] === 'string' || data['sftp_host_key_type'] instanceof String)) {
            throw new Error("Expected the field `sftp_host_key_type` to be a primitive type in the JSON string but got " + data['sftp_host_key_type']);
        }
        // ensure the json data is a string
        if (data['site_footer'] && !(typeof data['site_footer'] === 'string' || data['site_footer'] instanceof String)) {
            throw new Error("Expected the field `site_footer` to be a primitive type in the JSON string but got " + data['site_footer']);
        }
        // ensure the json data is a string
        if (data['site_header'] && !(typeof data['site_header'] === 'string' || data['site_header'] instanceof String)) {
            throw new Error("Expected the field `site_header` to be a primitive type in the JSON string but got " + data['site_header']);
        }
        // ensure the json data is a string
        if (data['smtp_address'] && !(typeof data['smtp_address'] === 'string' || data['smtp_address'] instanceof String)) {
            throw new Error("Expected the field `smtp_address` to be a primitive type in the JSON string but got " + data['smtp_address']);
        }
        // ensure the json data is a string
        if (data['smtp_authentication'] && !(typeof data['smtp_authentication'] === 'string' || data['smtp_authentication'] instanceof String)) {
            throw new Error("Expected the field `smtp_authentication` to be a primitive type in the JSON string but got " + data['smtp_authentication']);
        }
        // ensure the json data is a string
        if (data['smtp_from'] && !(typeof data['smtp_from'] === 'string' || data['smtp_from'] instanceof String)) {
            throw new Error("Expected the field `smtp_from` to be a primitive type in the JSON string but got " + data['smtp_from']);
        }
        // ensure the json data is a string
        if (data['smtp_username'] && !(typeof data['smtp_username'] === 'string' || data['smtp_username'] instanceof String)) {
            throw new Error("Expected the field `smtp_username` to be a primitive type in the JSON string but got " + data['smtp_username']);
        }
        // ensure the json data is a string
        if (data['subdomain'] && !(typeof data['subdomain'] === 'string' || data['subdomain'] instanceof String)) {
            throw new Error("Expected the field `subdomain` to be a primitive type in the JSON string but got " + data['subdomain']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          UserEntity.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['welcome_custom_text'] && !(typeof data['welcome_custom_text'] === 'string' || data['welcome_custom_text'] instanceof String)) {
            throw new Error("Expected the field `welcome_custom_text` to be a primitive type in the JSON string but got " + data['welcome_custom_text']);
        }
        // ensure the json data is a string
        if (data['welcome_email_cc'] && !(typeof data['welcome_email_cc'] === 'string' || data['welcome_email_cc'] instanceof String)) {
            throw new Error("Expected the field `welcome_email_cc` to be a primitive type in the JSON string but got " + data['welcome_email_cc']);
        }
        // ensure the json data is a string
        if (data['welcome_email_subject'] && !(typeof data['welcome_email_subject'] === 'string' || data['welcome_email_subject'] instanceof String)) {
            throw new Error("Expected the field `welcome_email_subject` to be a primitive type in the JSON string but got " + data['welcome_email_subject']);
        }
        // ensure the json data is a string
        if (data['welcome_screen'] && !(typeof data['welcome_screen'] === 'string' || data['welcome_screen'] instanceof String)) {
            throw new Error("Expected the field `welcome_screen` to be a primitive type in the JSON string but got " + data['welcome_screen']);
        }

        return true;
    }


}



/**
 * Id of the currently selected custom SFTP Host Key
 * @member {Number} active_sftp_host_key_id
 */
SiteEntity.prototype['active_sftp_host_key_id'] = undefined;

/**
 * User ID for the main site administrator
 * @member {Number} admin_user_id
 */
SiteEntity.prototype['admin_user_id'] = undefined;

/**
 * Are manual Bundle names allowed?
 * @member {Boolean} allow_bundle_names
 */
SiteEntity.prototype['allow_bundle_names'] = undefined;

/**
 * Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?
 * @member {Boolean} allowed_2fa_method_bypass_for_ftp_sftp_dav
 */
SiteEntity.prototype['allowed_2fa_method_bypass_for_ftp_sftp_dav'] = undefined;

/**
 * Is SMS two factor authentication allowed?
 * @member {Boolean} allowed_2fa_method_sms
 */
SiteEntity.prototype['allowed_2fa_method_sms'] = undefined;

/**
 * Is TOTP two factor authentication allowed?
 * @member {Boolean} allowed_2fa_method_totp
 */
SiteEntity.prototype['allowed_2fa_method_totp'] = undefined;

/**
 * Is U2F two factor authentication allowed?
 * @member {Boolean} allowed_2fa_method_u2f
 */
SiteEntity.prototype['allowed_2fa_method_u2f'] = undefined;

/**
 * Is WebAuthn two factor authentication allowed?
 * @member {Boolean} allowed_2fa_method_webauthn
 */
SiteEntity.prototype['allowed_2fa_method_webauthn'] = undefined;

/**
 * Is yubikey two factor authentication allowed?
 * @member {Boolean} allowed_2fa_method_yubi
 */
SiteEntity.prototype['allowed_2fa_method_yubi'] = undefined;

/**
 * Comma seperated list of allowed Country codes
 * @member {String} allowed_countries
 */
SiteEntity.prototype['allowed_countries'] = undefined;

/**
 * List of allowed IP addresses
 * @member {String} allowed_ips
 */
SiteEntity.prototype['allowed_ips'] = undefined;

/**
 * If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.
 * @member {Boolean} ask_about_overwrites
 */
SiteEntity.prototype['ask_about_overwrites'] = undefined;

/**
 * Do Bundle owners receive activity notifications?
 * @member {module:model/SiteEntity.BundleActivityNotificationsEnum} bundle_activity_notifications
 */
SiteEntity.prototype['bundle_activity_notifications'] = undefined;

/**
 * Site-wide Bundle expiration in days
 * @member {Number} bundle_expiration
 */
SiteEntity.prototype['bundle_expiration'] = undefined;

/**
 * Do Bundles require password protection?
 * @member {Boolean} bundle_password_required
 */
SiteEntity.prototype['bundle_password_required'] = undefined;

/**
 * Do Bundle owners receive registration notification?
 * @member {module:model/SiteEntity.BundleRegistrationNotificationsEnum} bundle_registration_notifications
 */
SiteEntity.prototype['bundle_registration_notifications'] = undefined;

/**
 * Do Bundles require recipients for sharing?
 * @member {Boolean} bundle_require_share_recipient
 */
SiteEntity.prototype['bundle_require_share_recipient'] = undefined;

/**
 * Do Bundle uploaders receive upload confirmation notifications?
 * @member {module:model/SiteEntity.BundleUploadReceiptNotificationsEnum} bundle_upload_receipt_notifications
 */
SiteEntity.prototype['bundle_upload_receipt_notifications'] = undefined;

/**
 * @member {module:model/ImageEntity} bundle_watermark_attachment
 */
SiteEntity.prototype['bundle_watermark_attachment'] = undefined;

/**
 * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
 * @member {Object} bundle_watermark_value
 */
SiteEntity.prototype['bundle_watermark_value'] = undefined;

/**
 * Page link and button color
 * @member {String} color2_left
 */
SiteEntity.prototype['color2_left'] = undefined;

/**
 * Top bar link color
 * @member {String} color2_link
 */
SiteEntity.prototype['color2_link'] = undefined;

/**
 * Page link and button color
 * @member {String} color2_text
 */
SiteEntity.prototype['color2_text'] = undefined;

/**
 * Top bar background color
 * @member {String} color2_top
 */
SiteEntity.prototype['color2_top'] = undefined;

/**
 * Top bar text color
 * @member {String} color2_top_text
 */
SiteEntity.prototype['color2_top_text'] = undefined;

/**
 * Site main contact name
 * @member {String} contact_name
 */
SiteEntity.prototype['contact_name'] = undefined;

/**
 * Time this site was created
 * @member {Date} created_at
 */
SiteEntity.prototype['created_at'] = undefined;

/**
 * Preferred currency
 * @member {String} currency
 */
SiteEntity.prototype['currency'] = undefined;

/**
 * Is this site using a custom namespace for users?
 * @member {Boolean} custom_namespace
 */
SiteEntity.prototype['custom_namespace'] = undefined;

/**
 * Number of days to keep deleted files
 * @member {Number} days_to_retain_backups
 */
SiteEntity.prototype['days_to_retain_backups'] = undefined;

/**
 * Site default time zone
 * @member {String} default_time_zone
 */
SiteEntity.prototype['default_time_zone'] = undefined;

/**
 * Is the desktop app enabled?
 * @member {Boolean} desktop_app
 */
SiteEntity.prototype['desktop_app'] = undefined;

/**
 * Is desktop app session IP pinning enabled?
 * @member {Boolean} desktop_app_session_ip_pinning
 */
SiteEntity.prototype['desktop_app_session_ip_pinning'] = undefined;

/**
 * Desktop app session lifetime (in hours)
 * @member {Number} desktop_app_session_lifetime
 */
SiteEntity.prototype['desktop_app_session_lifetime'] = undefined;

/**
 * If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.
 * @member {Boolean} disable_files_certificate_generation
 */
SiteEntity.prototype['disable_files_certificate_generation'] = undefined;

/**
 * Are notifications disabled?
 * @member {Boolean} disable_notifications
 */
SiteEntity.prototype['disable_notifications'] = undefined;

/**
 * Is password reset disabled?
 * @member {Boolean} disable_password_reset
 */
SiteEntity.prototype['disable_password_reset'] = undefined;

/**
 * If greater than zero, users will unable to login if they do not show activity within this number of days.
 * @member {Number} disable_users_from_inactivity_period_days
 */
SiteEntity.prototype['disable_users_from_inactivity_period_days'] = undefined;

/**
 * Comma seperated list of disallowed Country codes
 * @member {String} disallowed_countries
 */
SiteEntity.prototype['disallowed_countries'] = undefined;

/**
 * Custom domain
 * @member {String} domain
 */
SiteEntity.prototype['domain'] = undefined;

/**
 * Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?
 * @member {Boolean} domain_hsts_header
 */
SiteEntity.prototype['domain_hsts_header'] = undefined;

/**
 * Letsencrypt chain to use when registering SSL Certificate for domain.
 * @member {module:model/SiteEntity.DomainLetsencryptChainEnum} domain_letsencrypt_chain
 */
SiteEntity.prototype['domain_letsencrypt_chain'] = undefined;

/**
 * Main email for this site
 * @member {String} email
 */
SiteEntity.prototype['email'] = undefined;

/**
 * If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.
 * @member {Boolean} folder_permissions_groups_only
 */
SiteEntity.prototype['folder_permissions_groups_only'] = undefined;

/**
 * Is FTP enabled?
 * @member {Boolean} ftp_enabled
 */
SiteEntity.prototype['ftp_enabled'] = undefined;

/**
 * Is there a signed HIPAA BAA between Files.com and this site?
 * @member {Boolean} hipaa
 */
SiteEntity.prototype['hipaa'] = undefined;

/**
 * @member {module:model/ImageEntity} icon128
 */
SiteEntity.prototype['icon128'] = undefined;

/**
 * @member {module:model/ImageEntity} icon16
 */
SiteEntity.prototype['icon16'] = undefined;

/**
 * @member {module:model/ImageEntity} icon32
 */
SiteEntity.prototype['icon32'] = undefined;

/**
 * @member {module:model/ImageEntity} icon48
 */
SiteEntity.prototype['icon48'] = undefined;

/**
 * Can files be modified?
 * @member {Date} immutable_files_set_at
 */
SiteEntity.prototype['immutable_files_set_at'] = undefined;

/**
 * Include password in emails to new users?
 * @member {Boolean} include_password_in_welcome_email
 */
SiteEntity.prototype['include_password_in_welcome_email'] = undefined;

/**
 * Site default language
 * @member {String} language
 */
SiteEntity.prototype['language'] = undefined;

/**
 * Base DN for looking up users in LDAP server
 * @member {String} ldap_base_dn
 */
SiteEntity.prototype['ldap_base_dn'] = undefined;

/**
 * Domain name that will be appended to usernames
 * @member {String} ldap_domain
 */
SiteEntity.prototype['ldap_domain'] = undefined;

/**
 * Main LDAP setting: is LDAP enabled?
 * @member {Boolean} ldap_enabled
 */
SiteEntity.prototype['ldap_enabled'] = undefined;

/**
 * Should we sync groups from LDAP server?
 * @member {String} ldap_group_action
 */
SiteEntity.prototype['ldap_group_action'] = undefined;

/**
 * Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.
 * @member {String} ldap_group_exclusion
 */
SiteEntity.prototype['ldap_group_exclusion'] = undefined;

/**
 * Comma or newline separated list of group names (with optional wildcards) to include when syncing.
 * @member {String} ldap_group_inclusion
 */
SiteEntity.prototype['ldap_group_inclusion'] = undefined;

/**
 * LDAP host
 * @member {String} ldap_host
 */
SiteEntity.prototype['ldap_host'] = undefined;

/**
 * LDAP backup host
 * @member {String} ldap_host_2
 */
SiteEntity.prototype['ldap_host_2'] = undefined;

/**
 * LDAP backup host
 * @member {String} ldap_host_3
 */
SiteEntity.prototype['ldap_host_3'] = undefined;

/**
 * LDAP port
 * @member {Number} ldap_port
 */
SiteEntity.prototype['ldap_port'] = undefined;

/**
 * Use secure LDAP?
 * @member {Boolean} ldap_secure
 */
SiteEntity.prototype['ldap_secure'] = undefined;

/**
 * LDAP type
 * @member {String} ldap_type
 */
SiteEntity.prototype['ldap_type'] = undefined;

/**
 * Should we sync users from LDAP server?
 * @member {String} ldap_user_action
 */
SiteEntity.prototype['ldap_user_action'] = undefined;

/**
 * Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.
 * @member {String} ldap_user_include_groups
 */
SiteEntity.prototype['ldap_user_include_groups'] = undefined;

/**
 * Username for signing in to LDAP server.
 * @member {String} ldap_username
 */
SiteEntity.prototype['ldap_username'] = undefined;

/**
 * LDAP username field
 * @member {String} ldap_username_field
 */
SiteEntity.prototype['ldap_username_field'] = undefined;

/**
 * Login help text
 * @member {String} login_help_text
 */
SiteEntity.prototype['login_help_text'] = undefined;

/**
 * @member {module:model/ImageEntity} logo
 */
SiteEntity.prototype['logo'] = undefined;

/**
 * Number of prior passwords to disallow
 * @member {Number} max_prior_passwords
 */
SiteEntity.prototype['max_prior_passwords'] = undefined;

/**
 * Is the mobile app enabled?
 * @member {Boolean} mobile_app
 */
SiteEntity.prototype['mobile_app'] = undefined;

/**
 * Is mobile app session IP pinning enabled?
 * @member {Boolean} mobile_app_session_ip_pinning
 */
SiteEntity.prototype['mobile_app_session_ip_pinning'] = undefined;

/**
 * Mobile app session lifetime (in hours)
 * @member {Number} mobile_app_session_lifetime
 */
SiteEntity.prototype['mobile_app_session_lifetime'] = undefined;

/**
 * A message to show users when they connect via FTP or SFTP.
 * @member {String} motd_text
 */
SiteEntity.prototype['motd_text'] = undefined;

/**
 * Show message to users connecting via FTP
 * @member {Boolean} motd_use_for_ftp
 */
SiteEntity.prototype['motd_use_for_ftp'] = undefined;

/**
 * Show message to users connecting via SFTP
 * @member {Boolean} motd_use_for_sftp
 */
SiteEntity.prototype['motd_use_for_sftp'] = undefined;

/**
 * Site name
 * @member {String} name
 */
SiteEntity.prototype['name'] = undefined;

/**
 * Next billing amount
 * @member {Number} next_billing_amount
 */
SiteEntity.prototype['next_billing_amount'] = undefined;

/**
 * Next billing date
 * @member {String} next_billing_date
 */
SiteEntity.prototype['next_billing_date'] = undefined;

/**
 * If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.
 * @member {Boolean} non_sso_groups_allowed
 */
SiteEntity.prototype['non_sso_groups_allowed'] = undefined;

/**
 * If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.
 * @member {Boolean} non_sso_users_allowed
 */
SiteEntity.prototype['non_sso_users_allowed'] = undefined;

/**
 * Allow users to use Office for the web?
 * @member {Boolean} office_integration_available
 */
SiteEntity.prototype['office_integration_available'] = undefined;

/**
 * Office integration application used to edit and view the MS Office documents
 * @member {module:model/SiteEntity.OfficeIntegrationTypeEnum} office_integration_type
 */
SiteEntity.prototype['office_integration_type'] = undefined;

/**
 * Link to scheduling a meeting with our Sales team
 * @member {String} oncehub_link
 */
SiteEntity.prototype['oncehub_link'] = undefined;

/**
 * Use servers in the USA only?
 * @member {Boolean} opt_out_global
 */
SiteEntity.prototype['opt_out_global'] = undefined;

/**
 * Is this site's billing overdue?
 * @member {Boolean} overdue
 */
SiteEntity.prototype['overdue'] = undefined;

/**
 * Shortest password length for users
 * @member {Number} password_min_length
 */
SiteEntity.prototype['password_min_length'] = undefined;

/**
 * Require a letter in passwords?
 * @member {Boolean} password_require_letter
 */
SiteEntity.prototype['password_require_letter'] = undefined;

/**
 * Require lower and upper case letters in passwords?
 * @member {Boolean} password_require_mixed
 */
SiteEntity.prototype['password_require_mixed'] = undefined;

/**
 * Require a number in passwords?
 * @member {Boolean} password_require_number
 */
SiteEntity.prototype['password_require_number'] = undefined;

/**
 * Require special characters in password?
 * @member {Boolean} password_require_special
 */
SiteEntity.prototype['password_require_special'] = undefined;

/**
 * Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)
 * @member {Boolean} password_require_unbreached
 */
SiteEntity.prototype['password_require_unbreached'] = undefined;

/**
 * Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?
 * @member {Boolean} password_requirements_apply_to_bundles
 */
SiteEntity.prototype['password_requirements_apply_to_bundles'] = undefined;

/**
 * Number of days password is valid
 * @member {Number} password_validity_days
 */
SiteEntity.prototype['password_validity_days'] = undefined;

/**
 * Site phone number
 * @member {String} phone
 */
SiteEntity.prototype['phone'] = undefined;

/**
 * If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.
 * @member {Boolean} pin_all_remote_servers_to_site_region
 */
SiteEntity.prototype['pin_all_remote_servers_to_site_region'] = undefined;

/**
 * Reply-to email for this site
 * @member {String} reply_to_email
 */
SiteEntity.prototype['reply_to_email'] = undefined;

/**
 * Require two-factor authentication for all users?
 * @member {Boolean} require_2fa
 */
SiteEntity.prototype['require_2fa'] = undefined;

/**
 * If set, requirement for two-factor authentication has been scheduled to end on this date-time.
 * @member {Date} require_2fa_stop_time
 */
SiteEntity.prototype['require_2fa_stop_time'] = undefined;

/**
 * What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?
 * @member {module:model/SiteEntity.Require2faUserTypeEnum} require_2fa_user_type
 */
SiteEntity.prototype['require_2fa_user_type'] = undefined;

/**
 * @member {module:model/SessionEntity} session
 */
SiteEntity.prototype['session'] = undefined;

/**
 * Session expiry in hours
 * @member {Number} session_expiry
 */
SiteEntity.prototype['session_expiry'] = undefined;

/**
 * Session expiry in minutes
 * @member {Number} session_expiry_minutes
 */
SiteEntity.prototype['session_expiry_minutes'] = undefined;

/**
 * Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)
 * @member {Boolean} session_pinned_by_ip
 */
SiteEntity.prototype['session_pinned_by_ip'] = undefined;

/**
 * Is SFTP enabled?
 * @member {Boolean} sftp_enabled
 */
SiteEntity.prototype['sftp_enabled'] = undefined;

/**
 * Sftp Host Key Type
 * @member {module:model/SiteEntity.SftpHostKeyTypeEnum} sftp_host_key_type
 */
SiteEntity.prototype['sftp_host_key_type'] = undefined;

/**
 * Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.
 * @member {Boolean} sftp_insecure_ciphers
 */
SiteEntity.prototype['sftp_insecure_ciphers'] = undefined;

/**
 * Use user FTP roots also for SFTP?
 * @member {Boolean} sftp_user_root_enabled
 */
SiteEntity.prototype['sftp_user_root_enabled'] = undefined;

/**
 * Allow bundle creation
 * @member {Boolean} sharing_enabled
 */
SiteEntity.prototype['sharing_enabled'] = undefined;

/**
 * Show request access link for users without access?  Currently unused.
 * @member {Boolean} show_request_access_link
 */
SiteEntity.prototype['show_request_access_link'] = undefined;

/**
 * Custom site footer text
 * @member {String} site_footer
 */
SiteEntity.prototype['site_footer'] = undefined;

/**
 * Custom site header text
 * @member {String} site_header
 */
SiteEntity.prototype['site_header'] = undefined;

/**
 * SMTP server hostname or IP
 * @member {String} smtp_address
 */
SiteEntity.prototype['smtp_address'] = undefined;

/**
 * SMTP server authentication type
 * @member {String} smtp_authentication
 */
SiteEntity.prototype['smtp_authentication'] = undefined;

/**
 * From address to use when mailing through custom SMTP
 * @member {String} smtp_from
 */
SiteEntity.prototype['smtp_from'] = undefined;

/**
 * SMTP server port
 * @member {Number} smtp_port
 */
SiteEntity.prototype['smtp_port'] = undefined;

/**
 * SMTP server username
 * @member {String} smtp_username
 */
SiteEntity.prototype['smtp_username'] = undefined;

/**
 * Is SSL required?  Disabling this is insecure.
 * @member {Boolean} ssl_required
 */
SiteEntity.prototype['ssl_required'] = undefined;

/**
 * Site subdomain
 * @member {String} subdomain
 */
SiteEntity.prototype['subdomain'] = undefined;

/**
 * If switching plans, when does the new plan take effect?
 * @member {Date} switch_to_plan_date
 */
SiteEntity.prototype['switch_to_plan_date'] = undefined;

/**
 * Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.
 * @member {Boolean} tls_disabled
 */
SiteEntity.prototype['tls_disabled'] = undefined;

/**
 * Number of days left in trial
 * @member {Number} trial_days_left
 */
SiteEntity.prototype['trial_days_left'] = undefined;

/**
 * When does this Site trial expire?
 * @member {Date} trial_until
 */
SiteEntity.prototype['trial_until'] = undefined;

/**
 * Last time this Site was updated
 * @member {Date} updated_at
 */
SiteEntity.prototype['updated_at'] = undefined;

/**
 * Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?
 * @member {Boolean} uploads_via_email_authentication
 */
SiteEntity.prototype['uploads_via_email_authentication'] = undefined;

/**
 * Allow uploaders to set `provided_modified_at` for uploaded files?
 * @member {Boolean} use_provided_modified_at
 */
SiteEntity.prototype['use_provided_modified_at'] = undefined;

/**
 * @member {module:model/UserEntity} user
 */
SiteEntity.prototype['user'] = undefined;

/**
 * Will users be locked out after incorrect login attempts?
 * @member {Boolean} user_lockout
 */
SiteEntity.prototype['user_lockout'] = undefined;

/**
 * How many hours to lock user out for failed password?
 * @member {Number} user_lockout_lock_period
 */
SiteEntity.prototype['user_lockout_lock_period'] = undefined;

/**
 * Number of login tries within `user_lockout_within` hours before users are locked out
 * @member {Number} user_lockout_tries
 */
SiteEntity.prototype['user_lockout_tries'] = undefined;

/**
 * Number of hours for user lockout window
 * @member {Number} user_lockout_within
 */
SiteEntity.prototype['user_lockout_within'] = undefined;

/**
 * Enable User Requests feature
 * @member {Boolean} user_requests_enabled
 */
SiteEntity.prototype['user_requests_enabled'] = undefined;

/**
 * Send email to site admins when a user request is received?
 * @member {Boolean} user_requests_notify_admins
 */
SiteEntity.prototype['user_requests_notify_admins'] = undefined;

/**
 * Custom text send in user welcome email
 * @member {String} welcome_custom_text
 */
SiteEntity.prototype['welcome_custom_text'] = undefined;

/**
 * Include this email in welcome emails if enabled
 * @member {String} welcome_email_cc
 */
SiteEntity.prototype['welcome_email_cc'] = undefined;

/**
 * Will the welcome email be sent to new users?
 * @member {Boolean} welcome_email_enabled
 */
SiteEntity.prototype['welcome_email_enabled'] = undefined;

/**
 * Include this email subject in welcome emails if enabled
 * @member {String} welcome_email_subject
 */
SiteEntity.prototype['welcome_email_subject'] = undefined;

/**
 * Does the welcome screen appear?
 * @member {module:model/SiteEntity.WelcomeScreenEnum} welcome_screen
 */
SiteEntity.prototype['welcome_screen'] = undefined;

/**
 * Does FTP user Windows emulation mode?
 * @member {Boolean} windows_mode_ftp
 */
SiteEntity.prototype['windows_mode_ftp'] = undefined;





/**
 * Allowed values for the <code>bundle_activity_notifications</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['BundleActivityNotificationsEnum'] = {

    /**
     * value: "never"
     * @const
     */
    "never": "never",

    /**
     * value: "always"
     * @const
     */
    "always": "always",

    /**
     * value: "per_bundle_setting"
     * @const
     */
    "per_bundle_setting": "per_bundle_setting"
};


/**
 * Allowed values for the <code>bundle_registration_notifications</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['BundleRegistrationNotificationsEnum'] = {

    /**
     * value: "never"
     * @const
     */
    "never": "never",

    /**
     * value: "always"
     * @const
     */
    "always": "always",

    /**
     * value: "per_bundle_setting"
     * @const
     */
    "per_bundle_setting": "per_bundle_setting"
};


/**
 * Allowed values for the <code>bundle_upload_receipt_notifications</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['BundleUploadReceiptNotificationsEnum'] = {

    /**
     * value: "never"
     * @const
     */
    "never": "never",

    /**
     * value: "always"
     * @const
     */
    "always": "always",

    /**
     * value: "per_bundle_setting"
     * @const
     */
    "per_bundle_setting": "per_bundle_setting"
};


/**
 * Allowed values for the <code>domain_letsencrypt_chain</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['DomainLetsencryptChainEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "isrg_root_x1"
     * @const
     */
    "isrg_root_x1": "isrg_root_x1",

    /**
     * value: "dst_root_ca_x3"
     * @const
     */
    "dst_root_ca_x3": "dst_root_ca_x3"
};


/**
 * Allowed values for the <code>office_integration_type</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['OfficeIntegrationTypeEnum'] = {

    /**
     * value: "only_office"
     * @const
     */
    "only_office": "only_office",

    /**
     * value: "office_365"
     * @const
     */
    "office_365": "office_365",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};


/**
 * Allowed values for the <code>require_2fa_user_type</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['Require2faUserTypeEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "folder_and_site_admins"
     * @const
     */
    "folder_and_site_admins": "folder_and_site_admins",

    /**
     * value: "site_admins"
     * @const
     */
    "site_admins": "site_admins"
};


/**
 * Allowed values for the <code>sftp_host_key_type</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['SftpHostKeyTypeEnum'] = {

    /**
     * value: "default"
     * @const
     */
    "default": "default",

    /**
     * value: "exavault"
     * @const
     */
    "exavault": "exavault",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};


/**
 * Allowed values for the <code>welcome_screen</code> property.
 * @enum {String}
 * @readonly
 */
SiteEntity['WelcomeScreenEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "hidden"
     * @const
     */
    "hidden": "hidden",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};



export default SiteEntity;

