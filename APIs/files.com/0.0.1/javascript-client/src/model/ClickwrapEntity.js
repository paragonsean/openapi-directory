/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClickwrapEntity model module.
 * @module model/ClickwrapEntity
 * @version 0.0.1
 */
class ClickwrapEntity {
    /**
     * Constructs a new <code>ClickwrapEntity</code>.
     * Create Clickwrap
     * @alias module:model/ClickwrapEntity
     */
    constructor() { 
        
        ClickwrapEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClickwrapEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClickwrapEntity} obj Optional instance to populate.
     * @return {module:model/ClickwrapEntity} The populated <code>ClickwrapEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClickwrapEntity();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('use_with_bundles')) {
                obj['use_with_bundles'] = ApiClient.convertToType(data['use_with_bundles'], 'String');
            }
            if (data.hasOwnProperty('use_with_inboxes')) {
                obj['use_with_inboxes'] = ApiClient.convertToType(data['use_with_inboxes'], 'String');
            }
            if (data.hasOwnProperty('use_with_users')) {
                obj['use_with_users'] = ApiClient.convertToType(data['use_with_users'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClickwrapEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClickwrapEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['use_with_bundles'] && !(typeof data['use_with_bundles'] === 'string' || data['use_with_bundles'] instanceof String)) {
            throw new Error("Expected the field `use_with_bundles` to be a primitive type in the JSON string but got " + data['use_with_bundles']);
        }
        // ensure the json data is a string
        if (data['use_with_inboxes'] && !(typeof data['use_with_inboxes'] === 'string' || data['use_with_inboxes'] instanceof String)) {
            throw new Error("Expected the field `use_with_inboxes` to be a primitive type in the JSON string but got " + data['use_with_inboxes']);
        }
        // ensure the json data is a string
        if (data['use_with_users'] && !(typeof data['use_with_users'] === 'string' || data['use_with_users'] instanceof String)) {
            throw new Error("Expected the field `use_with_users` to be a primitive type in the JSON string but got " + data['use_with_users']);
        }

        return true;
    }


}



/**
 * Body text of Clickwrap (supports Markdown formatting).
 * @member {String} body
 */
ClickwrapEntity.prototype['body'] = undefined;

/**
 * Clickwrap ID
 * @member {Number} id
 */
ClickwrapEntity.prototype['id'] = undefined;

/**
 * Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)
 * @member {String} name
 */
ClickwrapEntity.prototype['name'] = undefined;

/**
 * Use this Clickwrap for Bundles?
 * @member {module:model/ClickwrapEntity.UseWithBundlesEnum} use_with_bundles
 */
ClickwrapEntity.prototype['use_with_bundles'] = undefined;

/**
 * Use this Clickwrap for Inboxes?
 * @member {module:model/ClickwrapEntity.UseWithInboxesEnum} use_with_inboxes
 */
ClickwrapEntity.prototype['use_with_inboxes'] = undefined;

/**
 * Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.
 * @member {module:model/ClickwrapEntity.UseWithUsersEnum} use_with_users
 */
ClickwrapEntity.prototype['use_with_users'] = undefined;





/**
 * Allowed values for the <code>use_with_bundles</code> property.
 * @enum {String}
 * @readonly
 */
ClickwrapEntity['UseWithBundlesEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "require"
     * @const
     */
    "require": "require"
};


/**
 * Allowed values for the <code>use_with_inboxes</code> property.
 * @enum {String}
 * @readonly
 */
ClickwrapEntity['UseWithInboxesEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "require"
     * @const
     */
    "require": "require"
};


/**
 * Allowed values for the <code>use_with_users</code> property.
 * @enum {String}
 * @readonly
 */
ClickwrapEntity['UseWithUsersEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "require"
     * @const
     */
    "require": "require"
};



export default ClickwrapEntity;

