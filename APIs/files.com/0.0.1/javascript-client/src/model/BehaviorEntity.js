/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BehaviorEntity model module.
 * @module model/BehaviorEntity
 * @version 0.0.1
 */
class BehaviorEntity {
    /**
     * Constructs a new <code>BehaviorEntity</code>.
     * List Behaviors
     * @alias module:model/BehaviorEntity
     */
    constructor() { 
        
        BehaviorEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BehaviorEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BehaviorEntity} obj Optional instance to populate.
     * @return {module:model/BehaviorEntity} The populated <code>BehaviorEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BehaviorEntity();

            if (data.hasOwnProperty('attachment_url')) {
                obj['attachment_url'] = ApiClient.convertToType(data['attachment_url'], 'String');
            }
            if (data.hasOwnProperty('behavior')) {
                obj['behavior'] = ApiClient.convertToType(data['behavior'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BehaviorEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BehaviorEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attachment_url'] && !(typeof data['attachment_url'] === 'string' || data['attachment_url'] instanceof String)) {
            throw new Error("Expected the field `attachment_url` to be a primitive type in the JSON string but got " + data['attachment_url']);
        }
        // ensure the json data is a string
        if (data['behavior'] && !(typeof data['behavior'] === 'string' || data['behavior'] instanceof String)) {
            throw new Error("Expected the field `behavior` to be a primitive type in the JSON string but got " + data['behavior']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * URL for attached file
 * @member {String} attachment_url
 */
BehaviorEntity.prototype['attachment_url'] = undefined;

/**
 * Behavior type.
 * @member {String} behavior
 */
BehaviorEntity.prototype['behavior'] = undefined;

/**
 * Description for this behavior.
 * @member {String} description
 */
BehaviorEntity.prototype['description'] = undefined;

/**
 * Folder behavior ID
 * @member {Number} id
 */
BehaviorEntity.prototype['id'] = undefined;

/**
 * Name for this behavior.
 * @member {String} name
 */
BehaviorEntity.prototype['name'] = undefined;

/**
 * Folder path
 * @member {String} path
 */
BehaviorEntity.prototype['path'] = undefined;

/**
 * Settings for this behavior.  See the section above for an example value to provide here.  Formatting is different for each Behavior type.  May be sent as nested JSON or a single JSON-encoded string.  If using XML encoding for the API call, this data must be sent as a JSON-encoded string.
 * @member {Object} value
 */
BehaviorEntity.prototype['value'] = undefined;






export default BehaviorEntity;

