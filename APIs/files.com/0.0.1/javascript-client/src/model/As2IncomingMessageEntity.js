/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The As2IncomingMessageEntity model module.
 * @module model/As2IncomingMessageEntity
 * @version 0.0.1
 */
class As2IncomingMessageEntity {
    /**
     * Constructs a new <code>As2IncomingMessageEntity</code>.
     * List As2 Incoming Messages
     * @alias module:model/As2IncomingMessageEntity
     */
    constructor() { 
        
        As2IncomingMessageEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>As2IncomingMessageEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/As2IncomingMessageEntity} obj Optional instance to populate.
     * @return {module:model/As2IncomingMessageEntity} The populated <code>As2IncomingMessageEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new As2IncomingMessageEntity();

            if (data.hasOwnProperty('activity_log')) {
                obj['activity_log'] = ApiClient.convertToType(data['activity_log'], 'String');
            }
            if (data.hasOwnProperty('as2_from')) {
                obj['as2_from'] = ApiClient.convertToType(data['as2_from'], 'String');
            }
            if (data.hasOwnProperty('as2_partner_id')) {
                obj['as2_partner_id'] = ApiClient.convertToType(data['as2_partner_id'], 'Number');
            }
            if (data.hasOwnProperty('as2_station_id')) {
                obj['as2_station_id'] = ApiClient.convertToType(data['as2_station_id'], 'Number');
            }
            if (data.hasOwnProperty('as2_to')) {
                obj['as2_to'] = ApiClient.convertToType(data['as2_to'], 'String');
            }
            if (data.hasOwnProperty('attachment_filename')) {
                obj['attachment_filename'] = ApiClient.convertToType(data['attachment_filename'], 'String');
            }
            if (data.hasOwnProperty('body_size')) {
                obj['body_size'] = ApiClient.convertToType(data['body_size'], 'String');
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('encrypted_uri')) {
                obj['encrypted_uri'] = ApiClient.convertToType(data['encrypted_uri'], 'String');
            }
            if (data.hasOwnProperty('hex_recipient_serial')) {
                obj['hex_recipient_serial'] = ApiClient.convertToType(data['hex_recipient_serial'], 'String');
            }
            if (data.hasOwnProperty('http_headers')) {
                obj['http_headers'] = ApiClient.convertToType(data['http_headers'], Object);
            }
            if (data.hasOwnProperty('http_response_code')) {
                obj['http_response_code'] = ApiClient.convertToType(data['http_response_code'], 'String');
            }
            if (data.hasOwnProperty('http_response_headers')) {
                obj['http_response_headers'] = ApiClient.convertToType(data['http_response_headers'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('mdn_response_uri')) {
                obj['mdn_response_uri'] = ApiClient.convertToType(data['mdn_response_uri'], 'String');
            }
            if (data.hasOwnProperty('message_decrypted')) {
                obj['message_decrypted'] = ApiClient.convertToType(data['message_decrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'String');
            }
            if (data.hasOwnProperty('message_mdn_returned')) {
                obj['message_mdn_returned'] = ApiClient.convertToType(data['message_mdn_returned'], 'Boolean');
            }
            if (data.hasOwnProperty('message_processing_success')) {
                obj['message_processing_success'] = ApiClient.convertToType(data['message_processing_success'], 'Boolean');
            }
            if (data.hasOwnProperty('message_received')) {
                obj['message_received'] = ApiClient.convertToType(data['message_received'], 'Boolean');
            }
            if (data.hasOwnProperty('message_signature_verified')) {
                obj['message_signature_verified'] = ApiClient.convertToType(data['message_signature_verified'], 'Boolean');
            }
            if (data.hasOwnProperty('mic')) {
                obj['mic'] = ApiClient.convertToType(data['mic'], 'String');
            }
            if (data.hasOwnProperty('mic_algo')) {
                obj['mic_algo'] = ApiClient.convertToType(data['mic_algo'], 'String');
            }
            if (data.hasOwnProperty('processing_result')) {
                obj['processing_result'] = ApiClient.convertToType(data['processing_result'], 'String');
            }
            if (data.hasOwnProperty('processing_result_description')) {
                obj['processing_result_description'] = ApiClient.convertToType(data['processing_result_description'], 'String');
            }
            if (data.hasOwnProperty('raw_uri')) {
                obj['raw_uri'] = ApiClient.convertToType(data['raw_uri'], 'String');
            }
            if (data.hasOwnProperty('recipient_issuer')) {
                obj['recipient_issuer'] = ApiClient.convertToType(data['recipient_issuer'], 'String');
            }
            if (data.hasOwnProperty('recipient_serial')) {
                obj['recipient_serial'] = ApiClient.convertToType(data['recipient_serial'], 'String');
            }
            if (data.hasOwnProperty('smime_signed_uri')) {
                obj['smime_signed_uri'] = ApiClient.convertToType(data['smime_signed_uri'], 'String');
            }
            if (data.hasOwnProperty('smime_uri')) {
                obj['smime_uri'] = ApiClient.convertToType(data['smime_uri'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>As2IncomingMessageEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>As2IncomingMessageEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activity_log'] && !(typeof data['activity_log'] === 'string' || data['activity_log'] instanceof String)) {
            throw new Error("Expected the field `activity_log` to be a primitive type in the JSON string but got " + data['activity_log']);
        }
        // ensure the json data is a string
        if (data['as2_from'] && !(typeof data['as2_from'] === 'string' || data['as2_from'] instanceof String)) {
            throw new Error("Expected the field `as2_from` to be a primitive type in the JSON string but got " + data['as2_from']);
        }
        // ensure the json data is a string
        if (data['as2_to'] && !(typeof data['as2_to'] === 'string' || data['as2_to'] instanceof String)) {
            throw new Error("Expected the field `as2_to` to be a primitive type in the JSON string but got " + data['as2_to']);
        }
        // ensure the json data is a string
        if (data['attachment_filename'] && !(typeof data['attachment_filename'] === 'string' || data['attachment_filename'] instanceof String)) {
            throw new Error("Expected the field `attachment_filename` to be a primitive type in the JSON string but got " + data['attachment_filename']);
        }
        // ensure the json data is a string
        if (data['body_size'] && !(typeof data['body_size'] === 'string' || data['body_size'] instanceof String)) {
            throw new Error("Expected the field `body_size` to be a primitive type in the JSON string but got " + data['body_size']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['encrypted_uri'] && !(typeof data['encrypted_uri'] === 'string' || data['encrypted_uri'] instanceof String)) {
            throw new Error("Expected the field `encrypted_uri` to be a primitive type in the JSON string but got " + data['encrypted_uri']);
        }
        // ensure the json data is a string
        if (data['hex_recipient_serial'] && !(typeof data['hex_recipient_serial'] === 'string' || data['hex_recipient_serial'] instanceof String)) {
            throw new Error("Expected the field `hex_recipient_serial` to be a primitive type in the JSON string but got " + data['hex_recipient_serial']);
        }
        // ensure the json data is a string
        if (data['http_response_code'] && !(typeof data['http_response_code'] === 'string' || data['http_response_code'] instanceof String)) {
            throw new Error("Expected the field `http_response_code` to be a primitive type in the JSON string but got " + data['http_response_code']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['mdn_response_uri'] && !(typeof data['mdn_response_uri'] === 'string' || data['mdn_response_uri'] instanceof String)) {
            throw new Error("Expected the field `mdn_response_uri` to be a primitive type in the JSON string but got " + data['mdn_response_uri']);
        }
        // ensure the json data is a string
        if (data['message_id'] && !(typeof data['message_id'] === 'string' || data['message_id'] instanceof String)) {
            throw new Error("Expected the field `message_id` to be a primitive type in the JSON string but got " + data['message_id']);
        }
        // ensure the json data is a string
        if (data['mic'] && !(typeof data['mic'] === 'string' || data['mic'] instanceof String)) {
            throw new Error("Expected the field `mic` to be a primitive type in the JSON string but got " + data['mic']);
        }
        // ensure the json data is a string
        if (data['mic_algo'] && !(typeof data['mic_algo'] === 'string' || data['mic_algo'] instanceof String)) {
            throw new Error("Expected the field `mic_algo` to be a primitive type in the JSON string but got " + data['mic_algo']);
        }
        // ensure the json data is a string
        if (data['processing_result'] && !(typeof data['processing_result'] === 'string' || data['processing_result'] instanceof String)) {
            throw new Error("Expected the field `processing_result` to be a primitive type in the JSON string but got " + data['processing_result']);
        }
        // ensure the json data is a string
        if (data['processing_result_description'] && !(typeof data['processing_result_description'] === 'string' || data['processing_result_description'] instanceof String)) {
            throw new Error("Expected the field `processing_result_description` to be a primitive type in the JSON string but got " + data['processing_result_description']);
        }
        // ensure the json data is a string
        if (data['raw_uri'] && !(typeof data['raw_uri'] === 'string' || data['raw_uri'] instanceof String)) {
            throw new Error("Expected the field `raw_uri` to be a primitive type in the JSON string but got " + data['raw_uri']);
        }
        // ensure the json data is a string
        if (data['recipient_issuer'] && !(typeof data['recipient_issuer'] === 'string' || data['recipient_issuer'] instanceof String)) {
            throw new Error("Expected the field `recipient_issuer` to be a primitive type in the JSON string but got " + data['recipient_issuer']);
        }
        // ensure the json data is a string
        if (data['recipient_serial'] && !(typeof data['recipient_serial'] === 'string' || data['recipient_serial'] instanceof String)) {
            throw new Error("Expected the field `recipient_serial` to be a primitive type in the JSON string but got " + data['recipient_serial']);
        }
        // ensure the json data is a string
        if (data['smime_signed_uri'] && !(typeof data['smime_signed_uri'] === 'string' || data['smime_signed_uri'] instanceof String)) {
            throw new Error("Expected the field `smime_signed_uri` to be a primitive type in the JSON string but got " + data['smime_signed_uri']);
        }
        // ensure the json data is a string
        if (data['smime_uri'] && !(typeof data['smime_uri'] === 'string' || data['smime_uri'] instanceof String)) {
            throw new Error("Expected the field `smime_uri` to be a primitive type in the JSON string but got " + data['smime_uri']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * JSON Structure of the activity log.
 * @member {String} activity_log
 */
As2IncomingMessageEntity.prototype['activity_log'] = undefined;

/**
 * AS2 FROM header of message
 * @member {String} as2_from
 */
As2IncomingMessageEntity.prototype['as2_from'] = undefined;

/**
 * Id of the AS2 Partner associated with this message.
 * @member {Number} as2_partner_id
 */
As2IncomingMessageEntity.prototype['as2_partner_id'] = undefined;

/**
 * Id of the AS2 Station associated with this message.
 * @member {Number} as2_station_id
 */
As2IncomingMessageEntity.prototype['as2_station_id'] = undefined;

/**
 * AS2 TO header of message
 * @member {String} as2_to
 */
As2IncomingMessageEntity.prototype['as2_to'] = undefined;

/**
 * Filename of the file being received.
 * @member {String} attachment_filename
 */
As2IncomingMessageEntity.prototype['attachment_filename'] = undefined;

/**
 * Encrypted Payload Body Size
 * @member {String} body_size
 */
As2IncomingMessageEntity.prototype['body_size'] = undefined;

/**
 * Content Type header of the incoming message.
 * @member {String} content_type
 */
As2IncomingMessageEntity.prototype['content_type'] = undefined;

/**
 * Message creation date/time
 * @member {Date} created_at
 */
As2IncomingMessageEntity.prototype['created_at'] = undefined;

/**
 * Date Header
 * @member {String} date
 */
As2IncomingMessageEntity.prototype['date'] = undefined;

/**
 * URL to download the encrypted signed smime that is to sent as AS2 body
 * @member {String} encrypted_uri
 */
As2IncomingMessageEntity.prototype['encrypted_uri'] = undefined;

/**
 * Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial in hex format.
 * @member {String} hex_recipient_serial
 */
As2IncomingMessageEntity.prototype['hex_recipient_serial'] = undefined;

/**
 * HTTP Headers sent with this message.
 * @member {Object} http_headers
 */
As2IncomingMessageEntity.prototype['http_headers'] = undefined;

/**
 * HTTP Response Code sent for this message
 * @member {String} http_response_code
 */
As2IncomingMessageEntity.prototype['http_response_code'] = undefined;

/**
 * HTTP Headers sent for this message.
 * @member {Object} http_response_headers
 */
As2IncomingMessageEntity.prototype['http_response_headers'] = undefined;

/**
 * Id of the AS2 Partner.
 * @member {Number} id
 */
As2IncomingMessageEntity.prototype['id'] = undefined;

/**
 * IP Address of the Sender
 * @member {String} ip
 */
As2IncomingMessageEntity.prototype['ip'] = undefined;

/**
 * URL to download the http response body
 * @member {String} mdn_response_uri
 */
As2IncomingMessageEntity.prototype['mdn_response_uri'] = undefined;

/**
 * Message decrypted successfully?
 * @member {Boolean} message_decrypted
 */
As2IncomingMessageEntity.prototype['message_decrypted'] = undefined;

/**
 * AS2 Message Id
 * @member {String} message_id
 */
As2IncomingMessageEntity.prototype['message_id'] = undefined;

/**
 * MDN returned?
 * @member {Boolean} message_mdn_returned
 */
As2IncomingMessageEntity.prototype['message_mdn_returned'] = undefined;

/**
 * Message processed successfully?
 * @member {Boolean} message_processing_success
 */
As2IncomingMessageEntity.prototype['message_processing_success'] = undefined;

/**
 * Message body received?
 * @member {Boolean} message_received
 */
As2IncomingMessageEntity.prototype['message_received'] = undefined;

/**
 * Message signature verified?
 * @member {Boolean} message_signature_verified
 */
As2IncomingMessageEntity.prototype['message_signature_verified'] = undefined;

/**
 * AS2 Message Integrity Check
 * @member {String} mic
 */
As2IncomingMessageEntity.prototype['mic'] = undefined;

/**
 * AS2 Message Integrity Check Algorithm Used
 * @member {String} mic_algo
 */
As2IncomingMessageEntity.prototype['mic_algo'] = undefined;

/**
 * Result of processing.
 * @member {module:model/As2IncomingMessageEntity.ProcessingResultEnum} processing_result
 */
As2IncomingMessageEntity.prototype['processing_result'] = undefined;

/**
 * Result of processing description.
 * @member {String} processing_result_description
 */
As2IncomingMessageEntity.prototype['processing_result_description'] = undefined;

/**
 * URL to download the original file contents
 * @member {String} raw_uri
 */
As2IncomingMessageEntity.prototype['raw_uri'] = undefined;

/**
 * Incoming Message Recipient(the Client Cert used to encrypt this message)'s issuer
 * @member {String} recipient_issuer
 */
As2IncomingMessageEntity.prototype['recipient_issuer'] = undefined;

/**
 * Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial
 * @member {String} recipient_serial
 */
As2IncomingMessageEntity.prototype['recipient_serial'] = undefined;

/**
 * URL to download the file contents as smime with signature
 * @member {String} smime_signed_uri
 */
As2IncomingMessageEntity.prototype['smime_signed_uri'] = undefined;

/**
 * URL to download the file contents encoded as smime
 * @member {String} smime_uri
 */
As2IncomingMessageEntity.prototype['smime_uri'] = undefined;

/**
 * AS2 Subject Header
 * @member {String} subject
 */
As2IncomingMessageEntity.prototype['subject'] = undefined;

/**
 * UUID assigned to this message.
 * @member {String} uuid
 */
As2IncomingMessageEntity.prototype['uuid'] = undefined;





/**
 * Allowed values for the <code>processing_result</code> property.
 * @enum {String}
 * @readonly
 */
As2IncomingMessageEntity['ProcessingResultEnum'] = {

    /**
     * value: "not_started"
     * @const
     */
    "not_started": "not_started",

    /**
     * value: "unable_to_find_station"
     * @const
     */
    "unable_to_find_station": "unable_to_find_station",

    /**
     * value: "unable_to_find_partner"
     * @const
     */
    "unable_to_find_partner": "unable_to_find_partner",

    /**
     * value: "unable_to_validate_signature"
     * @const
     */
    "unable_to_validate_signature": "unable_to_validate_signature",

    /**
     * value: "decrypt_fail"
     * @const
     */
    "decrypt_fail": "decrypt_fail",

    /**
     * value: "file_save_fail"
     * @const
     */
    "file_save_fail": "file_save_fail",

    /**
     * value: "success"
     * @const
     */
    "success": "success"
};



export default As2IncomingMessageEntity;

