/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExternalEventEntity model module.
 * @module model/ExternalEventEntity
 * @version 0.0.1
 */
class ExternalEventEntity {
    /**
     * Constructs a new <code>ExternalEventEntity</code>.
     * List External Events
     * @alias module:model/ExternalEventEntity
     */
    constructor() { 
        
        ExternalEventEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternalEventEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalEventEntity} obj Optional instance to populate.
     * @return {module:model/ExternalEventEntity} The populated <code>ExternalEventEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalEventEntity();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('body_url')) {
                obj['body_url'] = ApiClient.convertToType(data['body_url'], 'String');
            }
            if (data.hasOwnProperty('bytes_synced')) {
                obj['bytes_synced'] = ApiClient.convertToType(data['bytes_synced'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('errored_files')) {
                obj['errored_files'] = ApiClient.convertToType(data['errored_files'], 'Number');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = ApiClient.convertToType(data['event_type'], 'String');
            }
            if (data.hasOwnProperty('folder_behavior_id')) {
                obj['folder_behavior_id'] = ApiClient.convertToType(data['folder_behavior_id'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('remote_server_type')) {
                obj['remote_server_type'] = ApiClient.convertToType(data['remote_server_type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('successful_files')) {
                obj['successful_files'] = ApiClient.convertToType(data['successful_files'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalEventEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalEventEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['body_url'] && !(typeof data['body_url'] === 'string' || data['body_url'] instanceof String)) {
            throw new Error("Expected the field `body_url` to be a primitive type in the JSON string but got " + data['body_url']);
        }
        // ensure the json data is a string
        if (data['event_type'] && !(typeof data['event_type'] === 'string' || data['event_type'] instanceof String)) {
            throw new Error("Expected the field `event_type` to be a primitive type in the JSON string but got " + data['event_type']);
        }
        // ensure the json data is a string
        if (data['remote_server_type'] && !(typeof data['remote_server_type'] === 'string' || data['remote_server_type'] instanceof String)) {
            throw new Error("Expected the field `remote_server_type` to be a primitive type in the JSON string but got " + data['remote_server_type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Event body
 * @member {String} body
 */
ExternalEventEntity.prototype['body'] = undefined;

/**
 * Link to log file.
 * @member {String} body_url
 */
ExternalEventEntity.prototype['body_url'] = undefined;

/**
 * For sync events, the total number of bytes synced.
 * @member {Number} bytes_synced
 */
ExternalEventEntity.prototype['bytes_synced'] = undefined;

/**
 * External event create date/time
 * @member {Date} created_at
 */
ExternalEventEntity.prototype['created_at'] = undefined;

/**
 * For sync events, the number of files that encountered errors.
 * @member {Number} errored_files
 */
ExternalEventEntity.prototype['errored_files'] = undefined;

/**
 * Type of event being recorded.
 * @member {module:model/ExternalEventEntity.EventTypeEnum} event_type
 */
ExternalEventEntity.prototype['event_type'] = undefined;

/**
 * Folder Behavior ID
 * @member {Number} folder_behavior_id
 */
ExternalEventEntity.prototype['folder_behavior_id'] = undefined;

/**
 * Event ID
 * @member {Number} id
 */
ExternalEventEntity.prototype['id'] = undefined;

/**
 * Associated Remote Server type, if any
 * @member {String} remote_server_type
 */
ExternalEventEntity.prototype['remote_server_type'] = undefined;

/**
 * Status of event.
 * @member {module:model/ExternalEventEntity.StatusEnum} status
 */
ExternalEventEntity.prototype['status'] = undefined;

/**
 * For sync events, the number of files handled successfully.
 * @member {Number} successful_files
 */
ExternalEventEntity.prototype['successful_files'] = undefined;





/**
 * Allowed values for the <code>event_type</code> property.
 * @enum {String}
 * @readonly
 */
ExternalEventEntity['EventTypeEnum'] = {

    /**
     * value: "ldap_sync"
     * @const
     */
    "ldap_sync": "ldap_sync",

    /**
     * value: "remote_server_sync"
     * @const
     */
    "remote_server_sync": "remote_server_sync",

    /**
     * value: "lockout"
     * @const
     */
    "lockout": "lockout",

    /**
     * value: "ldap_login"
     * @const
     */
    "ldap_login": "ldap_login",

    /**
     * value: "saml_login"
     * @const
     */
    "saml_login": "saml_login",

    /**
     * value: "client_log"
     * @const
     */
    "client_log": "client_log",

    /**
     * value: "pending_work"
     * @const
     */
    "pending_work": "pending_work"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ExternalEventEntity['StatusEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure",

    /**
     * value: "partial_failure"
     * @const
     */
    "partial_failure": "partial_failure",

    /**
     * value: "in_progress"
     * @const
     */
    "in_progress": "in_progress",

    /**
     * value: "skipped"
     * @const
     */
    "skipped": "skipped"
};



export default ExternalEventEntity;

