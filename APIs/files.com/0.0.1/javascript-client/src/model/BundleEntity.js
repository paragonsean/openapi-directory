/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormFieldSetEntity from './FormFieldSetEntity';
import ImageEntity from './ImageEntity';

/**
 * The BundleEntity model module.
 * @module model/BundleEntity
 * @version 0.0.1
 */
class BundleEntity {
    /**
     * Constructs a new <code>BundleEntity</code>.
     * Create Bundle
     * @alias module:model/BundleEntity
     */
    constructor() { 
        
        BundleEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BundleEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BundleEntity} obj Optional instance to populate.
     * @return {module:model/BundleEntity} The populated <code>BundleEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BundleEntity();

            if (data.hasOwnProperty('clickwrap_body')) {
                obj['clickwrap_body'] = ApiClient.convertToType(data['clickwrap_body'], 'String');
            }
            if (data.hasOwnProperty('clickwrap_id')) {
                obj['clickwrap_id'] = ApiClient.convertToType(data['clickwrap_id'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dont_separate_submissions_by_folder')) {
                obj['dont_separate_submissions_by_folder'] = ApiClient.convertToType(data['dont_separate_submissions_by_folder'], 'Boolean');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Date');
            }
            if (data.hasOwnProperty('form_field_set')) {
                obj['form_field_set'] = FormFieldSetEntity.constructFromObject(data['form_field_set']);
            }
            if (data.hasOwnProperty('has_inbox')) {
                obj['has_inbox'] = ApiClient.convertToType(data['has_inbox'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('inbox_id')) {
                obj['inbox_id'] = ApiClient.convertToType(data['inbox_id'], 'Number');
            }
            if (data.hasOwnProperty('max_uses')) {
                obj['max_uses'] = ApiClient.convertToType(data['max_uses'], 'Number');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('password_protected')) {
                obj['password_protected'] = ApiClient.convertToType(data['password_protected'], 'Boolean');
            }
            if (data.hasOwnProperty('path_template')) {
                obj['path_template'] = ApiClient.convertToType(data['path_template'], 'String');
            }
            if (data.hasOwnProperty('paths')) {
                obj['paths'] = ApiClient.convertToType(data['paths'], ['String']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
            if (data.hasOwnProperty('preview_only')) {
                obj['preview_only'] = ApiClient.convertToType(data['preview_only'], 'Boolean');
            }
            if (data.hasOwnProperty('require_registration')) {
                obj['require_registration'] = ApiClient.convertToType(data['require_registration'], 'Boolean');
            }
            if (data.hasOwnProperty('require_share_recipient')) {
                obj['require_share_recipient'] = ApiClient.convertToType(data['require_share_recipient'], 'Boolean');
            }
            if (data.hasOwnProperty('send_email_receipt_to_uploader')) {
                obj['send_email_receipt_to_uploader'] = ApiClient.convertToType(data['send_email_receipt_to_uploader'], 'Boolean');
            }
            if (data.hasOwnProperty('skip_company')) {
                obj['skip_company'] = ApiClient.convertToType(data['skip_company'], 'Boolean');
            }
            if (data.hasOwnProperty('skip_email')) {
                obj['skip_email'] = ApiClient.convertToType(data['skip_email'], 'Boolean');
            }
            if (data.hasOwnProperty('skip_name')) {
                obj['skip_name'] = ApiClient.convertToType(data['skip_name'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('watermark_attachment')) {
                obj['watermark_attachment'] = ImageEntity.constructFromObject(data['watermark_attachment']);
            }
            if (data.hasOwnProperty('watermark_value')) {
                obj['watermark_value'] = ApiClient.convertToType(data['watermark_value'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BundleEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BundleEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clickwrap_body'] && !(typeof data['clickwrap_body'] === 'string' || data['clickwrap_body'] instanceof String)) {
            throw new Error("Expected the field `clickwrap_body` to be a primitive type in the JSON string but got " + data['clickwrap_body']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `form_field_set`
        if (data['form_field_set']) { // data not null
          FormFieldSetEntity.validateJSON(data['form_field_set']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['path_template'] && !(typeof data['path_template'] === 'string' || data['path_template'] instanceof String)) {
            throw new Error("Expected the field `path_template` to be a primitive type in the JSON string but got " + data['path_template']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paths'])) {
            throw new Error("Expected the field `paths` to be an array in the JSON data but got " + data['paths']);
        }
        // ensure the json data is a string
        if (data['permissions'] && !(typeof data['permissions'] === 'string' || data['permissions'] instanceof String)) {
            throw new Error("Expected the field `permissions` to be a primitive type in the JSON string but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // validate the optional field `watermark_attachment`
        if (data['watermark_attachment']) { // data not null
          ImageEntity.validateJSON(data['watermark_attachment']);
        }

        return true;
    }


}



/**
 * Legal text that must be agreed to prior to accessing Bundle.
 * @member {String} clickwrap_body
 */
BundleEntity.prototype['clickwrap_body'] = undefined;

/**
 * ID of the clickwrap to use with this bundle.
 * @member {Number} clickwrap_id
 */
BundleEntity.prototype['clickwrap_id'] = undefined;

/**
 * Bundle code.  This code forms the end part of the Public URL.
 * @member {String} code
 */
BundleEntity.prototype['code'] = undefined;

/**
 * Bundle created at date/time
 * @member {Date} created_at
 */
BundleEntity.prototype['created_at'] = undefined;

/**
 * Public description
 * @member {String} description
 */
BundleEntity.prototype['description'] = undefined;

/**
 * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.
 * @member {Boolean} dont_separate_submissions_by_folder
 */
BundleEntity.prototype['dont_separate_submissions_by_folder'] = undefined;

/**
 * Bundle expiration date/time
 * @member {Date} expires_at
 */
BundleEntity.prototype['expires_at'] = undefined;

/**
 * @member {module:model/FormFieldSetEntity} form_field_set
 */
BundleEntity.prototype['form_field_set'] = undefined;

/**
 * Does this bundle have an associated inbox?
 * @member {Boolean} has_inbox
 */
BundleEntity.prototype['has_inbox'] = undefined;

/**
 * Bundle ID
 * @member {Number} id
 */
BundleEntity.prototype['id'] = undefined;

/**
 * ID of the associated inbox, if available.
 * @member {Number} inbox_id
 */
BundleEntity.prototype['inbox_id'] = undefined;

/**
 * Maximum number of times bundle can be accessed
 * @member {Number} max_uses
 */
BundleEntity.prototype['max_uses'] = undefined;

/**
 * Bundle internal note
 * @member {String} note
 */
BundleEntity.prototype['note'] = undefined;

/**
 * Is this bundle password protected?
 * @member {Boolean} password_protected
 */
BundleEntity.prototype['password_protected'] = undefined;

/**
 * Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.
 * @member {String} path_template
 */
BundleEntity.prototype['path_template'] = undefined;

/**
 * A list of paths in this bundle.  For performance reasons, this is not provided when listing bundles.
 * @member {Array.<String>} paths
 */
BundleEntity.prototype['paths'] = undefined;

/**
 * Permissions that apply to Folders in this Share Link.
 * @member {module:model/BundleEntity.PermissionsEnum} permissions
 */
BundleEntity.prototype['permissions'] = undefined;

/**
 * Restrict users to previewing files only?
 * @member {Boolean} preview_only
 */
BundleEntity.prototype['preview_only'] = undefined;

/**
 * Show a registration page that captures the downloader's name and email address?
 * @member {Boolean} require_registration
 */
BundleEntity.prototype['require_registration'] = undefined;

/**
 * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
 * @member {Boolean} require_share_recipient
 */
BundleEntity.prototype['require_share_recipient'] = undefined;

/**
 * Send delivery receipt to the uploader. Note: For writable share only
 * @member {Boolean} send_email_receipt_to_uploader
 */
BundleEntity.prototype['send_email_receipt_to_uploader'] = undefined;

/**
 * BundleRegistrations can be saved without providing company?
 * @member {Boolean} skip_company
 */
BundleEntity.prototype['skip_company'] = undefined;

/**
 * BundleRegistrations can be saved without providing email?
 * @member {Boolean} skip_email
 */
BundleEntity.prototype['skip_email'] = undefined;

/**
 * BundleRegistrations can be saved without providing name?
 * @member {Boolean} skip_name
 */
BundleEntity.prototype['skip_name'] = undefined;

/**
 * Public URL of Share Link
 * @member {String} url
 */
BundleEntity.prototype['url'] = undefined;

/**
 * Bundle creator user ID
 * @member {Number} user_id
 */
BundleEntity.prototype['user_id'] = undefined;

/**
 * Bundle creator username
 * @member {String} username
 */
BundleEntity.prototype['username'] = undefined;

/**
 * @member {module:model/ImageEntity} watermark_attachment
 */
BundleEntity.prototype['watermark_attachment'] = undefined;

/**
 * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
 * @member {Object} watermark_value
 */
BundleEntity.prototype['watermark_value'] = undefined;





/**
 * Allowed values for the <code>permissions</code> property.
 * @enum {String}
 * @readonly
 */
BundleEntity['PermissionsEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "read_write"
     * @const
     */
    "read_write": "read_write",

    /**
     * value: "full"
     * @const
     */
    "full": "full",

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "preview_only"
     * @const
     */
    "preview_only": "preview_only"
};



export default BundleEntity;

