/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileMigrationEntity model module.
 * @module model/FileMigrationEntity
 * @version 0.0.1
 */
class FileMigrationEntity {
    /**
     * Constructs a new <code>FileMigrationEntity</code>.
     * Show File Migration
     * @alias module:model/FileMigrationEntity
     */
    constructor() { 
        
        FileMigrationEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileMigrationEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileMigrationEntity} obj Optional instance to populate.
     * @return {module:model/FileMigrationEntity} The populated <code>FileMigrationEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileMigrationEntity();

            if (data.hasOwnProperty('dest_path')) {
                obj['dest_path'] = ApiClient.convertToType(data['dest_path'], 'String');
            }
            if (data.hasOwnProperty('files_moved')) {
                obj['files_moved'] = ApiClient.convertToType(data['files_moved'], 'Number');
            }
            if (data.hasOwnProperty('files_total')) {
                obj['files_total'] = ApiClient.convertToType(data['files_total'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('log_url')) {
                obj['log_url'] = ApiClient.convertToType(data['log_url'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileMigrationEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileMigrationEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dest_path'] && !(typeof data['dest_path'] === 'string' || data['dest_path'] instanceof String)) {
            throw new Error("Expected the field `dest_path` to be a primitive type in the JSON string but got " + data['dest_path']);
        }
        // ensure the json data is a string
        if (data['log_url'] && !(typeof data['log_url'] === 'string' || data['log_url'] instanceof String)) {
            throw new Error("Expected the field `log_url` to be a primitive type in the JSON string but got " + data['log_url']);
        }
        // ensure the json data is a string
        if (data['operation'] && !(typeof data['operation'] === 'string' || data['operation'] instanceof String)) {
            throw new Error("Expected the field `operation` to be a primitive type in the JSON string but got " + data['operation']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Destination path
 * @member {String} dest_path
 */
FileMigrationEntity.prototype['dest_path'] = undefined;

/**
 * Number of files processed
 * @member {Number} files_moved
 */
FileMigrationEntity.prototype['files_moved'] = undefined;

/**
 * Deprecated: used to return a count of the applicable files.  Currently returns 0 always.  On remote servers, it is not possible to reliably determine the number of affected files for every migration operation.
 * @member {Number} files_total
 */
FileMigrationEntity.prototype['files_total'] = undefined;

/**
 * File migration ID
 * @member {Number} id
 */
FileMigrationEntity.prototype['id'] = undefined;

/**
 * Link to download the log file for this migration.
 * @member {String} log_url
 */
FileMigrationEntity.prototype['log_url'] = undefined;

/**
 * The type of operation
 * @member {module:model/FileMigrationEntity.OperationEnum} operation
 */
FileMigrationEntity.prototype['operation'] = undefined;

/**
 * Source path
 * @member {String} path
 */
FileMigrationEntity.prototype['path'] = undefined;

/**
 * Region
 * @member {String} region
 */
FileMigrationEntity.prototype['region'] = undefined;

/**
 * Status
 * @member {module:model/FileMigrationEntity.StatusEnum} status
 */
FileMigrationEntity.prototype['status'] = undefined;





/**
 * Allowed values for the <code>operation</code> property.
 * @enum {String}
 * @readonly
 */
FileMigrationEntity['OperationEnum'] = {

    /**
     * value: "delete"
     * @const
     */
    "delete": "delete",

    /**
     * value: "move"
     * @const
     */
    "move": "move",

    /**
     * value: "copy"
     * @const
     */
    "copy": "copy",

    /**
     * value: "regional_migration"
     * @const
     */
    "regional_migration": "regional_migration"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
FileMigrationEntity['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "counting"
     * @const
     */
    "counting": "counting",

    /**
     * value: "processing"
     * @const
     */
    "processing": "processing",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "processing_subfolders"
     * @const
     */
    "processing_subfolders": "processing_subfolders",

    /**
     * value: "finishing"
     * @const
     */
    "finishing": "finishing",

    /**
     * value: "creating_dest_folder"
     * @const
     */
    "creating_dest_folder": "creating_dest_folder",

    /**
     * value: "waiting_for_other_jobs"
     * @const
     */
    "waiting_for_other_jobs": "waiting_for_other_jobs",

    /**
     * value: "waiting_for_all_files"
     * @const
     */
    "waiting_for_all_files": "waiting_for_all_files",

    /**
     * value: "waiting_for_pending_subfolders"
     * @const
     */
    "waiting_for_pending_subfolders": "waiting_for_pending_subfolders",

    /**
     * value: "waiting_for_all_subfolders"
     * @const
     */
    "waiting_for_all_subfolders": "waiting_for_all_subfolders",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "waiting_for_enqueued_operations"
     * @const
     */
    "waiting_for_enqueued_operations": "waiting_for_enqueued_operations",

    /**
     * value: "unused"
     * @const
     */
    "unused": "unused",

    /**
     * value: "processing_recursively"
     * @const
     */
    "processing_recursively": "processing_recursively",

    /**
     * value: "removing_deferred_folders"
     * @const
     */
    "removing_deferred_folders": "removing_deferred_folders"
};



export default FileMigrationEntity;

