/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsageSnapshotEntity model module.
 * @module model/UsageSnapshotEntity
 * @version 0.0.1
 */
class UsageSnapshotEntity {
    /**
     * Constructs a new <code>UsageSnapshotEntity</code>.
     * List Usage Snapshots
     * @alias module:model/UsageSnapshotEntity
     */
    constructor() { 
        
        UsageSnapshotEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsageSnapshotEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsageSnapshotEntity} obj Optional instance to populate.
     * @return {module:model/UsageSnapshotEntity} The populated <code>UsageSnapshotEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsageSnapshotEntity();

            if (data.hasOwnProperty('bytes_sent')) {
                obj['bytes_sent'] = ApiClient.convertToType(data['bytes_sent'], 'Number');
            }
            if (data.hasOwnProperty('current_storage')) {
                obj['current_storage'] = ApiClient.convertToType(data['current_storage'], 'Number');
            }
            if (data.hasOwnProperty('deleted_files_counted_in_minimum')) {
                obj['deleted_files_counted_in_minimum'] = ApiClient.convertToType(data['deleted_files_counted_in_minimum'], 'Number');
            }
            if (data.hasOwnProperty('deleted_files_storage')) {
                obj['deleted_files_storage'] = ApiClient.convertToType(data['deleted_files_storage'], 'Number');
            }
            if (data.hasOwnProperty('end_at')) {
                obj['end_at'] = ApiClient.convertToType(data['end_at'], 'Date');
            }
            if (data.hasOwnProperty('high_water_storage')) {
                obj['high_water_storage'] = ApiClient.convertToType(data['high_water_storage'], 'Number');
            }
            if (data.hasOwnProperty('high_water_user_count')) {
                obj['high_water_user_count'] = ApiClient.convertToType(data['high_water_user_count'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('root_storage')) {
                obj['root_storage'] = ApiClient.convertToType(data['root_storage'], 'Number');
            }
            if (data.hasOwnProperty('start_at')) {
                obj['start_at'] = ApiClient.convertToType(data['start_at'], 'Date');
            }
            if (data.hasOwnProperty('sync_bytes_received')) {
                obj['sync_bytes_received'] = ApiClient.convertToType(data['sync_bytes_received'], 'Number');
            }
            if (data.hasOwnProperty('sync_bytes_sent')) {
                obj['sync_bytes_sent'] = ApiClient.convertToType(data['sync_bytes_sent'], 'Number');
            }
            if (data.hasOwnProperty('total_billable_transfer_usage')) {
                obj['total_billable_transfer_usage'] = ApiClient.convertToType(data['total_billable_transfer_usage'], 'Number');
            }
            if (data.hasOwnProperty('total_billable_usage')) {
                obj['total_billable_usage'] = ApiClient.convertToType(data['total_billable_usage'], 'Number');
            }
            if (data.hasOwnProperty('usage_by_top_level_dir')) {
                obj['usage_by_top_level_dir'] = ApiClient.convertToType(data['usage_by_top_level_dir'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsageSnapshotEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsageSnapshotEntity</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Transfer Usage for period - Outbound GB from Files Native Storage
 * @member {Number} bytes_sent
 */
UsageSnapshotEntity.prototype['bytes_sent'] = undefined;

/**
 * Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)
 * @member {Number} current_storage
 */
UsageSnapshotEntity.prototype['current_storage'] = undefined;

/**
 * Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)
 * @member {Number} deleted_files_counted_in_minimum
 */
UsageSnapshotEntity.prototype['deleted_files_counted_in_minimum'] = undefined;

/**
 * Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)
 * @member {Number} deleted_files_storage
 */
UsageSnapshotEntity.prototype['deleted_files_storage'] = undefined;

/**
 * Usage snapshot end date/time
 * @member {Date} end_at
 */
UsageSnapshotEntity.prototype['end_at'] = undefined;

/**
 * Highest Storage Usage GB recorded in time period (used for billing)
 * @member {Number} high_water_storage
 */
UsageSnapshotEntity.prototype['high_water_storage'] = undefined;

/**
 * Highest user count number in time period
 * @member {Number} high_water_user_count
 */
UsageSnapshotEntity.prototype['high_water_user_count'] = undefined;

/**
 * Usage snapshot ID
 * @member {Number} id
 */
UsageSnapshotEntity.prototype['id'] = undefined;

/**
 * Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)
 * @member {Number} root_storage
 */
UsageSnapshotEntity.prototype['root_storage'] = undefined;

/**
 * Usage snapshot start date/time
 * @member {Date} start_at
 */
UsageSnapshotEntity.prototype['start_at'] = undefined;

/**
 * Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)
 * @member {Number} sync_bytes_received
 */
UsageSnapshotEntity.prototype['sync_bytes_received'] = undefined;

/**
 * Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)
 * @member {Number} sync_bytes_sent
 */
UsageSnapshotEntity.prototype['sync_bytes_sent'] = undefined;

/**
 * Transfer usage for period - Total Billable amount
 * @member {Number} total_billable_transfer_usage
 */
UsageSnapshotEntity.prototype['total_billable_transfer_usage'] = undefined;

/**
 * Storage + Transfer Usage - Total Billable amount
 * @member {Number} total_billable_usage
 */
UsageSnapshotEntity.prototype['total_billable_usage'] = undefined;

/**
 * Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)
 * @member {Object} usage_by_top_level_dir
 */
UsageSnapshotEntity.prototype['usage_by_top_level_dir'] = undefined;






export default UsageSnapshotEntity;

