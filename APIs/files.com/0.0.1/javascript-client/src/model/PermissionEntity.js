/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PermissionEntity model module.
 * @module model/PermissionEntity
 * @version 0.0.1
 */
class PermissionEntity {
    /**
     * Constructs a new <code>PermissionEntity</code>.
     * List Permissions
     * @alias module:model/PermissionEntity
     */
    constructor() { 
        
        PermissionEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PermissionEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PermissionEntity} obj Optional instance to populate.
     * @return {module:model/PermissionEntity} The populated <code>PermissionEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PermissionEntity();

            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'Number');
            }
            if (data.hasOwnProperty('group_name')) {
                obj['group_name'] = ApiClient.convertToType(data['group_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('recursive')) {
                obj['recursive'] = ApiClient.convertToType(data['recursive'], 'Boolean');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PermissionEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PermissionEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['group_name'] && !(typeof data['group_name'] === 'string' || data['group_name'] instanceof String)) {
            throw new Error("Expected the field `group_name` to be a primitive type in the JSON string but got " + data['group_name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Group ID
 * @member {Number} group_id
 */
PermissionEntity.prototype['group_id'] = undefined;

/**
 * Group name if applicable
 * @member {String} group_name
 */
PermissionEntity.prototype['group_name'] = undefined;

/**
 * Permission ID
 * @member {Number} id
 */
PermissionEntity.prototype['id'] = undefined;

/**
 * Folder path
 * @member {String} path
 */
PermissionEntity.prototype['path'] = undefined;

/**
 * Permission type
 * @member {module:model/PermissionEntity.PermissionEnum} permission
 */
PermissionEntity.prototype['permission'] = undefined;

/**
 * Does this permission apply to subfolders?
 * @member {Boolean} recursive
 */
PermissionEntity.prototype['recursive'] = undefined;

/**
 * User ID
 * @member {Number} user_id
 */
PermissionEntity.prototype['user_id'] = undefined;

/**
 * User's username
 * @member {String} username
 */
PermissionEntity.prototype['username'] = undefined;





/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
PermissionEntity['PermissionEnum'] = {

    /**
     * value: "full"
     * @const
     */
    "full": "full",

    /**
     * value: "readonly"
     * @const
     */
    "readonly": "readonly",

    /**
     * value: "writeonly"
     * @const
     */
    "writeonly": "writeonly",

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "history"
     * @const
     */
    "history": "history",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "bundle"
     * @const
     */
    "bundle": "bundle"
};



export default PermissionEntity;

