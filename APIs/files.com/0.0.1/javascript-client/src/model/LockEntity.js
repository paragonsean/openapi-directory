/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LockEntity model module.
 * @module model/LockEntity
 * @version 0.0.1
 */
class LockEntity {
    /**
     * Constructs a new <code>LockEntity</code>.
     * List Locks by path
     * @alias module:model/LockEntity
     */
    constructor() { 
        
        LockEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LockEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LockEntity} obj Optional instance to populate.
     * @return {module:model/LockEntity} The populated <code>LockEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LockEntity();

            if (data.hasOwnProperty('allow_access_by_any_user')) {
                obj['allow_access_by_any_user'] = ApiClient.convertToType(data['allow_access_by_any_user'], 'Boolean');
            }
            if (data.hasOwnProperty('depth')) {
                obj['depth'] = ApiClient.convertToType(data['depth'], 'String');
            }
            if (data.hasOwnProperty('exclusive')) {
                obj['exclusive'] = ApiClient.convertToType(data['exclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('recursive')) {
                obj['recursive'] = ApiClient.convertToType(data['recursive'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LockEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LockEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['depth'] && !(typeof data['depth'] === 'string' || data['depth'] instanceof String)) {
            throw new Error("Expected the field `depth` to be a primitive type in the JSON string but got " + data['depth']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Can lock be modified by users other than its creator?
 * @member {Boolean} allow_access_by_any_user
 */
LockEntity.prototype['allow_access_by_any_user'] = undefined;

/**
 * DEPRECATED: Lock depth
 * @member {String} depth
 */
LockEntity.prototype['depth'] = undefined;

/**
 * Is lock exclusive?
 * @member {Boolean} exclusive
 */
LockEntity.prototype['exclusive'] = undefined;

/**
 * Owner of the lock.  This can be any arbitrary string.
 * @member {String} owner
 */
LockEntity.prototype['owner'] = undefined;

/**
 * Path
 * @member {String} path
 */
LockEntity.prototype['path'] = undefined;

/**
 * Does lock apply to subfolders?
 * @member {Boolean} recursive
 */
LockEntity.prototype['recursive'] = undefined;

/**
 * DEPRECATED: Lock scope
 * @member {String} scope
 */
LockEntity.prototype['scope'] = undefined;

/**
 * Lock timeout in seconds
 * @member {Number} timeout
 */
LockEntity.prototype['timeout'] = undefined;

/**
 * Lock token.  Use to release lock.
 * @member {String} token
 */
LockEntity.prototype['token'] = undefined;

/**
 * DEPRECATED: Lock type
 * @member {String} type
 */
LockEntity.prototype['type'] = undefined;

/**
 * Lock creator user ID
 * @member {Number} user_id
 */
LockEntity.prototype['user_id'] = undefined;

/**
 * Lock creator username
 * @member {String} username
 */
LockEntity.prototype['username'] = undefined;






export default LockEntity;

