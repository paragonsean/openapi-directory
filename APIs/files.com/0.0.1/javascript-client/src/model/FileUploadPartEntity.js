/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileUploadPartEntity model module.
 * @module model/FileUploadPartEntity
 * @version 0.0.1
 */
class FileUploadPartEntity {
    /**
     * Constructs a new <code>FileUploadPartEntity</code>.
     * Begin file upload
     * @alias module:model/FileUploadPartEntity
     */
    constructor() { 
        
        FileUploadPartEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileUploadPartEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileUploadPartEntity} obj Optional instance to populate.
     * @return {module:model/FileUploadPartEntity} The populated <code>FileUploadPartEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileUploadPartEntity();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('ask_about_overwrites')) {
                obj['ask_about_overwrites'] = ApiClient.convertToType(data['ask_about_overwrites'], 'Boolean');
            }
            if (data.hasOwnProperty('available_parts')) {
                obj['available_parts'] = ApiClient.convertToType(data['available_parts'], 'Number');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], Object);
            }
            if (data.hasOwnProperty('http_method')) {
                obj['http_method'] = ApiClient.convertToType(data['http_method'], 'String');
            }
            if (data.hasOwnProperty('next_partsize')) {
                obj['next_partsize'] = ApiClient.convertToType(data['next_partsize'], 'Number');
            }
            if (data.hasOwnProperty('parallel_parts')) {
                obj['parallel_parts'] = ApiClient.convertToType(data['parallel_parts'], 'Boolean');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('part_number')) {
                obj['part_number'] = ApiClient.convertToType(data['part_number'], 'Number');
            }
            if (data.hasOwnProperty('partsize')) {
                obj['partsize'] = ApiClient.convertToType(data['partsize'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('retry_parts')) {
                obj['retry_parts'] = ApiClient.convertToType(data['retry_parts'], 'Boolean');
            }
            if (data.hasOwnProperty('send')) {
                obj['send'] = ApiClient.convertToType(data['send'], Object);
            }
            if (data.hasOwnProperty('upload_uri')) {
                obj['upload_uri'] = ApiClient.convertToType(data['upload_uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileUploadPartEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileUploadPartEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['expires'] && !(typeof data['expires'] === 'string' || data['expires'] instanceof String)) {
            throw new Error("Expected the field `expires` to be a primitive type in the JSON string but got " + data['expires']);
        }
        // ensure the json data is a string
        if (data['http_method'] && !(typeof data['http_method'] === 'string' || data['http_method'] instanceof String)) {
            throw new Error("Expected the field `http_method` to be a primitive type in the JSON string but got " + data['http_method']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // ensure the json data is a string
        if (data['upload_uri'] && !(typeof data['upload_uri'] === 'string' || data['upload_uri'] instanceof String)) {
            throw new Error("Expected the field `upload_uri` to be a primitive type in the JSON string but got " + data['upload_uri']);
        }

        return true;
    }


}



/**
 * Type of upload
 * @member {String} action
 */
FileUploadPartEntity.prototype['action'] = undefined;

/**
 * If `true`, this file exists and you may wish to ask the user for overwrite confirmation
 * @member {Boolean} ask_about_overwrites
 */
FileUploadPartEntity.prototype['ask_about_overwrites'] = undefined;

/**
 * Number of parts in the upload
 * @member {Number} available_parts
 */
FileUploadPartEntity.prototype['available_parts'] = undefined;

/**
 * Date/time of when this Upload part expires and the URL cannot be used any more
 * @member {String} expires
 */
FileUploadPartEntity.prototype['expires'] = undefined;

/**
 * Additional upload headers to provide as part of the upload
 * @member {Object} headers
 */
FileUploadPartEntity.prototype['headers'] = undefined;

/**
 * HTTP Method to use for uploading the part, usually `PUT`
 * @member {String} http_method
 */
FileUploadPartEntity.prototype['http_method'] = undefined;

/**
 * Size in bytes for this part
 * @member {Number} next_partsize
 */
FileUploadPartEntity.prototype['next_partsize'] = undefined;

/**
 * If `true`, multiple parts may be uploaded in parallel.  If `false`, be sure to only upload one part at a time, in order.
 * @member {Boolean} parallel_parts
 */
FileUploadPartEntity.prototype['parallel_parts'] = undefined;

/**
 * Additional HTTP parameters to send with the upload
 * @member {Object} parameters
 */
FileUploadPartEntity.prototype['parameters'] = undefined;

/**
 * Number of this upload part
 * @member {Number} part_number
 */
FileUploadPartEntity.prototype['part_number'] = undefined;

/**
 * Size in bytes for the next upload part
 * @member {Number} partsize
 */
FileUploadPartEntity.prototype['partsize'] = undefined;

/**
 * New file path
 * @member {String} path
 */
FileUploadPartEntity.prototype['path'] = undefined;

/**
 * Reference name for this upload part
 * @member {String} ref
 */
FileUploadPartEntity.prototype['ref'] = undefined;

/**
 * If `true`, parts may be retried. If `false`, a part cannot be retried and the upload should be restarted.
 * @member {Boolean} retry_parts
 */
FileUploadPartEntity.prototype['retry_parts'] = undefined;

/**
 * Content-Type and File to send
 * @member {Object} send
 */
FileUploadPartEntity.prototype['send'] = undefined;

/**
 * URI to upload this part to
 * @member {String} upload_uri
 */
FileUploadPartEntity.prototype['upload_uri'] = undefined;






export default FileUploadPartEntity;

