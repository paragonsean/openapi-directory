/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PatchFormFieldSetsFormFieldsInner model module.
 * @module model/PatchFormFieldSetsFormFieldsInner
 * @version 0.0.1
 */
class PatchFormFieldSetsFormFieldsInner {
    /**
     * Constructs a new <code>PatchFormFieldSetsFormFieldsInner</code>.
     * @alias module:model/PatchFormFieldSetsFormFieldsInner
     */
    constructor() { 
        
        PatchFormFieldSetsFormFieldsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PatchFormFieldSetsFormFieldsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PatchFormFieldSetsFormFieldsInner} obj Optional instance to populate.
     * @return {module:model/PatchFormFieldSetsFormFieldsInner} The populated <code>PatchFormFieldSetsFormFieldsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PatchFormFieldSetsFormFieldsInner();

            if (data.hasOwnProperty('default_option')) {
                obj['default_option'] = ApiClient.convertToType(data['default_option'], 'String');
            }
            if (data.hasOwnProperty('field_type')) {
                obj['field_type'] = ApiClient.convertToType(data['field_type'], 'String');
            }
            if (data.hasOwnProperty('help_text')) {
                obj['help_text'] = ApiClient.convertToType(data['help_text'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('options_for_select')) {
                obj['options_for_select'] = ApiClient.convertToType(data['options_for_select'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PatchFormFieldSetsFormFieldsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PatchFormFieldSetsFormFieldsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['default_option'] && !(typeof data['default_option'] === 'string' || data['default_option'] instanceof String)) {
            throw new Error("Expected the field `default_option` to be a primitive type in the JSON string but got " + data['default_option']);
        }
        // ensure the json data is a string
        if (data['field_type'] && !(typeof data['field_type'] === 'string' || data['field_type'] instanceof String)) {
            throw new Error("Expected the field `field_type` to be a primitive type in the JSON string but got " + data['field_type']);
        }
        // ensure the json data is a string
        if (data['help_text'] && !(typeof data['help_text'] === 'string' || data['help_text'] instanceof String)) {
            throw new Error("Expected the field `help_text` to be a primitive type in the JSON string but got " + data['help_text']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['options_for_select'] && !(typeof data['options_for_select'] === 'string' || data['options_for_select'] instanceof String)) {
            throw new Error("Expected the field `options_for_select` to be a primitive type in the JSON string but got " + data['options_for_select']);
        }

        return true;
    }


}



/**
 * Default option to be preselected in the dropdown or radio.
 * @member {String} default_option
 */
PatchFormFieldSetsFormFieldsInner.prototype['default_option'] = undefined;

/**
 * Type of field: text, text_area, dropdown, or radio
 * @member {String} field_type
 */
PatchFormFieldSetsFormFieldsInner.prototype['field_type'] = undefined;

/**
 * Help text of field
 * @member {String} help_text
 */
PatchFormFieldSetsFormFieldsInner.prototype['help_text'] = undefined;

/**
 * Id of existing Form Field
 * @member {Number} id
 */
PatchFormFieldSetsFormFieldsInner.prototype['id'] = undefined;

/**
 * Label of Field
 * @member {String} label
 */
PatchFormFieldSetsFormFieldsInner.prototype['label'] = undefined;

/**
 * List of options for dropdown or radio
 * @member {String} options_for_select
 */
PatchFormFieldSetsFormFieldsInner.prototype['options_for_select'] = undefined;

/**
 * Is this a required field? (default true)
 * @member {Boolean} required
 */
PatchFormFieldSetsFormFieldsInner.prototype['required'] = undefined;






export default PatchFormFieldSetsFormFieldsInner;

