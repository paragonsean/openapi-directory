/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FormFieldEntity model module.
 * @module model/FormFieldEntity
 * @version 0.0.1
 */
class FormFieldEntity {
    /**
     * Constructs a new <code>FormFieldEntity</code>.
     * @alias module:model/FormFieldEntity
     */
    constructor() { 
        
        FormFieldEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormFieldEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormFieldEntity} obj Optional instance to populate.
     * @return {module:model/FormFieldEntity} The populated <code>FormFieldEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormFieldEntity();

            if (data.hasOwnProperty('default_option')) {
                obj['default_option'] = ApiClient.convertToType(data['default_option'], 'String');
            }
            if (data.hasOwnProperty('field_type')) {
                obj['field_type'] = ApiClient.convertToType(data['field_type'], 'String');
            }
            if (data.hasOwnProperty('form_field_set_id')) {
                obj['form_field_set_id'] = ApiClient.convertToType(data['form_field_set_id'], 'Number');
            }
            if (data.hasOwnProperty('help_text')) {
                obj['help_text'] = ApiClient.convertToType(data['help_text'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('options_for_select')) {
                obj['options_for_select'] = ApiClient.convertToType(data['options_for_select'], ['String']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormFieldEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormFieldEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['default_option'] && !(typeof data['default_option'] === 'string' || data['default_option'] instanceof String)) {
            throw new Error("Expected the field `default_option` to be a primitive type in the JSON string but got " + data['default_option']);
        }
        // ensure the json data is a string
        if (data['field_type'] && !(typeof data['field_type'] === 'string' || data['field_type'] instanceof String)) {
            throw new Error("Expected the field `field_type` to be a primitive type in the JSON string but got " + data['field_type']);
        }
        // ensure the json data is a string
        if (data['help_text'] && !(typeof data['help_text'] === 'string' || data['help_text'] instanceof String)) {
            throw new Error("Expected the field `help_text` to be a primitive type in the JSON string but got " + data['help_text']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['options_for_select'])) {
            throw new Error("Expected the field `options_for_select` to be an array in the JSON data but got " + data['options_for_select']);
        }

        return true;
    }


}



/**
 * Default option for radio and dropdown
 * @member {String} default_option
 */
FormFieldEntity.prototype['default_option'] = undefined;

/**
 * Type of Field
 * @member {module:model/FormFieldEntity.FieldTypeEnum} field_type
 */
FormFieldEntity.prototype['field_type'] = undefined;

/**
 * Form field set id
 * @member {Number} form_field_set_id
 */
FormFieldEntity.prototype['form_field_set_id'] = undefined;

/**
 * Help text to be displayed
 * @member {String} help_text
 */
FormFieldEntity.prototype['help_text'] = undefined;

/**
 * Form field id
 * @member {Number} id
 */
FormFieldEntity.prototype['id'] = undefined;

/**
 * Label to be displayed
 * @member {String} label
 */
FormFieldEntity.prototype['label'] = undefined;

/**
 * Options to display for radio and dropdown
 * @member {Array.<String>} options_for_select
 */
FormFieldEntity.prototype['options_for_select'] = undefined;

/**
 * Is this a required field?
 * @member {Boolean} required
 */
FormFieldEntity.prototype['required'] = undefined;





/**
 * Allowed values for the <code>field_type</code> property.
 * @enum {String}
 * @readonly
 */
FormFieldEntity['FieldTypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "text_area"
     * @const
     */
    "text_area": "text_area",

    /**
     * value: "dropdown"
     * @const
     */
    "dropdown": "dropdown",

    /**
     * value: "radio"
     * @const
     */
    "radio": "radio"
};



export default FormFieldEntity;

