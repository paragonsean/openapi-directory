/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserEntity model module.
 * @module model/UserEntity
 * @version 0.0.1
 */
class UserEntity {
    /**
     * Constructs a new <code>UserEntity</code>.
     * Create User
     * @alias module:model/UserEntity
     */
    constructor() { 
        
        UserEntity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserEntity} obj Optional instance to populate.
     * @return {module:model/UserEntity} The populated <code>UserEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserEntity();

            if (data.hasOwnProperty('active_2fa')) {
                obj['active_2fa'] = ApiClient.convertToType(data['active_2fa'], 'Boolean');
            }
            if (data.hasOwnProperty('admin_group_ids')) {
                obj['admin_group_ids'] = ApiClient.convertToType(data['admin_group_ids'], ['Number']);
            }
            if (data.hasOwnProperty('allowed_ips')) {
                obj['allowed_ips'] = ApiClient.convertToType(data['allowed_ips'], 'String');
            }
            if (data.hasOwnProperty('api_keys_count')) {
                obj['api_keys_count'] = ApiClient.convertToType(data['api_keys_count'], 'Number');
            }
            if (data.hasOwnProperty('attachments_permission')) {
                obj['attachments_permission'] = ApiClient.convertToType(data['attachments_permission'], 'Boolean');
            }
            if (data.hasOwnProperty('authenticate_until')) {
                obj['authenticate_until'] = ApiClient.convertToType(data['authenticate_until'], 'Date');
            }
            if (data.hasOwnProperty('authentication_method')) {
                obj['authentication_method'] = ApiClient.convertToType(data['authentication_method'], 'String');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('billing_permission')) {
                obj['billing_permission'] = ApiClient.convertToType(data['billing_permission'], 'Boolean');
            }
            if (data.hasOwnProperty('bypass_inactive_disable')) {
                obj['bypass_inactive_disable'] = ApiClient.convertToType(data['bypass_inactive_disable'], 'Boolean');
            }
            if (data.hasOwnProperty('bypass_site_allowed_ips')) {
                obj['bypass_site_allowed_ips'] = ApiClient.convertToType(data['bypass_site_allowed_ips'], 'Boolean');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('dav_permission')) {
                obj['dav_permission'] = ApiClient.convertToType(data['dav_permission'], 'Boolean');
            }
            if (data.hasOwnProperty('days_remaining_until_password_expire')) {
                obj['days_remaining_until_password_expire'] = ApiClient.convertToType(data['days_remaining_until_password_expire'], 'Number');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('externally_managed')) {
                obj['externally_managed'] = ApiClient.convertToType(data['externally_managed'], 'Boolean');
            }
            if (data.hasOwnProperty('first_login_at')) {
                obj['first_login_at'] = ApiClient.convertToType(data['first_login_at'], 'Date');
            }
            if (data.hasOwnProperty('ftp_permission')) {
                obj['ftp_permission'] = ApiClient.convertToType(data['ftp_permission'], 'Boolean');
            }
            if (data.hasOwnProperty('group_ids')) {
                obj['group_ids'] = ApiClient.convertToType(data['group_ids'], 'String');
            }
            if (data.hasOwnProperty('header_text')) {
                obj['header_text'] = ApiClient.convertToType(data['header_text'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('last_active_at')) {
                obj['last_active_at'] = ApiClient.convertToType(data['last_active_at'], 'Date');
            }
            if (data.hasOwnProperty('last_api_use_at')) {
                obj['last_api_use_at'] = ApiClient.convertToType(data['last_api_use_at'], 'Date');
            }
            if (data.hasOwnProperty('last_dav_login_at')) {
                obj['last_dav_login_at'] = ApiClient.convertToType(data['last_dav_login_at'], 'Date');
            }
            if (data.hasOwnProperty('last_desktop_login_at')) {
                obj['last_desktop_login_at'] = ApiClient.convertToType(data['last_desktop_login_at'], 'Date');
            }
            if (data.hasOwnProperty('last_ftp_login_at')) {
                obj['last_ftp_login_at'] = ApiClient.convertToType(data['last_ftp_login_at'], 'Date');
            }
            if (data.hasOwnProperty('last_login_at')) {
                obj['last_login_at'] = ApiClient.convertToType(data['last_login_at'], 'Date');
            }
            if (data.hasOwnProperty('last_protocol_cipher')) {
                obj['last_protocol_cipher'] = ApiClient.convertToType(data['last_protocol_cipher'], 'String');
            }
            if (data.hasOwnProperty('last_restapi_login_at')) {
                obj['last_restapi_login_at'] = ApiClient.convertToType(data['last_restapi_login_at'], 'Date');
            }
            if (data.hasOwnProperty('last_sftp_login_at')) {
                obj['last_sftp_login_at'] = ApiClient.convertToType(data['last_sftp_login_at'], 'Date');
            }
            if (data.hasOwnProperty('last_web_login_at')) {
                obj['last_web_login_at'] = ApiClient.convertToType(data['last_web_login_at'], 'Date');
            }
            if (data.hasOwnProperty('lockout_expires')) {
                obj['lockout_expires'] = ApiClient.convertToType(data['lockout_expires'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('notification_daily_send_time')) {
                obj['notification_daily_send_time'] = ApiClient.convertToType(data['notification_daily_send_time'], 'Number');
            }
            if (data.hasOwnProperty('office_integration_enabled')) {
                obj['office_integration_enabled'] = ApiClient.convertToType(data['office_integration_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('password_expire_at')) {
                obj['password_expire_at'] = ApiClient.convertToType(data['password_expire_at'], 'Date');
            }
            if (data.hasOwnProperty('password_expired')) {
                obj['password_expired'] = ApiClient.convertToType(data['password_expired'], 'Boolean');
            }
            if (data.hasOwnProperty('password_set_at')) {
                obj['password_set_at'] = ApiClient.convertToType(data['password_set_at'], 'Date');
            }
            if (data.hasOwnProperty('password_validity_days')) {
                obj['password_validity_days'] = ApiClient.convertToType(data['password_validity_days'], 'Number');
            }
            if (data.hasOwnProperty('public_keys_count')) {
                obj['public_keys_count'] = ApiClient.convertToType(data['public_keys_count'], 'Number');
            }
            if (data.hasOwnProperty('receive_admin_alerts')) {
                obj['receive_admin_alerts'] = ApiClient.convertToType(data['receive_admin_alerts'], 'Boolean');
            }
            if (data.hasOwnProperty('require_2fa')) {
                obj['require_2fa'] = ApiClient.convertToType(data['require_2fa'], 'String');
            }
            if (data.hasOwnProperty('require_password_change')) {
                obj['require_password_change'] = ApiClient.convertToType(data['require_password_change'], 'Boolean');
            }
            if (data.hasOwnProperty('restapi_permission')) {
                obj['restapi_permission'] = ApiClient.convertToType(data['restapi_permission'], 'Boolean');
            }
            if (data.hasOwnProperty('self_managed')) {
                obj['self_managed'] = ApiClient.convertToType(data['self_managed'], 'Boolean');
            }
            if (data.hasOwnProperty('sftp_permission')) {
                obj['sftp_permission'] = ApiClient.convertToType(data['sftp_permission'], 'Boolean');
            }
            if (data.hasOwnProperty('site_admin')) {
                obj['site_admin'] = ApiClient.convertToType(data['site_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('skip_welcome_screen')) {
                obj['skip_welcome_screen'] = ApiClient.convertToType(data['skip_welcome_screen'], 'Boolean');
            }
            if (data.hasOwnProperty('ssl_required')) {
                obj['ssl_required'] = ApiClient.convertToType(data['ssl_required'], 'String');
            }
            if (data.hasOwnProperty('sso_strategy_id')) {
                obj['sso_strategy_id'] = ApiClient.convertToType(data['sso_strategy_id'], 'Number');
            }
            if (data.hasOwnProperty('subscribe_to_newsletter')) {
                obj['subscribe_to_newsletter'] = ApiClient.convertToType(data['subscribe_to_newsletter'], 'Boolean');
            }
            if (data.hasOwnProperty('time_zone')) {
                obj['time_zone'] = ApiClient.convertToType(data['time_zone'], 'String');
            }
            if (data.hasOwnProperty('type_of_2fa')) {
                obj['type_of_2fa'] = ApiClient.convertToType(data['type_of_2fa'], 'String');
            }
            if (data.hasOwnProperty('user_root')) {
                obj['user_root'] = ApiClient.convertToType(data['user_root'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserEntity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['admin_group_ids'])) {
            throw new Error("Expected the field `admin_group_ids` to be an array in the JSON data but got " + data['admin_group_ids']);
        }
        // ensure the json data is a string
        if (data['allowed_ips'] && !(typeof data['allowed_ips'] === 'string' || data['allowed_ips'] instanceof String)) {
            throw new Error("Expected the field `allowed_ips` to be a primitive type in the JSON string but got " + data['allowed_ips']);
        }
        // ensure the json data is a string
        if (data['authentication_method'] && !(typeof data['authentication_method'] === 'string' || data['authentication_method'] instanceof String)) {
            throw new Error("Expected the field `authentication_method` to be a primitive type in the JSON string but got " + data['authentication_method']);
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['group_ids'] && !(typeof data['group_ids'] === 'string' || data['group_ids'] instanceof String)) {
            throw new Error("Expected the field `group_ids` to be a primitive type in the JSON string but got " + data['group_ids']);
        }
        // ensure the json data is a string
        if (data['header_text'] && !(typeof data['header_text'] === 'string' || data['header_text'] instanceof String)) {
            throw new Error("Expected the field `header_text` to be a primitive type in the JSON string but got " + data['header_text']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['last_protocol_cipher'] && !(typeof data['last_protocol_cipher'] === 'string' || data['last_protocol_cipher'] instanceof String)) {
            throw new Error("Expected the field `last_protocol_cipher` to be a primitive type in the JSON string but got " + data['last_protocol_cipher']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['require_2fa'] && !(typeof data['require_2fa'] === 'string' || data['require_2fa'] instanceof String)) {
            throw new Error("Expected the field `require_2fa` to be a primitive type in the JSON string but got " + data['require_2fa']);
        }
        // ensure the json data is a string
        if (data['ssl_required'] && !(typeof data['ssl_required'] === 'string' || data['ssl_required'] instanceof String)) {
            throw new Error("Expected the field `ssl_required` to be a primitive type in the JSON string but got " + data['ssl_required']);
        }
        // ensure the json data is a string
        if (data['time_zone'] && !(typeof data['time_zone'] === 'string' || data['time_zone'] instanceof String)) {
            throw new Error("Expected the field `time_zone` to be a primitive type in the JSON string but got " + data['time_zone']);
        }
        // ensure the json data is a string
        if (data['type_of_2fa'] && !(typeof data['type_of_2fa'] === 'string' || data['type_of_2fa'] instanceof String)) {
            throw new Error("Expected the field `type_of_2fa` to be a primitive type in the JSON string but got " + data['type_of_2fa']);
        }
        // ensure the json data is a string
        if (data['user_root'] && !(typeof data['user_root'] === 'string' || data['user_root'] instanceof String)) {
            throw new Error("Expected the field `user_root` to be a primitive type in the JSON string but got " + data['user_root']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Is 2fa active for the user?
 * @member {Boolean} active_2fa
 */
UserEntity.prototype['active_2fa'] = undefined;

/**
 * List of group IDs of which this user is an administrator
 * @member {Array.<Number>} admin_group_ids
 */
UserEntity.prototype['admin_group_ids'] = undefined;

/**
 * A list of allowed IPs if applicable.  Newline delimited
 * @member {String} allowed_ips
 */
UserEntity.prototype['allowed_ips'] = undefined;

/**
 * Number of api keys associated with this user
 * @member {Number} api_keys_count
 */
UserEntity.prototype['api_keys_count'] = undefined;

/**
 * DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.
 * @member {Boolean} attachments_permission
 */
UserEntity.prototype['attachments_permission'] = undefined;

/**
 * Scheduled Date/Time at which user will be deactivated
 * @member {Date} authenticate_until
 */
UserEntity.prototype['authenticate_until'] = undefined;

/**
 * How is this user authenticated?
 * @member {module:model/UserEntity.AuthenticationMethodEnum} authentication_method
 */
UserEntity.prototype['authentication_method'] = undefined;

/**
 * URL holding the user's avatar
 * @member {String} avatar_url
 */
UserEntity.prototype['avatar_url'] = undefined;

/**
 * Allow this user to perform operations on the account, payments, and invoices?
 * @member {Boolean} billing_permission
 */
UserEntity.prototype['billing_permission'] = undefined;

/**
 * Exempt this user from being disabled based on inactivity?
 * @member {Boolean} bypass_inactive_disable
 */
UserEntity.prototype['bypass_inactive_disable'] = undefined;

/**
 * Allow this user to skip site-wide IP blacklists?
 * @member {Boolean} bypass_site_allowed_ips
 */
UserEntity.prototype['bypass_site_allowed_ips'] = undefined;

/**
 * User's company
 * @member {String} company
 */
UserEntity.prototype['company'] = undefined;

/**
 * When this user was created
 * @member {Date} created_at
 */
UserEntity.prototype['created_at'] = undefined;

/**
 * Can the user connect with WebDAV?
 * @member {Boolean} dav_permission
 */
UserEntity.prototype['dav_permission'] = undefined;

/**
 * Number of days remaining until password expires
 * @member {Number} days_remaining_until_password_expire
 */
UserEntity.prototype['days_remaining_until_password_expire'] = undefined;

/**
 * Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.
 * @member {Boolean} disabled
 */
UserEntity.prototype['disabled'] = undefined;

/**
 * User email address
 * @member {String} email
 */
UserEntity.prototype['email'] = undefined;

/**
 * Is this user managed by a SsoStrategy?
 * @member {Boolean} externally_managed
 */
UserEntity.prototype['externally_managed'] = undefined;

/**
 * User's first login time
 * @member {Date} first_login_at
 */
UserEntity.prototype['first_login_at'] = undefined;

/**
 * Can the user access with FTP/FTPS?
 * @member {Boolean} ftp_permission
 */
UserEntity.prototype['ftp_permission'] = undefined;

/**
 * Comma-separated list of group IDs of which this user is a member
 * @member {String} group_ids
 */
UserEntity.prototype['group_ids'] = undefined;

/**
 * Text to display to the user in the header of the UI
 * @member {String} header_text
 */
UserEntity.prototype['header_text'] = undefined;

/**
 * User ID
 * @member {Number} id
 */
UserEntity.prototype['id'] = undefined;

/**
 * Preferred language
 * @member {String} language
 */
UserEntity.prototype['language'] = undefined;

/**
 * User's most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation
 * @member {Date} last_active_at
 */
UserEntity.prototype['last_active_at'] = undefined;

/**
 * User's most recent API use time
 * @member {Date} last_api_use_at
 */
UserEntity.prototype['last_api_use_at'] = undefined;

/**
 * User's most recent login time via WebDAV
 * @member {Date} last_dav_login_at
 */
UserEntity.prototype['last_dav_login_at'] = undefined;

/**
 * User's most recent login time via Desktop app
 * @member {Date} last_desktop_login_at
 */
UserEntity.prototype['last_desktop_login_at'] = undefined;

/**
 * User's most recent login time via FTP
 * @member {Date} last_ftp_login_at
 */
UserEntity.prototype['last_ftp_login_at'] = undefined;

/**
 * User's most recent login time via any protocol
 * @member {Date} last_login_at
 */
UserEntity.prototype['last_login_at'] = undefined;

/**
 * The most recent protocol and cipher used
 * @member {String} last_protocol_cipher
 */
UserEntity.prototype['last_protocol_cipher'] = undefined;

/**
 * User's most recent login time via Rest API
 * @member {Date} last_restapi_login_at
 */
UserEntity.prototype['last_restapi_login_at'] = undefined;

/**
 * User's most recent login time via SFTP
 * @member {Date} last_sftp_login_at
 */
UserEntity.prototype['last_sftp_login_at'] = undefined;

/**
 * User's most recent login time via web
 * @member {Date} last_web_login_at
 */
UserEntity.prototype['last_web_login_at'] = undefined;

/**
 * Time in the future that the user will no longer be locked out if applicable
 * @member {Date} lockout_expires
 */
UserEntity.prototype['lockout_expires'] = undefined;

/**
 * User's full name
 * @member {String} name
 */
UserEntity.prototype['name'] = undefined;

/**
 * Any internal notes on the user
 * @member {String} notes
 */
UserEntity.prototype['notes'] = undefined;

/**
 * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
 * @member {Number} notification_daily_send_time
 */
UserEntity.prototype['notification_daily_send_time'] = undefined;

/**
 * Enable integration with Office for the web?
 * @member {Boolean} office_integration_enabled
 */
UserEntity.prototype['office_integration_enabled'] = undefined;

/**
 * Password expiration datetime
 * @member {Date} password_expire_at
 */
UserEntity.prototype['password_expire_at'] = undefined;

/**
 * Is user's password expired?
 * @member {Boolean} password_expired
 */
UserEntity.prototype['password_expired'] = undefined;

/**
 * Last time the user's password was set
 * @member {Date} password_set_at
 */
UserEntity.prototype['password_set_at'] = undefined;

/**
 * Number of days to allow user to use the same password
 * @member {Number} password_validity_days
 */
UserEntity.prototype['password_validity_days'] = undefined;

/**
 * Number of public keys associated with this user
 * @member {Number} public_keys_count
 */
UserEntity.prototype['public_keys_count'] = undefined;

/**
 * Should the user receive admin alerts such a certificate expiration notifications and overages?
 * @member {Boolean} receive_admin_alerts
 */
UserEntity.prototype['receive_admin_alerts'] = undefined;

/**
 * 2FA required setting
 * @member {module:model/UserEntity.Require2faEnum} require_2fa
 */
UserEntity.prototype['require_2fa'] = undefined;

/**
 * Is a password change required upon next user login?
 * @member {Boolean} require_password_change
 */
UserEntity.prototype['require_password_change'] = undefined;

/**
 * Can this user access the REST API?
 * @member {Boolean} restapi_permission
 */
UserEntity.prototype['restapi_permission'] = undefined;

/**
 * Does this user manage it's own credentials or is it a shared/bot user?
 * @member {Boolean} self_managed
 */
UserEntity.prototype['self_managed'] = undefined;

/**
 * Can the user access with SFTP?
 * @member {Boolean} sftp_permission
 */
UserEntity.prototype['sftp_permission'] = undefined;

/**
 * Is the user an administrator for this site?
 * @member {Boolean} site_admin
 */
UserEntity.prototype['site_admin'] = undefined;

/**
 * Skip Welcome page in the UI?
 * @member {Boolean} skip_welcome_screen
 */
UserEntity.prototype['skip_welcome_screen'] = undefined;

/**
 * SSL required setting
 * @member {module:model/UserEntity.SslRequiredEnum} ssl_required
 */
UserEntity.prototype['ssl_required'] = undefined;

/**
 * SSO (Single Sign On) strategy ID for the user, if applicable.
 * @member {Number} sso_strategy_id
 */
UserEntity.prototype['sso_strategy_id'] = undefined;

/**
 * Is the user subscribed to the newsletter?
 * @member {Boolean} subscribe_to_newsletter
 */
UserEntity.prototype['subscribe_to_newsletter'] = undefined;

/**
 * User time zone
 * @member {String} time_zone
 */
UserEntity.prototype['time_zone'] = undefined;

/**
 * Type(s) of 2FA methods in use.  Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values sorted alphabetically and joined by an underscore.
 * @member {String} type_of_2fa
 */
UserEntity.prototype['type_of_2fa'] = undefined;

/**
 * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.
 * @member {String} user_root
 */
UserEntity.prototype['user_root'] = undefined;

/**
 * User's username
 * @member {String} username
 */
UserEntity.prototype['username'] = undefined;





/**
 * Allowed values for the <code>authentication_method</code> property.
 * @enum {String}
 * @readonly
 */
UserEntity['AuthenticationMethodEnum'] = {

    /**
     * value: "password"
     * @const
     */
    "password": "password",

    /**
     * value: "unused_former_ldap"
     * @const
     */
    "unused_former_ldap": "unused_former_ldap",

    /**
     * value: "sso"
     * @const
     */
    "sso": "sso",

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "email_signup"
     * @const
     */
    "email_signup": "email_signup",

    /**
     * value: "password_with_imported_hash"
     * @const
     */
    "password_with_imported_hash": "password_with_imported_hash"
};


/**
 * Allowed values for the <code>require_2fa</code> property.
 * @enum {String}
 * @readonly
 */
UserEntity['Require2faEnum'] = {

    /**
     * value: "use_system_setting"
     * @const
     */
    "use_system_setting": "use_system_setting",

    /**
     * value: "always_require"
     * @const
     */
    "always_require": "always_require",

    /**
     * value: "never_require"
     * @const
     */
    "never_require": "never_require"
};


/**
 * Allowed values for the <code>ssl_required</code> property.
 * @enum {String}
 * @readonly
 */
UserEntity['SslRequiredEnum'] = {

    /**
     * value: "use_system_setting"
     * @const
     */
    "use_system_setting": "use_system_setting",

    /**
     * value: "always_require"
     * @const
     */
    "always_require": "always_require",

    /**
     * value: "never_require"
     * @const
     */
    "never_require": "never_require"
};



export default UserEntity;

