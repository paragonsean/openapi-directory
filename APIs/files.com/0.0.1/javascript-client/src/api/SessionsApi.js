/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SessionEntity from '../model/SessionEntity';

/**
* Sessions service.
* @module api/SessionsApi
* @version 0.0.1
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSessions operation.
     * @callback module:api/SessionsApi~deleteSessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user session (log out)
     * Delete user session (log out)
     * @param {module:api/SessionsApi~deleteSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSessions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSessions operation.
     * @callback module:api/SessionsApi~postSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user session (log in)
     * Create user session (log in)
     * @param {Object} opts Optional parameters
     * @param {String} [otp] If this user has a 2FA device, provide its OTP or code here.
     * @param {String} [partialSessionId] Identifier for a partially-completed login
     * @param {String} [password] Password for sign in
     * @param {String} [username] Username to sign in as
     * @param {module:api/SessionsApi~postSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionEntity}
     */
    postSessions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'otp': opts['otp'],
        'partial_session_id': opts['partialSessionId'],
        'password': opts['password'],
        'username': opts['username']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SessionEntity;
      return this.apiClient.callApi(
        '/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
