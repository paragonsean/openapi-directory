/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PermissionEntity from '../model/PermissionEntity';

/**
* Permissions service.
* @module api/PermissionsApi
* @version 0.0.1
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deletePermissionsId operation.
     * @callback module:api/PermissionsApi~deletePermissionsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Permission
     * Delete Permission
     * @param {Number} id Permission ID.
     * @param {module:api/PermissionsApi~deletePermissionsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePermissionsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/permissions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissions operation.
     * @callback module:api/PermissionsApi~getPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Permissions
     * List Permissions
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[group_id]=desc`). Valid fields are `group_id`, `path`, `user_id` or `permission`.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
     * @param {Object.<String, Object>} [filterPrefix] If set, return records where the specified field is prefixed by the supplied value. Valid fields are `path`.
     * @param {String} [path] DEPRECATED: Permission path.  If provided, will scope permissions to this path. Use `filter[path]` instead.
     * @param {String} [groupId] DEPRECATED: Group ID.  If provided, will scope permissions to this group. Use `filter[group_id]` instead.`
     * @param {String} [userId] DEPRECATED: User ID.  If provided, will scope permissions to this user. Use `filter[user_id]` instead.`
     * @param {Boolean} [includeGroups] If searching by user or group, also include user's permissions that are inherited from its groups?
     * @param {module:api/PermissionsApi~getPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionEntity>}
     */
    getPermissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
        'filter_prefix': opts['filterPrefix'],
        'path': opts['path'],
        'group_id': opts['groupId'],
        'user_id': opts['userId'],
        'include_groups': opts['includeGroups']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PermissionEntity];
      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPermissions operation.
     * @callback module:api/PermissionsApi~postPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Permission
     * Create Permission
     * @param {Object} opts Optional parameters
     * @param {Number} [groupId] Group ID
     * @param {String} [path] Folder path
     * @param {String} [permission]  Permission type.  Can be `admin`, `full`, `readonly`, `writeonly`, `list`, or `history`
     * @param {Boolean} [recursive] Apply to subfolders recursively?
     * @param {Number} [userId] User ID.  Provide `username` or `user_id`
     * @param {String} [username] User username.  Provide `username` or `user_id`
     * @param {module:api/PermissionsApi~postPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionEntity}
     */
    postPermissions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'group_id': opts['groupId'],
        'path': opts['path'],
        'permission': opts['permission'],
        'recursive': opts['recursive'],
        'user_id': opts['userId'],
        'username': opts['username']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PermissionEntity;
      return this.apiClient.callApi(
        '/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
