/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BundleEntity from '../model/BundleEntity';

/**
* Bundles service.
* @module api/BundlesApi
* @version 0.0.1
*/
export default class BundlesApi {

    /**
    * Constructs a new BundlesApi. 
    * @alias module:api/BundlesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteBundlesId operation.
     * @callback module:api/BundlesApi~deleteBundlesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Bundle
     * Delete Bundle
     * @param {Number} id Bundle ID.
     * @param {module:api/BundlesApi~deleteBundlesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBundlesId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBundlesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBundles operation.
     * @callback module:api/BundlesApi~getBundlesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BundleEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Bundles
     * List Bundles
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[created_at]=desc`). Valid fields are `created_at` and `code`.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `created_at`.
     * @param {Object.<String, Object>} [filterGt] If set, return records where the specified field is greater than the supplied value. Valid fields are `created_at`.
     * @param {Object.<String, Object>} [filterGteq] If set, return records where the specified field is greater than or equal the supplied value. Valid fields are `created_at`.
     * @param {Object.<String, Object>} [filterLt] If set, return records where the specified field is less than the supplied value. Valid fields are `created_at`.
     * @param {Object.<String, Object>} [filterLteq] If set, return records where the specified field is less than or equal the supplied value. Valid fields are `created_at`.
     * @param {module:api/BundlesApi~getBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BundleEntity>}
     */
    getBundles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
        'filter_gt': opts['filterGt'],
        'filter_gteq': opts['filterGteq'],
        'filter_lt': opts['filterLt'],
        'filter_lteq': opts['filterLteq']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BundleEntity];
      return this.apiClient.callApi(
        '/bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBundlesId operation.
     * @callback module:api/BundlesApi~getBundlesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Bundle
     * Show Bundle
     * @param {Number} id Bundle ID.
     * @param {module:api/BundlesApi~getBundlesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleEntity}
     */
    getBundlesId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBundlesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BundleEntity;
      return this.apiClient.callApi(
        '/bundles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBundlesId operation.
     * @callback module:api/BundlesApi~patchBundlesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Bundle
     * Update Bundle
     * @param {Number} id Bundle ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [clickwrapId] ID of the clickwrap to use with this bundle.
     * @param {String} [code] Bundle code.  This code forms the end part of the Public URL.
     * @param {String} [description] Public description
     * @param {Boolean} [dontSeparateSubmissionsByFolder] Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.
     * @param {Date} [expiresAt] Bundle expiration date/time
     * @param {Number} [formFieldSetId] Id of Form Field Set to use with this bundle
     * @param {Number} [inboxId] ID of the associated inbox, if available.
     * @param {Number} [maxUses] Maximum number of times bundle can be accessed
     * @param {String} [note] Bundle internal note
     * @param {String} [password] Password for this bundle.
     * @param {String} [pathTemplate] Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.
     * @param {Array.<String>} [paths] A list of paths to include in this bundle.
     * @param {module:model/String} [permissions] Permissions that apply to Folders in this Share Link.
     * @param {Boolean} [previewOnly] Restrict users to previewing files only?
     * @param {Boolean} [requireRegistration] Show a registration page that captures the downloader's name and email address?
     * @param {Boolean} [requireShareRecipient] Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
     * @param {Boolean} [sendEmailReceiptToUploader] Send delivery receipt to the uploader. Note: For writable share only
     * @param {Boolean} [skipCompany] BundleRegistrations can be saved without providing company?
     * @param {Boolean} [skipEmail] BundleRegistrations can be saved without providing email?
     * @param {Boolean} [skipName] BundleRegistrations can be saved without providing name?
     * @param {Boolean} [watermarkAttachmentDelete] If true, will delete the file stored in watermark_attachment
     * @param {File} [watermarkAttachmentFile] Preview watermark image applied to all bundle items.
     * @param {module:api/BundlesApi~patchBundlesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleEntity}
     */
    patchBundlesId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchBundlesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'clickwrap_id': opts['clickwrapId'],
        'code': opts['code'],
        'description': opts['description'],
        'dont_separate_submissions_by_folder': opts['dontSeparateSubmissionsByFolder'],
        'expires_at': opts['expiresAt'],
        'form_field_set_id': opts['formFieldSetId'],
        'inbox_id': opts['inboxId'],
        'max_uses': opts['maxUses'],
        'note': opts['note'],
        'password': opts['password'],
        'path_template': opts['pathTemplate'],
        'paths': this.apiClient.buildCollectionParam(opts['paths'], 'csv'),
        'permissions': opts['permissions'],
        'preview_only': opts['previewOnly'],
        'require_registration': opts['requireRegistration'],
        'require_share_recipient': opts['requireShareRecipient'],
        'send_email_receipt_to_uploader': opts['sendEmailReceiptToUploader'],
        'skip_company': opts['skipCompany'],
        'skip_email': opts['skipEmail'],
        'skip_name': opts['skipName'],
        'watermark_attachment_delete': opts['watermarkAttachmentDelete'],
        'watermark_attachment_file': opts['watermarkAttachmentFile']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BundleEntity;
      return this.apiClient.callApi(
        '/bundles/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBundles operation.
     * @callback module:api/BundlesApi~postBundlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundleEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Bundle
     * Create Bundle
     * @param {Array.<String>} paths A list of paths to include in this bundle.
     * @param {Object} opts Optional parameters
     * @param {Number} [clickwrapId] ID of the clickwrap to use with this bundle.
     * @param {String} [code] Bundle code.  This code forms the end part of the Public URL.
     * @param {String} [description] Public description
     * @param {Boolean} [dontSeparateSubmissionsByFolder] Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.
     * @param {Date} [expiresAt] Bundle expiration date/time
     * @param {Number} [formFieldSetId] Id of Form Field Set to use with this bundle
     * @param {Number} [inboxId] ID of the associated inbox, if available.
     * @param {Number} [maxUses] Maximum number of times bundle can be accessed
     * @param {String} [note] Bundle internal note
     * @param {String} [password] Password for this bundle.
     * @param {String} [pathTemplate] Template for creating submission subfolders. Can use the uploader's name, email address, ip, company, and any custom form data.
     * @param {module:model/String} [permissions] Permissions that apply to Folders in this Share Link.
     * @param {Boolean} [previewOnly] Restrict users to previewing files only?
     * @param {Boolean} [requireRegistration] Show a registration page that captures the downloader's name and email address?
     * @param {Boolean} [requireShareRecipient] Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
     * @param {Boolean} [sendEmailReceiptToUploader] Send delivery receipt to the uploader. Note: For writable share only
     * @param {Boolean} [skipCompany] BundleRegistrations can be saved without providing company?
     * @param {Boolean} [skipEmail] BundleRegistrations can be saved without providing email?
     * @param {Boolean} [skipName] BundleRegistrations can be saved without providing name?
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {File} [watermarkAttachmentFile] Preview watermark image applied to all bundle items.
     * @param {module:api/BundlesApi~postBundlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundleEntity}
     */
    postBundles(paths, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'paths' is set
      if (paths === undefined || paths === null) {
        throw new Error("Missing the required parameter 'paths' when calling postBundles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'clickwrap_id': opts['clickwrapId'],
        'code': opts['code'],
        'description': opts['description'],
        'dont_separate_submissions_by_folder': opts['dontSeparateSubmissionsByFolder'],
        'expires_at': opts['expiresAt'],
        'form_field_set_id': opts['formFieldSetId'],
        'inbox_id': opts['inboxId'],
        'max_uses': opts['maxUses'],
        'note': opts['note'],
        'password': opts['password'],
        'path_template': opts['pathTemplate'],
        'paths': this.apiClient.buildCollectionParam(paths, 'csv'),
        'permissions': opts['permissions'],
        'preview_only': opts['previewOnly'],
        'require_registration': opts['requireRegistration'],
        'require_share_recipient': opts['requireShareRecipient'],
        'send_email_receipt_to_uploader': opts['sendEmailReceiptToUploader'],
        'skip_company': opts['skipCompany'],
        'skip_email': opts['skipEmail'],
        'skip_name': opts['skipName'],
        'user_id': opts['userId'],
        'watermark_attachment_file': opts['watermarkAttachmentFile']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BundleEntity;
      return this.apiClient.callApi(
        '/bundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBundlesIdShare operation.
     * @callback module:api/BundlesApi~postBundlesIdShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send email(s) with a link to bundle
     * Send email(s) with a link to bundle
     * @param {Number} id Bundle ID.
     * @param {Object} opts Optional parameters
     * @param {String} [note] Note to include in email.
     * @param {Array.<Object>} [recipients] A list of recipients to share this bundle with. Required unless `to` is used.
     * @param {Array.<String>} [to] A list of email addresses to share this bundle with. Required unless `recipients` is used.
     * @param {module:api/BundlesApi~postBundlesIdShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postBundlesIdShare(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postBundlesIdShare");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'note': opts['note'],
        'recipients': this.apiClient.buildCollectionParam(opts['recipients'], 'csv'),
        'to': this.apiClient.buildCollectionParam(opts['to'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bundles/{id}/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
