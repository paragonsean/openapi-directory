/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutomationEntity from '../model/AutomationEntity';

/**
* Automations service.
* @module api/AutomationsApi
* @version 0.0.1
*/
export default class AutomationsApi {

    /**
    * Constructs a new AutomationsApi. 
    * @alias module:api/AutomationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAutomationsId operation.
     * @callback module:api/AutomationsApi~deleteAutomationsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Automation
     * Delete Automation
     * @param {Number} id Automation ID.
     * @param {module:api/AutomationsApi~deleteAutomationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAutomationsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAutomationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/automations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomations operation.
     * @callback module:api/AutomationsApi~getAutomationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AutomationEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Automations
     * List Automations
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[automation]=desc`). Valid fields are `automation`, `disabled`, `last_modified_at` or `name`.
     * @param {String} [automation] If set, return records where the specified field is equal to the supplied value.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `disabled`, `last_modified_at` or `automation`. Valid field combinations are `[ automation, disabled ]` and `[ disabled, automation ]`.
     * @param {Object.<String, Object>} [filterGt] If set, return records where the specified field is greater than the supplied value. Valid fields are `last_modified_at`.
     * @param {Object.<String, Object>} [filterGteq] If set, return records where the specified field is greater than or equal the supplied value. Valid fields are `last_modified_at`.
     * @param {Object.<String, Object>} [filterLt] If set, return records where the specified field is less than the supplied value. Valid fields are `last_modified_at`.
     * @param {Object.<String, Object>} [filterLteq] If set, return records where the specified field is less than or equal the supplied value. Valid fields are `last_modified_at`.
     * @param {Boolean} [withDeleted] Set to true to include deleted automations in the results.
     * @param {module:api/AutomationsApi~getAutomationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AutomationEntity>}
     */
    getAutomations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'automation': opts['automation'],
        'filter': opts['filter'],
        'filter_gt': opts['filterGt'],
        'filter_gteq': opts['filterGteq'],
        'filter_lt': opts['filterLt'],
        'filter_lteq': opts['filterLteq'],
        'with_deleted': opts['withDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AutomationEntity];
      return this.apiClient.callApi(
        '/automations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAutomationsId operation.
     * @callback module:api/AutomationsApi~getAutomationsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Automation
     * Show Automation
     * @param {Number} id Automation ID.
     * @param {module:api/AutomationsApi~getAutomationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationEntity}
     */
    getAutomationsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAutomationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutomationEntity;
      return this.apiClient.callApi(
        '/automations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchAutomationsId operation.
     * @callback module:api/AutomationsApi~patchAutomationsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Automation
     * Update Automation
     * @param {Number} id Automation ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [automation] Automation type
     * @param {String} [description] Description for the this Automation.
     * @param {String} [destination] DEPRECATED: Destination Path. Use `destinations` instead.
     * @param {String} [destinationReplaceFrom] If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
     * @param {String} [destinationReplaceTo] If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.
     * @param {Array.<String>} [destinations] A list of String destination paths or Hash of folder_path and optional file_path.
     * @param {Boolean} [disabled] If true, this automation will not run.
     * @param {String} [groupIds] A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.
     * @param {String} [interval] How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
     * @param {String} [name] Name for this automation.
     * @param {String} [path] Path on which this Automation runs.  Supports globs.
     * @param {Number} [recurringDay] If trigger type is `daily`, this specifies a day number to run in one of the supported intervals: `week`, `month`, `quarter`, `year`.
     * @param {Object.<String, Object>} [schedule] Custom schedule for running this automation.
     * @param {String} [source] Source Path
     * @param {String} [syncIds] A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited.
     * @param {module:model/String} [trigger] How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
     * @param {Array.<String>} [triggerActions] If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy
     * @param {String} [userIds] A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.
     * @param {Object.<String, Object>} [value] A Hash of attributes specific to the automation type.
     * @param {module:api/AutomationsApi~patchAutomationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationEntity}
     */
    patchAutomationsId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchAutomationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'automation': opts['automation'],
        'description': opts['description'],
        'destination': opts['destination'],
        'destination_replace_from': opts['destinationReplaceFrom'],
        'destination_replace_to': opts['destinationReplaceTo'],
        'destinations': this.apiClient.buildCollectionParam(opts['destinations'], 'csv'),
        'disabled': opts['disabled'],
        'group_ids': opts['groupIds'],
        'interval': opts['interval'],
        'name': opts['name'],
        'path': opts['path'],
        'recurring_day': opts['recurringDay'],
        'schedule': opts['schedule'],
        'source': opts['source'],
        'sync_ids': opts['syncIds'],
        'trigger': opts['trigger'],
        'trigger_actions': this.apiClient.buildCollectionParam(opts['triggerActions'], 'csv'),
        'user_ids': opts['userIds'],
        'value': opts['value']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AutomationEntity;
      return this.apiClient.callApi(
        '/automations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAutomations operation.
     * @callback module:api/AutomationsApi~postAutomationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomationEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Automation
     * Create Automation
     * @param {module:model/String} automation Automation type
     * @param {Object} opts Optional parameters
     * @param {String} [description] Description for the this Automation.
     * @param {String} [destination] DEPRECATED: Destination Path. Use `destinations` instead.
     * @param {String} [destinationReplaceFrom] If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
     * @param {String} [destinationReplaceTo] If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.
     * @param {Array.<String>} [destinations] A list of String destination paths or Hash of folder_path and optional file_path.
     * @param {Boolean} [disabled] If true, this automation will not run.
     * @param {String} [groupIds] A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.
     * @param {String} [interval] How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
     * @param {String} [name] Name for this automation.
     * @param {String} [path] Path on which this Automation runs.  Supports globs.
     * @param {Number} [recurringDay] If trigger type is `daily`, this specifies a day number to run in one of the supported intervals: `week`, `month`, `quarter`, `year`.
     * @param {Object.<String, Object>} [schedule] Custom schedule for running this automation.
     * @param {String} [source] Source Path
     * @param {String} [syncIds] A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited.
     * @param {module:model/String} [trigger] How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
     * @param {Array.<String>} [triggerActions] If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy
     * @param {String} [userIds] A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.
     * @param {Object.<String, Object>} [value] A Hash of attributes specific to the automation type.
     * @param {module:api/AutomationsApi~postAutomationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomationEntity}
     */
    postAutomations(automation, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'automation' is set
      if (automation === undefined || automation === null) {
        throw new Error("Missing the required parameter 'automation' when calling postAutomations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'automation': automation,
        'description': opts['description'],
        'destination': opts['destination'],
        'destination_replace_from': opts['destinationReplaceFrom'],
        'destination_replace_to': opts['destinationReplaceTo'],
        'destinations': this.apiClient.buildCollectionParam(opts['destinations'], 'csv'),
        'disabled': opts['disabled'],
        'group_ids': opts['groupIds'],
        'interval': opts['interval'],
        'name': opts['name'],
        'path': opts['path'],
        'recurring_day': opts['recurringDay'],
        'schedule': opts['schedule'],
        'source': opts['source'],
        'sync_ids': opts['syncIds'],
        'trigger': opts['trigger'],
        'trigger_actions': this.apiClient.buildCollectionParam(opts['triggerActions'], 'csv'),
        'user_ids': opts['userIds'],
        'value': opts['value']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AutomationEntity;
      return this.apiClient.callApi(
        '/automations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
