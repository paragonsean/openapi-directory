/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClickwrapEntity from '../model/ClickwrapEntity';

/**
* Clickwraps service.
* @module api/ClickwrapsApi
* @version 0.0.1
*/
export default class ClickwrapsApi {

    /**
    * Constructs a new ClickwrapsApi. 
    * @alias module:api/ClickwrapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteClickwrapsId operation.
     * @callback module:api/ClickwrapsApi~deleteClickwrapsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Clickwrap
     * Delete Clickwrap
     * @param {Number} id Clickwrap ID.
     * @param {module:api/ClickwrapsApi~deleteClickwrapsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteClickwrapsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteClickwrapsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/clickwraps/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClickwraps operation.
     * @callback module:api/ClickwrapsApi~getClickwrapsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClickwrapEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Clickwraps
     * List Clickwraps
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/ClickwrapsApi~getClickwrapsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClickwrapEntity>}
     */
    getClickwraps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ClickwrapEntity];
      return this.apiClient.callApi(
        '/clickwraps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClickwrapsId operation.
     * @callback module:api/ClickwrapsApi~getClickwrapsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClickwrapEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Clickwrap
     * Show Clickwrap
     * @param {Number} id Clickwrap ID.
     * @param {module:api/ClickwrapsApi~getClickwrapsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClickwrapEntity}
     */
    getClickwrapsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getClickwrapsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClickwrapEntity;
      return this.apiClient.callApi(
        '/clickwraps/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchClickwrapsId operation.
     * @callback module:api/ClickwrapsApi~patchClickwrapsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClickwrapEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Clickwrap
     * Update Clickwrap
     * @param {Number} id Clickwrap ID.
     * @param {Object} opts Optional parameters
     * @param {String} [body] Body text of Clickwrap (supports Markdown formatting).
     * @param {String} [name] Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)
     * @param {module:model/String} [useWithBundles] Use this Clickwrap for Bundles?
     * @param {module:model/String} [useWithInboxes] Use this Clickwrap for Inboxes?
     * @param {module:model/String} [useWithUsers] Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.
     * @param {module:api/ClickwrapsApi~patchClickwrapsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClickwrapEntity}
     */
    patchClickwrapsId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchClickwrapsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': opts['body'],
        'name': opts['name'],
        'use_with_bundles': opts['useWithBundles'],
        'use_with_inboxes': opts['useWithInboxes'],
        'use_with_users': opts['useWithUsers']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ClickwrapEntity;
      return this.apiClient.callApi(
        '/clickwraps/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postClickwraps operation.
     * @callback module:api/ClickwrapsApi~postClickwrapsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClickwrapEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Clickwrap
     * Create Clickwrap
     * @param {Object} opts Optional parameters
     * @param {String} [body] Body text of Clickwrap (supports Markdown formatting).
     * @param {String} [name] Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)
     * @param {module:model/String} [useWithBundles] Use this Clickwrap for Bundles?
     * @param {module:model/String} [useWithInboxes] Use this Clickwrap for Inboxes?
     * @param {module:model/String} [useWithUsers] Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.
     * @param {module:api/ClickwrapsApi~postClickwrapsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClickwrapEntity}
     */
    postClickwraps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': opts['body'],
        'name': opts['name'],
        'use_with_bundles': opts['useWithBundles'],
        'use_with_inboxes': opts['useWithInboxes'],
        'use_with_users': opts['useWithUsers']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ClickwrapEntity;
      return this.apiClient.callApi(
        '/clickwraps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
