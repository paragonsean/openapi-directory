/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileCommentEntity from '../model/FileCommentEntity';

/**
* FileComments service.
* @module api/FileCommentsApi
* @version 0.0.1
*/
export default class FileCommentsApi {

    /**
    * Constructs a new FileCommentsApi. 
    * @alias module:api/FileCommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFileCommentsId operation.
     * @callback module:api/FileCommentsApi~deleteFileCommentsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete File Comment
     * Delete File Comment
     * @param {Number} id File Comment ID.
     * @param {module:api/FileCommentsApi~deleteFileCommentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFileCommentsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFileCommentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/file_comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileCommentListForPath operation.
     * @callback module:api/FileCommentsApi~fileCommentListForPathCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileCommentEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List File Comments by path
     * List File Comments by path
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/FileCommentsApi~fileCommentListForPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileCommentEntity>}
     */
    fileCommentListForPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling fileCommentListForPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileCommentEntity];
      return this.apiClient.callApi(
        '/file_comments/files/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFileCommentsId operation.
     * @callback module:api/FileCommentsApi~patchFileCommentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileCommentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update File Comment
     * Update File Comment
     * @param {Number} id File Comment ID.
     * @param {String} body Comment body.
     * @param {module:api/FileCommentsApi~patchFileCommentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileCommentEntity}
     */
    patchFileCommentsId(id, body, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchFileCommentsId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchFileCommentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': body
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileCommentEntity;
      return this.apiClient.callApi(
        '/file_comments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFileComments operation.
     * @callback module:api/FileCommentsApi~postFileCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileCommentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create File Comment
     * Create File Comment
     * @param {String} body Comment body.
     * @param {String} path File path.
     * @param {module:api/FileCommentsApi~postFileCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileCommentEntity}
     */
    postFileComments(body, path, callback) {
      let postBody = null;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postFileComments");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postFileComments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': body,
        'path': path
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileCommentEntity;
      return this.apiClient.callApi(
        '/file_comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
