/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BehaviorEntity from '../model/BehaviorEntity';
import StatusEntity from '../model/StatusEntity';

/**
* Behaviors service.
* @module api/BehaviorsApi
* @version 0.0.1
*/
export default class BehaviorsApi {

    /**
    * Constructs a new BehaviorsApi. 
    * @alias module:api/BehaviorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the behaviorListForPath operation.
     * @callback module:api/BehaviorsApi~behaviorListForPathCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BehaviorEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Behaviors by path
     * List Behaviors by path
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[behavior]=desc`). Valid fields are `behavior`.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `behavior`.
     * @param {Object.<String, Object>} [filterPrefix] If set, return records where the specified field is prefixed by the supplied value. Valid fields are `behavior`.
     * @param {String} [recursive] Show behaviors above this path?
     * @param {String} [behavior] DEPRECATED: If set only shows folder behaviors matching this behavior type. Use `filter[behavior]` instead.
     * @param {module:api/BehaviorsApi~behaviorListForPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BehaviorEntity>}
     */
    behaviorListForPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling behaviorListForPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
        'filter_prefix': opts['filterPrefix'],
        'recursive': opts['recursive'],
        'behavior': opts['behavior']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BehaviorEntity];
      return this.apiClient.callApi(
        '/behaviors/folders/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBehaviorsId operation.
     * @callback module:api/BehaviorsApi~deleteBehaviorsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Behavior
     * Delete Behavior
     * @param {Number} id Behavior ID.
     * @param {module:api/BehaviorsApi~deleteBehaviorsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBehaviorsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBehaviorsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/behaviors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBehaviors operation.
     * @callback module:api/BehaviorsApi~getBehaviorsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BehaviorEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Behaviors
     * List Behaviors
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[behavior]=desc`). Valid fields are `behavior`.
     * @param {String} [behavior] If set, return records where the specified field is equal to the supplied value.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `behavior`.
     * @param {Object.<String, Object>} [filterPrefix] If set, return records where the specified field is prefixed by the supplied value. Valid fields are `behavior`.
     * @param {module:api/BehaviorsApi~getBehaviorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BehaviorEntity>}
     */
    getBehaviors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'behavior': opts['behavior'],
        'filter': opts['filter'],
        'filter_prefix': opts['filterPrefix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BehaviorEntity];
      return this.apiClient.callApi(
        '/behaviors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBehaviorsId operation.
     * @callback module:api/BehaviorsApi~getBehaviorsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BehaviorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Behavior
     * Show Behavior
     * @param {Number} id Behavior ID.
     * @param {module:api/BehaviorsApi~getBehaviorsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BehaviorEntity}
     */
    getBehaviorsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBehaviorsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BehaviorEntity;
      return this.apiClient.callApi(
        '/behaviors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchBehaviorsId operation.
     * @callback module:api/BehaviorsApi~patchBehaviorsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BehaviorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Behavior
     * Update Behavior
     * @param {Number} id Behavior ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [attachmentDelete] If true, will delete the file stored in attachment
     * @param {File} [attachmentFile] Certain behaviors may require a file, for instance, the \\\"watermark\\\" behavior requires a watermark image
     * @param {String} [behavior] Behavior type.
     * @param {String} [description] Description for this behavior.
     * @param {String} [name] Name for this behavior.
     * @param {String} [path] Folder behaviors path.
     * @param {String} [value] The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior. See The Behavior Types section for example values for each type of behavior.
     * @param {module:api/BehaviorsApi~patchBehaviorsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BehaviorEntity}
     */
    patchBehaviorsId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchBehaviorsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachment_delete': opts['attachmentDelete'],
        'attachment_file': opts['attachmentFile'],
        'behavior': opts['behavior'],
        'description': opts['description'],
        'name': opts['name'],
        'path': opts['path'],
        'value': opts['value']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BehaviorEntity;
      return this.apiClient.callApi(
        '/behaviors/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBehaviors operation.
     * @callback module:api/BehaviorsApi~postBehaviorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BehaviorEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Behavior
     * Create Behavior
     * @param {String} behavior Behavior type.
     * @param {String} path Folder behaviors path.
     * @param {Object} opts Optional parameters
     * @param {File} [attachmentFile] Certain behaviors may require a file, for instance, the \\\"watermark\\\" behavior requires a watermark image
     * @param {String} [description] Description for this behavior.
     * @param {String} [name] Name for this behavior.
     * @param {String} [value] The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior. See The Behavior Types section for example values for each type of behavior.
     * @param {module:api/BehaviorsApi~postBehaviorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BehaviorEntity}
     */
    postBehaviors(behavior, path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'behavior' is set
      if (behavior === undefined || behavior === null) {
        throw new Error("Missing the required parameter 'behavior' when calling postBehaviors");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postBehaviors");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachment_file': opts['attachmentFile'],
        'behavior': behavior,
        'description': opts['description'],
        'name': opts['name'],
        'path': path,
        'value': opts['value']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BehaviorEntity;
      return this.apiClient.callApi(
        '/behaviors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBehaviorsWebhookTest operation.
     * @callback module:api/BehaviorsApi~postBehaviorsWebhookTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StatusEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test webhook.
     * Test webhook.
     * @param {String} url URL for testing the webhook.
     * @param {Object} opts Optional parameters
     * @param {String} [action] action for test body
     * @param {Object.<String, Object>} [body] Additional body parameters.
     * @param {String} [encoding] HTTP encoding method.  Can be JSON, XML, or RAW (form data).
     * @param {Object.<String, Object>} [headers] Additional request headers.
     * @param {String} [method] HTTP method(GET or POST).
     * @param {module:api/BehaviorsApi~postBehaviorsWebhookTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StatusEntity}
     */
    postBehaviorsWebhookTest(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling postBehaviorsWebhookTest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action': opts['action'],
        'body': opts['body'],
        'encoding': opts['encoding'],
        'headers': opts['headers'],
        'method': opts['method'],
        'url': url
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = StatusEntity;
      return this.apiClient.callApi(
        '/behaviors/webhook/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
