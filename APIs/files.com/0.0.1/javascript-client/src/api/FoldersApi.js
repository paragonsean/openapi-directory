/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileEntity from '../model/FileEntity';

/**
* Folders service.
* @module api/FoldersApi
* @version 0.0.1
*/
export default class FoldersApi {

    /**
    * Constructs a new FoldersApi. 
    * @alias module:api/FoldersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the folderListForPath operation.
     * @callback module:api/FoldersApi~folderListForPathCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Folders by path
     * List Folders by path
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Send cursor to resume an existing list from the point at which you left off.  Get a cursor from an existing list via the X-Files-Cursor-Next header or the X-Files-Cursor-Prev header.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {String} [filter] If specified, will filter folders/files list by this string.  Wildcards of `*` and `?` are acceptable here.
     * @param {String} [previewSize] Request a preview size.  Can be `small` (default), `large`, `xlarge`, or `pdf`.
     * @param {Object.<String, Object>} [sortBy] Search by field and direction. Valid fields are `path`, `size`, `modified_at_datetime`, `provided_modified_at`.  Valid directions are `asc` and `desc`.  Defaults to `{\"path\":\"asc\"}`.
     * @param {String} [search] If `search_all` is `true`, provide the search string here.  Otherwise, this parameter acts like an alias of `filter`.
     * @param {Boolean} [searchAll] Search entire site?  If set, we will ignore the folder path provided and search the entire site.  This is the same API used by the search bar in the UI.  Search results are a best effort, not real time, and not guaranteed to match every file.  This field should only be used for ad-hoc (human) searching, and not as part of an automated process.
     * @param {Boolean} [withPreviews] Include file previews?
     * @param {Boolean} [withPriorityColor] Include file priority color information?
     * @param {module:api/FoldersApi~folderListForPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileEntity>}
     */
    folderListForPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling folderListForPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'filter': opts['filter'],
        'preview_size': opts['previewSize'],
        'sort_by': opts['sortBy'],
        'search': opts['search'],
        'search_all': opts['searchAll'],
        'with_previews': opts['withPreviews'],
        'with_priority_color': opts['withPriorityColor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FileEntity];
      return this.apiClient.callApi(
        '/folders/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFoldersPath operation.
     * @callback module:api/FoldersApi~postFoldersPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create folder
     * Create folder
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [mkdirParents] Create parent directories if they do not exist?
     * @param {Date} [providedMtime] User provided modification time.
     * @param {module:api/FoldersApi~postFoldersPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileEntity}
     */
    postFoldersPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postFoldersPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'mkdir_parents': opts['mkdirParents'],
        'provided_mtime': opts['providedMtime']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileEntity;
      return this.apiClient.callApi(
        '/folders/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
