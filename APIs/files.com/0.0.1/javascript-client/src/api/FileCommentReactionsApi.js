/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileCommentReactionEntity from '../model/FileCommentReactionEntity';

/**
* FileCommentReactions service.
* @module api/FileCommentReactionsApi
* @version 0.0.1
*/
export default class FileCommentReactionsApi {

    /**
    * Constructs a new FileCommentReactionsApi. 
    * @alias module:api/FileCommentReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFileCommentReactionsId operation.
     * @callback module:api/FileCommentReactionsApi~deleteFileCommentReactionsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete File Comment Reaction
     * Delete File Comment Reaction
     * @param {Number} id File Comment Reaction ID.
     * @param {module:api/FileCommentReactionsApi~deleteFileCommentReactionsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFileCommentReactionsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFileCommentReactionsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/file_comment_reactions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFileCommentReactions operation.
     * @callback module:api/FileCommentReactionsApi~postFileCommentReactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileCommentReactionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create File Comment Reaction
     * Create File Comment Reaction
     * @param {String} emoji Emoji to react with.
     * @param {Number} fileCommentId ID of file comment to attach reaction to.
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {module:api/FileCommentReactionsApi~postFileCommentReactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileCommentReactionEntity}
     */
    postFileCommentReactions(emoji, fileCommentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emoji' is set
      if (emoji === undefined || emoji === null) {
        throw new Error("Missing the required parameter 'emoji' when calling postFileCommentReactions");
      }
      // verify the required parameter 'fileCommentId' is set
      if (fileCommentId === undefined || fileCommentId === null) {
        throw new Error("Missing the required parameter 'fileCommentId' when calling postFileCommentReactions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'emoji': emoji,
        'file_comment_id': fileCommentId,
        'user_id': opts['userId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileCommentReactionEntity;
      return this.apiClient.callApi(
        '/file_comment_reactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
