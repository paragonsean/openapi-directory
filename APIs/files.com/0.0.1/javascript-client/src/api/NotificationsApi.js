/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import NotificationEntity from '../model/NotificationEntity';

/**
* Notifications service.
* @module api/NotificationsApi
* @version 0.0.1
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteNotificationsId operation.
     * @callback module:api/NotificationsApi~deleteNotificationsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Notification
     * Delete Notification
     * @param {Number} id Notification ID.
     * @param {module:api/NotificationsApi~deleteNotificationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNotificationsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNotificationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/notifications/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotifications operation.
     * @callback module:api/NotificationsApi~getNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Notifications
     * List Notifications
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] DEPRECATED: Show notifications for this User ID. Use `filter[user_id]` instead.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[path]=desc`). Valid fields are `path`, `user_id` or `group_id`.
     * @param {String} [groupId] If set, return records where the specified field is equal to the supplied value.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `path`, `user_id` or `group_id`.
     * @param {Object.<String, Object>} [filterPrefix] If set, return records where the specified field is prefixed by the supplied value. Valid fields are `path`.
     * @param {String} [path] Show notifications for this Path.
     * @param {Boolean} [includeAncestors] If `include_ancestors` is `true` and `path` is specified, include notifications for any parent paths. Ignored if `path` is not specified.
     * @param {module:api/NotificationsApi~getNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationEntity>}
     */
    getNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'group_id': opts['groupId'],
        'filter': opts['filter'],
        'filter_prefix': opts['filterPrefix'],
        'path': opts['path'],
        'include_ancestors': opts['includeAncestors']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NotificationEntity];
      return this.apiClient.callApi(
        '/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsId operation.
     * @callback module:api/NotificationsApi~getNotificationsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Notification
     * Show Notification
     * @param {Number} id Notification ID.
     * @param {module:api/NotificationsApi~getNotificationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEntity}
     */
    getNotificationsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNotificationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationEntity;
      return this.apiClient.callApi(
        '/notifications/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchNotificationsId operation.
     * @callback module:api/NotificationsApi~patchNotificationsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Notification
     * Update Notification
     * @param {Number} id Notification ID.
     * @param {Object} opts Optional parameters
     * @param {String} [message] Custom message to include in notification emails.
     * @param {Boolean} [notifyOnCopy] If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.
     * @param {Boolean} [notifyOnDelete] Triggers notification when deleting files from this path
     * @param {Boolean} [notifyOnDownload] Triggers notification when downloading files from this path
     * @param {Boolean} [notifyOnMove] Triggers notification when moving files to this path
     * @param {Boolean} [notifyOnUpload] Triggers notification when uploading new files to this path
     * @param {Boolean} [notifyUserActions] If `true` actions initiated by the user will still result in a notification
     * @param {Boolean} [recursive] If `true`, enable notifications for each subfolder in this path
     * @param {String} [sendInterval] The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.
     * @param {Boolean} [triggerByShareRecipients] Notify when actions are performed by a share recipient?
     * @param {Array.<String>} [triggeringFilenames] Array of filenames (possibly with wildcards) to match for action path
     * @param {Array.<Number>} [triggeringGroupIds] Only notify on actions made by a member of one of the specified groups
     * @param {Array.<Number>} [triggeringUserIds] Only notify on actions made one of the specified users
     * @param {module:api/NotificationsApi~patchNotificationsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEntity}
     */
    patchNotificationsId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchNotificationsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'message': opts['message'],
        'notify_on_copy': opts['notifyOnCopy'],
        'notify_on_delete': opts['notifyOnDelete'],
        'notify_on_download': opts['notifyOnDownload'],
        'notify_on_move': opts['notifyOnMove'],
        'notify_on_upload': opts['notifyOnUpload'],
        'notify_user_actions': opts['notifyUserActions'],
        'recursive': opts['recursive'],
        'send_interval': opts['sendInterval'],
        'trigger_by_share_recipients': opts['triggerByShareRecipients'],
        'triggering_filenames': this.apiClient.buildCollectionParam(opts['triggeringFilenames'], 'csv'),
        'triggering_group_ids': this.apiClient.buildCollectionParam(opts['triggeringGroupIds'], 'csv'),
        'triggering_user_ids': this.apiClient.buildCollectionParam(opts['triggeringUserIds'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NotificationEntity;
      return this.apiClient.callApi(
        '/notifications/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNotifications operation.
     * @callback module:api/NotificationsApi~postNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Notification
     * Create Notification
     * @param {Object} opts Optional parameters
     * @param {Number} [groupId] The ID of the group to notify.  Provide `user_id`, `username` or `group_id`.
     * @param {String} [message] Custom message to include in notification emails.
     * @param {Boolean} [notifyOnCopy] If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.
     * @param {Boolean} [notifyOnDelete] Triggers notification when deleting files from this path
     * @param {Boolean} [notifyOnDownload] Triggers notification when downloading files from this path
     * @param {Boolean} [notifyOnMove] Triggers notification when moving files to this path
     * @param {Boolean} [notifyOnUpload] Triggers notification when uploading new files to this path
     * @param {Boolean} [notifyUserActions] If `true` actions initiated by the user will still result in a notification
     * @param {String} [path] Path
     * @param {Boolean} [recursive] If `true`, enable notifications for each subfolder in this path
     * @param {String} [sendInterval] The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.
     * @param {Boolean} [triggerByShareRecipients] Notify when actions are performed by a share recipient?
     * @param {Array.<String>} [triggeringFilenames] Array of filenames (possibly with wildcards) to match for action path
     * @param {Array.<Number>} [triggeringGroupIds] Only notify on actions made by a member of one of the specified groups
     * @param {Array.<Number>} [triggeringUserIds] Only notify on actions made one of the specified users
     * @param {Number} [userId] The id of the user to notify. Provide `user_id`, `username` or `group_id`.
     * @param {String} [username] The username of the user to notify.  Provide `user_id`, `username` or `group_id`.
     * @param {module:api/NotificationsApi~postNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationEntity}
     */
    postNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'group_id': opts['groupId'],
        'message': opts['message'],
        'notify_on_copy': opts['notifyOnCopy'],
        'notify_on_delete': opts['notifyOnDelete'],
        'notify_on_download': opts['notifyOnDownload'],
        'notify_on_move': opts['notifyOnMove'],
        'notify_on_upload': opts['notifyOnUpload'],
        'notify_user_actions': opts['notifyUserActions'],
        'path': opts['path'],
        'recursive': opts['recursive'],
        'send_interval': opts['sendInterval'],
        'trigger_by_share_recipients': opts['triggerByShareRecipients'],
        'triggering_filenames': this.apiClient.buildCollectionParam(opts['triggeringFilenames'], 'csv'),
        'triggering_group_ids': this.apiClient.buildCollectionParam(opts['triggeringGroupIds'], 'csv'),
        'triggering_user_ids': this.apiClient.buildCollectionParam(opts['triggeringUserIds'], 'csv'),
        'user_id': opts['userId'],
        'username': opts['username']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NotificationEntity;
      return this.apiClient.callApi(
        '/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
