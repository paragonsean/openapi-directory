/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RemoteServerConfigurationFileEntity from '../model/RemoteServerConfigurationFileEntity';
import RemoteServerEntity from '../model/RemoteServerEntity';

/**
* RemoteServers service.
* @module api/RemoteServersApi
* @version 0.0.1
*/
export default class RemoteServersApi {

    /**
    * Constructs a new RemoteServersApi. 
    * @alias module:api/RemoteServersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteRemoteServersId operation.
     * @callback module:api/RemoteServersApi~deleteRemoteServersIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Remote Server
     * Delete Remote Server
     * @param {Number} id Remote Server ID.
     * @param {module:api/RemoteServersApi~deleteRemoteServersIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRemoteServersId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRemoteServersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/remote_servers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteServers operation.
     * @callback module:api/RemoteServersApi~getRemoteServersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RemoteServerEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Remote Servers
     * List Remote Servers
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/RemoteServersApi~getRemoteServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RemoteServerEntity>}
     */
    getRemoteServers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RemoteServerEntity];
      return this.apiClient.callApi(
        '/remote_servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteServersId operation.
     * @callback module:api/RemoteServersApi~getRemoteServersIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteServerEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Remote Server
     * Show Remote Server
     * @param {Number} id Remote Server ID.
     * @param {module:api/RemoteServersApi~getRemoteServersIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteServerEntity}
     */
    getRemoteServersId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRemoteServersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteServerEntity;
      return this.apiClient.callApi(
        '/remote_servers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRemoteServersIdConfigurationFile operation.
     * @callback module:api/RemoteServersApi~getRemoteServersIdConfigurationFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteServerConfigurationFileEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
     * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
     * @param {Number} id Remote Server ID.
     * @param {module:api/RemoteServersApi~getRemoteServersIdConfigurationFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteServerConfigurationFileEntity}
     */
    getRemoteServersIdConfigurationFile(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRemoteServersIdConfigurationFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteServerConfigurationFileEntity;
      return this.apiClient.callApi(
        '/remote_servers/{id}/configuration_file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchRemoteServersId operation.
     * @callback module:api/RemoteServersApi~patchRemoteServersIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteServerEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Remote Server
     * Update Remote Server
     * @param {Number} id Remote Server ID.
     * @param {Object} opts Optional parameters
     * @param {String} [awsAccessKey] AWS Access Key.
     * @param {String} [awsSecretKey] AWS secret key.
     * @param {String} [azureBlobStorageAccessKey] Azure Blob Storage secret key.
     * @param {String} [azureBlobStorageAccount] Azure Blob Storage Account name
     * @param {String} [azureBlobStorageContainer] Azure Blob Storage Container name
     * @param {String} [azureBlobStorageSasToken] Shared Access Signature (SAS) token
     * @param {String} [azureFilesStorageAccessKey] Azure File Storage access key.
     * @param {String} [azureFilesStorageAccount] Azure File Storage Account name
     * @param {String} [azureFilesStorageSasToken] Shared Access Signature (SAS) token
     * @param {String} [azureFilesStorageShareName] Azure File Storage Share name
     * @param {String} [backblazeB2ApplicationKey] Backblaze B2 Cloud Storage applicationKey.
     * @param {String} [backblazeB2Bucket] Backblaze B2 Cloud Storage Bucket name
     * @param {String} [backblazeB2KeyId] Backblaze B2 Cloud Storage keyID.
     * @param {String} [backblazeB2S3Endpoint] Backblaze B2 Cloud Storage S3 Endpoint
     * @param {Boolean} [enableDedicatedIps] `true` if remote server only accepts connections from dedicated IPs
     * @param {String} [filebaseAccessKey] Filebase Access Key.
     * @param {String} [filebaseBucket] Filebase Bucket name
     * @param {String} [filebaseSecretKey] Filebase secret key
     * @param {module:model/String} [filesAgentPermissionSet] Local permissions for files agent. read_only, write_only, or read_write
     * @param {String} [filesAgentRoot] Agent local root path
     * @param {String} [googleCloudStorageBucket] Google Cloud Storage bucket name
     * @param {String} [googleCloudStorageCredentialsJson] A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey
     * @param {String} [googleCloudStorageProjectId] Google Cloud Project ID
     * @param {String} [hostname] Hostname or IP address
     * @param {Number} [maxConnections] Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).
     * @param {String} [name] Internal name for your reference
     * @param {module:model/String} [oneDriveAccountType] Either personal or business_other account types
     * @param {String} [password] Password if needed.
     * @param {Boolean} [pinToSiteRegion] If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.
     * @param {Number} [port] Port for remote server.  Not needed for S3.
     * @param {String} [privateKey] Private key if needed.
     * @param {String} [privateKeyPassphrase] Passphrase for private key if needed.
     * @param {String} [rackspaceApiKey] Rackspace API key from the Rackspace Cloud Control Panel.
     * @param {String} [rackspaceContainer] The name of the container (top level directory) where files will sync.
     * @param {String} [rackspaceRegion] Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
     * @param {String} [rackspaceUsername] Rackspace username used to login to the Rackspace Cloud Control Panel.
     * @param {Boolean} [resetAuthentication] Reset authenticated account
     * @param {String} [s3Bucket] S3 bucket name
     * @param {String} [s3CompatibleAccessKey] S3-compatible Access Key.
     * @param {String} [s3CompatibleBucket] S3-compatible Bucket name
     * @param {String} [s3CompatibleEndpoint] S3-compatible endpoint
     * @param {String} [s3CompatibleRegion] S3-compatible endpoint
     * @param {String} [s3CompatibleSecretKey] S3-compatible secret key
     * @param {String} [s3Region] S3 region
     * @param {module:model/String} [serverCertificate] Remote server certificate
     * @param {String} [serverHostKey] Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts
     * @param {module:model/String} [serverType] Remote server type.
     * @param {module:model/String} [ssl] Should we require SSL?
     * @param {String} [sslCertificate] SSL client certificate.
     * @param {String} [username] Remote server username.  Not needed for S3 buckets.
     * @param {String} [wasabiAccessKey] Wasabi access key.
     * @param {String} [wasabiBucket] Wasabi Bucket name
     * @param {String} [wasabiRegion] Wasabi region
     * @param {String} [wasabiSecretKey] Wasabi secret key.
     * @param {module:api/RemoteServersApi~patchRemoteServersIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteServerEntity}
     */
    patchRemoteServersId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchRemoteServersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'aws_access_key': opts['awsAccessKey'],
        'aws_secret_key': opts['awsSecretKey'],
        'azure_blob_storage_access_key': opts['azureBlobStorageAccessKey'],
        'azure_blob_storage_account': opts['azureBlobStorageAccount'],
        'azure_blob_storage_container': opts['azureBlobStorageContainer'],
        'azure_blob_storage_sas_token': opts['azureBlobStorageSasToken'],
        'azure_files_storage_access_key': opts['azureFilesStorageAccessKey'],
        'azure_files_storage_account': opts['azureFilesStorageAccount'],
        'azure_files_storage_sas_token': opts['azureFilesStorageSasToken'],
        'azure_files_storage_share_name': opts['azureFilesStorageShareName'],
        'backblaze_b2_application_key': opts['backblazeB2ApplicationKey'],
        'backblaze_b2_bucket': opts['backblazeB2Bucket'],
        'backblaze_b2_key_id': opts['backblazeB2KeyId'],
        'backblaze_b2_s3_endpoint': opts['backblazeB2S3Endpoint'],
        'enable_dedicated_ips': opts['enableDedicatedIps'],
        'filebase_access_key': opts['filebaseAccessKey'],
        'filebase_bucket': opts['filebaseBucket'],
        'filebase_secret_key': opts['filebaseSecretKey'],
        'files_agent_permission_set': opts['filesAgentPermissionSet'],
        'files_agent_root': opts['filesAgentRoot'],
        'google_cloud_storage_bucket': opts['googleCloudStorageBucket'],
        'google_cloud_storage_credentials_json': opts['googleCloudStorageCredentialsJson'],
        'google_cloud_storage_project_id': opts['googleCloudStorageProjectId'],
        'hostname': opts['hostname'],
        'max_connections': opts['maxConnections'],
        'name': opts['name'],
        'one_drive_account_type': opts['oneDriveAccountType'],
        'password': opts['password'],
        'pin_to_site_region': opts['pinToSiteRegion'],
        'port': opts['port'],
        'private_key': opts['privateKey'],
        'private_key_passphrase': opts['privateKeyPassphrase'],
        'rackspace_api_key': opts['rackspaceApiKey'],
        'rackspace_container': opts['rackspaceContainer'],
        'rackspace_region': opts['rackspaceRegion'],
        'rackspace_username': opts['rackspaceUsername'],
        'reset_authentication': opts['resetAuthentication'],
        's3_bucket': opts['s3Bucket'],
        's3_compatible_access_key': opts['s3CompatibleAccessKey'],
        's3_compatible_bucket': opts['s3CompatibleBucket'],
        's3_compatible_endpoint': opts['s3CompatibleEndpoint'],
        's3_compatible_region': opts['s3CompatibleRegion'],
        's3_compatible_secret_key': opts['s3CompatibleSecretKey'],
        's3_region': opts['s3Region'],
        'server_certificate': opts['serverCertificate'],
        'server_host_key': opts['serverHostKey'],
        'server_type': opts['serverType'],
        'ssl': opts['ssl'],
        'ssl_certificate': opts['sslCertificate'],
        'username': opts['username'],
        'wasabi_access_key': opts['wasabiAccessKey'],
        'wasabi_bucket': opts['wasabiBucket'],
        'wasabi_region': opts['wasabiRegion'],
        'wasabi_secret_key': opts['wasabiSecretKey']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RemoteServerEntity;
      return this.apiClient.callApi(
        '/remote_servers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRemoteServers operation.
     * @callback module:api/RemoteServersApi~postRemoteServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteServerEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Remote Server
     * Create Remote Server
     * @param {Object} opts Optional parameters
     * @param {String} [awsAccessKey] AWS Access Key.
     * @param {String} [awsSecretKey] AWS secret key.
     * @param {String} [azureBlobStorageAccessKey] Azure Blob Storage secret key.
     * @param {String} [azureBlobStorageAccount] Azure Blob Storage Account name
     * @param {String} [azureBlobStorageContainer] Azure Blob Storage Container name
     * @param {String} [azureBlobStorageSasToken] Shared Access Signature (SAS) token
     * @param {String} [azureFilesStorageAccessKey] Azure File Storage access key.
     * @param {String} [azureFilesStorageAccount] Azure File Storage Account name
     * @param {String} [azureFilesStorageSasToken] Shared Access Signature (SAS) token
     * @param {String} [azureFilesStorageShareName] Azure File Storage Share name
     * @param {String} [backblazeB2ApplicationKey] Backblaze B2 Cloud Storage applicationKey.
     * @param {String} [backblazeB2Bucket] Backblaze B2 Cloud Storage Bucket name
     * @param {String} [backblazeB2KeyId] Backblaze B2 Cloud Storage keyID.
     * @param {String} [backblazeB2S3Endpoint] Backblaze B2 Cloud Storage S3 Endpoint
     * @param {Boolean} [enableDedicatedIps] `true` if remote server only accepts connections from dedicated IPs
     * @param {String} [filebaseAccessKey] Filebase Access Key.
     * @param {String} [filebaseBucket] Filebase Bucket name
     * @param {String} [filebaseSecretKey] Filebase secret key
     * @param {module:model/String} [filesAgentPermissionSet] Local permissions for files agent. read_only, write_only, or read_write
     * @param {String} [filesAgentRoot] Agent local root path
     * @param {String} [googleCloudStorageBucket] Google Cloud Storage bucket name
     * @param {String} [googleCloudStorageCredentialsJson] A JSON file that contains the private key. To generate see https://cloud.google.com/storage/docs/json_api/v1/how-tos/authorizing#APIKey
     * @param {String} [googleCloudStorageProjectId] Google Cloud Project ID
     * @param {String} [hostname] Hostname or IP address
     * @param {Number} [maxConnections] Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).
     * @param {String} [name] Internal name for your reference
     * @param {module:model/String} [oneDriveAccountType] Either personal or business_other account types
     * @param {String} [password] Password if needed.
     * @param {Boolean} [pinToSiteRegion] If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.
     * @param {Number} [port] Port for remote server.  Not needed for S3.
     * @param {String} [privateKey] Private key if needed.
     * @param {String} [privateKeyPassphrase] Passphrase for private key if needed.
     * @param {String} [rackspaceApiKey] Rackspace API key from the Rackspace Cloud Control Panel.
     * @param {String} [rackspaceContainer] The name of the container (top level directory) where files will sync.
     * @param {String} [rackspaceRegion] Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
     * @param {String} [rackspaceUsername] Rackspace username used to login to the Rackspace Cloud Control Panel.
     * @param {Boolean} [resetAuthentication] Reset authenticated account
     * @param {String} [s3Bucket] S3 bucket name
     * @param {String} [s3CompatibleAccessKey] S3-compatible Access Key.
     * @param {String} [s3CompatibleBucket] S3-compatible Bucket name
     * @param {String} [s3CompatibleEndpoint] S3-compatible endpoint
     * @param {String} [s3CompatibleRegion] S3-compatible endpoint
     * @param {String} [s3CompatibleSecretKey] S3-compatible secret key
     * @param {String} [s3Region] S3 region
     * @param {module:model/String} [serverCertificate] Remote server certificate
     * @param {String} [serverHostKey] Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts
     * @param {module:model/String} [serverType] Remote server type.
     * @param {module:model/String} [ssl] Should we require SSL?
     * @param {String} [sslCertificate] SSL client certificate.
     * @param {String} [username] Remote server username.  Not needed for S3 buckets.
     * @param {String} [wasabiAccessKey] Wasabi access key.
     * @param {String} [wasabiBucket] Wasabi Bucket name
     * @param {String} [wasabiRegion] Wasabi region
     * @param {String} [wasabiSecretKey] Wasabi secret key.
     * @param {module:api/RemoteServersApi~postRemoteServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteServerEntity}
     */
    postRemoteServers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'aws_access_key': opts['awsAccessKey'],
        'aws_secret_key': opts['awsSecretKey'],
        'azure_blob_storage_access_key': opts['azureBlobStorageAccessKey'],
        'azure_blob_storage_account': opts['azureBlobStorageAccount'],
        'azure_blob_storage_container': opts['azureBlobStorageContainer'],
        'azure_blob_storage_sas_token': opts['azureBlobStorageSasToken'],
        'azure_files_storage_access_key': opts['azureFilesStorageAccessKey'],
        'azure_files_storage_account': opts['azureFilesStorageAccount'],
        'azure_files_storage_sas_token': opts['azureFilesStorageSasToken'],
        'azure_files_storage_share_name': opts['azureFilesStorageShareName'],
        'backblaze_b2_application_key': opts['backblazeB2ApplicationKey'],
        'backblaze_b2_bucket': opts['backblazeB2Bucket'],
        'backblaze_b2_key_id': opts['backblazeB2KeyId'],
        'backblaze_b2_s3_endpoint': opts['backblazeB2S3Endpoint'],
        'enable_dedicated_ips': opts['enableDedicatedIps'],
        'filebase_access_key': opts['filebaseAccessKey'],
        'filebase_bucket': opts['filebaseBucket'],
        'filebase_secret_key': opts['filebaseSecretKey'],
        'files_agent_permission_set': opts['filesAgentPermissionSet'],
        'files_agent_root': opts['filesAgentRoot'],
        'google_cloud_storage_bucket': opts['googleCloudStorageBucket'],
        'google_cloud_storage_credentials_json': opts['googleCloudStorageCredentialsJson'],
        'google_cloud_storage_project_id': opts['googleCloudStorageProjectId'],
        'hostname': opts['hostname'],
        'max_connections': opts['maxConnections'],
        'name': opts['name'],
        'one_drive_account_type': opts['oneDriveAccountType'],
        'password': opts['password'],
        'pin_to_site_region': opts['pinToSiteRegion'],
        'port': opts['port'],
        'private_key': opts['privateKey'],
        'private_key_passphrase': opts['privateKeyPassphrase'],
        'rackspace_api_key': opts['rackspaceApiKey'],
        'rackspace_container': opts['rackspaceContainer'],
        'rackspace_region': opts['rackspaceRegion'],
        'rackspace_username': opts['rackspaceUsername'],
        'reset_authentication': opts['resetAuthentication'],
        's3_bucket': opts['s3Bucket'],
        's3_compatible_access_key': opts['s3CompatibleAccessKey'],
        's3_compatible_bucket': opts['s3CompatibleBucket'],
        's3_compatible_endpoint': opts['s3CompatibleEndpoint'],
        's3_compatible_region': opts['s3CompatibleRegion'],
        's3_compatible_secret_key': opts['s3CompatibleSecretKey'],
        's3_region': opts['s3Region'],
        'server_certificate': opts['serverCertificate'],
        'server_host_key': opts['serverHostKey'],
        'server_type': opts['serverType'],
        'ssl': opts['ssl'],
        'ssl_certificate': opts['sslCertificate'],
        'username': opts['username'],
        'wasabi_access_key': opts['wasabiAccessKey'],
        'wasabi_bucket': opts['wasabiBucket'],
        'wasabi_region': opts['wasabiRegion'],
        'wasabi_secret_key': opts['wasabiSecretKey']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RemoteServerEntity;
      return this.apiClient.callApi(
        '/remote_servers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRemoteServersIdConfigurationFile operation.
     * @callback module:api/RemoteServersApi~postRemoteServersIdConfigurationFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteServerConfigurationFileEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
     * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
     * @param {Number} id Remote Server ID.
     * @param {Object} opts Optional parameters
     * @param {String} [apiToken] Files Agent API Token
     * @param {String} [configVersion] agent config version
     * @param {String} [hostname] 
     * @param {String} [permissionSet] 
     * @param {Number} [port] Incoming port for files agent connections
     * @param {String} [privateKey] private key
     * @param {String} [publicKey] public key
     * @param {String} [root] Agent local root path
     * @param {String} [serverHostKey] 
     * @param {String} [status] either running or shutdown
     * @param {String} [subdomain] 
     * @param {module:api/RemoteServersApi~postRemoteServersIdConfigurationFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteServerConfigurationFileEntity}
     */
    postRemoteServersIdConfigurationFile(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postRemoteServersIdConfigurationFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'api_token': opts['apiToken'],
        'config_version': opts['configVersion'],
        'hostname': opts['hostname'],
        'permission_set': opts['permissionSet'],
        'port': opts['port'],
        'private_key': opts['privateKey'],
        'public_key': opts['publicKey'],
        'root': opts['root'],
        'server_host_key': opts['serverHostKey'],
        'status': opts['status'],
        'subdomain': opts['subdomain']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RemoteServerConfigurationFileEntity;
      return this.apiClient.callApi(
        '/remote_servers/{id}/configuration_file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
