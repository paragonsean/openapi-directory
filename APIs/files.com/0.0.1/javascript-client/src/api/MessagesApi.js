/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageEntity from '../model/MessageEntity';

/**
* Messages service.
* @module api/MessagesApi
* @version 0.0.1
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMessagesId operation.
     * @callback module:api/MessagesApi~deleteMessagesIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Message
     * Delete Message
     * @param {Number} id Message ID.
     * @param {module:api/MessagesApi~deleteMessagesIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessagesId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMessagesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/messages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/MessagesApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Messages
     * List Messages
     * @param {Number} projectId Project for which to return messages.
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/MessagesApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageEntity>}
     */
    getMessages(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'project_id': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MessageEntity];
      return this.apiClient.callApi(
        '/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessagesId operation.
     * @callback module:api/MessagesApi~getMessagesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Message
     * Show Message
     * @param {Number} id Message ID.
     * @param {module:api/MessagesApi~getMessagesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageEntity}
     */
    getMessagesId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMessagesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageEntity;
      return this.apiClient.callApi(
        '/messages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMessagesId operation.
     * @callback module:api/MessagesApi~patchMessagesIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Message
     * Update Message
     * @param {Number} id Message ID.
     * @param {String} body Message body.
     * @param {Number} projectId Project to which the message should be attached.
     * @param {String} subject Message subject.
     * @param {module:api/MessagesApi~patchMessagesIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageEntity}
     */
    patchMessagesId(id, body, projectId, subject, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchMessagesId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchMessagesId");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling patchMessagesId");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling patchMessagesId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': body,
        'project_id': projectId,
        'subject': subject
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MessageEntity;
      return this.apiClient.callApi(
        '/messages/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMessages operation.
     * @callback module:api/MessagesApi~postMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Message
     * Create Message
     * @param {String} body Message body.
     * @param {Number} projectId Project to which the message should be attached.
     * @param {String} subject Message subject.
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {module:api/MessagesApi~postMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageEntity}
     */
    postMessages(body, projectId, subject, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postMessages");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postMessages");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling postMessages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': body,
        'project_id': projectId,
        'subject': subject,
        'user_id': opts['userId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MessageEntity;
      return this.apiClient.callApi(
        '/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
