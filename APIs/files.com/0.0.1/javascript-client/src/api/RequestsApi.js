/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RequestEntity from '../model/RequestEntity';

/**
* Requests service.
* @module api/RequestsApi
* @version 0.0.1
*/
export default class RequestsApi {

    /**
    * Constructs a new RequestsApi. 
    * @alias module:api/RequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteRequestsId operation.
     * @callback module:api/RequestsApi~deleteRequestsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Request
     * Delete Request
     * @param {Number} id Request ID.
     * @param {module:api/RequestsApi~deleteRequestsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRequestsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRequestsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/requests/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequests operation.
     * @callback module:api/RequestsApi~getRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RequestEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Requests
     * List Requests
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[destination]=desc`). Valid fields are `destination`.
     * @param {Boolean} [mine] Only show requests of the current user?  (Defaults to true if current user is not a site admin.)
     * @param {String} [path] Path to show requests for.  If omitted, shows all paths. Send `/` to represent the root directory.
     * @param {module:api/RequestsApi~getRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RequestEntity>}
     */
    getRequests(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'mine': opts['mine'],
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RequestEntity];
      return this.apiClient.callApi(
        '/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRequestsFoldersPath operation.
     * @callback module:api/RequestsApi~getRequestsFoldersPathCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RequestEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Requests
     * List Requests
     * @param {String} path Path to show requests for.  If omitted, shows all paths. Send `/` to represent the root directory.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[destination]=desc`). Valid fields are `destination`.
     * @param {Boolean} [mine] Only show requests of the current user?  (Defaults to true if current user is not a site admin.)
     * @param {module:api/RequestsApi~getRequestsFoldersPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RequestEntity>}
     */
    getRequestsFoldersPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getRequestsFoldersPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'mine': opts['mine']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RequestEntity];
      return this.apiClient.callApi(
        '/requests/folders/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRequests operation.
     * @callback module:api/RequestsApi~postRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Request
     * Create Request
     * @param {String} destination Destination filename (without extension) to request.
     * @param {String} path Folder path on which to request the file.
     * @param {Object} opts Optional parameters
     * @param {String} [groupIds] A list of group IDs to request the file from. If sent as a string, it should be comma-delimited.
     * @param {String} [userIds] A list of user IDs to request the file from. If sent as a string, it should be comma-delimited.
     * @param {module:api/RequestsApi~postRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestEntity}
     */
    postRequests(destination, path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling postRequests");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postRequests");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'destination': destination,
        'group_ids': opts['groupIds'],
        'path': path,
        'user_ids': opts['userIds']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = RequestEntity;
      return this.apiClient.callApi(
        '/requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
