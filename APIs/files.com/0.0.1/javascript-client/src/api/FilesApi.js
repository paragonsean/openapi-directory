/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileEntity from '../model/FileEntity';

/**
* Files service.
* @module api/FilesApi
* @version 0.0.1
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFilesPath operation.
     * @callback module:api/FilesApi~deleteFilesPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete file/folder
     * Delete file/folder
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recursive] If true, will recursively delete folers.  Otherwise, will error on non-empty folders.
     * @param {module:api/FilesApi~deleteFilesPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFilesPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteFilesPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'recursive': opts['recursive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileDownload operation.
     * @callback module:api/FilesApi~fileDownloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file
     * Download file
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {String} [action] Can be blank, `redirect` or `stat`.  If set to `stat`, we will return file information but without a download URL, and without logging a download.  If set to `redirect` we will serve a 302 redirect directly to the file.  This is used for integrations with Zapier, and is not recommended for most integrations.
     * @param {String} [previewSize] Request a preview size.  Can be `small` (default), `large`, `xlarge`, or `pdf`.
     * @param {Boolean} [withPreviews] Include file preview information?
     * @param {Boolean} [withPriorityColor] Include file priority color information?
     * @param {module:api/FilesApi~fileDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileEntity}
     */
    fileDownload(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling fileDownload");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'action': opts['action'],
        'preview_size': opts['previewSize'],
        'with_previews': opts['withPreviews'],
        'with_priority_color': opts['withPriorityColor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileEntity;
      return this.apiClient.callApi(
        '/files/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFilesPath operation.
     * @callback module:api/FilesApi~patchFilesPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update file/folder metadata
     * Update file/folder metadata
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {String} [priorityColor] Priority/Bookmark color of file.
     * @param {Date} [providedMtime] Modified time of file.
     * @param {module:api/FilesApi~patchFilesPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileEntity}
     */
    patchFilesPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling patchFilesPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'priority_color': opts['priorityColor'],
        'provided_mtime': opts['providedMtime']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileEntity;
      return this.apiClient.callApi(
        '/files/{path}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFilesPath operation.
     * @callback module:api/FilesApi~postFilesPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * Upload file
     * @param {String} path Path to operate on.
     * @param {Array.<String>} etagsEtag etag identifier.
     * @param {Array.<Number>} etagsPart Part number.
     * @param {Object} opts Optional parameters
     * @param {String} [action] The action to perform.  Can be `append`, `attachment`, `end`, `upload`, `put`, or may not exist
     * @param {Number} [length] Length of file.
     * @param {Boolean} [mkdirParents] Create parent directories if they do not exist?
     * @param {Number} [part] Part if uploading a part.
     * @param {Number} [parts] How many parts to fetch?
     * @param {Date} [providedMtime] User provided modification time.
     * @param {String} [ref] 
     * @param {Number} [restart] File byte offset to restart from.
     * @param {Number} [size] Size of file.
     * @param {String} [structure] If copying folder, copy just the structure?
     * @param {Boolean} [withRename] Allow file rename instead of overwrite?
     * @param {module:api/FilesApi~postFilesPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileEntity}
     */
    postFilesPath(path, etagsEtag, etagsPart, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postFilesPath");
      }
      // verify the required parameter 'etagsEtag' is set
      if (etagsEtag === undefined || etagsEtag === null) {
        throw new Error("Missing the required parameter 'etagsEtag' when calling postFilesPath");
      }
      // verify the required parameter 'etagsPart' is set
      if (etagsPart === undefined || etagsPart === null) {
        throw new Error("Missing the required parameter 'etagsPart' when calling postFilesPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action': opts['action'],
        'etags[etag]': this.apiClient.buildCollectionParam(etagsEtag, 'csv'),
        'etags[part]': this.apiClient.buildCollectionParam(etagsPart, 'csv'),
        'length': opts['length'],
        'mkdir_parents': opts['mkdirParents'],
        'part': opts['part'],
        'parts': opts['parts'],
        'provided_mtime': opts['providedMtime'],
        'ref': opts['ref'],
        'restart': opts['restart'],
        'size': opts['size'],
        'structure': opts['structure'],
        'with_rename': opts['withRename']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileEntity;
      return this.apiClient.callApi(
        '/files/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
