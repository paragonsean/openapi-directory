/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionEntity from '../model/ActionEntity';

/**
* History service.
* @module api/HistoryApi
* @version 0.0.1
*/
export default class HistoryApi {

    /**
    * Constructs a new HistoryApi. 
    * @alias module:api/HistoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the historyList operation.
     * @callback module:api/HistoryApi~historyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List site full action history.
     * List site full action history.
     * @param {Object} opts Optional parameters
     * @param {Date} [startAt] Leave blank or set to a date/time to filter earlier entries.
     * @param {Date} [endAt] Leave blank or set to a date/time to filter later entries.
     * @param {String} [display] Display format. Leave blank or set to `full` or `parent`.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[path]=desc`). Valid fields are `path`, `folder`, `user_id` or `created_at`.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `user_id`, `folder` or `path`.
     * @param {Object.<String, Object>} [filterPrefix] If set, return records where the specified field is prefixed by the supplied value. Valid fields are `path`.
     * @param {module:api/HistoryApi~historyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionEntity>}
     */
    historyList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'end_at': opts['endAt'],
        'display': opts['display'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
        'filter_prefix': opts['filterPrefix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionEntity];
      return this.apiClient.callApi(
        '/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the historyListForFile operation.
     * @callback module:api/HistoryApi~historyListForFileCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List history for specific file.
     * List history for specific file.
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {Date} [startAt] Leave blank or set to a date/time to filter earlier entries.
     * @param {Date} [endAt] Leave blank or set to a date/time to filter later entries.
     * @param {String} [display] Display format. Leave blank or set to `full` or `parent`.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[user_id]=desc`). Valid fields are `user_id` and `created_at`.
     * @param {module:api/HistoryApi~historyListForFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionEntity>}
     */
    historyListForFile(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling historyListForFile");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'end_at': opts['endAt'],
        'display': opts['display'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionEntity];
      return this.apiClient.callApi(
        '/history/files/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the historyListForFolder operation.
     * @callback module:api/HistoryApi~historyListForFolderCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List history for specific folder.
     * List history for specific folder.
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {Date} [startAt] Leave blank or set to a date/time to filter earlier entries.
     * @param {Date} [endAt] Leave blank or set to a date/time to filter later entries.
     * @param {String} [display] Display format. Leave blank or set to `full` or `parent`.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[user_id]=desc`). Valid fields are `user_id` and `created_at`.
     * @param {module:api/HistoryApi~historyListForFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionEntity>}
     */
    historyListForFolder(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling historyListForFolder");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'end_at': opts['endAt'],
        'display': opts['display'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionEntity];
      return this.apiClient.callApi(
        '/history/folders/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the historyListForUser operation.
     * @callback module:api/HistoryApi~historyListForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List history for specific user.
     * List history for specific user.
     * @param {Number} userId User ID.
     * @param {Object} opts Optional parameters
     * @param {Date} [startAt] Leave blank or set to a date/time to filter earlier entries.
     * @param {Date} [endAt] Leave blank or set to a date/time to filter later entries.
     * @param {String} [display] Display format. Leave blank or set to `full` or `parent`.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[user_id]=desc`). Valid fields are `user_id` and `created_at`.
     * @param {module:api/HistoryApi~historyListForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionEntity>}
     */
    historyListForUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling historyListForUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'end_at': opts['endAt'],
        'display': opts['display'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionEntity];
      return this.apiClient.callApi(
        '/history/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the historyListLogins operation.
     * @callback module:api/HistoryApi~historyListLoginsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List site login history.
     * List site login history.
     * @param {Object} opts Optional parameters
     * @param {Date} [startAt] Leave blank or set to a date/time to filter earlier entries.
     * @param {Date} [endAt] Leave blank or set to a date/time to filter later entries.
     * @param {String} [display] Display format. Leave blank or set to `full` or `parent`.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[user_id]=desc`). Valid fields are `user_id` and `created_at`.
     * @param {module:api/HistoryApi~historyListLoginsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionEntity>}
     */
    historyListLogins(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_at': opts['startAt'],
        'end_at': opts['endAt'],
        'display': opts['display'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionEntity];
      return this.apiClient.callApi(
        '/history/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
