/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKeyEntity from '../model/ApiKeyEntity';

/**
* ApiKeys service.
* @module api/ApiKeysApi
* @version 0.0.1
*/
export default class ApiKeysApi {

    /**
    * Constructs a new ApiKeysApi. 
    * @alias module:api/ApiKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteApiKeysId operation.
     * @callback module:api/ApiKeysApi~deleteApiKeysIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Api Key
     * Delete Api Key
     * @param {Number} id Api Key ID.
     * @param {module:api/ApiKeysApi~deleteApiKeysIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiKeysId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteApiKeysId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api_keys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKeys operation.
     * @callback module:api/ApiKeysApi~getApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiKeyEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Api Keys
     * List Api Keys
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[expires_at]=desc`). Valid fields are `expires_at`.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `expires_at`.
     * @param {Object.<String, Object>} [filterGt] If set, return records where the specified field is greater than the supplied value. Valid fields are `expires_at`.
     * @param {Object.<String, Object>} [filterGteq] If set, return records where the specified field is greater than or equal the supplied value. Valid fields are `expires_at`.
     * @param {Object.<String, Object>} [filterLt] If set, return records where the specified field is less than the supplied value. Valid fields are `expires_at`.
     * @param {Object.<String, Object>} [filterLteq] If set, return records where the specified field is less than or equal the supplied value. Valid fields are `expires_at`.
     * @param {module:api/ApiKeysApi~getApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiKeyEntity>}
     */
    getApiKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
        'filter_gt': opts['filterGt'],
        'filter_gteq': opts['filterGteq'],
        'filter_lt': opts['filterLt'],
        'filter_lteq': opts['filterLteq']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiKeyEntity];
      return this.apiClient.callApi(
        '/api_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKeysId operation.
     * @callback module:api/ApiKeysApi~getApiKeysIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Api Key
     * Show Api Key
     * @param {Number} id Api Key ID.
     * @param {module:api/ApiKeysApi~getApiKeysIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyEntity}
     */
    getApiKeysId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getApiKeysId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKeyEntity;
      return this.apiClient.callApi(
        '/api_keys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchApiKeysId operation.
     * @callback module:api/ApiKeysApi~patchApiKeysIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Api Key
     * Update Api Key
     * @param {Number} id Api Key ID.
     * @param {Object} opts Optional parameters
     * @param {String} [description] User-supplied description of API key.
     * @param {Date} [expiresAt] API Key expiration date
     * @param {String} [name] Internal name for the API Key.  For your use.
     * @param {module:model/String} [permissionSet] Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.
     * @param {module:api/ApiKeysApi~patchApiKeysIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyEntity}
     */
    patchApiKeysId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchApiKeysId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': opts['description'],
        'expires_at': opts['expiresAt'],
        'name': opts['name'],
        'permission_set': opts['permissionSet']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiKeyEntity;
      return this.apiClient.callApi(
        '/api_keys/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiKeys operation.
     * @callback module:api/ApiKeysApi~postApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Api Key
     * Create Api Key
     * @param {Object} opts Optional parameters
     * @param {String} [description] User-supplied description of API key.
     * @param {Date} [expiresAt] API Key expiration date
     * @param {String} [name] Internal name for the API Key.  For your use.
     * @param {String} [path] Folder path restriction for this api key.
     * @param {module:model/String} [permissionSet = 'full')] Permissions for this API Key.  Keys with the `desktop_app` permission set only have the ability to do the functions provided in our Desktop App (File and Share Link operations).  Additional permission sets may become available in the future, such as for a Site Admin to give a key with no administrator privileges.  If you have ideas for permission sets, please let us know.
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {module:api/ApiKeysApi~postApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyEntity}
     */
    postApiKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': opts['description'],
        'expires_at': opts['expiresAt'],
        'name': opts['name'],
        'path': opts['path'],
        'permission_set': opts['permissionSet'],
        'user_id': opts['userId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiKeyEntity;
      return this.apiClient.callApi(
        '/api_keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
