/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GroupUserEntity from '../model/GroupUserEntity';

/**
* GroupUsers service.
* @module api/GroupUsersApi
* @version 0.0.1
*/
export default class GroupUsersApi {

    /**
    * Constructs a new GroupUsersApi. 
    * @alias module:api/GroupUsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteGroupUsersId operation.
     * @callback module:api/GroupUsersApi~deleteGroupUsersIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group User
     * Delete Group User
     * @param {Number} id Group User ID.
     * @param {Number} groupId Group ID from which to remove user.
     * @param {Number} userId User ID to remove from group.
     * @param {module:api/GroupUsersApi~deleteGroupUsersIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupUsersId(id, groupId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupUsersId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupUsersId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteGroupUsersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'group_id': groupId,
        'user_id': userId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/group_users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupUsers operation.
     * @callback module:api/GroupUsersApi~getGroupUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupUserEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Group Users
     * List Group Users
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  If provided, will return group_users of this user.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Number} [groupId] Group ID.  If provided, will return group_users of this group.
     * @param {module:api/GroupUsersApi~getGroupUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupUserEntity>}
     */
    getGroupUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'group_id': opts['groupId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupUserEntity];
      return this.apiClient.callApi(
        '/group_users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchGroupUsersId operation.
     * @callback module:api/GroupUsersApi~patchGroupUsersIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupUserEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group User
     * Update Group User
     * @param {Number} id Group User ID.
     * @param {Number} groupId Group ID to add user to.
     * @param {Number} userId User ID to add to group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [admin] Is the user a group administrator?
     * @param {module:api/GroupUsersApi~patchGroupUsersIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupUserEntity}
     */
    patchGroupUsersId(id, groupId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchGroupUsersId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling patchGroupUsersId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling patchGroupUsersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'admin': opts['admin'],
        'group_id': groupId,
        'user_id': userId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GroupUserEntity;
      return this.apiClient.callApi(
        '/group_users/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGroupUsers operation.
     * @callback module:api/GroupUsersApi~postGroupUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupUserEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Group User
     * Create Group User
     * @param {Number} groupId Group ID to add user to.
     * @param {Number} userId User ID to add to group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [admin] Is the user a group administrator?
     * @param {module:api/GroupUsersApi~postGroupUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupUserEntity}
     */
    postGroupUsers(groupId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling postGroupUsers");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling postGroupUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'admin': opts['admin'],
        'group_id': groupId,
        'user_id': userId
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GroupUserEntity;
      return this.apiClient.callApi(
        '/group_users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
