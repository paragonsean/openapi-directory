/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountLineItemEntity from '../model/AccountLineItemEntity';

/**
* Payments service.
* @module api/PaymentsApi
* @version 0.0.1
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPayments operation.
     * @callback module:api/PaymentsApi~getPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountLineItemEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Payments
     * List Payments
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/PaymentsApi~getPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountLineItemEntity>}
     */
    getPayments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AccountLineItemEntity];
      return this.apiClient.callApi(
        '/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentsId operation.
     * @callback module:api/PaymentsApi~getPaymentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountLineItemEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Payment
     * Show Payment
     * @param {Number} id Payment ID.
     * @param {module:api/PaymentsApi~getPaymentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountLineItemEntity}
     */
    getPaymentsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPaymentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountLineItemEntity;
      return this.apiClient.callApi(
        '/payments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
