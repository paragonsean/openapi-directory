/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GroupEntity from '../model/GroupEntity';
import GroupUserEntity from '../model/GroupUserEntity';
import PermissionEntity from '../model/PermissionEntity';
import UserEntity from '../model/UserEntity';

/**
* Groups service.
* @module api/GroupsApi
* @version 0.0.1
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteGroupsGroupIdMembershipsUserId operation.
     * @callback module:api/GroupsApi~deleteGroupsGroupIdMembershipsUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group User
     * Delete Group User
     * @param {Number} groupId Group ID from which to remove user.
     * @param {Number} userId User ID to remove from group.
     * @param {module:api/GroupsApi~deleteGroupsGroupIdMembershipsUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupsGroupIdMembershipsUserId(groupId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteGroupsGroupIdMembershipsUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteGroupsGroupIdMembershipsUserId");
      }

      let pathParams = {
        'group_id': groupId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{group_id}/memberships/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGroupsId operation.
     * @callback module:api/GroupsApi~deleteGroupsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Group
     * Delete Group
     * @param {Number} id Group ID.
     * @param {module:api/GroupsApi~deleteGroupsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGroupsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteGroupsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroups operation.
     * @callback module:api/GroupsApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Groups
     * List Groups
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[name]=desc`). Valid fields are `name`.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `name`.
     * @param {Object.<String, Object>} [filterPrefix] If set, return records where the specified field is prefixed by the supplied value. Valid fields are `name`.
     * @param {String} [ids] Comma-separated list of group ids to include in results.
     * @param {module:api/GroupsApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupEntity>}
     */
    getGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
        'filter_prefix': opts['filterPrefix'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupEntity];
      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupsGroupIdPermissions operation.
     * @callback module:api/GroupsApi~getGroupsGroupIdPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PermissionEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Permissions
     * List Permissions
     * @param {String} groupId DEPRECATED: Group ID.  If provided, will scope permissions to this group. Use `filter[group_id]` instead.`
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Object.<String, Object>} [sortBy] If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[group_id]=desc`). Valid fields are `group_id`, `path`, `user_id` or `permission`.
     * @param {Object.<String, Object>} [filter] If set, return records where the specified field is equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
     * @param {Object.<String, Object>} [filterPrefix] If set, return records where the specified field is prefixed by the supplied value. Valid fields are `path`.
     * @param {String} [path] DEPRECATED: Permission path.  If provided, will scope permissions to this path. Use `filter[path]` instead.
     * @param {String} [userId] DEPRECATED: User ID.  If provided, will scope permissions to this user. Use `filter[user_id]` instead.`
     * @param {Boolean} [includeGroups] If searching by user or group, also include user's permissions that are inherited from its groups?
     * @param {module:api/GroupsApi~getGroupsGroupIdPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PermissionEntity>}
     */
    getGroupsGroupIdPermissions(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupsGroupIdPermissions");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
        'filter_prefix': opts['filterPrefix'],
        'path': opts['path'],
        'user_id': opts['userId'],
        'include_groups': opts['includeGroups']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PermissionEntity];
      return this.apiClient.callApi(
        '/groups/{group_id}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupsGroupIdUsers operation.
     * @callback module:api/GroupsApi~getGroupsGroupIdUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GroupUserEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Group Users
     * List Group Users
     * @param {Number} groupId Group ID.  If provided, will return group_users of this group.
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  If provided, will return group_users of this user.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/GroupsApi~getGroupsGroupIdUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GroupUserEntity>}
     */
    getGroupsGroupIdUsers(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling getGroupsGroupIdUsers");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GroupUserEntity];
      return this.apiClient.callApi(
        '/groups/{group_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroupsId operation.
     * @callback module:api/GroupsApi~getGroupsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Group
     * Show Group
     * @param {Number} id Group ID.
     * @param {module:api/GroupsApi~getGroupsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupEntity}
     */
    getGroupsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGroupsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupEntity;
      return this.apiClient.callApi(
        '/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchGroupsGroupIdMembershipsUserId operation.
     * @callback module:api/GroupsApi~patchGroupsGroupIdMembershipsUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupUserEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group User
     * Update Group User
     * @param {Number} groupId Group ID to add user to.
     * @param {Number} userId User ID to add to group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [admin] Is the user a group administrator?
     * @param {module:api/GroupsApi~patchGroupsGroupIdMembershipsUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupUserEntity}
     */
    patchGroupsGroupIdMembershipsUserId(groupId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling patchGroupsGroupIdMembershipsUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling patchGroupsGroupIdMembershipsUserId");
      }

      let pathParams = {
        'group_id': groupId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'admin': opts['admin']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GroupUserEntity;
      return this.apiClient.callApi(
        '/groups/{group_id}/memberships/{user_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchGroupsId operation.
     * @callback module:api/GroupsApi~patchGroupsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Group
     * Update Group
     * @param {Number} id Group ID.
     * @param {Object} opts Optional parameters
     * @param {String} [adminIds] A list of group admin user ids. If sent as a string, should be comma-delimited.
     * @param {String} [name] Group name.
     * @param {String} [notes] Group notes.
     * @param {String} [userIds] A list of user ids. If sent as a string, should be comma-delimited.
     * @param {module:api/GroupsApi~patchGroupsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupEntity}
     */
    patchGroupsId(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchGroupsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'admin_ids': opts['adminIds'],
        'name': opts['name'],
        'notes': opts['notes'],
        'user_ids': opts['userIds']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GroupEntity;
      return this.apiClient.callApi(
        '/groups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGroups operation.
     * @callback module:api/GroupsApi~postGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Group
     * Create Group
     * @param {Object} opts Optional parameters
     * @param {String} [adminIds] A list of group admin user ids. If sent as a string, should be comma-delimited.
     * @param {String} [name] Group name.
     * @param {String} [notes] Group notes.
     * @param {String} [userIds] A list of user ids. If sent as a string, should be comma-delimited.
     * @param {module:api/GroupsApi~postGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupEntity}
     */
    postGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'admin_ids': opts['adminIds'],
        'name': opts['name'],
        'notes': opts['notes'],
        'user_ids': opts['userIds']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = GroupEntity;
      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGroupsGroupIdUsers operation.
     * @callback module:api/GroupsApi~postGroupsGroupIdUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Create User
     * @param {Number} groupId Group ID to associate this user with.
     * @param {Object} opts Optional parameters
     * @param {String} [allowedIps] A list of allowed IPs if applicable.  Newline delimited
     * @param {Boolean} [announcementsRead] Signifies that the user has read all the announcements in the UI.
     * @param {Boolean} [attachmentsPermission] DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.
     * @param {Date} [authenticateUntil] Scheduled Date/Time at which user will be deactivated
     * @param {module:model/String} [authenticationMethod] How is this user authenticated?
     * @param {Boolean} [avatarDelete] If true, the avatar will be deleted.
     * @param {File} [avatarFile] An image file for your user avatar.
     * @param {Boolean} [billingPermission] Allow this user to perform operations on the account, payments, and invoices?
     * @param {Boolean} [bypassInactiveDisable] Exempt this user from being disabled based on inactivity?
     * @param {Boolean} [bypassSiteAllowedIps] Allow this user to skip site-wide IP blacklists?
     * @param {String} [changePassword] Used for changing a password on an existing user.
     * @param {String} [changePasswordConfirmation] Optional, but if provided, we will ensure that it matches the value sent in `change_password`.
     * @param {String} [company] User's company
     * @param {Boolean} [davPermission] Can the user connect with WebDAV?
     * @param {Boolean} [disabled] Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.
     * @param {String} [email] User's email.
     * @param {Boolean} [ftpPermission] Can the user access with FTP/FTPS?
     * @param {String} [grantPermission] Permission to grant on the user root.  Can be blank or `full`, `read`, `write`, `list`, `read+write`, or `list+write`
     * @param {String} [groupIds] A list of group ids to associate this user with.  Comma delimited.
     * @param {String} [headerText] Text to display to the user in the header of the UI
     * @param {String} [importedPasswordHash] Pre-calculated hash of the user's password. If supplied, this will be used to authenticate the user on first login. Supported hash menthods are MD5, SHA1, and SHA256.
     * @param {String} [language] Preferred language
     * @param {String} [name] User's full name
     * @param {String} [notes] Any internal notes on the user
     * @param {Number} [notificationDailySendTime] Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
     * @param {Boolean} [officeIntegrationEnabled] Enable integration with Office for the web?
     * @param {String} [password] User password.
     * @param {String} [passwordConfirmation] Optional, but if provided, we will ensure that it matches the value sent in `password`.
     * @param {Number} [passwordValidityDays] Number of days to allow user to use the same password
     * @param {Boolean} [receiveAdminAlerts] Should the user receive admin alerts such a certificate expiration notifications and overages?
     * @param {module:model/String} [require2fa] 2FA required setting
     * @param {Boolean} [requirePasswordChange] Is a password change required upon next user login?
     * @param {Boolean} [restapiPermission] Can this user access the REST API?
     * @param {Boolean} [selfManaged] Does this user manage it's own credentials or is it a shared/bot user?
     * @param {Boolean} [sftpPermission] Can the user access with SFTP?
     * @param {Boolean} [siteAdmin] Is the user an administrator for this site?
     * @param {Boolean} [skipWelcomeScreen] Skip Welcome page in the UI?
     * @param {module:model/String} [sslRequired] SSL required setting
     * @param {Number} [ssoStrategyId] SSO (Single Sign On) strategy ID for the user, if applicable.
     * @param {Boolean} [subscribeToNewsletter] Is the user subscribed to the newsletter?
     * @param {String} [timeZone] User time zone
     * @param {String} [userRoot] Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.
     * @param {String} [username] User's username
     * @param {module:api/GroupsApi~postGroupsGroupIdUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserEntity}
     */
    postGroupsGroupIdUsers(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling postGroupsGroupIdUsers");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allowed_ips': opts['allowedIps'],
        'announcements_read': opts['announcementsRead'],
        'attachments_permission': opts['attachmentsPermission'],
        'authenticate_until': opts['authenticateUntil'],
        'authentication_method': opts['authenticationMethod'],
        'avatar_delete': opts['avatarDelete'],
        'avatar_file': opts['avatarFile'],
        'billing_permission': opts['billingPermission'],
        'bypass_inactive_disable': opts['bypassInactiveDisable'],
        'bypass_site_allowed_ips': opts['bypassSiteAllowedIps'],
        'change_password': opts['changePassword'],
        'change_password_confirmation': opts['changePasswordConfirmation'],
        'company': opts['company'],
        'dav_permission': opts['davPermission'],
        'disabled': opts['disabled'],
        'email': opts['email'],
        'ftp_permission': opts['ftpPermission'],
        'grant_permission': opts['grantPermission'],
        'group_ids': opts['groupIds'],
        'header_text': opts['headerText'],
        'imported_password_hash': opts['importedPasswordHash'],
        'language': opts['language'],
        'name': opts['name'],
        'notes': opts['notes'],
        'notification_daily_send_time': opts['notificationDailySendTime'],
        'office_integration_enabled': opts['officeIntegrationEnabled'],
        'password': opts['password'],
        'password_confirmation': opts['passwordConfirmation'],
        'password_validity_days': opts['passwordValidityDays'],
        'receive_admin_alerts': opts['receiveAdminAlerts'],
        'require_2fa': opts['require2fa'],
        'require_password_change': opts['requirePasswordChange'],
        'restapi_permission': opts['restapiPermission'],
        'self_managed': opts['selfManaged'],
        'sftp_permission': opts['sftpPermission'],
        'site_admin': opts['siteAdmin'],
        'skip_welcome_screen': opts['skipWelcomeScreen'],
        'ssl_required': opts['sslRequired'],
        'sso_strategy_id': opts['ssoStrategyId'],
        'subscribe_to_newsletter': opts['subscribeToNewsletter'],
        'time_zone': opts['timeZone'],
        'user_root': opts['userRoot'],
        'username': opts['username']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UserEntity;
      return this.apiClient.callApi(
        '/groups/{group_id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
