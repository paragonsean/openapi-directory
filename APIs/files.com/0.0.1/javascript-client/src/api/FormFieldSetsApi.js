/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FormFieldSetEntity from '../model/FormFieldSetEntity';
import PatchFormFieldSets from '../model/PatchFormFieldSets';
import PostFormFieldSets from '../model/PostFormFieldSets';

/**
* FormFieldSets service.
* @module api/FormFieldSetsApi
* @version 0.0.1
*/
export default class FormFieldSetsApi {

    /**
    * Constructs a new FormFieldSetsApi. 
    * @alias module:api/FormFieldSetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFormFieldSetsId operation.
     * @callback module:api/FormFieldSetsApi~deleteFormFieldSetsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Form Field Set
     * Delete Form Field Set
     * @param {Number} id Form Field Set ID.
     * @param {module:api/FormFieldSetsApi~deleteFormFieldSetsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFormFieldSetsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFormFieldSetsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/form_field_sets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFormFieldSets operation.
     * @callback module:api/FormFieldSetsApi~getFormFieldSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FormFieldSetEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Form Field Sets
     * List Form Field Sets
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/FormFieldSetsApi~getFormFieldSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FormFieldSetEntity>}
     */
    getFormFieldSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FormFieldSetEntity];
      return this.apiClient.callApi(
        '/form_field_sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFormFieldSetsId operation.
     * @callback module:api/FormFieldSetsApi~getFormFieldSetsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormFieldSetEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Form Field Set
     * Show Form Field Set
     * @param {Number} id Form Field Set ID.
     * @param {module:api/FormFieldSetsApi~getFormFieldSetsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormFieldSetEntity}
     */
    getFormFieldSetsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFormFieldSetsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FormFieldSetEntity;
      return this.apiClient.callApi(
        '/form_field_sets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFormFieldSetsId operation.
     * @callback module:api/FormFieldSetsApi~patchFormFieldSetsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormFieldSetEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Form Field Set
     * Update Form Field Set
     * @param {Number} id Form Field Set ID.
     * @param {module:model/PatchFormFieldSets} patchFormFieldSets 
     * @param {module:api/FormFieldSetsApi~patchFormFieldSetsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormFieldSetEntity}
     */
    patchFormFieldSetsId(id, patchFormFieldSets, callback) {
      let postBody = patchFormFieldSets;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchFormFieldSetsId");
      }
      // verify the required parameter 'patchFormFieldSets' is set
      if (patchFormFieldSets === undefined || patchFormFieldSets === null) {
        throw new Error("Missing the required parameter 'patchFormFieldSets' when calling patchFormFieldSetsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FormFieldSetEntity;
      return this.apiClient.callApi(
        '/form_field_sets/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postFormFieldSets operation.
     * @callback module:api/FormFieldSetsApi~postFormFieldSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FormFieldSetEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Form Field Set
     * Create Form Field Set
     * @param {module:model/PostFormFieldSets} postFormFieldSets 
     * @param {module:api/FormFieldSetsApi~postFormFieldSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FormFieldSetEntity}
     */
    postFormFieldSets(postFormFieldSets, callback) {
      let postBody = postFormFieldSets;
      // verify the required parameter 'postFormFieldSets' is set
      if (postFormFieldSets === undefined || postFormFieldSets === null) {
        throw new Error("Missing the required parameter 'postFormFieldSets' when calling postFormFieldSets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FormFieldSetEntity;
      return this.apiClient.callApi(
        '/form_field_sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
