/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LockEntity from '../model/LockEntity';

/**
* Locks service.
* @module api/LocksApi
* @version 0.0.1
*/
export default class LocksApi {

    /**
    * Constructs a new LocksApi. 
    * @alias module:api/LocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteLocksPath operation.
     * @callback module:api/LocksApi~deleteLocksPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Lock
     * Delete Lock
     * @param {String} path Path
     * @param {String} token Lock token
     * @param {module:api/LocksApi~deleteLocksPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLocksPath(path, token, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteLocksPath");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteLocksPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/locks/{path}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lockListForPath operation.
     * @callback module:api/LocksApi~lockListForPathCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LockEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Locks by path
     * List Locks by path
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {Boolean} [includeChildren] Include locks from children objects?
     * @param {module:api/LocksApi~lockListForPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LockEntity>}
     */
    lockListForPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling lockListForPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'include_children': opts['includeChildren']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LockEntity];
      return this.apiClient.callApi(
        '/locks/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLocksPath operation.
     * @callback module:api/LocksApi~postLocksPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LockEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Lock
     * Create Lock
     * @param {String} path Path
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowAccessByAnyUser] Allow lock to be updated by any user?
     * @param {Boolean} [exclusive] Is lock exclusive?
     * @param {String} [recursive] Does lock apply to subfolders?
     * @param {Number} [timeout] Lock timeout length
     * @param {module:api/LocksApi~postLocksPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LockEntity}
     */
    postLocksPath(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postLocksPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'allow_access_by_any_user': opts['allowAccessByAnyUser'],
        'exclusive': opts['exclusive'],
        'recursive': opts['recursive'],
        'timeout': opts['timeout']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = LockEntity;
      return this.apiClient.callApi(
        '/locks/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
