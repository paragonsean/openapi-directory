/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageCommentEntity from '../model/MessageCommentEntity';

/**
* MessageComments service.
* @module api/MessageCommentsApi
* @version 0.0.1
*/
export default class MessageCommentsApi {

    /**
    * Constructs a new MessageCommentsApi. 
    * @alias module:api/MessageCommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteMessageCommentsId operation.
     * @callback module:api/MessageCommentsApi~deleteMessageCommentsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Message Comment
     * Delete Message Comment
     * @param {Number} id Message Comment ID.
     * @param {module:api/MessageCommentsApi~deleteMessageCommentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMessageCommentsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMessageCommentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/message_comments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageComments operation.
     * @callback module:api/MessageCommentsApi~getMessageCommentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MessageCommentEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Message Comments
     * List Message Comments
     * @param {Number} messageId Message comment to return comments for.
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {String} [cursor] Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
     * @param {Number} [perPage] Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
     * @param {module:api/MessageCommentsApi~getMessageCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MessageCommentEntity>}
     */
    getMessageComments(messageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getMessageComments");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId'],
        'cursor': opts['cursor'],
        'per_page': opts['perPage'],
        'message_id': messageId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MessageCommentEntity];
      return this.apiClient.callApi(
        '/message_comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessageCommentsId operation.
     * @callback module:api/MessageCommentsApi~getMessageCommentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageCommentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show Message Comment
     * Show Message Comment
     * @param {Number} id Message Comment ID.
     * @param {module:api/MessageCommentsApi~getMessageCommentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageCommentEntity}
     */
    getMessageCommentsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMessageCommentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageCommentEntity;
      return this.apiClient.callApi(
        '/message_comments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchMessageCommentsId operation.
     * @callback module:api/MessageCommentsApi~patchMessageCommentsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageCommentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Message Comment
     * Update Message Comment
     * @param {Number} id Message Comment ID.
     * @param {String} body Comment body.
     * @param {module:api/MessageCommentsApi~patchMessageCommentsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageCommentEntity}
     */
    patchMessageCommentsId(id, body, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchMessageCommentsId");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchMessageCommentsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': body
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MessageCommentEntity;
      return this.apiClient.callApi(
        '/message_comments/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMessageComments operation.
     * @callback module:api/MessageCommentsApi~postMessageCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageCommentEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Message Comment
     * Create Message Comment
     * @param {String} body Comment body.
     * @param {Object} opts Optional parameters
     * @param {Number} [userId] User ID.  Provide a value of `0` to operate the current session's user.
     * @param {module:api/MessageCommentsApi~postMessageCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageCommentEntity}
     */
    postMessageComments(body, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postMessageComments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': body,
        'user_id': opts['userId']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MessageCommentEntity;
      return this.apiClient.callApi(
        '/message_comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
