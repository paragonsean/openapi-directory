/**
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileActionEntity from '../model/FileActionEntity';
import FileEntity from '../model/FileEntity';
import FileUploadPartEntity from '../model/FileUploadPartEntity';

/**
* FileActions service.
* @module api/FileActionsApi
* @version 0.0.1
*/
export default class FileActionsApi {

    /**
    * Constructs a new FileActionsApi. 
    * @alias module:api/FileActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fileActionBeginUpload operation.
     * @callback module:api/FileActionsApi~fileActionBeginUploadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileUploadPartEntity>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin file upload
     * Begin file upload
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [mkdirParents] Create parent directories if they do not exist?
     * @param {Number} [part] Part if uploading a part.
     * @param {Number} [parts] How many parts to fetch?
     * @param {String} [ref] 
     * @param {Number} [restart] File byte offset to restart from.
     * @param {Number} [size] Total bytes of file being uploaded (include bytes being retained if appending/restarting).
     * @param {Boolean} [withRename] Allow file rename instead of overwrite?
     * @param {module:api/FileActionsApi~fileActionBeginUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FileUploadPartEntity>}
     */
    fileActionBeginUpload(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling fileActionBeginUpload");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'mkdir_parents': opts['mkdirParents'],
        'part': opts['part'],
        'parts': opts['parts'],
        'ref': opts['ref'],
        'restart': opts['restart'],
        'size': opts['size'],
        'with_rename': opts['withRename']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [FileUploadPartEntity];
      return this.apiClient.callApi(
        '/file_actions/begin_upload/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileActionCopy operation.
     * @callback module:api/FileActionsApi~fileActionCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileActionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy file/folder
     * Copy file/folder
     * @param {String} path Path to operate on.
     * @param {String} destination Copy destination path.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [structure] Copy structure only?
     * @param {module:api/FileActionsApi~fileActionCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileActionEntity}
     */
    fileActionCopy(path, destination, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling fileActionCopy");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling fileActionCopy");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'destination': destination,
        'structure': opts['structure']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileActionEntity;
      return this.apiClient.callApi(
        '/file_actions/copy/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileActionFind operation.
     * @callback module:api/FileActionsApi~fileActionFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find file/folder by path
     * Find file/folder by path
     * @param {String} path Path to operate on.
     * @param {Object} opts Optional parameters
     * @param {String} [previewSize] Request a preview size.  Can be `small` (default), `large`, `xlarge`, or `pdf`.
     * @param {Boolean} [withPreviews] Include file preview information?
     * @param {Boolean} [withPriorityColor] Include file priority color information?
     * @param {module:api/FileActionsApi~fileActionFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileEntity}
     */
    fileActionFind(path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling fileActionFind");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'preview_size': opts['previewSize'],
        'with_previews': opts['withPreviews'],
        'with_priority_color': opts['withPriorityColor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileEntity;
      return this.apiClient.callApi(
        '/file_actions/metadata/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileActionMove operation.
     * @callback module:api/FileActionsApi~fileActionMoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileActionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move file/folder
     * Move file/folder
     * @param {String} path Path to operate on.
     * @param {String} destination Move destination path.
     * @param {module:api/FileActionsApi~fileActionMoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileActionEntity}
     */
    fileActionMove(path, destination, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling fileActionMove");
      }
      // verify the required parameter 'destination' is set
      if (destination === undefined || destination === null) {
        throw new Error("Missing the required parameter 'destination' when calling fileActionMove");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'destination': destination
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileActionEntity;
      return this.apiClient.callApi(
        '/file_actions/move/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
