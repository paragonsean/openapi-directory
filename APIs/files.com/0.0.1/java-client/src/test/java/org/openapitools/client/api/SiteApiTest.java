/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiKeyEntity;
import org.openapitools.client.model.DnsRecordEntity;
import java.io.File;
import org.openapitools.client.model.IpAddressEntity;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SiteEntity;
import org.openapitools.client.model.StatusEntity;
import org.openapitools.client.model.UsageSnapshotEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SiteApi
 */
@Disabled
public class SiteApiTest {

    private final SiteApi api = new SiteApi();

    /**
     * Show site settings
     *
     * Show site settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteTest() throws ApiException {
        SiteEntity response = api.getSite();
        // TODO: test validations
    }

    /**
     * List Api Keys
     *
     * List Api Keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteApiKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Object sortBy = null;
        Object filter = null;
        Object filterGt = null;
        Object filterGteq = null;
        Object filterLt = null;
        Object filterLteq = null;
        List<ApiKeyEntity> response = api.getSiteApiKeys(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLt, filterLteq);
        // TODO: test validations
    }

    /**
     * Show site DNS configuration.
     *
     * Show site DNS configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteDnsRecordsTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        List<DnsRecordEntity> response = api.getSiteDnsRecords(cursor, perPage);
        // TODO: test validations
    }

    /**
     * List IP Addresses associated with the current site
     *
     * List IP Addresses associated with the current site
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteIpAddressesTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        List<IpAddressEntity> response = api.getSiteIpAddresses(cursor, perPage);
        // TODO: test validations
    }

    /**
     * Get the most recent usage snapshot (usage data for billing purposes) for a Site.
     *
     * Get the most recent usage snapshot (usage data for billing purposes) for a Site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteUsageTest() throws ApiException {
        UsageSnapshotEntity response = api.getSiteUsage();
        // TODO: test validations
    }

    /**
     * Update site settings.
     *
     * Update site settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchSiteTest() throws ApiException {
        Integer activeSftpHostKeyId = null;
        Boolean allowBundleNames = null;
        Boolean allowed2faMethodBypassForFtpSftpDav = null;
        Boolean allowed2faMethodSms = null;
        Boolean allowed2faMethodTotp = null;
        Boolean allowed2faMethodU2f = null;
        Boolean allowed2faMethodWebauthn = null;
        Boolean allowed2faMethodYubi = null;
        String allowedCountries = null;
        String allowedIps = null;
        Boolean askAboutOverwrites = null;
        String bundleActivityNotifications = null;
        Integer bundleExpiration = null;
        Boolean bundlePasswordRequired = null;
        String bundleRegistrationNotifications = null;
        Boolean bundleRequireShareRecipient = null;
        String bundleUploadReceiptNotifications = null;
        Boolean bundleWatermarkAttachmentDelete = null;
        File bundleWatermarkAttachmentFile = null;
        Object bundleWatermarkValue = null;
        String color2Left = null;
        String color2Link = null;
        String color2Text = null;
        String color2Top = null;
        String color2TopText = null;
        Boolean customNamespace = null;
        Integer daysToRetainBackups = null;
        String defaultTimeZone = null;
        Boolean desktopApp = null;
        Boolean desktopAppSessionIpPinning = null;
        Integer desktopAppSessionLifetime = null;
        Boolean disable2faWithDelay = null;
        Boolean disableFilesCertificateGeneration = null;
        Boolean disablePasswordReset = null;
        Integer disableUsersFromInactivityPeriodDays = null;
        String disallowedCountries = null;
        String domain = null;
        Boolean domainHstsHeader = null;
        String domainLetsencryptChain = null;
        String email = null;
        Boolean folderPermissionsGroupsOnly = null;
        Boolean ftpEnabled = null;
        Boolean icon128Delete = null;
        File icon128File = null;
        Boolean icon16Delete = null;
        File icon16File = null;
        Boolean icon32Delete = null;
        File icon32File = null;
        Boolean icon48Delete = null;
        File icon48File = null;
        Boolean immutableFiles = null;
        Boolean includePasswordInWelcomeEmail = null;
        String language = null;
        String ldapBaseDn = null;
        String ldapDomain = null;
        Boolean ldapEnabled = null;
        String ldapGroupAction = null;
        String ldapGroupExclusion = null;
        String ldapGroupInclusion = null;
        String ldapHost = null;
        String ldapHost2 = null;
        String ldapHost3 = null;
        String ldapPasswordChange = null;
        String ldapPasswordChangeConfirmation = null;
        Integer ldapPort = null;
        Boolean ldapSecure = null;
        String ldapType = null;
        String ldapUserAction = null;
        String ldapUserIncludeGroups = null;
        String ldapUsername = null;
        String ldapUsernameField = null;
        String loginHelpText = null;
        Boolean logoDelete = null;
        File logoFile = null;
        Integer maxPriorPasswords = null;
        Boolean mobileApp = null;
        Boolean mobileAppSessionIpPinning = null;
        Integer mobileAppSessionLifetime = null;
        String motdText = null;
        Boolean motdUseForFtp = null;
        Boolean motdUseForSftp = null;
        String name = null;
        Boolean nonSsoGroupsAllowed = null;
        Boolean nonSsoUsersAllowed = null;
        Boolean officeIntegrationAvailable = null;
        String officeIntegrationType = null;
        Boolean optOutGlobal = null;
        Integer passwordMinLength = null;
        Boolean passwordRequireLetter = null;
        Boolean passwordRequireMixed = null;
        Boolean passwordRequireNumber = null;
        Boolean passwordRequireSpecial = null;
        Boolean passwordRequireUnbreached = null;
        Boolean passwordRequirementsApplyToBundles = null;
        Integer passwordValidityDays = null;
        Boolean pinAllRemoteServersToSiteRegion = null;
        String replyToEmail = null;
        Boolean require2fa = null;
        String require2faUserType = null;
        Double sessionExpiry = null;
        Integer sessionExpiryMinutes = null;
        Boolean sessionPinnedByIp = null;
        Boolean sftpEnabled = null;
        String sftpHostKeyType = null;
        Boolean sftpInsecureCiphers = null;
        Boolean sftpUserRootEnabled = null;
        Boolean sharingEnabled = null;
        Boolean showRequestAccessLink = null;
        String siteFooter = null;
        String siteHeader = null;
        String smtpAddress = null;
        String smtpAuthentication = null;
        String smtpFrom = null;
        String smtpPassword = null;
        Integer smtpPort = null;
        String smtpUsername = null;
        Boolean sslRequired = null;
        String subdomain = null;
        Boolean tlsDisabled = null;
        Boolean uploadsViaEmailAuthentication = null;
        Boolean useProvidedModifiedAt = null;
        Boolean userLockout = null;
        Integer userLockoutLockPeriod = null;
        Integer userLockoutTries = null;
        Integer userLockoutWithin = null;
        Boolean userRequestsEnabled = null;
        Boolean userRequestsNotifyAdmins = null;
        String welcomeCustomText = null;
        String welcomeEmailCc = null;
        Boolean welcomeEmailEnabled = null;
        String welcomeEmailSubject = null;
        String welcomeScreen = null;
        Boolean windowsModeFtp = null;
        SiteEntity response = api.patchSite(activeSftpHostKeyId, allowBundleNames, allowed2faMethodBypassForFtpSftpDav, allowed2faMethodSms, allowed2faMethodTotp, allowed2faMethodU2f, allowed2faMethodWebauthn, allowed2faMethodYubi, allowedCountries, allowedIps, askAboutOverwrites, bundleActivityNotifications, bundleExpiration, bundlePasswordRequired, bundleRegistrationNotifications, bundleRequireShareRecipient, bundleUploadReceiptNotifications, bundleWatermarkAttachmentDelete, bundleWatermarkAttachmentFile, bundleWatermarkValue, color2Left, color2Link, color2Text, color2Top, color2TopText, customNamespace, daysToRetainBackups, defaultTimeZone, desktopApp, desktopAppSessionIpPinning, desktopAppSessionLifetime, disable2faWithDelay, disableFilesCertificateGeneration, disablePasswordReset, disableUsersFromInactivityPeriodDays, disallowedCountries, domain, domainHstsHeader, domainLetsencryptChain, email, folderPermissionsGroupsOnly, ftpEnabled, icon128Delete, icon128File, icon16Delete, icon16File, icon32Delete, icon32File, icon48Delete, icon48File, immutableFiles, includePasswordInWelcomeEmail, language, ldapBaseDn, ldapDomain, ldapEnabled, ldapGroupAction, ldapGroupExclusion, ldapGroupInclusion, ldapHost, ldapHost2, ldapHost3, ldapPasswordChange, ldapPasswordChangeConfirmation, ldapPort, ldapSecure, ldapType, ldapUserAction, ldapUserIncludeGroups, ldapUsername, ldapUsernameField, loginHelpText, logoDelete, logoFile, maxPriorPasswords, mobileApp, mobileAppSessionIpPinning, mobileAppSessionLifetime, motdText, motdUseForFtp, motdUseForSftp, name, nonSsoGroupsAllowed, nonSsoUsersAllowed, officeIntegrationAvailable, officeIntegrationType, optOutGlobal, passwordMinLength, passwordRequireLetter, passwordRequireMixed, passwordRequireNumber, passwordRequireSpecial, passwordRequireUnbreached, passwordRequirementsApplyToBundles, passwordValidityDays, pinAllRemoteServersToSiteRegion, replyToEmail, require2fa, require2faUserType, sessionExpiry, sessionExpiryMinutes, sessionPinnedByIp, sftpEnabled, sftpHostKeyType, sftpInsecureCiphers, sftpUserRootEnabled, sharingEnabled, showRequestAccessLink, siteFooter, siteHeader, smtpAddress, smtpAuthentication, smtpFrom, smtpPassword, smtpPort, smtpUsername, sslRequired, subdomain, tlsDisabled, uploadsViaEmailAuthentication, useProvidedModifiedAt, userLockout, userLockoutLockPeriod, userLockoutTries, userLockoutWithin, userRequestsEnabled, userRequestsNotifyAdmins, welcomeCustomText, welcomeEmailCc, welcomeEmailEnabled, welcomeEmailSubject, welcomeScreen, windowsModeFtp);
        // TODO: test validations
    }

    /**
     * Create Api Key
     *
     * Create Api Key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSiteApiKeysTest() throws ApiException {
        String description = null;
        OffsetDateTime expiresAt = null;
        String name = null;
        String path = null;
        String permissionSet = null;
        Integer userId = null;
        ApiKeyEntity response = api.postSiteApiKeys(description, expiresAt, name, path, permissionSet, userId);
        // TODO: test validations
    }

    /**
     * Test webhook.
     *
     * Test webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSiteTestWebhookTest() throws ApiException {
        String url = null;
        String action = null;
        Object body = null;
        String encoding = null;
        Object headers = null;
        String method = null;
        StatusEntity response = api.postSiteTestWebhook(url, action, body, encoding, headers, method);
        // TODO: test validations
    }

}
