/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiKeyEntity;
import java.io.File;
import org.openapitools.client.model.GroupUserEntity;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PublicKeyEntity;
import org.openapitools.client.model.UserEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * List Api Keys
     *
     * List Api Keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserApiKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Object sortBy = null;
        Object filter = null;
        Object filterGt = null;
        Object filterGteq = null;
        Object filterLt = null;
        Object filterLteq = null;
        List<ApiKeyEntity> response = api.getUserApiKeys(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLt, filterLteq);
        // TODO: test validations
    }

    /**
     * List Group Users
     *
     * List Group Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserGroupsTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Integer groupId = null;
        List<GroupUserEntity> response = api.getUserGroups(userId, cursor, perPage, groupId);
        // TODO: test validations
    }

    /**
     * List Public Keys
     *
     * List Public Keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPublicKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        List<PublicKeyEntity> response = api.getUserPublicKeys(userId, cursor, perPage);
        // TODO: test validations
    }

    /**
     * Update User
     *
     * Update User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        String allowedIps = null;
        Boolean announcementsRead = null;
        Boolean attachmentsPermission = null;
        OffsetDateTime authenticateUntil = null;
        String authenticationMethod = null;
        Boolean avatarDelete = null;
        File avatarFile = null;
        Boolean billingPermission = null;
        Boolean bypassInactiveDisable = null;
        Boolean bypassSiteAllowedIps = null;
        String changePassword = null;
        String changePasswordConfirmation = null;
        String company = null;
        Boolean davPermission = null;
        Boolean disabled = null;
        String email = null;
        Boolean ftpPermission = null;
        String grantPermission = null;
        Integer groupId = null;
        String groupIds = null;
        String headerText = null;
        String importedPasswordHash = null;
        String language = null;
        String name = null;
        String notes = null;
        Integer notificationDailySendTime = null;
        Boolean officeIntegrationEnabled = null;
        String password = null;
        String passwordConfirmation = null;
        Integer passwordValidityDays = null;
        Boolean receiveAdminAlerts = null;
        String require2fa = null;
        Boolean requirePasswordChange = null;
        Boolean restapiPermission = null;
        Boolean selfManaged = null;
        Boolean sftpPermission = null;
        Boolean siteAdmin = null;
        Boolean skipWelcomeScreen = null;
        String sslRequired = null;
        Integer ssoStrategyId = null;
        Boolean subscribeToNewsletter = null;
        String timeZone = null;
        String userRoot = null;
        String username = null;
        UserEntity response = api.patchUser(allowedIps, announcementsRead, attachmentsPermission, authenticateUntil, authenticationMethod, avatarDelete, avatarFile, billingPermission, bypassInactiveDisable, bypassSiteAllowedIps, changePassword, changePasswordConfirmation, company, davPermission, disabled, email, ftpPermission, grantPermission, groupId, groupIds, headerText, importedPasswordHash, language, name, notes, notificationDailySendTime, officeIntegrationEnabled, password, passwordConfirmation, passwordValidityDays, receiveAdminAlerts, require2fa, requirePasswordChange, restapiPermission, selfManaged, sftpPermission, siteAdmin, skipWelcomeScreen, sslRequired, ssoStrategyId, subscribeToNewsletter, timeZone, userRoot, username);
        // TODO: test validations
    }

    /**
     * Create Api Key
     *
     * Create Api Key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUserApiKeysTest() throws ApiException {
        String description = null;
        OffsetDateTime expiresAt = null;
        String name = null;
        String path = null;
        String permissionSet = null;
        Integer userId = null;
        ApiKeyEntity response = api.postUserApiKeys(description, expiresAt, name, path, permissionSet, userId);
        // TODO: test validations
    }

    /**
     * Create Public Key
     *
     * Create Public Key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUserPublicKeysTest() throws ApiException {
        String publicKey = null;
        String title = null;
        Integer userId = null;
        PublicKeyEntity response = api.postUserPublicKeys(publicKey, title, userId);
        // TODO: test validations
    }

}
