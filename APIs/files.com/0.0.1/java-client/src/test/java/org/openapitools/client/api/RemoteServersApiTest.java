/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RemoteServerConfigurationFileEntity;
import org.openapitools.client.model.RemoteServerEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RemoteServersApi
 */
@Disabled
public class RemoteServersApiTest {

    private final RemoteServersApi api = new RemoteServersApi();

    /**
     * Delete Remote Server
     *
     * Delete Remote Server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRemoteServersIdTest() throws ApiException {
        Integer id = null;
        api.deleteRemoteServersId(id);
        // TODO: test validations
    }

    /**
     * List Remote Servers
     *
     * List Remote Servers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemoteServersTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        List<RemoteServerEntity> response = api.getRemoteServers(cursor, perPage);
        // TODO: test validations
    }

    /**
     * Show Remote Server
     *
     * Show Remote Server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemoteServersIdTest() throws ApiException {
        Integer id = null;
        RemoteServerEntity response = api.getRemoteServersId(id);
        // TODO: test validations
    }

    /**
     * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
     *
     * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRemoteServersIdConfigurationFileTest() throws ApiException {
        Integer id = null;
        RemoteServerConfigurationFileEntity response = api.getRemoteServersIdConfigurationFile(id);
        // TODO: test validations
    }

    /**
     * Update Remote Server
     *
     * Update Remote Server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchRemoteServersIdTest() throws ApiException {
        Integer id = null;
        String awsAccessKey = null;
        String awsSecretKey = null;
        String azureBlobStorageAccessKey = null;
        String azureBlobStorageAccount = null;
        String azureBlobStorageContainer = null;
        String azureBlobStorageSasToken = null;
        String azureFilesStorageAccessKey = null;
        String azureFilesStorageAccount = null;
        String azureFilesStorageSasToken = null;
        String azureFilesStorageShareName = null;
        String backblazeB2ApplicationKey = null;
        String backblazeB2Bucket = null;
        String backblazeB2KeyId = null;
        String backblazeB2S3Endpoint = null;
        Boolean enableDedicatedIps = null;
        String filebaseAccessKey = null;
        String filebaseBucket = null;
        String filebaseSecretKey = null;
        String filesAgentPermissionSet = null;
        String filesAgentRoot = null;
        String googleCloudStorageBucket = null;
        String googleCloudStorageCredentialsJson = null;
        String googleCloudStorageProjectId = null;
        String hostname = null;
        Integer maxConnections = null;
        String name = null;
        String oneDriveAccountType = null;
        String password = null;
        Boolean pinToSiteRegion = null;
        Integer port = null;
        String privateKey = null;
        String privateKeyPassphrase = null;
        String rackspaceApiKey = null;
        String rackspaceContainer = null;
        String rackspaceRegion = null;
        String rackspaceUsername = null;
        Boolean resetAuthentication = null;
        String s3Bucket = null;
        String s3CompatibleAccessKey = null;
        String s3CompatibleBucket = null;
        String s3CompatibleEndpoint = null;
        String s3CompatibleRegion = null;
        String s3CompatibleSecretKey = null;
        String s3Region = null;
        String serverCertificate = null;
        String serverHostKey = null;
        String serverType = null;
        String ssl = null;
        String sslCertificate = null;
        String username = null;
        String wasabiAccessKey = null;
        String wasabiBucket = null;
        String wasabiRegion = null;
        String wasabiSecretKey = null;
        RemoteServerEntity response = api.patchRemoteServersId(id, awsAccessKey, awsSecretKey, azureBlobStorageAccessKey, azureBlobStorageAccount, azureBlobStorageContainer, azureBlobStorageSasToken, azureFilesStorageAccessKey, azureFilesStorageAccount, azureFilesStorageSasToken, azureFilesStorageShareName, backblazeB2ApplicationKey, backblazeB2Bucket, backblazeB2KeyId, backblazeB2S3Endpoint, enableDedicatedIps, filebaseAccessKey, filebaseBucket, filebaseSecretKey, filesAgentPermissionSet, filesAgentRoot, googleCloudStorageBucket, googleCloudStorageCredentialsJson, googleCloudStorageProjectId, hostname, maxConnections, name, oneDriveAccountType, password, pinToSiteRegion, port, privateKey, privateKeyPassphrase, rackspaceApiKey, rackspaceContainer, rackspaceRegion, rackspaceUsername, resetAuthentication, s3Bucket, s3CompatibleAccessKey, s3CompatibleBucket, s3CompatibleEndpoint, s3CompatibleRegion, s3CompatibleSecretKey, s3Region, serverCertificate, serverHostKey, serverType, ssl, sslCertificate, username, wasabiAccessKey, wasabiBucket, wasabiRegion, wasabiSecretKey);
        // TODO: test validations
    }

    /**
     * Create Remote Server
     *
     * Create Remote Server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRemoteServersTest() throws ApiException {
        String awsAccessKey = null;
        String awsSecretKey = null;
        String azureBlobStorageAccessKey = null;
        String azureBlobStorageAccount = null;
        String azureBlobStorageContainer = null;
        String azureBlobStorageSasToken = null;
        String azureFilesStorageAccessKey = null;
        String azureFilesStorageAccount = null;
        String azureFilesStorageSasToken = null;
        String azureFilesStorageShareName = null;
        String backblazeB2ApplicationKey = null;
        String backblazeB2Bucket = null;
        String backblazeB2KeyId = null;
        String backblazeB2S3Endpoint = null;
        Boolean enableDedicatedIps = null;
        String filebaseAccessKey = null;
        String filebaseBucket = null;
        String filebaseSecretKey = null;
        String filesAgentPermissionSet = null;
        String filesAgentRoot = null;
        String googleCloudStorageBucket = null;
        String googleCloudStorageCredentialsJson = null;
        String googleCloudStorageProjectId = null;
        String hostname = null;
        Integer maxConnections = null;
        String name = null;
        String oneDriveAccountType = null;
        String password = null;
        Boolean pinToSiteRegion = null;
        Integer port = null;
        String privateKey = null;
        String privateKeyPassphrase = null;
        String rackspaceApiKey = null;
        String rackspaceContainer = null;
        String rackspaceRegion = null;
        String rackspaceUsername = null;
        Boolean resetAuthentication = null;
        String s3Bucket = null;
        String s3CompatibleAccessKey = null;
        String s3CompatibleBucket = null;
        String s3CompatibleEndpoint = null;
        String s3CompatibleRegion = null;
        String s3CompatibleSecretKey = null;
        String s3Region = null;
        String serverCertificate = null;
        String serverHostKey = null;
        String serverType = null;
        String ssl = null;
        String sslCertificate = null;
        String username = null;
        String wasabiAccessKey = null;
        String wasabiBucket = null;
        String wasabiRegion = null;
        String wasabiSecretKey = null;
        RemoteServerEntity response = api.postRemoteServers(awsAccessKey, awsSecretKey, azureBlobStorageAccessKey, azureBlobStorageAccount, azureBlobStorageContainer, azureBlobStorageSasToken, azureFilesStorageAccessKey, azureFilesStorageAccount, azureFilesStorageSasToken, azureFilesStorageShareName, backblazeB2ApplicationKey, backblazeB2Bucket, backblazeB2KeyId, backblazeB2S3Endpoint, enableDedicatedIps, filebaseAccessKey, filebaseBucket, filebaseSecretKey, filesAgentPermissionSet, filesAgentRoot, googleCloudStorageBucket, googleCloudStorageCredentialsJson, googleCloudStorageProjectId, hostname, maxConnections, name, oneDriveAccountType, password, pinToSiteRegion, port, privateKey, privateKeyPassphrase, rackspaceApiKey, rackspaceContainer, rackspaceRegion, rackspaceUsername, resetAuthentication, s3Bucket, s3CompatibleAccessKey, s3CompatibleBucket, s3CompatibleEndpoint, s3CompatibleRegion, s3CompatibleSecretKey, s3Region, serverCertificate, serverHostKey, serverType, ssl, sslCertificate, username, wasabiAccessKey, wasabiBucket, wasabiRegion, wasabiSecretKey);
        // TODO: test validations
    }

    /**
     * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
     *
     * Post local changes, check in, and download configuration file (used by some Remote Server integrations, such as the Files.com Agent)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRemoteServersIdConfigurationFileTest() throws ApiException {
        Integer id = null;
        String apiToken = null;
        String configVersion = null;
        String hostname = null;
        String permissionSet = null;
        Integer port = null;
        String privateKey = null;
        String publicKey = null;
        String root = null;
        String serverHostKey = null;
        String status = null;
        String subdomain = null;
        RemoteServerConfigurationFileEntity response = api.postRemoteServersIdConfigurationFile(id, apiToken, configVersion, hostname, permissionSet, port, privateKey, publicKey, root, serverHostKey, status, subdomain);
        // TODO: test validations
    }

}
