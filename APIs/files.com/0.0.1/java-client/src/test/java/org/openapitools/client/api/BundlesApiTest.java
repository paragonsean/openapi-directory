/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BundleEntity;
import java.io.File;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BundlesApi
 */
@Disabled
public class BundlesApiTest {

    private final BundlesApi api = new BundlesApi();

    /**
     * Delete Bundle
     *
     * Delete Bundle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBundlesIdTest() throws ApiException {
        Integer id = null;
        api.deleteBundlesId(id);
        // TODO: test validations
    }

    /**
     * List Bundles
     *
     * List Bundles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBundlesTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Object sortBy = null;
        Object filter = null;
        Object filterGt = null;
        Object filterGteq = null;
        Object filterLt = null;
        Object filterLteq = null;
        List<BundleEntity> response = api.getBundles(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLt, filterLteq);
        // TODO: test validations
    }

    /**
     * Show Bundle
     *
     * Show Bundle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBundlesIdTest() throws ApiException {
        Integer id = null;
        BundleEntity response = api.getBundlesId(id);
        // TODO: test validations
    }

    /**
     * Update Bundle
     *
     * Update Bundle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchBundlesIdTest() throws ApiException {
        Integer id = null;
        Integer clickwrapId = null;
        String code = null;
        String description = null;
        Boolean dontSeparateSubmissionsByFolder = null;
        OffsetDateTime expiresAt = null;
        Integer formFieldSetId = null;
        Integer inboxId = null;
        Integer maxUses = null;
        String note = null;
        String password = null;
        String pathTemplate = null;
        List<String> paths = null;
        String permissions = null;
        Boolean previewOnly = null;
        Boolean requireRegistration = null;
        Boolean requireShareRecipient = null;
        Boolean sendEmailReceiptToUploader = null;
        Boolean skipCompany = null;
        Boolean skipEmail = null;
        Boolean skipName = null;
        Boolean watermarkAttachmentDelete = null;
        File watermarkAttachmentFile = null;
        BundleEntity response = api.patchBundlesId(id, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, paths, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, watermarkAttachmentDelete, watermarkAttachmentFile);
        // TODO: test validations
    }

    /**
     * Create Bundle
     *
     * Create Bundle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBundlesTest() throws ApiException {
        List<String> paths = null;
        Integer clickwrapId = null;
        String code = null;
        String description = null;
        Boolean dontSeparateSubmissionsByFolder = null;
        OffsetDateTime expiresAt = null;
        Integer formFieldSetId = null;
        Integer inboxId = null;
        Integer maxUses = null;
        String note = null;
        String password = null;
        String pathTemplate = null;
        String permissions = null;
        Boolean previewOnly = null;
        Boolean requireRegistration = null;
        Boolean requireShareRecipient = null;
        Boolean sendEmailReceiptToUploader = null;
        Boolean skipCompany = null;
        Boolean skipEmail = null;
        Boolean skipName = null;
        Integer userId = null;
        File watermarkAttachmentFile = null;
        BundleEntity response = api.postBundles(paths, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, userId, watermarkAttachmentFile);
        // TODO: test validations
    }

    /**
     * Send email(s) with a link to bundle
     *
     * Send email(s) with a link to bundle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBundlesIdShareTest() throws ApiException {
        Integer id = null;
        String note = null;
        List<Object> recipients = null;
        List<String> to = null;
        api.postBundlesIdShare(id, note, recipients, to);
        // TODO: test validations
    }

}
