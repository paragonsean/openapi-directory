/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BundleNotificationEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BundleNotificationsApi
 */
@Disabled
public class BundleNotificationsApiTest {

    private final BundleNotificationsApi api = new BundleNotificationsApi();

    /**
     * Delete Bundle Notification
     *
     * Delete Bundle Notification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBundleNotificationsIdTest() throws ApiException {
        Integer id = null;
        api.deleteBundleNotificationsId(id);
        // TODO: test validations
    }

    /**
     * List Bundle Notifications
     *
     * List Bundle Notifications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBundleNotificationsTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Object sortBy = null;
        String bundleId = null;
        Object filter = null;
        List<BundleNotificationEntity> response = api.getBundleNotifications(userId, cursor, perPage, sortBy, bundleId, filter);
        // TODO: test validations
    }

    /**
     * Show Bundle Notification
     *
     * Show Bundle Notification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBundleNotificationsIdTest() throws ApiException {
        Integer id = null;
        BundleNotificationEntity response = api.getBundleNotificationsId(id);
        // TODO: test validations
    }

    /**
     * Update Bundle Notification
     *
     * Update Bundle Notification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchBundleNotificationsIdTest() throws ApiException {
        Integer id = null;
        Boolean notifyOnRegistration = null;
        Boolean notifyOnUpload = null;
        BundleNotificationEntity response = api.patchBundleNotificationsId(id, notifyOnRegistration, notifyOnUpload);
        // TODO: test validations
    }

    /**
     * Create Bundle Notification
     *
     * Create Bundle Notification
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBundleNotificationsTest() throws ApiException {
        Integer bundleId = null;
        Boolean notifyOnRegistration = null;
        Boolean notifyOnUpload = null;
        Integer userId = null;
        BundleNotificationEntity response = api.postBundleNotifications(bundleId, notifyOnRegistration, notifyOnUpload, userId);
        // TODO: test validations
    }

}
