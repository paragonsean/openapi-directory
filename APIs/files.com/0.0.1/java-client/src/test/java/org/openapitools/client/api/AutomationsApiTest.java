/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutomationEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AutomationsApi
 */
@Disabled
public class AutomationsApiTest {

    private final AutomationsApi api = new AutomationsApi();

    /**
     * Delete Automation
     *
     * Delete Automation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAutomationsIdTest() throws ApiException {
        Integer id = null;
        api.deleteAutomationsId(id);
        // TODO: test validations
    }

    /**
     * List Automations
     *
     * List Automations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutomationsTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        Object sortBy = null;
        String automation = null;
        Object filter = null;
        Object filterGt = null;
        Object filterGteq = null;
        Object filterLt = null;
        Object filterLteq = null;
        Boolean withDeleted = null;
        List<AutomationEntity> response = api.getAutomations(cursor, perPage, sortBy, automation, filter, filterGt, filterGteq, filterLt, filterLteq, withDeleted);
        // TODO: test validations
    }

    /**
     * Show Automation
     *
     * Show Automation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAutomationsIdTest() throws ApiException {
        Integer id = null;
        AutomationEntity response = api.getAutomationsId(id);
        // TODO: test validations
    }

    /**
     * Update Automation
     *
     * Update Automation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchAutomationsIdTest() throws ApiException {
        Integer id = null;
        String automation = null;
        String description = null;
        String destination = null;
        String destinationReplaceFrom = null;
        String destinationReplaceTo = null;
        List<String> destinations = null;
        Boolean disabled = null;
        String groupIds = null;
        String interval = null;
        String name = null;
        String path = null;
        Integer recurringDay = null;
        Object schedule = null;
        String source = null;
        String syncIds = null;
        String trigger = null;
        List<String> triggerActions = null;
        String userIds = null;
        Object value = null;
        AutomationEntity response = api.patchAutomationsId(id, automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value);
        // TODO: test validations
    }

    /**
     * Create Automation
     *
     * Create Automation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAutomationsTest() throws ApiException {
        String automation = null;
        String description = null;
        String destination = null;
        String destinationReplaceFrom = null;
        String destinationReplaceTo = null;
        List<String> destinations = null;
        Boolean disabled = null;
        String groupIds = null;
        String interval = null;
        String name = null;
        String path = null;
        Integer recurringDay = null;
        Object schedule = null;
        String source = null;
        String syncIds = null;
        String trigger = null;
        List<String> triggerActions = null;
        String userIds = null;
        Object value = null;
        AutomationEntity response = api.postAutomations(automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value);
        // TODO: test validations
    }

}
