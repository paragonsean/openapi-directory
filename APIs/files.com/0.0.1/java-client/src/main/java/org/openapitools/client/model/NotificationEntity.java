/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Notifications
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationEntity {
  public static final String SERIALIZED_NAME_GROUP_ID = "group_id";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private Integer groupId;

  public static final String SERIALIZED_NAME_GROUP_NAME = "group_name";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NOTIFY_ON_COPY = "notify_on_copy";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_COPY)
  private Boolean notifyOnCopy;

  public static final String SERIALIZED_NAME_NOTIFY_ON_DELETE = "notify_on_delete";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_DELETE)
  private Boolean notifyOnDelete;

  public static final String SERIALIZED_NAME_NOTIFY_ON_DOWNLOAD = "notify_on_download";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_DOWNLOAD)
  private Boolean notifyOnDownload;

  public static final String SERIALIZED_NAME_NOTIFY_ON_MOVE = "notify_on_move";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_MOVE)
  private Boolean notifyOnMove;

  public static final String SERIALIZED_NAME_NOTIFY_ON_UPLOAD = "notify_on_upload";
  @SerializedName(SERIALIZED_NAME_NOTIFY_ON_UPLOAD)
  private Boolean notifyOnUpload;

  public static final String SERIALIZED_NAME_NOTIFY_USER_ACTIONS = "notify_user_actions";
  @SerializedName(SERIALIZED_NAME_NOTIFY_USER_ACTIONS)
  private Boolean notifyUserActions;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RECURSIVE = "recursive";
  @SerializedName(SERIALIZED_NAME_RECURSIVE)
  private Boolean recursive;

  /**
   * The time interval that notifications are aggregated to
   */
  @JsonAdapter(SendIntervalEnum.Adapter.class)
  public enum SendIntervalEnum {
    FIVE_MINUTES("five_minutes"),
    
    FIFTEEN_MINUTES("fifteen_minutes"),
    
    HOURLY("hourly"),
    
    DAILY("daily");

    private String value;

    SendIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendIntervalEnum fromValue(String value) {
      for (SendIntervalEnum b : SendIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SendIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SendIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEND_INTERVAL = "send_interval";
  @SerializedName(SERIALIZED_NAME_SEND_INTERVAL)
  private SendIntervalEnum sendInterval;

  public static final String SERIALIZED_NAME_SUPPRESSED_EMAIL = "suppressed_email";
  @SerializedName(SERIALIZED_NAME_SUPPRESSED_EMAIL)
  private Boolean suppressedEmail;

  public static final String SERIALIZED_NAME_TRIGGER_BY_SHARE_RECIPIENTS = "trigger_by_share_recipients";
  @SerializedName(SERIALIZED_NAME_TRIGGER_BY_SHARE_RECIPIENTS)
  private Boolean triggerByShareRecipients;

  public static final String SERIALIZED_NAME_TRIGGERING_FILENAMES = "triggering_filenames";
  @SerializedName(SERIALIZED_NAME_TRIGGERING_FILENAMES)
  private List<String> triggeringFilenames = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGERING_GROUP_IDS = "triggering_group_ids";
  @SerializedName(SERIALIZED_NAME_TRIGGERING_GROUP_IDS)
  private List<Integer> triggeringGroupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGERING_USER_IDS = "triggering_user_ids";
  @SerializedName(SERIALIZED_NAME_TRIGGERING_USER_IDS)
  private List<Integer> triggeringUserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNSUBSCRIBED = "unsubscribed";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED)
  private Boolean unsubscribed;

  /**
   * The reason that the user unsubscribed
   */
  @JsonAdapter(UnsubscribedReasonEnum.Adapter.class)
  public enum UnsubscribedReasonEnum {
    NONE("none"),
    
    UNSUBSCRIBE_LINK_CLICKED("unsubscribe_link_clicked"),
    
    MAIL_BOUNCED("mail_bounced"),
    
    MAIL_MARKED_AS_SPAM("mail_marked_as_spam");

    private String value;

    UnsubscribedReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnsubscribedReasonEnum fromValue(String value) {
      for (UnsubscribedReasonEnum b : UnsubscribedReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnsubscribedReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnsubscribedReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnsubscribedReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnsubscribedReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnsubscribedReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNSUBSCRIBED_REASON = "unsubscribed_reason";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED_REASON)
  private UnsubscribedReasonEnum unsubscribedReason;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public NotificationEntity() {
  }

  public NotificationEntity groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Notification group id
   * @return groupId
   */
  @javax.annotation.Nullable
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }


  public NotificationEntity groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * Group name if applicable
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public NotificationEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Notification ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public NotificationEntity message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Custom message to include in notification emails.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public NotificationEntity notifyOnCopy(Boolean notifyOnCopy) {
    this.notifyOnCopy = notifyOnCopy;
    return this;
  }

  /**
   * Triggers notification when copying files to this path
   * @return notifyOnCopy
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnCopy() {
    return notifyOnCopy;
  }

  public void setNotifyOnCopy(Boolean notifyOnCopy) {
    this.notifyOnCopy = notifyOnCopy;
  }


  public NotificationEntity notifyOnDelete(Boolean notifyOnDelete) {
    this.notifyOnDelete = notifyOnDelete;
    return this;
  }

  /**
   * Triggers notification when deleting files from this path
   * @return notifyOnDelete
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnDelete() {
    return notifyOnDelete;
  }

  public void setNotifyOnDelete(Boolean notifyOnDelete) {
    this.notifyOnDelete = notifyOnDelete;
  }


  public NotificationEntity notifyOnDownload(Boolean notifyOnDownload) {
    this.notifyOnDownload = notifyOnDownload;
    return this;
  }

  /**
   * Triggers notification when downloading files from this path
   * @return notifyOnDownload
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnDownload() {
    return notifyOnDownload;
  }

  public void setNotifyOnDownload(Boolean notifyOnDownload) {
    this.notifyOnDownload = notifyOnDownload;
  }


  public NotificationEntity notifyOnMove(Boolean notifyOnMove) {
    this.notifyOnMove = notifyOnMove;
    return this;
  }

  /**
   * Triggers notification when moving files to this path
   * @return notifyOnMove
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnMove() {
    return notifyOnMove;
  }

  public void setNotifyOnMove(Boolean notifyOnMove) {
    this.notifyOnMove = notifyOnMove;
  }


  public NotificationEntity notifyOnUpload(Boolean notifyOnUpload) {
    this.notifyOnUpload = notifyOnUpload;
    return this;
  }

  /**
   * Triggers notification when uploading new files to this path
   * @return notifyOnUpload
   */
  @javax.annotation.Nullable
  public Boolean getNotifyOnUpload() {
    return notifyOnUpload;
  }

  public void setNotifyOnUpload(Boolean notifyOnUpload) {
    this.notifyOnUpload = notifyOnUpload;
  }


  public NotificationEntity notifyUserActions(Boolean notifyUserActions) {
    this.notifyUserActions = notifyUserActions;
    return this;
  }

  /**
   * Trigger notification on notification user actions?
   * @return notifyUserActions
   */
  @javax.annotation.Nullable
  public Boolean getNotifyUserActions() {
    return notifyUserActions;
  }

  public void setNotifyUserActions(Boolean notifyUserActions) {
    this.notifyUserActions = notifyUserActions;
  }


  public NotificationEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Folder path to notify on
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public NotificationEntity recursive(Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

  /**
   * Enable notifications for each subfolder in this path
   * @return recursive
   */
  @javax.annotation.Nullable
  public Boolean getRecursive() {
    return recursive;
  }

  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }


  public NotificationEntity sendInterval(SendIntervalEnum sendInterval) {
    this.sendInterval = sendInterval;
    return this;
  }

  /**
   * The time interval that notifications are aggregated to
   * @return sendInterval
   */
  @javax.annotation.Nullable
  public SendIntervalEnum getSendInterval() {
    return sendInterval;
  }

  public void setSendInterval(SendIntervalEnum sendInterval) {
    this.sendInterval = sendInterval;
  }


  public NotificationEntity suppressedEmail(Boolean suppressedEmail) {
    this.suppressedEmail = suppressedEmail;
    return this;
  }

  /**
   * If true, it means that the recipient at this user&#39;s email address has manually unsubscribed from all emails, or had their email \&quot;hard bounce\&quot;, which means that we are unable to send mail to this user&#39;s current email address. Notifications will resume if the user changes their email address.
   * @return suppressedEmail
   */
  @javax.annotation.Nullable
  public Boolean getSuppressedEmail() {
    return suppressedEmail;
  }

  public void setSuppressedEmail(Boolean suppressedEmail) {
    this.suppressedEmail = suppressedEmail;
  }


  public NotificationEntity triggerByShareRecipients(Boolean triggerByShareRecipients) {
    this.triggerByShareRecipients = triggerByShareRecipients;
    return this;
  }

  /**
   * Notify when actions are performed by a share recipient?
   * @return triggerByShareRecipients
   */
  @javax.annotation.Nullable
  public Boolean getTriggerByShareRecipients() {
    return triggerByShareRecipients;
  }

  public void setTriggerByShareRecipients(Boolean triggerByShareRecipients) {
    this.triggerByShareRecipients = triggerByShareRecipients;
  }


  public NotificationEntity triggeringFilenames(List<String> triggeringFilenames) {
    this.triggeringFilenames = triggeringFilenames;
    return this;
  }

  public NotificationEntity addTriggeringFilenamesItem(String triggeringFilenamesItem) {
    if (this.triggeringFilenames == null) {
      this.triggeringFilenames = new ArrayList<>();
    }
    this.triggeringFilenames.add(triggeringFilenamesItem);
    return this;
  }

  /**
   * Array of filenames (possibly with wildcards) to match for action path
   * @return triggeringFilenames
   */
  @javax.annotation.Nullable
  public List<String> getTriggeringFilenames() {
    return triggeringFilenames;
  }

  public void setTriggeringFilenames(List<String> triggeringFilenames) {
    this.triggeringFilenames = triggeringFilenames;
  }


  public NotificationEntity triggeringGroupIds(List<Integer> triggeringGroupIds) {
    this.triggeringGroupIds = triggeringGroupIds;
    return this;
  }

  public NotificationEntity addTriggeringGroupIdsItem(Integer triggeringGroupIdsItem) {
    if (this.triggeringGroupIds == null) {
      this.triggeringGroupIds = new ArrayList<>();
    }
    this.triggeringGroupIds.add(triggeringGroupIdsItem);
    return this;
  }

  /**
   * Only notify on actions made by a member of one of the specified groups
   * @return triggeringGroupIds
   */
  @javax.annotation.Nullable
  public List<Integer> getTriggeringGroupIds() {
    return triggeringGroupIds;
  }

  public void setTriggeringGroupIds(List<Integer> triggeringGroupIds) {
    this.triggeringGroupIds = triggeringGroupIds;
  }


  public NotificationEntity triggeringUserIds(List<Integer> triggeringUserIds) {
    this.triggeringUserIds = triggeringUserIds;
    return this;
  }

  public NotificationEntity addTriggeringUserIdsItem(Integer triggeringUserIdsItem) {
    if (this.triggeringUserIds == null) {
      this.triggeringUserIds = new ArrayList<>();
    }
    this.triggeringUserIds.add(triggeringUserIdsItem);
    return this;
  }

  /**
   * Only notify on actions made one of the specified users
   * @return triggeringUserIds
   */
  @javax.annotation.Nullable
  public List<Integer> getTriggeringUserIds() {
    return triggeringUserIds;
  }

  public void setTriggeringUserIds(List<Integer> triggeringUserIds) {
    this.triggeringUserIds = triggeringUserIds;
  }


  public NotificationEntity unsubscribed(Boolean unsubscribed) {
    this.unsubscribed = unsubscribed;
    return this;
  }

  /**
   * Is the user unsubscribed from this notification?
   * @return unsubscribed
   */
  @javax.annotation.Nullable
  public Boolean getUnsubscribed() {
    return unsubscribed;
  }

  public void setUnsubscribed(Boolean unsubscribed) {
    this.unsubscribed = unsubscribed;
  }


  public NotificationEntity unsubscribedReason(UnsubscribedReasonEnum unsubscribedReason) {
    this.unsubscribedReason = unsubscribedReason;
    return this;
  }

  /**
   * The reason that the user unsubscribed
   * @return unsubscribedReason
   */
  @javax.annotation.Nullable
  public UnsubscribedReasonEnum getUnsubscribedReason() {
    return unsubscribedReason;
  }

  public void setUnsubscribedReason(UnsubscribedReasonEnum unsubscribedReason) {
    this.unsubscribedReason = unsubscribedReason;
  }


  public NotificationEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Notification user ID
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public NotificationEntity username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Notification username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationEntity notificationEntity = (NotificationEntity) o;
    return Objects.equals(this.groupId, notificationEntity.groupId) &&
        Objects.equals(this.groupName, notificationEntity.groupName) &&
        Objects.equals(this.id, notificationEntity.id) &&
        Objects.equals(this.message, notificationEntity.message) &&
        Objects.equals(this.notifyOnCopy, notificationEntity.notifyOnCopy) &&
        Objects.equals(this.notifyOnDelete, notificationEntity.notifyOnDelete) &&
        Objects.equals(this.notifyOnDownload, notificationEntity.notifyOnDownload) &&
        Objects.equals(this.notifyOnMove, notificationEntity.notifyOnMove) &&
        Objects.equals(this.notifyOnUpload, notificationEntity.notifyOnUpload) &&
        Objects.equals(this.notifyUserActions, notificationEntity.notifyUserActions) &&
        Objects.equals(this.path, notificationEntity.path) &&
        Objects.equals(this.recursive, notificationEntity.recursive) &&
        Objects.equals(this.sendInterval, notificationEntity.sendInterval) &&
        Objects.equals(this.suppressedEmail, notificationEntity.suppressedEmail) &&
        Objects.equals(this.triggerByShareRecipients, notificationEntity.triggerByShareRecipients) &&
        Objects.equals(this.triggeringFilenames, notificationEntity.triggeringFilenames) &&
        Objects.equals(this.triggeringGroupIds, notificationEntity.triggeringGroupIds) &&
        Objects.equals(this.triggeringUserIds, notificationEntity.triggeringUserIds) &&
        Objects.equals(this.unsubscribed, notificationEntity.unsubscribed) &&
        Objects.equals(this.unsubscribedReason, notificationEntity.unsubscribedReason) &&
        Objects.equals(this.userId, notificationEntity.userId) &&
        Objects.equals(this.username, notificationEntity.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, groupName, id, message, notifyOnCopy, notifyOnDelete, notifyOnDownload, notifyOnMove, notifyOnUpload, notifyUserActions, path, recursive, sendInterval, suppressedEmail, triggerByShareRecipients, triggeringFilenames, triggeringGroupIds, triggeringUserIds, unsubscribed, unsubscribedReason, userId, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationEntity {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    notifyOnCopy: ").append(toIndentedString(notifyOnCopy)).append("\n");
    sb.append("    notifyOnDelete: ").append(toIndentedString(notifyOnDelete)).append("\n");
    sb.append("    notifyOnDownload: ").append(toIndentedString(notifyOnDownload)).append("\n");
    sb.append("    notifyOnMove: ").append(toIndentedString(notifyOnMove)).append("\n");
    sb.append("    notifyOnUpload: ").append(toIndentedString(notifyOnUpload)).append("\n");
    sb.append("    notifyUserActions: ").append(toIndentedString(notifyUserActions)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    sendInterval: ").append(toIndentedString(sendInterval)).append("\n");
    sb.append("    suppressedEmail: ").append(toIndentedString(suppressedEmail)).append("\n");
    sb.append("    triggerByShareRecipients: ").append(toIndentedString(triggerByShareRecipients)).append("\n");
    sb.append("    triggeringFilenames: ").append(toIndentedString(triggeringFilenames)).append("\n");
    sb.append("    triggeringGroupIds: ").append(toIndentedString(triggeringGroupIds)).append("\n");
    sb.append("    triggeringUserIds: ").append(toIndentedString(triggeringUserIds)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    unsubscribedReason: ").append(toIndentedString(unsubscribedReason)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group_id");
    openapiFields.add("group_name");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("notify_on_copy");
    openapiFields.add("notify_on_delete");
    openapiFields.add("notify_on_download");
    openapiFields.add("notify_on_move");
    openapiFields.add("notify_on_upload");
    openapiFields.add("notify_user_actions");
    openapiFields.add("path");
    openapiFields.add("recursive");
    openapiFields.add("send_interval");
    openapiFields.add("suppressed_email");
    openapiFields.add("trigger_by_share_recipients");
    openapiFields.add("triggering_filenames");
    openapiFields.add("triggering_group_ids");
    openapiFields.add("triggering_user_ids");
    openapiFields.add("unsubscribed");
    openapiFields.add("unsubscribed_reason");
    openapiFields.add("user_id");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationEntity is not found in the empty JSON string", NotificationEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group_name") != null && !jsonObj.get("group_name").isJsonNull()) && !jsonObj.get("group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_name").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("send_interval") != null && !jsonObj.get("send_interval").isJsonNull()) && !jsonObj.get("send_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `send_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("send_interval").toString()));
      }
      // validate the optional field `send_interval`
      if (jsonObj.get("send_interval") != null && !jsonObj.get("send_interval").isJsonNull()) {
        SendIntervalEnum.validateJsonElement(jsonObj.get("send_interval"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("triggering_filenames") != null && !jsonObj.get("triggering_filenames").isJsonNull() && !jsonObj.get("triggering_filenames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggering_filenames` to be an array in the JSON string but got `%s`", jsonObj.get("triggering_filenames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("triggering_group_ids") != null && !jsonObj.get("triggering_group_ids").isJsonNull() && !jsonObj.get("triggering_group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggering_group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("triggering_group_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("triggering_user_ids") != null && !jsonObj.get("triggering_user_ids").isJsonNull() && !jsonObj.get("triggering_user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggering_user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("triggering_user_ids").toString()));
      }
      if ((jsonObj.get("unsubscribed_reason") != null && !jsonObj.get("unsubscribed_reason").isJsonNull()) && !jsonObj.get("unsubscribed_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsubscribed_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsubscribed_reason").toString()));
      }
      // validate the optional field `unsubscribed_reason`
      if (jsonObj.get("unsubscribed_reason") != null && !jsonObj.get("unsubscribed_reason").isJsonNull()) {
        UnsubscribedReasonEnum.validateJsonElement(jsonObj.get("unsubscribed_reason"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationEntity>() {
           @Override
           public void write(JsonWriter out, NotificationEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationEntity
   * @throws IOException if the JSON string is invalid with respect to NotificationEntity
   */
  public static NotificationEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationEntity.class);
  }

  /**
   * Convert an instance of NotificationEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

