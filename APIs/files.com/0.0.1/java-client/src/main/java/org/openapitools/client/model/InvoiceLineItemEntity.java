/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceLineItemEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceLineItemEntity {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_SERVICE_END_AT = "service_end_at";
  @SerializedName(SERIALIZED_NAME_SERVICE_END_AT)
  private OffsetDateTime serviceEndAt;

  public static final String SERIALIZED_NAME_SERVICE_START_AT = "service_start_at";
  @SerializedName(SERIALIZED_NAME_SERVICE_START_AT)
  private OffsetDateTime serviceStartAt;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private String site;

  /**
   * Invoice line item type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INVOICE("invoice"),
    
    INVOICE_ADJUSTMENT("invoice_adjustment"),
    
    USAGE_OVERAGE("usage_overage"),
    
    USER_OVERAGE("user_overage"),
    
    ADDON_SUBSCRIPTION("addon_subscription"),
    
    MISC_FEE("misc_fee"),
    
    USAGE_OVERAGE_ADJUSTMENT("usage_overage_adjustment"),
    
    USER_OVERAGE_ADJUSTMENT("user_overage_adjustment"),
    
    ADDON_SUBSCRIPTION_ADJUSTMENT("addon_subscription_adjustment"),
    
    MISC_FEE_ADJUSTMENT("misc_fee_adjustment"),
    
    CREDIT_EXPIRATION("credit_expiration");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public InvoiceLineItemEntity() {
  }

  public InvoiceLineItemEntity amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Invoice line item amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public InvoiceLineItemEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Invoice line item created at date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InvoiceLineItemEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Invoice line item description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InvoiceLineItemEntity plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Plan name
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public InvoiceLineItemEntity serviceEndAt(OffsetDateTime serviceEndAt) {
    this.serviceEndAt = serviceEndAt;
    return this;
  }

  /**
   * Invoice line item service end date/time
   * @return serviceEndAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServiceEndAt() {
    return serviceEndAt;
  }

  public void setServiceEndAt(OffsetDateTime serviceEndAt) {
    this.serviceEndAt = serviceEndAt;
  }


  public InvoiceLineItemEntity serviceStartAt(OffsetDateTime serviceStartAt) {
    this.serviceStartAt = serviceStartAt;
    return this;
  }

  /**
   * Invoice line item service start date/time
   * @return serviceStartAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServiceStartAt() {
    return serviceStartAt;
  }

  public void setServiceStartAt(OffsetDateTime serviceStartAt) {
    this.serviceStartAt = serviceStartAt;
  }


  public InvoiceLineItemEntity site(String site) {
    this.site = site;
    return this;
  }

  /**
   * Site name
   * @return site
   */
  @javax.annotation.Nullable
  public String getSite() {
    return site;
  }

  public void setSite(String site) {
    this.site = site;
  }


  public InvoiceLineItemEntity type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Invoice line item type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public InvoiceLineItemEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Invoice line item updated date/time
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceLineItemEntity invoiceLineItemEntity = (InvoiceLineItemEntity) o;
    return Objects.equals(this.amount, invoiceLineItemEntity.amount) &&
        Objects.equals(this.createdAt, invoiceLineItemEntity.createdAt) &&
        Objects.equals(this.description, invoiceLineItemEntity.description) &&
        Objects.equals(this.plan, invoiceLineItemEntity.plan) &&
        Objects.equals(this.serviceEndAt, invoiceLineItemEntity.serviceEndAt) &&
        Objects.equals(this.serviceStartAt, invoiceLineItemEntity.serviceStartAt) &&
        Objects.equals(this.site, invoiceLineItemEntity.site) &&
        Objects.equals(this.type, invoiceLineItemEntity.type) &&
        Objects.equals(this.updatedAt, invoiceLineItemEntity.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, createdAt, description, plan, serviceEndAt, serviceStartAt, site, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceLineItemEntity {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    serviceEndAt: ").append(toIndentedString(serviceEndAt)).append("\n");
    sb.append("    serviceStartAt: ").append(toIndentedString(serviceStartAt)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("plan");
    openapiFields.add("service_end_at");
    openapiFields.add("service_start_at");
    openapiFields.add("site");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceLineItemEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceLineItemEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceLineItemEntity is not found in the empty JSON string", InvoiceLineItemEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceLineItemEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceLineItemEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("site") != null && !jsonObj.get("site").isJsonNull()) && !jsonObj.get("site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceLineItemEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceLineItemEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceLineItemEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceLineItemEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceLineItemEntity>() {
           @Override
           public void write(JsonWriter out, InvoiceLineItemEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceLineItemEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceLineItemEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceLineItemEntity
   * @throws IOException if the JSON string is invalid with respect to InvoiceLineItemEntity
   */
  public static InvoiceLineItemEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceLineItemEntity.class);
  }

  /**
   * Convert an instance of InvoiceLineItemEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

