/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Show Action Notification Export
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionNotificationExportEntity {
  public static final String SERIALIZED_NAME_END_AT = "end_at";
  @SerializedName(SERIALIZED_NAME_END_AT)
  private OffsetDateTime endAt;

  public static final String SERIALIZED_NAME_EXPORT_VERSION = "export_version";
  @SerializedName(SERIALIZED_NAME_EXPORT_VERSION)
  private String exportVersion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_QUERY_FOLDER = "query_folder";
  @SerializedName(SERIALIZED_NAME_QUERY_FOLDER)
  private String queryFolder;

  public static final String SERIALIZED_NAME_QUERY_MESSAGE = "query_message";
  @SerializedName(SERIALIZED_NAME_QUERY_MESSAGE)
  private String queryMessage;

  public static final String SERIALIZED_NAME_QUERY_PATH = "query_path";
  @SerializedName(SERIALIZED_NAME_QUERY_PATH)
  private String queryPath;

  public static final String SERIALIZED_NAME_QUERY_REQUEST_METHOD = "query_request_method";
  @SerializedName(SERIALIZED_NAME_QUERY_REQUEST_METHOD)
  private String queryRequestMethod;

  public static final String SERIALIZED_NAME_QUERY_REQUEST_URL = "query_request_url";
  @SerializedName(SERIALIZED_NAME_QUERY_REQUEST_URL)
  private String queryRequestUrl;

  public static final String SERIALIZED_NAME_QUERY_STATUS = "query_status";
  @SerializedName(SERIALIZED_NAME_QUERY_STATUS)
  private String queryStatus;

  public static final String SERIALIZED_NAME_QUERY_SUCCESS = "query_success";
  @SerializedName(SERIALIZED_NAME_QUERY_SUCCESS)
  private Boolean querySuccess;

  public static final String SERIALIZED_NAME_RESULTS_URL = "results_url";
  @SerializedName(SERIALIZED_NAME_RESULTS_URL)
  private String resultsUrl;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private OffsetDateTime startAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public ActionNotificationExportEntity() {
  }

  public ActionNotificationExportEntity endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * End date/time of export range.
   * @return endAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndAt() {
    return endAt;
  }

  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }


  public ActionNotificationExportEntity exportVersion(String exportVersion) {
    this.exportVersion = exportVersion;
    return this;
  }

  /**
   * Version of the underlying records for the export.
   * @return exportVersion
   */
  @javax.annotation.Nullable
  public String getExportVersion() {
    return exportVersion;
  }

  public void setExportVersion(String exportVersion) {
    this.exportVersion = exportVersion;
  }


  public ActionNotificationExportEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * History Export ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ActionNotificationExportEntity queryFolder(String queryFolder) {
    this.queryFolder = queryFolder;
    return this;
  }

  /**
   * Return notifications that were triggered by actions in this folder.
   * @return queryFolder
   */
  @javax.annotation.Nullable
  public String getQueryFolder() {
    return queryFolder;
  }

  public void setQueryFolder(String queryFolder) {
    this.queryFolder = queryFolder;
  }


  public ActionNotificationExportEntity queryMessage(String queryMessage) {
    this.queryMessage = queryMessage;
    return this;
  }

  /**
   * Error message associated with the request, if any.
   * @return queryMessage
   */
  @javax.annotation.Nullable
  public String getQueryMessage() {
    return queryMessage;
  }

  public void setQueryMessage(String queryMessage) {
    this.queryMessage = queryMessage;
  }


  public ActionNotificationExportEntity queryPath(String queryPath) {
    this.queryPath = queryPath;
    return this;
  }

  /**
   * Return notifications that were triggered by actions on this specific path.
   * @return queryPath
   */
  @javax.annotation.Nullable
  public String getQueryPath() {
    return queryPath;
  }

  public void setQueryPath(String queryPath) {
    this.queryPath = queryPath;
  }


  public ActionNotificationExportEntity queryRequestMethod(String queryRequestMethod) {
    this.queryRequestMethod = queryRequestMethod;
    return this;
  }

  /**
   * The HTTP request method used by the webhook.
   * @return queryRequestMethod
   */
  @javax.annotation.Nullable
  public String getQueryRequestMethod() {
    return queryRequestMethod;
  }

  public void setQueryRequestMethod(String queryRequestMethod) {
    this.queryRequestMethod = queryRequestMethod;
  }


  public ActionNotificationExportEntity queryRequestUrl(String queryRequestUrl) {
    this.queryRequestUrl = queryRequestUrl;
    return this;
  }

  /**
   * The target webhook URL.
   * @return queryRequestUrl
   */
  @javax.annotation.Nullable
  public String getQueryRequestUrl() {
    return queryRequestUrl;
  }

  public void setQueryRequestUrl(String queryRequestUrl) {
    this.queryRequestUrl = queryRequestUrl;
  }


  public ActionNotificationExportEntity queryStatus(String queryStatus) {
    this.queryStatus = queryStatus;
    return this;
  }

  /**
   * The HTTP status returned from the server in response to the webhook request.
   * @return queryStatus
   */
  @javax.annotation.Nullable
  public String getQueryStatus() {
    return queryStatus;
  }

  public void setQueryStatus(String queryStatus) {
    this.queryStatus = queryStatus;
  }


  public ActionNotificationExportEntity querySuccess(Boolean querySuccess) {
    this.querySuccess = querySuccess;
    return this;
  }

  /**
   * true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise.
   * @return querySuccess
   */
  @javax.annotation.Nullable
  public Boolean getQuerySuccess() {
    return querySuccess;
  }

  public void setQuerySuccess(Boolean querySuccess) {
    this.querySuccess = querySuccess;
  }


  public ActionNotificationExportEntity resultsUrl(String resultsUrl) {
    this.resultsUrl = resultsUrl;
    return this;
  }

  /**
   * If &#x60;status&#x60; is &#x60;ready&#x60;, this will be a URL where all the results can be downloaded at once as a CSV.
   * @return resultsUrl
   */
  @javax.annotation.Nullable
  public String getResultsUrl() {
    return resultsUrl;
  }

  public void setResultsUrl(String resultsUrl) {
    this.resultsUrl = resultsUrl;
  }


  public ActionNotificationExportEntity startAt(OffsetDateTime startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * Start date/time of export range.
   * @return startAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartAt() {
    return startAt;
  }

  public void setStartAt(OffsetDateTime startAt) {
    this.startAt = startAt;
  }


  public ActionNotificationExportEntity status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of export.  Valid values: &#x60;building&#x60;, &#x60;ready&#x60;, or &#x60;failed&#x60;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionNotificationExportEntity actionNotificationExportEntity = (ActionNotificationExportEntity) o;
    return Objects.equals(this.endAt, actionNotificationExportEntity.endAt) &&
        Objects.equals(this.exportVersion, actionNotificationExportEntity.exportVersion) &&
        Objects.equals(this.id, actionNotificationExportEntity.id) &&
        Objects.equals(this.queryFolder, actionNotificationExportEntity.queryFolder) &&
        Objects.equals(this.queryMessage, actionNotificationExportEntity.queryMessage) &&
        Objects.equals(this.queryPath, actionNotificationExportEntity.queryPath) &&
        Objects.equals(this.queryRequestMethod, actionNotificationExportEntity.queryRequestMethod) &&
        Objects.equals(this.queryRequestUrl, actionNotificationExportEntity.queryRequestUrl) &&
        Objects.equals(this.queryStatus, actionNotificationExportEntity.queryStatus) &&
        Objects.equals(this.querySuccess, actionNotificationExportEntity.querySuccess) &&
        Objects.equals(this.resultsUrl, actionNotificationExportEntity.resultsUrl) &&
        Objects.equals(this.startAt, actionNotificationExportEntity.startAt) &&
        Objects.equals(this.status, actionNotificationExportEntity.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endAt, exportVersion, id, queryFolder, queryMessage, queryPath, queryRequestMethod, queryRequestUrl, queryStatus, querySuccess, resultsUrl, startAt, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionNotificationExportEntity {\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    exportVersion: ").append(toIndentedString(exportVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    queryFolder: ").append(toIndentedString(queryFolder)).append("\n");
    sb.append("    queryMessage: ").append(toIndentedString(queryMessage)).append("\n");
    sb.append("    queryPath: ").append(toIndentedString(queryPath)).append("\n");
    sb.append("    queryRequestMethod: ").append(toIndentedString(queryRequestMethod)).append("\n");
    sb.append("    queryRequestUrl: ").append(toIndentedString(queryRequestUrl)).append("\n");
    sb.append("    queryStatus: ").append(toIndentedString(queryStatus)).append("\n");
    sb.append("    querySuccess: ").append(toIndentedString(querySuccess)).append("\n");
    sb.append("    resultsUrl: ").append(toIndentedString(resultsUrl)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_at");
    openapiFields.add("export_version");
    openapiFields.add("id");
    openapiFields.add("query_folder");
    openapiFields.add("query_message");
    openapiFields.add("query_path");
    openapiFields.add("query_request_method");
    openapiFields.add("query_request_url");
    openapiFields.add("query_status");
    openapiFields.add("query_success");
    openapiFields.add("results_url");
    openapiFields.add("start_at");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionNotificationExportEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionNotificationExportEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionNotificationExportEntity is not found in the empty JSON string", ActionNotificationExportEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionNotificationExportEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionNotificationExportEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("export_version") != null && !jsonObj.get("export_version").isJsonNull()) && !jsonObj.get("export_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `export_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("export_version").toString()));
      }
      if ((jsonObj.get("query_folder") != null && !jsonObj.get("query_folder").isJsonNull()) && !jsonObj.get("query_folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_folder").toString()));
      }
      if ((jsonObj.get("query_message") != null && !jsonObj.get("query_message").isJsonNull()) && !jsonObj.get("query_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_message").toString()));
      }
      if ((jsonObj.get("query_path") != null && !jsonObj.get("query_path").isJsonNull()) && !jsonObj.get("query_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_path").toString()));
      }
      if ((jsonObj.get("query_request_method") != null && !jsonObj.get("query_request_method").isJsonNull()) && !jsonObj.get("query_request_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_request_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_request_method").toString()));
      }
      if ((jsonObj.get("query_request_url") != null && !jsonObj.get("query_request_url").isJsonNull()) && !jsonObj.get("query_request_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_request_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_request_url").toString()));
      }
      if ((jsonObj.get("query_status") != null && !jsonObj.get("query_status").isJsonNull()) && !jsonObj.get("query_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_status").toString()));
      }
      if ((jsonObj.get("results_url") != null && !jsonObj.get("results_url").isJsonNull()) && !jsonObj.get("results_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `results_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("results_url").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionNotificationExportEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionNotificationExportEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionNotificationExportEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionNotificationExportEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionNotificationExportEntity>() {
           @Override
           public void write(JsonWriter out, ActionNotificationExportEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionNotificationExportEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionNotificationExportEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionNotificationExportEntity
   * @throws IOException if the JSON string is invalid with respect to ActionNotificationExportEntity
   */
  public static ActionNotificationExportEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionNotificationExportEntity.class);
  }

  /**
   * Convert an instance of ActionNotificationExportEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

