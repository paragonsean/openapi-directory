/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserEntity {
  public static final String SERIALIZED_NAME_ACTIVE2FA = "active_2fa";
  @SerializedName(SERIALIZED_NAME_ACTIVE2FA)
  private Boolean active2fa;

  public static final String SERIALIZED_NAME_ADMIN_GROUP_IDS = "admin_group_ids";
  @SerializedName(SERIALIZED_NAME_ADMIN_GROUP_IDS)
  private List<Integer> adminGroupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_IPS = "allowed_ips";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IPS)
  private String allowedIps;

  public static final String SERIALIZED_NAME_API_KEYS_COUNT = "api_keys_count";
  @SerializedName(SERIALIZED_NAME_API_KEYS_COUNT)
  private Integer apiKeysCount;

  public static final String SERIALIZED_NAME_ATTACHMENTS_PERMISSION = "attachments_permission";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS_PERMISSION)
  private Boolean attachmentsPermission;

  public static final String SERIALIZED_NAME_AUTHENTICATE_UNTIL = "authenticate_until";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATE_UNTIL)
  private OffsetDateTime authenticateUntil;

  /**
   * How is this user authenticated?
   */
  @JsonAdapter(AuthenticationMethodEnum.Adapter.class)
  public enum AuthenticationMethodEnum {
    PASSWORD("password"),
    
    UNUSED_FORMER_LDAP("unused_former_ldap"),
    
    SSO("sso"),
    
    NONE("none"),
    
    EMAIL_SIGNUP("email_signup"),
    
    PASSWORD_WITH_IMPORTED_HASH("password_with_imported_hash");

    private String value;

    AuthenticationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationMethodEnum fromValue(String value) {
      for (AuthenticationMethodEnum b : AuthenticationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHOD = "authentication_method";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHOD)
  private AuthenticationMethodEnum authenticationMethod;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_BILLING_PERMISSION = "billing_permission";
  @SerializedName(SERIALIZED_NAME_BILLING_PERMISSION)
  private Boolean billingPermission;

  public static final String SERIALIZED_NAME_BYPASS_INACTIVE_DISABLE = "bypass_inactive_disable";
  @SerializedName(SERIALIZED_NAME_BYPASS_INACTIVE_DISABLE)
  private Boolean bypassInactiveDisable;

  public static final String SERIALIZED_NAME_BYPASS_SITE_ALLOWED_IPS = "bypass_site_allowed_ips";
  @SerializedName(SERIALIZED_NAME_BYPASS_SITE_ALLOWED_IPS)
  private Boolean bypassSiteAllowedIps;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DAV_PERMISSION = "dav_permission";
  @SerializedName(SERIALIZED_NAME_DAV_PERMISSION)
  private Boolean davPermission;

  public static final String SERIALIZED_NAME_DAYS_REMAINING_UNTIL_PASSWORD_EXPIRE = "days_remaining_until_password_expire";
  @SerializedName(SERIALIZED_NAME_DAYS_REMAINING_UNTIL_PASSWORD_EXPIRE)
  private Integer daysRemainingUntilPasswordExpire;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNALLY_MANAGED = "externally_managed";
  @SerializedName(SERIALIZED_NAME_EXTERNALLY_MANAGED)
  private Boolean externallyManaged;

  public static final String SERIALIZED_NAME_FIRST_LOGIN_AT = "first_login_at";
  @SerializedName(SERIALIZED_NAME_FIRST_LOGIN_AT)
  private OffsetDateTime firstLoginAt;

  public static final String SERIALIZED_NAME_FTP_PERMISSION = "ftp_permission";
  @SerializedName(SERIALIZED_NAME_FTP_PERMISSION)
  private Boolean ftpPermission;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private String groupIds;

  public static final String SERIALIZED_NAME_HEADER_TEXT = "header_text";
  @SerializedName(SERIALIZED_NAME_HEADER_TEXT)
  private String headerText;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_ACTIVE_AT = "last_active_at";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVE_AT)
  private OffsetDateTime lastActiveAt;

  public static final String SERIALIZED_NAME_LAST_API_USE_AT = "last_api_use_at";
  @SerializedName(SERIALIZED_NAME_LAST_API_USE_AT)
  private OffsetDateTime lastApiUseAt;

  public static final String SERIALIZED_NAME_LAST_DAV_LOGIN_AT = "last_dav_login_at";
  @SerializedName(SERIALIZED_NAME_LAST_DAV_LOGIN_AT)
  private OffsetDateTime lastDavLoginAt;

  public static final String SERIALIZED_NAME_LAST_DESKTOP_LOGIN_AT = "last_desktop_login_at";
  @SerializedName(SERIALIZED_NAME_LAST_DESKTOP_LOGIN_AT)
  private OffsetDateTime lastDesktopLoginAt;

  public static final String SERIALIZED_NAME_LAST_FTP_LOGIN_AT = "last_ftp_login_at";
  @SerializedName(SERIALIZED_NAME_LAST_FTP_LOGIN_AT)
  private OffsetDateTime lastFtpLoginAt;

  public static final String SERIALIZED_NAME_LAST_LOGIN_AT = "last_login_at";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_AT)
  private OffsetDateTime lastLoginAt;

  public static final String SERIALIZED_NAME_LAST_PROTOCOL_CIPHER = "last_protocol_cipher";
  @SerializedName(SERIALIZED_NAME_LAST_PROTOCOL_CIPHER)
  private String lastProtocolCipher;

  public static final String SERIALIZED_NAME_LAST_RESTAPI_LOGIN_AT = "last_restapi_login_at";
  @SerializedName(SERIALIZED_NAME_LAST_RESTAPI_LOGIN_AT)
  private OffsetDateTime lastRestapiLoginAt;

  public static final String SERIALIZED_NAME_LAST_SFTP_LOGIN_AT = "last_sftp_login_at";
  @SerializedName(SERIALIZED_NAME_LAST_SFTP_LOGIN_AT)
  private OffsetDateTime lastSftpLoginAt;

  public static final String SERIALIZED_NAME_LAST_WEB_LOGIN_AT = "last_web_login_at";
  @SerializedName(SERIALIZED_NAME_LAST_WEB_LOGIN_AT)
  private OffsetDateTime lastWebLoginAt;

  public static final String SERIALIZED_NAME_LOCKOUT_EXPIRES = "lockout_expires";
  @SerializedName(SERIALIZED_NAME_LOCKOUT_EXPIRES)
  private OffsetDateTime lockoutExpires;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NOTIFICATION_DAILY_SEND_TIME = "notification_daily_send_time";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DAILY_SEND_TIME)
  private Integer notificationDailySendTime;

  public static final String SERIALIZED_NAME_OFFICE_INTEGRATION_ENABLED = "office_integration_enabled";
  @SerializedName(SERIALIZED_NAME_OFFICE_INTEGRATION_ENABLED)
  private Boolean officeIntegrationEnabled;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRE_AT = "password_expire_at";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRE_AT)
  private OffsetDateTime passwordExpireAt;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRED = "password_expired";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRED)
  private Boolean passwordExpired;

  public static final String SERIALIZED_NAME_PASSWORD_SET_AT = "password_set_at";
  @SerializedName(SERIALIZED_NAME_PASSWORD_SET_AT)
  private OffsetDateTime passwordSetAt;

  public static final String SERIALIZED_NAME_PASSWORD_VALIDITY_DAYS = "password_validity_days";
  @SerializedName(SERIALIZED_NAME_PASSWORD_VALIDITY_DAYS)
  private Integer passwordValidityDays;

  public static final String SERIALIZED_NAME_PUBLIC_KEYS_COUNT = "public_keys_count";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEYS_COUNT)
  private Integer publicKeysCount;

  public static final String SERIALIZED_NAME_RECEIVE_ADMIN_ALERTS = "receive_admin_alerts";
  @SerializedName(SERIALIZED_NAME_RECEIVE_ADMIN_ALERTS)
  private Boolean receiveAdminAlerts;

  /**
   * 2FA required setting
   */
  @JsonAdapter(Require2faEnum.Adapter.class)
  public enum Require2faEnum {
    USE_SYSTEM_SETTING("use_system_setting"),
    
    ALWAYS_REQUIRE("always_require"),
    
    NEVER_REQUIRE("never_require");

    private String value;

    Require2faEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Require2faEnum fromValue(String value) {
      for (Require2faEnum b : Require2faEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Require2faEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Require2faEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Require2faEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Require2faEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Require2faEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUIRE2FA = "require_2fa";
  @SerializedName(SERIALIZED_NAME_REQUIRE2FA)
  private Require2faEnum require2fa;

  public static final String SERIALIZED_NAME_REQUIRE_PASSWORD_CHANGE = "require_password_change";
  @SerializedName(SERIALIZED_NAME_REQUIRE_PASSWORD_CHANGE)
  private Boolean requirePasswordChange;

  public static final String SERIALIZED_NAME_RESTAPI_PERMISSION = "restapi_permission";
  @SerializedName(SERIALIZED_NAME_RESTAPI_PERMISSION)
  private Boolean restapiPermission;

  public static final String SERIALIZED_NAME_SELF_MANAGED = "self_managed";
  @SerializedName(SERIALIZED_NAME_SELF_MANAGED)
  private Boolean selfManaged;

  public static final String SERIALIZED_NAME_SFTP_PERMISSION = "sftp_permission";
  @SerializedName(SERIALIZED_NAME_SFTP_PERMISSION)
  private Boolean sftpPermission;

  public static final String SERIALIZED_NAME_SITE_ADMIN = "site_admin";
  @SerializedName(SERIALIZED_NAME_SITE_ADMIN)
  private Boolean siteAdmin;

  public static final String SERIALIZED_NAME_SKIP_WELCOME_SCREEN = "skip_welcome_screen";
  @SerializedName(SERIALIZED_NAME_SKIP_WELCOME_SCREEN)
  private Boolean skipWelcomeScreen;

  /**
   * SSL required setting
   */
  @JsonAdapter(SslRequiredEnum.Adapter.class)
  public enum SslRequiredEnum {
    USE_SYSTEM_SETTING("use_system_setting"),
    
    ALWAYS_REQUIRE("always_require"),
    
    NEVER_REQUIRE("never_require");

    private String value;

    SslRequiredEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SslRequiredEnum fromValue(String value) {
      for (SslRequiredEnum b : SslRequiredEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SslRequiredEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SslRequiredEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SslRequiredEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SslRequiredEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SslRequiredEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SSL_REQUIRED = "ssl_required";
  @SerializedName(SERIALIZED_NAME_SSL_REQUIRED)
  private SslRequiredEnum sslRequired;

  public static final String SERIALIZED_NAME_SSO_STRATEGY_ID = "sso_strategy_id";
  @SerializedName(SERIALIZED_NAME_SSO_STRATEGY_ID)
  private Integer ssoStrategyId;

  public static final String SERIALIZED_NAME_SUBSCRIBE_TO_NEWSLETTER = "subscribe_to_newsletter";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE_TO_NEWSLETTER)
  private Boolean subscribeToNewsletter;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_TYPE_OF2FA = "type_of_2fa";
  @SerializedName(SERIALIZED_NAME_TYPE_OF2FA)
  private String typeOf2fa;

  public static final String SERIALIZED_NAME_USER_ROOT = "user_root";
  @SerializedName(SERIALIZED_NAME_USER_ROOT)
  private String userRoot;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public UserEntity() {
  }

  public UserEntity active2fa(Boolean active2fa) {
    this.active2fa = active2fa;
    return this;
  }

  /**
   * Is 2fa active for the user?
   * @return active2fa
   */
  @javax.annotation.Nullable
  public Boolean getActive2fa() {
    return active2fa;
  }

  public void setActive2fa(Boolean active2fa) {
    this.active2fa = active2fa;
  }


  public UserEntity adminGroupIds(List<Integer> adminGroupIds) {
    this.adminGroupIds = adminGroupIds;
    return this;
  }

  public UserEntity addAdminGroupIdsItem(Integer adminGroupIdsItem) {
    if (this.adminGroupIds == null) {
      this.adminGroupIds = new ArrayList<>();
    }
    this.adminGroupIds.add(adminGroupIdsItem);
    return this;
  }

  /**
   * List of group IDs of which this user is an administrator
   * @return adminGroupIds
   */
  @javax.annotation.Nullable
  public List<Integer> getAdminGroupIds() {
    return adminGroupIds;
  }

  public void setAdminGroupIds(List<Integer> adminGroupIds) {
    this.adminGroupIds = adminGroupIds;
  }


  public UserEntity allowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

  /**
   * A list of allowed IPs if applicable.  Newline delimited
   * @return allowedIps
   */
  @javax.annotation.Nullable
  public String getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
  }


  public UserEntity apiKeysCount(Integer apiKeysCount) {
    this.apiKeysCount = apiKeysCount;
    return this;
  }

  /**
   * Number of api keys associated with this user
   * @return apiKeysCount
   */
  @javax.annotation.Nullable
  public Integer getApiKeysCount() {
    return apiKeysCount;
  }

  public void setApiKeysCount(Integer apiKeysCount) {
    this.apiKeysCount = apiKeysCount;
  }


  public UserEntity attachmentsPermission(Boolean attachmentsPermission) {
    this.attachmentsPermission = attachmentsPermission;
    return this;
  }

  /**
   * DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.
   * @return attachmentsPermission
   */
  @javax.annotation.Nullable
  public Boolean getAttachmentsPermission() {
    return attachmentsPermission;
  }

  public void setAttachmentsPermission(Boolean attachmentsPermission) {
    this.attachmentsPermission = attachmentsPermission;
  }


  public UserEntity authenticateUntil(OffsetDateTime authenticateUntil) {
    this.authenticateUntil = authenticateUntil;
    return this;
  }

  /**
   * Scheduled Date/Time at which user will be deactivated
   * @return authenticateUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAuthenticateUntil() {
    return authenticateUntil;
  }

  public void setAuthenticateUntil(OffsetDateTime authenticateUntil) {
    this.authenticateUntil = authenticateUntil;
  }


  public UserEntity authenticationMethod(AuthenticationMethodEnum authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
    return this;
  }

  /**
   * How is this user authenticated?
   * @return authenticationMethod
   */
  @javax.annotation.Nullable
  public AuthenticationMethodEnum getAuthenticationMethod() {
    return authenticationMethod;
  }

  public void setAuthenticationMethod(AuthenticationMethodEnum authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
  }


  public UserEntity avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * URL holding the user&#39;s avatar
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public UserEntity billingPermission(Boolean billingPermission) {
    this.billingPermission = billingPermission;
    return this;
  }

  /**
   * Allow this user to perform operations on the account, payments, and invoices?
   * @return billingPermission
   */
  @javax.annotation.Nullable
  public Boolean getBillingPermission() {
    return billingPermission;
  }

  public void setBillingPermission(Boolean billingPermission) {
    this.billingPermission = billingPermission;
  }


  public UserEntity bypassInactiveDisable(Boolean bypassInactiveDisable) {
    this.bypassInactiveDisable = bypassInactiveDisable;
    return this;
  }

  /**
   * Exempt this user from being disabled based on inactivity?
   * @return bypassInactiveDisable
   */
  @javax.annotation.Nullable
  public Boolean getBypassInactiveDisable() {
    return bypassInactiveDisable;
  }

  public void setBypassInactiveDisable(Boolean bypassInactiveDisable) {
    this.bypassInactiveDisable = bypassInactiveDisable;
  }


  public UserEntity bypassSiteAllowedIps(Boolean bypassSiteAllowedIps) {
    this.bypassSiteAllowedIps = bypassSiteAllowedIps;
    return this;
  }

  /**
   * Allow this user to skip site-wide IP blacklists?
   * @return bypassSiteAllowedIps
   */
  @javax.annotation.Nullable
  public Boolean getBypassSiteAllowedIps() {
    return bypassSiteAllowedIps;
  }

  public void setBypassSiteAllowedIps(Boolean bypassSiteAllowedIps) {
    this.bypassSiteAllowedIps = bypassSiteAllowedIps;
  }


  public UserEntity company(String company) {
    this.company = company;
    return this;
  }

  /**
   * User&#39;s company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public UserEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When this user was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UserEntity davPermission(Boolean davPermission) {
    this.davPermission = davPermission;
    return this;
  }

  /**
   * Can the user connect with WebDAV?
   * @return davPermission
   */
  @javax.annotation.Nullable
  public Boolean getDavPermission() {
    return davPermission;
  }

  public void setDavPermission(Boolean davPermission) {
    this.davPermission = davPermission;
  }


  public UserEntity daysRemainingUntilPasswordExpire(Integer daysRemainingUntilPasswordExpire) {
    this.daysRemainingUntilPasswordExpire = daysRemainingUntilPasswordExpire;
    return this;
  }

  /**
   * Number of days remaining until password expires
   * @return daysRemainingUntilPasswordExpire
   */
  @javax.annotation.Nullable
  public Integer getDaysRemainingUntilPasswordExpire() {
    return daysRemainingUntilPasswordExpire;
  }

  public void setDaysRemainingUntilPasswordExpire(Integer daysRemainingUntilPasswordExpire) {
    this.daysRemainingUntilPasswordExpire = daysRemainingUntilPasswordExpire;
  }


  public UserEntity disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public UserEntity email(String email) {
    this.email = email;
    return this;
  }

  /**
   * User email address
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserEntity externallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
    return this;
  }

  /**
   * Is this user managed by a SsoStrategy?
   * @return externallyManaged
   */
  @javax.annotation.Nullable
  public Boolean getExternallyManaged() {
    return externallyManaged;
  }

  public void setExternallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
  }


  public UserEntity firstLoginAt(OffsetDateTime firstLoginAt) {
    this.firstLoginAt = firstLoginAt;
    return this;
  }

  /**
   * User&#39;s first login time
   * @return firstLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirstLoginAt() {
    return firstLoginAt;
  }

  public void setFirstLoginAt(OffsetDateTime firstLoginAt) {
    this.firstLoginAt = firstLoginAt;
  }


  public UserEntity ftpPermission(Boolean ftpPermission) {
    this.ftpPermission = ftpPermission;
    return this;
  }

  /**
   * Can the user access with FTP/FTPS?
   * @return ftpPermission
   */
  @javax.annotation.Nullable
  public Boolean getFtpPermission() {
    return ftpPermission;
  }

  public void setFtpPermission(Boolean ftpPermission) {
    this.ftpPermission = ftpPermission;
  }


  public UserEntity groupIds(String groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  /**
   * Comma-separated list of group IDs of which this user is a member
   * @return groupIds
   */
  @javax.annotation.Nullable
  public String getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(String groupIds) {
    this.groupIds = groupIds;
  }


  public UserEntity headerText(String headerText) {
    this.headerText = headerText;
    return this;
  }

  /**
   * Text to display to the user in the header of the UI
   * @return headerText
   */
  @javax.annotation.Nullable
  public String getHeaderText() {
    return headerText;
  }

  public void setHeaderText(String headerText) {
    this.headerText = headerText;
  }


  public UserEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * User ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UserEntity language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Preferred language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public UserEntity lastActiveAt(OffsetDateTime lastActiveAt) {
    this.lastActiveAt = lastActiveAt;
    return this;
  }

  /**
   * User&#39;s most recent activity time, which is the latest of most recent login, most recent API use, enablement, or creation
   * @return lastActiveAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastActiveAt() {
    return lastActiveAt;
  }

  public void setLastActiveAt(OffsetDateTime lastActiveAt) {
    this.lastActiveAt = lastActiveAt;
  }


  public UserEntity lastApiUseAt(OffsetDateTime lastApiUseAt) {
    this.lastApiUseAt = lastApiUseAt;
    return this;
  }

  /**
   * User&#39;s most recent API use time
   * @return lastApiUseAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastApiUseAt() {
    return lastApiUseAt;
  }

  public void setLastApiUseAt(OffsetDateTime lastApiUseAt) {
    this.lastApiUseAt = lastApiUseAt;
  }


  public UserEntity lastDavLoginAt(OffsetDateTime lastDavLoginAt) {
    this.lastDavLoginAt = lastDavLoginAt;
    return this;
  }

  /**
   * User&#39;s most recent login time via WebDAV
   * @return lastDavLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDavLoginAt() {
    return lastDavLoginAt;
  }

  public void setLastDavLoginAt(OffsetDateTime lastDavLoginAt) {
    this.lastDavLoginAt = lastDavLoginAt;
  }


  public UserEntity lastDesktopLoginAt(OffsetDateTime lastDesktopLoginAt) {
    this.lastDesktopLoginAt = lastDesktopLoginAt;
    return this;
  }

  /**
   * User&#39;s most recent login time via Desktop app
   * @return lastDesktopLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDesktopLoginAt() {
    return lastDesktopLoginAt;
  }

  public void setLastDesktopLoginAt(OffsetDateTime lastDesktopLoginAt) {
    this.lastDesktopLoginAt = lastDesktopLoginAt;
  }


  public UserEntity lastFtpLoginAt(OffsetDateTime lastFtpLoginAt) {
    this.lastFtpLoginAt = lastFtpLoginAt;
    return this;
  }

  /**
   * User&#39;s most recent login time via FTP
   * @return lastFtpLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastFtpLoginAt() {
    return lastFtpLoginAt;
  }

  public void setLastFtpLoginAt(OffsetDateTime lastFtpLoginAt) {
    this.lastFtpLoginAt = lastFtpLoginAt;
  }


  public UserEntity lastLoginAt(OffsetDateTime lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
    return this;
  }

  /**
   * User&#39;s most recent login time via any protocol
   * @return lastLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastLoginAt() {
    return lastLoginAt;
  }

  public void setLastLoginAt(OffsetDateTime lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
  }


  public UserEntity lastProtocolCipher(String lastProtocolCipher) {
    this.lastProtocolCipher = lastProtocolCipher;
    return this;
  }

  /**
   * The most recent protocol and cipher used
   * @return lastProtocolCipher
   */
  @javax.annotation.Nullable
  public String getLastProtocolCipher() {
    return lastProtocolCipher;
  }

  public void setLastProtocolCipher(String lastProtocolCipher) {
    this.lastProtocolCipher = lastProtocolCipher;
  }


  public UserEntity lastRestapiLoginAt(OffsetDateTime lastRestapiLoginAt) {
    this.lastRestapiLoginAt = lastRestapiLoginAt;
    return this;
  }

  /**
   * User&#39;s most recent login time via Rest API
   * @return lastRestapiLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRestapiLoginAt() {
    return lastRestapiLoginAt;
  }

  public void setLastRestapiLoginAt(OffsetDateTime lastRestapiLoginAt) {
    this.lastRestapiLoginAt = lastRestapiLoginAt;
  }


  public UserEntity lastSftpLoginAt(OffsetDateTime lastSftpLoginAt) {
    this.lastSftpLoginAt = lastSftpLoginAt;
    return this;
  }

  /**
   * User&#39;s most recent login time via SFTP
   * @return lastSftpLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSftpLoginAt() {
    return lastSftpLoginAt;
  }

  public void setLastSftpLoginAt(OffsetDateTime lastSftpLoginAt) {
    this.lastSftpLoginAt = lastSftpLoginAt;
  }


  public UserEntity lastWebLoginAt(OffsetDateTime lastWebLoginAt) {
    this.lastWebLoginAt = lastWebLoginAt;
    return this;
  }

  /**
   * User&#39;s most recent login time via web
   * @return lastWebLoginAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastWebLoginAt() {
    return lastWebLoginAt;
  }

  public void setLastWebLoginAt(OffsetDateTime lastWebLoginAt) {
    this.lastWebLoginAt = lastWebLoginAt;
  }


  public UserEntity lockoutExpires(OffsetDateTime lockoutExpires) {
    this.lockoutExpires = lockoutExpires;
    return this;
  }

  /**
   * Time in the future that the user will no longer be locked out if applicable
   * @return lockoutExpires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLockoutExpires() {
    return lockoutExpires;
  }

  public void setLockoutExpires(OffsetDateTime lockoutExpires) {
    this.lockoutExpires = lockoutExpires;
  }


  public UserEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User&#39;s full name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserEntity notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Any internal notes on the user
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public UserEntity notificationDailySendTime(Integer notificationDailySendTime) {
    this.notificationDailySendTime = notificationDailySendTime;
    return this;
  }

  /**
   * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
   * @return notificationDailySendTime
   */
  @javax.annotation.Nullable
  public Integer getNotificationDailySendTime() {
    return notificationDailySendTime;
  }

  public void setNotificationDailySendTime(Integer notificationDailySendTime) {
    this.notificationDailySendTime = notificationDailySendTime;
  }


  public UserEntity officeIntegrationEnabled(Boolean officeIntegrationEnabled) {
    this.officeIntegrationEnabled = officeIntegrationEnabled;
    return this;
  }

  /**
   * Enable integration with Office for the web?
   * @return officeIntegrationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getOfficeIntegrationEnabled() {
    return officeIntegrationEnabled;
  }

  public void setOfficeIntegrationEnabled(Boolean officeIntegrationEnabled) {
    this.officeIntegrationEnabled = officeIntegrationEnabled;
  }


  public UserEntity passwordExpireAt(OffsetDateTime passwordExpireAt) {
    this.passwordExpireAt = passwordExpireAt;
    return this;
  }

  /**
   * Password expiration datetime
   * @return passwordExpireAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPasswordExpireAt() {
    return passwordExpireAt;
  }

  public void setPasswordExpireAt(OffsetDateTime passwordExpireAt) {
    this.passwordExpireAt = passwordExpireAt;
  }


  public UserEntity passwordExpired(Boolean passwordExpired) {
    this.passwordExpired = passwordExpired;
    return this;
  }

  /**
   * Is user&#39;s password expired?
   * @return passwordExpired
   */
  @javax.annotation.Nullable
  public Boolean getPasswordExpired() {
    return passwordExpired;
  }

  public void setPasswordExpired(Boolean passwordExpired) {
    this.passwordExpired = passwordExpired;
  }


  public UserEntity passwordSetAt(OffsetDateTime passwordSetAt) {
    this.passwordSetAt = passwordSetAt;
    return this;
  }

  /**
   * Last time the user&#39;s password was set
   * @return passwordSetAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPasswordSetAt() {
    return passwordSetAt;
  }

  public void setPasswordSetAt(OffsetDateTime passwordSetAt) {
    this.passwordSetAt = passwordSetAt;
  }


  public UserEntity passwordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
    return this;
  }

  /**
   * Number of days to allow user to use the same password
   * @return passwordValidityDays
   */
  @javax.annotation.Nullable
  public Integer getPasswordValidityDays() {
    return passwordValidityDays;
  }

  public void setPasswordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
  }


  public UserEntity publicKeysCount(Integer publicKeysCount) {
    this.publicKeysCount = publicKeysCount;
    return this;
  }

  /**
   * Number of public keys associated with this user
   * @return publicKeysCount
   */
  @javax.annotation.Nullable
  public Integer getPublicKeysCount() {
    return publicKeysCount;
  }

  public void setPublicKeysCount(Integer publicKeysCount) {
    this.publicKeysCount = publicKeysCount;
  }


  public UserEntity receiveAdminAlerts(Boolean receiveAdminAlerts) {
    this.receiveAdminAlerts = receiveAdminAlerts;
    return this;
  }

  /**
   * Should the user receive admin alerts such a certificate expiration notifications and overages?
   * @return receiveAdminAlerts
   */
  @javax.annotation.Nullable
  public Boolean getReceiveAdminAlerts() {
    return receiveAdminAlerts;
  }

  public void setReceiveAdminAlerts(Boolean receiveAdminAlerts) {
    this.receiveAdminAlerts = receiveAdminAlerts;
  }


  public UserEntity require2fa(Require2faEnum require2fa) {
    this.require2fa = require2fa;
    return this;
  }

  /**
   * 2FA required setting
   * @return require2fa
   */
  @javax.annotation.Nullable
  public Require2faEnum getRequire2fa() {
    return require2fa;
  }

  public void setRequire2fa(Require2faEnum require2fa) {
    this.require2fa = require2fa;
  }


  public UserEntity requirePasswordChange(Boolean requirePasswordChange) {
    this.requirePasswordChange = requirePasswordChange;
    return this;
  }

  /**
   * Is a password change required upon next user login?
   * @return requirePasswordChange
   */
  @javax.annotation.Nullable
  public Boolean getRequirePasswordChange() {
    return requirePasswordChange;
  }

  public void setRequirePasswordChange(Boolean requirePasswordChange) {
    this.requirePasswordChange = requirePasswordChange;
  }


  public UserEntity restapiPermission(Boolean restapiPermission) {
    this.restapiPermission = restapiPermission;
    return this;
  }

  /**
   * Can this user access the REST API?
   * @return restapiPermission
   */
  @javax.annotation.Nullable
  public Boolean getRestapiPermission() {
    return restapiPermission;
  }

  public void setRestapiPermission(Boolean restapiPermission) {
    this.restapiPermission = restapiPermission;
  }


  public UserEntity selfManaged(Boolean selfManaged) {
    this.selfManaged = selfManaged;
    return this;
  }

  /**
   * Does this user manage it&#39;s own credentials or is it a shared/bot user?
   * @return selfManaged
   */
  @javax.annotation.Nullable
  public Boolean getSelfManaged() {
    return selfManaged;
  }

  public void setSelfManaged(Boolean selfManaged) {
    this.selfManaged = selfManaged;
  }


  public UserEntity sftpPermission(Boolean sftpPermission) {
    this.sftpPermission = sftpPermission;
    return this;
  }

  /**
   * Can the user access with SFTP?
   * @return sftpPermission
   */
  @javax.annotation.Nullable
  public Boolean getSftpPermission() {
    return sftpPermission;
  }

  public void setSftpPermission(Boolean sftpPermission) {
    this.sftpPermission = sftpPermission;
  }


  public UserEntity siteAdmin(Boolean siteAdmin) {
    this.siteAdmin = siteAdmin;
    return this;
  }

  /**
   * Is the user an administrator for this site?
   * @return siteAdmin
   */
  @javax.annotation.Nullable
  public Boolean getSiteAdmin() {
    return siteAdmin;
  }

  public void setSiteAdmin(Boolean siteAdmin) {
    this.siteAdmin = siteAdmin;
  }


  public UserEntity skipWelcomeScreen(Boolean skipWelcomeScreen) {
    this.skipWelcomeScreen = skipWelcomeScreen;
    return this;
  }

  /**
   * Skip Welcome page in the UI?
   * @return skipWelcomeScreen
   */
  @javax.annotation.Nullable
  public Boolean getSkipWelcomeScreen() {
    return skipWelcomeScreen;
  }

  public void setSkipWelcomeScreen(Boolean skipWelcomeScreen) {
    this.skipWelcomeScreen = skipWelcomeScreen;
  }


  public UserEntity sslRequired(SslRequiredEnum sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

  /**
   * SSL required setting
   * @return sslRequired
   */
  @javax.annotation.Nullable
  public SslRequiredEnum getSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(SslRequiredEnum sslRequired) {
    this.sslRequired = sslRequired;
  }


  public UserEntity ssoStrategyId(Integer ssoStrategyId) {
    this.ssoStrategyId = ssoStrategyId;
    return this;
  }

  /**
   * SSO (Single Sign On) strategy ID for the user, if applicable.
   * @return ssoStrategyId
   */
  @javax.annotation.Nullable
  public Integer getSsoStrategyId() {
    return ssoStrategyId;
  }

  public void setSsoStrategyId(Integer ssoStrategyId) {
    this.ssoStrategyId = ssoStrategyId;
  }


  public UserEntity subscribeToNewsletter(Boolean subscribeToNewsletter) {
    this.subscribeToNewsletter = subscribeToNewsletter;
    return this;
  }

  /**
   * Is the user subscribed to the newsletter?
   * @return subscribeToNewsletter
   */
  @javax.annotation.Nullable
  public Boolean getSubscribeToNewsletter() {
    return subscribeToNewsletter;
  }

  public void setSubscribeToNewsletter(Boolean subscribeToNewsletter) {
    this.subscribeToNewsletter = subscribeToNewsletter;
  }


  public UserEntity timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * User time zone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public UserEntity typeOf2fa(String typeOf2fa) {
    this.typeOf2fa = typeOf2fa;
    return this;
  }

  /**
   * Type(s) of 2FA methods in use.  Will be either &#x60;sms&#x60;, &#x60;totp&#x60;, &#x60;u2f&#x60;, &#x60;yubi&#x60;, or multiple values sorted alphabetically and joined by an underscore.
   * @return typeOf2fa
   */
  @javax.annotation.Nullable
  public String getTypeOf2fa() {
    return typeOf2fa;
  }

  public void setTypeOf2fa(String typeOf2fa) {
    this.typeOf2fa = typeOf2fa;
  }


  public UserEntity userRoot(String userRoot) {
    this.userRoot = userRoot;
    return this;
  }

  /**
   * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.
   * @return userRoot
   */
  @javax.annotation.Nullable
  public String getUserRoot() {
    return userRoot;
  }

  public void setUserRoot(String userRoot) {
    this.userRoot = userRoot;
  }


  public UserEntity username(String username) {
    this.username = username;
    return this;
  }

  /**
   * User&#39;s username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserEntity userEntity = (UserEntity) o;
    return Objects.equals(this.active2fa, userEntity.active2fa) &&
        Objects.equals(this.adminGroupIds, userEntity.adminGroupIds) &&
        Objects.equals(this.allowedIps, userEntity.allowedIps) &&
        Objects.equals(this.apiKeysCount, userEntity.apiKeysCount) &&
        Objects.equals(this.attachmentsPermission, userEntity.attachmentsPermission) &&
        Objects.equals(this.authenticateUntil, userEntity.authenticateUntil) &&
        Objects.equals(this.authenticationMethod, userEntity.authenticationMethod) &&
        Objects.equals(this.avatarUrl, userEntity.avatarUrl) &&
        Objects.equals(this.billingPermission, userEntity.billingPermission) &&
        Objects.equals(this.bypassInactiveDisable, userEntity.bypassInactiveDisable) &&
        Objects.equals(this.bypassSiteAllowedIps, userEntity.bypassSiteAllowedIps) &&
        Objects.equals(this.company, userEntity.company) &&
        Objects.equals(this.createdAt, userEntity.createdAt) &&
        Objects.equals(this.davPermission, userEntity.davPermission) &&
        Objects.equals(this.daysRemainingUntilPasswordExpire, userEntity.daysRemainingUntilPasswordExpire) &&
        Objects.equals(this.disabled, userEntity.disabled) &&
        Objects.equals(this.email, userEntity.email) &&
        Objects.equals(this.externallyManaged, userEntity.externallyManaged) &&
        Objects.equals(this.firstLoginAt, userEntity.firstLoginAt) &&
        Objects.equals(this.ftpPermission, userEntity.ftpPermission) &&
        Objects.equals(this.groupIds, userEntity.groupIds) &&
        Objects.equals(this.headerText, userEntity.headerText) &&
        Objects.equals(this.id, userEntity.id) &&
        Objects.equals(this.language, userEntity.language) &&
        Objects.equals(this.lastActiveAt, userEntity.lastActiveAt) &&
        Objects.equals(this.lastApiUseAt, userEntity.lastApiUseAt) &&
        Objects.equals(this.lastDavLoginAt, userEntity.lastDavLoginAt) &&
        Objects.equals(this.lastDesktopLoginAt, userEntity.lastDesktopLoginAt) &&
        Objects.equals(this.lastFtpLoginAt, userEntity.lastFtpLoginAt) &&
        Objects.equals(this.lastLoginAt, userEntity.lastLoginAt) &&
        Objects.equals(this.lastProtocolCipher, userEntity.lastProtocolCipher) &&
        Objects.equals(this.lastRestapiLoginAt, userEntity.lastRestapiLoginAt) &&
        Objects.equals(this.lastSftpLoginAt, userEntity.lastSftpLoginAt) &&
        Objects.equals(this.lastWebLoginAt, userEntity.lastWebLoginAt) &&
        Objects.equals(this.lockoutExpires, userEntity.lockoutExpires) &&
        Objects.equals(this.name, userEntity.name) &&
        Objects.equals(this.notes, userEntity.notes) &&
        Objects.equals(this.notificationDailySendTime, userEntity.notificationDailySendTime) &&
        Objects.equals(this.officeIntegrationEnabled, userEntity.officeIntegrationEnabled) &&
        Objects.equals(this.passwordExpireAt, userEntity.passwordExpireAt) &&
        Objects.equals(this.passwordExpired, userEntity.passwordExpired) &&
        Objects.equals(this.passwordSetAt, userEntity.passwordSetAt) &&
        Objects.equals(this.passwordValidityDays, userEntity.passwordValidityDays) &&
        Objects.equals(this.publicKeysCount, userEntity.publicKeysCount) &&
        Objects.equals(this.receiveAdminAlerts, userEntity.receiveAdminAlerts) &&
        Objects.equals(this.require2fa, userEntity.require2fa) &&
        Objects.equals(this.requirePasswordChange, userEntity.requirePasswordChange) &&
        Objects.equals(this.restapiPermission, userEntity.restapiPermission) &&
        Objects.equals(this.selfManaged, userEntity.selfManaged) &&
        Objects.equals(this.sftpPermission, userEntity.sftpPermission) &&
        Objects.equals(this.siteAdmin, userEntity.siteAdmin) &&
        Objects.equals(this.skipWelcomeScreen, userEntity.skipWelcomeScreen) &&
        Objects.equals(this.sslRequired, userEntity.sslRequired) &&
        Objects.equals(this.ssoStrategyId, userEntity.ssoStrategyId) &&
        Objects.equals(this.subscribeToNewsletter, userEntity.subscribeToNewsletter) &&
        Objects.equals(this.timeZone, userEntity.timeZone) &&
        Objects.equals(this.typeOf2fa, userEntity.typeOf2fa) &&
        Objects.equals(this.userRoot, userEntity.userRoot) &&
        Objects.equals(this.username, userEntity.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active2fa, adminGroupIds, allowedIps, apiKeysCount, attachmentsPermission, authenticateUntil, authenticationMethod, avatarUrl, billingPermission, bypassInactiveDisable, bypassSiteAllowedIps, company, createdAt, davPermission, daysRemainingUntilPasswordExpire, disabled, email, externallyManaged, firstLoginAt, ftpPermission, groupIds, headerText, id, language, lastActiveAt, lastApiUseAt, lastDavLoginAt, lastDesktopLoginAt, lastFtpLoginAt, lastLoginAt, lastProtocolCipher, lastRestapiLoginAt, lastSftpLoginAt, lastWebLoginAt, lockoutExpires, name, notes, notificationDailySendTime, officeIntegrationEnabled, passwordExpireAt, passwordExpired, passwordSetAt, passwordValidityDays, publicKeysCount, receiveAdminAlerts, require2fa, requirePasswordChange, restapiPermission, selfManaged, sftpPermission, siteAdmin, skipWelcomeScreen, sslRequired, ssoStrategyId, subscribeToNewsletter, timeZone, typeOf2fa, userRoot, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserEntity {\n");
    sb.append("    active2fa: ").append(toIndentedString(active2fa)).append("\n");
    sb.append("    adminGroupIds: ").append(toIndentedString(adminGroupIds)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    apiKeysCount: ").append(toIndentedString(apiKeysCount)).append("\n");
    sb.append("    attachmentsPermission: ").append(toIndentedString(attachmentsPermission)).append("\n");
    sb.append("    authenticateUntil: ").append(toIndentedString(authenticateUntil)).append("\n");
    sb.append("    authenticationMethod: ").append(toIndentedString(authenticationMethod)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    billingPermission: ").append(toIndentedString(billingPermission)).append("\n");
    sb.append("    bypassInactiveDisable: ").append(toIndentedString(bypassInactiveDisable)).append("\n");
    sb.append("    bypassSiteAllowedIps: ").append(toIndentedString(bypassSiteAllowedIps)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    davPermission: ").append(toIndentedString(davPermission)).append("\n");
    sb.append("    daysRemainingUntilPasswordExpire: ").append(toIndentedString(daysRemainingUntilPasswordExpire)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    externallyManaged: ").append(toIndentedString(externallyManaged)).append("\n");
    sb.append("    firstLoginAt: ").append(toIndentedString(firstLoginAt)).append("\n");
    sb.append("    ftpPermission: ").append(toIndentedString(ftpPermission)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    headerText: ").append(toIndentedString(headerText)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastActiveAt: ").append(toIndentedString(lastActiveAt)).append("\n");
    sb.append("    lastApiUseAt: ").append(toIndentedString(lastApiUseAt)).append("\n");
    sb.append("    lastDavLoginAt: ").append(toIndentedString(lastDavLoginAt)).append("\n");
    sb.append("    lastDesktopLoginAt: ").append(toIndentedString(lastDesktopLoginAt)).append("\n");
    sb.append("    lastFtpLoginAt: ").append(toIndentedString(lastFtpLoginAt)).append("\n");
    sb.append("    lastLoginAt: ").append(toIndentedString(lastLoginAt)).append("\n");
    sb.append("    lastProtocolCipher: ").append(toIndentedString(lastProtocolCipher)).append("\n");
    sb.append("    lastRestapiLoginAt: ").append(toIndentedString(lastRestapiLoginAt)).append("\n");
    sb.append("    lastSftpLoginAt: ").append(toIndentedString(lastSftpLoginAt)).append("\n");
    sb.append("    lastWebLoginAt: ").append(toIndentedString(lastWebLoginAt)).append("\n");
    sb.append("    lockoutExpires: ").append(toIndentedString(lockoutExpires)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    notificationDailySendTime: ").append(toIndentedString(notificationDailySendTime)).append("\n");
    sb.append("    officeIntegrationEnabled: ").append(toIndentedString(officeIntegrationEnabled)).append("\n");
    sb.append("    passwordExpireAt: ").append(toIndentedString(passwordExpireAt)).append("\n");
    sb.append("    passwordExpired: ").append(toIndentedString(passwordExpired)).append("\n");
    sb.append("    passwordSetAt: ").append(toIndentedString(passwordSetAt)).append("\n");
    sb.append("    passwordValidityDays: ").append(toIndentedString(passwordValidityDays)).append("\n");
    sb.append("    publicKeysCount: ").append(toIndentedString(publicKeysCount)).append("\n");
    sb.append("    receiveAdminAlerts: ").append(toIndentedString(receiveAdminAlerts)).append("\n");
    sb.append("    require2fa: ").append(toIndentedString(require2fa)).append("\n");
    sb.append("    requirePasswordChange: ").append(toIndentedString(requirePasswordChange)).append("\n");
    sb.append("    restapiPermission: ").append(toIndentedString(restapiPermission)).append("\n");
    sb.append("    selfManaged: ").append(toIndentedString(selfManaged)).append("\n");
    sb.append("    sftpPermission: ").append(toIndentedString(sftpPermission)).append("\n");
    sb.append("    siteAdmin: ").append(toIndentedString(siteAdmin)).append("\n");
    sb.append("    skipWelcomeScreen: ").append(toIndentedString(skipWelcomeScreen)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    ssoStrategyId: ").append(toIndentedString(ssoStrategyId)).append("\n");
    sb.append("    subscribeToNewsletter: ").append(toIndentedString(subscribeToNewsletter)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    typeOf2fa: ").append(toIndentedString(typeOf2fa)).append("\n");
    sb.append("    userRoot: ").append(toIndentedString(userRoot)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_2fa");
    openapiFields.add("admin_group_ids");
    openapiFields.add("allowed_ips");
    openapiFields.add("api_keys_count");
    openapiFields.add("attachments_permission");
    openapiFields.add("authenticate_until");
    openapiFields.add("authentication_method");
    openapiFields.add("avatar_url");
    openapiFields.add("billing_permission");
    openapiFields.add("bypass_inactive_disable");
    openapiFields.add("bypass_site_allowed_ips");
    openapiFields.add("company");
    openapiFields.add("created_at");
    openapiFields.add("dav_permission");
    openapiFields.add("days_remaining_until_password_expire");
    openapiFields.add("disabled");
    openapiFields.add("email");
    openapiFields.add("externally_managed");
    openapiFields.add("first_login_at");
    openapiFields.add("ftp_permission");
    openapiFields.add("group_ids");
    openapiFields.add("header_text");
    openapiFields.add("id");
    openapiFields.add("language");
    openapiFields.add("last_active_at");
    openapiFields.add("last_api_use_at");
    openapiFields.add("last_dav_login_at");
    openapiFields.add("last_desktop_login_at");
    openapiFields.add("last_ftp_login_at");
    openapiFields.add("last_login_at");
    openapiFields.add("last_protocol_cipher");
    openapiFields.add("last_restapi_login_at");
    openapiFields.add("last_sftp_login_at");
    openapiFields.add("last_web_login_at");
    openapiFields.add("lockout_expires");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("notification_daily_send_time");
    openapiFields.add("office_integration_enabled");
    openapiFields.add("password_expire_at");
    openapiFields.add("password_expired");
    openapiFields.add("password_set_at");
    openapiFields.add("password_validity_days");
    openapiFields.add("public_keys_count");
    openapiFields.add("receive_admin_alerts");
    openapiFields.add("require_2fa");
    openapiFields.add("require_password_change");
    openapiFields.add("restapi_permission");
    openapiFields.add("self_managed");
    openapiFields.add("sftp_permission");
    openapiFields.add("site_admin");
    openapiFields.add("skip_welcome_screen");
    openapiFields.add("ssl_required");
    openapiFields.add("sso_strategy_id");
    openapiFields.add("subscribe_to_newsletter");
    openapiFields.add("time_zone");
    openapiFields.add("type_of_2fa");
    openapiFields.add("user_root");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserEntity is not found in the empty JSON string", UserEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("admin_group_ids") != null && !jsonObj.get("admin_group_ids").isJsonNull() && !jsonObj.get("admin_group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("admin_group_ids").toString()));
      }
      if ((jsonObj.get("allowed_ips") != null && !jsonObj.get("allowed_ips").isJsonNull()) && !jsonObj.get("allowed_ips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_ips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_ips").toString()));
      }
      if ((jsonObj.get("authentication_method") != null && !jsonObj.get("authentication_method").isJsonNull()) && !jsonObj.get("authentication_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_method").toString()));
      }
      // validate the optional field `authentication_method`
      if (jsonObj.get("authentication_method") != null && !jsonObj.get("authentication_method").isJsonNull()) {
        AuthenticationMethodEnum.validateJsonElement(jsonObj.get("authentication_method"));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("group_ids") != null && !jsonObj.get("group_ids").isJsonNull()) && !jsonObj.get("group_ids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_ids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_ids").toString()));
      }
      if ((jsonObj.get("header_text") != null && !jsonObj.get("header_text").isJsonNull()) && !jsonObj.get("header_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_text").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("last_protocol_cipher") != null && !jsonObj.get("last_protocol_cipher").isJsonNull()) && !jsonObj.get("last_protocol_cipher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_protocol_cipher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_protocol_cipher").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("require_2fa") != null && !jsonObj.get("require_2fa").isJsonNull()) && !jsonObj.get("require_2fa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `require_2fa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("require_2fa").toString()));
      }
      // validate the optional field `require_2fa`
      if (jsonObj.get("require_2fa") != null && !jsonObj.get("require_2fa").isJsonNull()) {
        Require2faEnum.validateJsonElement(jsonObj.get("require_2fa"));
      }
      if ((jsonObj.get("ssl_required") != null && !jsonObj.get("ssl_required").isJsonNull()) && !jsonObj.get("ssl_required").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl_required` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl_required").toString()));
      }
      // validate the optional field `ssl_required`
      if (jsonObj.get("ssl_required") != null && !jsonObj.get("ssl_required").isJsonNull()) {
        SslRequiredEnum.validateJsonElement(jsonObj.get("ssl_required"));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      if ((jsonObj.get("type_of_2fa") != null && !jsonObj.get("type_of_2fa").isJsonNull()) && !jsonObj.get("type_of_2fa").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_of_2fa` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_of_2fa").toString()));
      }
      if ((jsonObj.get("user_root") != null && !jsonObj.get("user_root").isJsonNull()) && !jsonObj.get("user_root").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_root` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_root").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<UserEntity>() {
           @Override
           public void write(JsonWriter out, UserEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserEntity
   * @throws IOException if the JSON string is invalid with respect to UserEntity
   */
  public static UserEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserEntity.class);
  }

  /**
   * Convert an instance of UserEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

