/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WebhookTestEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookTestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookTestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookTestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postWebhookTests
     * @param url URL for testing the webhook. (required)
     * @param action action for test body (optional)
     * @param body Additional body parameters. (optional)
     * @param encoding HTTP encoding method.  Can be JSON, XML, or RAW (form data). (optional)
     * @param fileAsBody Send the file data as the request body? (optional)
     * @param fileFormField Send the file data as a named parameter in the request POST body (optional)
     * @param headers Additional request headers. (optional)
     * @param method HTTP method(GET or POST). (optional)
     * @param rawBody raw body text (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The WebhookTests object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhookTestsCall(String url, String action, Object body, String encoding, Boolean fileAsBody, String fileFormField, Object headers, String method, String rawBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook_tests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarFormParams.put("action", action);
        }

        if (body != null) {
            localVarFormParams.put("body", body);
        }

        if (encoding != null) {
            localVarFormParams.put("encoding", encoding);
        }

        if (fileAsBody != null) {
            localVarFormParams.put("file_as_body", fileAsBody);
        }

        if (fileFormField != null) {
            localVarFormParams.put("file_form_field", fileFormField);
        }

        if (headers != null) {
            localVarFormParams.put("headers", headers);
        }

        if (method != null) {
            localVarFormParams.put("method", method);
        }

        if (rawBody != null) {
            localVarFormParams.put("raw_body", rawBody);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWebhookTestsValidateBeforeCall(String url, String action, Object body, String encoding, Boolean fileAsBody, String fileFormField, Object headers, String method, String rawBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling postWebhookTests(Async)");
        }

        return postWebhookTestsCall(url, action, body, encoding, fileAsBody, fileFormField, headers, method, rawBody, _callback);

    }

    /**
     * Create Webhook Test
     * Create Webhook Test
     * @param url URL for testing the webhook. (required)
     * @param action action for test body (optional)
     * @param body Additional body parameters. (optional)
     * @param encoding HTTP encoding method.  Can be JSON, XML, or RAW (form data). (optional)
     * @param fileAsBody Send the file data as the request body? (optional)
     * @param fileFormField Send the file data as a named parameter in the request POST body (optional)
     * @param headers Additional request headers. (optional)
     * @param method HTTP method(GET or POST). (optional)
     * @param rawBody raw body text (optional)
     * @return WebhookTestEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The WebhookTests object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public WebhookTestEntity postWebhookTests(String url, String action, Object body, String encoding, Boolean fileAsBody, String fileFormField, Object headers, String method, String rawBody) throws ApiException {
        ApiResponse<WebhookTestEntity> localVarResp = postWebhookTestsWithHttpInfo(url, action, body, encoding, fileAsBody, fileFormField, headers, method, rawBody);
        return localVarResp.getData();
    }

    /**
     * Create Webhook Test
     * Create Webhook Test
     * @param url URL for testing the webhook. (required)
     * @param action action for test body (optional)
     * @param body Additional body parameters. (optional)
     * @param encoding HTTP encoding method.  Can be JSON, XML, or RAW (form data). (optional)
     * @param fileAsBody Send the file data as the request body? (optional)
     * @param fileFormField Send the file data as a named parameter in the request POST body (optional)
     * @param headers Additional request headers. (optional)
     * @param method HTTP method(GET or POST). (optional)
     * @param rawBody raw body text (optional)
     * @return ApiResponse&lt;WebhookTestEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The WebhookTests object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookTestEntity> postWebhookTestsWithHttpInfo(String url, String action, Object body, String encoding, Boolean fileAsBody, String fileFormField, Object headers, String method, String rawBody) throws ApiException {
        okhttp3.Call localVarCall = postWebhookTestsValidateBeforeCall(url, action, body, encoding, fileAsBody, fileFormField, headers, method, rawBody, null);
        Type localVarReturnType = new TypeToken<WebhookTestEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Webhook Test (asynchronously)
     * Create Webhook Test
     * @param url URL for testing the webhook. (required)
     * @param action action for test body (optional)
     * @param body Additional body parameters. (optional)
     * @param encoding HTTP encoding method.  Can be JSON, XML, or RAW (form data). (optional)
     * @param fileAsBody Send the file data as the request body? (optional)
     * @param fileFormField Send the file data as a named parameter in the request POST body (optional)
     * @param headers Additional request headers. (optional)
     * @param method HTTP method(GET or POST). (optional)
     * @param rawBody raw body text (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The WebhookTests object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhookTestsAsync(String url, String action, Object body, String encoding, Boolean fileAsBody, String fileFormField, Object headers, String method, String rawBody, final ApiCallback<WebhookTestEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWebhookTestsValidateBeforeCall(url, action, body, encoding, fileAsBody, fileFormField, headers, method, rawBody, _callback);
        Type localVarReturnType = new TypeToken<WebhookTestEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
