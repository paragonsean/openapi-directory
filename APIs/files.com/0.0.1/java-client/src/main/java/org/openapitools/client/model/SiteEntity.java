/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ImageEntity;
import org.openapitools.client.model.SessionEntity;
import org.openapitools.client.model.UserEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Show site settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SiteEntity {
  public static final String SERIALIZED_NAME_ACTIVE_SFTP_HOST_KEY_ID = "active_sftp_host_key_id";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SFTP_HOST_KEY_ID)
  private Integer activeSftpHostKeyId;

  public static final String SERIALIZED_NAME_ADMIN_USER_ID = "admin_user_id";
  @SerializedName(SERIALIZED_NAME_ADMIN_USER_ID)
  private Integer adminUserId;

  public static final String SERIALIZED_NAME_ALLOW_BUNDLE_NAMES = "allow_bundle_names";
  @SerializedName(SERIALIZED_NAME_ALLOW_BUNDLE_NAMES)
  private Boolean allowBundleNames;

  public static final String SERIALIZED_NAME_ALLOWED2FA_METHOD_BYPASS_FOR_FTP_SFTP_DAV = "allowed_2fa_method_bypass_for_ftp_sftp_dav";
  @SerializedName(SERIALIZED_NAME_ALLOWED2FA_METHOD_BYPASS_FOR_FTP_SFTP_DAV)
  private Boolean allowed2faMethodBypassForFtpSftpDav;

  public static final String SERIALIZED_NAME_ALLOWED2FA_METHOD_SMS = "allowed_2fa_method_sms";
  @SerializedName(SERIALIZED_NAME_ALLOWED2FA_METHOD_SMS)
  private Boolean allowed2faMethodSms;

  public static final String SERIALIZED_NAME_ALLOWED2FA_METHOD_TOTP = "allowed_2fa_method_totp";
  @SerializedName(SERIALIZED_NAME_ALLOWED2FA_METHOD_TOTP)
  private Boolean allowed2faMethodTotp;

  public static final String SERIALIZED_NAME_ALLOWED2FA_METHOD_U2F = "allowed_2fa_method_u2f";
  @SerializedName(SERIALIZED_NAME_ALLOWED2FA_METHOD_U2F)
  private Boolean allowed2faMethodU2f;

  public static final String SERIALIZED_NAME_ALLOWED2FA_METHOD_WEBAUTHN = "allowed_2fa_method_webauthn";
  @SerializedName(SERIALIZED_NAME_ALLOWED2FA_METHOD_WEBAUTHN)
  private Boolean allowed2faMethodWebauthn;

  public static final String SERIALIZED_NAME_ALLOWED2FA_METHOD_YUBI = "allowed_2fa_method_yubi";
  @SerializedName(SERIALIZED_NAME_ALLOWED2FA_METHOD_YUBI)
  private Boolean allowed2faMethodYubi;

  public static final String SERIALIZED_NAME_ALLOWED_COUNTRIES = "allowed_countries";
  @SerializedName(SERIALIZED_NAME_ALLOWED_COUNTRIES)
  private String allowedCountries;

  public static final String SERIALIZED_NAME_ALLOWED_IPS = "allowed_ips";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IPS)
  private String allowedIps;

  public static final String SERIALIZED_NAME_ASK_ABOUT_OVERWRITES = "ask_about_overwrites";
  @SerializedName(SERIALIZED_NAME_ASK_ABOUT_OVERWRITES)
  private Boolean askAboutOverwrites;

  /**
   * Do Bundle owners receive activity notifications?
   */
  @JsonAdapter(BundleActivityNotificationsEnum.Adapter.class)
  public enum BundleActivityNotificationsEnum {
    NEVER("never"),
    
    ALWAYS("always"),
    
    PER_BUNDLE_SETTING("per_bundle_setting");

    private String value;

    BundleActivityNotificationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BundleActivityNotificationsEnum fromValue(String value) {
      for (BundleActivityNotificationsEnum b : BundleActivityNotificationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BundleActivityNotificationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BundleActivityNotificationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BundleActivityNotificationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BundleActivityNotificationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BundleActivityNotificationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUNDLE_ACTIVITY_NOTIFICATIONS = "bundle_activity_notifications";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ACTIVITY_NOTIFICATIONS)
  private BundleActivityNotificationsEnum bundleActivityNotifications;

  public static final String SERIALIZED_NAME_BUNDLE_EXPIRATION = "bundle_expiration";
  @SerializedName(SERIALIZED_NAME_BUNDLE_EXPIRATION)
  private Integer bundleExpiration;

  public static final String SERIALIZED_NAME_BUNDLE_PASSWORD_REQUIRED = "bundle_password_required";
  @SerializedName(SERIALIZED_NAME_BUNDLE_PASSWORD_REQUIRED)
  private Boolean bundlePasswordRequired;

  /**
   * Do Bundle owners receive registration notification?
   */
  @JsonAdapter(BundleRegistrationNotificationsEnum.Adapter.class)
  public enum BundleRegistrationNotificationsEnum {
    NEVER("never"),
    
    ALWAYS("always"),
    
    PER_BUNDLE_SETTING("per_bundle_setting");

    private String value;

    BundleRegistrationNotificationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BundleRegistrationNotificationsEnum fromValue(String value) {
      for (BundleRegistrationNotificationsEnum b : BundleRegistrationNotificationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BundleRegistrationNotificationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BundleRegistrationNotificationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BundleRegistrationNotificationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BundleRegistrationNotificationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BundleRegistrationNotificationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUNDLE_REGISTRATION_NOTIFICATIONS = "bundle_registration_notifications";
  @SerializedName(SERIALIZED_NAME_BUNDLE_REGISTRATION_NOTIFICATIONS)
  private BundleRegistrationNotificationsEnum bundleRegistrationNotifications;

  public static final String SERIALIZED_NAME_BUNDLE_REQUIRE_SHARE_RECIPIENT = "bundle_require_share_recipient";
  @SerializedName(SERIALIZED_NAME_BUNDLE_REQUIRE_SHARE_RECIPIENT)
  private Boolean bundleRequireShareRecipient;

  /**
   * Do Bundle uploaders receive upload confirmation notifications?
   */
  @JsonAdapter(BundleUploadReceiptNotificationsEnum.Adapter.class)
  public enum BundleUploadReceiptNotificationsEnum {
    NEVER("never"),
    
    ALWAYS("always"),
    
    PER_BUNDLE_SETTING("per_bundle_setting");

    private String value;

    BundleUploadReceiptNotificationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BundleUploadReceiptNotificationsEnum fromValue(String value) {
      for (BundleUploadReceiptNotificationsEnum b : BundleUploadReceiptNotificationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BundleUploadReceiptNotificationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BundleUploadReceiptNotificationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BundleUploadReceiptNotificationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BundleUploadReceiptNotificationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BundleUploadReceiptNotificationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUNDLE_UPLOAD_RECEIPT_NOTIFICATIONS = "bundle_upload_receipt_notifications";
  @SerializedName(SERIALIZED_NAME_BUNDLE_UPLOAD_RECEIPT_NOTIFICATIONS)
  private BundleUploadReceiptNotificationsEnum bundleUploadReceiptNotifications;

  public static final String SERIALIZED_NAME_BUNDLE_WATERMARK_ATTACHMENT = "bundle_watermark_attachment";
  @SerializedName(SERIALIZED_NAME_BUNDLE_WATERMARK_ATTACHMENT)
  private ImageEntity bundleWatermarkAttachment;

  public static final String SERIALIZED_NAME_BUNDLE_WATERMARK_VALUE = "bundle_watermark_value";
  @SerializedName(SERIALIZED_NAME_BUNDLE_WATERMARK_VALUE)
  private Object bundleWatermarkValue;

  public static final String SERIALIZED_NAME_COLOR2_LEFT = "color2_left";
  @SerializedName(SERIALIZED_NAME_COLOR2_LEFT)
  private String color2Left;

  public static final String SERIALIZED_NAME_COLOR2_LINK = "color2_link";
  @SerializedName(SERIALIZED_NAME_COLOR2_LINK)
  private String color2Link;

  public static final String SERIALIZED_NAME_COLOR2_TEXT = "color2_text";
  @SerializedName(SERIALIZED_NAME_COLOR2_TEXT)
  private String color2Text;

  public static final String SERIALIZED_NAME_COLOR2_TOP = "color2_top";
  @SerializedName(SERIALIZED_NAME_COLOR2_TOP)
  private String color2Top;

  public static final String SERIALIZED_NAME_COLOR2_TOP_TEXT = "color2_top_text";
  @SerializedName(SERIALIZED_NAME_COLOR2_TOP_TEXT)
  private String color2TopText;

  public static final String SERIALIZED_NAME_CONTACT_NAME = "contact_name";
  @SerializedName(SERIALIZED_NAME_CONTACT_NAME)
  private String contactName;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CUSTOM_NAMESPACE = "custom_namespace";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NAMESPACE)
  private Boolean customNamespace;

  public static final String SERIALIZED_NAME_DAYS_TO_RETAIN_BACKUPS = "days_to_retain_backups";
  @SerializedName(SERIALIZED_NAME_DAYS_TO_RETAIN_BACKUPS)
  private Integer daysToRetainBackups;

  public static final String SERIALIZED_NAME_DEFAULT_TIME_ZONE = "default_time_zone";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TIME_ZONE)
  private String defaultTimeZone;

  public static final String SERIALIZED_NAME_DESKTOP_APP = "desktop_app";
  @SerializedName(SERIALIZED_NAME_DESKTOP_APP)
  private Boolean desktopApp;

  public static final String SERIALIZED_NAME_DESKTOP_APP_SESSION_IP_PINNING = "desktop_app_session_ip_pinning";
  @SerializedName(SERIALIZED_NAME_DESKTOP_APP_SESSION_IP_PINNING)
  private Boolean desktopAppSessionIpPinning;

  public static final String SERIALIZED_NAME_DESKTOP_APP_SESSION_LIFETIME = "desktop_app_session_lifetime";
  @SerializedName(SERIALIZED_NAME_DESKTOP_APP_SESSION_LIFETIME)
  private Integer desktopAppSessionLifetime;

  public static final String SERIALIZED_NAME_DISABLE_FILES_CERTIFICATE_GENERATION = "disable_files_certificate_generation";
  @SerializedName(SERIALIZED_NAME_DISABLE_FILES_CERTIFICATE_GENERATION)
  private Boolean disableFilesCertificateGeneration;

  public static final String SERIALIZED_NAME_DISABLE_NOTIFICATIONS = "disable_notifications";
  @SerializedName(SERIALIZED_NAME_DISABLE_NOTIFICATIONS)
  private Boolean disableNotifications;

  public static final String SERIALIZED_NAME_DISABLE_PASSWORD_RESET = "disable_password_reset";
  @SerializedName(SERIALIZED_NAME_DISABLE_PASSWORD_RESET)
  private Boolean disablePasswordReset;

  public static final String SERIALIZED_NAME_DISABLE_USERS_FROM_INACTIVITY_PERIOD_DAYS = "disable_users_from_inactivity_period_days";
  @SerializedName(SERIALIZED_NAME_DISABLE_USERS_FROM_INACTIVITY_PERIOD_DAYS)
  private Integer disableUsersFromInactivityPeriodDays;

  public static final String SERIALIZED_NAME_DISALLOWED_COUNTRIES = "disallowed_countries";
  @SerializedName(SERIALIZED_NAME_DISALLOWED_COUNTRIES)
  private String disallowedCountries;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_HSTS_HEADER = "domain_hsts_header";
  @SerializedName(SERIALIZED_NAME_DOMAIN_HSTS_HEADER)
  private Boolean domainHstsHeader;

  /**
   * Letsencrypt chain to use when registering SSL Certificate for domain.
   */
  @JsonAdapter(DomainLetsencryptChainEnum.Adapter.class)
  public enum DomainLetsencryptChainEnum {
    DEFAULT("default"),
    
    ISRG_ROOT_X1("isrg_root_x1"),
    
    DST_ROOT_CA_X3("dst_root_ca_x3");

    private String value;

    DomainLetsencryptChainEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainLetsencryptChainEnum fromValue(String value) {
      for (DomainLetsencryptChainEnum b : DomainLetsencryptChainEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainLetsencryptChainEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainLetsencryptChainEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainLetsencryptChainEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DomainLetsencryptChainEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DomainLetsencryptChainEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN_LETSENCRYPT_CHAIN = "domain_letsencrypt_chain";
  @SerializedName(SERIALIZED_NAME_DOMAIN_LETSENCRYPT_CHAIN)
  private DomainLetsencryptChainEnum domainLetsencryptChain;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FOLDER_PERMISSIONS_GROUPS_ONLY = "folder_permissions_groups_only";
  @SerializedName(SERIALIZED_NAME_FOLDER_PERMISSIONS_GROUPS_ONLY)
  private Boolean folderPermissionsGroupsOnly;

  public static final String SERIALIZED_NAME_FTP_ENABLED = "ftp_enabled";
  @SerializedName(SERIALIZED_NAME_FTP_ENABLED)
  private Boolean ftpEnabled;

  public static final String SERIALIZED_NAME_HIPAA = "hipaa";
  @SerializedName(SERIALIZED_NAME_HIPAA)
  private Boolean hipaa;

  public static final String SERIALIZED_NAME_ICON128 = "icon128";
  @SerializedName(SERIALIZED_NAME_ICON128)
  private ImageEntity icon128;

  public static final String SERIALIZED_NAME_ICON16 = "icon16";
  @SerializedName(SERIALIZED_NAME_ICON16)
  private ImageEntity icon16;

  public static final String SERIALIZED_NAME_ICON32 = "icon32";
  @SerializedName(SERIALIZED_NAME_ICON32)
  private ImageEntity icon32;

  public static final String SERIALIZED_NAME_ICON48 = "icon48";
  @SerializedName(SERIALIZED_NAME_ICON48)
  private ImageEntity icon48;

  public static final String SERIALIZED_NAME_IMMUTABLE_FILES_SET_AT = "immutable_files_set_at";
  @SerializedName(SERIALIZED_NAME_IMMUTABLE_FILES_SET_AT)
  private OffsetDateTime immutableFilesSetAt;

  public static final String SERIALIZED_NAME_INCLUDE_PASSWORD_IN_WELCOME_EMAIL = "include_password_in_welcome_email";
  @SerializedName(SERIALIZED_NAME_INCLUDE_PASSWORD_IN_WELCOME_EMAIL)
  private Boolean includePasswordInWelcomeEmail;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LDAP_BASE_DN = "ldap_base_dn";
  @SerializedName(SERIALIZED_NAME_LDAP_BASE_DN)
  private String ldapBaseDn;

  public static final String SERIALIZED_NAME_LDAP_DOMAIN = "ldap_domain";
  @SerializedName(SERIALIZED_NAME_LDAP_DOMAIN)
  private String ldapDomain;

  public static final String SERIALIZED_NAME_LDAP_ENABLED = "ldap_enabled";
  @SerializedName(SERIALIZED_NAME_LDAP_ENABLED)
  private Boolean ldapEnabled;

  public static final String SERIALIZED_NAME_LDAP_GROUP_ACTION = "ldap_group_action";
  @SerializedName(SERIALIZED_NAME_LDAP_GROUP_ACTION)
  private String ldapGroupAction;

  public static final String SERIALIZED_NAME_LDAP_GROUP_EXCLUSION = "ldap_group_exclusion";
  @SerializedName(SERIALIZED_NAME_LDAP_GROUP_EXCLUSION)
  private String ldapGroupExclusion;

  public static final String SERIALIZED_NAME_LDAP_GROUP_INCLUSION = "ldap_group_inclusion";
  @SerializedName(SERIALIZED_NAME_LDAP_GROUP_INCLUSION)
  private String ldapGroupInclusion;

  public static final String SERIALIZED_NAME_LDAP_HOST = "ldap_host";
  @SerializedName(SERIALIZED_NAME_LDAP_HOST)
  private String ldapHost;

  public static final String SERIALIZED_NAME_LDAP_HOST2 = "ldap_host_2";
  @SerializedName(SERIALIZED_NAME_LDAP_HOST2)
  private String ldapHost2;

  public static final String SERIALIZED_NAME_LDAP_HOST3 = "ldap_host_3";
  @SerializedName(SERIALIZED_NAME_LDAP_HOST3)
  private String ldapHost3;

  public static final String SERIALIZED_NAME_LDAP_PORT = "ldap_port";
  @SerializedName(SERIALIZED_NAME_LDAP_PORT)
  private Integer ldapPort;

  public static final String SERIALIZED_NAME_LDAP_SECURE = "ldap_secure";
  @SerializedName(SERIALIZED_NAME_LDAP_SECURE)
  private Boolean ldapSecure;

  public static final String SERIALIZED_NAME_LDAP_TYPE = "ldap_type";
  @SerializedName(SERIALIZED_NAME_LDAP_TYPE)
  private String ldapType;

  public static final String SERIALIZED_NAME_LDAP_USER_ACTION = "ldap_user_action";
  @SerializedName(SERIALIZED_NAME_LDAP_USER_ACTION)
  private String ldapUserAction;

  public static final String SERIALIZED_NAME_LDAP_USER_INCLUDE_GROUPS = "ldap_user_include_groups";
  @SerializedName(SERIALIZED_NAME_LDAP_USER_INCLUDE_GROUPS)
  private String ldapUserIncludeGroups;

  public static final String SERIALIZED_NAME_LDAP_USERNAME = "ldap_username";
  @SerializedName(SERIALIZED_NAME_LDAP_USERNAME)
  private String ldapUsername;

  public static final String SERIALIZED_NAME_LDAP_USERNAME_FIELD = "ldap_username_field";
  @SerializedName(SERIALIZED_NAME_LDAP_USERNAME_FIELD)
  private String ldapUsernameField;

  public static final String SERIALIZED_NAME_LOGIN_HELP_TEXT = "login_help_text";
  @SerializedName(SERIALIZED_NAME_LOGIN_HELP_TEXT)
  private String loginHelpText;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private ImageEntity logo;

  public static final String SERIALIZED_NAME_MAX_PRIOR_PASSWORDS = "max_prior_passwords";
  @SerializedName(SERIALIZED_NAME_MAX_PRIOR_PASSWORDS)
  private Integer maxPriorPasswords;

  public static final String SERIALIZED_NAME_MOBILE_APP = "mobile_app";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP)
  private Boolean mobileApp;

  public static final String SERIALIZED_NAME_MOBILE_APP_SESSION_IP_PINNING = "mobile_app_session_ip_pinning";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP_SESSION_IP_PINNING)
  private Boolean mobileAppSessionIpPinning;

  public static final String SERIALIZED_NAME_MOBILE_APP_SESSION_LIFETIME = "mobile_app_session_lifetime";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP_SESSION_LIFETIME)
  private Integer mobileAppSessionLifetime;

  public static final String SERIALIZED_NAME_MOTD_TEXT = "motd_text";
  @SerializedName(SERIALIZED_NAME_MOTD_TEXT)
  private String motdText;

  public static final String SERIALIZED_NAME_MOTD_USE_FOR_FTP = "motd_use_for_ftp";
  @SerializedName(SERIALIZED_NAME_MOTD_USE_FOR_FTP)
  private Boolean motdUseForFtp;

  public static final String SERIALIZED_NAME_MOTD_USE_FOR_SFTP = "motd_use_for_sftp";
  @SerializedName(SERIALIZED_NAME_MOTD_USE_FOR_SFTP)
  private Boolean motdUseForSftp;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_BILLING_AMOUNT = "next_billing_amount";
  @SerializedName(SERIALIZED_NAME_NEXT_BILLING_AMOUNT)
  private Double nextBillingAmount;

  public static final String SERIALIZED_NAME_NEXT_BILLING_DATE = "next_billing_date";
  @SerializedName(SERIALIZED_NAME_NEXT_BILLING_DATE)
  private String nextBillingDate;

  public static final String SERIALIZED_NAME_NON_SSO_GROUPS_ALLOWED = "non_sso_groups_allowed";
  @SerializedName(SERIALIZED_NAME_NON_SSO_GROUPS_ALLOWED)
  private Boolean nonSsoGroupsAllowed;

  public static final String SERIALIZED_NAME_NON_SSO_USERS_ALLOWED = "non_sso_users_allowed";
  @SerializedName(SERIALIZED_NAME_NON_SSO_USERS_ALLOWED)
  private Boolean nonSsoUsersAllowed;

  public static final String SERIALIZED_NAME_OFFICE_INTEGRATION_AVAILABLE = "office_integration_available";
  @SerializedName(SERIALIZED_NAME_OFFICE_INTEGRATION_AVAILABLE)
  private Boolean officeIntegrationAvailable;

  /**
   * Office integration application used to edit and view the MS Office documents
   */
  @JsonAdapter(OfficeIntegrationTypeEnum.Adapter.class)
  public enum OfficeIntegrationTypeEnum {
    ONLY_OFFICE("only_office"),
    
    OFFICE_365("office_365"),
    
    DISABLED("disabled");

    private String value;

    OfficeIntegrationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfficeIntegrationTypeEnum fromValue(String value) {
      for (OfficeIntegrationTypeEnum b : OfficeIntegrationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OfficeIntegrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfficeIntegrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfficeIntegrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OfficeIntegrationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OfficeIntegrationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OFFICE_INTEGRATION_TYPE = "office_integration_type";
  @SerializedName(SERIALIZED_NAME_OFFICE_INTEGRATION_TYPE)
  private OfficeIntegrationTypeEnum officeIntegrationType;

  public static final String SERIALIZED_NAME_ONCEHUB_LINK = "oncehub_link";
  @SerializedName(SERIALIZED_NAME_ONCEHUB_LINK)
  private String oncehubLink;

  public static final String SERIALIZED_NAME_OPT_OUT_GLOBAL = "opt_out_global";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_GLOBAL)
  private Boolean optOutGlobal;

  public static final String SERIALIZED_NAME_OVERDUE = "overdue";
  @SerializedName(SERIALIZED_NAME_OVERDUE)
  private Boolean overdue;

  public static final String SERIALIZED_NAME_PASSWORD_MIN_LENGTH = "password_min_length";
  @SerializedName(SERIALIZED_NAME_PASSWORD_MIN_LENGTH)
  private Integer passwordMinLength;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIRE_LETTER = "password_require_letter";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIRE_LETTER)
  private Boolean passwordRequireLetter;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIRE_MIXED = "password_require_mixed";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIRE_MIXED)
  private Boolean passwordRequireMixed;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIRE_NUMBER = "password_require_number";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIRE_NUMBER)
  private Boolean passwordRequireNumber;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIRE_SPECIAL = "password_require_special";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIRE_SPECIAL)
  private Boolean passwordRequireSpecial;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIRE_UNBREACHED = "password_require_unbreached";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIRE_UNBREACHED)
  private Boolean passwordRequireUnbreached;

  public static final String SERIALIZED_NAME_PASSWORD_REQUIREMENTS_APPLY_TO_BUNDLES = "password_requirements_apply_to_bundles";
  @SerializedName(SERIALIZED_NAME_PASSWORD_REQUIREMENTS_APPLY_TO_BUNDLES)
  private Boolean passwordRequirementsApplyToBundles;

  public static final String SERIALIZED_NAME_PASSWORD_VALIDITY_DAYS = "password_validity_days";
  @SerializedName(SERIALIZED_NAME_PASSWORD_VALIDITY_DAYS)
  private Integer passwordValidityDays;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_PIN_ALL_REMOTE_SERVERS_TO_SITE_REGION = "pin_all_remote_servers_to_site_region";
  @SerializedName(SERIALIZED_NAME_PIN_ALL_REMOTE_SERVERS_TO_SITE_REGION)
  private Boolean pinAllRemoteServersToSiteRegion;

  public static final String SERIALIZED_NAME_REPLY_TO_EMAIL = "reply_to_email";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_EMAIL)
  private String replyToEmail;

  public static final String SERIALIZED_NAME_REQUIRE2FA = "require_2fa";
  @SerializedName(SERIALIZED_NAME_REQUIRE2FA)
  private Boolean require2fa;

  public static final String SERIALIZED_NAME_REQUIRE2FA_STOP_TIME = "require_2fa_stop_time";
  @SerializedName(SERIALIZED_NAME_REQUIRE2FA_STOP_TIME)
  private OffsetDateTime require2faStopTime;

  /**
   * What type of user is required to use two-factor authentication (when require_2fa is set to &#x60;true&#x60; for this site)?
   */
  @JsonAdapter(Require2faUserTypeEnum.Adapter.class)
  public enum Require2faUserTypeEnum {
    ALL("all"),
    
    FOLDER_AND_SITE_ADMINS("folder_and_site_admins"),
    
    SITE_ADMINS("site_admins");

    private String value;

    Require2faUserTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Require2faUserTypeEnum fromValue(String value) {
      for (Require2faUserTypeEnum b : Require2faUserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Require2faUserTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Require2faUserTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Require2faUserTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Require2faUserTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Require2faUserTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUIRE2FA_USER_TYPE = "require_2fa_user_type";
  @SerializedName(SERIALIZED_NAME_REQUIRE2FA_USER_TYPE)
  private Require2faUserTypeEnum require2faUserType;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private SessionEntity session;

  public static final String SERIALIZED_NAME_SESSION_EXPIRY = "session_expiry";
  @SerializedName(SERIALIZED_NAME_SESSION_EXPIRY)
  private Double sessionExpiry;

  public static final String SERIALIZED_NAME_SESSION_EXPIRY_MINUTES = "session_expiry_minutes";
  @SerializedName(SERIALIZED_NAME_SESSION_EXPIRY_MINUTES)
  private Integer sessionExpiryMinutes;

  public static final String SERIALIZED_NAME_SESSION_PINNED_BY_IP = "session_pinned_by_ip";
  @SerializedName(SERIALIZED_NAME_SESSION_PINNED_BY_IP)
  private Boolean sessionPinnedByIp;

  public static final String SERIALIZED_NAME_SFTP_ENABLED = "sftp_enabled";
  @SerializedName(SERIALIZED_NAME_SFTP_ENABLED)
  private Boolean sftpEnabled;

  /**
   * Sftp Host Key Type
   */
  @JsonAdapter(SftpHostKeyTypeEnum.Adapter.class)
  public enum SftpHostKeyTypeEnum {
    DEFAULT("default"),
    
    EXAVAULT("exavault"),
    
    CUSTOM("custom");

    private String value;

    SftpHostKeyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SftpHostKeyTypeEnum fromValue(String value) {
      for (SftpHostKeyTypeEnum b : SftpHostKeyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SftpHostKeyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SftpHostKeyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SftpHostKeyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SftpHostKeyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SftpHostKeyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SFTP_HOST_KEY_TYPE = "sftp_host_key_type";
  @SerializedName(SERIALIZED_NAME_SFTP_HOST_KEY_TYPE)
  private SftpHostKeyTypeEnum sftpHostKeyType;

  public static final String SERIALIZED_NAME_SFTP_INSECURE_CIPHERS = "sftp_insecure_ciphers";
  @SerializedName(SERIALIZED_NAME_SFTP_INSECURE_CIPHERS)
  private Boolean sftpInsecureCiphers;

  public static final String SERIALIZED_NAME_SFTP_USER_ROOT_ENABLED = "sftp_user_root_enabled";
  @SerializedName(SERIALIZED_NAME_SFTP_USER_ROOT_ENABLED)
  private Boolean sftpUserRootEnabled;

  public static final String SERIALIZED_NAME_SHARING_ENABLED = "sharing_enabled";
  @SerializedName(SERIALIZED_NAME_SHARING_ENABLED)
  private Boolean sharingEnabled;

  public static final String SERIALIZED_NAME_SHOW_REQUEST_ACCESS_LINK = "show_request_access_link";
  @SerializedName(SERIALIZED_NAME_SHOW_REQUEST_ACCESS_LINK)
  private Boolean showRequestAccessLink;

  public static final String SERIALIZED_NAME_SITE_FOOTER = "site_footer";
  @SerializedName(SERIALIZED_NAME_SITE_FOOTER)
  private String siteFooter;

  public static final String SERIALIZED_NAME_SITE_HEADER = "site_header";
  @SerializedName(SERIALIZED_NAME_SITE_HEADER)
  private String siteHeader;

  public static final String SERIALIZED_NAME_SMTP_ADDRESS = "smtp_address";
  @SerializedName(SERIALIZED_NAME_SMTP_ADDRESS)
  private String smtpAddress;

  public static final String SERIALIZED_NAME_SMTP_AUTHENTICATION = "smtp_authentication";
  @SerializedName(SERIALIZED_NAME_SMTP_AUTHENTICATION)
  private String smtpAuthentication;

  public static final String SERIALIZED_NAME_SMTP_FROM = "smtp_from";
  @SerializedName(SERIALIZED_NAME_SMTP_FROM)
  private String smtpFrom;

  public static final String SERIALIZED_NAME_SMTP_PORT = "smtp_port";
  @SerializedName(SERIALIZED_NAME_SMTP_PORT)
  private Integer smtpPort;

  public static final String SERIALIZED_NAME_SMTP_USERNAME = "smtp_username";
  @SerializedName(SERIALIZED_NAME_SMTP_USERNAME)
  private String smtpUsername;

  public static final String SERIALIZED_NAME_SSL_REQUIRED = "ssl_required";
  @SerializedName(SERIALIZED_NAME_SSL_REQUIRED)
  private Boolean sslRequired;

  public static final String SERIALIZED_NAME_SUBDOMAIN = "subdomain";
  @SerializedName(SERIALIZED_NAME_SUBDOMAIN)
  private String subdomain;

  public static final String SERIALIZED_NAME_SWITCH_TO_PLAN_DATE = "switch_to_plan_date";
  @SerializedName(SERIALIZED_NAME_SWITCH_TO_PLAN_DATE)
  private OffsetDateTime switchToPlanDate;

  public static final String SERIALIZED_NAME_TLS_DISABLED = "tls_disabled";
  @SerializedName(SERIALIZED_NAME_TLS_DISABLED)
  private Boolean tlsDisabled;

  public static final String SERIALIZED_NAME_TRIAL_DAYS_LEFT = "trial_days_left";
  @SerializedName(SERIALIZED_NAME_TRIAL_DAYS_LEFT)
  private Integer trialDaysLeft;

  public static final String SERIALIZED_NAME_TRIAL_UNTIL = "trial_until";
  @SerializedName(SERIALIZED_NAME_TRIAL_UNTIL)
  private OffsetDateTime trialUntil;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPLOADS_VIA_EMAIL_AUTHENTICATION = "uploads_via_email_authentication";
  @SerializedName(SERIALIZED_NAME_UPLOADS_VIA_EMAIL_AUTHENTICATION)
  private Boolean uploadsViaEmailAuthentication;

  public static final String SERIALIZED_NAME_USE_PROVIDED_MODIFIED_AT = "use_provided_modified_at";
  @SerializedName(SERIALIZED_NAME_USE_PROVIDED_MODIFIED_AT)
  private Boolean useProvidedModifiedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserEntity user;

  public static final String SERIALIZED_NAME_USER_LOCKOUT = "user_lockout";
  @SerializedName(SERIALIZED_NAME_USER_LOCKOUT)
  private Boolean userLockout;

  public static final String SERIALIZED_NAME_USER_LOCKOUT_LOCK_PERIOD = "user_lockout_lock_period";
  @SerializedName(SERIALIZED_NAME_USER_LOCKOUT_LOCK_PERIOD)
  private Integer userLockoutLockPeriod;

  public static final String SERIALIZED_NAME_USER_LOCKOUT_TRIES = "user_lockout_tries";
  @SerializedName(SERIALIZED_NAME_USER_LOCKOUT_TRIES)
  private Integer userLockoutTries;

  public static final String SERIALIZED_NAME_USER_LOCKOUT_WITHIN = "user_lockout_within";
  @SerializedName(SERIALIZED_NAME_USER_LOCKOUT_WITHIN)
  private Integer userLockoutWithin;

  public static final String SERIALIZED_NAME_USER_REQUESTS_ENABLED = "user_requests_enabled";
  @SerializedName(SERIALIZED_NAME_USER_REQUESTS_ENABLED)
  private Boolean userRequestsEnabled;

  public static final String SERIALIZED_NAME_USER_REQUESTS_NOTIFY_ADMINS = "user_requests_notify_admins";
  @SerializedName(SERIALIZED_NAME_USER_REQUESTS_NOTIFY_ADMINS)
  private Boolean userRequestsNotifyAdmins;

  public static final String SERIALIZED_NAME_WELCOME_CUSTOM_TEXT = "welcome_custom_text";
  @SerializedName(SERIALIZED_NAME_WELCOME_CUSTOM_TEXT)
  private String welcomeCustomText;

  public static final String SERIALIZED_NAME_WELCOME_EMAIL_CC = "welcome_email_cc";
  @SerializedName(SERIALIZED_NAME_WELCOME_EMAIL_CC)
  private String welcomeEmailCc;

  public static final String SERIALIZED_NAME_WELCOME_EMAIL_ENABLED = "welcome_email_enabled";
  @SerializedName(SERIALIZED_NAME_WELCOME_EMAIL_ENABLED)
  private Boolean welcomeEmailEnabled;

  public static final String SERIALIZED_NAME_WELCOME_EMAIL_SUBJECT = "welcome_email_subject";
  @SerializedName(SERIALIZED_NAME_WELCOME_EMAIL_SUBJECT)
  private String welcomeEmailSubject;

  /**
   * Does the welcome screen appear?
   */
  @JsonAdapter(WelcomeScreenEnum.Adapter.class)
  public enum WelcomeScreenEnum {
    ENABLED("enabled"),
    
    HIDDEN("hidden"),
    
    DISABLED("disabled");

    private String value;

    WelcomeScreenEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WelcomeScreenEnum fromValue(String value) {
      for (WelcomeScreenEnum b : WelcomeScreenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WelcomeScreenEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WelcomeScreenEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WelcomeScreenEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WelcomeScreenEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WelcomeScreenEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WELCOME_SCREEN = "welcome_screen";
  @SerializedName(SERIALIZED_NAME_WELCOME_SCREEN)
  private WelcomeScreenEnum welcomeScreen;

  public static final String SERIALIZED_NAME_WINDOWS_MODE_FTP = "windows_mode_ftp";
  @SerializedName(SERIALIZED_NAME_WINDOWS_MODE_FTP)
  private Boolean windowsModeFtp;

  public SiteEntity() {
  }

  public SiteEntity activeSftpHostKeyId(Integer activeSftpHostKeyId) {
    this.activeSftpHostKeyId = activeSftpHostKeyId;
    return this;
  }

  /**
   * Id of the currently selected custom SFTP Host Key
   * @return activeSftpHostKeyId
   */
  @javax.annotation.Nullable
  public Integer getActiveSftpHostKeyId() {
    return activeSftpHostKeyId;
  }

  public void setActiveSftpHostKeyId(Integer activeSftpHostKeyId) {
    this.activeSftpHostKeyId = activeSftpHostKeyId;
  }


  public SiteEntity adminUserId(Integer adminUserId) {
    this.adminUserId = adminUserId;
    return this;
  }

  /**
   * User ID for the main site administrator
   * @return adminUserId
   */
  @javax.annotation.Nullable
  public Integer getAdminUserId() {
    return adminUserId;
  }

  public void setAdminUserId(Integer adminUserId) {
    this.adminUserId = adminUserId;
  }


  public SiteEntity allowBundleNames(Boolean allowBundleNames) {
    this.allowBundleNames = allowBundleNames;
    return this;
  }

  /**
   * Are manual Bundle names allowed?
   * @return allowBundleNames
   */
  @javax.annotation.Nullable
  public Boolean getAllowBundleNames() {
    return allowBundleNames;
  }

  public void setAllowBundleNames(Boolean allowBundleNames) {
    this.allowBundleNames = allowBundleNames;
  }


  public SiteEntity allowed2faMethodBypassForFtpSftpDav(Boolean allowed2faMethodBypassForFtpSftpDav) {
    this.allowed2faMethodBypassForFtpSftpDav = allowed2faMethodBypassForFtpSftpDav;
    return this;
  }

  /**
   * Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?
   * @return allowed2faMethodBypassForFtpSftpDav
   */
  @javax.annotation.Nullable
  public Boolean getAllowed2faMethodBypassForFtpSftpDav() {
    return allowed2faMethodBypassForFtpSftpDav;
  }

  public void setAllowed2faMethodBypassForFtpSftpDav(Boolean allowed2faMethodBypassForFtpSftpDav) {
    this.allowed2faMethodBypassForFtpSftpDav = allowed2faMethodBypassForFtpSftpDav;
  }


  public SiteEntity allowed2faMethodSms(Boolean allowed2faMethodSms) {
    this.allowed2faMethodSms = allowed2faMethodSms;
    return this;
  }

  /**
   * Is SMS two factor authentication allowed?
   * @return allowed2faMethodSms
   */
  @javax.annotation.Nullable
  public Boolean getAllowed2faMethodSms() {
    return allowed2faMethodSms;
  }

  public void setAllowed2faMethodSms(Boolean allowed2faMethodSms) {
    this.allowed2faMethodSms = allowed2faMethodSms;
  }


  public SiteEntity allowed2faMethodTotp(Boolean allowed2faMethodTotp) {
    this.allowed2faMethodTotp = allowed2faMethodTotp;
    return this;
  }

  /**
   * Is TOTP two factor authentication allowed?
   * @return allowed2faMethodTotp
   */
  @javax.annotation.Nullable
  public Boolean getAllowed2faMethodTotp() {
    return allowed2faMethodTotp;
  }

  public void setAllowed2faMethodTotp(Boolean allowed2faMethodTotp) {
    this.allowed2faMethodTotp = allowed2faMethodTotp;
  }


  public SiteEntity allowed2faMethodU2f(Boolean allowed2faMethodU2f) {
    this.allowed2faMethodU2f = allowed2faMethodU2f;
    return this;
  }

  /**
   * Is U2F two factor authentication allowed?
   * @return allowed2faMethodU2f
   */
  @javax.annotation.Nullable
  public Boolean getAllowed2faMethodU2f() {
    return allowed2faMethodU2f;
  }

  public void setAllowed2faMethodU2f(Boolean allowed2faMethodU2f) {
    this.allowed2faMethodU2f = allowed2faMethodU2f;
  }


  public SiteEntity allowed2faMethodWebauthn(Boolean allowed2faMethodWebauthn) {
    this.allowed2faMethodWebauthn = allowed2faMethodWebauthn;
    return this;
  }

  /**
   * Is WebAuthn two factor authentication allowed?
   * @return allowed2faMethodWebauthn
   */
  @javax.annotation.Nullable
  public Boolean getAllowed2faMethodWebauthn() {
    return allowed2faMethodWebauthn;
  }

  public void setAllowed2faMethodWebauthn(Boolean allowed2faMethodWebauthn) {
    this.allowed2faMethodWebauthn = allowed2faMethodWebauthn;
  }


  public SiteEntity allowed2faMethodYubi(Boolean allowed2faMethodYubi) {
    this.allowed2faMethodYubi = allowed2faMethodYubi;
    return this;
  }

  /**
   * Is yubikey two factor authentication allowed?
   * @return allowed2faMethodYubi
   */
  @javax.annotation.Nullable
  public Boolean getAllowed2faMethodYubi() {
    return allowed2faMethodYubi;
  }

  public void setAllowed2faMethodYubi(Boolean allowed2faMethodYubi) {
    this.allowed2faMethodYubi = allowed2faMethodYubi;
  }


  public SiteEntity allowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
    return this;
  }

  /**
   * Comma seperated list of allowed Country codes
   * @return allowedCountries
   */
  @javax.annotation.Nullable
  public String getAllowedCountries() {
    return allowedCountries;
  }

  public void setAllowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
  }


  public SiteEntity allowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

  /**
   * List of allowed IP addresses
   * @return allowedIps
   */
  @javax.annotation.Nullable
  public String getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
  }


  public SiteEntity askAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
    return this;
  }

  /**
   * If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.
   * @return askAboutOverwrites
   */
  @javax.annotation.Nullable
  public Boolean getAskAboutOverwrites() {
    return askAboutOverwrites;
  }

  public void setAskAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
  }


  public SiteEntity bundleActivityNotifications(BundleActivityNotificationsEnum bundleActivityNotifications) {
    this.bundleActivityNotifications = bundleActivityNotifications;
    return this;
  }

  /**
   * Do Bundle owners receive activity notifications?
   * @return bundleActivityNotifications
   */
  @javax.annotation.Nullable
  public BundleActivityNotificationsEnum getBundleActivityNotifications() {
    return bundleActivityNotifications;
  }

  public void setBundleActivityNotifications(BundleActivityNotificationsEnum bundleActivityNotifications) {
    this.bundleActivityNotifications = bundleActivityNotifications;
  }


  public SiteEntity bundleExpiration(Integer bundleExpiration) {
    this.bundleExpiration = bundleExpiration;
    return this;
  }

  /**
   * Site-wide Bundle expiration in days
   * @return bundleExpiration
   */
  @javax.annotation.Nullable
  public Integer getBundleExpiration() {
    return bundleExpiration;
  }

  public void setBundleExpiration(Integer bundleExpiration) {
    this.bundleExpiration = bundleExpiration;
  }


  public SiteEntity bundlePasswordRequired(Boolean bundlePasswordRequired) {
    this.bundlePasswordRequired = bundlePasswordRequired;
    return this;
  }

  /**
   * Do Bundles require password protection?
   * @return bundlePasswordRequired
   */
  @javax.annotation.Nullable
  public Boolean getBundlePasswordRequired() {
    return bundlePasswordRequired;
  }

  public void setBundlePasswordRequired(Boolean bundlePasswordRequired) {
    this.bundlePasswordRequired = bundlePasswordRequired;
  }


  public SiteEntity bundleRegistrationNotifications(BundleRegistrationNotificationsEnum bundleRegistrationNotifications) {
    this.bundleRegistrationNotifications = bundleRegistrationNotifications;
    return this;
  }

  /**
   * Do Bundle owners receive registration notification?
   * @return bundleRegistrationNotifications
   */
  @javax.annotation.Nullable
  public BundleRegistrationNotificationsEnum getBundleRegistrationNotifications() {
    return bundleRegistrationNotifications;
  }

  public void setBundleRegistrationNotifications(BundleRegistrationNotificationsEnum bundleRegistrationNotifications) {
    this.bundleRegistrationNotifications = bundleRegistrationNotifications;
  }


  public SiteEntity bundleRequireShareRecipient(Boolean bundleRequireShareRecipient) {
    this.bundleRequireShareRecipient = bundleRequireShareRecipient;
    return this;
  }

  /**
   * Do Bundles require recipients for sharing?
   * @return bundleRequireShareRecipient
   */
  @javax.annotation.Nullable
  public Boolean getBundleRequireShareRecipient() {
    return bundleRequireShareRecipient;
  }

  public void setBundleRequireShareRecipient(Boolean bundleRequireShareRecipient) {
    this.bundleRequireShareRecipient = bundleRequireShareRecipient;
  }


  public SiteEntity bundleUploadReceiptNotifications(BundleUploadReceiptNotificationsEnum bundleUploadReceiptNotifications) {
    this.bundleUploadReceiptNotifications = bundleUploadReceiptNotifications;
    return this;
  }

  /**
   * Do Bundle uploaders receive upload confirmation notifications?
   * @return bundleUploadReceiptNotifications
   */
  @javax.annotation.Nullable
  public BundleUploadReceiptNotificationsEnum getBundleUploadReceiptNotifications() {
    return bundleUploadReceiptNotifications;
  }

  public void setBundleUploadReceiptNotifications(BundleUploadReceiptNotificationsEnum bundleUploadReceiptNotifications) {
    this.bundleUploadReceiptNotifications = bundleUploadReceiptNotifications;
  }


  public SiteEntity bundleWatermarkAttachment(ImageEntity bundleWatermarkAttachment) {
    this.bundleWatermarkAttachment = bundleWatermarkAttachment;
    return this;
  }

  /**
   * Get bundleWatermarkAttachment
   * @return bundleWatermarkAttachment
   */
  @javax.annotation.Nullable
  public ImageEntity getBundleWatermarkAttachment() {
    return bundleWatermarkAttachment;
  }

  public void setBundleWatermarkAttachment(ImageEntity bundleWatermarkAttachment) {
    this.bundleWatermarkAttachment = bundleWatermarkAttachment;
  }


  public SiteEntity bundleWatermarkValue(Object bundleWatermarkValue) {
    this.bundleWatermarkValue = bundleWatermarkValue;
    return this;
  }

  /**
   * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
   * @return bundleWatermarkValue
   */
  @javax.annotation.Nullable
  public Object getBundleWatermarkValue() {
    return bundleWatermarkValue;
  }

  public void setBundleWatermarkValue(Object bundleWatermarkValue) {
    this.bundleWatermarkValue = bundleWatermarkValue;
  }


  public SiteEntity color2Left(String color2Left) {
    this.color2Left = color2Left;
    return this;
  }

  /**
   * Page link and button color
   * @return color2Left
   */
  @javax.annotation.Nullable
  public String getColor2Left() {
    return color2Left;
  }

  public void setColor2Left(String color2Left) {
    this.color2Left = color2Left;
  }


  public SiteEntity color2Link(String color2Link) {
    this.color2Link = color2Link;
    return this;
  }

  /**
   * Top bar link color
   * @return color2Link
   */
  @javax.annotation.Nullable
  public String getColor2Link() {
    return color2Link;
  }

  public void setColor2Link(String color2Link) {
    this.color2Link = color2Link;
  }


  public SiteEntity color2Text(String color2Text) {
    this.color2Text = color2Text;
    return this;
  }

  /**
   * Page link and button color
   * @return color2Text
   */
  @javax.annotation.Nullable
  public String getColor2Text() {
    return color2Text;
  }

  public void setColor2Text(String color2Text) {
    this.color2Text = color2Text;
  }


  public SiteEntity color2Top(String color2Top) {
    this.color2Top = color2Top;
    return this;
  }

  /**
   * Top bar background color
   * @return color2Top
   */
  @javax.annotation.Nullable
  public String getColor2Top() {
    return color2Top;
  }

  public void setColor2Top(String color2Top) {
    this.color2Top = color2Top;
  }


  public SiteEntity color2TopText(String color2TopText) {
    this.color2TopText = color2TopText;
    return this;
  }

  /**
   * Top bar text color
   * @return color2TopText
   */
  @javax.annotation.Nullable
  public String getColor2TopText() {
    return color2TopText;
  }

  public void setColor2TopText(String color2TopText) {
    this.color2TopText = color2TopText;
  }


  public SiteEntity contactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

  /**
   * Site main contact name
   * @return contactName
   */
  @javax.annotation.Nullable
  public String getContactName() {
    return contactName;
  }

  public void setContactName(String contactName) {
    this.contactName = contactName;
  }


  public SiteEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Time this site was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SiteEntity currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Preferred currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SiteEntity customNamespace(Boolean customNamespace) {
    this.customNamespace = customNamespace;
    return this;
  }

  /**
   * Is this site using a custom namespace for users?
   * @return customNamespace
   */
  @javax.annotation.Nullable
  public Boolean getCustomNamespace() {
    return customNamespace;
  }

  public void setCustomNamespace(Boolean customNamespace) {
    this.customNamespace = customNamespace;
  }


  public SiteEntity daysToRetainBackups(Integer daysToRetainBackups) {
    this.daysToRetainBackups = daysToRetainBackups;
    return this;
  }

  /**
   * Number of days to keep deleted files
   * @return daysToRetainBackups
   */
  @javax.annotation.Nullable
  public Integer getDaysToRetainBackups() {
    return daysToRetainBackups;
  }

  public void setDaysToRetainBackups(Integer daysToRetainBackups) {
    this.daysToRetainBackups = daysToRetainBackups;
  }


  public SiteEntity defaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
    return this;
  }

  /**
   * Site default time zone
   * @return defaultTimeZone
   */
  @javax.annotation.Nullable
  public String getDefaultTimeZone() {
    return defaultTimeZone;
  }

  public void setDefaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
  }


  public SiteEntity desktopApp(Boolean desktopApp) {
    this.desktopApp = desktopApp;
    return this;
  }

  /**
   * Is the desktop app enabled?
   * @return desktopApp
   */
  @javax.annotation.Nullable
  public Boolean getDesktopApp() {
    return desktopApp;
  }

  public void setDesktopApp(Boolean desktopApp) {
    this.desktopApp = desktopApp;
  }


  public SiteEntity desktopAppSessionIpPinning(Boolean desktopAppSessionIpPinning) {
    this.desktopAppSessionIpPinning = desktopAppSessionIpPinning;
    return this;
  }

  /**
   * Is desktop app session IP pinning enabled?
   * @return desktopAppSessionIpPinning
   */
  @javax.annotation.Nullable
  public Boolean getDesktopAppSessionIpPinning() {
    return desktopAppSessionIpPinning;
  }

  public void setDesktopAppSessionIpPinning(Boolean desktopAppSessionIpPinning) {
    this.desktopAppSessionIpPinning = desktopAppSessionIpPinning;
  }


  public SiteEntity desktopAppSessionLifetime(Integer desktopAppSessionLifetime) {
    this.desktopAppSessionLifetime = desktopAppSessionLifetime;
    return this;
  }

  /**
   * Desktop app session lifetime (in hours)
   * @return desktopAppSessionLifetime
   */
  @javax.annotation.Nullable
  public Integer getDesktopAppSessionLifetime() {
    return desktopAppSessionLifetime;
  }

  public void setDesktopAppSessionLifetime(Integer desktopAppSessionLifetime) {
    this.desktopAppSessionLifetime = desktopAppSessionLifetime;
  }


  public SiteEntity disableFilesCertificateGeneration(Boolean disableFilesCertificateGeneration) {
    this.disableFilesCertificateGeneration = disableFilesCertificateGeneration;
    return this;
  }

  /**
   * If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.
   * @return disableFilesCertificateGeneration
   */
  @javax.annotation.Nullable
  public Boolean getDisableFilesCertificateGeneration() {
    return disableFilesCertificateGeneration;
  }

  public void setDisableFilesCertificateGeneration(Boolean disableFilesCertificateGeneration) {
    this.disableFilesCertificateGeneration = disableFilesCertificateGeneration;
  }


  public SiteEntity disableNotifications(Boolean disableNotifications) {
    this.disableNotifications = disableNotifications;
    return this;
  }

  /**
   * Are notifications disabled?
   * @return disableNotifications
   */
  @javax.annotation.Nullable
  public Boolean getDisableNotifications() {
    return disableNotifications;
  }

  public void setDisableNotifications(Boolean disableNotifications) {
    this.disableNotifications = disableNotifications;
  }


  public SiteEntity disablePasswordReset(Boolean disablePasswordReset) {
    this.disablePasswordReset = disablePasswordReset;
    return this;
  }

  /**
   * Is password reset disabled?
   * @return disablePasswordReset
   */
  @javax.annotation.Nullable
  public Boolean getDisablePasswordReset() {
    return disablePasswordReset;
  }

  public void setDisablePasswordReset(Boolean disablePasswordReset) {
    this.disablePasswordReset = disablePasswordReset;
  }


  public SiteEntity disableUsersFromInactivityPeriodDays(Integer disableUsersFromInactivityPeriodDays) {
    this.disableUsersFromInactivityPeriodDays = disableUsersFromInactivityPeriodDays;
    return this;
  }

  /**
   * If greater than zero, users will unable to login if they do not show activity within this number of days.
   * @return disableUsersFromInactivityPeriodDays
   */
  @javax.annotation.Nullable
  public Integer getDisableUsersFromInactivityPeriodDays() {
    return disableUsersFromInactivityPeriodDays;
  }

  public void setDisableUsersFromInactivityPeriodDays(Integer disableUsersFromInactivityPeriodDays) {
    this.disableUsersFromInactivityPeriodDays = disableUsersFromInactivityPeriodDays;
  }


  public SiteEntity disallowedCountries(String disallowedCountries) {
    this.disallowedCountries = disallowedCountries;
    return this;
  }

  /**
   * Comma seperated list of disallowed Country codes
   * @return disallowedCountries
   */
  @javax.annotation.Nullable
  public String getDisallowedCountries() {
    return disallowedCountries;
  }

  public void setDisallowedCountries(String disallowedCountries) {
    this.disallowedCountries = disallowedCountries;
  }


  public SiteEntity domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Custom domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public SiteEntity domainHstsHeader(Boolean domainHstsHeader) {
    this.domainHstsHeader = domainHstsHeader;
    return this;
  }

  /**
   * Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?
   * @return domainHstsHeader
   */
  @javax.annotation.Nullable
  public Boolean getDomainHstsHeader() {
    return domainHstsHeader;
  }

  public void setDomainHstsHeader(Boolean domainHstsHeader) {
    this.domainHstsHeader = domainHstsHeader;
  }


  public SiteEntity domainLetsencryptChain(DomainLetsencryptChainEnum domainLetsencryptChain) {
    this.domainLetsencryptChain = domainLetsencryptChain;
    return this;
  }

  /**
   * Letsencrypt chain to use when registering SSL Certificate for domain.
   * @return domainLetsencryptChain
   */
  @javax.annotation.Nullable
  public DomainLetsencryptChainEnum getDomainLetsencryptChain() {
    return domainLetsencryptChain;
  }

  public void setDomainLetsencryptChain(DomainLetsencryptChainEnum domainLetsencryptChain) {
    this.domainLetsencryptChain = domainLetsencryptChain;
  }


  public SiteEntity email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Main email for this site
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SiteEntity folderPermissionsGroupsOnly(Boolean folderPermissionsGroupsOnly) {
    this.folderPermissionsGroupsOnly = folderPermissionsGroupsOnly;
    return this;
  }

  /**
   * If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.
   * @return folderPermissionsGroupsOnly
   */
  @javax.annotation.Nullable
  public Boolean getFolderPermissionsGroupsOnly() {
    return folderPermissionsGroupsOnly;
  }

  public void setFolderPermissionsGroupsOnly(Boolean folderPermissionsGroupsOnly) {
    this.folderPermissionsGroupsOnly = folderPermissionsGroupsOnly;
  }


  public SiteEntity ftpEnabled(Boolean ftpEnabled) {
    this.ftpEnabled = ftpEnabled;
    return this;
  }

  /**
   * Is FTP enabled?
   * @return ftpEnabled
   */
  @javax.annotation.Nullable
  public Boolean getFtpEnabled() {
    return ftpEnabled;
  }

  public void setFtpEnabled(Boolean ftpEnabled) {
    this.ftpEnabled = ftpEnabled;
  }


  public SiteEntity hipaa(Boolean hipaa) {
    this.hipaa = hipaa;
    return this;
  }

  /**
   * Is there a signed HIPAA BAA between Files.com and this site?
   * @return hipaa
   */
  @javax.annotation.Nullable
  public Boolean getHipaa() {
    return hipaa;
  }

  public void setHipaa(Boolean hipaa) {
    this.hipaa = hipaa;
  }


  public SiteEntity icon128(ImageEntity icon128) {
    this.icon128 = icon128;
    return this;
  }

  /**
   * Get icon128
   * @return icon128
   */
  @javax.annotation.Nullable
  public ImageEntity getIcon128() {
    return icon128;
  }

  public void setIcon128(ImageEntity icon128) {
    this.icon128 = icon128;
  }


  public SiteEntity icon16(ImageEntity icon16) {
    this.icon16 = icon16;
    return this;
  }

  /**
   * Get icon16
   * @return icon16
   */
  @javax.annotation.Nullable
  public ImageEntity getIcon16() {
    return icon16;
  }

  public void setIcon16(ImageEntity icon16) {
    this.icon16 = icon16;
  }


  public SiteEntity icon32(ImageEntity icon32) {
    this.icon32 = icon32;
    return this;
  }

  /**
   * Get icon32
   * @return icon32
   */
  @javax.annotation.Nullable
  public ImageEntity getIcon32() {
    return icon32;
  }

  public void setIcon32(ImageEntity icon32) {
    this.icon32 = icon32;
  }


  public SiteEntity icon48(ImageEntity icon48) {
    this.icon48 = icon48;
    return this;
  }

  /**
   * Get icon48
   * @return icon48
   */
  @javax.annotation.Nullable
  public ImageEntity getIcon48() {
    return icon48;
  }

  public void setIcon48(ImageEntity icon48) {
    this.icon48 = icon48;
  }


  public SiteEntity immutableFilesSetAt(OffsetDateTime immutableFilesSetAt) {
    this.immutableFilesSetAt = immutableFilesSetAt;
    return this;
  }

  /**
   * Can files be modified?
   * @return immutableFilesSetAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImmutableFilesSetAt() {
    return immutableFilesSetAt;
  }

  public void setImmutableFilesSetAt(OffsetDateTime immutableFilesSetAt) {
    this.immutableFilesSetAt = immutableFilesSetAt;
  }


  public SiteEntity includePasswordInWelcomeEmail(Boolean includePasswordInWelcomeEmail) {
    this.includePasswordInWelcomeEmail = includePasswordInWelcomeEmail;
    return this;
  }

  /**
   * Include password in emails to new users?
   * @return includePasswordInWelcomeEmail
   */
  @javax.annotation.Nullable
  public Boolean getIncludePasswordInWelcomeEmail() {
    return includePasswordInWelcomeEmail;
  }

  public void setIncludePasswordInWelcomeEmail(Boolean includePasswordInWelcomeEmail) {
    this.includePasswordInWelcomeEmail = includePasswordInWelcomeEmail;
  }


  public SiteEntity language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Site default language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public SiteEntity ldapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
    return this;
  }

  /**
   * Base DN for looking up users in LDAP server
   * @return ldapBaseDn
   */
  @javax.annotation.Nullable
  public String getLdapBaseDn() {
    return ldapBaseDn;
  }

  public void setLdapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
  }


  public SiteEntity ldapDomain(String ldapDomain) {
    this.ldapDomain = ldapDomain;
    return this;
  }

  /**
   * Domain name that will be appended to usernames
   * @return ldapDomain
   */
  @javax.annotation.Nullable
  public String getLdapDomain() {
    return ldapDomain;
  }

  public void setLdapDomain(String ldapDomain) {
    this.ldapDomain = ldapDomain;
  }


  public SiteEntity ldapEnabled(Boolean ldapEnabled) {
    this.ldapEnabled = ldapEnabled;
    return this;
  }

  /**
   * Main LDAP setting: is LDAP enabled?
   * @return ldapEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLdapEnabled() {
    return ldapEnabled;
  }

  public void setLdapEnabled(Boolean ldapEnabled) {
    this.ldapEnabled = ldapEnabled;
  }


  public SiteEntity ldapGroupAction(String ldapGroupAction) {
    this.ldapGroupAction = ldapGroupAction;
    return this;
  }

  /**
   * Should we sync groups from LDAP server?
   * @return ldapGroupAction
   */
  @javax.annotation.Nullable
  public String getLdapGroupAction() {
    return ldapGroupAction;
  }

  public void setLdapGroupAction(String ldapGroupAction) {
    this.ldapGroupAction = ldapGroupAction;
  }


  public SiteEntity ldapGroupExclusion(String ldapGroupExclusion) {
    this.ldapGroupExclusion = ldapGroupExclusion;
    return this;
  }

  /**
   * Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.
   * @return ldapGroupExclusion
   */
  @javax.annotation.Nullable
  public String getLdapGroupExclusion() {
    return ldapGroupExclusion;
  }

  public void setLdapGroupExclusion(String ldapGroupExclusion) {
    this.ldapGroupExclusion = ldapGroupExclusion;
  }


  public SiteEntity ldapGroupInclusion(String ldapGroupInclusion) {
    this.ldapGroupInclusion = ldapGroupInclusion;
    return this;
  }

  /**
   * Comma or newline separated list of group names (with optional wildcards) to include when syncing.
   * @return ldapGroupInclusion
   */
  @javax.annotation.Nullable
  public String getLdapGroupInclusion() {
    return ldapGroupInclusion;
  }

  public void setLdapGroupInclusion(String ldapGroupInclusion) {
    this.ldapGroupInclusion = ldapGroupInclusion;
  }


  public SiteEntity ldapHost(String ldapHost) {
    this.ldapHost = ldapHost;
    return this;
  }

  /**
   * LDAP host
   * @return ldapHost
   */
  @javax.annotation.Nullable
  public String getLdapHost() {
    return ldapHost;
  }

  public void setLdapHost(String ldapHost) {
    this.ldapHost = ldapHost;
  }


  public SiteEntity ldapHost2(String ldapHost2) {
    this.ldapHost2 = ldapHost2;
    return this;
  }

  /**
   * LDAP backup host
   * @return ldapHost2
   */
  @javax.annotation.Nullable
  public String getLdapHost2() {
    return ldapHost2;
  }

  public void setLdapHost2(String ldapHost2) {
    this.ldapHost2 = ldapHost2;
  }


  public SiteEntity ldapHost3(String ldapHost3) {
    this.ldapHost3 = ldapHost3;
    return this;
  }

  /**
   * LDAP backup host
   * @return ldapHost3
   */
  @javax.annotation.Nullable
  public String getLdapHost3() {
    return ldapHost3;
  }

  public void setLdapHost3(String ldapHost3) {
    this.ldapHost3 = ldapHost3;
  }


  public SiteEntity ldapPort(Integer ldapPort) {
    this.ldapPort = ldapPort;
    return this;
  }

  /**
   * LDAP port
   * @return ldapPort
   */
  @javax.annotation.Nullable
  public Integer getLdapPort() {
    return ldapPort;
  }

  public void setLdapPort(Integer ldapPort) {
    this.ldapPort = ldapPort;
  }


  public SiteEntity ldapSecure(Boolean ldapSecure) {
    this.ldapSecure = ldapSecure;
    return this;
  }

  /**
   * Use secure LDAP?
   * @return ldapSecure
   */
  @javax.annotation.Nullable
  public Boolean getLdapSecure() {
    return ldapSecure;
  }

  public void setLdapSecure(Boolean ldapSecure) {
    this.ldapSecure = ldapSecure;
  }


  public SiteEntity ldapType(String ldapType) {
    this.ldapType = ldapType;
    return this;
  }

  /**
   * LDAP type
   * @return ldapType
   */
  @javax.annotation.Nullable
  public String getLdapType() {
    return ldapType;
  }

  public void setLdapType(String ldapType) {
    this.ldapType = ldapType;
  }


  public SiteEntity ldapUserAction(String ldapUserAction) {
    this.ldapUserAction = ldapUserAction;
    return this;
  }

  /**
   * Should we sync users from LDAP server?
   * @return ldapUserAction
   */
  @javax.annotation.Nullable
  public String getLdapUserAction() {
    return ldapUserAction;
  }

  public void setLdapUserAction(String ldapUserAction) {
    this.ldapUserAction = ldapUserAction;
  }


  public SiteEntity ldapUserIncludeGroups(String ldapUserIncludeGroups) {
    this.ldapUserIncludeGroups = ldapUserIncludeGroups;
    return this;
  }

  /**
   * Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.
   * @return ldapUserIncludeGroups
   */
  @javax.annotation.Nullable
  public String getLdapUserIncludeGroups() {
    return ldapUserIncludeGroups;
  }

  public void setLdapUserIncludeGroups(String ldapUserIncludeGroups) {
    this.ldapUserIncludeGroups = ldapUserIncludeGroups;
  }


  public SiteEntity ldapUsername(String ldapUsername) {
    this.ldapUsername = ldapUsername;
    return this;
  }

  /**
   * Username for signing in to LDAP server.
   * @return ldapUsername
   */
  @javax.annotation.Nullable
  public String getLdapUsername() {
    return ldapUsername;
  }

  public void setLdapUsername(String ldapUsername) {
    this.ldapUsername = ldapUsername;
  }


  public SiteEntity ldapUsernameField(String ldapUsernameField) {
    this.ldapUsernameField = ldapUsernameField;
    return this;
  }

  /**
   * LDAP username field
   * @return ldapUsernameField
   */
  @javax.annotation.Nullable
  public String getLdapUsernameField() {
    return ldapUsernameField;
  }

  public void setLdapUsernameField(String ldapUsernameField) {
    this.ldapUsernameField = ldapUsernameField;
  }


  public SiteEntity loginHelpText(String loginHelpText) {
    this.loginHelpText = loginHelpText;
    return this;
  }

  /**
   * Login help text
   * @return loginHelpText
   */
  @javax.annotation.Nullable
  public String getLoginHelpText() {
    return loginHelpText;
  }

  public void setLoginHelpText(String loginHelpText) {
    this.loginHelpText = loginHelpText;
  }


  public SiteEntity logo(ImageEntity logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public ImageEntity getLogo() {
    return logo;
  }

  public void setLogo(ImageEntity logo) {
    this.logo = logo;
  }


  public SiteEntity maxPriorPasswords(Integer maxPriorPasswords) {
    this.maxPriorPasswords = maxPriorPasswords;
    return this;
  }

  /**
   * Number of prior passwords to disallow
   * @return maxPriorPasswords
   */
  @javax.annotation.Nullable
  public Integer getMaxPriorPasswords() {
    return maxPriorPasswords;
  }

  public void setMaxPriorPasswords(Integer maxPriorPasswords) {
    this.maxPriorPasswords = maxPriorPasswords;
  }


  public SiteEntity mobileApp(Boolean mobileApp) {
    this.mobileApp = mobileApp;
    return this;
  }

  /**
   * Is the mobile app enabled?
   * @return mobileApp
   */
  @javax.annotation.Nullable
  public Boolean getMobileApp() {
    return mobileApp;
  }

  public void setMobileApp(Boolean mobileApp) {
    this.mobileApp = mobileApp;
  }


  public SiteEntity mobileAppSessionIpPinning(Boolean mobileAppSessionIpPinning) {
    this.mobileAppSessionIpPinning = mobileAppSessionIpPinning;
    return this;
  }

  /**
   * Is mobile app session IP pinning enabled?
   * @return mobileAppSessionIpPinning
   */
  @javax.annotation.Nullable
  public Boolean getMobileAppSessionIpPinning() {
    return mobileAppSessionIpPinning;
  }

  public void setMobileAppSessionIpPinning(Boolean mobileAppSessionIpPinning) {
    this.mobileAppSessionIpPinning = mobileAppSessionIpPinning;
  }


  public SiteEntity mobileAppSessionLifetime(Integer mobileAppSessionLifetime) {
    this.mobileAppSessionLifetime = mobileAppSessionLifetime;
    return this;
  }

  /**
   * Mobile app session lifetime (in hours)
   * @return mobileAppSessionLifetime
   */
  @javax.annotation.Nullable
  public Integer getMobileAppSessionLifetime() {
    return mobileAppSessionLifetime;
  }

  public void setMobileAppSessionLifetime(Integer mobileAppSessionLifetime) {
    this.mobileAppSessionLifetime = mobileAppSessionLifetime;
  }


  public SiteEntity motdText(String motdText) {
    this.motdText = motdText;
    return this;
  }

  /**
   * A message to show users when they connect via FTP or SFTP.
   * @return motdText
   */
  @javax.annotation.Nullable
  public String getMotdText() {
    return motdText;
  }

  public void setMotdText(String motdText) {
    this.motdText = motdText;
  }


  public SiteEntity motdUseForFtp(Boolean motdUseForFtp) {
    this.motdUseForFtp = motdUseForFtp;
    return this;
  }

  /**
   * Show message to users connecting via FTP
   * @return motdUseForFtp
   */
  @javax.annotation.Nullable
  public Boolean getMotdUseForFtp() {
    return motdUseForFtp;
  }

  public void setMotdUseForFtp(Boolean motdUseForFtp) {
    this.motdUseForFtp = motdUseForFtp;
  }


  public SiteEntity motdUseForSftp(Boolean motdUseForSftp) {
    this.motdUseForSftp = motdUseForSftp;
    return this;
  }

  /**
   * Show message to users connecting via SFTP
   * @return motdUseForSftp
   */
  @javax.annotation.Nullable
  public Boolean getMotdUseForSftp() {
    return motdUseForSftp;
  }

  public void setMotdUseForSftp(Boolean motdUseForSftp) {
    this.motdUseForSftp = motdUseForSftp;
  }


  public SiteEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Site name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SiteEntity nextBillingAmount(Double nextBillingAmount) {
    this.nextBillingAmount = nextBillingAmount;
    return this;
  }

  /**
   * Next billing amount
   * @return nextBillingAmount
   */
  @javax.annotation.Nullable
  public Double getNextBillingAmount() {
    return nextBillingAmount;
  }

  public void setNextBillingAmount(Double nextBillingAmount) {
    this.nextBillingAmount = nextBillingAmount;
  }


  public SiteEntity nextBillingDate(String nextBillingDate) {
    this.nextBillingDate = nextBillingDate;
    return this;
  }

  /**
   * Next billing date
   * @return nextBillingDate
   */
  @javax.annotation.Nullable
  public String getNextBillingDate() {
    return nextBillingDate;
  }

  public void setNextBillingDate(String nextBillingDate) {
    this.nextBillingDate = nextBillingDate;
  }


  public SiteEntity nonSsoGroupsAllowed(Boolean nonSsoGroupsAllowed) {
    this.nonSsoGroupsAllowed = nonSsoGroupsAllowed;
    return this;
  }

  /**
   * If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.
   * @return nonSsoGroupsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getNonSsoGroupsAllowed() {
    return nonSsoGroupsAllowed;
  }

  public void setNonSsoGroupsAllowed(Boolean nonSsoGroupsAllowed) {
    this.nonSsoGroupsAllowed = nonSsoGroupsAllowed;
  }


  public SiteEntity nonSsoUsersAllowed(Boolean nonSsoUsersAllowed) {
    this.nonSsoUsersAllowed = nonSsoUsersAllowed;
    return this;
  }

  /**
   * If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.
   * @return nonSsoUsersAllowed
   */
  @javax.annotation.Nullable
  public Boolean getNonSsoUsersAllowed() {
    return nonSsoUsersAllowed;
  }

  public void setNonSsoUsersAllowed(Boolean nonSsoUsersAllowed) {
    this.nonSsoUsersAllowed = nonSsoUsersAllowed;
  }


  public SiteEntity officeIntegrationAvailable(Boolean officeIntegrationAvailable) {
    this.officeIntegrationAvailable = officeIntegrationAvailable;
    return this;
  }

  /**
   * Allow users to use Office for the web?
   * @return officeIntegrationAvailable
   */
  @javax.annotation.Nullable
  public Boolean getOfficeIntegrationAvailable() {
    return officeIntegrationAvailable;
  }

  public void setOfficeIntegrationAvailable(Boolean officeIntegrationAvailable) {
    this.officeIntegrationAvailable = officeIntegrationAvailable;
  }


  public SiteEntity officeIntegrationType(OfficeIntegrationTypeEnum officeIntegrationType) {
    this.officeIntegrationType = officeIntegrationType;
    return this;
  }

  /**
   * Office integration application used to edit and view the MS Office documents
   * @return officeIntegrationType
   */
  @javax.annotation.Nullable
  public OfficeIntegrationTypeEnum getOfficeIntegrationType() {
    return officeIntegrationType;
  }

  public void setOfficeIntegrationType(OfficeIntegrationTypeEnum officeIntegrationType) {
    this.officeIntegrationType = officeIntegrationType;
  }


  public SiteEntity oncehubLink(String oncehubLink) {
    this.oncehubLink = oncehubLink;
    return this;
  }

  /**
   * Link to scheduling a meeting with our Sales team
   * @return oncehubLink
   */
  @javax.annotation.Nullable
  public String getOncehubLink() {
    return oncehubLink;
  }

  public void setOncehubLink(String oncehubLink) {
    this.oncehubLink = oncehubLink;
  }


  public SiteEntity optOutGlobal(Boolean optOutGlobal) {
    this.optOutGlobal = optOutGlobal;
    return this;
  }

  /**
   * Use servers in the USA only?
   * @return optOutGlobal
   */
  @javax.annotation.Nullable
  public Boolean getOptOutGlobal() {
    return optOutGlobal;
  }

  public void setOptOutGlobal(Boolean optOutGlobal) {
    this.optOutGlobal = optOutGlobal;
  }


  public SiteEntity overdue(Boolean overdue) {
    this.overdue = overdue;
    return this;
  }

  /**
   * Is this site&#39;s billing overdue?
   * @return overdue
   */
  @javax.annotation.Nullable
  public Boolean getOverdue() {
    return overdue;
  }

  public void setOverdue(Boolean overdue) {
    this.overdue = overdue;
  }


  public SiteEntity passwordMinLength(Integer passwordMinLength) {
    this.passwordMinLength = passwordMinLength;
    return this;
  }

  /**
   * Shortest password length for users
   * @return passwordMinLength
   */
  @javax.annotation.Nullable
  public Integer getPasswordMinLength() {
    return passwordMinLength;
  }

  public void setPasswordMinLength(Integer passwordMinLength) {
    this.passwordMinLength = passwordMinLength;
  }


  public SiteEntity passwordRequireLetter(Boolean passwordRequireLetter) {
    this.passwordRequireLetter = passwordRequireLetter;
    return this;
  }

  /**
   * Require a letter in passwords?
   * @return passwordRequireLetter
   */
  @javax.annotation.Nullable
  public Boolean getPasswordRequireLetter() {
    return passwordRequireLetter;
  }

  public void setPasswordRequireLetter(Boolean passwordRequireLetter) {
    this.passwordRequireLetter = passwordRequireLetter;
  }


  public SiteEntity passwordRequireMixed(Boolean passwordRequireMixed) {
    this.passwordRequireMixed = passwordRequireMixed;
    return this;
  }

  /**
   * Require lower and upper case letters in passwords?
   * @return passwordRequireMixed
   */
  @javax.annotation.Nullable
  public Boolean getPasswordRequireMixed() {
    return passwordRequireMixed;
  }

  public void setPasswordRequireMixed(Boolean passwordRequireMixed) {
    this.passwordRequireMixed = passwordRequireMixed;
  }


  public SiteEntity passwordRequireNumber(Boolean passwordRequireNumber) {
    this.passwordRequireNumber = passwordRequireNumber;
    return this;
  }

  /**
   * Require a number in passwords?
   * @return passwordRequireNumber
   */
  @javax.annotation.Nullable
  public Boolean getPasswordRequireNumber() {
    return passwordRequireNumber;
  }

  public void setPasswordRequireNumber(Boolean passwordRequireNumber) {
    this.passwordRequireNumber = passwordRequireNumber;
  }


  public SiteEntity passwordRequireSpecial(Boolean passwordRequireSpecial) {
    this.passwordRequireSpecial = passwordRequireSpecial;
    return this;
  }

  /**
   * Require special characters in password?
   * @return passwordRequireSpecial
   */
  @javax.annotation.Nullable
  public Boolean getPasswordRequireSpecial() {
    return passwordRequireSpecial;
  }

  public void setPasswordRequireSpecial(Boolean passwordRequireSpecial) {
    this.passwordRequireSpecial = passwordRequireSpecial;
  }


  public SiteEntity passwordRequireUnbreached(Boolean passwordRequireUnbreached) {
    this.passwordRequireUnbreached = passwordRequireUnbreached;
    return this;
  }

  /**
   * Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)
   * @return passwordRequireUnbreached
   */
  @javax.annotation.Nullable
  public Boolean getPasswordRequireUnbreached() {
    return passwordRequireUnbreached;
  }

  public void setPasswordRequireUnbreached(Boolean passwordRequireUnbreached) {
    this.passwordRequireUnbreached = passwordRequireUnbreached;
  }


  public SiteEntity passwordRequirementsApplyToBundles(Boolean passwordRequirementsApplyToBundles) {
    this.passwordRequirementsApplyToBundles = passwordRequirementsApplyToBundles;
    return this;
  }

  /**
   * Require bundles&#39; passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users&#39; passwords?
   * @return passwordRequirementsApplyToBundles
   */
  @javax.annotation.Nullable
  public Boolean getPasswordRequirementsApplyToBundles() {
    return passwordRequirementsApplyToBundles;
  }

  public void setPasswordRequirementsApplyToBundles(Boolean passwordRequirementsApplyToBundles) {
    this.passwordRequirementsApplyToBundles = passwordRequirementsApplyToBundles;
  }


  public SiteEntity passwordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
    return this;
  }

  /**
   * Number of days password is valid
   * @return passwordValidityDays
   */
  @javax.annotation.Nullable
  public Integer getPasswordValidityDays() {
    return passwordValidityDays;
  }

  public void setPasswordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
  }


  public SiteEntity phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Site phone number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public SiteEntity pinAllRemoteServersToSiteRegion(Boolean pinAllRemoteServersToSiteRegion) {
    this.pinAllRemoteServersToSiteRegion = pinAllRemoteServersToSiteRegion;
    return this;
  }

  /**
   * If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.
   * @return pinAllRemoteServersToSiteRegion
   */
  @javax.annotation.Nullable
  public Boolean getPinAllRemoteServersToSiteRegion() {
    return pinAllRemoteServersToSiteRegion;
  }

  public void setPinAllRemoteServersToSiteRegion(Boolean pinAllRemoteServersToSiteRegion) {
    this.pinAllRemoteServersToSiteRegion = pinAllRemoteServersToSiteRegion;
  }


  public SiteEntity replyToEmail(String replyToEmail) {
    this.replyToEmail = replyToEmail;
    return this;
  }

  /**
   * Reply-to email for this site
   * @return replyToEmail
   */
  @javax.annotation.Nullable
  public String getReplyToEmail() {
    return replyToEmail;
  }

  public void setReplyToEmail(String replyToEmail) {
    this.replyToEmail = replyToEmail;
  }


  public SiteEntity require2fa(Boolean require2fa) {
    this.require2fa = require2fa;
    return this;
  }

  /**
   * Require two-factor authentication for all users?
   * @return require2fa
   */
  @javax.annotation.Nullable
  public Boolean getRequire2fa() {
    return require2fa;
  }

  public void setRequire2fa(Boolean require2fa) {
    this.require2fa = require2fa;
  }


  public SiteEntity require2faStopTime(OffsetDateTime require2faStopTime) {
    this.require2faStopTime = require2faStopTime;
    return this;
  }

  /**
   * If set, requirement for two-factor authentication has been scheduled to end on this date-time.
   * @return require2faStopTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequire2faStopTime() {
    return require2faStopTime;
  }

  public void setRequire2faStopTime(OffsetDateTime require2faStopTime) {
    this.require2faStopTime = require2faStopTime;
  }


  public SiteEntity require2faUserType(Require2faUserTypeEnum require2faUserType) {
    this.require2faUserType = require2faUserType;
    return this;
  }

  /**
   * What type of user is required to use two-factor authentication (when require_2fa is set to &#x60;true&#x60; for this site)?
   * @return require2faUserType
   */
  @javax.annotation.Nullable
  public Require2faUserTypeEnum getRequire2faUserType() {
    return require2faUserType;
  }

  public void setRequire2faUserType(Require2faUserTypeEnum require2faUserType) {
    this.require2faUserType = require2faUserType;
  }


  public SiteEntity session(SessionEntity session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public SessionEntity getSession() {
    return session;
  }

  public void setSession(SessionEntity session) {
    this.session = session;
  }


  public SiteEntity sessionExpiry(Double sessionExpiry) {
    this.sessionExpiry = sessionExpiry;
    return this;
  }

  /**
   * Session expiry in hours
   * @return sessionExpiry
   */
  @javax.annotation.Nullable
  public Double getSessionExpiry() {
    return sessionExpiry;
  }

  public void setSessionExpiry(Double sessionExpiry) {
    this.sessionExpiry = sessionExpiry;
  }


  public SiteEntity sessionExpiryMinutes(Integer sessionExpiryMinutes) {
    this.sessionExpiryMinutes = sessionExpiryMinutes;
    return this;
  }

  /**
   * Session expiry in minutes
   * @return sessionExpiryMinutes
   */
  @javax.annotation.Nullable
  public Integer getSessionExpiryMinutes() {
    return sessionExpiryMinutes;
  }

  public void setSessionExpiryMinutes(Integer sessionExpiryMinutes) {
    this.sessionExpiryMinutes = sessionExpiryMinutes;
  }


  public SiteEntity sessionPinnedByIp(Boolean sessionPinnedByIp) {
    this.sessionPinnedByIp = sessionPinnedByIp;
    return this;
  }

  /**
   * Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)
   * @return sessionPinnedByIp
   */
  @javax.annotation.Nullable
  public Boolean getSessionPinnedByIp() {
    return sessionPinnedByIp;
  }

  public void setSessionPinnedByIp(Boolean sessionPinnedByIp) {
    this.sessionPinnedByIp = sessionPinnedByIp;
  }


  public SiteEntity sftpEnabled(Boolean sftpEnabled) {
    this.sftpEnabled = sftpEnabled;
    return this;
  }

  /**
   * Is SFTP enabled?
   * @return sftpEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSftpEnabled() {
    return sftpEnabled;
  }

  public void setSftpEnabled(Boolean sftpEnabled) {
    this.sftpEnabled = sftpEnabled;
  }


  public SiteEntity sftpHostKeyType(SftpHostKeyTypeEnum sftpHostKeyType) {
    this.sftpHostKeyType = sftpHostKeyType;
    return this;
  }

  /**
   * Sftp Host Key Type
   * @return sftpHostKeyType
   */
  @javax.annotation.Nullable
  public SftpHostKeyTypeEnum getSftpHostKeyType() {
    return sftpHostKeyType;
  }

  public void setSftpHostKeyType(SftpHostKeyTypeEnum sftpHostKeyType) {
    this.sftpHostKeyType = sftpHostKeyType;
  }


  public SiteEntity sftpInsecureCiphers(Boolean sftpInsecureCiphers) {
    this.sftpInsecureCiphers = sftpInsecureCiphers;
    return this;
  }

  /**
   * Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -&gt; True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.
   * @return sftpInsecureCiphers
   */
  @javax.annotation.Nullable
  public Boolean getSftpInsecureCiphers() {
    return sftpInsecureCiphers;
  }

  public void setSftpInsecureCiphers(Boolean sftpInsecureCiphers) {
    this.sftpInsecureCiphers = sftpInsecureCiphers;
  }


  public SiteEntity sftpUserRootEnabled(Boolean sftpUserRootEnabled) {
    this.sftpUserRootEnabled = sftpUserRootEnabled;
    return this;
  }

  /**
   * Use user FTP roots also for SFTP?
   * @return sftpUserRootEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSftpUserRootEnabled() {
    return sftpUserRootEnabled;
  }

  public void setSftpUserRootEnabled(Boolean sftpUserRootEnabled) {
    this.sftpUserRootEnabled = sftpUserRootEnabled;
  }


  public SiteEntity sharingEnabled(Boolean sharingEnabled) {
    this.sharingEnabled = sharingEnabled;
    return this;
  }

  /**
   * Allow bundle creation
   * @return sharingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSharingEnabled() {
    return sharingEnabled;
  }

  public void setSharingEnabled(Boolean sharingEnabled) {
    this.sharingEnabled = sharingEnabled;
  }


  public SiteEntity showRequestAccessLink(Boolean showRequestAccessLink) {
    this.showRequestAccessLink = showRequestAccessLink;
    return this;
  }

  /**
   * Show request access link for users without access?  Currently unused.
   * @return showRequestAccessLink
   */
  @javax.annotation.Nullable
  public Boolean getShowRequestAccessLink() {
    return showRequestAccessLink;
  }

  public void setShowRequestAccessLink(Boolean showRequestAccessLink) {
    this.showRequestAccessLink = showRequestAccessLink;
  }


  public SiteEntity siteFooter(String siteFooter) {
    this.siteFooter = siteFooter;
    return this;
  }

  /**
   * Custom site footer text
   * @return siteFooter
   */
  @javax.annotation.Nullable
  public String getSiteFooter() {
    return siteFooter;
  }

  public void setSiteFooter(String siteFooter) {
    this.siteFooter = siteFooter;
  }


  public SiteEntity siteHeader(String siteHeader) {
    this.siteHeader = siteHeader;
    return this;
  }

  /**
   * Custom site header text
   * @return siteHeader
   */
  @javax.annotation.Nullable
  public String getSiteHeader() {
    return siteHeader;
  }

  public void setSiteHeader(String siteHeader) {
    this.siteHeader = siteHeader;
  }


  public SiteEntity smtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
    return this;
  }

  /**
   * SMTP server hostname or IP
   * @return smtpAddress
   */
  @javax.annotation.Nullable
  public String getSmtpAddress() {
    return smtpAddress;
  }

  public void setSmtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
  }


  public SiteEntity smtpAuthentication(String smtpAuthentication) {
    this.smtpAuthentication = smtpAuthentication;
    return this;
  }

  /**
   * SMTP server authentication type
   * @return smtpAuthentication
   */
  @javax.annotation.Nullable
  public String getSmtpAuthentication() {
    return smtpAuthentication;
  }

  public void setSmtpAuthentication(String smtpAuthentication) {
    this.smtpAuthentication = smtpAuthentication;
  }


  public SiteEntity smtpFrom(String smtpFrom) {
    this.smtpFrom = smtpFrom;
    return this;
  }

  /**
   * From address to use when mailing through custom SMTP
   * @return smtpFrom
   */
  @javax.annotation.Nullable
  public String getSmtpFrom() {
    return smtpFrom;
  }

  public void setSmtpFrom(String smtpFrom) {
    this.smtpFrom = smtpFrom;
  }


  public SiteEntity smtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

  /**
   * SMTP server port
   * @return smtpPort
   */
  @javax.annotation.Nullable
  public Integer getSmtpPort() {
    return smtpPort;
  }

  public void setSmtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
  }


  public SiteEntity smtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

  /**
   * SMTP server username
   * @return smtpUsername
   */
  @javax.annotation.Nullable
  public String getSmtpUsername() {
    return smtpUsername;
  }

  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }


  public SiteEntity sslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

  /**
   * Is SSL required?  Disabling this is insecure.
   * @return sslRequired
   */
  @javax.annotation.Nullable
  public Boolean getSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
  }


  public SiteEntity subdomain(String subdomain) {
    this.subdomain = subdomain;
    return this;
  }

  /**
   * Site subdomain
   * @return subdomain
   */
  @javax.annotation.Nullable
  public String getSubdomain() {
    return subdomain;
  }

  public void setSubdomain(String subdomain) {
    this.subdomain = subdomain;
  }


  public SiteEntity switchToPlanDate(OffsetDateTime switchToPlanDate) {
    this.switchToPlanDate = switchToPlanDate;
    return this;
  }

  /**
   * If switching plans, when does the new plan take effect?
   * @return switchToPlanDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSwitchToPlanDate() {
    return switchToPlanDate;
  }

  public void setSwitchToPlanDate(OffsetDateTime switchToPlanDate) {
    this.switchToPlanDate = switchToPlanDate;
  }


  public SiteEntity tlsDisabled(Boolean tlsDisabled) {
    this.tlsDisabled = tlsDisabled;
    return this;
  }

  /**
   * Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.
   * @return tlsDisabled
   */
  @javax.annotation.Nullable
  public Boolean getTlsDisabled() {
    return tlsDisabled;
  }

  public void setTlsDisabled(Boolean tlsDisabled) {
    this.tlsDisabled = tlsDisabled;
  }


  public SiteEntity trialDaysLeft(Integer trialDaysLeft) {
    this.trialDaysLeft = trialDaysLeft;
    return this;
  }

  /**
   * Number of days left in trial
   * @return trialDaysLeft
   */
  @javax.annotation.Nullable
  public Integer getTrialDaysLeft() {
    return trialDaysLeft;
  }

  public void setTrialDaysLeft(Integer trialDaysLeft) {
    this.trialDaysLeft = trialDaysLeft;
  }


  public SiteEntity trialUntil(OffsetDateTime trialUntil) {
    this.trialUntil = trialUntil;
    return this;
  }

  /**
   * When does this Site trial expire?
   * @return trialUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTrialUntil() {
    return trialUntil;
  }

  public void setTrialUntil(OffsetDateTime trialUntil) {
    this.trialUntil = trialUntil;
  }


  public SiteEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Last time this Site was updated
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public SiteEntity uploadsViaEmailAuthentication(Boolean uploadsViaEmailAuthentication) {
    this.uploadsViaEmailAuthentication = uploadsViaEmailAuthentication;
    return this;
  }

  /**
   * Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?
   * @return uploadsViaEmailAuthentication
   */
  @javax.annotation.Nullable
  public Boolean getUploadsViaEmailAuthentication() {
    return uploadsViaEmailAuthentication;
  }

  public void setUploadsViaEmailAuthentication(Boolean uploadsViaEmailAuthentication) {
    this.uploadsViaEmailAuthentication = uploadsViaEmailAuthentication;
  }


  public SiteEntity useProvidedModifiedAt(Boolean useProvidedModifiedAt) {
    this.useProvidedModifiedAt = useProvidedModifiedAt;
    return this;
  }

  /**
   * Allow uploaders to set &#x60;provided_modified_at&#x60; for uploaded files?
   * @return useProvidedModifiedAt
   */
  @javax.annotation.Nullable
  public Boolean getUseProvidedModifiedAt() {
    return useProvidedModifiedAt;
  }

  public void setUseProvidedModifiedAt(Boolean useProvidedModifiedAt) {
    this.useProvidedModifiedAt = useProvidedModifiedAt;
  }


  public SiteEntity user(UserEntity user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserEntity getUser() {
    return user;
  }

  public void setUser(UserEntity user) {
    this.user = user;
  }


  public SiteEntity userLockout(Boolean userLockout) {
    this.userLockout = userLockout;
    return this;
  }

  /**
   * Will users be locked out after incorrect login attempts?
   * @return userLockout
   */
  @javax.annotation.Nullable
  public Boolean getUserLockout() {
    return userLockout;
  }

  public void setUserLockout(Boolean userLockout) {
    this.userLockout = userLockout;
  }


  public SiteEntity userLockoutLockPeriod(Integer userLockoutLockPeriod) {
    this.userLockoutLockPeriod = userLockoutLockPeriod;
    return this;
  }

  /**
   * How many hours to lock user out for failed password?
   * @return userLockoutLockPeriod
   */
  @javax.annotation.Nullable
  public Integer getUserLockoutLockPeriod() {
    return userLockoutLockPeriod;
  }

  public void setUserLockoutLockPeriod(Integer userLockoutLockPeriod) {
    this.userLockoutLockPeriod = userLockoutLockPeriod;
  }


  public SiteEntity userLockoutTries(Integer userLockoutTries) {
    this.userLockoutTries = userLockoutTries;
    return this;
  }

  /**
   * Number of login tries within &#x60;user_lockout_within&#x60; hours before users are locked out
   * @return userLockoutTries
   */
  @javax.annotation.Nullable
  public Integer getUserLockoutTries() {
    return userLockoutTries;
  }

  public void setUserLockoutTries(Integer userLockoutTries) {
    this.userLockoutTries = userLockoutTries;
  }


  public SiteEntity userLockoutWithin(Integer userLockoutWithin) {
    this.userLockoutWithin = userLockoutWithin;
    return this;
  }

  /**
   * Number of hours for user lockout window
   * @return userLockoutWithin
   */
  @javax.annotation.Nullable
  public Integer getUserLockoutWithin() {
    return userLockoutWithin;
  }

  public void setUserLockoutWithin(Integer userLockoutWithin) {
    this.userLockoutWithin = userLockoutWithin;
  }


  public SiteEntity userRequestsEnabled(Boolean userRequestsEnabled) {
    this.userRequestsEnabled = userRequestsEnabled;
    return this;
  }

  /**
   * Enable User Requests feature
   * @return userRequestsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getUserRequestsEnabled() {
    return userRequestsEnabled;
  }

  public void setUserRequestsEnabled(Boolean userRequestsEnabled) {
    this.userRequestsEnabled = userRequestsEnabled;
  }


  public SiteEntity userRequestsNotifyAdmins(Boolean userRequestsNotifyAdmins) {
    this.userRequestsNotifyAdmins = userRequestsNotifyAdmins;
    return this;
  }

  /**
   * Send email to site admins when a user request is received?
   * @return userRequestsNotifyAdmins
   */
  @javax.annotation.Nullable
  public Boolean getUserRequestsNotifyAdmins() {
    return userRequestsNotifyAdmins;
  }

  public void setUserRequestsNotifyAdmins(Boolean userRequestsNotifyAdmins) {
    this.userRequestsNotifyAdmins = userRequestsNotifyAdmins;
  }


  public SiteEntity welcomeCustomText(String welcomeCustomText) {
    this.welcomeCustomText = welcomeCustomText;
    return this;
  }

  /**
   * Custom text send in user welcome email
   * @return welcomeCustomText
   */
  @javax.annotation.Nullable
  public String getWelcomeCustomText() {
    return welcomeCustomText;
  }

  public void setWelcomeCustomText(String welcomeCustomText) {
    this.welcomeCustomText = welcomeCustomText;
  }


  public SiteEntity welcomeEmailCc(String welcomeEmailCc) {
    this.welcomeEmailCc = welcomeEmailCc;
    return this;
  }

  /**
   * Include this email in welcome emails if enabled
   * @return welcomeEmailCc
   */
  @javax.annotation.Nullable
  public String getWelcomeEmailCc() {
    return welcomeEmailCc;
  }

  public void setWelcomeEmailCc(String welcomeEmailCc) {
    this.welcomeEmailCc = welcomeEmailCc;
  }


  public SiteEntity welcomeEmailEnabled(Boolean welcomeEmailEnabled) {
    this.welcomeEmailEnabled = welcomeEmailEnabled;
    return this;
  }

  /**
   * Will the welcome email be sent to new users?
   * @return welcomeEmailEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWelcomeEmailEnabled() {
    return welcomeEmailEnabled;
  }

  public void setWelcomeEmailEnabled(Boolean welcomeEmailEnabled) {
    this.welcomeEmailEnabled = welcomeEmailEnabled;
  }


  public SiteEntity welcomeEmailSubject(String welcomeEmailSubject) {
    this.welcomeEmailSubject = welcomeEmailSubject;
    return this;
  }

  /**
   * Include this email subject in welcome emails if enabled
   * @return welcomeEmailSubject
   */
  @javax.annotation.Nullable
  public String getWelcomeEmailSubject() {
    return welcomeEmailSubject;
  }

  public void setWelcomeEmailSubject(String welcomeEmailSubject) {
    this.welcomeEmailSubject = welcomeEmailSubject;
  }


  public SiteEntity welcomeScreen(WelcomeScreenEnum welcomeScreen) {
    this.welcomeScreen = welcomeScreen;
    return this;
  }

  /**
   * Does the welcome screen appear?
   * @return welcomeScreen
   */
  @javax.annotation.Nullable
  public WelcomeScreenEnum getWelcomeScreen() {
    return welcomeScreen;
  }

  public void setWelcomeScreen(WelcomeScreenEnum welcomeScreen) {
    this.welcomeScreen = welcomeScreen;
  }


  public SiteEntity windowsModeFtp(Boolean windowsModeFtp) {
    this.windowsModeFtp = windowsModeFtp;
    return this;
  }

  /**
   * Does FTP user Windows emulation mode?
   * @return windowsModeFtp
   */
  @javax.annotation.Nullable
  public Boolean getWindowsModeFtp() {
    return windowsModeFtp;
  }

  public void setWindowsModeFtp(Boolean windowsModeFtp) {
    this.windowsModeFtp = windowsModeFtp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteEntity siteEntity = (SiteEntity) o;
    return Objects.equals(this.activeSftpHostKeyId, siteEntity.activeSftpHostKeyId) &&
        Objects.equals(this.adminUserId, siteEntity.adminUserId) &&
        Objects.equals(this.allowBundleNames, siteEntity.allowBundleNames) &&
        Objects.equals(this.allowed2faMethodBypassForFtpSftpDav, siteEntity.allowed2faMethodBypassForFtpSftpDav) &&
        Objects.equals(this.allowed2faMethodSms, siteEntity.allowed2faMethodSms) &&
        Objects.equals(this.allowed2faMethodTotp, siteEntity.allowed2faMethodTotp) &&
        Objects.equals(this.allowed2faMethodU2f, siteEntity.allowed2faMethodU2f) &&
        Objects.equals(this.allowed2faMethodWebauthn, siteEntity.allowed2faMethodWebauthn) &&
        Objects.equals(this.allowed2faMethodYubi, siteEntity.allowed2faMethodYubi) &&
        Objects.equals(this.allowedCountries, siteEntity.allowedCountries) &&
        Objects.equals(this.allowedIps, siteEntity.allowedIps) &&
        Objects.equals(this.askAboutOverwrites, siteEntity.askAboutOverwrites) &&
        Objects.equals(this.bundleActivityNotifications, siteEntity.bundleActivityNotifications) &&
        Objects.equals(this.bundleExpiration, siteEntity.bundleExpiration) &&
        Objects.equals(this.bundlePasswordRequired, siteEntity.bundlePasswordRequired) &&
        Objects.equals(this.bundleRegistrationNotifications, siteEntity.bundleRegistrationNotifications) &&
        Objects.equals(this.bundleRequireShareRecipient, siteEntity.bundleRequireShareRecipient) &&
        Objects.equals(this.bundleUploadReceiptNotifications, siteEntity.bundleUploadReceiptNotifications) &&
        Objects.equals(this.bundleWatermarkAttachment, siteEntity.bundleWatermarkAttachment) &&
        Objects.equals(this.bundleWatermarkValue, siteEntity.bundleWatermarkValue) &&
        Objects.equals(this.color2Left, siteEntity.color2Left) &&
        Objects.equals(this.color2Link, siteEntity.color2Link) &&
        Objects.equals(this.color2Text, siteEntity.color2Text) &&
        Objects.equals(this.color2Top, siteEntity.color2Top) &&
        Objects.equals(this.color2TopText, siteEntity.color2TopText) &&
        Objects.equals(this.contactName, siteEntity.contactName) &&
        Objects.equals(this.createdAt, siteEntity.createdAt) &&
        Objects.equals(this.currency, siteEntity.currency) &&
        Objects.equals(this.customNamespace, siteEntity.customNamespace) &&
        Objects.equals(this.daysToRetainBackups, siteEntity.daysToRetainBackups) &&
        Objects.equals(this.defaultTimeZone, siteEntity.defaultTimeZone) &&
        Objects.equals(this.desktopApp, siteEntity.desktopApp) &&
        Objects.equals(this.desktopAppSessionIpPinning, siteEntity.desktopAppSessionIpPinning) &&
        Objects.equals(this.desktopAppSessionLifetime, siteEntity.desktopAppSessionLifetime) &&
        Objects.equals(this.disableFilesCertificateGeneration, siteEntity.disableFilesCertificateGeneration) &&
        Objects.equals(this.disableNotifications, siteEntity.disableNotifications) &&
        Objects.equals(this.disablePasswordReset, siteEntity.disablePasswordReset) &&
        Objects.equals(this.disableUsersFromInactivityPeriodDays, siteEntity.disableUsersFromInactivityPeriodDays) &&
        Objects.equals(this.disallowedCountries, siteEntity.disallowedCountries) &&
        Objects.equals(this.domain, siteEntity.domain) &&
        Objects.equals(this.domainHstsHeader, siteEntity.domainHstsHeader) &&
        Objects.equals(this.domainLetsencryptChain, siteEntity.domainLetsencryptChain) &&
        Objects.equals(this.email, siteEntity.email) &&
        Objects.equals(this.folderPermissionsGroupsOnly, siteEntity.folderPermissionsGroupsOnly) &&
        Objects.equals(this.ftpEnabled, siteEntity.ftpEnabled) &&
        Objects.equals(this.hipaa, siteEntity.hipaa) &&
        Objects.equals(this.icon128, siteEntity.icon128) &&
        Objects.equals(this.icon16, siteEntity.icon16) &&
        Objects.equals(this.icon32, siteEntity.icon32) &&
        Objects.equals(this.icon48, siteEntity.icon48) &&
        Objects.equals(this.immutableFilesSetAt, siteEntity.immutableFilesSetAt) &&
        Objects.equals(this.includePasswordInWelcomeEmail, siteEntity.includePasswordInWelcomeEmail) &&
        Objects.equals(this.language, siteEntity.language) &&
        Objects.equals(this.ldapBaseDn, siteEntity.ldapBaseDn) &&
        Objects.equals(this.ldapDomain, siteEntity.ldapDomain) &&
        Objects.equals(this.ldapEnabled, siteEntity.ldapEnabled) &&
        Objects.equals(this.ldapGroupAction, siteEntity.ldapGroupAction) &&
        Objects.equals(this.ldapGroupExclusion, siteEntity.ldapGroupExclusion) &&
        Objects.equals(this.ldapGroupInclusion, siteEntity.ldapGroupInclusion) &&
        Objects.equals(this.ldapHost, siteEntity.ldapHost) &&
        Objects.equals(this.ldapHost2, siteEntity.ldapHost2) &&
        Objects.equals(this.ldapHost3, siteEntity.ldapHost3) &&
        Objects.equals(this.ldapPort, siteEntity.ldapPort) &&
        Objects.equals(this.ldapSecure, siteEntity.ldapSecure) &&
        Objects.equals(this.ldapType, siteEntity.ldapType) &&
        Objects.equals(this.ldapUserAction, siteEntity.ldapUserAction) &&
        Objects.equals(this.ldapUserIncludeGroups, siteEntity.ldapUserIncludeGroups) &&
        Objects.equals(this.ldapUsername, siteEntity.ldapUsername) &&
        Objects.equals(this.ldapUsernameField, siteEntity.ldapUsernameField) &&
        Objects.equals(this.loginHelpText, siteEntity.loginHelpText) &&
        Objects.equals(this.logo, siteEntity.logo) &&
        Objects.equals(this.maxPriorPasswords, siteEntity.maxPriorPasswords) &&
        Objects.equals(this.mobileApp, siteEntity.mobileApp) &&
        Objects.equals(this.mobileAppSessionIpPinning, siteEntity.mobileAppSessionIpPinning) &&
        Objects.equals(this.mobileAppSessionLifetime, siteEntity.mobileAppSessionLifetime) &&
        Objects.equals(this.motdText, siteEntity.motdText) &&
        Objects.equals(this.motdUseForFtp, siteEntity.motdUseForFtp) &&
        Objects.equals(this.motdUseForSftp, siteEntity.motdUseForSftp) &&
        Objects.equals(this.name, siteEntity.name) &&
        Objects.equals(this.nextBillingAmount, siteEntity.nextBillingAmount) &&
        Objects.equals(this.nextBillingDate, siteEntity.nextBillingDate) &&
        Objects.equals(this.nonSsoGroupsAllowed, siteEntity.nonSsoGroupsAllowed) &&
        Objects.equals(this.nonSsoUsersAllowed, siteEntity.nonSsoUsersAllowed) &&
        Objects.equals(this.officeIntegrationAvailable, siteEntity.officeIntegrationAvailable) &&
        Objects.equals(this.officeIntegrationType, siteEntity.officeIntegrationType) &&
        Objects.equals(this.oncehubLink, siteEntity.oncehubLink) &&
        Objects.equals(this.optOutGlobal, siteEntity.optOutGlobal) &&
        Objects.equals(this.overdue, siteEntity.overdue) &&
        Objects.equals(this.passwordMinLength, siteEntity.passwordMinLength) &&
        Objects.equals(this.passwordRequireLetter, siteEntity.passwordRequireLetter) &&
        Objects.equals(this.passwordRequireMixed, siteEntity.passwordRequireMixed) &&
        Objects.equals(this.passwordRequireNumber, siteEntity.passwordRequireNumber) &&
        Objects.equals(this.passwordRequireSpecial, siteEntity.passwordRequireSpecial) &&
        Objects.equals(this.passwordRequireUnbreached, siteEntity.passwordRequireUnbreached) &&
        Objects.equals(this.passwordRequirementsApplyToBundles, siteEntity.passwordRequirementsApplyToBundles) &&
        Objects.equals(this.passwordValidityDays, siteEntity.passwordValidityDays) &&
        Objects.equals(this.phone, siteEntity.phone) &&
        Objects.equals(this.pinAllRemoteServersToSiteRegion, siteEntity.pinAllRemoteServersToSiteRegion) &&
        Objects.equals(this.replyToEmail, siteEntity.replyToEmail) &&
        Objects.equals(this.require2fa, siteEntity.require2fa) &&
        Objects.equals(this.require2faStopTime, siteEntity.require2faStopTime) &&
        Objects.equals(this.require2faUserType, siteEntity.require2faUserType) &&
        Objects.equals(this.session, siteEntity.session) &&
        Objects.equals(this.sessionExpiry, siteEntity.sessionExpiry) &&
        Objects.equals(this.sessionExpiryMinutes, siteEntity.sessionExpiryMinutes) &&
        Objects.equals(this.sessionPinnedByIp, siteEntity.sessionPinnedByIp) &&
        Objects.equals(this.sftpEnabled, siteEntity.sftpEnabled) &&
        Objects.equals(this.sftpHostKeyType, siteEntity.sftpHostKeyType) &&
        Objects.equals(this.sftpInsecureCiphers, siteEntity.sftpInsecureCiphers) &&
        Objects.equals(this.sftpUserRootEnabled, siteEntity.sftpUserRootEnabled) &&
        Objects.equals(this.sharingEnabled, siteEntity.sharingEnabled) &&
        Objects.equals(this.showRequestAccessLink, siteEntity.showRequestAccessLink) &&
        Objects.equals(this.siteFooter, siteEntity.siteFooter) &&
        Objects.equals(this.siteHeader, siteEntity.siteHeader) &&
        Objects.equals(this.smtpAddress, siteEntity.smtpAddress) &&
        Objects.equals(this.smtpAuthentication, siteEntity.smtpAuthentication) &&
        Objects.equals(this.smtpFrom, siteEntity.smtpFrom) &&
        Objects.equals(this.smtpPort, siteEntity.smtpPort) &&
        Objects.equals(this.smtpUsername, siteEntity.smtpUsername) &&
        Objects.equals(this.sslRequired, siteEntity.sslRequired) &&
        Objects.equals(this.subdomain, siteEntity.subdomain) &&
        Objects.equals(this.switchToPlanDate, siteEntity.switchToPlanDate) &&
        Objects.equals(this.tlsDisabled, siteEntity.tlsDisabled) &&
        Objects.equals(this.trialDaysLeft, siteEntity.trialDaysLeft) &&
        Objects.equals(this.trialUntil, siteEntity.trialUntil) &&
        Objects.equals(this.updatedAt, siteEntity.updatedAt) &&
        Objects.equals(this.uploadsViaEmailAuthentication, siteEntity.uploadsViaEmailAuthentication) &&
        Objects.equals(this.useProvidedModifiedAt, siteEntity.useProvidedModifiedAt) &&
        Objects.equals(this.user, siteEntity.user) &&
        Objects.equals(this.userLockout, siteEntity.userLockout) &&
        Objects.equals(this.userLockoutLockPeriod, siteEntity.userLockoutLockPeriod) &&
        Objects.equals(this.userLockoutTries, siteEntity.userLockoutTries) &&
        Objects.equals(this.userLockoutWithin, siteEntity.userLockoutWithin) &&
        Objects.equals(this.userRequestsEnabled, siteEntity.userRequestsEnabled) &&
        Objects.equals(this.userRequestsNotifyAdmins, siteEntity.userRequestsNotifyAdmins) &&
        Objects.equals(this.welcomeCustomText, siteEntity.welcomeCustomText) &&
        Objects.equals(this.welcomeEmailCc, siteEntity.welcomeEmailCc) &&
        Objects.equals(this.welcomeEmailEnabled, siteEntity.welcomeEmailEnabled) &&
        Objects.equals(this.welcomeEmailSubject, siteEntity.welcomeEmailSubject) &&
        Objects.equals(this.welcomeScreen, siteEntity.welcomeScreen) &&
        Objects.equals(this.windowsModeFtp, siteEntity.windowsModeFtp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeSftpHostKeyId, adminUserId, allowBundleNames, allowed2faMethodBypassForFtpSftpDav, allowed2faMethodSms, allowed2faMethodTotp, allowed2faMethodU2f, allowed2faMethodWebauthn, allowed2faMethodYubi, allowedCountries, allowedIps, askAboutOverwrites, bundleActivityNotifications, bundleExpiration, bundlePasswordRequired, bundleRegistrationNotifications, bundleRequireShareRecipient, bundleUploadReceiptNotifications, bundleWatermarkAttachment, bundleWatermarkValue, color2Left, color2Link, color2Text, color2Top, color2TopText, contactName, createdAt, currency, customNamespace, daysToRetainBackups, defaultTimeZone, desktopApp, desktopAppSessionIpPinning, desktopAppSessionLifetime, disableFilesCertificateGeneration, disableNotifications, disablePasswordReset, disableUsersFromInactivityPeriodDays, disallowedCountries, domain, domainHstsHeader, domainLetsencryptChain, email, folderPermissionsGroupsOnly, ftpEnabled, hipaa, icon128, icon16, icon32, icon48, immutableFilesSetAt, includePasswordInWelcomeEmail, language, ldapBaseDn, ldapDomain, ldapEnabled, ldapGroupAction, ldapGroupExclusion, ldapGroupInclusion, ldapHost, ldapHost2, ldapHost3, ldapPort, ldapSecure, ldapType, ldapUserAction, ldapUserIncludeGroups, ldapUsername, ldapUsernameField, loginHelpText, logo, maxPriorPasswords, mobileApp, mobileAppSessionIpPinning, mobileAppSessionLifetime, motdText, motdUseForFtp, motdUseForSftp, name, nextBillingAmount, nextBillingDate, nonSsoGroupsAllowed, nonSsoUsersAllowed, officeIntegrationAvailable, officeIntegrationType, oncehubLink, optOutGlobal, overdue, passwordMinLength, passwordRequireLetter, passwordRequireMixed, passwordRequireNumber, passwordRequireSpecial, passwordRequireUnbreached, passwordRequirementsApplyToBundles, passwordValidityDays, phone, pinAllRemoteServersToSiteRegion, replyToEmail, require2fa, require2faStopTime, require2faUserType, session, sessionExpiry, sessionExpiryMinutes, sessionPinnedByIp, sftpEnabled, sftpHostKeyType, sftpInsecureCiphers, sftpUserRootEnabled, sharingEnabled, showRequestAccessLink, siteFooter, siteHeader, smtpAddress, smtpAuthentication, smtpFrom, smtpPort, smtpUsername, sslRequired, subdomain, switchToPlanDate, tlsDisabled, trialDaysLeft, trialUntil, updatedAt, uploadsViaEmailAuthentication, useProvidedModifiedAt, user, userLockout, userLockoutLockPeriod, userLockoutTries, userLockoutWithin, userRequestsEnabled, userRequestsNotifyAdmins, welcomeCustomText, welcomeEmailCc, welcomeEmailEnabled, welcomeEmailSubject, welcomeScreen, windowsModeFtp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteEntity {\n");
    sb.append("    activeSftpHostKeyId: ").append(toIndentedString(activeSftpHostKeyId)).append("\n");
    sb.append("    adminUserId: ").append(toIndentedString(adminUserId)).append("\n");
    sb.append("    allowBundleNames: ").append(toIndentedString(allowBundleNames)).append("\n");
    sb.append("    allowed2faMethodBypassForFtpSftpDav: ").append(toIndentedString(allowed2faMethodBypassForFtpSftpDav)).append("\n");
    sb.append("    allowed2faMethodSms: ").append(toIndentedString(allowed2faMethodSms)).append("\n");
    sb.append("    allowed2faMethodTotp: ").append(toIndentedString(allowed2faMethodTotp)).append("\n");
    sb.append("    allowed2faMethodU2f: ").append(toIndentedString(allowed2faMethodU2f)).append("\n");
    sb.append("    allowed2faMethodWebauthn: ").append(toIndentedString(allowed2faMethodWebauthn)).append("\n");
    sb.append("    allowed2faMethodYubi: ").append(toIndentedString(allowed2faMethodYubi)).append("\n");
    sb.append("    allowedCountries: ").append(toIndentedString(allowedCountries)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    askAboutOverwrites: ").append(toIndentedString(askAboutOverwrites)).append("\n");
    sb.append("    bundleActivityNotifications: ").append(toIndentedString(bundleActivityNotifications)).append("\n");
    sb.append("    bundleExpiration: ").append(toIndentedString(bundleExpiration)).append("\n");
    sb.append("    bundlePasswordRequired: ").append(toIndentedString(bundlePasswordRequired)).append("\n");
    sb.append("    bundleRegistrationNotifications: ").append(toIndentedString(bundleRegistrationNotifications)).append("\n");
    sb.append("    bundleRequireShareRecipient: ").append(toIndentedString(bundleRequireShareRecipient)).append("\n");
    sb.append("    bundleUploadReceiptNotifications: ").append(toIndentedString(bundleUploadReceiptNotifications)).append("\n");
    sb.append("    bundleWatermarkAttachment: ").append(toIndentedString(bundleWatermarkAttachment)).append("\n");
    sb.append("    bundleWatermarkValue: ").append(toIndentedString(bundleWatermarkValue)).append("\n");
    sb.append("    color2Left: ").append(toIndentedString(color2Left)).append("\n");
    sb.append("    color2Link: ").append(toIndentedString(color2Link)).append("\n");
    sb.append("    color2Text: ").append(toIndentedString(color2Text)).append("\n");
    sb.append("    color2Top: ").append(toIndentedString(color2Top)).append("\n");
    sb.append("    color2TopText: ").append(toIndentedString(color2TopText)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customNamespace: ").append(toIndentedString(customNamespace)).append("\n");
    sb.append("    daysToRetainBackups: ").append(toIndentedString(daysToRetainBackups)).append("\n");
    sb.append("    defaultTimeZone: ").append(toIndentedString(defaultTimeZone)).append("\n");
    sb.append("    desktopApp: ").append(toIndentedString(desktopApp)).append("\n");
    sb.append("    desktopAppSessionIpPinning: ").append(toIndentedString(desktopAppSessionIpPinning)).append("\n");
    sb.append("    desktopAppSessionLifetime: ").append(toIndentedString(desktopAppSessionLifetime)).append("\n");
    sb.append("    disableFilesCertificateGeneration: ").append(toIndentedString(disableFilesCertificateGeneration)).append("\n");
    sb.append("    disableNotifications: ").append(toIndentedString(disableNotifications)).append("\n");
    sb.append("    disablePasswordReset: ").append(toIndentedString(disablePasswordReset)).append("\n");
    sb.append("    disableUsersFromInactivityPeriodDays: ").append(toIndentedString(disableUsersFromInactivityPeriodDays)).append("\n");
    sb.append("    disallowedCountries: ").append(toIndentedString(disallowedCountries)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainHstsHeader: ").append(toIndentedString(domainHstsHeader)).append("\n");
    sb.append("    domainLetsencryptChain: ").append(toIndentedString(domainLetsencryptChain)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    folderPermissionsGroupsOnly: ").append(toIndentedString(folderPermissionsGroupsOnly)).append("\n");
    sb.append("    ftpEnabled: ").append(toIndentedString(ftpEnabled)).append("\n");
    sb.append("    hipaa: ").append(toIndentedString(hipaa)).append("\n");
    sb.append("    icon128: ").append(toIndentedString(icon128)).append("\n");
    sb.append("    icon16: ").append(toIndentedString(icon16)).append("\n");
    sb.append("    icon32: ").append(toIndentedString(icon32)).append("\n");
    sb.append("    icon48: ").append(toIndentedString(icon48)).append("\n");
    sb.append("    immutableFilesSetAt: ").append(toIndentedString(immutableFilesSetAt)).append("\n");
    sb.append("    includePasswordInWelcomeEmail: ").append(toIndentedString(includePasswordInWelcomeEmail)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    ldapBaseDn: ").append(toIndentedString(ldapBaseDn)).append("\n");
    sb.append("    ldapDomain: ").append(toIndentedString(ldapDomain)).append("\n");
    sb.append("    ldapEnabled: ").append(toIndentedString(ldapEnabled)).append("\n");
    sb.append("    ldapGroupAction: ").append(toIndentedString(ldapGroupAction)).append("\n");
    sb.append("    ldapGroupExclusion: ").append(toIndentedString(ldapGroupExclusion)).append("\n");
    sb.append("    ldapGroupInclusion: ").append(toIndentedString(ldapGroupInclusion)).append("\n");
    sb.append("    ldapHost: ").append(toIndentedString(ldapHost)).append("\n");
    sb.append("    ldapHost2: ").append(toIndentedString(ldapHost2)).append("\n");
    sb.append("    ldapHost3: ").append(toIndentedString(ldapHost3)).append("\n");
    sb.append("    ldapPort: ").append(toIndentedString(ldapPort)).append("\n");
    sb.append("    ldapSecure: ").append(toIndentedString(ldapSecure)).append("\n");
    sb.append("    ldapType: ").append(toIndentedString(ldapType)).append("\n");
    sb.append("    ldapUserAction: ").append(toIndentedString(ldapUserAction)).append("\n");
    sb.append("    ldapUserIncludeGroups: ").append(toIndentedString(ldapUserIncludeGroups)).append("\n");
    sb.append("    ldapUsername: ").append(toIndentedString(ldapUsername)).append("\n");
    sb.append("    ldapUsernameField: ").append(toIndentedString(ldapUsernameField)).append("\n");
    sb.append("    loginHelpText: ").append(toIndentedString(loginHelpText)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    maxPriorPasswords: ").append(toIndentedString(maxPriorPasswords)).append("\n");
    sb.append("    mobileApp: ").append(toIndentedString(mobileApp)).append("\n");
    sb.append("    mobileAppSessionIpPinning: ").append(toIndentedString(mobileAppSessionIpPinning)).append("\n");
    sb.append("    mobileAppSessionLifetime: ").append(toIndentedString(mobileAppSessionLifetime)).append("\n");
    sb.append("    motdText: ").append(toIndentedString(motdText)).append("\n");
    sb.append("    motdUseForFtp: ").append(toIndentedString(motdUseForFtp)).append("\n");
    sb.append("    motdUseForSftp: ").append(toIndentedString(motdUseForSftp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextBillingAmount: ").append(toIndentedString(nextBillingAmount)).append("\n");
    sb.append("    nextBillingDate: ").append(toIndentedString(nextBillingDate)).append("\n");
    sb.append("    nonSsoGroupsAllowed: ").append(toIndentedString(nonSsoGroupsAllowed)).append("\n");
    sb.append("    nonSsoUsersAllowed: ").append(toIndentedString(nonSsoUsersAllowed)).append("\n");
    sb.append("    officeIntegrationAvailable: ").append(toIndentedString(officeIntegrationAvailable)).append("\n");
    sb.append("    officeIntegrationType: ").append(toIndentedString(officeIntegrationType)).append("\n");
    sb.append("    oncehubLink: ").append(toIndentedString(oncehubLink)).append("\n");
    sb.append("    optOutGlobal: ").append(toIndentedString(optOutGlobal)).append("\n");
    sb.append("    overdue: ").append(toIndentedString(overdue)).append("\n");
    sb.append("    passwordMinLength: ").append(toIndentedString(passwordMinLength)).append("\n");
    sb.append("    passwordRequireLetter: ").append(toIndentedString(passwordRequireLetter)).append("\n");
    sb.append("    passwordRequireMixed: ").append(toIndentedString(passwordRequireMixed)).append("\n");
    sb.append("    passwordRequireNumber: ").append(toIndentedString(passwordRequireNumber)).append("\n");
    sb.append("    passwordRequireSpecial: ").append(toIndentedString(passwordRequireSpecial)).append("\n");
    sb.append("    passwordRequireUnbreached: ").append(toIndentedString(passwordRequireUnbreached)).append("\n");
    sb.append("    passwordRequirementsApplyToBundles: ").append(toIndentedString(passwordRequirementsApplyToBundles)).append("\n");
    sb.append("    passwordValidityDays: ").append(toIndentedString(passwordValidityDays)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    pinAllRemoteServersToSiteRegion: ").append(toIndentedString(pinAllRemoteServersToSiteRegion)).append("\n");
    sb.append("    replyToEmail: ").append(toIndentedString(replyToEmail)).append("\n");
    sb.append("    require2fa: ").append(toIndentedString(require2fa)).append("\n");
    sb.append("    require2faStopTime: ").append(toIndentedString(require2faStopTime)).append("\n");
    sb.append("    require2faUserType: ").append(toIndentedString(require2faUserType)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    sessionExpiry: ").append(toIndentedString(sessionExpiry)).append("\n");
    sb.append("    sessionExpiryMinutes: ").append(toIndentedString(sessionExpiryMinutes)).append("\n");
    sb.append("    sessionPinnedByIp: ").append(toIndentedString(sessionPinnedByIp)).append("\n");
    sb.append("    sftpEnabled: ").append(toIndentedString(sftpEnabled)).append("\n");
    sb.append("    sftpHostKeyType: ").append(toIndentedString(sftpHostKeyType)).append("\n");
    sb.append("    sftpInsecureCiphers: ").append(toIndentedString(sftpInsecureCiphers)).append("\n");
    sb.append("    sftpUserRootEnabled: ").append(toIndentedString(sftpUserRootEnabled)).append("\n");
    sb.append("    sharingEnabled: ").append(toIndentedString(sharingEnabled)).append("\n");
    sb.append("    showRequestAccessLink: ").append(toIndentedString(showRequestAccessLink)).append("\n");
    sb.append("    siteFooter: ").append(toIndentedString(siteFooter)).append("\n");
    sb.append("    siteHeader: ").append(toIndentedString(siteHeader)).append("\n");
    sb.append("    smtpAddress: ").append(toIndentedString(smtpAddress)).append("\n");
    sb.append("    smtpAuthentication: ").append(toIndentedString(smtpAuthentication)).append("\n");
    sb.append("    smtpFrom: ").append(toIndentedString(smtpFrom)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("    switchToPlanDate: ").append(toIndentedString(switchToPlanDate)).append("\n");
    sb.append("    tlsDisabled: ").append(toIndentedString(tlsDisabled)).append("\n");
    sb.append("    trialDaysLeft: ").append(toIndentedString(trialDaysLeft)).append("\n");
    sb.append("    trialUntil: ").append(toIndentedString(trialUntil)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    uploadsViaEmailAuthentication: ").append(toIndentedString(uploadsViaEmailAuthentication)).append("\n");
    sb.append("    useProvidedModifiedAt: ").append(toIndentedString(useProvidedModifiedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userLockout: ").append(toIndentedString(userLockout)).append("\n");
    sb.append("    userLockoutLockPeriod: ").append(toIndentedString(userLockoutLockPeriod)).append("\n");
    sb.append("    userLockoutTries: ").append(toIndentedString(userLockoutTries)).append("\n");
    sb.append("    userLockoutWithin: ").append(toIndentedString(userLockoutWithin)).append("\n");
    sb.append("    userRequestsEnabled: ").append(toIndentedString(userRequestsEnabled)).append("\n");
    sb.append("    userRequestsNotifyAdmins: ").append(toIndentedString(userRequestsNotifyAdmins)).append("\n");
    sb.append("    welcomeCustomText: ").append(toIndentedString(welcomeCustomText)).append("\n");
    sb.append("    welcomeEmailCc: ").append(toIndentedString(welcomeEmailCc)).append("\n");
    sb.append("    welcomeEmailEnabled: ").append(toIndentedString(welcomeEmailEnabled)).append("\n");
    sb.append("    welcomeEmailSubject: ").append(toIndentedString(welcomeEmailSubject)).append("\n");
    sb.append("    welcomeScreen: ").append(toIndentedString(welcomeScreen)).append("\n");
    sb.append("    windowsModeFtp: ").append(toIndentedString(windowsModeFtp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active_sftp_host_key_id");
    openapiFields.add("admin_user_id");
    openapiFields.add("allow_bundle_names");
    openapiFields.add("allowed_2fa_method_bypass_for_ftp_sftp_dav");
    openapiFields.add("allowed_2fa_method_sms");
    openapiFields.add("allowed_2fa_method_totp");
    openapiFields.add("allowed_2fa_method_u2f");
    openapiFields.add("allowed_2fa_method_webauthn");
    openapiFields.add("allowed_2fa_method_yubi");
    openapiFields.add("allowed_countries");
    openapiFields.add("allowed_ips");
    openapiFields.add("ask_about_overwrites");
    openapiFields.add("bundle_activity_notifications");
    openapiFields.add("bundle_expiration");
    openapiFields.add("bundle_password_required");
    openapiFields.add("bundle_registration_notifications");
    openapiFields.add("bundle_require_share_recipient");
    openapiFields.add("bundle_upload_receipt_notifications");
    openapiFields.add("bundle_watermark_attachment");
    openapiFields.add("bundle_watermark_value");
    openapiFields.add("color2_left");
    openapiFields.add("color2_link");
    openapiFields.add("color2_text");
    openapiFields.add("color2_top");
    openapiFields.add("color2_top_text");
    openapiFields.add("contact_name");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("custom_namespace");
    openapiFields.add("days_to_retain_backups");
    openapiFields.add("default_time_zone");
    openapiFields.add("desktop_app");
    openapiFields.add("desktop_app_session_ip_pinning");
    openapiFields.add("desktop_app_session_lifetime");
    openapiFields.add("disable_files_certificate_generation");
    openapiFields.add("disable_notifications");
    openapiFields.add("disable_password_reset");
    openapiFields.add("disable_users_from_inactivity_period_days");
    openapiFields.add("disallowed_countries");
    openapiFields.add("domain");
    openapiFields.add("domain_hsts_header");
    openapiFields.add("domain_letsencrypt_chain");
    openapiFields.add("email");
    openapiFields.add("folder_permissions_groups_only");
    openapiFields.add("ftp_enabled");
    openapiFields.add("hipaa");
    openapiFields.add("icon128");
    openapiFields.add("icon16");
    openapiFields.add("icon32");
    openapiFields.add("icon48");
    openapiFields.add("immutable_files_set_at");
    openapiFields.add("include_password_in_welcome_email");
    openapiFields.add("language");
    openapiFields.add("ldap_base_dn");
    openapiFields.add("ldap_domain");
    openapiFields.add("ldap_enabled");
    openapiFields.add("ldap_group_action");
    openapiFields.add("ldap_group_exclusion");
    openapiFields.add("ldap_group_inclusion");
    openapiFields.add("ldap_host");
    openapiFields.add("ldap_host_2");
    openapiFields.add("ldap_host_3");
    openapiFields.add("ldap_port");
    openapiFields.add("ldap_secure");
    openapiFields.add("ldap_type");
    openapiFields.add("ldap_user_action");
    openapiFields.add("ldap_user_include_groups");
    openapiFields.add("ldap_username");
    openapiFields.add("ldap_username_field");
    openapiFields.add("login_help_text");
    openapiFields.add("logo");
    openapiFields.add("max_prior_passwords");
    openapiFields.add("mobile_app");
    openapiFields.add("mobile_app_session_ip_pinning");
    openapiFields.add("mobile_app_session_lifetime");
    openapiFields.add("motd_text");
    openapiFields.add("motd_use_for_ftp");
    openapiFields.add("motd_use_for_sftp");
    openapiFields.add("name");
    openapiFields.add("next_billing_amount");
    openapiFields.add("next_billing_date");
    openapiFields.add("non_sso_groups_allowed");
    openapiFields.add("non_sso_users_allowed");
    openapiFields.add("office_integration_available");
    openapiFields.add("office_integration_type");
    openapiFields.add("oncehub_link");
    openapiFields.add("opt_out_global");
    openapiFields.add("overdue");
    openapiFields.add("password_min_length");
    openapiFields.add("password_require_letter");
    openapiFields.add("password_require_mixed");
    openapiFields.add("password_require_number");
    openapiFields.add("password_require_special");
    openapiFields.add("password_require_unbreached");
    openapiFields.add("password_requirements_apply_to_bundles");
    openapiFields.add("password_validity_days");
    openapiFields.add("phone");
    openapiFields.add("pin_all_remote_servers_to_site_region");
    openapiFields.add("reply_to_email");
    openapiFields.add("require_2fa");
    openapiFields.add("require_2fa_stop_time");
    openapiFields.add("require_2fa_user_type");
    openapiFields.add("session");
    openapiFields.add("session_expiry");
    openapiFields.add("session_expiry_minutes");
    openapiFields.add("session_pinned_by_ip");
    openapiFields.add("sftp_enabled");
    openapiFields.add("sftp_host_key_type");
    openapiFields.add("sftp_insecure_ciphers");
    openapiFields.add("sftp_user_root_enabled");
    openapiFields.add("sharing_enabled");
    openapiFields.add("show_request_access_link");
    openapiFields.add("site_footer");
    openapiFields.add("site_header");
    openapiFields.add("smtp_address");
    openapiFields.add("smtp_authentication");
    openapiFields.add("smtp_from");
    openapiFields.add("smtp_port");
    openapiFields.add("smtp_username");
    openapiFields.add("ssl_required");
    openapiFields.add("subdomain");
    openapiFields.add("switch_to_plan_date");
    openapiFields.add("tls_disabled");
    openapiFields.add("trial_days_left");
    openapiFields.add("trial_until");
    openapiFields.add("updated_at");
    openapiFields.add("uploads_via_email_authentication");
    openapiFields.add("use_provided_modified_at");
    openapiFields.add("user");
    openapiFields.add("user_lockout");
    openapiFields.add("user_lockout_lock_period");
    openapiFields.add("user_lockout_tries");
    openapiFields.add("user_lockout_within");
    openapiFields.add("user_requests_enabled");
    openapiFields.add("user_requests_notify_admins");
    openapiFields.add("welcome_custom_text");
    openapiFields.add("welcome_email_cc");
    openapiFields.add("welcome_email_enabled");
    openapiFields.add("welcome_email_subject");
    openapiFields.add("welcome_screen");
    openapiFields.add("windows_mode_ftp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SiteEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SiteEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SiteEntity is not found in the empty JSON string", SiteEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SiteEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SiteEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowed_countries") != null && !jsonObj.get("allowed_countries").isJsonNull()) && !jsonObj.get("allowed_countries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_countries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_countries").toString()));
      }
      if ((jsonObj.get("allowed_ips") != null && !jsonObj.get("allowed_ips").isJsonNull()) && !jsonObj.get("allowed_ips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_ips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowed_ips").toString()));
      }
      if ((jsonObj.get("bundle_activity_notifications") != null && !jsonObj.get("bundle_activity_notifications").isJsonNull()) && !jsonObj.get("bundle_activity_notifications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_activity_notifications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_activity_notifications").toString()));
      }
      // validate the optional field `bundle_activity_notifications`
      if (jsonObj.get("bundle_activity_notifications") != null && !jsonObj.get("bundle_activity_notifications").isJsonNull()) {
        BundleActivityNotificationsEnum.validateJsonElement(jsonObj.get("bundle_activity_notifications"));
      }
      if ((jsonObj.get("bundle_registration_notifications") != null && !jsonObj.get("bundle_registration_notifications").isJsonNull()) && !jsonObj.get("bundle_registration_notifications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_registration_notifications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_registration_notifications").toString()));
      }
      // validate the optional field `bundle_registration_notifications`
      if (jsonObj.get("bundle_registration_notifications") != null && !jsonObj.get("bundle_registration_notifications").isJsonNull()) {
        BundleRegistrationNotificationsEnum.validateJsonElement(jsonObj.get("bundle_registration_notifications"));
      }
      if ((jsonObj.get("bundle_upload_receipt_notifications") != null && !jsonObj.get("bundle_upload_receipt_notifications").isJsonNull()) && !jsonObj.get("bundle_upload_receipt_notifications").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_upload_receipt_notifications` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_upload_receipt_notifications").toString()));
      }
      // validate the optional field `bundle_upload_receipt_notifications`
      if (jsonObj.get("bundle_upload_receipt_notifications") != null && !jsonObj.get("bundle_upload_receipt_notifications").isJsonNull()) {
        BundleUploadReceiptNotificationsEnum.validateJsonElement(jsonObj.get("bundle_upload_receipt_notifications"));
      }
      // validate the optional field `bundle_watermark_attachment`
      if (jsonObj.get("bundle_watermark_attachment") != null && !jsonObj.get("bundle_watermark_attachment").isJsonNull()) {
        ImageEntity.validateJsonElement(jsonObj.get("bundle_watermark_attachment"));
      }
      if ((jsonObj.get("color2_left") != null && !jsonObj.get("color2_left").isJsonNull()) && !jsonObj.get("color2_left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color2_left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color2_left").toString()));
      }
      if ((jsonObj.get("color2_link") != null && !jsonObj.get("color2_link").isJsonNull()) && !jsonObj.get("color2_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color2_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color2_link").toString()));
      }
      if ((jsonObj.get("color2_text") != null && !jsonObj.get("color2_text").isJsonNull()) && !jsonObj.get("color2_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color2_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color2_text").toString()));
      }
      if ((jsonObj.get("color2_top") != null && !jsonObj.get("color2_top").isJsonNull()) && !jsonObj.get("color2_top").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color2_top` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color2_top").toString()));
      }
      if ((jsonObj.get("color2_top_text") != null && !jsonObj.get("color2_top_text").isJsonNull()) && !jsonObj.get("color2_top_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color2_top_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color2_top_text").toString()));
      }
      if ((jsonObj.get("contact_name") != null && !jsonObj.get("contact_name").isJsonNull()) && !jsonObj.get("contact_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact_name").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("default_time_zone") != null && !jsonObj.get("default_time_zone").isJsonNull()) && !jsonObj.get("default_time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_time_zone").toString()));
      }
      if ((jsonObj.get("disallowed_countries") != null && !jsonObj.get("disallowed_countries").isJsonNull()) && !jsonObj.get("disallowed_countries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disallowed_countries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disallowed_countries").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("domain_letsencrypt_chain") != null && !jsonObj.get("domain_letsencrypt_chain").isJsonNull()) && !jsonObj.get("domain_letsencrypt_chain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_letsencrypt_chain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_letsencrypt_chain").toString()));
      }
      // validate the optional field `domain_letsencrypt_chain`
      if (jsonObj.get("domain_letsencrypt_chain") != null && !jsonObj.get("domain_letsencrypt_chain").isJsonNull()) {
        DomainLetsencryptChainEnum.validateJsonElement(jsonObj.get("domain_letsencrypt_chain"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `icon128`
      if (jsonObj.get("icon128") != null && !jsonObj.get("icon128").isJsonNull()) {
        ImageEntity.validateJsonElement(jsonObj.get("icon128"));
      }
      // validate the optional field `icon16`
      if (jsonObj.get("icon16") != null && !jsonObj.get("icon16").isJsonNull()) {
        ImageEntity.validateJsonElement(jsonObj.get("icon16"));
      }
      // validate the optional field `icon32`
      if (jsonObj.get("icon32") != null && !jsonObj.get("icon32").isJsonNull()) {
        ImageEntity.validateJsonElement(jsonObj.get("icon32"));
      }
      // validate the optional field `icon48`
      if (jsonObj.get("icon48") != null && !jsonObj.get("icon48").isJsonNull()) {
        ImageEntity.validateJsonElement(jsonObj.get("icon48"));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("ldap_base_dn") != null && !jsonObj.get("ldap_base_dn").isJsonNull()) && !jsonObj.get("ldap_base_dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_base_dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_base_dn").toString()));
      }
      if ((jsonObj.get("ldap_domain") != null && !jsonObj.get("ldap_domain").isJsonNull()) && !jsonObj.get("ldap_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_domain").toString()));
      }
      if ((jsonObj.get("ldap_group_action") != null && !jsonObj.get("ldap_group_action").isJsonNull()) && !jsonObj.get("ldap_group_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_group_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_group_action").toString()));
      }
      if ((jsonObj.get("ldap_group_exclusion") != null && !jsonObj.get("ldap_group_exclusion").isJsonNull()) && !jsonObj.get("ldap_group_exclusion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_group_exclusion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_group_exclusion").toString()));
      }
      if ((jsonObj.get("ldap_group_inclusion") != null && !jsonObj.get("ldap_group_inclusion").isJsonNull()) && !jsonObj.get("ldap_group_inclusion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_group_inclusion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_group_inclusion").toString()));
      }
      if ((jsonObj.get("ldap_host") != null && !jsonObj.get("ldap_host").isJsonNull()) && !jsonObj.get("ldap_host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_host").toString()));
      }
      if ((jsonObj.get("ldap_host_2") != null && !jsonObj.get("ldap_host_2").isJsonNull()) && !jsonObj.get("ldap_host_2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_host_2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_host_2").toString()));
      }
      if ((jsonObj.get("ldap_host_3") != null && !jsonObj.get("ldap_host_3").isJsonNull()) && !jsonObj.get("ldap_host_3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_host_3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_host_3").toString()));
      }
      if ((jsonObj.get("ldap_type") != null && !jsonObj.get("ldap_type").isJsonNull()) && !jsonObj.get("ldap_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_type").toString()));
      }
      if ((jsonObj.get("ldap_user_action") != null && !jsonObj.get("ldap_user_action").isJsonNull()) && !jsonObj.get("ldap_user_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_user_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_user_action").toString()));
      }
      if ((jsonObj.get("ldap_user_include_groups") != null && !jsonObj.get("ldap_user_include_groups").isJsonNull()) && !jsonObj.get("ldap_user_include_groups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_user_include_groups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_user_include_groups").toString()));
      }
      if ((jsonObj.get("ldap_username") != null && !jsonObj.get("ldap_username").isJsonNull()) && !jsonObj.get("ldap_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_username").toString()));
      }
      if ((jsonObj.get("ldap_username_field") != null && !jsonObj.get("ldap_username_field").isJsonNull()) && !jsonObj.get("ldap_username_field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldap_username_field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldap_username_field").toString()));
      }
      if ((jsonObj.get("login_help_text") != null && !jsonObj.get("login_help_text").isJsonNull()) && !jsonObj.get("login_help_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login_help_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login_help_text").toString()));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        ImageEntity.validateJsonElement(jsonObj.get("logo"));
      }
      if ((jsonObj.get("motd_text") != null && !jsonObj.get("motd_text").isJsonNull()) && !jsonObj.get("motd_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `motd_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("motd_text").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("next_billing_date") != null && !jsonObj.get("next_billing_date").isJsonNull()) && !jsonObj.get("next_billing_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_billing_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_billing_date").toString()));
      }
      if ((jsonObj.get("office_integration_type") != null && !jsonObj.get("office_integration_type").isJsonNull()) && !jsonObj.get("office_integration_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office_integration_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office_integration_type").toString()));
      }
      // validate the optional field `office_integration_type`
      if (jsonObj.get("office_integration_type") != null && !jsonObj.get("office_integration_type").isJsonNull()) {
        OfficeIntegrationTypeEnum.validateJsonElement(jsonObj.get("office_integration_type"));
      }
      if ((jsonObj.get("oncehub_link") != null && !jsonObj.get("oncehub_link").isJsonNull()) && !jsonObj.get("oncehub_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oncehub_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oncehub_link").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("reply_to_email") != null && !jsonObj.get("reply_to_email").isJsonNull()) && !jsonObj.get("reply_to_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reply_to_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reply_to_email").toString()));
      }
      if ((jsonObj.get("require_2fa_user_type") != null && !jsonObj.get("require_2fa_user_type").isJsonNull()) && !jsonObj.get("require_2fa_user_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `require_2fa_user_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("require_2fa_user_type").toString()));
      }
      // validate the optional field `require_2fa_user_type`
      if (jsonObj.get("require_2fa_user_type") != null && !jsonObj.get("require_2fa_user_type").isJsonNull()) {
        Require2faUserTypeEnum.validateJsonElement(jsonObj.get("require_2fa_user_type"));
      }
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        SessionEntity.validateJsonElement(jsonObj.get("session"));
      }
      if ((jsonObj.get("sftp_host_key_type") != null && !jsonObj.get("sftp_host_key_type").isJsonNull()) && !jsonObj.get("sftp_host_key_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sftp_host_key_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sftp_host_key_type").toString()));
      }
      // validate the optional field `sftp_host_key_type`
      if (jsonObj.get("sftp_host_key_type") != null && !jsonObj.get("sftp_host_key_type").isJsonNull()) {
        SftpHostKeyTypeEnum.validateJsonElement(jsonObj.get("sftp_host_key_type"));
      }
      if ((jsonObj.get("site_footer") != null && !jsonObj.get("site_footer").isJsonNull()) && !jsonObj.get("site_footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_footer").toString()));
      }
      if ((jsonObj.get("site_header") != null && !jsonObj.get("site_header").isJsonNull()) && !jsonObj.get("site_header").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_header` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_header").toString()));
      }
      if ((jsonObj.get("smtp_address") != null && !jsonObj.get("smtp_address").isJsonNull()) && !jsonObj.get("smtp_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtp_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtp_address").toString()));
      }
      if ((jsonObj.get("smtp_authentication") != null && !jsonObj.get("smtp_authentication").isJsonNull()) && !jsonObj.get("smtp_authentication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtp_authentication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtp_authentication").toString()));
      }
      if ((jsonObj.get("smtp_from") != null && !jsonObj.get("smtp_from").isJsonNull()) && !jsonObj.get("smtp_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtp_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtp_from").toString()));
      }
      if ((jsonObj.get("smtp_username") != null && !jsonObj.get("smtp_username").isJsonNull()) && !jsonObj.get("smtp_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtp_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtp_username").toString()));
      }
      if ((jsonObj.get("subdomain") != null && !jsonObj.get("subdomain").isJsonNull()) && !jsonObj.get("subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdomain").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserEntity.validateJsonElement(jsonObj.get("user"));
      }
      if ((jsonObj.get("welcome_custom_text") != null && !jsonObj.get("welcome_custom_text").isJsonNull()) && !jsonObj.get("welcome_custom_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcome_custom_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcome_custom_text").toString()));
      }
      if ((jsonObj.get("welcome_email_cc") != null && !jsonObj.get("welcome_email_cc").isJsonNull()) && !jsonObj.get("welcome_email_cc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcome_email_cc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcome_email_cc").toString()));
      }
      if ((jsonObj.get("welcome_email_subject") != null && !jsonObj.get("welcome_email_subject").isJsonNull()) && !jsonObj.get("welcome_email_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcome_email_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcome_email_subject").toString()));
      }
      if ((jsonObj.get("welcome_screen") != null && !jsonObj.get("welcome_screen").isJsonNull()) && !jsonObj.get("welcome_screen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `welcome_screen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("welcome_screen").toString()));
      }
      // validate the optional field `welcome_screen`
      if (jsonObj.get("welcome_screen") != null && !jsonObj.get("welcome_screen").isJsonNull()) {
        WelcomeScreenEnum.validateJsonElement(jsonObj.get("welcome_screen"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SiteEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SiteEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SiteEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SiteEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<SiteEntity>() {
           @Override
           public void write(JsonWriter out, SiteEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SiteEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SiteEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SiteEntity
   * @throws IOException if the JSON string is invalid with respect to SiteEntity
   */
  public static SiteEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SiteEntity.class);
  }

  /**
   * Convert an instance of SiteEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

