/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Download configuration file (required for some Remote Server integrations, such as the Files.com Agent)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteServerConfigurationFileEntity {
  public static final String SERIALIZED_NAME_API_TOKEN = "api_token";
  @SerializedName(SERIALIZED_NAME_API_TOKEN)
  private String apiToken;

  public static final String SERIALIZED_NAME_CONFIG_VERSION = "config_version";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private String configVersion;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PERMISSION_SET = "permission_set";
  @SerializedName(SERIALIZED_NAME_PERMISSION_SET)
  private String permissionSet;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "private_key";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_ROOT = "root";
  @SerializedName(SERIALIZED_NAME_ROOT)
  private String root;

  public static final String SERIALIZED_NAME_SERVER_HOST_KEY = "server_host_key";
  @SerializedName(SERIALIZED_NAME_SERVER_HOST_KEY)
  private String serverHostKey;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBDOMAIN = "subdomain";
  @SerializedName(SERIALIZED_NAME_SUBDOMAIN)
  private String subdomain;

  public RemoteServerConfigurationFileEntity() {
  }

  public RemoteServerConfigurationFileEntity apiToken(String apiToken) {
    this.apiToken = apiToken;
    return this;
  }

  /**
   * Files Agent API Token
   * @return apiToken
   */
  @javax.annotation.Nullable
  public String getApiToken() {
    return apiToken;
  }

  public void setApiToken(String apiToken) {
    this.apiToken = apiToken;
  }


  public RemoteServerConfigurationFileEntity configVersion(String configVersion) {
    this.configVersion = configVersion;
    return this;
  }

  /**
   * agent config version
   * @return configVersion
   */
  @javax.annotation.Nullable
  public String getConfigVersion() {
    return configVersion;
  }

  public void setConfigVersion(String configVersion) {
    this.configVersion = configVersion;
  }


  public RemoteServerConfigurationFileEntity hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public RemoteServerConfigurationFileEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Agent ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RemoteServerConfigurationFileEntity permissionSet(String permissionSet) {
    this.permissionSet = permissionSet;
    return this;
  }

  /**
   * 
   * @return permissionSet
   */
  @javax.annotation.Nullable
  public String getPermissionSet() {
    return permissionSet;
  }

  public void setPermissionSet(String permissionSet) {
    this.permissionSet = permissionSet;
  }


  public RemoteServerConfigurationFileEntity port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Incoming port for files agent connections
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public RemoteServerConfigurationFileEntity privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * private key
   * @return privateKey
   */
  @javax.annotation.Nullable
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public RemoteServerConfigurationFileEntity publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * public key
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public RemoteServerConfigurationFileEntity root(String root) {
    this.root = root;
    return this;
  }

  /**
   * Agent local root path
   * @return root
   */
  @javax.annotation.Nullable
  public String getRoot() {
    return root;
  }

  public void setRoot(String root) {
    this.root = root;
  }


  public RemoteServerConfigurationFileEntity serverHostKey(String serverHostKey) {
    this.serverHostKey = serverHostKey;
    return this;
  }

  /**
   * Get serverHostKey
   * @return serverHostKey
   */
  @javax.annotation.Nullable
  public String getServerHostKey() {
    return serverHostKey;
  }

  public void setServerHostKey(String serverHostKey) {
    this.serverHostKey = serverHostKey;
  }


  public RemoteServerConfigurationFileEntity status(String status) {
    this.status = status;
    return this;
  }

  /**
   * either running or shutdown
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RemoteServerConfigurationFileEntity subdomain(String subdomain) {
    this.subdomain = subdomain;
    return this;
  }

  /**
   * Get subdomain
   * @return subdomain
   */
  @javax.annotation.Nullable
  public String getSubdomain() {
    return subdomain;
  }

  public void setSubdomain(String subdomain) {
    this.subdomain = subdomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteServerConfigurationFileEntity remoteServerConfigurationFileEntity = (RemoteServerConfigurationFileEntity) o;
    return Objects.equals(this.apiToken, remoteServerConfigurationFileEntity.apiToken) &&
        Objects.equals(this.configVersion, remoteServerConfigurationFileEntity.configVersion) &&
        Objects.equals(this.hostname, remoteServerConfigurationFileEntity.hostname) &&
        Objects.equals(this.id, remoteServerConfigurationFileEntity.id) &&
        Objects.equals(this.permissionSet, remoteServerConfigurationFileEntity.permissionSet) &&
        Objects.equals(this.port, remoteServerConfigurationFileEntity.port) &&
        Objects.equals(this.privateKey, remoteServerConfigurationFileEntity.privateKey) &&
        Objects.equals(this.publicKey, remoteServerConfigurationFileEntity.publicKey) &&
        Objects.equals(this.root, remoteServerConfigurationFileEntity.root) &&
        Objects.equals(this.serverHostKey, remoteServerConfigurationFileEntity.serverHostKey) &&
        Objects.equals(this.status, remoteServerConfigurationFileEntity.status) &&
        Objects.equals(this.subdomain, remoteServerConfigurationFileEntity.subdomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiToken, configVersion, hostname, id, permissionSet, port, privateKey, publicKey, root, serverHostKey, status, subdomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteServerConfigurationFileEntity {\n");
    sb.append("    apiToken: ").append(toIndentedString(apiToken)).append("\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    permissionSet: ").append(toIndentedString(permissionSet)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("    serverHostKey: ").append(toIndentedString(serverHostKey)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_token");
    openapiFields.add("config_version");
    openapiFields.add("hostname");
    openapiFields.add("id");
    openapiFields.add("permission_set");
    openapiFields.add("port");
    openapiFields.add("private_key");
    openapiFields.add("public_key");
    openapiFields.add("root");
    openapiFields.add("server_host_key");
    openapiFields.add("status");
    openapiFields.add("subdomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteServerConfigurationFileEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteServerConfigurationFileEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteServerConfigurationFileEntity is not found in the empty JSON string", RemoteServerConfigurationFileEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteServerConfigurationFileEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteServerConfigurationFileEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api_token") != null && !jsonObj.get("api_token").isJsonNull()) && !jsonObj.get("api_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_token").toString()));
      }
      if ((jsonObj.get("config_version") != null && !jsonObj.get("config_version").isJsonNull()) && !jsonObj.get("config_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config_version").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("permission_set") != null && !jsonObj.get("permission_set").isJsonNull()) && !jsonObj.get("permission_set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission_set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission_set").toString()));
      }
      if ((jsonObj.get("private_key") != null && !jsonObj.get("private_key").isJsonNull()) && !jsonObj.get("private_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_key").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if ((jsonObj.get("root") != null && !jsonObj.get("root").isJsonNull()) && !jsonObj.get("root").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root").toString()));
      }
      if ((jsonObj.get("server_host_key") != null && !jsonObj.get("server_host_key").isJsonNull()) && !jsonObj.get("server_host_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_host_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_host_key").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subdomain") != null && !jsonObj.get("subdomain").isJsonNull()) && !jsonObj.get("subdomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteServerConfigurationFileEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteServerConfigurationFileEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteServerConfigurationFileEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteServerConfigurationFileEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteServerConfigurationFileEntity>() {
           @Override
           public void write(JsonWriter out, RemoteServerConfigurationFileEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteServerConfigurationFileEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteServerConfigurationFileEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteServerConfigurationFileEntity
   * @throws IOException if the JSON string is invalid with respect to RemoteServerConfigurationFileEntity
   */
  public static RemoteServerConfigurationFileEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteServerConfigurationFileEntity.class);
  }

  /**
   * Convert an instance of RemoteServerConfigurationFileEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

