/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FormFieldSetEntity;
import org.openapitools.client.model.ImageEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create Bundle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BundleEntity {
  public static final String SERIALIZED_NAME_CLICKWRAP_BODY = "clickwrap_body";
  @SerializedName(SERIALIZED_NAME_CLICKWRAP_BODY)
  private String clickwrapBody;

  public static final String SERIALIZED_NAME_CLICKWRAP_ID = "clickwrap_id";
  @SerializedName(SERIALIZED_NAME_CLICKWRAP_ID)
  private Integer clickwrapId;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DONT_SEPARATE_SUBMISSIONS_BY_FOLDER = "dont_separate_submissions_by_folder";
  @SerializedName(SERIALIZED_NAME_DONT_SEPARATE_SUBMISSIONS_BY_FOLDER)
  private Boolean dontSeparateSubmissionsByFolder;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private OffsetDateTime expiresAt;

  public static final String SERIALIZED_NAME_FORM_FIELD_SET = "form_field_set";
  @SerializedName(SERIALIZED_NAME_FORM_FIELD_SET)
  private FormFieldSetEntity formFieldSet;

  public static final String SERIALIZED_NAME_HAS_INBOX = "has_inbox";
  @SerializedName(SERIALIZED_NAME_HAS_INBOX)
  private Boolean hasInbox;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INBOX_ID = "inbox_id";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  private Integer inboxId;

  public static final String SERIALIZED_NAME_MAX_USES = "max_uses";
  @SerializedName(SERIALIZED_NAME_MAX_USES)
  private Integer maxUses;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PASSWORD_PROTECTED = "password_protected";
  @SerializedName(SERIALIZED_NAME_PASSWORD_PROTECTED)
  private Boolean passwordProtected;

  public static final String SERIALIZED_NAME_PATH_TEMPLATE = "path_template";
  @SerializedName(SERIALIZED_NAME_PATH_TEMPLATE)
  private String pathTemplate;

  public static final String SERIALIZED_NAME_PATHS = "paths";
  @SerializedName(SERIALIZED_NAME_PATHS)
  private List<String> paths = new ArrayList<>();

  /**
   * Permissions that apply to Folders in this Share Link.
   */
  @JsonAdapter(PermissionsEnum.Adapter.class)
  public enum PermissionsEnum {
    READ("read"),
    
    WRITE("write"),
    
    READ_WRITE("read_write"),
    
    FULL("full"),
    
    NONE("none"),
    
    PREVIEW_ONLY("preview_only");

    private String value;

    PermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionsEnum fromValue(String value) {
      for (PermissionsEnum b : PermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private PermissionsEnum permissions;

  public static final String SERIALIZED_NAME_PREVIEW_ONLY = "preview_only";
  @SerializedName(SERIALIZED_NAME_PREVIEW_ONLY)
  private Boolean previewOnly;

  public static final String SERIALIZED_NAME_REQUIRE_REGISTRATION = "require_registration";
  @SerializedName(SERIALIZED_NAME_REQUIRE_REGISTRATION)
  private Boolean requireRegistration;

  public static final String SERIALIZED_NAME_REQUIRE_SHARE_RECIPIENT = "require_share_recipient";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SHARE_RECIPIENT)
  private Boolean requireShareRecipient;

  public static final String SERIALIZED_NAME_SEND_EMAIL_RECEIPT_TO_UPLOADER = "send_email_receipt_to_uploader";
  @SerializedName(SERIALIZED_NAME_SEND_EMAIL_RECEIPT_TO_UPLOADER)
  private Boolean sendEmailReceiptToUploader;

  public static final String SERIALIZED_NAME_SKIP_COMPANY = "skip_company";
  @SerializedName(SERIALIZED_NAME_SKIP_COMPANY)
  private Boolean skipCompany;

  public static final String SERIALIZED_NAME_SKIP_EMAIL = "skip_email";
  @SerializedName(SERIALIZED_NAME_SKIP_EMAIL)
  private Boolean skipEmail;

  public static final String SERIALIZED_NAME_SKIP_NAME = "skip_name";
  @SerializedName(SERIALIZED_NAME_SKIP_NAME)
  private Boolean skipName;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WATERMARK_ATTACHMENT = "watermark_attachment";
  @SerializedName(SERIALIZED_NAME_WATERMARK_ATTACHMENT)
  private ImageEntity watermarkAttachment;

  public static final String SERIALIZED_NAME_WATERMARK_VALUE = "watermark_value";
  @SerializedName(SERIALIZED_NAME_WATERMARK_VALUE)
  private Object watermarkValue;

  public BundleEntity() {
  }

  public BundleEntity clickwrapBody(String clickwrapBody) {
    this.clickwrapBody = clickwrapBody;
    return this;
  }

  /**
   * Legal text that must be agreed to prior to accessing Bundle.
   * @return clickwrapBody
   */
  @javax.annotation.Nullable
  public String getClickwrapBody() {
    return clickwrapBody;
  }

  public void setClickwrapBody(String clickwrapBody) {
    this.clickwrapBody = clickwrapBody;
  }


  public BundleEntity clickwrapId(Integer clickwrapId) {
    this.clickwrapId = clickwrapId;
    return this;
  }

  /**
   * ID of the clickwrap to use with this bundle.
   * @return clickwrapId
   */
  @javax.annotation.Nullable
  public Integer getClickwrapId() {
    return clickwrapId;
  }

  public void setClickwrapId(Integer clickwrapId) {
    this.clickwrapId = clickwrapId;
  }


  public BundleEntity code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Bundle code.  This code forms the end part of the Public URL.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public BundleEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Bundle created at date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BundleEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Public description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BundleEntity dontSeparateSubmissionsByFolder(Boolean dontSeparateSubmissionsByFolder) {
    this.dontSeparateSubmissionsByFolder = dontSeparateSubmissionsByFolder;
    return this;
  }

  /**
   * Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required.
   * @return dontSeparateSubmissionsByFolder
   */
  @javax.annotation.Nullable
  public Boolean getDontSeparateSubmissionsByFolder() {
    return dontSeparateSubmissionsByFolder;
  }

  public void setDontSeparateSubmissionsByFolder(Boolean dontSeparateSubmissionsByFolder) {
    this.dontSeparateSubmissionsByFolder = dontSeparateSubmissionsByFolder;
  }


  public BundleEntity expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Bundle expiration date/time
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public BundleEntity formFieldSet(FormFieldSetEntity formFieldSet) {
    this.formFieldSet = formFieldSet;
    return this;
  }

  /**
   * Get formFieldSet
   * @return formFieldSet
   */
  @javax.annotation.Nullable
  public FormFieldSetEntity getFormFieldSet() {
    return formFieldSet;
  }

  public void setFormFieldSet(FormFieldSetEntity formFieldSet) {
    this.formFieldSet = formFieldSet;
  }


  public BundleEntity hasInbox(Boolean hasInbox) {
    this.hasInbox = hasInbox;
    return this;
  }

  /**
   * Does this bundle have an associated inbox?
   * @return hasInbox
   */
  @javax.annotation.Nullable
  public Boolean getHasInbox() {
    return hasInbox;
  }

  public void setHasInbox(Boolean hasInbox) {
    this.hasInbox = hasInbox;
  }


  public BundleEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Bundle ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public BundleEntity inboxId(Integer inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * ID of the associated inbox, if available.
   * @return inboxId
   */
  @javax.annotation.Nullable
  public Integer getInboxId() {
    return inboxId;
  }

  public void setInboxId(Integer inboxId) {
    this.inboxId = inboxId;
  }


  public BundleEntity maxUses(Integer maxUses) {
    this.maxUses = maxUses;
    return this;
  }

  /**
   * Maximum number of times bundle can be accessed
   * @return maxUses
   */
  @javax.annotation.Nullable
  public Integer getMaxUses() {
    return maxUses;
  }

  public void setMaxUses(Integer maxUses) {
    this.maxUses = maxUses;
  }


  public BundleEntity note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Bundle internal note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public BundleEntity passwordProtected(Boolean passwordProtected) {
    this.passwordProtected = passwordProtected;
    return this;
  }

  /**
   * Is this bundle password protected?
   * @return passwordProtected
   */
  @javax.annotation.Nullable
  public Boolean getPasswordProtected() {
    return passwordProtected;
  }

  public void setPasswordProtected(Boolean passwordProtected) {
    this.passwordProtected = passwordProtected;
  }


  public BundleEntity pathTemplate(String pathTemplate) {
    this.pathTemplate = pathTemplate;
    return this;
  }

  /**
   * Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data.
   * @return pathTemplate
   */
  @javax.annotation.Nullable
  public String getPathTemplate() {
    return pathTemplate;
  }

  public void setPathTemplate(String pathTemplate) {
    this.pathTemplate = pathTemplate;
  }


  public BundleEntity paths(List<String> paths) {
    this.paths = paths;
    return this;
  }

  public BundleEntity addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new ArrayList<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

  /**
   * A list of paths in this bundle.  For performance reasons, this is not provided when listing bundles.
   * @return paths
   */
  @javax.annotation.Nullable
  public List<String> getPaths() {
    return paths;
  }

  public void setPaths(List<String> paths) {
    this.paths = paths;
  }


  public BundleEntity permissions(PermissionsEnum permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Permissions that apply to Folders in this Share Link.
   * @return permissions
   */
  @javax.annotation.Nullable
  public PermissionsEnum getPermissions() {
    return permissions;
  }

  public void setPermissions(PermissionsEnum permissions) {
    this.permissions = permissions;
  }


  public BundleEntity previewOnly(Boolean previewOnly) {
    this.previewOnly = previewOnly;
    return this;
  }

  /**
   * Restrict users to previewing files only?
   * @return previewOnly
   */
  @javax.annotation.Nullable
  public Boolean getPreviewOnly() {
    return previewOnly;
  }

  public void setPreviewOnly(Boolean previewOnly) {
    this.previewOnly = previewOnly;
  }


  public BundleEntity requireRegistration(Boolean requireRegistration) {
    this.requireRegistration = requireRegistration;
    return this;
  }

  /**
   * Show a registration page that captures the downloader&#39;s name and email address?
   * @return requireRegistration
   */
  @javax.annotation.Nullable
  public Boolean getRequireRegistration() {
    return requireRegistration;
  }

  public void setRequireRegistration(Boolean requireRegistration) {
    this.requireRegistration = requireRegistration;
  }


  public BundleEntity requireShareRecipient(Boolean requireShareRecipient) {
    this.requireShareRecipient = requireShareRecipient;
    return this;
  }

  /**
   * Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI?
   * @return requireShareRecipient
   */
  @javax.annotation.Nullable
  public Boolean getRequireShareRecipient() {
    return requireShareRecipient;
  }

  public void setRequireShareRecipient(Boolean requireShareRecipient) {
    this.requireShareRecipient = requireShareRecipient;
  }


  public BundleEntity sendEmailReceiptToUploader(Boolean sendEmailReceiptToUploader) {
    this.sendEmailReceiptToUploader = sendEmailReceiptToUploader;
    return this;
  }

  /**
   * Send delivery receipt to the uploader. Note: For writable share only
   * @return sendEmailReceiptToUploader
   */
  @javax.annotation.Nullable
  public Boolean getSendEmailReceiptToUploader() {
    return sendEmailReceiptToUploader;
  }

  public void setSendEmailReceiptToUploader(Boolean sendEmailReceiptToUploader) {
    this.sendEmailReceiptToUploader = sendEmailReceiptToUploader;
  }


  public BundleEntity skipCompany(Boolean skipCompany) {
    this.skipCompany = skipCompany;
    return this;
  }

  /**
   * BundleRegistrations can be saved without providing company?
   * @return skipCompany
   */
  @javax.annotation.Nullable
  public Boolean getSkipCompany() {
    return skipCompany;
  }

  public void setSkipCompany(Boolean skipCompany) {
    this.skipCompany = skipCompany;
  }


  public BundleEntity skipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
    return this;
  }

  /**
   * BundleRegistrations can be saved without providing email?
   * @return skipEmail
   */
  @javax.annotation.Nullable
  public Boolean getSkipEmail() {
    return skipEmail;
  }

  public void setSkipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
  }


  public BundleEntity skipName(Boolean skipName) {
    this.skipName = skipName;
    return this;
  }

  /**
   * BundleRegistrations can be saved without providing name?
   * @return skipName
   */
  @javax.annotation.Nullable
  public Boolean getSkipName() {
    return skipName;
  }

  public void setSkipName(Boolean skipName) {
    this.skipName = skipName;
  }


  public BundleEntity url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Public URL of Share Link
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public BundleEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Bundle creator user ID
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public BundleEntity username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Bundle creator username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public BundleEntity watermarkAttachment(ImageEntity watermarkAttachment) {
    this.watermarkAttachment = watermarkAttachment;
    return this;
  }

  /**
   * Get watermarkAttachment
   * @return watermarkAttachment
   */
  @javax.annotation.Nullable
  public ImageEntity getWatermarkAttachment() {
    return watermarkAttachment;
  }

  public void setWatermarkAttachment(ImageEntity watermarkAttachment) {
    this.watermarkAttachment = watermarkAttachment;
  }


  public BundleEntity watermarkValue(Object watermarkValue) {
    this.watermarkValue = watermarkValue;
    return this;
  }

  /**
   * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
   * @return watermarkValue
   */
  @javax.annotation.Nullable
  public Object getWatermarkValue() {
    return watermarkValue;
  }

  public void setWatermarkValue(Object watermarkValue) {
    this.watermarkValue = watermarkValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BundleEntity bundleEntity = (BundleEntity) o;
    return Objects.equals(this.clickwrapBody, bundleEntity.clickwrapBody) &&
        Objects.equals(this.clickwrapId, bundleEntity.clickwrapId) &&
        Objects.equals(this.code, bundleEntity.code) &&
        Objects.equals(this.createdAt, bundleEntity.createdAt) &&
        Objects.equals(this.description, bundleEntity.description) &&
        Objects.equals(this.dontSeparateSubmissionsByFolder, bundleEntity.dontSeparateSubmissionsByFolder) &&
        Objects.equals(this.expiresAt, bundleEntity.expiresAt) &&
        Objects.equals(this.formFieldSet, bundleEntity.formFieldSet) &&
        Objects.equals(this.hasInbox, bundleEntity.hasInbox) &&
        Objects.equals(this.id, bundleEntity.id) &&
        Objects.equals(this.inboxId, bundleEntity.inboxId) &&
        Objects.equals(this.maxUses, bundleEntity.maxUses) &&
        Objects.equals(this.note, bundleEntity.note) &&
        Objects.equals(this.passwordProtected, bundleEntity.passwordProtected) &&
        Objects.equals(this.pathTemplate, bundleEntity.pathTemplate) &&
        Objects.equals(this.paths, bundleEntity.paths) &&
        Objects.equals(this.permissions, bundleEntity.permissions) &&
        Objects.equals(this.previewOnly, bundleEntity.previewOnly) &&
        Objects.equals(this.requireRegistration, bundleEntity.requireRegistration) &&
        Objects.equals(this.requireShareRecipient, bundleEntity.requireShareRecipient) &&
        Objects.equals(this.sendEmailReceiptToUploader, bundleEntity.sendEmailReceiptToUploader) &&
        Objects.equals(this.skipCompany, bundleEntity.skipCompany) &&
        Objects.equals(this.skipEmail, bundleEntity.skipEmail) &&
        Objects.equals(this.skipName, bundleEntity.skipName) &&
        Objects.equals(this.url, bundleEntity.url) &&
        Objects.equals(this.userId, bundleEntity.userId) &&
        Objects.equals(this.username, bundleEntity.username) &&
        Objects.equals(this.watermarkAttachment, bundleEntity.watermarkAttachment) &&
        Objects.equals(this.watermarkValue, bundleEntity.watermarkValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickwrapBody, clickwrapId, code, createdAt, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSet, hasInbox, id, inboxId, maxUses, note, passwordProtected, pathTemplate, paths, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, url, userId, username, watermarkAttachment, watermarkValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BundleEntity {\n");
    sb.append("    clickwrapBody: ").append(toIndentedString(clickwrapBody)).append("\n");
    sb.append("    clickwrapId: ").append(toIndentedString(clickwrapId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dontSeparateSubmissionsByFolder: ").append(toIndentedString(dontSeparateSubmissionsByFolder)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    formFieldSet: ").append(toIndentedString(formFieldSet)).append("\n");
    sb.append("    hasInbox: ").append(toIndentedString(hasInbox)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    maxUses: ").append(toIndentedString(maxUses)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    passwordProtected: ").append(toIndentedString(passwordProtected)).append("\n");
    sb.append("    pathTemplate: ").append(toIndentedString(pathTemplate)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    previewOnly: ").append(toIndentedString(previewOnly)).append("\n");
    sb.append("    requireRegistration: ").append(toIndentedString(requireRegistration)).append("\n");
    sb.append("    requireShareRecipient: ").append(toIndentedString(requireShareRecipient)).append("\n");
    sb.append("    sendEmailReceiptToUploader: ").append(toIndentedString(sendEmailReceiptToUploader)).append("\n");
    sb.append("    skipCompany: ").append(toIndentedString(skipCompany)).append("\n");
    sb.append("    skipEmail: ").append(toIndentedString(skipEmail)).append("\n");
    sb.append("    skipName: ").append(toIndentedString(skipName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    watermarkAttachment: ").append(toIndentedString(watermarkAttachment)).append("\n");
    sb.append("    watermarkValue: ").append(toIndentedString(watermarkValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clickwrap_body");
    openapiFields.add("clickwrap_id");
    openapiFields.add("code");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("dont_separate_submissions_by_folder");
    openapiFields.add("expires_at");
    openapiFields.add("form_field_set");
    openapiFields.add("has_inbox");
    openapiFields.add("id");
    openapiFields.add("inbox_id");
    openapiFields.add("max_uses");
    openapiFields.add("note");
    openapiFields.add("password_protected");
    openapiFields.add("path_template");
    openapiFields.add("paths");
    openapiFields.add("permissions");
    openapiFields.add("preview_only");
    openapiFields.add("require_registration");
    openapiFields.add("require_share_recipient");
    openapiFields.add("send_email_receipt_to_uploader");
    openapiFields.add("skip_company");
    openapiFields.add("skip_email");
    openapiFields.add("skip_name");
    openapiFields.add("url");
    openapiFields.add("user_id");
    openapiFields.add("username");
    openapiFields.add("watermark_attachment");
    openapiFields.add("watermark_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BundleEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BundleEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BundleEntity is not found in the empty JSON string", BundleEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BundleEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BundleEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clickwrap_body") != null && !jsonObj.get("clickwrap_body").isJsonNull()) && !jsonObj.get("clickwrap_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickwrap_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickwrap_body").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `form_field_set`
      if (jsonObj.get("form_field_set") != null && !jsonObj.get("form_field_set").isJsonNull()) {
        FormFieldSetEntity.validateJsonElement(jsonObj.get("form_field_set"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("path_template") != null && !jsonObj.get("path_template").isJsonNull()) && !jsonObj.get("path_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_template").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paths") != null && !jsonObj.get("paths").isJsonNull() && !jsonObj.get("paths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paths` to be an array in the JSON string but got `%s`", jsonObj.get("paths").toString()));
      }
      if ((jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) && !jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        PermissionsEnum.validateJsonElement(jsonObj.get("permissions"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      // validate the optional field `watermark_attachment`
      if (jsonObj.get("watermark_attachment") != null && !jsonObj.get("watermark_attachment").isJsonNull()) {
        ImageEntity.validateJsonElement(jsonObj.get("watermark_attachment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BundleEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BundleEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BundleEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BundleEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<BundleEntity>() {
           @Override
           public void write(JsonWriter out, BundleEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BundleEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BundleEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BundleEntity
   * @throws IOException if the JSON string is invalid with respect to BundleEntity
   */
  public static BundleEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BundleEntity.class);
  }

  /**
   * Convert an instance of BundleEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

