/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InvoiceLineItemEntity;
import org.openapitools.client.model.PaymentLineItemEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Payments
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountLineItemEntity {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DOWNLOAD_URI = "download_uri";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URI)
  private String downloadUri;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INVOICE_LINE_ITEMS = "invoice_line_items";
  @SerializedName(SERIALIZED_NAME_INVOICE_LINE_ITEMS)
  private List<InvoiceLineItemEntity> invoiceLineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_PAYMENT_LINE_ITEMS = "payment_line_items";
  @SerializedName(SERIALIZED_NAME_PAYMENT_LINE_ITEMS)
  private List<PaymentLineItemEntity> paymentLineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_REVERSED_AT = "payment_reversed_at";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REVERSED_AT)
  private OffsetDateTime paymentReversedAt;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_SITE_NAME = "site_name";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  private String siteName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public AccountLineItemEntity() {
  }

  public AccountLineItemEntity amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Line item amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public AccountLineItemEntity balance(Double balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Line item balance
   * @return balance
   */
  @javax.annotation.Nullable
  public Double getBalance() {
    return balance;
  }

  public void setBalance(Double balance) {
    this.balance = balance;
  }


  public AccountLineItemEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Line item created at
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AccountLineItemEntity currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Line item currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AccountLineItemEntity downloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
    return this;
  }

  /**
   * Line item download uri
   * @return downloadUri
   */
  @javax.annotation.Nullable
  public String getDownloadUri() {
    return downloadUri;
  }

  public void setDownloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
  }


  public AccountLineItemEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Line item Id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public AccountLineItemEntity invoiceLineItems(List<InvoiceLineItemEntity> invoiceLineItems) {
    this.invoiceLineItems = invoiceLineItems;
    return this;
  }

  public AccountLineItemEntity addInvoiceLineItemsItem(InvoiceLineItemEntity invoiceLineItemsItem) {
    if (this.invoiceLineItems == null) {
      this.invoiceLineItems = new ArrayList<>();
    }
    this.invoiceLineItems.add(invoiceLineItemsItem);
    return this;
  }

  /**
   * Associated invoice line items
   * @return invoiceLineItems
   */
  @javax.annotation.Nullable
  public List<InvoiceLineItemEntity> getInvoiceLineItems() {
    return invoiceLineItems;
  }

  public void setInvoiceLineItems(List<InvoiceLineItemEntity> invoiceLineItems) {
    this.invoiceLineItems = invoiceLineItems;
  }


  public AccountLineItemEntity method(String method) {
    this.method = method;
    return this;
  }

  /**
   * Line item payment method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public AccountLineItemEntity paymentLineItems(List<PaymentLineItemEntity> paymentLineItems) {
    this.paymentLineItems = paymentLineItems;
    return this;
  }

  public AccountLineItemEntity addPaymentLineItemsItem(PaymentLineItemEntity paymentLineItemsItem) {
    if (this.paymentLineItems == null) {
      this.paymentLineItems = new ArrayList<>();
    }
    this.paymentLineItems.add(paymentLineItemsItem);
    return this;
  }

  /**
   * Associated payment line items
   * @return paymentLineItems
   */
  @javax.annotation.Nullable
  public List<PaymentLineItemEntity> getPaymentLineItems() {
    return paymentLineItems;
  }

  public void setPaymentLineItems(List<PaymentLineItemEntity> paymentLineItems) {
    this.paymentLineItems = paymentLineItems;
  }


  public AccountLineItemEntity paymentReversedAt(OffsetDateTime paymentReversedAt) {
    this.paymentReversedAt = paymentReversedAt;
    return this;
  }

  /**
   * Date/time payment was reversed if applicable
   * @return paymentReversedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPaymentReversedAt() {
    return paymentReversedAt;
  }

  public void setPaymentReversedAt(OffsetDateTime paymentReversedAt) {
    this.paymentReversedAt = paymentReversedAt;
  }


  public AccountLineItemEntity paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Type of payment if applicable
   * @return paymentType
   */
  @javax.annotation.Nullable
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }


  public AccountLineItemEntity siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * Site name this line item is for
   * @return siteName
   */
  @javax.annotation.Nullable
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }


  public AccountLineItemEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of line item, either payment or invoice
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AccountLineItemEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Line item updated at
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountLineItemEntity accountLineItemEntity = (AccountLineItemEntity) o;
    return Objects.equals(this.amount, accountLineItemEntity.amount) &&
        Objects.equals(this.balance, accountLineItemEntity.balance) &&
        Objects.equals(this.createdAt, accountLineItemEntity.createdAt) &&
        Objects.equals(this.currency, accountLineItemEntity.currency) &&
        Objects.equals(this.downloadUri, accountLineItemEntity.downloadUri) &&
        Objects.equals(this.id, accountLineItemEntity.id) &&
        Objects.equals(this.invoiceLineItems, accountLineItemEntity.invoiceLineItems) &&
        Objects.equals(this.method, accountLineItemEntity.method) &&
        Objects.equals(this.paymentLineItems, accountLineItemEntity.paymentLineItems) &&
        Objects.equals(this.paymentReversedAt, accountLineItemEntity.paymentReversedAt) &&
        Objects.equals(this.paymentType, accountLineItemEntity.paymentType) &&
        Objects.equals(this.siteName, accountLineItemEntity.siteName) &&
        Objects.equals(this.type, accountLineItemEntity.type) &&
        Objects.equals(this.updatedAt, accountLineItemEntity.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, balance, createdAt, currency, downloadUri, id, invoiceLineItems, method, paymentLineItems, paymentReversedAt, paymentType, siteName, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountLineItemEntity {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    downloadUri: ").append(toIndentedString(downloadUri)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invoiceLineItems: ").append(toIndentedString(invoiceLineItems)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    paymentLineItems: ").append(toIndentedString(paymentLineItems)).append("\n");
    sb.append("    paymentReversedAt: ").append(toIndentedString(paymentReversedAt)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("balance");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("download_uri");
    openapiFields.add("id");
    openapiFields.add("invoice_line_items");
    openapiFields.add("method");
    openapiFields.add("payment_line_items");
    openapiFields.add("payment_reversed_at");
    openapiFields.add("payment_type");
    openapiFields.add("site_name");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountLineItemEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountLineItemEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountLineItemEntity is not found in the empty JSON string", AccountLineItemEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountLineItemEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountLineItemEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("download_uri") != null && !jsonObj.get("download_uri").isJsonNull()) && !jsonObj.get("download_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_uri").toString()));
      }
      if (jsonObj.get("invoice_line_items") != null && !jsonObj.get("invoice_line_items").isJsonNull()) {
        JsonArray jsonArrayinvoiceLineItems = jsonObj.getAsJsonArray("invoice_line_items");
        if (jsonArrayinvoiceLineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invoice_line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invoice_line_items` to be an array in the JSON string but got `%s`", jsonObj.get("invoice_line_items").toString()));
          }

          // validate the optional field `invoice_line_items` (array)
          for (int i = 0; i < jsonArrayinvoiceLineItems.size(); i++) {
            InvoiceLineItemEntity.validateJsonElement(jsonArrayinvoiceLineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (jsonObj.get("payment_line_items") != null && !jsonObj.get("payment_line_items").isJsonNull()) {
        JsonArray jsonArraypaymentLineItems = jsonObj.getAsJsonArray("payment_line_items");
        if (jsonArraypaymentLineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payment_line_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payment_line_items` to be an array in the JSON string but got `%s`", jsonObj.get("payment_line_items").toString()));
          }

          // validate the optional field `payment_line_items` (array)
          for (int i = 0; i < jsonArraypaymentLineItems.size(); i++) {
            PaymentLineItemEntity.validateJsonElement(jsonArraypaymentLineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("payment_type") != null && !jsonObj.get("payment_type").isJsonNull()) && !jsonObj.get("payment_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_type").toString()));
      }
      if ((jsonObj.get("site_name") != null && !jsonObj.get("site_name").isJsonNull()) && !jsonObj.get("site_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountLineItemEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountLineItemEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountLineItemEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountLineItemEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountLineItemEntity>() {
           @Override
           public void write(JsonWriter out, AccountLineItemEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountLineItemEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountLineItemEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountLineItemEntity
   * @throws IOException if the JSON string is invalid with respect to AccountLineItemEntity
   */
  public static AccountLineItemEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountLineItemEntity.class);
  }

  /**
   * Convert an instance of AccountLineItemEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

