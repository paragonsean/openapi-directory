/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List User Cipher Uses
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserCipherUseEntity {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * The interface accessed
   */
  @JsonAdapter(InterfaceEnum.Adapter.class)
  public enum InterfaceEnum {
    WEB("web"),
    
    FTP("ftp"),
    
    SFTP("sftp"),
    
    DAV("dav"),
    
    DESKTOP("desktop"),
    
    RESTAPI("restapi"),
    
    ROBOT("robot"),
    
    JSAPI("jsapi");

    private String value;

    InterfaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterfaceEnum fromValue(String value) {
      for (InterfaceEnum b : InterfaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterfaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterfaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterfaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterfaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterfaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  private InterfaceEnum _interface;

  public static final String SERIALIZED_NAME_PROTOCOL_CIPHER = "protocol_cipher";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_CIPHER)
  private String protocolCipher;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public UserCipherUseEntity() {
  }

  public UserCipherUseEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The earliest recorded use of this combination of interface and protocol and cipher (for this user)
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UserCipherUseEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * UserCipherUse ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UserCipherUseEntity _interface(InterfaceEnum _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * The interface accessed
   * @return _interface
   */
  @javax.annotation.Nullable
  public InterfaceEnum getInterface() {
    return _interface;
  }

  public void setInterface(InterfaceEnum _interface) {
    this._interface = _interface;
  }


  public UserCipherUseEntity protocolCipher(String protocolCipher) {
    this.protocolCipher = protocolCipher;
    return this;
  }

  /**
   * The protocol and cipher employed
   * @return protocolCipher
   */
  @javax.annotation.Nullable
  public String getProtocolCipher() {
    return protocolCipher;
  }

  public void setProtocolCipher(String protocolCipher) {
    this.protocolCipher = protocolCipher;
  }


  public UserCipherUseEntity updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The most recent use of this combination of interface and protocol and cipher (for this user)
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public UserCipherUseEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ID of the user who performed this access
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserCipherUseEntity userCipherUseEntity = (UserCipherUseEntity) o;
    return Objects.equals(this.createdAt, userCipherUseEntity.createdAt) &&
        Objects.equals(this.id, userCipherUseEntity.id) &&
        Objects.equals(this._interface, userCipherUseEntity._interface) &&
        Objects.equals(this.protocolCipher, userCipherUseEntity.protocolCipher) &&
        Objects.equals(this.updatedAt, userCipherUseEntity.updatedAt) &&
        Objects.equals(this.userId, userCipherUseEntity.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, id, _interface, protocolCipher, updatedAt, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserCipherUseEntity {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    protocolCipher: ").append(toIndentedString(protocolCipher)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("interface");
    openapiFields.add("protocol_cipher");
    openapiFields.add("updated_at");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserCipherUseEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserCipherUseEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserCipherUseEntity is not found in the empty JSON string", UserCipherUseEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserCipherUseEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserCipherUseEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) && !jsonObj.get("interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface").toString()));
      }
      // validate the optional field `interface`
      if (jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) {
        InterfaceEnum.validateJsonElement(jsonObj.get("interface"));
      }
      if ((jsonObj.get("protocol_cipher") != null && !jsonObj.get("protocol_cipher").isJsonNull()) && !jsonObj.get("protocol_cipher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol_cipher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol_cipher").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserCipherUseEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserCipherUseEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserCipherUseEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserCipherUseEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<UserCipherUseEntity>() {
           @Override
           public void write(JsonWriter out, UserCipherUseEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserCipherUseEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserCipherUseEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserCipherUseEntity
   * @throws IOException if the JSON string is invalid with respect to UserCipherUseEntity
   */
  public static UserCipherUseEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserCipherUseEntity.class);
  }

  /**
   * Convert an instance of UserCipherUseEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

