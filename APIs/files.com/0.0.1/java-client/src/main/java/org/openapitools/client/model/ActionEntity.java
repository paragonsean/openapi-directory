/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List site full action history.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionEntity {
  /**
   * Type of action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    CREATE("create"),
    
    READ("read"),
    
    UPDATE("update"),
    
    DESTROY("destroy"),
    
    MOVE("move"),
    
    LOGIN("login"),
    
    FAILEDLOGIN("failedlogin"),
    
    COPY("copy"),
    
    USER_CREATE("user_create"),
    
    USER_UPDATE("user_update"),
    
    USER_DESTROY("user_destroy"),
    
    GROUP_CREATE("group_create"),
    
    GROUP_UPDATE("group_update"),
    
    GROUP_DESTROY("group_destroy"),
    
    PERMISSION_CREATE("permission_create"),
    
    PERMISSION_DESTROY("permission_destroy"),
    
    API_KEY_CREATE("api_key_create"),
    
    API_KEY_UPDATE("api_key_update"),
    
    API_KEY_DESTROY("api_key_destroy");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_DISPLAY = "display";
  @SerializedName(SERIALIZED_NAME_DISPLAY)
  private String display;

  /**
   * Failure type.  If action was a user login or session failure, why did it fail?
   */
  @JsonAdapter(FailureTypeEnum.Adapter.class)
  public enum FailureTypeEnum {
    EXPIRED_TRIAL("expired_trial"),
    
    ACCOUNT_OVERDUE("account_overdue"),
    
    LOCKED_OUT("locked_out"),
    
    IP_MISMATCH("ip_mismatch"),
    
    PASSWORD_MISMATCH("password_mismatch"),
    
    SITE_MISMATCH("site_mismatch"),
    
    USERNAME_NOT_FOUND("username_not_found"),
    
    NONE("none"),
    
    NO_FTP_PERMISSION("no_ftp_permission"),
    
    NO_WEB_PERMISSION("no_web_permission"),
    
    NO_DIRECTORY("no_directory"),
    
    ERRNO_ENOENT("errno_enoent"),
    
    NO_SFTP_PERMISSION("no_sftp_permission"),
    
    NO_DAV_PERMISSION("no_dav_permission"),
    
    NO_RESTAPI_PERMISSION("no_restapi_permission"),
    
    KEY_MISMATCH("key_mismatch"),
    
    REGION_MISMATCH("region_mismatch"),
    
    EXPIRED_ACCESS("expired_access"),
    
    DESKTOP_IP_MISMATCH("desktop_ip_mismatch"),
    
    DESKTOP_API_KEY_NOT_USED_QUICKLY_ENOUGH("desktop_api_key_not_used_quickly_enough"),
    
    DISABLED("disabled"),
    
    COUNTRY_MISMATCH("country_mismatch");

    private String value;

    FailureTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailureTypeEnum fromValue(String value) {
      for (FailureTypeEnum b : FailureTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailureTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailureTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailureTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailureTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailureTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILURE_TYPE = "failure_type";
  @SerializedName(SERIALIZED_NAME_FAILURE_TYPE)
  private FailureTypeEnum failureType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  /**
   * Interface on which this action occurred.
   */
  @JsonAdapter(InterfaceEnum.Adapter.class)
  public enum InterfaceEnum {
    WEB("web"),
    
    FTP("ftp"),
    
    ROBOT("robot"),
    
    JSAPI("jsapi"),
    
    WEBDESKTOPAPI("webdesktopapi"),
    
    SFTP("sftp"),
    
    DAV("dav"),
    
    DESKTOP("desktop"),
    
    RESTAPI("restapi"),
    
    SCIM("scim"),
    
    OFFICE("office"),
    
    MOBILE("mobile"),
    
    AS2("as2"),
    
    INBOUND_EMAIL("inbound_email"),
    
    REMOTE("remote");

    private String value;

    InterfaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterfaceEnum fromValue(String value) {
      for (InterfaceEnum b : InterfaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterfaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterfaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterfaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterfaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterfaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERFACE = "interface";
  @SerializedName(SERIALIZED_NAME_INTERFACE)
  private InterfaceEnum _interface;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private List<Object> targets = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WHEN = "when";
  @SerializedName(SERIALIZED_NAME_WHEN)
  private OffsetDateTime when;

  public ActionEntity() {
  }

  public ActionEntity action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Type of action
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public ActionEntity destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The destination path for this action, if applicable
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public ActionEntity display(String display) {
    this.display = display;
    return this;
  }

  /**
   * Friendly displayed output
   * @return display
   */
  @javax.annotation.Nullable
  public String getDisplay() {
    return display;
  }

  public void setDisplay(String display) {
    this.display = display;
  }


  public ActionEntity failureType(FailureTypeEnum failureType) {
    this.failureType = failureType;
    return this;
  }

  /**
   * Failure type.  If action was a user login or session failure, why did it fail?
   * @return failureType
   */
  @javax.annotation.Nullable
  public FailureTypeEnum getFailureType() {
    return failureType;
  }

  public void setFailureType(FailureTypeEnum failureType) {
    this.failureType = failureType;
  }


  public ActionEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Action ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ActionEntity _interface(InterfaceEnum _interface) {
    this._interface = _interface;
    return this;
  }

  /**
   * Interface on which this action occurred.
   * @return _interface
   */
  @javax.annotation.Nullable
  public InterfaceEnum getInterface() {
    return _interface;
  }

  public void setInterface(InterfaceEnum _interface) {
    this._interface = _interface;
  }


  public ActionEntity ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * IP Address that performed this action
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public ActionEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ActionEntity source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source path for this action, if applicable
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public ActionEntity targets(List<Object> targets) {
    this.targets = targets;
    return this;
  }

  public ActionEntity addTargetsItem(Object targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * Targets
   * @return targets
   */
  @javax.annotation.Nullable
  public List<Object> getTargets() {
    return targets;
  }

  public void setTargets(List<Object> targets) {
    this.targets = targets;
  }


  public ActionEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public ActionEntity username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public ActionEntity when(OffsetDateTime when) {
    this.when = when;
    return this;
  }

  /**
   * Action occurrence date/time
   * @return when
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWhen() {
    return when;
  }

  public void setWhen(OffsetDateTime when) {
    this.when = when;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionEntity actionEntity = (ActionEntity) o;
    return Objects.equals(this.action, actionEntity.action) &&
        Objects.equals(this.destination, actionEntity.destination) &&
        Objects.equals(this.display, actionEntity.display) &&
        Objects.equals(this.failureType, actionEntity.failureType) &&
        Objects.equals(this.id, actionEntity.id) &&
        Objects.equals(this._interface, actionEntity._interface) &&
        Objects.equals(this.ip, actionEntity.ip) &&
        Objects.equals(this.path, actionEntity.path) &&
        Objects.equals(this.source, actionEntity.source) &&
        Objects.equals(this.targets, actionEntity.targets) &&
        Objects.equals(this.userId, actionEntity.userId) &&
        Objects.equals(this.username, actionEntity.username) &&
        Objects.equals(this.when, actionEntity.when);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, destination, display, failureType, id, _interface, ip, path, source, targets, userId, username, when);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionEntity {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    failureType: ").append(toIndentedString(failureType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _interface: ").append(toIndentedString(_interface)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    when: ").append(toIndentedString(when)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("destination");
    openapiFields.add("display");
    openapiFields.add("failure_type");
    openapiFields.add("id");
    openapiFields.add("interface");
    openapiFields.add("ip");
    openapiFields.add("path");
    openapiFields.add("source");
    openapiFields.add("targets");
    openapiFields.add("user_id");
    openapiFields.add("username");
    openapiFields.add("when");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionEntity is not found in the empty JSON string", ActionEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if ((jsonObj.get("display") != null && !jsonObj.get("display").isJsonNull()) && !jsonObj.get("display").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display").toString()));
      }
      if ((jsonObj.get("failure_type") != null && !jsonObj.get("failure_type").isJsonNull()) && !jsonObj.get("failure_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failure_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failure_type").toString()));
      }
      // validate the optional field `failure_type`
      if (jsonObj.get("failure_type") != null && !jsonObj.get("failure_type").isJsonNull()) {
        FailureTypeEnum.validateJsonElement(jsonObj.get("failure_type"));
      }
      if ((jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) && !jsonObj.get("interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interface").toString()));
      }
      // validate the optional field `interface`
      if (jsonObj.get("interface") != null && !jsonObj.get("interface").isJsonNull()) {
        InterfaceEnum.validateJsonElement(jsonObj.get("interface"));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull() && !jsonObj.get("targets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targets` to be an array in the JSON string but got `%s`", jsonObj.get("targets").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionEntity>() {
           @Override
           public void write(JsonWriter out, ActionEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionEntity
   * @throws IOException if the JSON string is invalid with respect to ActionEntity
   */
  public static ActionEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionEntity.class);
  }

  /**
   * Convert an instance of ActionEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

