/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PreviewEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Folders by path
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileEntity {
  public static final String SERIALIZED_NAME_CRC32 = "crc32";
  @SerializedName(SERIALIZED_NAME_CRC32)
  private String crc32;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DOWNLOAD_URI = "download_uri";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URI)
  private String downloadUri;

  public static final String SERIALIZED_NAME_IS_LOCKED = "is_locked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_MD5 = "md5";
  @SerializedName(SERIALIZED_NAME_MD5)
  private String md5;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_MTIME = "mtime";
  @SerializedName(SERIALIZED_NAME_MTIME)
  private OffsetDateTime mtime;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private String permissions;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private PreviewEntity preview;

  public static final String SERIALIZED_NAME_PREVIEW_ID = "preview_id";
  @SerializedName(SERIALIZED_NAME_PREVIEW_ID)
  private Integer previewId;

  public static final String SERIALIZED_NAME_PRIORITY_COLOR = "priority_color";
  @SerializedName(SERIALIZED_NAME_PRIORITY_COLOR)
  private String priorityColor;

  public static final String SERIALIZED_NAME_PROVIDED_MTIME = "provided_mtime";
  @SerializedName(SERIALIZED_NAME_PROVIDED_MTIME)
  private OffsetDateTime providedMtime;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_SUBFOLDERS_LOCKED_QUESTION_MARK = "subfolders_locked?";
  @SerializedName(SERIALIZED_NAME_SUBFOLDERS_LOCKED_QUESTION_MARK)
  private Boolean subfoldersLockedQuestionMark;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public FileEntity() {
  }

  public FileEntity crc32(String crc32) {
    this.crc32 = crc32;
    return this;
  }

  /**
   * File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.
   * @return crc32
   */
  @javax.annotation.Nullable
  public String getCrc32() {
    return crc32;
  }

  public void setCrc32(String crc32) {
    this.crc32 = crc32;
  }


  public FileEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * File created date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FileEntity displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * File/Folder display name
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public FileEntity downloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
    return this;
  }

  /**
   * Link to download file. Provided only in response to a download request.
   * @return downloadUri
   */
  @javax.annotation.Nullable
  public String getDownloadUri() {
    return downloadUri;
  }

  public void setDownloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
  }


  public FileEntity isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * Is this folder locked and unable to be modified?
   * @return isLocked
   */
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public FileEntity md5(String md5) {
    this.md5 = md5;
    return this;
  }

  /**
   * File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.
   * @return md5
   */
  @javax.annotation.Nullable
  public String getMd5() {
    return md5;
  }

  public void setMd5(String md5) {
    this.md5 = md5;
  }


  public FileEntity mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * MIME Type.  This is determined by the filename extension and is not stored separately internally.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public FileEntity mtime(OffsetDateTime mtime) {
    this.mtime = mtime;
    return this;
  }

  /**
   * File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.
   * @return mtime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMtime() {
    return mtime;
  }

  public void setMtime(OffsetDateTime mtime) {
    this.mtime = mtime;
  }


  public FileEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * File/Folder path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public FileEntity permissions(String permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * A short string representing the current user&#39;s permissions.  Can be &#x60;r&#x60;,&#x60;w&#x60;,&#x60;d&#x60;, &#x60;l&#x60; or any combination
   * @return permissions
   */
  @javax.annotation.Nullable
  public String getPermissions() {
    return permissions;
  }

  public void setPermissions(String permissions) {
    this.permissions = permissions;
  }


  public FileEntity preview(PreviewEntity preview) {
    this.preview = preview;
    return this;
  }

  /**
   * Get preview
   * @return preview
   */
  @javax.annotation.Nullable
  public PreviewEntity getPreview() {
    return preview;
  }

  public void setPreview(PreviewEntity preview) {
    this.preview = preview;
  }


  public FileEntity previewId(Integer previewId) {
    this.previewId = previewId;
    return this;
  }

  /**
   * File preview ID
   * @return previewId
   */
  @javax.annotation.Nullable
  public Integer getPreviewId() {
    return previewId;
  }

  public void setPreviewId(Integer previewId) {
    this.previewId = previewId;
  }


  public FileEntity priorityColor(String priorityColor) {
    this.priorityColor = priorityColor;
    return this;
  }

  /**
   * Bookmark/priority color of file/folder
   * @return priorityColor
   */
  @javax.annotation.Nullable
  public String getPriorityColor() {
    return priorityColor;
  }

  public void setPriorityColor(String priorityColor) {
    this.priorityColor = priorityColor;
  }


  public FileEntity providedMtime(OffsetDateTime providedMtime) {
    this.providedMtime = providedMtime;
    return this;
  }

  /**
   * File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop&lt;-&gt;Cloud syncing to preserve modified at times.
   * @return providedMtime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProvidedMtime() {
    return providedMtime;
  }

  public void setProvidedMtime(OffsetDateTime providedMtime) {
    this.providedMtime = providedMtime;
  }


  public FileEntity region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Region location
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public FileEntity size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * File/Folder size
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public FileEntity subfoldersLockedQuestionMark(Boolean subfoldersLockedQuestionMark) {
    this.subfoldersLockedQuestionMark = subfoldersLockedQuestionMark;
    return this;
  }

  /**
   * Are subfolders locked and unable to be modified?
   * @return subfoldersLockedQuestionMark
   */
  @javax.annotation.Nullable
  public Boolean getSubfoldersLockedQuestionMark() {
    return subfoldersLockedQuestionMark;
  }

  public void setSubfoldersLockedQuestionMark(Boolean subfoldersLockedQuestionMark) {
    this.subfoldersLockedQuestionMark = subfoldersLockedQuestionMark;
  }


  public FileEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type: &#x60;directory&#x60; or &#x60;file&#x60;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileEntity fileEntity = (FileEntity) o;
    return Objects.equals(this.crc32, fileEntity.crc32) &&
        Objects.equals(this.createdAt, fileEntity.createdAt) &&
        Objects.equals(this.displayName, fileEntity.displayName) &&
        Objects.equals(this.downloadUri, fileEntity.downloadUri) &&
        Objects.equals(this.isLocked, fileEntity.isLocked) &&
        Objects.equals(this.md5, fileEntity.md5) &&
        Objects.equals(this.mimeType, fileEntity.mimeType) &&
        Objects.equals(this.mtime, fileEntity.mtime) &&
        Objects.equals(this.path, fileEntity.path) &&
        Objects.equals(this.permissions, fileEntity.permissions) &&
        Objects.equals(this.preview, fileEntity.preview) &&
        Objects.equals(this.previewId, fileEntity.previewId) &&
        Objects.equals(this.priorityColor, fileEntity.priorityColor) &&
        Objects.equals(this.providedMtime, fileEntity.providedMtime) &&
        Objects.equals(this.region, fileEntity.region) &&
        Objects.equals(this.size, fileEntity.size) &&
        Objects.equals(this.subfoldersLockedQuestionMark, fileEntity.subfoldersLockedQuestionMark) &&
        Objects.equals(this.type, fileEntity.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crc32, createdAt, displayName, downloadUri, isLocked, md5, mimeType, mtime, path, permissions, preview, previewId, priorityColor, providedMtime, region, size, subfoldersLockedQuestionMark, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileEntity {\n");
    sb.append("    crc32: ").append(toIndentedString(crc32)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    downloadUri: ").append(toIndentedString(downloadUri)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    mtime: ").append(toIndentedString(mtime)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    previewId: ").append(toIndentedString(previewId)).append("\n");
    sb.append("    priorityColor: ").append(toIndentedString(priorityColor)).append("\n");
    sb.append("    providedMtime: ").append(toIndentedString(providedMtime)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    subfoldersLockedQuestionMark: ").append(toIndentedString(subfoldersLockedQuestionMark)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crc32");
    openapiFields.add("created_at");
    openapiFields.add("display_name");
    openapiFields.add("download_uri");
    openapiFields.add("is_locked");
    openapiFields.add("md5");
    openapiFields.add("mime_type");
    openapiFields.add("mtime");
    openapiFields.add("path");
    openapiFields.add("permissions");
    openapiFields.add("preview");
    openapiFields.add("preview_id");
    openapiFields.add("priority_color");
    openapiFields.add("provided_mtime");
    openapiFields.add("region");
    openapiFields.add("size");
    openapiFields.add("subfolders_locked?");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileEntity is not found in the empty JSON string", FileEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("crc32") != null && !jsonObj.get("crc32").isJsonNull()) && !jsonObj.get("crc32").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crc32` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crc32").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("download_uri") != null && !jsonObj.get("download_uri").isJsonNull()) && !jsonObj.get("download_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_uri").toString()));
      }
      if ((jsonObj.get("md5") != null && !jsonObj.get("md5").isJsonNull()) && !jsonObj.get("md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("md5").toString()));
      }
      if ((jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonNull()) && !jsonObj.get("mime_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mime_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mime_type").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) && !jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      // validate the optional field `preview`
      if (jsonObj.get("preview") != null && !jsonObj.get("preview").isJsonNull()) {
        PreviewEntity.validateJsonElement(jsonObj.get("preview"));
      }
      if ((jsonObj.get("priority_color") != null && !jsonObj.get("priority_color").isJsonNull()) && !jsonObj.get("priority_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority_color").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<FileEntity>() {
           @Override
           public void write(JsonWriter out, FileEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileEntity
   * @throws IOException if the JSON string is invalid with respect to FileEntity
   */
  public static FileEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileEntity.class);
  }

  /**
   * Convert an instance of FileEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

