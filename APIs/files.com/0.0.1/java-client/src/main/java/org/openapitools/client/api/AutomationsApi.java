/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutomationEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AutomationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutomationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AutomationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAutomationsId
     * @param id Automation ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationsIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAutomationsIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAutomationsId(Async)");
        }

        return deleteAutomationsIdCall(id, _callback);

    }

    /**
     * Delete Automation
     * Delete Automation
     * @param id Automation ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAutomationsId(Integer id) throws ApiException {
        deleteAutomationsIdWithHttpInfo(id);
    }

    /**
     * Delete Automation
     * Delete Automation
     * @param id Automation ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAutomationsIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteAutomationsIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Automation (asynchronously)
     * Delete Automation
     * @param id Automation ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAutomationsIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAutomationsIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomations
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[automation]&#x3D;desc&#x60;). Valid fields are &#x60;automation&#x60;, &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;name&#x60;. (optional)
     * @param automation If set, return records where the specified field is equal to the supplied value. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;automation&#x60;. Valid field combinations are &#x60;[ automation, disabled ]&#x60; and &#x60;[ disabled, automation ]&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param withDeleted Set to true to include deleted automations in the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Automations objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationsCall(String cursor, Integer perPage, Object sortBy, String automation, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, Boolean withDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(sortBy));
        }

        if (automation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("automation", automation));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filter));
        }

        if (filterGt != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterGt));
        }

        if (filterGteq != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterGteq));
        }

        if (filterLt != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterLt));
        }

        if (filterLteq != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterLteq));
        }

        if (withDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_deleted", withDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationsValidateBeforeCall(String cursor, Integer perPage, Object sortBy, String automation, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, Boolean withDeleted, final ApiCallback _callback) throws ApiException {
        return getAutomationsCall(cursor, perPage, sortBy, automation, filter, filterGt, filterGteq, filterLt, filterLteq, withDeleted, _callback);

    }

    /**
     * List Automations
     * List Automations
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[automation]&#x3D;desc&#x60;). Valid fields are &#x60;automation&#x60;, &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;name&#x60;. (optional)
     * @param automation If set, return records where the specified field is equal to the supplied value. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;automation&#x60;. Valid field combinations are &#x60;[ automation, disabled ]&#x60; and &#x60;[ disabled, automation ]&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param withDeleted Set to true to include deleted automations in the results. (optional)
     * @return List&lt;AutomationEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Automations objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public List<AutomationEntity> getAutomations(String cursor, Integer perPage, Object sortBy, String automation, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, Boolean withDeleted) throws ApiException {
        ApiResponse<List<AutomationEntity>> localVarResp = getAutomationsWithHttpInfo(cursor, perPage, sortBy, automation, filter, filterGt, filterGteq, filterLt, filterLteq, withDeleted);
        return localVarResp.getData();
    }

    /**
     * List Automations
     * List Automations
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[automation]&#x3D;desc&#x60;). Valid fields are &#x60;automation&#x60;, &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;name&#x60;. (optional)
     * @param automation If set, return records where the specified field is equal to the supplied value. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;automation&#x60;. Valid field combinations are &#x60;[ automation, disabled ]&#x60; and &#x60;[ disabled, automation ]&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param withDeleted Set to true to include deleted automations in the results. (optional)
     * @return ApiResponse&lt;List&lt;AutomationEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Automations objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AutomationEntity>> getAutomationsWithHttpInfo(String cursor, Integer perPage, Object sortBy, String automation, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, Boolean withDeleted) throws ApiException {
        okhttp3.Call localVarCall = getAutomationsValidateBeforeCall(cursor, perPage, sortBy, automation, filter, filterGt, filterGteq, filterLt, filterLteq, withDeleted, null);
        Type localVarReturnType = new TypeToken<List<AutomationEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Automations (asynchronously)
     * List Automations
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[automation]&#x3D;desc&#x60;). Valid fields are &#x60;automation&#x60;, &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;name&#x60;. (optional)
     * @param automation If set, return records where the specified field is equal to the supplied value. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;disabled&#x60;, &#x60;last_modified_at&#x60; or &#x60;automation&#x60;. Valid field combinations are &#x60;[ automation, disabled ]&#x60; and &#x60;[ disabled, automation ]&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;last_modified_at&#x60;. (optional)
     * @param withDeleted Set to true to include deleted automations in the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Automations objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationsAsync(String cursor, Integer perPage, Object sortBy, String automation, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, Boolean withDeleted, final ApiCallback<List<AutomationEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationsValidateBeforeCall(cursor, perPage, sortBy, automation, filter, filterGt, filterGteq, filterLt, filterLteq, withDeleted, _callback);
        Type localVarReturnType = new TypeToken<List<AutomationEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAutomationsId
     * @param id Automation ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationsIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomationsIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAutomationsId(Async)");
        }

        return getAutomationsIdCall(id, _callback);

    }

    /**
     * Show Automation
     * Show Automation
     * @param id Automation ID. (required)
     * @return AutomationEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AutomationEntity getAutomationsId(Integer id) throws ApiException {
        ApiResponse<AutomationEntity> localVarResp = getAutomationsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Show Automation
     * Show Automation
     * @param id Automation ID. (required)
     * @return ApiResponse&lt;AutomationEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutomationEntity> getAutomationsIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getAutomationsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AutomationEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show Automation (asynchronously)
     * Show Automation
     * @param id Automation ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomationsIdAsync(Integer id, final ApiCallback<AutomationEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomationsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AutomationEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchAutomationsId
     * @param id Automation ID. (required)
     * @param automation Automation type (optional)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAutomationsIdCall(Integer id, String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (automation != null) {
            localVarFormParams.put("automation", automation);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (destination != null) {
            localVarFormParams.put("destination", destination);
        }

        if (destinationReplaceFrom != null) {
            localVarFormParams.put("destination_replace_from", destinationReplaceFrom);
        }

        if (destinationReplaceTo != null) {
            localVarFormParams.put("destination_replace_to", destinationReplaceTo);
        }

        if (destinations != null) {
            localVarFormParams.put("destinations", destinations);
        }

        if (disabled != null) {
            localVarFormParams.put("disabled", disabled);
        }

        if (groupIds != null) {
            localVarFormParams.put("group_ids", groupIds);
        }

        if (interval != null) {
            localVarFormParams.put("interval", interval);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        if (recurringDay != null) {
            localVarFormParams.put("recurring_day", recurringDay);
        }

        if (schedule != null) {
            localVarFormParams.put("schedule", schedule);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        if (syncIds != null) {
            localVarFormParams.put("sync_ids", syncIds);
        }

        if (trigger != null) {
            localVarFormParams.put("trigger", trigger);
        }

        if (triggerActions != null) {
            localVarFormParams.put("trigger_actions", triggerActions);
        }

        if (userIds != null) {
            localVarFormParams.put("user_ids", userIds);
        }

        if (value != null) {
            localVarFormParams.put("value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchAutomationsIdValidateBeforeCall(Integer id, String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchAutomationsId(Async)");
        }

        return patchAutomationsIdCall(id, automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value, _callback);

    }

    /**
     * Update Automation
     * Update Automation
     * @param id Automation ID. (required)
     * @param automation Automation type (optional)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @return AutomationEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AutomationEntity patchAutomationsId(Integer id, String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value) throws ApiException {
        ApiResponse<AutomationEntity> localVarResp = patchAutomationsIdWithHttpInfo(id, automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value);
        return localVarResp.getData();
    }

    /**
     * Update Automation
     * Update Automation
     * @param id Automation ID. (required)
     * @param automation Automation type (optional)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @return ApiResponse&lt;AutomationEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutomationEntity> patchAutomationsIdWithHttpInfo(Integer id, String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value) throws ApiException {
        okhttp3.Call localVarCall = patchAutomationsIdValidateBeforeCall(id, automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value, null);
        Type localVarReturnType = new TypeToken<AutomationEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Automation (asynchronously)
     * Update Automation
     * @param id Automation ID. (required)
     * @param automation Automation type (optional)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchAutomationsIdAsync(Integer id, String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value, final ApiCallback<AutomationEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchAutomationsIdValidateBeforeCall(id, automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value, _callback);
        Type localVarReturnType = new TypeToken<AutomationEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postAutomations
     * @param automation Automation type (required)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAutomationsCall(String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/automations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (automation != null) {
            localVarFormParams.put("automation", automation);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (destination != null) {
            localVarFormParams.put("destination", destination);
        }

        if (destinationReplaceFrom != null) {
            localVarFormParams.put("destination_replace_from", destinationReplaceFrom);
        }

        if (destinationReplaceTo != null) {
            localVarFormParams.put("destination_replace_to", destinationReplaceTo);
        }

        if (destinations != null) {
            localVarFormParams.put("destinations", destinations);
        }

        if (disabled != null) {
            localVarFormParams.put("disabled", disabled);
        }

        if (groupIds != null) {
            localVarFormParams.put("group_ids", groupIds);
        }

        if (interval != null) {
            localVarFormParams.put("interval", interval);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        if (recurringDay != null) {
            localVarFormParams.put("recurring_day", recurringDay);
        }

        if (schedule != null) {
            localVarFormParams.put("schedule", schedule);
        }

        if (source != null) {
            localVarFormParams.put("source", source);
        }

        if (syncIds != null) {
            localVarFormParams.put("sync_ids", syncIds);
        }

        if (trigger != null) {
            localVarFormParams.put("trigger", trigger);
        }

        if (triggerActions != null) {
            localVarFormParams.put("trigger_actions", triggerActions);
        }

        if (userIds != null) {
            localVarFormParams.put("user_ids", userIds);
        }

        if (value != null) {
            localVarFormParams.put("value", value);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postAutomationsValidateBeforeCall(String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'automation' is set
        if (automation == null) {
            throw new ApiException("Missing the required parameter 'automation' when calling postAutomations(Async)");
        }

        return postAutomationsCall(automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value, _callback);

    }

    /**
     * Create Automation
     * Create Automation
     * @param automation Automation type (required)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @return AutomationEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AutomationEntity postAutomations(String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value) throws ApiException {
        ApiResponse<AutomationEntity> localVarResp = postAutomationsWithHttpInfo(automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value);
        return localVarResp.getData();
    }

    /**
     * Create Automation
     * Create Automation
     * @param automation Automation type (required)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @return ApiResponse&lt;AutomationEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutomationEntity> postAutomationsWithHttpInfo(String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value) throws ApiException {
        okhttp3.Call localVarCall = postAutomationsValidateBeforeCall(automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value, null);
        Type localVarReturnType = new TypeToken<AutomationEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Automation (asynchronously)
     * Create Automation
     * @param automation Automation type (required)
     * @param description Description for the this Automation. (optional)
     * @param destination DEPRECATED: Destination Path. Use &#x60;destinations&#x60; instead. (optional)
     * @param destinationReplaceFrom If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;. (optional)
     * @param destinationReplaceTo If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here. (optional)
     * @param destinations A list of String destination paths or Hash of folder_path and optional file_path. (optional)
     * @param disabled If true, this automation will not run. (optional)
     * @param groupIds A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param interval How often to run this automation? One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60; (optional)
     * @param name Name for this automation. (optional)
     * @param path Path on which this Automation runs.  Supports globs. (optional)
     * @param recurringDay If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;. (optional)
     * @param schedule Custom schedule for running this automation. (optional)
     * @param source Source Path (optional)
     * @param syncIds A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param trigger How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;. (optional)
     * @param triggerActions If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy (optional)
     * @param userIds A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited. (optional)
     * @param value A Hash of attributes specific to the automation type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Automations object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAutomationsAsync(String automation, String description, String destination, String destinationReplaceFrom, String destinationReplaceTo, List<String> destinations, Boolean disabled, String groupIds, String interval, String name, String path, Integer recurringDay, Object schedule, String source, String syncIds, String trigger, List<String> triggerActions, String userIds, Object value, final ApiCallback<AutomationEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postAutomationsValidateBeforeCall(automation, description, destination, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, interval, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userIds, value, _callback);
        Type localVarReturnType = new TypeToken<AutomationEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
