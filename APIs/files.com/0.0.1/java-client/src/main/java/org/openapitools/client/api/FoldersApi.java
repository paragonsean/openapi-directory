/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FileEntity;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FoldersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for folderListForPath
     * @param path Path to operate on. (required)
     * @param cursor Send cursor to resume an existing list from the point at which you left off.  Get a cursor from an existing list via the X-Files-Cursor-Next header or the X-Files-Cursor-Prev header. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param filter If specified, will filter folders/files list by this string.  Wildcards of &#x60;*&#x60; and &#x60;?&#x60; are acceptable here. (optional)
     * @param previewSize Request a preview size.  Can be &#x60;small&#x60; (default), &#x60;large&#x60;, &#x60;xlarge&#x60;, or &#x60;pdf&#x60;. (optional)
     * @param sortBy Search by field and direction. Valid fields are &#x60;path&#x60;, &#x60;size&#x60;, &#x60;modified_at_datetime&#x60;, &#x60;provided_modified_at&#x60;.  Valid directions are &#x60;asc&#x60; and &#x60;desc&#x60;.  Defaults to &#x60;{\&quot;path\&quot;:\&quot;asc\&quot;}&#x60;. (optional)
     * @param search If &#x60;search_all&#x60; is &#x60;true&#x60;, provide the search string here.  Otherwise, this parameter acts like an alias of &#x60;filter&#x60;. (optional)
     * @param searchAll Search entire site?  If set, we will ignore the folder path provided and search the entire site.  This is the same API used by the search bar in the UI.  Search results are a best effort, not real time, and not guaranteed to match every file.  This field should only be used for ad-hoc (human) searching, and not as part of an automated process. (optional)
     * @param withPreviews Include file previews? (optional)
     * @param withPriorityColor Include file priority color information? (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Folders objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call folderListForPathCall(String path, String cursor, Integer perPage, String filter, String previewSize, Object sortBy, String search, Boolean searchAll, Boolean withPreviews, Boolean withPriorityColor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (previewSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preview_size", previewSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(sortBy));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (searchAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_all", searchAll));
        }

        if (withPreviews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_previews", withPreviews));
        }

        if (withPriorityColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_priority_color", withPriorityColor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call folderListForPathValidateBeforeCall(String path, String cursor, Integer perPage, String filter, String previewSize, Object sortBy, String search, Boolean searchAll, Boolean withPreviews, Boolean withPriorityColor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling folderListForPath(Async)");
        }

        return folderListForPathCall(path, cursor, perPage, filter, previewSize, sortBy, search, searchAll, withPreviews, withPriorityColor, _callback);

    }

    /**
     * List Folders by path
     * List Folders by path
     * @param path Path to operate on. (required)
     * @param cursor Send cursor to resume an existing list from the point at which you left off.  Get a cursor from an existing list via the X-Files-Cursor-Next header or the X-Files-Cursor-Prev header. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param filter If specified, will filter folders/files list by this string.  Wildcards of &#x60;*&#x60; and &#x60;?&#x60; are acceptable here. (optional)
     * @param previewSize Request a preview size.  Can be &#x60;small&#x60; (default), &#x60;large&#x60;, &#x60;xlarge&#x60;, or &#x60;pdf&#x60;. (optional)
     * @param sortBy Search by field and direction. Valid fields are &#x60;path&#x60;, &#x60;size&#x60;, &#x60;modified_at_datetime&#x60;, &#x60;provided_modified_at&#x60;.  Valid directions are &#x60;asc&#x60; and &#x60;desc&#x60;.  Defaults to &#x60;{\&quot;path\&quot;:\&quot;asc\&quot;}&#x60;. (optional)
     * @param search If &#x60;search_all&#x60; is &#x60;true&#x60;, provide the search string here.  Otherwise, this parameter acts like an alias of &#x60;filter&#x60;. (optional)
     * @param searchAll Search entire site?  If set, we will ignore the folder path provided and search the entire site.  This is the same API used by the search bar in the UI.  Search results are a best effort, not real time, and not guaranteed to match every file.  This field should only be used for ad-hoc (human) searching, and not as part of an automated process. (optional)
     * @param withPreviews Include file previews? (optional)
     * @param withPriorityColor Include file priority color information? (optional)
     * @return List&lt;FileEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Folders objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public List<FileEntity> folderListForPath(String path, String cursor, Integer perPage, String filter, String previewSize, Object sortBy, String search, Boolean searchAll, Boolean withPreviews, Boolean withPriorityColor) throws ApiException {
        ApiResponse<List<FileEntity>> localVarResp = folderListForPathWithHttpInfo(path, cursor, perPage, filter, previewSize, sortBy, search, searchAll, withPreviews, withPriorityColor);
        return localVarResp.getData();
    }

    /**
     * List Folders by path
     * List Folders by path
     * @param path Path to operate on. (required)
     * @param cursor Send cursor to resume an existing list from the point at which you left off.  Get a cursor from an existing list via the X-Files-Cursor-Next header or the X-Files-Cursor-Prev header. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param filter If specified, will filter folders/files list by this string.  Wildcards of &#x60;*&#x60; and &#x60;?&#x60; are acceptable here. (optional)
     * @param previewSize Request a preview size.  Can be &#x60;small&#x60; (default), &#x60;large&#x60;, &#x60;xlarge&#x60;, or &#x60;pdf&#x60;. (optional)
     * @param sortBy Search by field and direction. Valid fields are &#x60;path&#x60;, &#x60;size&#x60;, &#x60;modified_at_datetime&#x60;, &#x60;provided_modified_at&#x60;.  Valid directions are &#x60;asc&#x60; and &#x60;desc&#x60;.  Defaults to &#x60;{\&quot;path\&quot;:\&quot;asc\&quot;}&#x60;. (optional)
     * @param search If &#x60;search_all&#x60; is &#x60;true&#x60;, provide the search string here.  Otherwise, this parameter acts like an alias of &#x60;filter&#x60;. (optional)
     * @param searchAll Search entire site?  If set, we will ignore the folder path provided and search the entire site.  This is the same API used by the search bar in the UI.  Search results are a best effort, not real time, and not guaranteed to match every file.  This field should only be used for ad-hoc (human) searching, and not as part of an automated process. (optional)
     * @param withPreviews Include file previews? (optional)
     * @param withPriorityColor Include file priority color information? (optional)
     * @return ApiResponse&lt;List&lt;FileEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Folders objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FileEntity>> folderListForPathWithHttpInfo(String path, String cursor, Integer perPage, String filter, String previewSize, Object sortBy, String search, Boolean searchAll, Boolean withPreviews, Boolean withPriorityColor) throws ApiException {
        okhttp3.Call localVarCall = folderListForPathValidateBeforeCall(path, cursor, perPage, filter, previewSize, sortBy, search, searchAll, withPreviews, withPriorityColor, null);
        Type localVarReturnType = new TypeToken<List<FileEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Folders by path (asynchronously)
     * List Folders by path
     * @param path Path to operate on. (required)
     * @param cursor Send cursor to resume an existing list from the point at which you left off.  Get a cursor from an existing list via the X-Files-Cursor-Next header or the X-Files-Cursor-Prev header. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param filter If specified, will filter folders/files list by this string.  Wildcards of &#x60;*&#x60; and &#x60;?&#x60; are acceptable here. (optional)
     * @param previewSize Request a preview size.  Can be &#x60;small&#x60; (default), &#x60;large&#x60;, &#x60;xlarge&#x60;, or &#x60;pdf&#x60;. (optional)
     * @param sortBy Search by field and direction. Valid fields are &#x60;path&#x60;, &#x60;size&#x60;, &#x60;modified_at_datetime&#x60;, &#x60;provided_modified_at&#x60;.  Valid directions are &#x60;asc&#x60; and &#x60;desc&#x60;.  Defaults to &#x60;{\&quot;path\&quot;:\&quot;asc\&quot;}&#x60;. (optional)
     * @param search If &#x60;search_all&#x60; is &#x60;true&#x60;, provide the search string here.  Otherwise, this parameter acts like an alias of &#x60;filter&#x60;. (optional)
     * @param searchAll Search entire site?  If set, we will ignore the folder path provided and search the entire site.  This is the same API used by the search bar in the UI.  Search results are a best effort, not real time, and not guaranteed to match every file.  This field should only be used for ad-hoc (human) searching, and not as part of an automated process. (optional)
     * @param withPreviews Include file previews? (optional)
     * @param withPriorityColor Include file priority color information? (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Folders objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call folderListForPathAsync(String path, String cursor, Integer perPage, String filter, String previewSize, Object sortBy, String search, Boolean searchAll, Boolean withPreviews, Boolean withPriorityColor, final ApiCallback<List<FileEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = folderListForPathValidateBeforeCall(path, cursor, perPage, filter, previewSize, sortBy, search, searchAll, withPreviews, withPriorityColor, _callback);
        Type localVarReturnType = new TypeToken<List<FileEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postFoldersPath
     * @param path Path to operate on. (required)
     * @param mkdirParents Create parent directories if they do not exist? (optional)
     * @param providedMtime User provided modification time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Folders object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFoldersPathCall(String path, Boolean mkdirParents, OffsetDateTime providedMtime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/folders/{path}"
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mkdirParents != null) {
            localVarFormParams.put("mkdir_parents", mkdirParents);
        }

        if (providedMtime != null) {
            localVarFormParams.put("provided_mtime", providedMtime);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postFoldersPathValidateBeforeCall(String path, Boolean mkdirParents, OffsetDateTime providedMtime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling postFoldersPath(Async)");
        }

        return postFoldersPathCall(path, mkdirParents, providedMtime, _callback);

    }

    /**
     * Create folder
     * Create folder
     * @param path Path to operate on. (required)
     * @param mkdirParents Create parent directories if they do not exist? (optional)
     * @param providedMtime User provided modification time. (optional)
     * @return FileEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Folders object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public FileEntity postFoldersPath(String path, Boolean mkdirParents, OffsetDateTime providedMtime) throws ApiException {
        ApiResponse<FileEntity> localVarResp = postFoldersPathWithHttpInfo(path, mkdirParents, providedMtime);
        return localVarResp.getData();
    }

    /**
     * Create folder
     * Create folder
     * @param path Path to operate on. (required)
     * @param mkdirParents Create parent directories if they do not exist? (optional)
     * @param providedMtime User provided modification time. (optional)
     * @return ApiResponse&lt;FileEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Folders object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileEntity> postFoldersPathWithHttpInfo(String path, Boolean mkdirParents, OffsetDateTime providedMtime) throws ApiException {
        okhttp3.Call localVarCall = postFoldersPathValidateBeforeCall(path, mkdirParents, providedMtime, null);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create folder (asynchronously)
     * Create folder
     * @param path Path to operate on. (required)
     * @param mkdirParents Create parent directories if they do not exist? (optional)
     * @param providedMtime User provided modification time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Folders object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postFoldersPathAsync(String path, Boolean mkdirParents, OffsetDateTime providedMtime, final ApiCallback<FileEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postFoldersPathValidateBeforeCall(path, mkdirParents, providedMtime, _callback);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
