/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create Clickwrap
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClickwrapEntity {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Use this Clickwrap for Bundles?
   */
  @JsonAdapter(UseWithBundlesEnum.Adapter.class)
  public enum UseWithBundlesEnum {
    NONE("none"),
    
    AVAILABLE("available"),
    
    REQUIRE("require");

    private String value;

    UseWithBundlesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UseWithBundlesEnum fromValue(String value) {
      for (UseWithBundlesEnum b : UseWithBundlesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UseWithBundlesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UseWithBundlesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UseWithBundlesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UseWithBundlesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UseWithBundlesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USE_WITH_BUNDLES = "use_with_bundles";
  @SerializedName(SERIALIZED_NAME_USE_WITH_BUNDLES)
  private UseWithBundlesEnum useWithBundles;

  /**
   * Use this Clickwrap for Inboxes?
   */
  @JsonAdapter(UseWithInboxesEnum.Adapter.class)
  public enum UseWithInboxesEnum {
    NONE("none"),
    
    AVAILABLE("available"),
    
    REQUIRE("require");

    private String value;

    UseWithInboxesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UseWithInboxesEnum fromValue(String value) {
      for (UseWithInboxesEnum b : UseWithInboxesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UseWithInboxesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UseWithInboxesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UseWithInboxesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UseWithInboxesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UseWithInboxesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USE_WITH_INBOXES = "use_with_inboxes";
  @SerializedName(SERIALIZED_NAME_USE_WITH_INBOXES)
  private UseWithInboxesEnum useWithInboxes;

  /**
   * Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.
   */
  @JsonAdapter(UseWithUsersEnum.Adapter.class)
  public enum UseWithUsersEnum {
    NONE("none"),
    
    REQUIRE("require");

    private String value;

    UseWithUsersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UseWithUsersEnum fromValue(String value) {
      for (UseWithUsersEnum b : UseWithUsersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UseWithUsersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UseWithUsersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UseWithUsersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UseWithUsersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UseWithUsersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USE_WITH_USERS = "use_with_users";
  @SerializedName(SERIALIZED_NAME_USE_WITH_USERS)
  private UseWithUsersEnum useWithUsers;

  public ClickwrapEntity() {
  }

  public ClickwrapEntity body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Body text of Clickwrap (supports Markdown formatting).
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public ClickwrapEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Clickwrap ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ClickwrapEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ClickwrapEntity useWithBundles(UseWithBundlesEnum useWithBundles) {
    this.useWithBundles = useWithBundles;
    return this;
  }

  /**
   * Use this Clickwrap for Bundles?
   * @return useWithBundles
   */
  @javax.annotation.Nullable
  public UseWithBundlesEnum getUseWithBundles() {
    return useWithBundles;
  }

  public void setUseWithBundles(UseWithBundlesEnum useWithBundles) {
    this.useWithBundles = useWithBundles;
  }


  public ClickwrapEntity useWithInboxes(UseWithInboxesEnum useWithInboxes) {
    this.useWithInboxes = useWithInboxes;
    return this;
  }

  /**
   * Use this Clickwrap for Inboxes?
   * @return useWithInboxes
   */
  @javax.annotation.Nullable
  public UseWithInboxesEnum getUseWithInboxes() {
    return useWithInboxes;
  }

  public void setUseWithInboxes(UseWithInboxesEnum useWithInboxes) {
    this.useWithInboxes = useWithInboxes;
  }


  public ClickwrapEntity useWithUsers(UseWithUsersEnum useWithUsers) {
    this.useWithUsers = useWithUsers;
    return this;
  }

  /**
   * Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.
   * @return useWithUsers
   */
  @javax.annotation.Nullable
  public UseWithUsersEnum getUseWithUsers() {
    return useWithUsers;
  }

  public void setUseWithUsers(UseWithUsersEnum useWithUsers) {
    this.useWithUsers = useWithUsers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClickwrapEntity clickwrapEntity = (ClickwrapEntity) o;
    return Objects.equals(this.body, clickwrapEntity.body) &&
        Objects.equals(this.id, clickwrapEntity.id) &&
        Objects.equals(this.name, clickwrapEntity.name) &&
        Objects.equals(this.useWithBundles, clickwrapEntity.useWithBundles) &&
        Objects.equals(this.useWithInboxes, clickwrapEntity.useWithInboxes) &&
        Objects.equals(this.useWithUsers, clickwrapEntity.useWithUsers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, id, name, useWithBundles, useWithInboxes, useWithUsers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClickwrapEntity {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    useWithBundles: ").append(toIndentedString(useWithBundles)).append("\n");
    sb.append("    useWithInboxes: ").append(toIndentedString(useWithInboxes)).append("\n");
    sb.append("    useWithUsers: ").append(toIndentedString(useWithUsers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("use_with_bundles");
    openapiFields.add("use_with_inboxes");
    openapiFields.add("use_with_users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClickwrapEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClickwrapEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClickwrapEntity is not found in the empty JSON string", ClickwrapEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClickwrapEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClickwrapEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("use_with_bundles") != null && !jsonObj.get("use_with_bundles").isJsonNull()) && !jsonObj.get("use_with_bundles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use_with_bundles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use_with_bundles").toString()));
      }
      // validate the optional field `use_with_bundles`
      if (jsonObj.get("use_with_bundles") != null && !jsonObj.get("use_with_bundles").isJsonNull()) {
        UseWithBundlesEnum.validateJsonElement(jsonObj.get("use_with_bundles"));
      }
      if ((jsonObj.get("use_with_inboxes") != null && !jsonObj.get("use_with_inboxes").isJsonNull()) && !jsonObj.get("use_with_inboxes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use_with_inboxes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use_with_inboxes").toString()));
      }
      // validate the optional field `use_with_inboxes`
      if (jsonObj.get("use_with_inboxes") != null && !jsonObj.get("use_with_inboxes").isJsonNull()) {
        UseWithInboxesEnum.validateJsonElement(jsonObj.get("use_with_inboxes"));
      }
      if ((jsonObj.get("use_with_users") != null && !jsonObj.get("use_with_users").isJsonNull()) && !jsonObj.get("use_with_users").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use_with_users` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use_with_users").toString()));
      }
      // validate the optional field `use_with_users`
      if (jsonObj.get("use_with_users") != null && !jsonObj.get("use_with_users").isJsonNull()) {
        UseWithUsersEnum.validateJsonElement(jsonObj.get("use_with_users"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClickwrapEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClickwrapEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClickwrapEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClickwrapEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ClickwrapEntity>() {
           @Override
           public void write(JsonWriter out, ClickwrapEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClickwrapEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClickwrapEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClickwrapEntity
   * @throws IOException if the JSON string is invalid with respect to ClickwrapEntity
   */
  public static ClickwrapEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClickwrapEntity.class);
  }

  /**
   * Convert an instance of ClickwrapEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

