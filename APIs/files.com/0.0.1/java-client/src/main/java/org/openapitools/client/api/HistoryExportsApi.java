/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HistoryExportEntity;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HistoryExportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HistoryExportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HistoryExportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getHistoryExportsId
     * @param id History Export ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoryExportsIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/history_exports/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryExportsIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHistoryExportsId(Async)");
        }

        return getHistoryExportsIdCall(id, _callback);

    }

    /**
     * Show History Export
     * Show History Export
     * @param id History Export ID. (required)
     * @return HistoryExportEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public HistoryExportEntity getHistoryExportsId(Integer id) throws ApiException {
        ApiResponse<HistoryExportEntity> localVarResp = getHistoryExportsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Show History Export
     * Show History Export
     * @param id History Export ID. (required)
     * @return ApiResponse&lt;HistoryExportEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryExportEntity> getHistoryExportsIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getHistoryExportsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<HistoryExportEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show History Export (asynchronously)
     * Show History Export
     * @param id History Export ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHistoryExportsIdAsync(Integer id, final ApiCallback<HistoryExportEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryExportsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<HistoryExportEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postHistoryExports
     * @param endAt End date/time of export range. (optional)
     * @param queryAction Filter results by this this action type. Valid values: &#x60;create&#x60;, &#x60;read&#x60;, &#x60;update&#x60;, &#x60;destroy&#x60;, &#x60;move&#x60;, &#x60;login&#x60;, &#x60;failedlogin&#x60;, &#x60;copy&#x60;, &#x60;user_create&#x60;, &#x60;user_update&#x60;, &#x60;user_destroy&#x60;, &#x60;group_create&#x60;, &#x60;group_update&#x60;, &#x60;group_destroy&#x60;, &#x60;permission_create&#x60;, &#x60;permission_destroy&#x60;, &#x60;api_key_create&#x60;, &#x60;api_key_update&#x60;, &#x60;api_key_destroy&#x60; (optional)
     * @param queryDestination Return results that are file moves with this path as destination. (optional)
     * @param queryFailureType If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: &#x60;expired_trial&#x60;, &#x60;account_overdue&#x60;, &#x60;locked_out&#x60;, &#x60;ip_mismatch&#x60;, &#x60;password_mismatch&#x60;, &#x60;site_mismatch&#x60;, &#x60;username_not_found&#x60;, &#x60;none&#x60;, &#x60;no_ftp_permission&#x60;, &#x60;no_web_permission&#x60;, &#x60;no_directory&#x60;, &#x60;errno_enoent&#x60;, &#x60;no_sftp_permission&#x60;, &#x60;no_dav_permission&#x60;, &#x60;no_restapi_permission&#x60;, &#x60;key_mismatch&#x60;, &#x60;region_mismatch&#x60;, &#x60;expired_access&#x60;, &#x60;desktop_ip_mismatch&#x60;, &#x60;desktop_api_key_not_used_quickly_enough&#x60;, &#x60;disabled&#x60;, &#x60;country_mismatch&#x60; (optional)
     * @param queryFileId Return results that are file actions related to the file indicated by this File ID (optional)
     * @param queryFolder Return results that are file actions related to files or folders inside this folder path. (optional)
     * @param queryInterface Filter results by this this interface type. Valid values: &#x60;web&#x60;, &#x60;ftp&#x60;, &#x60;robot&#x60;, &#x60;jsapi&#x60;, &#x60;webdesktopapi&#x60;, &#x60;sftp&#x60;, &#x60;dav&#x60;, &#x60;desktop&#x60;, &#x60;restapi&#x60;, &#x60;scim&#x60;, &#x60;office&#x60;, &#x60;mobile&#x60;, &#x60;as2&#x60;, &#x60;inbound_email&#x60;, &#x60;remote&#x60; (optional)
     * @param queryIp Filter results by this IP address. (optional)
     * @param queryParentId Return results that are file actions inside the parent folder specified by this folder ID (optional)
     * @param queryPath Return results that are file actions related to this path. (optional)
     * @param querySrc Return results that are file moves originating from this path. (optional)
     * @param queryTargetId If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID. (optional)
     * @param queryTargetName If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username. (optional)
     * @param queryTargetPermission If searching for Histories about Permisisons, this parameter restricts results to permissions of this level. (optional)
     * @param queryTargetPermissionSet If searching for Histories about API keys, this parameter restricts results to API keys with this permission set. (optional)
     * @param queryTargetPlatform If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform. (optional)
     * @param queryTargetUserId If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID. (optional)
     * @param queryTargetUsername If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username. (optional)
     * @param queryUserId Return results that are actions performed by the user indiciated by this User ID (optional)
     * @param queryUsername Filter results by this username. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postHistoryExportsCall(OffsetDateTime endAt, String queryAction, String queryDestination, String queryFailureType, String queryFileId, String queryFolder, String queryInterface, String queryIp, String queryParentId, String queryPath, String querySrc, String queryTargetId, String queryTargetName, String queryTargetPermission, String queryTargetPermissionSet, String queryTargetPlatform, String queryTargetUserId, String queryTargetUsername, String queryUserId, String queryUsername, OffsetDateTime startAt, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/history_exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endAt != null) {
            localVarFormParams.put("end_at", endAt);
        }

        if (queryAction != null) {
            localVarFormParams.put("query_action", queryAction);
        }

        if (queryDestination != null) {
            localVarFormParams.put("query_destination", queryDestination);
        }

        if (queryFailureType != null) {
            localVarFormParams.put("query_failure_type", queryFailureType);
        }

        if (queryFileId != null) {
            localVarFormParams.put("query_file_id", queryFileId);
        }

        if (queryFolder != null) {
            localVarFormParams.put("query_folder", queryFolder);
        }

        if (queryInterface != null) {
            localVarFormParams.put("query_interface", queryInterface);
        }

        if (queryIp != null) {
            localVarFormParams.put("query_ip", queryIp);
        }

        if (queryParentId != null) {
            localVarFormParams.put("query_parent_id", queryParentId);
        }

        if (queryPath != null) {
            localVarFormParams.put("query_path", queryPath);
        }

        if (querySrc != null) {
            localVarFormParams.put("query_src", querySrc);
        }

        if (queryTargetId != null) {
            localVarFormParams.put("query_target_id", queryTargetId);
        }

        if (queryTargetName != null) {
            localVarFormParams.put("query_target_name", queryTargetName);
        }

        if (queryTargetPermission != null) {
            localVarFormParams.put("query_target_permission", queryTargetPermission);
        }

        if (queryTargetPermissionSet != null) {
            localVarFormParams.put("query_target_permission_set", queryTargetPermissionSet);
        }

        if (queryTargetPlatform != null) {
            localVarFormParams.put("query_target_platform", queryTargetPlatform);
        }

        if (queryTargetUserId != null) {
            localVarFormParams.put("query_target_user_id", queryTargetUserId);
        }

        if (queryTargetUsername != null) {
            localVarFormParams.put("query_target_username", queryTargetUsername);
        }

        if (queryUserId != null) {
            localVarFormParams.put("query_user_id", queryUserId);
        }

        if (queryUsername != null) {
            localVarFormParams.put("query_username", queryUsername);
        }

        if (startAt != null) {
            localVarFormParams.put("start_at", startAt);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postHistoryExportsValidateBeforeCall(OffsetDateTime endAt, String queryAction, String queryDestination, String queryFailureType, String queryFileId, String queryFolder, String queryInterface, String queryIp, String queryParentId, String queryPath, String querySrc, String queryTargetId, String queryTargetName, String queryTargetPermission, String queryTargetPermissionSet, String queryTargetPlatform, String queryTargetUserId, String queryTargetUsername, String queryUserId, String queryUsername, OffsetDateTime startAt, Integer userId, final ApiCallback _callback) throws ApiException {
        return postHistoryExportsCall(endAt, queryAction, queryDestination, queryFailureType, queryFileId, queryFolder, queryInterface, queryIp, queryParentId, queryPath, querySrc, queryTargetId, queryTargetName, queryTargetPermission, queryTargetPermissionSet, queryTargetPlatform, queryTargetUserId, queryTargetUsername, queryUserId, queryUsername, startAt, userId, _callback);

    }

    /**
     * Create History Export
     * Create History Export
     * @param endAt End date/time of export range. (optional)
     * @param queryAction Filter results by this this action type. Valid values: &#x60;create&#x60;, &#x60;read&#x60;, &#x60;update&#x60;, &#x60;destroy&#x60;, &#x60;move&#x60;, &#x60;login&#x60;, &#x60;failedlogin&#x60;, &#x60;copy&#x60;, &#x60;user_create&#x60;, &#x60;user_update&#x60;, &#x60;user_destroy&#x60;, &#x60;group_create&#x60;, &#x60;group_update&#x60;, &#x60;group_destroy&#x60;, &#x60;permission_create&#x60;, &#x60;permission_destroy&#x60;, &#x60;api_key_create&#x60;, &#x60;api_key_update&#x60;, &#x60;api_key_destroy&#x60; (optional)
     * @param queryDestination Return results that are file moves with this path as destination. (optional)
     * @param queryFailureType If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: &#x60;expired_trial&#x60;, &#x60;account_overdue&#x60;, &#x60;locked_out&#x60;, &#x60;ip_mismatch&#x60;, &#x60;password_mismatch&#x60;, &#x60;site_mismatch&#x60;, &#x60;username_not_found&#x60;, &#x60;none&#x60;, &#x60;no_ftp_permission&#x60;, &#x60;no_web_permission&#x60;, &#x60;no_directory&#x60;, &#x60;errno_enoent&#x60;, &#x60;no_sftp_permission&#x60;, &#x60;no_dav_permission&#x60;, &#x60;no_restapi_permission&#x60;, &#x60;key_mismatch&#x60;, &#x60;region_mismatch&#x60;, &#x60;expired_access&#x60;, &#x60;desktop_ip_mismatch&#x60;, &#x60;desktop_api_key_not_used_quickly_enough&#x60;, &#x60;disabled&#x60;, &#x60;country_mismatch&#x60; (optional)
     * @param queryFileId Return results that are file actions related to the file indicated by this File ID (optional)
     * @param queryFolder Return results that are file actions related to files or folders inside this folder path. (optional)
     * @param queryInterface Filter results by this this interface type. Valid values: &#x60;web&#x60;, &#x60;ftp&#x60;, &#x60;robot&#x60;, &#x60;jsapi&#x60;, &#x60;webdesktopapi&#x60;, &#x60;sftp&#x60;, &#x60;dav&#x60;, &#x60;desktop&#x60;, &#x60;restapi&#x60;, &#x60;scim&#x60;, &#x60;office&#x60;, &#x60;mobile&#x60;, &#x60;as2&#x60;, &#x60;inbound_email&#x60;, &#x60;remote&#x60; (optional)
     * @param queryIp Filter results by this IP address. (optional)
     * @param queryParentId Return results that are file actions inside the parent folder specified by this folder ID (optional)
     * @param queryPath Return results that are file actions related to this path. (optional)
     * @param querySrc Return results that are file moves originating from this path. (optional)
     * @param queryTargetId If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID. (optional)
     * @param queryTargetName If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username. (optional)
     * @param queryTargetPermission If searching for Histories about Permisisons, this parameter restricts results to permissions of this level. (optional)
     * @param queryTargetPermissionSet If searching for Histories about API keys, this parameter restricts results to API keys with this permission set. (optional)
     * @param queryTargetPlatform If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform. (optional)
     * @param queryTargetUserId If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID. (optional)
     * @param queryTargetUsername If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username. (optional)
     * @param queryUserId Return results that are actions performed by the user indiciated by this User ID (optional)
     * @param queryUsername Filter results by this username. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @return HistoryExportEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public HistoryExportEntity postHistoryExports(OffsetDateTime endAt, String queryAction, String queryDestination, String queryFailureType, String queryFileId, String queryFolder, String queryInterface, String queryIp, String queryParentId, String queryPath, String querySrc, String queryTargetId, String queryTargetName, String queryTargetPermission, String queryTargetPermissionSet, String queryTargetPlatform, String queryTargetUserId, String queryTargetUsername, String queryUserId, String queryUsername, OffsetDateTime startAt, Integer userId) throws ApiException {
        ApiResponse<HistoryExportEntity> localVarResp = postHistoryExportsWithHttpInfo(endAt, queryAction, queryDestination, queryFailureType, queryFileId, queryFolder, queryInterface, queryIp, queryParentId, queryPath, querySrc, queryTargetId, queryTargetName, queryTargetPermission, queryTargetPermissionSet, queryTargetPlatform, queryTargetUserId, queryTargetUsername, queryUserId, queryUsername, startAt, userId);
        return localVarResp.getData();
    }

    /**
     * Create History Export
     * Create History Export
     * @param endAt End date/time of export range. (optional)
     * @param queryAction Filter results by this this action type. Valid values: &#x60;create&#x60;, &#x60;read&#x60;, &#x60;update&#x60;, &#x60;destroy&#x60;, &#x60;move&#x60;, &#x60;login&#x60;, &#x60;failedlogin&#x60;, &#x60;copy&#x60;, &#x60;user_create&#x60;, &#x60;user_update&#x60;, &#x60;user_destroy&#x60;, &#x60;group_create&#x60;, &#x60;group_update&#x60;, &#x60;group_destroy&#x60;, &#x60;permission_create&#x60;, &#x60;permission_destroy&#x60;, &#x60;api_key_create&#x60;, &#x60;api_key_update&#x60;, &#x60;api_key_destroy&#x60; (optional)
     * @param queryDestination Return results that are file moves with this path as destination. (optional)
     * @param queryFailureType If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: &#x60;expired_trial&#x60;, &#x60;account_overdue&#x60;, &#x60;locked_out&#x60;, &#x60;ip_mismatch&#x60;, &#x60;password_mismatch&#x60;, &#x60;site_mismatch&#x60;, &#x60;username_not_found&#x60;, &#x60;none&#x60;, &#x60;no_ftp_permission&#x60;, &#x60;no_web_permission&#x60;, &#x60;no_directory&#x60;, &#x60;errno_enoent&#x60;, &#x60;no_sftp_permission&#x60;, &#x60;no_dav_permission&#x60;, &#x60;no_restapi_permission&#x60;, &#x60;key_mismatch&#x60;, &#x60;region_mismatch&#x60;, &#x60;expired_access&#x60;, &#x60;desktop_ip_mismatch&#x60;, &#x60;desktop_api_key_not_used_quickly_enough&#x60;, &#x60;disabled&#x60;, &#x60;country_mismatch&#x60; (optional)
     * @param queryFileId Return results that are file actions related to the file indicated by this File ID (optional)
     * @param queryFolder Return results that are file actions related to files or folders inside this folder path. (optional)
     * @param queryInterface Filter results by this this interface type. Valid values: &#x60;web&#x60;, &#x60;ftp&#x60;, &#x60;robot&#x60;, &#x60;jsapi&#x60;, &#x60;webdesktopapi&#x60;, &#x60;sftp&#x60;, &#x60;dav&#x60;, &#x60;desktop&#x60;, &#x60;restapi&#x60;, &#x60;scim&#x60;, &#x60;office&#x60;, &#x60;mobile&#x60;, &#x60;as2&#x60;, &#x60;inbound_email&#x60;, &#x60;remote&#x60; (optional)
     * @param queryIp Filter results by this IP address. (optional)
     * @param queryParentId Return results that are file actions inside the parent folder specified by this folder ID (optional)
     * @param queryPath Return results that are file actions related to this path. (optional)
     * @param querySrc Return results that are file moves originating from this path. (optional)
     * @param queryTargetId If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID. (optional)
     * @param queryTargetName If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username. (optional)
     * @param queryTargetPermission If searching for Histories about Permisisons, this parameter restricts results to permissions of this level. (optional)
     * @param queryTargetPermissionSet If searching for Histories about API keys, this parameter restricts results to API keys with this permission set. (optional)
     * @param queryTargetPlatform If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform. (optional)
     * @param queryTargetUserId If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID. (optional)
     * @param queryTargetUsername If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username. (optional)
     * @param queryUserId Return results that are actions performed by the user indiciated by this User ID (optional)
     * @param queryUsername Filter results by this username. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @return ApiResponse&lt;HistoryExportEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoryExportEntity> postHistoryExportsWithHttpInfo(OffsetDateTime endAt, String queryAction, String queryDestination, String queryFailureType, String queryFileId, String queryFolder, String queryInterface, String queryIp, String queryParentId, String queryPath, String querySrc, String queryTargetId, String queryTargetName, String queryTargetPermission, String queryTargetPermissionSet, String queryTargetPlatform, String queryTargetUserId, String queryTargetUsername, String queryUserId, String queryUsername, OffsetDateTime startAt, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = postHistoryExportsValidateBeforeCall(endAt, queryAction, queryDestination, queryFailureType, queryFileId, queryFolder, queryInterface, queryIp, queryParentId, queryPath, querySrc, queryTargetId, queryTargetName, queryTargetPermission, queryTargetPermissionSet, queryTargetPlatform, queryTargetUserId, queryTargetUsername, queryUserId, queryUsername, startAt, userId, null);
        Type localVarReturnType = new TypeToken<HistoryExportEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create History Export (asynchronously)
     * Create History Export
     * @param endAt End date/time of export range. (optional)
     * @param queryAction Filter results by this this action type. Valid values: &#x60;create&#x60;, &#x60;read&#x60;, &#x60;update&#x60;, &#x60;destroy&#x60;, &#x60;move&#x60;, &#x60;login&#x60;, &#x60;failedlogin&#x60;, &#x60;copy&#x60;, &#x60;user_create&#x60;, &#x60;user_update&#x60;, &#x60;user_destroy&#x60;, &#x60;group_create&#x60;, &#x60;group_update&#x60;, &#x60;group_destroy&#x60;, &#x60;permission_create&#x60;, &#x60;permission_destroy&#x60;, &#x60;api_key_create&#x60;, &#x60;api_key_update&#x60;, &#x60;api_key_destroy&#x60; (optional)
     * @param queryDestination Return results that are file moves with this path as destination. (optional)
     * @param queryFailureType If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: &#x60;expired_trial&#x60;, &#x60;account_overdue&#x60;, &#x60;locked_out&#x60;, &#x60;ip_mismatch&#x60;, &#x60;password_mismatch&#x60;, &#x60;site_mismatch&#x60;, &#x60;username_not_found&#x60;, &#x60;none&#x60;, &#x60;no_ftp_permission&#x60;, &#x60;no_web_permission&#x60;, &#x60;no_directory&#x60;, &#x60;errno_enoent&#x60;, &#x60;no_sftp_permission&#x60;, &#x60;no_dav_permission&#x60;, &#x60;no_restapi_permission&#x60;, &#x60;key_mismatch&#x60;, &#x60;region_mismatch&#x60;, &#x60;expired_access&#x60;, &#x60;desktop_ip_mismatch&#x60;, &#x60;desktop_api_key_not_used_quickly_enough&#x60;, &#x60;disabled&#x60;, &#x60;country_mismatch&#x60; (optional)
     * @param queryFileId Return results that are file actions related to the file indicated by this File ID (optional)
     * @param queryFolder Return results that are file actions related to files or folders inside this folder path. (optional)
     * @param queryInterface Filter results by this this interface type. Valid values: &#x60;web&#x60;, &#x60;ftp&#x60;, &#x60;robot&#x60;, &#x60;jsapi&#x60;, &#x60;webdesktopapi&#x60;, &#x60;sftp&#x60;, &#x60;dav&#x60;, &#x60;desktop&#x60;, &#x60;restapi&#x60;, &#x60;scim&#x60;, &#x60;office&#x60;, &#x60;mobile&#x60;, &#x60;as2&#x60;, &#x60;inbound_email&#x60;, &#x60;remote&#x60; (optional)
     * @param queryIp Filter results by this IP address. (optional)
     * @param queryParentId Return results that are file actions inside the parent folder specified by this folder ID (optional)
     * @param queryPath Return results that are file actions related to this path. (optional)
     * @param querySrc Return results that are file moves originating from this path. (optional)
     * @param queryTargetId If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID. (optional)
     * @param queryTargetName If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username. (optional)
     * @param queryTargetPermission If searching for Histories about Permisisons, this parameter restricts results to permissions of this level. (optional)
     * @param queryTargetPermissionSet If searching for Histories about API keys, this parameter restricts results to API keys with this permission set. (optional)
     * @param queryTargetPlatform If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform. (optional)
     * @param queryTargetUserId If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID. (optional)
     * @param queryTargetUsername If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username. (optional)
     * @param queryUserId Return results that are actions performed by the user indiciated by this User ID (optional)
     * @param queryUsername Filter results by this username. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The HistoryExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postHistoryExportsAsync(OffsetDateTime endAt, String queryAction, String queryDestination, String queryFailureType, String queryFileId, String queryFolder, String queryInterface, String queryIp, String queryParentId, String queryPath, String querySrc, String queryTargetId, String queryTargetName, String queryTargetPermission, String queryTargetPermissionSet, String queryTargetPlatform, String queryTargetUserId, String queryTargetUsername, String queryUserId, String queryUsername, OffsetDateTime startAt, Integer userId, final ApiCallback<HistoryExportEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postHistoryExportsValidateBeforeCall(endAt, queryAction, queryDestination, queryFailureType, queryFileId, queryFolder, queryInterface, queryIp, queryParentId, queryPath, querySrc, queryTargetId, queryTargetName, queryTargetPermission, queryTargetPermissionSet, queryTargetPlatform, queryTargetUserId, queryTargetUsername, queryUserId, queryUsername, startAt, userId, _callback);
        Type localVarReturnType = new TypeToken<HistoryExportEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
