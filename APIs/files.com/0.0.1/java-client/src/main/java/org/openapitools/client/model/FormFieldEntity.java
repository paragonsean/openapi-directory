/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FormFieldEntity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormFieldEntity {
  public static final String SERIALIZED_NAME_DEFAULT_OPTION = "default_option";
  @SerializedName(SERIALIZED_NAME_DEFAULT_OPTION)
  private String defaultOption;

  /**
   * Type of Field
   */
  @JsonAdapter(FieldTypeEnum.Adapter.class)
  public enum FieldTypeEnum {
    TEXT("text"),
    
    TEXT_AREA("text_area"),
    
    DROPDOWN("dropdown"),
    
    RADIO("radio");

    private String value;

    FieldTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldTypeEnum fromValue(String value) {
      for (FieldTypeEnum b : FieldTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FieldTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FieldTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIELD_TYPE = "field_type";
  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private FieldTypeEnum fieldType;

  public static final String SERIALIZED_NAME_FORM_FIELD_SET_ID = "form_field_set_id";
  @SerializedName(SERIALIZED_NAME_FORM_FIELD_SET_ID)
  private Integer formFieldSetId;

  public static final String SERIALIZED_NAME_HELP_TEXT = "help_text";
  @SerializedName(SERIALIZED_NAME_HELP_TEXT)
  private String helpText;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_OPTIONS_FOR_SELECT = "options_for_select";
  @SerializedName(SERIALIZED_NAME_OPTIONS_FOR_SELECT)
  private List<String> optionsForSelect = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public FormFieldEntity() {
  }

  public FormFieldEntity defaultOption(String defaultOption) {
    this.defaultOption = defaultOption;
    return this;
  }

  /**
   * Default option for radio and dropdown
   * @return defaultOption
   */
  @javax.annotation.Nullable
  public String getDefaultOption() {
    return defaultOption;
  }

  public void setDefaultOption(String defaultOption) {
    this.defaultOption = defaultOption;
  }


  public FormFieldEntity fieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Type of Field
   * @return fieldType
   */
  @javax.annotation.Nullable
  public FieldTypeEnum getFieldType() {
    return fieldType;
  }

  public void setFieldType(FieldTypeEnum fieldType) {
    this.fieldType = fieldType;
  }


  public FormFieldEntity formFieldSetId(Integer formFieldSetId) {
    this.formFieldSetId = formFieldSetId;
    return this;
  }

  /**
   * Form field set id
   * @return formFieldSetId
   */
  @javax.annotation.Nullable
  public Integer getFormFieldSetId() {
    return formFieldSetId;
  }

  public void setFormFieldSetId(Integer formFieldSetId) {
    this.formFieldSetId = formFieldSetId;
  }


  public FormFieldEntity helpText(String helpText) {
    this.helpText = helpText;
    return this;
  }

  /**
   * Help text to be displayed
   * @return helpText
   */
  @javax.annotation.Nullable
  public String getHelpText() {
    return helpText;
  }

  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }


  public FormFieldEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Form field id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public FormFieldEntity label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Label to be displayed
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public FormFieldEntity optionsForSelect(List<String> optionsForSelect) {
    this.optionsForSelect = optionsForSelect;
    return this;
  }

  public FormFieldEntity addOptionsForSelectItem(String optionsForSelectItem) {
    if (this.optionsForSelect == null) {
      this.optionsForSelect = new ArrayList<>();
    }
    this.optionsForSelect.add(optionsForSelectItem);
    return this;
  }

  /**
   * Options to display for radio and dropdown
   * @return optionsForSelect
   */
  @javax.annotation.Nullable
  public List<String> getOptionsForSelect() {
    return optionsForSelect;
  }

  public void setOptionsForSelect(List<String> optionsForSelect) {
    this.optionsForSelect = optionsForSelect;
  }


  public FormFieldEntity required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Is this a required field?
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormFieldEntity formFieldEntity = (FormFieldEntity) o;
    return Objects.equals(this.defaultOption, formFieldEntity.defaultOption) &&
        Objects.equals(this.fieldType, formFieldEntity.fieldType) &&
        Objects.equals(this.formFieldSetId, formFieldEntity.formFieldSetId) &&
        Objects.equals(this.helpText, formFieldEntity.helpText) &&
        Objects.equals(this.id, formFieldEntity.id) &&
        Objects.equals(this.label, formFieldEntity.label) &&
        Objects.equals(this.optionsForSelect, formFieldEntity.optionsForSelect) &&
        Objects.equals(this.required, formFieldEntity.required);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultOption, fieldType, formFieldSetId, helpText, id, label, optionsForSelect, required);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormFieldEntity {\n");
    sb.append("    defaultOption: ").append(toIndentedString(defaultOption)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    formFieldSetId: ").append(toIndentedString(formFieldSetId)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    optionsForSelect: ").append(toIndentedString(optionsForSelect)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_option");
    openapiFields.add("field_type");
    openapiFields.add("form_field_set_id");
    openapiFields.add("help_text");
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("options_for_select");
    openapiFields.add("required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormFieldEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormFieldEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormFieldEntity is not found in the empty JSON string", FormFieldEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormFieldEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormFieldEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_option") != null && !jsonObj.get("default_option").isJsonNull()) && !jsonObj.get("default_option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_option").toString()));
      }
      if ((jsonObj.get("field_type") != null && !jsonObj.get("field_type").isJsonNull()) && !jsonObj.get("field_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_type").toString()));
      }
      // validate the optional field `field_type`
      if (jsonObj.get("field_type") != null && !jsonObj.get("field_type").isJsonNull()) {
        FieldTypeEnum.validateJsonElement(jsonObj.get("field_type"));
      }
      if ((jsonObj.get("help_text") != null && !jsonObj.get("help_text").isJsonNull()) && !jsonObj.get("help_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `help_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("help_text").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("options_for_select") != null && !jsonObj.get("options_for_select").isJsonNull() && !jsonObj.get("options_for_select").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `options_for_select` to be an array in the JSON string but got `%s`", jsonObj.get("options_for_select").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormFieldEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormFieldEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormFieldEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormFieldEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<FormFieldEntity>() {
           @Override
           public void write(JsonWriter out, FormFieldEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormFieldEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormFieldEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormFieldEntity
   * @throws IOException if the JSON string is invalid with respect to FormFieldEntity
   */
  public static FormFieldEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormFieldEntity.class);
  }

  /**
   * Convert an instance of FormFieldEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

