/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Show File Migration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileMigrationEntity {
  public static final String SERIALIZED_NAME_DEST_PATH = "dest_path";
  @SerializedName(SERIALIZED_NAME_DEST_PATH)
  private String destPath;

  public static final String SERIALIZED_NAME_FILES_MOVED = "files_moved";
  @SerializedName(SERIALIZED_NAME_FILES_MOVED)
  private Integer filesMoved;

  public static final String SERIALIZED_NAME_FILES_TOTAL = "files_total";
  @SerializedName(SERIALIZED_NAME_FILES_TOTAL)
  private Integer filesTotal;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOG_URL = "log_url";
  @SerializedName(SERIALIZED_NAME_LOG_URL)
  private String logUrl;

  /**
   * The type of operation
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    DELETE("delete"),
    
    MOVE("move"),
    
    COPY("copy"),
    
    REGIONAL_MIGRATION("regional_migration");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationEnum fromValue(String value) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private OperationEnum operation;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  /**
   * Status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    COUNTING("counting"),
    
    PROCESSING("processing"),
    
    COMPLETED("completed"),
    
    PROCESSING_SUBFOLDERS("processing_subfolders"),
    
    FINISHING("finishing"),
    
    CREATING_DEST_FOLDER("creating_dest_folder"),
    
    WAITING_FOR_OTHER_JOBS("waiting_for_other_jobs"),
    
    WAITING_FOR_ALL_FILES("waiting_for_all_files"),
    
    WAITING_FOR_PENDING_SUBFOLDERS("waiting_for_pending_subfolders"),
    
    WAITING_FOR_ALL_SUBFOLDERS("waiting_for_all_subfolders"),
    
    FAILED("failed"),
    
    WAITING_FOR_ENQUEUED_OPERATIONS("waiting_for_enqueued_operations"),
    
    UNUSED("unused"),
    
    PROCESSING_RECURSIVELY("processing_recursively"),
    
    REMOVING_DEFERRED_FOLDERS("removing_deferred_folders");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public FileMigrationEntity() {
  }

  public FileMigrationEntity destPath(String destPath) {
    this.destPath = destPath;
    return this;
  }

  /**
   * Destination path
   * @return destPath
   */
  @javax.annotation.Nullable
  public String getDestPath() {
    return destPath;
  }

  public void setDestPath(String destPath) {
    this.destPath = destPath;
  }


  public FileMigrationEntity filesMoved(Integer filesMoved) {
    this.filesMoved = filesMoved;
    return this;
  }

  /**
   * Number of files processed
   * @return filesMoved
   */
  @javax.annotation.Nullable
  public Integer getFilesMoved() {
    return filesMoved;
  }

  public void setFilesMoved(Integer filesMoved) {
    this.filesMoved = filesMoved;
  }


  public FileMigrationEntity filesTotal(Integer filesTotal) {
    this.filesTotal = filesTotal;
    return this;
  }

  /**
   * Deprecated: used to return a count of the applicable files.  Currently returns 0 always.  On remote servers, it is not possible to reliably determine the number of affected files for every migration operation.
   * @return filesTotal
   */
  @javax.annotation.Nullable
  public Integer getFilesTotal() {
    return filesTotal;
  }

  public void setFilesTotal(Integer filesTotal) {
    this.filesTotal = filesTotal;
  }


  public FileMigrationEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * File migration ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public FileMigrationEntity logUrl(String logUrl) {
    this.logUrl = logUrl;
    return this;
  }

  /**
   * Link to download the log file for this migration.
   * @return logUrl
   */
  @javax.annotation.Nullable
  public String getLogUrl() {
    return logUrl;
  }

  public void setLogUrl(String logUrl) {
    this.logUrl = logUrl;
  }


  public FileMigrationEntity operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

  /**
   * The type of operation
   * @return operation
   */
  @javax.annotation.Nullable
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  public FileMigrationEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Source path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public FileMigrationEntity region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public FileMigrationEntity status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileMigrationEntity fileMigrationEntity = (FileMigrationEntity) o;
    return Objects.equals(this.destPath, fileMigrationEntity.destPath) &&
        Objects.equals(this.filesMoved, fileMigrationEntity.filesMoved) &&
        Objects.equals(this.filesTotal, fileMigrationEntity.filesTotal) &&
        Objects.equals(this.id, fileMigrationEntity.id) &&
        Objects.equals(this.logUrl, fileMigrationEntity.logUrl) &&
        Objects.equals(this.operation, fileMigrationEntity.operation) &&
        Objects.equals(this.path, fileMigrationEntity.path) &&
        Objects.equals(this.region, fileMigrationEntity.region) &&
        Objects.equals(this.status, fileMigrationEntity.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destPath, filesMoved, filesTotal, id, logUrl, operation, path, region, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileMigrationEntity {\n");
    sb.append("    destPath: ").append(toIndentedString(destPath)).append("\n");
    sb.append("    filesMoved: ").append(toIndentedString(filesMoved)).append("\n");
    sb.append("    filesTotal: ").append(toIndentedString(filesTotal)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logUrl: ").append(toIndentedString(logUrl)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dest_path");
    openapiFields.add("files_moved");
    openapiFields.add("files_total");
    openapiFields.add("id");
    openapiFields.add("log_url");
    openapiFields.add("operation");
    openapiFields.add("path");
    openapiFields.add("region");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileMigrationEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileMigrationEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileMigrationEntity is not found in the empty JSON string", FileMigrationEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileMigrationEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileMigrationEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dest_path") != null && !jsonObj.get("dest_path").isJsonNull()) && !jsonObj.get("dest_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dest_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dest_path").toString()));
      }
      if ((jsonObj.get("log_url") != null && !jsonObj.get("log_url").isJsonNull()) && !jsonObj.get("log_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_url").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      // validate the optional field `operation`
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) {
        OperationEnum.validateJsonElement(jsonObj.get("operation"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileMigrationEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileMigrationEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileMigrationEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileMigrationEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<FileMigrationEntity>() {
           @Override
           public void write(JsonWriter out, FileMigrationEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileMigrationEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileMigrationEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileMigrationEntity
   * @throws IOException if the JSON string is invalid with respect to FileMigrationEntity
   */
  public static FileMigrationEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileMigrationEntity.class);
  }

  /**
   * Convert an instance of FileMigrationEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

