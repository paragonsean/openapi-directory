/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Locks by path
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LockEntity {
  public static final String SERIALIZED_NAME_ALLOW_ACCESS_BY_ANY_USER = "allow_access_by_any_user";
  @SerializedName(SERIALIZED_NAME_ALLOW_ACCESS_BY_ANY_USER)
  private Boolean allowAccessByAnyUser;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private String depth;

  public static final String SERIALIZED_NAME_EXCLUSIVE = "exclusive";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE)
  private Boolean exclusive;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RECURSIVE = "recursive";
  @SerializedName(SERIALIZED_NAME_RECURSIVE)
  private Boolean recursive;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public LockEntity() {
  }

  public LockEntity allowAccessByAnyUser(Boolean allowAccessByAnyUser) {
    this.allowAccessByAnyUser = allowAccessByAnyUser;
    return this;
  }

  /**
   * Can lock be modified by users other than its creator?
   * @return allowAccessByAnyUser
   */
  @javax.annotation.Nullable
  public Boolean getAllowAccessByAnyUser() {
    return allowAccessByAnyUser;
  }

  public void setAllowAccessByAnyUser(Boolean allowAccessByAnyUser) {
    this.allowAccessByAnyUser = allowAccessByAnyUser;
  }


  public LockEntity depth(String depth) {
    this.depth = depth;
    return this;
  }

  /**
   * DEPRECATED: Lock depth
   * @return depth
   */
  @javax.annotation.Nullable
  public String getDepth() {
    return depth;
  }

  public void setDepth(String depth) {
    this.depth = depth;
  }


  public LockEntity exclusive(Boolean exclusive) {
    this.exclusive = exclusive;
    return this;
  }

  /**
   * Is lock exclusive?
   * @return exclusive
   */
  @javax.annotation.Nullable
  public Boolean getExclusive() {
    return exclusive;
  }

  public void setExclusive(Boolean exclusive) {
    this.exclusive = exclusive;
  }


  public LockEntity owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Owner of the lock.  This can be any arbitrary string.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public LockEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public LockEntity recursive(Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

  /**
   * Does lock apply to subfolders?
   * @return recursive
   */
  @javax.annotation.Nullable
  public Boolean getRecursive() {
    return recursive;
  }

  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }


  public LockEntity scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * DEPRECATED: Lock scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public LockEntity timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Lock timeout in seconds
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public LockEntity token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Lock token.  Use to release lock.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public LockEntity type(String type) {
    this.type = type;
    return this;
  }

  /**
   * DEPRECATED: Lock type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public LockEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Lock creator user ID
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public LockEntity username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Lock creator username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LockEntity lockEntity = (LockEntity) o;
    return Objects.equals(this.allowAccessByAnyUser, lockEntity.allowAccessByAnyUser) &&
        Objects.equals(this.depth, lockEntity.depth) &&
        Objects.equals(this.exclusive, lockEntity.exclusive) &&
        Objects.equals(this.owner, lockEntity.owner) &&
        Objects.equals(this.path, lockEntity.path) &&
        Objects.equals(this.recursive, lockEntity.recursive) &&
        Objects.equals(this.scope, lockEntity.scope) &&
        Objects.equals(this.timeout, lockEntity.timeout) &&
        Objects.equals(this.token, lockEntity.token) &&
        Objects.equals(this.type, lockEntity.type) &&
        Objects.equals(this.userId, lockEntity.userId) &&
        Objects.equals(this.username, lockEntity.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAccessByAnyUser, depth, exclusive, owner, path, recursive, scope, timeout, token, type, userId, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LockEntity {\n");
    sb.append("    allowAccessByAnyUser: ").append(toIndentedString(allowAccessByAnyUser)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    exclusive: ").append(toIndentedString(exclusive)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_access_by_any_user");
    openapiFields.add("depth");
    openapiFields.add("exclusive");
    openapiFields.add("owner");
    openapiFields.add("path");
    openapiFields.add("recursive");
    openapiFields.add("scope");
    openapiFields.add("timeout");
    openapiFields.add("token");
    openapiFields.add("type");
    openapiFields.add("user_id");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LockEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LockEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LockEntity is not found in the empty JSON string", LockEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LockEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LockEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("depth") != null && !jsonObj.get("depth").isJsonNull()) && !jsonObj.get("depth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depth").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LockEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LockEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LockEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LockEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<LockEntity>() {
           @Override
           public void write(JsonWriter out, LockEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LockEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LockEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LockEntity
   * @throws IOException if the JSON string is invalid with respect to LockEntity
   */
  public static LockEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LockEntity.class);
  }

  /**
   * Convert an instance of LockEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

