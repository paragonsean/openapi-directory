/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create Sftp Host Key
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SftpHostKeyEntity {
  public static final String SERIALIZED_NAME_FINGERPRINT_MD5 = "fingerprint_md5";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT_MD5)
  private String fingerprintMd5;

  public static final String SERIALIZED_NAME_FINGERPRINT_SHA256 = "fingerprint_sha256";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT_SHA256)
  private String fingerprintSha256;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public SftpHostKeyEntity() {
  }

  public SftpHostKeyEntity fingerprintMd5(String fingerprintMd5) {
    this.fingerprintMd5 = fingerprintMd5;
    return this;
  }

  /**
   * MD5 Fingerpint of the public key
   * @return fingerprintMd5
   */
  @javax.annotation.Nullable
  public String getFingerprintMd5() {
    return fingerprintMd5;
  }

  public void setFingerprintMd5(String fingerprintMd5) {
    this.fingerprintMd5 = fingerprintMd5;
  }


  public SftpHostKeyEntity fingerprintSha256(String fingerprintSha256) {
    this.fingerprintSha256 = fingerprintSha256;
    return this;
  }

  /**
   * SHA256 Fingerpint of the public key
   * @return fingerprintSha256
   */
  @javax.annotation.Nullable
  public String getFingerprintSha256() {
    return fingerprintSha256;
  }

  public void setFingerprintSha256(String fingerprintSha256) {
    this.fingerprintSha256 = fingerprintSha256;
  }


  public SftpHostKeyEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Sftp Host Key ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SftpHostKeyEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The friendly name of this SFTP Host Key.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SftpHostKeyEntity sftpHostKeyEntity = (SftpHostKeyEntity) o;
    return Objects.equals(this.fingerprintMd5, sftpHostKeyEntity.fingerprintMd5) &&
        Objects.equals(this.fingerprintSha256, sftpHostKeyEntity.fingerprintSha256) &&
        Objects.equals(this.id, sftpHostKeyEntity.id) &&
        Objects.equals(this.name, sftpHostKeyEntity.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fingerprintMd5, fingerprintSha256, id, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SftpHostKeyEntity {\n");
    sb.append("    fingerprintMd5: ").append(toIndentedString(fingerprintMd5)).append("\n");
    sb.append("    fingerprintSha256: ").append(toIndentedString(fingerprintSha256)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fingerprint_md5");
    openapiFields.add("fingerprint_sha256");
    openapiFields.add("id");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SftpHostKeyEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SftpHostKeyEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SftpHostKeyEntity is not found in the empty JSON string", SftpHostKeyEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SftpHostKeyEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SftpHostKeyEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fingerprint_md5") != null && !jsonObj.get("fingerprint_md5").isJsonNull()) && !jsonObj.get("fingerprint_md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint_md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint_md5").toString()));
      }
      if ((jsonObj.get("fingerprint_sha256") != null && !jsonObj.get("fingerprint_sha256").isJsonNull()) && !jsonObj.get("fingerprint_sha256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint_sha256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint_sha256").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SftpHostKeyEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SftpHostKeyEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SftpHostKeyEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SftpHostKeyEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<SftpHostKeyEntity>() {
           @Override
           public void write(JsonWriter out, SftpHostKeyEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SftpHostKeyEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SftpHostKeyEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SftpHostKeyEntity
   * @throws IOException if the JSON string is invalid with respect to SftpHostKeyEntity
   */
  public static SftpHostKeyEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SftpHostKeyEntity.class);
  }

  /**
   * Convert an instance of SftpHostKeyEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

