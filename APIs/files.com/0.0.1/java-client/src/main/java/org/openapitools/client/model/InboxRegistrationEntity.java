/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Inbox Registrations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboxRegistrationEntity {
  public static final String SERIALIZED_NAME_CLICKWRAP_BODY = "clickwrap_body";
  @SerializedName(SERIALIZED_NAME_CLICKWRAP_BODY)
  private String clickwrapBody;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FORM_FIELD_DATA = "form_field_data";
  @SerializedName(SERIALIZED_NAME_FORM_FIELD_DATA)
  private Object formFieldData;

  public static final String SERIALIZED_NAME_FORM_FIELD_SET_ID = "form_field_set_id";
  @SerializedName(SERIALIZED_NAME_FORM_FIELD_SET_ID)
  private Integer formFieldSetId;

  public static final String SERIALIZED_NAME_INBOX_ID = "inbox_id";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  private Integer inboxId;

  public static final String SERIALIZED_NAME_INBOX_RECIPIENT_ID = "inbox_recipient_id";
  @SerializedName(SERIALIZED_NAME_INBOX_RECIPIENT_ID)
  private Integer inboxRecipientId;

  public static final String SERIALIZED_NAME_INBOX_TITLE = "inbox_title";
  @SerializedName(SERIALIZED_NAME_INBOX_TITLE)
  private String inboxTitle;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public InboxRegistrationEntity() {
  }

  public InboxRegistrationEntity clickwrapBody(String clickwrapBody) {
    this.clickwrapBody = clickwrapBody;
    return this;
  }

  /**
   * Clickwrap text that was shown to the registrant
   * @return clickwrapBody
   */
  @javax.annotation.Nullable
  public String getClickwrapBody() {
    return clickwrapBody;
  }

  public void setClickwrapBody(String clickwrapBody) {
    this.clickwrapBody = clickwrapBody;
  }


  public InboxRegistrationEntity code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Registration cookie code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public InboxRegistrationEntity company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Registrant company name
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public InboxRegistrationEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Registration creation date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InboxRegistrationEntity email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Registrant email address
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public InboxRegistrationEntity formFieldData(Object formFieldData) {
    this.formFieldData = formFieldData;
    return this;
  }

  /**
   * Data for form field set with form field ids as keys and user data as values
   * @return formFieldData
   */
  @javax.annotation.Nullable
  public Object getFormFieldData() {
    return formFieldData;
  }

  public void setFormFieldData(Object formFieldData) {
    this.formFieldData = formFieldData;
  }


  public InboxRegistrationEntity formFieldSetId(Integer formFieldSetId) {
    this.formFieldSetId = formFieldSetId;
    return this;
  }

  /**
   * Id of associated form field set
   * @return formFieldSetId
   */
  @javax.annotation.Nullable
  public Integer getFormFieldSetId() {
    return formFieldSetId;
  }

  public void setFormFieldSetId(Integer formFieldSetId) {
    this.formFieldSetId = formFieldSetId;
  }


  public InboxRegistrationEntity inboxId(Integer inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Id of associated inbox
   * @return inboxId
   */
  @javax.annotation.Nullable
  public Integer getInboxId() {
    return inboxId;
  }

  public void setInboxId(Integer inboxId) {
    this.inboxId = inboxId;
  }


  public InboxRegistrationEntity inboxRecipientId(Integer inboxRecipientId) {
    this.inboxRecipientId = inboxRecipientId;
    return this;
  }

  /**
   * Id of associated inbox recipient
   * @return inboxRecipientId
   */
  @javax.annotation.Nullable
  public Integer getInboxRecipientId() {
    return inboxRecipientId;
  }

  public void setInboxRecipientId(Integer inboxRecipientId) {
    this.inboxRecipientId = inboxRecipientId;
  }


  public InboxRegistrationEntity inboxTitle(String inboxTitle) {
    this.inboxTitle = inboxTitle;
    return this;
  }

  /**
   * Title of associated inbox
   * @return inboxTitle
   */
  @javax.annotation.Nullable
  public String getInboxTitle() {
    return inboxTitle;
  }

  public void setInboxTitle(String inboxTitle) {
    this.inboxTitle = inboxTitle;
  }


  public InboxRegistrationEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Registrant name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboxRegistrationEntity inboxRegistrationEntity = (InboxRegistrationEntity) o;
    return Objects.equals(this.clickwrapBody, inboxRegistrationEntity.clickwrapBody) &&
        Objects.equals(this.code, inboxRegistrationEntity.code) &&
        Objects.equals(this.company, inboxRegistrationEntity.company) &&
        Objects.equals(this.createdAt, inboxRegistrationEntity.createdAt) &&
        Objects.equals(this.email, inboxRegistrationEntity.email) &&
        Objects.equals(this.formFieldData, inboxRegistrationEntity.formFieldData) &&
        Objects.equals(this.formFieldSetId, inboxRegistrationEntity.formFieldSetId) &&
        Objects.equals(this.inboxId, inboxRegistrationEntity.inboxId) &&
        Objects.equals(this.inboxRecipientId, inboxRegistrationEntity.inboxRecipientId) &&
        Objects.equals(this.inboxTitle, inboxRegistrationEntity.inboxTitle) &&
        Objects.equals(this.name, inboxRegistrationEntity.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clickwrapBody, code, company, createdAt, email, formFieldData, formFieldSetId, inboxId, inboxRecipientId, inboxTitle, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboxRegistrationEntity {\n");
    sb.append("    clickwrapBody: ").append(toIndentedString(clickwrapBody)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    formFieldData: ").append(toIndentedString(formFieldData)).append("\n");
    sb.append("    formFieldSetId: ").append(toIndentedString(formFieldSetId)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    inboxRecipientId: ").append(toIndentedString(inboxRecipientId)).append("\n");
    sb.append("    inboxTitle: ").append(toIndentedString(inboxTitle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clickwrap_body");
    openapiFields.add("code");
    openapiFields.add("company");
    openapiFields.add("created_at");
    openapiFields.add("email");
    openapiFields.add("form_field_data");
    openapiFields.add("form_field_set_id");
    openapiFields.add("inbox_id");
    openapiFields.add("inbox_recipient_id");
    openapiFields.add("inbox_title");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboxRegistrationEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboxRegistrationEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboxRegistrationEntity is not found in the empty JSON string", InboxRegistrationEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboxRegistrationEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboxRegistrationEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clickwrap_body") != null && !jsonObj.get("clickwrap_body").isJsonNull()) && !jsonObj.get("clickwrap_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickwrap_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickwrap_body").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("inbox_title") != null && !jsonObj.get("inbox_title").isJsonNull()) && !jsonObj.get("inbox_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inbox_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inbox_title").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboxRegistrationEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboxRegistrationEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboxRegistrationEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboxRegistrationEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<InboxRegistrationEntity>() {
           @Override
           public void write(JsonWriter out, InboxRegistrationEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboxRegistrationEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboxRegistrationEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboxRegistrationEntity
   * @throws IOException if the JSON string is invalid with respect to InboxRegistrationEntity
   */
  public static InboxRegistrationEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboxRegistrationEntity.class);
  }

  /**
   * Convert an instance of InboxRegistrationEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

