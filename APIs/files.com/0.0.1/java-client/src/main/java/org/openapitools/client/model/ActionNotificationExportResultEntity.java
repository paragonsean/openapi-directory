/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Action Notification Export Results
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionNotificationExportResultEntity {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Integer createdAt;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "request_headers";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private String requestHeaders;

  public static final String SERIALIZED_NAME_REQUEST_METHOD = "request_method";
  @SerializedName(SERIALIZED_NAME_REQUEST_METHOD)
  private String requestMethod;

  public static final String SERIALIZED_NAME_REQUEST_URL = "request_url";
  @SerializedName(SERIALIZED_NAME_REQUEST_URL)
  private String requestUrl;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public ActionNotificationExportResultEntity() {
  }

  public ActionNotificationExportResultEntity createdAt(Integer createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the notification was sent.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public Integer getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public ActionNotificationExportResultEntity folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * The folder associated with the triggering action for this notification.
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }


  public ActionNotificationExportResultEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Notification ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ActionNotificationExportResultEntity message(String message) {
    this.message = message;
    return this;
  }

  /**
   * A message indicating the overall status of the webhook notification.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ActionNotificationExportResultEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path to the actual file that triggered this notification.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ActionNotificationExportResultEntity requestHeaders(String requestHeaders) {
    this.requestHeaders = requestHeaders;
    return this;
  }

  /**
   * A JSON-encoded string with headers that were sent with the webhook.
   * @return requestHeaders
   */
  @javax.annotation.Nullable
  public String getRequestHeaders() {
    return requestHeaders;
  }

  public void setRequestHeaders(String requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public ActionNotificationExportResultEntity requestMethod(String requestMethod) {
    this.requestMethod = requestMethod;
    return this;
  }

  /**
   * The HTTP verb used to perform the webhook.
   * @return requestMethod
   */
  @javax.annotation.Nullable
  public String getRequestMethod() {
    return requestMethod;
  }

  public void setRequestMethod(String requestMethod) {
    this.requestMethod = requestMethod;
  }


  public ActionNotificationExportResultEntity requestUrl(String requestUrl) {
    this.requestUrl = requestUrl;
    return this;
  }

  /**
   * The webhook request URL.
   * @return requestUrl
   */
  @javax.annotation.Nullable
  public String getRequestUrl() {
    return requestUrl;
  }

  public void setRequestUrl(String requestUrl) {
    this.requestUrl = requestUrl;
  }


  public ActionNotificationExportResultEntity status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * HTTP status code returned in the webhook response.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public ActionNotificationExportResultEntity success(Boolean success) {
    this.success = success;
    return this;
  }

  /**
   * &#x60;true&#x60; if the webhook succeeded by receiving a 200 or 204 response.
   * @return success
   */
  @javax.annotation.Nullable
  public Boolean getSuccess() {
    return success;
  }

  public void setSuccess(Boolean success) {
    this.success = success;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionNotificationExportResultEntity actionNotificationExportResultEntity = (ActionNotificationExportResultEntity) o;
    return Objects.equals(this.createdAt, actionNotificationExportResultEntity.createdAt) &&
        Objects.equals(this.folder, actionNotificationExportResultEntity.folder) &&
        Objects.equals(this.id, actionNotificationExportResultEntity.id) &&
        Objects.equals(this.message, actionNotificationExportResultEntity.message) &&
        Objects.equals(this.path, actionNotificationExportResultEntity.path) &&
        Objects.equals(this.requestHeaders, actionNotificationExportResultEntity.requestHeaders) &&
        Objects.equals(this.requestMethod, actionNotificationExportResultEntity.requestMethod) &&
        Objects.equals(this.requestUrl, actionNotificationExportResultEntity.requestUrl) &&
        Objects.equals(this.status, actionNotificationExportResultEntity.status) &&
        Objects.equals(this.success, actionNotificationExportResultEntity.success);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, folder, id, message, path, requestHeaders, requestMethod, requestUrl, status, success);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionNotificationExportResultEntity {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    requestMethod: ").append(toIndentedString(requestMethod)).append("\n");
    sb.append("    requestUrl: ").append(toIndentedString(requestUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("folder");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("path");
    openapiFields.add("request_headers");
    openapiFields.add("request_method");
    openapiFields.add("request_url");
    openapiFields.add("status");
    openapiFields.add("success");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionNotificationExportResultEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionNotificationExportResultEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionNotificationExportResultEntity is not found in the empty JSON string", ActionNotificationExportResultEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionNotificationExportResultEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionNotificationExportResultEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("request_headers") != null && !jsonObj.get("request_headers").isJsonNull()) && !jsonObj.get("request_headers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_headers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_headers").toString()));
      }
      if ((jsonObj.get("request_method") != null && !jsonObj.get("request_method").isJsonNull()) && !jsonObj.get("request_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_method").toString()));
      }
      if ((jsonObj.get("request_url") != null && !jsonObj.get("request_url").isJsonNull()) && !jsonObj.get("request_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionNotificationExportResultEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionNotificationExportResultEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionNotificationExportResultEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionNotificationExportResultEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionNotificationExportResultEntity>() {
           @Override
           public void write(JsonWriter out, ActionNotificationExportResultEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionNotificationExportResultEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionNotificationExportResultEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionNotificationExportResultEntity
   * @throws IOException if the JSON string is invalid with respect to ActionNotificationExportResultEntity
   */
  public static ActionNotificationExportResultEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionNotificationExportResultEntity.class);
  }

  /**
   * Convert an instance of ActionNotificationExportResultEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

