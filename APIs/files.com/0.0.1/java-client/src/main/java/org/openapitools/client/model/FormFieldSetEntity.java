/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FormFieldEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Form Field Sets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormFieldSetEntity {
  public static final String SERIALIZED_NAME_FORM_FIELDS = "form_fields";
  @SerializedName(SERIALIZED_NAME_FORM_FIELDS)
  private List<FormFieldEntity> formFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORM_LAYOUT = "form_layout";
  @SerializedName(SERIALIZED_NAME_FORM_LAYOUT)
  private List<Integer> formLayout = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_SKIP_COMPANY = "skip_company";
  @SerializedName(SERIALIZED_NAME_SKIP_COMPANY)
  private Boolean skipCompany;

  public static final String SERIALIZED_NAME_SKIP_EMAIL = "skip_email";
  @SerializedName(SERIALIZED_NAME_SKIP_EMAIL)
  private Boolean skipEmail;

  public static final String SERIALIZED_NAME_SKIP_NAME = "skip_name";
  @SerializedName(SERIALIZED_NAME_SKIP_NAME)
  private Boolean skipName;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public FormFieldSetEntity() {
  }

  public FormFieldSetEntity formFields(List<FormFieldEntity> formFields) {
    this.formFields = formFields;
    return this;
  }

  public FormFieldSetEntity addFormFieldsItem(FormFieldEntity formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new ArrayList<>();
    }
    this.formFields.add(formFieldsItem);
    return this;
  }

  /**
   * Associated form fields
   * @return formFields
   */
  @javax.annotation.Nullable
  public List<FormFieldEntity> getFormFields() {
    return formFields;
  }

  public void setFormFields(List<FormFieldEntity> formFields) {
    this.formFields = formFields;
  }


  public FormFieldSetEntity formLayout(List<Integer> formLayout) {
    this.formLayout = formLayout;
    return this;
  }

  public FormFieldSetEntity addFormLayoutItem(Integer formLayoutItem) {
    if (this.formLayout == null) {
      this.formLayout = new ArrayList<>();
    }
    this.formLayout.add(formLayoutItem);
    return this;
  }

  /**
   * Layout of the form
   * @return formLayout
   */
  @javax.annotation.Nullable
  public List<Integer> getFormLayout() {
    return formLayout;
  }

  public void setFormLayout(List<Integer> formLayout) {
    this.formLayout = formLayout;
  }


  public FormFieldSetEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Form field set id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public FormFieldSetEntity skipCompany(Boolean skipCompany) {
    this.skipCompany = skipCompany;
    return this;
  }

  /**
   * Any associated InboxRegistrations or BundleRegistrations can be saved without providing company
   * @return skipCompany
   */
  @javax.annotation.Nullable
  public Boolean getSkipCompany() {
    return skipCompany;
  }

  public void setSkipCompany(Boolean skipCompany) {
    this.skipCompany = skipCompany;
  }


  public FormFieldSetEntity skipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
    return this;
  }

  /**
   * Any associated InboxRegistrations or BundleRegistrations can be saved without providing email
   * @return skipEmail
   */
  @javax.annotation.Nullable
  public Boolean getSkipEmail() {
    return skipEmail;
  }

  public void setSkipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
  }


  public FormFieldSetEntity skipName(Boolean skipName) {
    this.skipName = skipName;
    return this;
  }

  /**
   * Any associated InboxRegistrations or BundleRegistrations can be saved without providing name
   * @return skipName
   */
  @javax.annotation.Nullable
  public Boolean getSkipName() {
    return skipName;
  }

  public void setSkipName(Boolean skipName) {
    this.skipName = skipName;
  }


  public FormFieldSetEntity title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title to be displayed
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormFieldSetEntity formFieldSetEntity = (FormFieldSetEntity) o;
    return Objects.equals(this.formFields, formFieldSetEntity.formFields) &&
        Objects.equals(this.formLayout, formFieldSetEntity.formLayout) &&
        Objects.equals(this.id, formFieldSetEntity.id) &&
        Objects.equals(this.skipCompany, formFieldSetEntity.skipCompany) &&
        Objects.equals(this.skipEmail, formFieldSetEntity.skipEmail) &&
        Objects.equals(this.skipName, formFieldSetEntity.skipName) &&
        Objects.equals(this.title, formFieldSetEntity.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formFields, formLayout, id, skipCompany, skipEmail, skipName, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormFieldSetEntity {\n");
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    formLayout: ").append(toIndentedString(formLayout)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    skipCompany: ").append(toIndentedString(skipCompany)).append("\n");
    sb.append("    skipEmail: ").append(toIndentedString(skipEmail)).append("\n");
    sb.append("    skipName: ").append(toIndentedString(skipName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("form_fields");
    openapiFields.add("form_layout");
    openapiFields.add("id");
    openapiFields.add("skip_company");
    openapiFields.add("skip_email");
    openapiFields.add("skip_name");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormFieldSetEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormFieldSetEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormFieldSetEntity is not found in the empty JSON string", FormFieldSetEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormFieldSetEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormFieldSetEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("form_fields") != null && !jsonObj.get("form_fields").isJsonNull()) {
        JsonArray jsonArrayformFields = jsonObj.getAsJsonArray("form_fields");
        if (jsonArrayformFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("form_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `form_fields` to be an array in the JSON string but got `%s`", jsonObj.get("form_fields").toString()));
          }

          // validate the optional field `form_fields` (array)
          for (int i = 0; i < jsonArrayformFields.size(); i++) {
            FormFieldEntity.validateJsonElement(jsonArrayformFields.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("form_layout") != null && !jsonObj.get("form_layout").isJsonNull() && !jsonObj.get("form_layout").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `form_layout` to be an array in the JSON string but got `%s`", jsonObj.get("form_layout").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormFieldSetEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormFieldSetEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormFieldSetEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormFieldSetEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<FormFieldSetEntity>() {
           @Override
           public void write(JsonWriter out, FormFieldSetEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormFieldSetEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormFieldSetEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormFieldSetEntity
   * @throws IOException if the JSON string is invalid with respect to FormFieldSetEntity
   */
  public static FormFieldSetEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormFieldSetEntity.class);
  }

  /**
   * Convert an instance of FormFieldSetEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

