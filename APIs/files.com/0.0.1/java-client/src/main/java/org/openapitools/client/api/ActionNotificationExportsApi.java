/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionNotificationExportEntity;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionNotificationExportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionNotificationExportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionNotificationExportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getActionNotificationExportsId
     * @param id Action Notification Export ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActionNotificationExportsIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action_notification_exports/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionNotificationExportsIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getActionNotificationExportsId(Async)");
        }

        return getActionNotificationExportsIdCall(id, _callback);

    }

    /**
     * Show Action Notification Export
     * Show Action Notification Export
     * @param id Action Notification Export ID. (required)
     * @return ActionNotificationExportEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ActionNotificationExportEntity getActionNotificationExportsId(Integer id) throws ApiException {
        ApiResponse<ActionNotificationExportEntity> localVarResp = getActionNotificationExportsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Show Action Notification Export
     * Show Action Notification Export
     * @param id Action Notification Export ID. (required)
     * @return ApiResponse&lt;ActionNotificationExportEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionNotificationExportEntity> getActionNotificationExportsIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getActionNotificationExportsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ActionNotificationExportEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show Action Notification Export (asynchronously)
     * Show Action Notification Export
     * @param id Action Notification Export ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActionNotificationExportsIdAsync(Integer id, final ApiCallback<ActionNotificationExportEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionNotificationExportsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ActionNotificationExportEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postActionNotificationExports
     * @param endAt End date/time of export range. (optional)
     * @param queryFolder Return notifications that were triggered by actions in this folder. (optional)
     * @param queryMessage Error message associated with the request, if any. (optional)
     * @param queryPath Return notifications that were triggered by actions on this specific path. (optional)
     * @param queryRequestMethod The HTTP request method used by the webhook. (optional)
     * @param queryRequestUrl The target webhook URL. (optional)
     * @param queryStatus The HTTP status returned from the server in response to the webhook request. (optional)
     * @param querySuccess true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postActionNotificationExportsCall(OffsetDateTime endAt, String queryFolder, String queryMessage, String queryPath, String queryRequestMethod, String queryRequestUrl, String queryStatus, Boolean querySuccess, OffsetDateTime startAt, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/action_notification_exports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endAt != null) {
            localVarFormParams.put("end_at", endAt);
        }

        if (queryFolder != null) {
            localVarFormParams.put("query_folder", queryFolder);
        }

        if (queryMessage != null) {
            localVarFormParams.put("query_message", queryMessage);
        }

        if (queryPath != null) {
            localVarFormParams.put("query_path", queryPath);
        }

        if (queryRequestMethod != null) {
            localVarFormParams.put("query_request_method", queryRequestMethod);
        }

        if (queryRequestUrl != null) {
            localVarFormParams.put("query_request_url", queryRequestUrl);
        }

        if (queryStatus != null) {
            localVarFormParams.put("query_status", queryStatus);
        }

        if (querySuccess != null) {
            localVarFormParams.put("query_success", querySuccess);
        }

        if (startAt != null) {
            localVarFormParams.put("start_at", startAt);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postActionNotificationExportsValidateBeforeCall(OffsetDateTime endAt, String queryFolder, String queryMessage, String queryPath, String queryRequestMethod, String queryRequestUrl, String queryStatus, Boolean querySuccess, OffsetDateTime startAt, Integer userId, final ApiCallback _callback) throws ApiException {
        return postActionNotificationExportsCall(endAt, queryFolder, queryMessage, queryPath, queryRequestMethod, queryRequestUrl, queryStatus, querySuccess, startAt, userId, _callback);

    }

    /**
     * Create Action Notification Export
     * Create Action Notification Export
     * @param endAt End date/time of export range. (optional)
     * @param queryFolder Return notifications that were triggered by actions in this folder. (optional)
     * @param queryMessage Error message associated with the request, if any. (optional)
     * @param queryPath Return notifications that were triggered by actions on this specific path. (optional)
     * @param queryRequestMethod The HTTP request method used by the webhook. (optional)
     * @param queryRequestUrl The target webhook URL. (optional)
     * @param queryStatus The HTTP status returned from the server in response to the webhook request. (optional)
     * @param querySuccess true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @return ActionNotificationExportEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ActionNotificationExportEntity postActionNotificationExports(OffsetDateTime endAt, String queryFolder, String queryMessage, String queryPath, String queryRequestMethod, String queryRequestUrl, String queryStatus, Boolean querySuccess, OffsetDateTime startAt, Integer userId) throws ApiException {
        ApiResponse<ActionNotificationExportEntity> localVarResp = postActionNotificationExportsWithHttpInfo(endAt, queryFolder, queryMessage, queryPath, queryRequestMethod, queryRequestUrl, queryStatus, querySuccess, startAt, userId);
        return localVarResp.getData();
    }

    /**
     * Create Action Notification Export
     * Create Action Notification Export
     * @param endAt End date/time of export range. (optional)
     * @param queryFolder Return notifications that were triggered by actions in this folder. (optional)
     * @param queryMessage Error message associated with the request, if any. (optional)
     * @param queryPath Return notifications that were triggered by actions on this specific path. (optional)
     * @param queryRequestMethod The HTTP request method used by the webhook. (optional)
     * @param queryRequestUrl The target webhook URL. (optional)
     * @param queryStatus The HTTP status returned from the server in response to the webhook request. (optional)
     * @param querySuccess true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @return ApiResponse&lt;ActionNotificationExportEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionNotificationExportEntity> postActionNotificationExportsWithHttpInfo(OffsetDateTime endAt, String queryFolder, String queryMessage, String queryPath, String queryRequestMethod, String queryRequestUrl, String queryStatus, Boolean querySuccess, OffsetDateTime startAt, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = postActionNotificationExportsValidateBeforeCall(endAt, queryFolder, queryMessage, queryPath, queryRequestMethod, queryRequestUrl, queryStatus, querySuccess, startAt, userId, null);
        Type localVarReturnType = new TypeToken<ActionNotificationExportEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Action Notification Export (asynchronously)
     * Create Action Notification Export
     * @param endAt End date/time of export range. (optional)
     * @param queryFolder Return notifications that were triggered by actions in this folder. (optional)
     * @param queryMessage Error message associated with the request, if any. (optional)
     * @param queryPath Return notifications that were triggered by actions on this specific path. (optional)
     * @param queryRequestMethod The HTTP request method used by the webhook. (optional)
     * @param queryRequestUrl The target webhook URL. (optional)
     * @param queryStatus The HTTP status returned from the server in response to the webhook request. (optional)
     * @param querySuccess true if the webhook request succeeded (i.e. returned a 200 or 204 response status). false otherwise. (optional)
     * @param startAt Start date/time of export range. (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ActionNotificationExports object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postActionNotificationExportsAsync(OffsetDateTime endAt, String queryFolder, String queryMessage, String queryPath, String queryRequestMethod, String queryRequestUrl, String queryStatus, Boolean querySuccess, OffsetDateTime startAt, Integer userId, final ApiCallback<ActionNotificationExportEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postActionNotificationExportsValidateBeforeCall(endAt, queryFolder, queryMessage, queryPath, queryRequestMethod, queryRequestUrl, queryStatus, querySuccess, startAt, userId, _callback);
        Type localVarReturnType = new TypeToken<ActionNotificationExportEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
