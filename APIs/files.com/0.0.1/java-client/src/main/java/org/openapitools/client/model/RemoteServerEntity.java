/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create Remote Server
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteServerEntity {
  public static final String SERIALIZED_NAME_AUTH_ACCOUNT_NAME = "auth_account_name";
  @SerializedName(SERIALIZED_NAME_AUTH_ACCOUNT_NAME)
  private String authAccountName;

  public static final String SERIALIZED_NAME_AUTH_SETUP_LINK = "auth_setup_link";
  @SerializedName(SERIALIZED_NAME_AUTH_SETUP_LINK)
  private String authSetupLink;

  /**
   * Either &#x60;in_setup&#x60; or &#x60;complete&#x60;
   */
  @JsonAdapter(AuthStatusEnum.Adapter.class)
  public enum AuthStatusEnum {
    NOT_APPLICABLE("not_applicable"),
    
    IN_SETUP("in_setup"),
    
    COMPLETE("complete"),
    
    REAUTHENTICATE("reauthenticate");

    private String value;

    AuthStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthStatusEnum fromValue(String value) {
      for (AuthStatusEnum b : AuthStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_STATUS = "auth_status";
  @SerializedName(SERIALIZED_NAME_AUTH_STATUS)
  private AuthStatusEnum authStatus;

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHOD = "authentication_method";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHOD)
  private String authenticationMethod;

  public static final String SERIALIZED_NAME_AWS_ACCESS_KEY = "aws_access_key";
  @SerializedName(SERIALIZED_NAME_AWS_ACCESS_KEY)
  private String awsAccessKey;

  public static final String SERIALIZED_NAME_AZURE_BLOB_STORAGE_ACCOUNT = "azure_blob_storage_account";
  @SerializedName(SERIALIZED_NAME_AZURE_BLOB_STORAGE_ACCOUNT)
  private String azureBlobStorageAccount;

  public static final String SERIALIZED_NAME_AZURE_BLOB_STORAGE_CONTAINER = "azure_blob_storage_container";
  @SerializedName(SERIALIZED_NAME_AZURE_BLOB_STORAGE_CONTAINER)
  private String azureBlobStorageContainer;

  public static final String SERIALIZED_NAME_AZURE_BLOB_STORAGE_SAS_TOKEN = "azure_blob_storage_sas_token";
  @SerializedName(SERIALIZED_NAME_AZURE_BLOB_STORAGE_SAS_TOKEN)
  private String azureBlobStorageSasToken;

  public static final String SERIALIZED_NAME_AZURE_FILES_STORAGE_ACCOUNT = "azure_files_storage_account";
  @SerializedName(SERIALIZED_NAME_AZURE_FILES_STORAGE_ACCOUNT)
  private String azureFilesStorageAccount;

  public static final String SERIALIZED_NAME_AZURE_FILES_STORAGE_SAS_TOKEN = "azure_files_storage_sas_token";
  @SerializedName(SERIALIZED_NAME_AZURE_FILES_STORAGE_SAS_TOKEN)
  private String azureFilesStorageSasToken;

  public static final String SERIALIZED_NAME_AZURE_FILES_STORAGE_SHARE_NAME = "azure_files_storage_share_name";
  @SerializedName(SERIALIZED_NAME_AZURE_FILES_STORAGE_SHARE_NAME)
  private String azureFilesStorageShareName;

  public static final String SERIALIZED_NAME_BACKBLAZE_B2_BUCKET = "backblaze_b2_bucket";
  @SerializedName(SERIALIZED_NAME_BACKBLAZE_B2_BUCKET)
  private String backblazeB2Bucket;

  public static final String SERIALIZED_NAME_BACKBLAZE_B2_S3_ENDPOINT = "backblaze_b2_s3_endpoint";
  @SerializedName(SERIALIZED_NAME_BACKBLAZE_B2_S3_ENDPOINT)
  private String backblazeB2S3Endpoint;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_ENABLE_DEDICATED_IPS = "enable_dedicated_ips";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEDICATED_IPS)
  private Boolean enableDedicatedIps;

  public static final String SERIALIZED_NAME_FILEBASE_ACCESS_KEY = "filebase_access_key";
  @SerializedName(SERIALIZED_NAME_FILEBASE_ACCESS_KEY)
  private String filebaseAccessKey;

  public static final String SERIALIZED_NAME_FILEBASE_BUCKET = "filebase_bucket";
  @SerializedName(SERIALIZED_NAME_FILEBASE_BUCKET)
  private String filebaseBucket;

  public static final String SERIALIZED_NAME_FILES_AGENT_API_TOKEN = "files_agent_api_token";
  @SerializedName(SERIALIZED_NAME_FILES_AGENT_API_TOKEN)
  private String filesAgentApiToken;

  /**
   * Local permissions for files agent. read_only, write_only, or read_write
   */
  @JsonAdapter(FilesAgentPermissionSetEnum.Adapter.class)
  public enum FilesAgentPermissionSetEnum {
    READ_WRITE("read_write"),
    
    READ_ONLY("read_only"),
    
    WRITE_ONLY("write_only");

    private String value;

    FilesAgentPermissionSetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilesAgentPermissionSetEnum fromValue(String value) {
      for (FilesAgentPermissionSetEnum b : FilesAgentPermissionSetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilesAgentPermissionSetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilesAgentPermissionSetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilesAgentPermissionSetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilesAgentPermissionSetEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilesAgentPermissionSetEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILES_AGENT_PERMISSION_SET = "files_agent_permission_set";
  @SerializedName(SERIALIZED_NAME_FILES_AGENT_PERMISSION_SET)
  private FilesAgentPermissionSetEnum filesAgentPermissionSet;

  public static final String SERIALIZED_NAME_FILES_AGENT_ROOT = "files_agent_root";
  @SerializedName(SERIALIZED_NAME_FILES_AGENT_ROOT)
  private String filesAgentRoot;

  public static final String SERIALIZED_NAME_GOOGLE_CLOUD_STORAGE_BUCKET = "google_cloud_storage_bucket";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLOUD_STORAGE_BUCKET)
  private String googleCloudStorageBucket;

  public static final String SERIALIZED_NAME_GOOGLE_CLOUD_STORAGE_PROJECT_ID = "google_cloud_storage_project_id";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLOUD_STORAGE_PROJECT_ID)
  private String googleCloudStorageProjectId;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MAX_CONNECTIONS = "max_connections";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTIONS)
  private Integer maxConnections;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Either personal or business_other account types
   */
  @JsonAdapter(OneDriveAccountTypeEnum.Adapter.class)
  public enum OneDriveAccountTypeEnum {
    PERSONAL("personal"),
    
    BUSINESS_OTHER("business_other");

    private String value;

    OneDriveAccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OneDriveAccountTypeEnum fromValue(String value) {
      for (OneDriveAccountTypeEnum b : OneDriveAccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OneDriveAccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OneDriveAccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OneDriveAccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OneDriveAccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OneDriveAccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ONE_DRIVE_ACCOUNT_TYPE = "one_drive_account_type";
  @SerializedName(SERIALIZED_NAME_ONE_DRIVE_ACCOUNT_TYPE)
  private OneDriveAccountTypeEnum oneDriveAccountType;

  public static final String SERIALIZED_NAME_PIN_TO_SITE_REGION = "pin_to_site_region";
  @SerializedName(SERIALIZED_NAME_PIN_TO_SITE_REGION)
  private Boolean pinToSiteRegion;

  public static final String SERIALIZED_NAME_PINNED_REGION = "pinned_region";
  @SerializedName(SERIALIZED_NAME_PINNED_REGION)
  private String pinnedRegion;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_RACKSPACE_CONTAINER = "rackspace_container";
  @SerializedName(SERIALIZED_NAME_RACKSPACE_CONTAINER)
  private String rackspaceContainer;

  public static final String SERIALIZED_NAME_RACKSPACE_REGION = "rackspace_region";
  @SerializedName(SERIALIZED_NAME_RACKSPACE_REGION)
  private String rackspaceRegion;

  public static final String SERIALIZED_NAME_RACKSPACE_USERNAME = "rackspace_username";
  @SerializedName(SERIALIZED_NAME_RACKSPACE_USERNAME)
  private String rackspaceUsername;

  public static final String SERIALIZED_NAME_REMOTE_HOME_PATH = "remote_home_path";
  @SerializedName(SERIALIZED_NAME_REMOTE_HOME_PATH)
  private String remoteHomePath;

  public static final String SERIALIZED_NAME_S3_BUCKET = "s3_bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_COMPATIBLE_ACCESS_KEY = "s3_compatible_access_key";
  @SerializedName(SERIALIZED_NAME_S3_COMPATIBLE_ACCESS_KEY)
  private String s3CompatibleAccessKey;

  public static final String SERIALIZED_NAME_S3_COMPATIBLE_BUCKET = "s3_compatible_bucket";
  @SerializedName(SERIALIZED_NAME_S3_COMPATIBLE_BUCKET)
  private String s3CompatibleBucket;

  public static final String SERIALIZED_NAME_S3_COMPATIBLE_ENDPOINT = "s3_compatible_endpoint";
  @SerializedName(SERIALIZED_NAME_S3_COMPATIBLE_ENDPOINT)
  private String s3CompatibleEndpoint;

  public static final String SERIALIZED_NAME_S3_COMPATIBLE_REGION = "s3_compatible_region";
  @SerializedName(SERIALIZED_NAME_S3_COMPATIBLE_REGION)
  private String s3CompatibleRegion;

  public static final String SERIALIZED_NAME_S3_REGION = "s3_region";
  @SerializedName(SERIALIZED_NAME_S3_REGION)
  private String s3Region;

  /**
   * Remote server certificate
   */
  @JsonAdapter(ServerCertificateEnum.Adapter.class)
  public enum ServerCertificateEnum {
    REQUIRE_MATCH("require_match"),
    
    ALLOW_ANY("allow_any");

    private String value;

    ServerCertificateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerCertificateEnum fromValue(String value) {
      for (ServerCertificateEnum b : ServerCertificateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServerCertificateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerCertificateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerCertificateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServerCertificateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServerCertificateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE = "server_certificate";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE)
  private ServerCertificateEnum serverCertificate;

  public static final String SERIALIZED_NAME_SERVER_HOST_KEY = "server_host_key";
  @SerializedName(SERIALIZED_NAME_SERVER_HOST_KEY)
  private String serverHostKey;

  /**
   * Remote server type.
   */
  @JsonAdapter(ServerTypeEnum.Adapter.class)
  public enum ServerTypeEnum {
    FTP("ftp"),
    
    SFTP("sftp"),
    
    S3("s3"),
    
    GOOGLE_CLOUD_STORAGE("google_cloud_storage"),
    
    WEBDAV("webdav"),
    
    WASABI("wasabi"),
    
    BACKBLAZE_B2("backblaze_b2"),
    
    ONE_DRIVE("one_drive"),
    
    RACKSPACE("rackspace"),
    
    BOX("box"),
    
    DROPBOX("dropbox"),
    
    GOOGLE_DRIVE("google_drive"),
    
    AZURE("azure"),
    
    SHAREPOINT("sharepoint"),
    
    S3_COMPATIBLE("s3_compatible"),
    
    AZURE_FILES("azure_files"),
    
    FILES_AGENT("files_agent"),
    
    FILEBASE("filebase");

    private String value;

    ServerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerTypeEnum fromValue(String value) {
      for (ServerTypeEnum b : ServerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVER_TYPE = "server_type";
  @SerializedName(SERIALIZED_NAME_SERVER_TYPE)
  private ServerTypeEnum serverType;

  /**
   * Should we require SSL?
   */
  @JsonAdapter(SslEnum.Adapter.class)
  public enum SslEnum {
    IF_AVAILABLE("if_available"),
    
    REQUIRE("require"),
    
    REQUIRE_IMPLICIT("require_implicit"),
    
    NEVER("never");

    private String value;

    SslEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SslEnum fromValue(String value) {
      for (SslEnum b : SslEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SslEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SslEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SslEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SslEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SslEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private SslEnum ssl;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WASABI_ACCESS_KEY = "wasabi_access_key";
  @SerializedName(SERIALIZED_NAME_WASABI_ACCESS_KEY)
  private String wasabiAccessKey;

  public static final String SERIALIZED_NAME_WASABI_BUCKET = "wasabi_bucket";
  @SerializedName(SERIALIZED_NAME_WASABI_BUCKET)
  private String wasabiBucket;

  public static final String SERIALIZED_NAME_WASABI_REGION = "wasabi_region";
  @SerializedName(SERIALIZED_NAME_WASABI_REGION)
  private String wasabiRegion;

  public RemoteServerEntity() {
  }

  public RemoteServerEntity authAccountName(String authAccountName) {
    this.authAccountName = authAccountName;
    return this;
  }

  /**
   * Describes the authorized account
   * @return authAccountName
   */
  @javax.annotation.Nullable
  public String getAuthAccountName() {
    return authAccountName;
  }

  public void setAuthAccountName(String authAccountName) {
    this.authAccountName = authAccountName;
  }


  public RemoteServerEntity authSetupLink(String authSetupLink) {
    this.authSetupLink = authSetupLink;
    return this;
  }

  /**
   * Returns link to login with an Oauth provider
   * @return authSetupLink
   */
  @javax.annotation.Nullable
  public String getAuthSetupLink() {
    return authSetupLink;
  }

  public void setAuthSetupLink(String authSetupLink) {
    this.authSetupLink = authSetupLink;
  }


  public RemoteServerEntity authStatus(AuthStatusEnum authStatus) {
    this.authStatus = authStatus;
    return this;
  }

  /**
   * Either &#x60;in_setup&#x60; or &#x60;complete&#x60;
   * @return authStatus
   */
  @javax.annotation.Nullable
  public AuthStatusEnum getAuthStatus() {
    return authStatus;
  }

  public void setAuthStatus(AuthStatusEnum authStatus) {
    this.authStatus = authStatus;
  }


  public RemoteServerEntity authenticationMethod(String authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
    return this;
  }

  /**
   * Type of authentication method
   * @return authenticationMethod
   */
  @javax.annotation.Nullable
  public String getAuthenticationMethod() {
    return authenticationMethod;
  }

  public void setAuthenticationMethod(String authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
  }


  public RemoteServerEntity awsAccessKey(String awsAccessKey) {
    this.awsAccessKey = awsAccessKey;
    return this;
  }

  /**
   * AWS Access Key.
   * @return awsAccessKey
   */
  @javax.annotation.Nullable
  public String getAwsAccessKey() {
    return awsAccessKey;
  }

  public void setAwsAccessKey(String awsAccessKey) {
    this.awsAccessKey = awsAccessKey;
  }


  public RemoteServerEntity azureBlobStorageAccount(String azureBlobStorageAccount) {
    this.azureBlobStorageAccount = azureBlobStorageAccount;
    return this;
  }

  /**
   * Azure Blob Storage Account name
   * @return azureBlobStorageAccount
   */
  @javax.annotation.Nullable
  public String getAzureBlobStorageAccount() {
    return azureBlobStorageAccount;
  }

  public void setAzureBlobStorageAccount(String azureBlobStorageAccount) {
    this.azureBlobStorageAccount = azureBlobStorageAccount;
  }


  public RemoteServerEntity azureBlobStorageContainer(String azureBlobStorageContainer) {
    this.azureBlobStorageContainer = azureBlobStorageContainer;
    return this;
  }

  /**
   * Azure Blob Storage Container name
   * @return azureBlobStorageContainer
   */
  @javax.annotation.Nullable
  public String getAzureBlobStorageContainer() {
    return azureBlobStorageContainer;
  }

  public void setAzureBlobStorageContainer(String azureBlobStorageContainer) {
    this.azureBlobStorageContainer = azureBlobStorageContainer;
  }


  public RemoteServerEntity azureBlobStorageSasToken(String azureBlobStorageSasToken) {
    this.azureBlobStorageSasToken = azureBlobStorageSasToken;
    return this;
  }

  /**
   * Shared Access Signature (SAS) token
   * @return azureBlobStorageSasToken
   */
  @javax.annotation.Nullable
  public String getAzureBlobStorageSasToken() {
    return azureBlobStorageSasToken;
  }

  public void setAzureBlobStorageSasToken(String azureBlobStorageSasToken) {
    this.azureBlobStorageSasToken = azureBlobStorageSasToken;
  }


  public RemoteServerEntity azureFilesStorageAccount(String azureFilesStorageAccount) {
    this.azureFilesStorageAccount = azureFilesStorageAccount;
    return this;
  }

  /**
   * Azure File Storage Account name
   * @return azureFilesStorageAccount
   */
  @javax.annotation.Nullable
  public String getAzureFilesStorageAccount() {
    return azureFilesStorageAccount;
  }

  public void setAzureFilesStorageAccount(String azureFilesStorageAccount) {
    this.azureFilesStorageAccount = azureFilesStorageAccount;
  }


  public RemoteServerEntity azureFilesStorageSasToken(String azureFilesStorageSasToken) {
    this.azureFilesStorageSasToken = azureFilesStorageSasToken;
    return this;
  }

  /**
   * Shared Access Signature (SAS) token
   * @return azureFilesStorageSasToken
   */
  @javax.annotation.Nullable
  public String getAzureFilesStorageSasToken() {
    return azureFilesStorageSasToken;
  }

  public void setAzureFilesStorageSasToken(String azureFilesStorageSasToken) {
    this.azureFilesStorageSasToken = azureFilesStorageSasToken;
  }


  public RemoteServerEntity azureFilesStorageShareName(String azureFilesStorageShareName) {
    this.azureFilesStorageShareName = azureFilesStorageShareName;
    return this;
  }

  /**
   * Azure File Storage Share name
   * @return azureFilesStorageShareName
   */
  @javax.annotation.Nullable
  public String getAzureFilesStorageShareName() {
    return azureFilesStorageShareName;
  }

  public void setAzureFilesStorageShareName(String azureFilesStorageShareName) {
    this.azureFilesStorageShareName = azureFilesStorageShareName;
  }


  public RemoteServerEntity backblazeB2Bucket(String backblazeB2Bucket) {
    this.backblazeB2Bucket = backblazeB2Bucket;
    return this;
  }

  /**
   * Backblaze B2 Cloud Storage Bucket name
   * @return backblazeB2Bucket
   */
  @javax.annotation.Nullable
  public String getBackblazeB2Bucket() {
    return backblazeB2Bucket;
  }

  public void setBackblazeB2Bucket(String backblazeB2Bucket) {
    this.backblazeB2Bucket = backblazeB2Bucket;
  }


  public RemoteServerEntity backblazeB2S3Endpoint(String backblazeB2S3Endpoint) {
    this.backblazeB2S3Endpoint = backblazeB2S3Endpoint;
    return this;
  }

  /**
   * Backblaze B2 Cloud Storage S3 Endpoint
   * @return backblazeB2S3Endpoint
   */
  @javax.annotation.Nullable
  public String getBackblazeB2S3Endpoint() {
    return backblazeB2S3Endpoint;
  }

  public void setBackblazeB2S3Endpoint(String backblazeB2S3Endpoint) {
    this.backblazeB2S3Endpoint = backblazeB2S3Endpoint;
  }


  public RemoteServerEntity disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * If true, this server has been disabled due to failures.  Make any change or set disabled to false to clear this flag.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public RemoteServerEntity enableDedicatedIps(Boolean enableDedicatedIps) {
    this.enableDedicatedIps = enableDedicatedIps;
    return this;
  }

  /**
   * &#x60;true&#x60; if remote server only accepts connections from dedicated IPs
   * @return enableDedicatedIps
   */
  @javax.annotation.Nullable
  public Boolean getEnableDedicatedIps() {
    return enableDedicatedIps;
  }

  public void setEnableDedicatedIps(Boolean enableDedicatedIps) {
    this.enableDedicatedIps = enableDedicatedIps;
  }


  public RemoteServerEntity filebaseAccessKey(String filebaseAccessKey) {
    this.filebaseAccessKey = filebaseAccessKey;
    return this;
  }

  /**
   * Filebase Access Key.
   * @return filebaseAccessKey
   */
  @javax.annotation.Nullable
  public String getFilebaseAccessKey() {
    return filebaseAccessKey;
  }

  public void setFilebaseAccessKey(String filebaseAccessKey) {
    this.filebaseAccessKey = filebaseAccessKey;
  }


  public RemoteServerEntity filebaseBucket(String filebaseBucket) {
    this.filebaseBucket = filebaseBucket;
    return this;
  }

  /**
   * Filebase Bucket name
   * @return filebaseBucket
   */
  @javax.annotation.Nullable
  public String getFilebaseBucket() {
    return filebaseBucket;
  }

  public void setFilebaseBucket(String filebaseBucket) {
    this.filebaseBucket = filebaseBucket;
  }


  public RemoteServerEntity filesAgentApiToken(String filesAgentApiToken) {
    this.filesAgentApiToken = filesAgentApiToken;
    return this;
  }

  /**
   * Files Agent API Token
   * @return filesAgentApiToken
   */
  @javax.annotation.Nullable
  public String getFilesAgentApiToken() {
    return filesAgentApiToken;
  }

  public void setFilesAgentApiToken(String filesAgentApiToken) {
    this.filesAgentApiToken = filesAgentApiToken;
  }


  public RemoteServerEntity filesAgentPermissionSet(FilesAgentPermissionSetEnum filesAgentPermissionSet) {
    this.filesAgentPermissionSet = filesAgentPermissionSet;
    return this;
  }

  /**
   * Local permissions for files agent. read_only, write_only, or read_write
   * @return filesAgentPermissionSet
   */
  @javax.annotation.Nullable
  public FilesAgentPermissionSetEnum getFilesAgentPermissionSet() {
    return filesAgentPermissionSet;
  }

  public void setFilesAgentPermissionSet(FilesAgentPermissionSetEnum filesAgentPermissionSet) {
    this.filesAgentPermissionSet = filesAgentPermissionSet;
  }


  public RemoteServerEntity filesAgentRoot(String filesAgentRoot) {
    this.filesAgentRoot = filesAgentRoot;
    return this;
  }

  /**
   * Agent local root path
   * @return filesAgentRoot
   */
  @javax.annotation.Nullable
  public String getFilesAgentRoot() {
    return filesAgentRoot;
  }

  public void setFilesAgentRoot(String filesAgentRoot) {
    this.filesAgentRoot = filesAgentRoot;
  }


  public RemoteServerEntity googleCloudStorageBucket(String googleCloudStorageBucket) {
    this.googleCloudStorageBucket = googleCloudStorageBucket;
    return this;
  }

  /**
   * Google Cloud Storage bucket name
   * @return googleCloudStorageBucket
   */
  @javax.annotation.Nullable
  public String getGoogleCloudStorageBucket() {
    return googleCloudStorageBucket;
  }

  public void setGoogleCloudStorageBucket(String googleCloudStorageBucket) {
    this.googleCloudStorageBucket = googleCloudStorageBucket;
  }


  public RemoteServerEntity googleCloudStorageProjectId(String googleCloudStorageProjectId) {
    this.googleCloudStorageProjectId = googleCloudStorageProjectId;
    return this;
  }

  /**
   * Google Cloud Project ID
   * @return googleCloudStorageProjectId
   */
  @javax.annotation.Nullable
  public String getGoogleCloudStorageProjectId() {
    return googleCloudStorageProjectId;
  }

  public void setGoogleCloudStorageProjectId(String googleCloudStorageProjectId) {
    this.googleCloudStorageProjectId = googleCloudStorageProjectId;
  }


  public RemoteServerEntity hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Hostname or IP address
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public RemoteServerEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Remote server ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RemoteServerEntity maxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
    return this;
  }

  /**
   * Max number of parallel connections.  Ignored for S3 connections (we will parallelize these as much as possible).
   * @return maxConnections
   */
  @javax.annotation.Nullable
  public Integer getMaxConnections() {
    return maxConnections;
  }

  public void setMaxConnections(Integer maxConnections) {
    this.maxConnections = maxConnections;
  }


  public RemoteServerEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Internal name for your reference
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RemoteServerEntity oneDriveAccountType(OneDriveAccountTypeEnum oneDriveAccountType) {
    this.oneDriveAccountType = oneDriveAccountType;
    return this;
  }

  /**
   * Either personal or business_other account types
   * @return oneDriveAccountType
   */
  @javax.annotation.Nullable
  public OneDriveAccountTypeEnum getOneDriveAccountType() {
    return oneDriveAccountType;
  }

  public void setOneDriveAccountType(OneDriveAccountTypeEnum oneDriveAccountType) {
    this.oneDriveAccountType = oneDriveAccountType;
  }


  public RemoteServerEntity pinToSiteRegion(Boolean pinToSiteRegion) {
    this.pinToSiteRegion = pinToSiteRegion;
    return this;
  }

  /**
   * If true, we will ensure that all communications with this remote server are made through the primary region of the site.  This setting can also be overridden by a sitewide setting which will force it to true.
   * @return pinToSiteRegion
   */
  @javax.annotation.Nullable
  public Boolean getPinToSiteRegion() {
    return pinToSiteRegion;
  }

  public void setPinToSiteRegion(Boolean pinToSiteRegion) {
    this.pinToSiteRegion = pinToSiteRegion;
  }


  public RemoteServerEntity pinnedRegion(String pinnedRegion) {
    this.pinnedRegion = pinnedRegion;
    return this;
  }

  /**
   * If set, all communciations with this remote server are made through the provided region.
   * @return pinnedRegion
   */
  @javax.annotation.Nullable
  public String getPinnedRegion() {
    return pinnedRegion;
  }

  public void setPinnedRegion(String pinnedRegion) {
    this.pinnedRegion = pinnedRegion;
  }


  public RemoteServerEntity port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Port for remote server.  Not needed for S3.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public RemoteServerEntity rackspaceContainer(String rackspaceContainer) {
    this.rackspaceContainer = rackspaceContainer;
    return this;
  }

  /**
   * The name of the container (top level directory) where files will sync.
   * @return rackspaceContainer
   */
  @javax.annotation.Nullable
  public String getRackspaceContainer() {
    return rackspaceContainer;
  }

  public void setRackspaceContainer(String rackspaceContainer) {
    this.rackspaceContainer = rackspaceContainer;
  }


  public RemoteServerEntity rackspaceRegion(String rackspaceRegion) {
    this.rackspaceRegion = rackspaceRegion;
    return this;
  }

  /**
   * Three letter airport code for Rackspace region. See https://support.rackspace.com/how-to/about-regions/
   * @return rackspaceRegion
   */
  @javax.annotation.Nullable
  public String getRackspaceRegion() {
    return rackspaceRegion;
  }

  public void setRackspaceRegion(String rackspaceRegion) {
    this.rackspaceRegion = rackspaceRegion;
  }


  public RemoteServerEntity rackspaceUsername(String rackspaceUsername) {
    this.rackspaceUsername = rackspaceUsername;
    return this;
  }

  /**
   * Rackspace username used to login to the Rackspace Cloud Control Panel.
   * @return rackspaceUsername
   */
  @javax.annotation.Nullable
  public String getRackspaceUsername() {
    return rackspaceUsername;
  }

  public void setRackspaceUsername(String rackspaceUsername) {
    this.rackspaceUsername = rackspaceUsername;
  }


  public RemoteServerEntity remoteHomePath(String remoteHomePath) {
    this.remoteHomePath = remoteHomePath;
    return this;
  }

  /**
   * Initial home folder on remote server
   * @return remoteHomePath
   */
  @javax.annotation.Nullable
  public String getRemoteHomePath() {
    return remoteHomePath;
  }

  public void setRemoteHomePath(String remoteHomePath) {
    this.remoteHomePath = remoteHomePath;
  }


  public RemoteServerEntity s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * S3 bucket name
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public RemoteServerEntity s3CompatibleAccessKey(String s3CompatibleAccessKey) {
    this.s3CompatibleAccessKey = s3CompatibleAccessKey;
    return this;
  }

  /**
   * S3-compatible Access Key.
   * @return s3CompatibleAccessKey
   */
  @javax.annotation.Nullable
  public String getS3CompatibleAccessKey() {
    return s3CompatibleAccessKey;
  }

  public void setS3CompatibleAccessKey(String s3CompatibleAccessKey) {
    this.s3CompatibleAccessKey = s3CompatibleAccessKey;
  }


  public RemoteServerEntity s3CompatibleBucket(String s3CompatibleBucket) {
    this.s3CompatibleBucket = s3CompatibleBucket;
    return this;
  }

  /**
   * S3-compatible Bucket name
   * @return s3CompatibleBucket
   */
  @javax.annotation.Nullable
  public String getS3CompatibleBucket() {
    return s3CompatibleBucket;
  }

  public void setS3CompatibleBucket(String s3CompatibleBucket) {
    this.s3CompatibleBucket = s3CompatibleBucket;
  }


  public RemoteServerEntity s3CompatibleEndpoint(String s3CompatibleEndpoint) {
    this.s3CompatibleEndpoint = s3CompatibleEndpoint;
    return this;
  }

  /**
   * S3-compatible endpoint
   * @return s3CompatibleEndpoint
   */
  @javax.annotation.Nullable
  public String getS3CompatibleEndpoint() {
    return s3CompatibleEndpoint;
  }

  public void setS3CompatibleEndpoint(String s3CompatibleEndpoint) {
    this.s3CompatibleEndpoint = s3CompatibleEndpoint;
  }


  public RemoteServerEntity s3CompatibleRegion(String s3CompatibleRegion) {
    this.s3CompatibleRegion = s3CompatibleRegion;
    return this;
  }

  /**
   * S3-compatible endpoint
   * @return s3CompatibleRegion
   */
  @javax.annotation.Nullable
  public String getS3CompatibleRegion() {
    return s3CompatibleRegion;
  }

  public void setS3CompatibleRegion(String s3CompatibleRegion) {
    this.s3CompatibleRegion = s3CompatibleRegion;
  }


  public RemoteServerEntity s3Region(String s3Region) {
    this.s3Region = s3Region;
    return this;
  }

  /**
   * S3 region
   * @return s3Region
   */
  @javax.annotation.Nullable
  public String getS3Region() {
    return s3Region;
  }

  public void setS3Region(String s3Region) {
    this.s3Region = s3Region;
  }


  public RemoteServerEntity serverCertificate(ServerCertificateEnum serverCertificate) {
    this.serverCertificate = serverCertificate;
    return this;
  }

  /**
   * Remote server certificate
   * @return serverCertificate
   */
  @javax.annotation.Nullable
  public ServerCertificateEnum getServerCertificate() {
    return serverCertificate;
  }

  public void setServerCertificate(ServerCertificateEnum serverCertificate) {
    this.serverCertificate = serverCertificate;
  }


  public RemoteServerEntity serverHostKey(String serverHostKey) {
    this.serverHostKey = serverHostKey;
    return this;
  }

  /**
   * Remote server SSH Host Key. If provided, we will require that the server host key matches the provided key. Uses OpenSSH format similar to what would go into ~/.ssh/known_hosts
   * @return serverHostKey
   */
  @javax.annotation.Nullable
  public String getServerHostKey() {
    return serverHostKey;
  }

  public void setServerHostKey(String serverHostKey) {
    this.serverHostKey = serverHostKey;
  }


  public RemoteServerEntity serverType(ServerTypeEnum serverType) {
    this.serverType = serverType;
    return this;
  }

  /**
   * Remote server type.
   * @return serverType
   */
  @javax.annotation.Nullable
  public ServerTypeEnum getServerType() {
    return serverType;
  }

  public void setServerType(ServerTypeEnum serverType) {
    this.serverType = serverType;
  }


  public RemoteServerEntity ssl(SslEnum ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Should we require SSL?
   * @return ssl
   */
  @javax.annotation.Nullable
  public SslEnum getSsl() {
    return ssl;
  }

  public void setSsl(SslEnum ssl) {
    this.ssl = ssl;
  }


  public RemoteServerEntity username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Remote server username.  Not needed for S3 buckets.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public RemoteServerEntity wasabiAccessKey(String wasabiAccessKey) {
    this.wasabiAccessKey = wasabiAccessKey;
    return this;
  }

  /**
   * Wasabi access key.
   * @return wasabiAccessKey
   */
  @javax.annotation.Nullable
  public String getWasabiAccessKey() {
    return wasabiAccessKey;
  }

  public void setWasabiAccessKey(String wasabiAccessKey) {
    this.wasabiAccessKey = wasabiAccessKey;
  }


  public RemoteServerEntity wasabiBucket(String wasabiBucket) {
    this.wasabiBucket = wasabiBucket;
    return this;
  }

  /**
   * Wasabi Bucket name
   * @return wasabiBucket
   */
  @javax.annotation.Nullable
  public String getWasabiBucket() {
    return wasabiBucket;
  }

  public void setWasabiBucket(String wasabiBucket) {
    this.wasabiBucket = wasabiBucket;
  }


  public RemoteServerEntity wasabiRegion(String wasabiRegion) {
    this.wasabiRegion = wasabiRegion;
    return this;
  }

  /**
   * Wasabi region
   * @return wasabiRegion
   */
  @javax.annotation.Nullable
  public String getWasabiRegion() {
    return wasabiRegion;
  }

  public void setWasabiRegion(String wasabiRegion) {
    this.wasabiRegion = wasabiRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteServerEntity remoteServerEntity = (RemoteServerEntity) o;
    return Objects.equals(this.authAccountName, remoteServerEntity.authAccountName) &&
        Objects.equals(this.authSetupLink, remoteServerEntity.authSetupLink) &&
        Objects.equals(this.authStatus, remoteServerEntity.authStatus) &&
        Objects.equals(this.authenticationMethod, remoteServerEntity.authenticationMethod) &&
        Objects.equals(this.awsAccessKey, remoteServerEntity.awsAccessKey) &&
        Objects.equals(this.azureBlobStorageAccount, remoteServerEntity.azureBlobStorageAccount) &&
        Objects.equals(this.azureBlobStorageContainer, remoteServerEntity.azureBlobStorageContainer) &&
        Objects.equals(this.azureBlobStorageSasToken, remoteServerEntity.azureBlobStorageSasToken) &&
        Objects.equals(this.azureFilesStorageAccount, remoteServerEntity.azureFilesStorageAccount) &&
        Objects.equals(this.azureFilesStorageSasToken, remoteServerEntity.azureFilesStorageSasToken) &&
        Objects.equals(this.azureFilesStorageShareName, remoteServerEntity.azureFilesStorageShareName) &&
        Objects.equals(this.backblazeB2Bucket, remoteServerEntity.backblazeB2Bucket) &&
        Objects.equals(this.backblazeB2S3Endpoint, remoteServerEntity.backblazeB2S3Endpoint) &&
        Objects.equals(this.disabled, remoteServerEntity.disabled) &&
        Objects.equals(this.enableDedicatedIps, remoteServerEntity.enableDedicatedIps) &&
        Objects.equals(this.filebaseAccessKey, remoteServerEntity.filebaseAccessKey) &&
        Objects.equals(this.filebaseBucket, remoteServerEntity.filebaseBucket) &&
        Objects.equals(this.filesAgentApiToken, remoteServerEntity.filesAgentApiToken) &&
        Objects.equals(this.filesAgentPermissionSet, remoteServerEntity.filesAgentPermissionSet) &&
        Objects.equals(this.filesAgentRoot, remoteServerEntity.filesAgentRoot) &&
        Objects.equals(this.googleCloudStorageBucket, remoteServerEntity.googleCloudStorageBucket) &&
        Objects.equals(this.googleCloudStorageProjectId, remoteServerEntity.googleCloudStorageProjectId) &&
        Objects.equals(this.hostname, remoteServerEntity.hostname) &&
        Objects.equals(this.id, remoteServerEntity.id) &&
        Objects.equals(this.maxConnections, remoteServerEntity.maxConnections) &&
        Objects.equals(this.name, remoteServerEntity.name) &&
        Objects.equals(this.oneDriveAccountType, remoteServerEntity.oneDriveAccountType) &&
        Objects.equals(this.pinToSiteRegion, remoteServerEntity.pinToSiteRegion) &&
        Objects.equals(this.pinnedRegion, remoteServerEntity.pinnedRegion) &&
        Objects.equals(this.port, remoteServerEntity.port) &&
        Objects.equals(this.rackspaceContainer, remoteServerEntity.rackspaceContainer) &&
        Objects.equals(this.rackspaceRegion, remoteServerEntity.rackspaceRegion) &&
        Objects.equals(this.rackspaceUsername, remoteServerEntity.rackspaceUsername) &&
        Objects.equals(this.remoteHomePath, remoteServerEntity.remoteHomePath) &&
        Objects.equals(this.s3Bucket, remoteServerEntity.s3Bucket) &&
        Objects.equals(this.s3CompatibleAccessKey, remoteServerEntity.s3CompatibleAccessKey) &&
        Objects.equals(this.s3CompatibleBucket, remoteServerEntity.s3CompatibleBucket) &&
        Objects.equals(this.s3CompatibleEndpoint, remoteServerEntity.s3CompatibleEndpoint) &&
        Objects.equals(this.s3CompatibleRegion, remoteServerEntity.s3CompatibleRegion) &&
        Objects.equals(this.s3Region, remoteServerEntity.s3Region) &&
        Objects.equals(this.serverCertificate, remoteServerEntity.serverCertificate) &&
        Objects.equals(this.serverHostKey, remoteServerEntity.serverHostKey) &&
        Objects.equals(this.serverType, remoteServerEntity.serverType) &&
        Objects.equals(this.ssl, remoteServerEntity.ssl) &&
        Objects.equals(this.username, remoteServerEntity.username) &&
        Objects.equals(this.wasabiAccessKey, remoteServerEntity.wasabiAccessKey) &&
        Objects.equals(this.wasabiBucket, remoteServerEntity.wasabiBucket) &&
        Objects.equals(this.wasabiRegion, remoteServerEntity.wasabiRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authAccountName, authSetupLink, authStatus, authenticationMethod, awsAccessKey, azureBlobStorageAccount, azureBlobStorageContainer, azureBlobStorageSasToken, azureFilesStorageAccount, azureFilesStorageSasToken, azureFilesStorageShareName, backblazeB2Bucket, backblazeB2S3Endpoint, disabled, enableDedicatedIps, filebaseAccessKey, filebaseBucket, filesAgentApiToken, filesAgentPermissionSet, filesAgentRoot, googleCloudStorageBucket, googleCloudStorageProjectId, hostname, id, maxConnections, name, oneDriveAccountType, pinToSiteRegion, pinnedRegion, port, rackspaceContainer, rackspaceRegion, rackspaceUsername, remoteHomePath, s3Bucket, s3CompatibleAccessKey, s3CompatibleBucket, s3CompatibleEndpoint, s3CompatibleRegion, s3Region, serverCertificate, serverHostKey, serverType, ssl, username, wasabiAccessKey, wasabiBucket, wasabiRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteServerEntity {\n");
    sb.append("    authAccountName: ").append(toIndentedString(authAccountName)).append("\n");
    sb.append("    authSetupLink: ").append(toIndentedString(authSetupLink)).append("\n");
    sb.append("    authStatus: ").append(toIndentedString(authStatus)).append("\n");
    sb.append("    authenticationMethod: ").append(toIndentedString(authenticationMethod)).append("\n");
    sb.append("    awsAccessKey: ").append(toIndentedString(awsAccessKey)).append("\n");
    sb.append("    azureBlobStorageAccount: ").append(toIndentedString(azureBlobStorageAccount)).append("\n");
    sb.append("    azureBlobStorageContainer: ").append(toIndentedString(azureBlobStorageContainer)).append("\n");
    sb.append("    azureBlobStorageSasToken: ").append(toIndentedString(azureBlobStorageSasToken)).append("\n");
    sb.append("    azureFilesStorageAccount: ").append(toIndentedString(azureFilesStorageAccount)).append("\n");
    sb.append("    azureFilesStorageSasToken: ").append(toIndentedString(azureFilesStorageSasToken)).append("\n");
    sb.append("    azureFilesStorageShareName: ").append(toIndentedString(azureFilesStorageShareName)).append("\n");
    sb.append("    backblazeB2Bucket: ").append(toIndentedString(backblazeB2Bucket)).append("\n");
    sb.append("    backblazeB2S3Endpoint: ").append(toIndentedString(backblazeB2S3Endpoint)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    enableDedicatedIps: ").append(toIndentedString(enableDedicatedIps)).append("\n");
    sb.append("    filebaseAccessKey: ").append(toIndentedString(filebaseAccessKey)).append("\n");
    sb.append("    filebaseBucket: ").append(toIndentedString(filebaseBucket)).append("\n");
    sb.append("    filesAgentApiToken: ").append(toIndentedString(filesAgentApiToken)).append("\n");
    sb.append("    filesAgentPermissionSet: ").append(toIndentedString(filesAgentPermissionSet)).append("\n");
    sb.append("    filesAgentRoot: ").append(toIndentedString(filesAgentRoot)).append("\n");
    sb.append("    googleCloudStorageBucket: ").append(toIndentedString(googleCloudStorageBucket)).append("\n");
    sb.append("    googleCloudStorageProjectId: ").append(toIndentedString(googleCloudStorageProjectId)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    oneDriveAccountType: ").append(toIndentedString(oneDriveAccountType)).append("\n");
    sb.append("    pinToSiteRegion: ").append(toIndentedString(pinToSiteRegion)).append("\n");
    sb.append("    pinnedRegion: ").append(toIndentedString(pinnedRegion)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    rackspaceContainer: ").append(toIndentedString(rackspaceContainer)).append("\n");
    sb.append("    rackspaceRegion: ").append(toIndentedString(rackspaceRegion)).append("\n");
    sb.append("    rackspaceUsername: ").append(toIndentedString(rackspaceUsername)).append("\n");
    sb.append("    remoteHomePath: ").append(toIndentedString(remoteHomePath)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3CompatibleAccessKey: ").append(toIndentedString(s3CompatibleAccessKey)).append("\n");
    sb.append("    s3CompatibleBucket: ").append(toIndentedString(s3CompatibleBucket)).append("\n");
    sb.append("    s3CompatibleEndpoint: ").append(toIndentedString(s3CompatibleEndpoint)).append("\n");
    sb.append("    s3CompatibleRegion: ").append(toIndentedString(s3CompatibleRegion)).append("\n");
    sb.append("    s3Region: ").append(toIndentedString(s3Region)).append("\n");
    sb.append("    serverCertificate: ").append(toIndentedString(serverCertificate)).append("\n");
    sb.append("    serverHostKey: ").append(toIndentedString(serverHostKey)).append("\n");
    sb.append("    serverType: ").append(toIndentedString(serverType)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    wasabiAccessKey: ").append(toIndentedString(wasabiAccessKey)).append("\n");
    sb.append("    wasabiBucket: ").append(toIndentedString(wasabiBucket)).append("\n");
    sb.append("    wasabiRegion: ").append(toIndentedString(wasabiRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_account_name");
    openapiFields.add("auth_setup_link");
    openapiFields.add("auth_status");
    openapiFields.add("authentication_method");
    openapiFields.add("aws_access_key");
    openapiFields.add("azure_blob_storage_account");
    openapiFields.add("azure_blob_storage_container");
    openapiFields.add("azure_blob_storage_sas_token");
    openapiFields.add("azure_files_storage_account");
    openapiFields.add("azure_files_storage_sas_token");
    openapiFields.add("azure_files_storage_share_name");
    openapiFields.add("backblaze_b2_bucket");
    openapiFields.add("backblaze_b2_s3_endpoint");
    openapiFields.add("disabled");
    openapiFields.add("enable_dedicated_ips");
    openapiFields.add("filebase_access_key");
    openapiFields.add("filebase_bucket");
    openapiFields.add("files_agent_api_token");
    openapiFields.add("files_agent_permission_set");
    openapiFields.add("files_agent_root");
    openapiFields.add("google_cloud_storage_bucket");
    openapiFields.add("google_cloud_storage_project_id");
    openapiFields.add("hostname");
    openapiFields.add("id");
    openapiFields.add("max_connections");
    openapiFields.add("name");
    openapiFields.add("one_drive_account_type");
    openapiFields.add("pin_to_site_region");
    openapiFields.add("pinned_region");
    openapiFields.add("port");
    openapiFields.add("rackspace_container");
    openapiFields.add("rackspace_region");
    openapiFields.add("rackspace_username");
    openapiFields.add("remote_home_path");
    openapiFields.add("s3_bucket");
    openapiFields.add("s3_compatible_access_key");
    openapiFields.add("s3_compatible_bucket");
    openapiFields.add("s3_compatible_endpoint");
    openapiFields.add("s3_compatible_region");
    openapiFields.add("s3_region");
    openapiFields.add("server_certificate");
    openapiFields.add("server_host_key");
    openapiFields.add("server_type");
    openapiFields.add("ssl");
    openapiFields.add("username");
    openapiFields.add("wasabi_access_key");
    openapiFields.add("wasabi_bucket");
    openapiFields.add("wasabi_region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteServerEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteServerEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteServerEntity is not found in the empty JSON string", RemoteServerEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteServerEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteServerEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_account_name") != null && !jsonObj.get("auth_account_name").isJsonNull()) && !jsonObj.get("auth_account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_account_name").toString()));
      }
      if ((jsonObj.get("auth_setup_link") != null && !jsonObj.get("auth_setup_link").isJsonNull()) && !jsonObj.get("auth_setup_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_setup_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_setup_link").toString()));
      }
      if ((jsonObj.get("auth_status") != null && !jsonObj.get("auth_status").isJsonNull()) && !jsonObj.get("auth_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_status").toString()));
      }
      // validate the optional field `auth_status`
      if (jsonObj.get("auth_status") != null && !jsonObj.get("auth_status").isJsonNull()) {
        AuthStatusEnum.validateJsonElement(jsonObj.get("auth_status"));
      }
      if ((jsonObj.get("authentication_method") != null && !jsonObj.get("authentication_method").isJsonNull()) && !jsonObj.get("authentication_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authentication_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authentication_method").toString()));
      }
      if ((jsonObj.get("aws_access_key") != null && !jsonObj.get("aws_access_key").isJsonNull()) && !jsonObj.get("aws_access_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws_access_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws_access_key").toString()));
      }
      if ((jsonObj.get("azure_blob_storage_account") != null && !jsonObj.get("azure_blob_storage_account").isJsonNull()) && !jsonObj.get("azure_blob_storage_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_blob_storage_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_blob_storage_account").toString()));
      }
      if ((jsonObj.get("azure_blob_storage_container") != null && !jsonObj.get("azure_blob_storage_container").isJsonNull()) && !jsonObj.get("azure_blob_storage_container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_blob_storage_container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_blob_storage_container").toString()));
      }
      if ((jsonObj.get("azure_blob_storage_sas_token") != null && !jsonObj.get("azure_blob_storage_sas_token").isJsonNull()) && !jsonObj.get("azure_blob_storage_sas_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_blob_storage_sas_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_blob_storage_sas_token").toString()));
      }
      if ((jsonObj.get("azure_files_storage_account") != null && !jsonObj.get("azure_files_storage_account").isJsonNull()) && !jsonObj.get("azure_files_storage_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_files_storage_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_files_storage_account").toString()));
      }
      if ((jsonObj.get("azure_files_storage_sas_token") != null && !jsonObj.get("azure_files_storage_sas_token").isJsonNull()) && !jsonObj.get("azure_files_storage_sas_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_files_storage_sas_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_files_storage_sas_token").toString()));
      }
      if ((jsonObj.get("azure_files_storage_share_name") != null && !jsonObj.get("azure_files_storage_share_name").isJsonNull()) && !jsonObj.get("azure_files_storage_share_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azure_files_storage_share_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azure_files_storage_share_name").toString()));
      }
      if ((jsonObj.get("backblaze_b2_bucket") != null && !jsonObj.get("backblaze_b2_bucket").isJsonNull()) && !jsonObj.get("backblaze_b2_bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backblaze_b2_bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backblaze_b2_bucket").toString()));
      }
      if ((jsonObj.get("backblaze_b2_s3_endpoint") != null && !jsonObj.get("backblaze_b2_s3_endpoint").isJsonNull()) && !jsonObj.get("backblaze_b2_s3_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backblaze_b2_s3_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backblaze_b2_s3_endpoint").toString()));
      }
      if ((jsonObj.get("filebase_access_key") != null && !jsonObj.get("filebase_access_key").isJsonNull()) && !jsonObj.get("filebase_access_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filebase_access_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filebase_access_key").toString()));
      }
      if ((jsonObj.get("filebase_bucket") != null && !jsonObj.get("filebase_bucket").isJsonNull()) && !jsonObj.get("filebase_bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filebase_bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filebase_bucket").toString()));
      }
      if ((jsonObj.get("files_agent_api_token") != null && !jsonObj.get("files_agent_api_token").isJsonNull()) && !jsonObj.get("files_agent_api_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `files_agent_api_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("files_agent_api_token").toString()));
      }
      if ((jsonObj.get("files_agent_permission_set") != null && !jsonObj.get("files_agent_permission_set").isJsonNull()) && !jsonObj.get("files_agent_permission_set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `files_agent_permission_set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("files_agent_permission_set").toString()));
      }
      // validate the optional field `files_agent_permission_set`
      if (jsonObj.get("files_agent_permission_set") != null && !jsonObj.get("files_agent_permission_set").isJsonNull()) {
        FilesAgentPermissionSetEnum.validateJsonElement(jsonObj.get("files_agent_permission_set"));
      }
      if ((jsonObj.get("files_agent_root") != null && !jsonObj.get("files_agent_root").isJsonNull()) && !jsonObj.get("files_agent_root").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `files_agent_root` to be a primitive type in the JSON string but got `%s`", jsonObj.get("files_agent_root").toString()));
      }
      if ((jsonObj.get("google_cloud_storage_bucket") != null && !jsonObj.get("google_cloud_storage_bucket").isJsonNull()) && !jsonObj.get("google_cloud_storage_bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_cloud_storage_bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_cloud_storage_bucket").toString()));
      }
      if ((jsonObj.get("google_cloud_storage_project_id") != null && !jsonObj.get("google_cloud_storage_project_id").isJsonNull()) && !jsonObj.get("google_cloud_storage_project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `google_cloud_storage_project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("google_cloud_storage_project_id").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("one_drive_account_type") != null && !jsonObj.get("one_drive_account_type").isJsonNull()) && !jsonObj.get("one_drive_account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `one_drive_account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("one_drive_account_type").toString()));
      }
      // validate the optional field `one_drive_account_type`
      if (jsonObj.get("one_drive_account_type") != null && !jsonObj.get("one_drive_account_type").isJsonNull()) {
        OneDriveAccountTypeEnum.validateJsonElement(jsonObj.get("one_drive_account_type"));
      }
      if ((jsonObj.get("pinned_region") != null && !jsonObj.get("pinned_region").isJsonNull()) && !jsonObj.get("pinned_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pinned_region").toString()));
      }
      if ((jsonObj.get("rackspace_container") != null && !jsonObj.get("rackspace_container").isJsonNull()) && !jsonObj.get("rackspace_container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rackspace_container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rackspace_container").toString()));
      }
      if ((jsonObj.get("rackspace_region") != null && !jsonObj.get("rackspace_region").isJsonNull()) && !jsonObj.get("rackspace_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rackspace_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rackspace_region").toString()));
      }
      if ((jsonObj.get("rackspace_username") != null && !jsonObj.get("rackspace_username").isJsonNull()) && !jsonObj.get("rackspace_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rackspace_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rackspace_username").toString()));
      }
      if ((jsonObj.get("remote_home_path") != null && !jsonObj.get("remote_home_path").isJsonNull()) && !jsonObj.get("remote_home_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_home_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_home_path").toString()));
      }
      if ((jsonObj.get("s3_bucket") != null && !jsonObj.get("s3_bucket").isJsonNull()) && !jsonObj.get("s3_bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3_bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3_bucket").toString()));
      }
      if ((jsonObj.get("s3_compatible_access_key") != null && !jsonObj.get("s3_compatible_access_key").isJsonNull()) && !jsonObj.get("s3_compatible_access_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3_compatible_access_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3_compatible_access_key").toString()));
      }
      if ((jsonObj.get("s3_compatible_bucket") != null && !jsonObj.get("s3_compatible_bucket").isJsonNull()) && !jsonObj.get("s3_compatible_bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3_compatible_bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3_compatible_bucket").toString()));
      }
      if ((jsonObj.get("s3_compatible_endpoint") != null && !jsonObj.get("s3_compatible_endpoint").isJsonNull()) && !jsonObj.get("s3_compatible_endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3_compatible_endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3_compatible_endpoint").toString()));
      }
      if ((jsonObj.get("s3_compatible_region") != null && !jsonObj.get("s3_compatible_region").isJsonNull()) && !jsonObj.get("s3_compatible_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3_compatible_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3_compatible_region").toString()));
      }
      if ((jsonObj.get("s3_region") != null && !jsonObj.get("s3_region").isJsonNull()) && !jsonObj.get("s3_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3_region").toString()));
      }
      if ((jsonObj.get("server_certificate") != null && !jsonObj.get("server_certificate").isJsonNull()) && !jsonObj.get("server_certificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_certificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_certificate").toString()));
      }
      // validate the optional field `server_certificate`
      if (jsonObj.get("server_certificate") != null && !jsonObj.get("server_certificate").isJsonNull()) {
        ServerCertificateEnum.validateJsonElement(jsonObj.get("server_certificate"));
      }
      if ((jsonObj.get("server_host_key") != null && !jsonObj.get("server_host_key").isJsonNull()) && !jsonObj.get("server_host_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_host_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_host_key").toString()));
      }
      if ((jsonObj.get("server_type") != null && !jsonObj.get("server_type").isJsonNull()) && !jsonObj.get("server_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_type").toString()));
      }
      // validate the optional field `server_type`
      if (jsonObj.get("server_type") != null && !jsonObj.get("server_type").isJsonNull()) {
        ServerTypeEnum.validateJsonElement(jsonObj.get("server_type"));
      }
      if ((jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) && !jsonObj.get("ssl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl").toString()));
      }
      // validate the optional field `ssl`
      if (jsonObj.get("ssl") != null && !jsonObj.get("ssl").isJsonNull()) {
        SslEnum.validateJsonElement(jsonObj.get("ssl"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("wasabi_access_key") != null && !jsonObj.get("wasabi_access_key").isJsonNull()) && !jsonObj.get("wasabi_access_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wasabi_access_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wasabi_access_key").toString()));
      }
      if ((jsonObj.get("wasabi_bucket") != null && !jsonObj.get("wasabi_bucket").isJsonNull()) && !jsonObj.get("wasabi_bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wasabi_bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wasabi_bucket").toString()));
      }
      if ((jsonObj.get("wasabi_region") != null && !jsonObj.get("wasabi_region").isJsonNull()) && !jsonObj.get("wasabi_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wasabi_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wasabi_region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteServerEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteServerEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteServerEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteServerEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteServerEntity>() {
           @Override
           public void write(JsonWriter out, RemoteServerEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteServerEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteServerEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteServerEntity
   * @throws IOException if the JSON string is invalid with respect to RemoteServerEntity
   */
  public static RemoteServerEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteServerEntity.class);
  }

  /**
   * Convert an instance of RemoteServerEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

