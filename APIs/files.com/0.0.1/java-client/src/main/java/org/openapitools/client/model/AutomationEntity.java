/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Automations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomationEntity {
  /**
   * Automation type
   */
  @JsonAdapter(AutomationEnum.Adapter.class)
  public enum AutomationEnum {
    CREATE_FOLDER("create_folder"),
    
    REQUEST_FILE("request_file"),
    
    REQUEST_MOVE("request_move"),
    
    COPY_NEWEST_FILE("copy_newest_file"),
    
    DELETE_FILE("delete_file"),
    
    COPY_FILE("copy_file"),
    
    MOVE_FILE("move_file"),
    
    AS2_SEND("as2_send"),
    
    RUN_SYNC("run_sync");

    private String value;

    AutomationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutomationEnum fromValue(String value) {
      for (AutomationEnum b : AutomationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutomationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutomationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutomationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutomationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutomationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTOMATION = "automation";
  @SerializedName(SERIALIZED_NAME_AUTOMATION)
  private AutomationEnum automation;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION_REPLACE_FROM = "destination_replace_from";
  @SerializedName(SERIALIZED_NAME_DESTINATION_REPLACE_FROM)
  private String destinationReplaceFrom;

  public static final String SERIALIZED_NAME_DESTINATION_REPLACE_TO = "destination_replace_to";
  @SerializedName(SERIALIZED_NAME_DESTINATION_REPLACE_TO)
  private String destinationReplaceTo;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<String> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private List<Integer> groupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_AT = "last_modified_at";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_AT)
  private OffsetDateTime lastModifiedAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_RECURRING_DAY = "recurring_day";
  @SerializedName(SERIALIZED_NAME_RECURRING_DAY)
  private Integer recurringDay;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Object schedule;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SYNC_IDS = "sync_ids";
  @SerializedName(SERIALIZED_NAME_SYNC_IDS)
  private List<Integer> syncIds = new ArrayList<>();

  /**
   * How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;.
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    REALTIME("realtime"),
    
    DAILY("daily"),
    
    CUSTOM_SCHEDULE("custom_schedule"),
    
    WEBHOOK("webhook"),
    
    EMAIL("email"),
    
    ACTION("action");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private TriggerEnum trigger;

  public static final String SERIALIZED_NAME_TRIGGER_ACTIONS = "trigger_actions";
  @SerializedName(SERIALIZED_NAME_TRIGGER_ACTIONS)
  private List<String> triggerActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USER_IDS = "user_ids";
  @SerializedName(SERIALIZED_NAME_USER_IDS)
  private List<Integer> userIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public AutomationEntity() {
  }

  public AutomationEntity automation(AutomationEnum automation) {
    this.automation = automation;
    return this;
  }

  /**
   * Automation type
   * @return automation
   */
  @javax.annotation.Nullable
  public AutomationEnum getAutomation() {
    return automation;
  }

  public void setAutomation(AutomationEnum automation) {
    this.automation = automation;
  }


  public AutomationEntity deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Indicates if the automation has been deleted.
   * @return deleted
   */
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public AutomationEntity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for the this Automation.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AutomationEntity destinationReplaceFrom(String destinationReplaceFrom) {
    this.destinationReplaceFrom = destinationReplaceFrom;
    return this;
  }

  /**
   * If set, this string in the destination path will be replaced with the value in &#x60;destination_replace_to&#x60;.
   * @return destinationReplaceFrom
   */
  @javax.annotation.Nullable
  public String getDestinationReplaceFrom() {
    return destinationReplaceFrom;
  }

  public void setDestinationReplaceFrom(String destinationReplaceFrom) {
    this.destinationReplaceFrom = destinationReplaceFrom;
  }


  public AutomationEntity destinationReplaceTo(String destinationReplaceTo) {
    this.destinationReplaceTo = destinationReplaceTo;
    return this;
  }

  /**
   * If set, this string will replace the value &#x60;destination_replace_from&#x60; in the destination filename. You can use special patterns here.
   * @return destinationReplaceTo
   */
  @javax.annotation.Nullable
  public String getDestinationReplaceTo() {
    return destinationReplaceTo;
  }

  public void setDestinationReplaceTo(String destinationReplaceTo) {
    this.destinationReplaceTo = destinationReplaceTo;
  }


  public AutomationEntity destinations(List<String> destinations) {
    this.destinations = destinations;
    return this;
  }

  public AutomationEntity addDestinationsItem(String destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Destination Path
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<String> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<String> destinations) {
    this.destinations = destinations;
  }


  public AutomationEntity disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * If true, this automation will not run.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public AutomationEntity groupIds(List<Integer> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public AutomationEntity addGroupIdsItem(Integer groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

  /**
   * IDs of Groups for the Automation (i.e. who to Request File from)
   * @return groupIds
   */
  @javax.annotation.Nullable
  public List<Integer> getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(List<Integer> groupIds) {
    this.groupIds = groupIds;
  }


  public AutomationEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Automation ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public AutomationEntity interval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * If trigger is &#x60;daily&#x60;, this specifies how often to run this automation.  One of: &#x60;day&#x60;, &#x60;week&#x60;, &#x60;week_end&#x60;, &#x60;month&#x60;, &#x60;month_end&#x60;, &#x60;quarter&#x60;, &#x60;quarter_end&#x60;, &#x60;year&#x60;, &#x60;year_end&#x60;
   * @return interval
   */
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public AutomationEntity lastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

  /**
   * Time when automation was last modified. Does not change for name or description updates.
   * @return lastModifiedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedAt() {
    return lastModifiedAt;
  }

  public void setLastModifiedAt(OffsetDateTime lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }


  public AutomationEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name for this automation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AutomationEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Path on which this Automation runs.  Supports globs.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public AutomationEntity recurringDay(Integer recurringDay) {
    this.recurringDay = recurringDay;
    return this;
  }

  /**
   * If trigger type is &#x60;daily&#x60;, this specifies a day number to run in one of the supported intervals: &#x60;week&#x60;, &#x60;month&#x60;, &#x60;quarter&#x60;, &#x60;year&#x60;.
   * @return recurringDay
   */
  @javax.annotation.Nullable
  public Integer getRecurringDay() {
    return recurringDay;
  }

  public void setRecurringDay(Integer recurringDay) {
    this.recurringDay = recurringDay;
  }


  public AutomationEntity schedule(Object schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * If trigger is &#x60;custom_schedule&#x60;, Custom schedule description for when the automation should be run.
   * @return schedule
   */
  @javax.annotation.Nullable
  public Object getSchedule() {
    return schedule;
  }

  public void setSchedule(Object schedule) {
    this.schedule = schedule;
  }


  public AutomationEntity source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Source Path
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public AutomationEntity syncIds(List<Integer> syncIds) {
    this.syncIds = syncIds;
    return this;
  }

  public AutomationEntity addSyncIdsItem(Integer syncIdsItem) {
    if (this.syncIds == null) {
      this.syncIds = new ArrayList<>();
    }
    this.syncIds.add(syncIdsItem);
    return this;
  }

  /**
   * IDs of remote sync folder behaviors to run by this Automation
   * @return syncIds
   */
  @javax.annotation.Nullable
  public List<Integer> getSyncIds() {
    return syncIds;
  }

  public void setSyncIds(List<Integer> syncIds) {
    this.syncIds = syncIds;
  }


  public AutomationEntity trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * How this automation is triggered to run. One of: &#x60;realtime&#x60;, &#x60;daily&#x60;, &#x60;custom_schedule&#x60;, &#x60;webhook&#x60;, &#x60;email&#x60;, or &#x60;action&#x60;.
   * @return trigger
   */
  @javax.annotation.Nullable
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  public AutomationEntity triggerActions(List<String> triggerActions) {
    this.triggerActions = triggerActions;
    return this;
  }

  public AutomationEntity addTriggerActionsItem(String triggerActionsItem) {
    if (this.triggerActions == null) {
      this.triggerActions = new ArrayList<>();
    }
    this.triggerActions.add(triggerActionsItem);
    return this;
  }

  /**
   * If trigger is &#x60;action&#x60;, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy
   * @return triggerActions
   */
  @javax.annotation.Nullable
  public List<String> getTriggerActions() {
    return triggerActions;
  }

  public void setTriggerActions(List<String> triggerActions) {
    this.triggerActions = triggerActions;
  }


  public AutomationEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID of the Automation&#39;s creator.
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public AutomationEntity userIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public AutomationEntity addUserIdsItem(Integer userIdsItem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<>();
    }
    this.userIds.add(userIdsItem);
    return this;
  }

  /**
   * IDs of Users for the Automation (i.e. who to Request File from)
   * @return userIds
   */
  @javax.annotation.Nullable
  public List<Integer> getUserIds() {
    return userIds;
  }

  public void setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
  }


  public AutomationEntity value(Object value) {
    this.value = value;
    return this;
  }

  /**
   * A Hash of attributes specific to the automation type.
   * @return value
   */
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }


  public AutomationEntity webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

  /**
   * If trigger is &#x60;webhook&#x60;, this is the URL of the webhook to trigger the Automation.
   * @return webhookUrl
   */
  @javax.annotation.Nullable
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomationEntity automationEntity = (AutomationEntity) o;
    return Objects.equals(this.automation, automationEntity.automation) &&
        Objects.equals(this.deleted, automationEntity.deleted) &&
        Objects.equals(this.description, automationEntity.description) &&
        Objects.equals(this.destinationReplaceFrom, automationEntity.destinationReplaceFrom) &&
        Objects.equals(this.destinationReplaceTo, automationEntity.destinationReplaceTo) &&
        Objects.equals(this.destinations, automationEntity.destinations) &&
        Objects.equals(this.disabled, automationEntity.disabled) &&
        Objects.equals(this.groupIds, automationEntity.groupIds) &&
        Objects.equals(this.id, automationEntity.id) &&
        Objects.equals(this.interval, automationEntity.interval) &&
        Objects.equals(this.lastModifiedAt, automationEntity.lastModifiedAt) &&
        Objects.equals(this.name, automationEntity.name) &&
        Objects.equals(this.path, automationEntity.path) &&
        Objects.equals(this.recurringDay, automationEntity.recurringDay) &&
        Objects.equals(this.schedule, automationEntity.schedule) &&
        Objects.equals(this.source, automationEntity.source) &&
        Objects.equals(this.syncIds, automationEntity.syncIds) &&
        Objects.equals(this.trigger, automationEntity.trigger) &&
        Objects.equals(this.triggerActions, automationEntity.triggerActions) &&
        Objects.equals(this.userId, automationEntity.userId) &&
        Objects.equals(this.userIds, automationEntity.userIds) &&
        Objects.equals(this.value, automationEntity.value) &&
        Objects.equals(this.webhookUrl, automationEntity.webhookUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automation, deleted, description, destinationReplaceFrom, destinationReplaceTo, destinations, disabled, groupIds, id, interval, lastModifiedAt, name, path, recurringDay, schedule, source, syncIds, trigger, triggerActions, userId, userIds, value, webhookUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomationEntity {\n");
    sb.append("    automation: ").append(toIndentedString(automation)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destinationReplaceFrom: ").append(toIndentedString(destinationReplaceFrom)).append("\n");
    sb.append("    destinationReplaceTo: ").append(toIndentedString(destinationReplaceTo)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    recurringDay: ").append(toIndentedString(recurringDay)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    syncIds: ").append(toIndentedString(syncIds)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    triggerActions: ").append(toIndentedString(triggerActions)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userIds: ").append(toIndentedString(userIds)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automation");
    openapiFields.add("deleted");
    openapiFields.add("description");
    openapiFields.add("destination_replace_from");
    openapiFields.add("destination_replace_to");
    openapiFields.add("destinations");
    openapiFields.add("disabled");
    openapiFields.add("group_ids");
    openapiFields.add("id");
    openapiFields.add("interval");
    openapiFields.add("last_modified_at");
    openapiFields.add("name");
    openapiFields.add("path");
    openapiFields.add("recurring_day");
    openapiFields.add("schedule");
    openapiFields.add("source");
    openapiFields.add("sync_ids");
    openapiFields.add("trigger");
    openapiFields.add("trigger_actions");
    openapiFields.add("user_id");
    openapiFields.add("user_ids");
    openapiFields.add("value");
    openapiFields.add("webhook_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomationEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomationEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomationEntity is not found in the empty JSON string", AutomationEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomationEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomationEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("automation") != null && !jsonObj.get("automation").isJsonNull()) && !jsonObj.get("automation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automation").toString()));
      }
      // validate the optional field `automation`
      if (jsonObj.get("automation") != null && !jsonObj.get("automation").isJsonNull()) {
        AutomationEnum.validateJsonElement(jsonObj.get("automation"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("destination_replace_from") != null && !jsonObj.get("destination_replace_from").isJsonNull()) && !jsonObj.get("destination_replace_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_replace_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_replace_from").toString()));
      }
      if ((jsonObj.get("destination_replace_to") != null && !jsonObj.get("destination_replace_to").isJsonNull()) && !jsonObj.get("destination_replace_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_replace_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_replace_to").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull() && !jsonObj.get("destinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("group_ids") != null && !jsonObj.get("group_ids").isJsonNull() && !jsonObj.get("group_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_ids` to be an array in the JSON string but got `%s`", jsonObj.get("group_ids").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sync_ids") != null && !jsonObj.get("sync_ids").isJsonNull() && !jsonObj.get("sync_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sync_ids` to be an array in the JSON string but got `%s`", jsonObj.get("sync_ids").toString()));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        TriggerEnum.validateJsonElement(jsonObj.get("trigger"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("trigger_actions") != null && !jsonObj.get("trigger_actions").isJsonNull() && !jsonObj.get("trigger_actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger_actions` to be an array in the JSON string but got `%s`", jsonObj.get("trigger_actions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_ids") != null && !jsonObj.get("user_ids").isJsonNull() && !jsonObj.get("user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("user_ids").toString()));
      }
      if ((jsonObj.get("webhook_url") != null && !jsonObj.get("webhook_url").isJsonNull()) && !jsonObj.get("webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomationEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomationEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomationEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomationEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomationEntity>() {
           @Override
           public void write(JsonWriter out, AutomationEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomationEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomationEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomationEntity
   * @throws IOException if the JSON string is invalid with respect to AutomationEntity
   */
  public static AutomationEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomationEntity.class);
  }

  /**
   * Convert an instance of AutomationEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

