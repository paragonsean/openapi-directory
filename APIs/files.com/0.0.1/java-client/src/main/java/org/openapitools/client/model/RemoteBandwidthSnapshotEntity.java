/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Remote Bandwidth Snapshots
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoteBandwidthSnapshotEntity {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LOGGED_AT = "logged_at";
  @SerializedName(SERIALIZED_NAME_LOGGED_AT)
  private OffsetDateTime loggedAt;

  public static final String SERIALIZED_NAME_REMOTE_SERVER_ID = "remote_server_id";
  @SerializedName(SERIALIZED_NAME_REMOTE_SERVER_ID)
  private Integer remoteServerId;

  public static final String SERIALIZED_NAME_SYNC_BYTES_RECEIVED = "sync_bytes_received";
  @SerializedName(SERIALIZED_NAME_SYNC_BYTES_RECEIVED)
  private Double syncBytesReceived;

  public static final String SERIALIZED_NAME_SYNC_BYTES_SENT = "sync_bytes_sent";
  @SerializedName(SERIALIZED_NAME_SYNC_BYTES_SENT)
  private Double syncBytesSent;

  public RemoteBandwidthSnapshotEntity() {
  }

  public RemoteBandwidthSnapshotEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Site bandwidth ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RemoteBandwidthSnapshotEntity loggedAt(OffsetDateTime loggedAt) {
    this.loggedAt = loggedAt;
    return this;
  }

  /**
   * Time the site bandwidth report was logged
   * @return loggedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLoggedAt() {
    return loggedAt;
  }

  public void setLoggedAt(OffsetDateTime loggedAt) {
    this.loggedAt = loggedAt;
  }


  public RemoteBandwidthSnapshotEntity remoteServerId(Integer remoteServerId) {
    this.remoteServerId = remoteServerId;
    return this;
  }

  /**
   * ID of related Remote Server
   * @return remoteServerId
   */
  @javax.annotation.Nullable
  public Integer getRemoteServerId() {
    return remoteServerId;
  }

  public void setRemoteServerId(Integer remoteServerId) {
    this.remoteServerId = remoteServerId;
  }


  public RemoteBandwidthSnapshotEntity syncBytesReceived(Double syncBytesReceived) {
    this.syncBytesReceived = syncBytesReceived;
    return this;
  }

  /**
   * Site sync bandwidth report bytes received
   * @return syncBytesReceived
   */
  @javax.annotation.Nullable
  public Double getSyncBytesReceived() {
    return syncBytesReceived;
  }

  public void setSyncBytesReceived(Double syncBytesReceived) {
    this.syncBytesReceived = syncBytesReceived;
  }


  public RemoteBandwidthSnapshotEntity syncBytesSent(Double syncBytesSent) {
    this.syncBytesSent = syncBytesSent;
    return this;
  }

  /**
   * Site sync bandwidth report bytes sent
   * @return syncBytesSent
   */
  @javax.annotation.Nullable
  public Double getSyncBytesSent() {
    return syncBytesSent;
  }

  public void setSyncBytesSent(Double syncBytesSent) {
    this.syncBytesSent = syncBytesSent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteBandwidthSnapshotEntity remoteBandwidthSnapshotEntity = (RemoteBandwidthSnapshotEntity) o;
    return Objects.equals(this.id, remoteBandwidthSnapshotEntity.id) &&
        Objects.equals(this.loggedAt, remoteBandwidthSnapshotEntity.loggedAt) &&
        Objects.equals(this.remoteServerId, remoteBandwidthSnapshotEntity.remoteServerId) &&
        Objects.equals(this.syncBytesReceived, remoteBandwidthSnapshotEntity.syncBytesReceived) &&
        Objects.equals(this.syncBytesSent, remoteBandwidthSnapshotEntity.syncBytesSent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, loggedAt, remoteServerId, syncBytesReceived, syncBytesSent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteBandwidthSnapshotEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    loggedAt: ").append(toIndentedString(loggedAt)).append("\n");
    sb.append("    remoteServerId: ").append(toIndentedString(remoteServerId)).append("\n");
    sb.append("    syncBytesReceived: ").append(toIndentedString(syncBytesReceived)).append("\n");
    sb.append("    syncBytesSent: ").append(toIndentedString(syncBytesSent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("logged_at");
    openapiFields.add("remote_server_id");
    openapiFields.add("sync_bytes_received");
    openapiFields.add("sync_bytes_sent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoteBandwidthSnapshotEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoteBandwidthSnapshotEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoteBandwidthSnapshotEntity is not found in the empty JSON string", RemoteBandwidthSnapshotEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoteBandwidthSnapshotEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoteBandwidthSnapshotEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoteBandwidthSnapshotEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoteBandwidthSnapshotEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoteBandwidthSnapshotEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoteBandwidthSnapshotEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoteBandwidthSnapshotEntity>() {
           @Override
           public void write(JsonWriter out, RemoteBandwidthSnapshotEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoteBandwidthSnapshotEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoteBandwidthSnapshotEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoteBandwidthSnapshotEntity
   * @throws IOException if the JSON string is invalid with respect to RemoteBandwidthSnapshotEntity
   */
  public static RemoteBandwidthSnapshotEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoteBandwidthSnapshotEntity.class);
  }

  /**
   * Convert an instance of RemoteBandwidthSnapshotEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

