/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Bundle Registrations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BundleRegistrationEntity {
  public static final String SERIALIZED_NAME_BUNDLE_CODE = "bundle_code";
  @SerializedName(SERIALIZED_NAME_BUNDLE_CODE)
  private String bundleCode;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundle_id";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private Integer bundleId;

  public static final String SERIALIZED_NAME_BUNDLE_RECIPIENT_ID = "bundle_recipient_id";
  @SerializedName(SERIALIZED_NAME_BUNDLE_RECIPIENT_ID)
  private Integer bundleRecipientId;

  public static final String SERIALIZED_NAME_CLICKWRAP_BODY = "clickwrap_body";
  @SerializedName(SERIALIZED_NAME_CLICKWRAP_BODY)
  private String clickwrapBody;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FORM_FIELD_DATA = "form_field_data";
  @SerializedName(SERIALIZED_NAME_FORM_FIELD_DATA)
  private Object formFieldData;

  public static final String SERIALIZED_NAME_FORM_FIELD_SET_ID = "form_field_set_id";
  @SerializedName(SERIALIZED_NAME_FORM_FIELD_SET_ID)
  private Integer formFieldSetId;

  public static final String SERIALIZED_NAME_INBOX_CODE = "inbox_code";
  @SerializedName(SERIALIZED_NAME_INBOX_CODE)
  private String inboxCode;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public BundleRegistrationEntity() {
  }

  public BundleRegistrationEntity bundleCode(String bundleCode) {
    this.bundleCode = bundleCode;
    return this;
  }

  /**
   * Bundle URL code
   * @return bundleCode
   */
  @javax.annotation.Nullable
  public String getBundleCode() {
    return bundleCode;
  }

  public void setBundleCode(String bundleCode) {
    this.bundleCode = bundleCode;
  }


  public BundleRegistrationEntity bundleId(Integer bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Id of associated bundle
   * @return bundleId
   */
  @javax.annotation.Nullable
  public Integer getBundleId() {
    return bundleId;
  }

  public void setBundleId(Integer bundleId) {
    this.bundleId = bundleId;
  }


  public BundleRegistrationEntity bundleRecipientId(Integer bundleRecipientId) {
    this.bundleRecipientId = bundleRecipientId;
    return this;
  }

  /**
   * Id of associated bundle recipient
   * @return bundleRecipientId
   */
  @javax.annotation.Nullable
  public Integer getBundleRecipientId() {
    return bundleRecipientId;
  }

  public void setBundleRecipientId(Integer bundleRecipientId) {
    this.bundleRecipientId = bundleRecipientId;
  }


  public BundleRegistrationEntity clickwrapBody(String clickwrapBody) {
    this.clickwrapBody = clickwrapBody;
    return this;
  }

  /**
   * Clickwrap text that was shown to the registrant
   * @return clickwrapBody
   */
  @javax.annotation.Nullable
  public String getClickwrapBody() {
    return clickwrapBody;
  }

  public void setClickwrapBody(String clickwrapBody) {
    this.clickwrapBody = clickwrapBody;
  }


  public BundleRegistrationEntity code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Registration cookie code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public BundleRegistrationEntity company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Registrant company name
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public BundleRegistrationEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Registration creation date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public BundleRegistrationEntity email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Registrant email address
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public BundleRegistrationEntity formFieldData(Object formFieldData) {
    this.formFieldData = formFieldData;
    return this;
  }

  /**
   * Data for form field set with form field ids as keys and user data as values
   * @return formFieldData
   */
  @javax.annotation.Nullable
  public Object getFormFieldData() {
    return formFieldData;
  }

  public void setFormFieldData(Object formFieldData) {
    this.formFieldData = formFieldData;
  }


  public BundleRegistrationEntity formFieldSetId(Integer formFieldSetId) {
    this.formFieldSetId = formFieldSetId;
    return this;
  }

  /**
   * Id of associated form field set
   * @return formFieldSetId
   */
  @javax.annotation.Nullable
  public Integer getFormFieldSetId() {
    return formFieldSetId;
  }

  public void setFormFieldSetId(Integer formFieldSetId) {
    this.formFieldSetId = formFieldSetId;
  }


  public BundleRegistrationEntity inboxCode(String inboxCode) {
    this.inboxCode = inboxCode;
    return this;
  }

  /**
   * InboxRegistration cookie code, if there is an associated InboxRegistration
   * @return inboxCode
   */
  @javax.annotation.Nullable
  public String getInboxCode() {
    return inboxCode;
  }

  public void setInboxCode(String inboxCode) {
    this.inboxCode = inboxCode;
  }


  public BundleRegistrationEntity ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Registrant IP Address
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public BundleRegistrationEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Registrant name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BundleRegistrationEntity bundleRegistrationEntity = (BundleRegistrationEntity) o;
    return Objects.equals(this.bundleCode, bundleRegistrationEntity.bundleCode) &&
        Objects.equals(this.bundleId, bundleRegistrationEntity.bundleId) &&
        Objects.equals(this.bundleRecipientId, bundleRegistrationEntity.bundleRecipientId) &&
        Objects.equals(this.clickwrapBody, bundleRegistrationEntity.clickwrapBody) &&
        Objects.equals(this.code, bundleRegistrationEntity.code) &&
        Objects.equals(this.company, bundleRegistrationEntity.company) &&
        Objects.equals(this.createdAt, bundleRegistrationEntity.createdAt) &&
        Objects.equals(this.email, bundleRegistrationEntity.email) &&
        Objects.equals(this.formFieldData, bundleRegistrationEntity.formFieldData) &&
        Objects.equals(this.formFieldSetId, bundleRegistrationEntity.formFieldSetId) &&
        Objects.equals(this.inboxCode, bundleRegistrationEntity.inboxCode) &&
        Objects.equals(this.ip, bundleRegistrationEntity.ip) &&
        Objects.equals(this.name, bundleRegistrationEntity.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleCode, bundleId, bundleRecipientId, clickwrapBody, code, company, createdAt, email, formFieldData, formFieldSetId, inboxCode, ip, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BundleRegistrationEntity {\n");
    sb.append("    bundleCode: ").append(toIndentedString(bundleCode)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    bundleRecipientId: ").append(toIndentedString(bundleRecipientId)).append("\n");
    sb.append("    clickwrapBody: ").append(toIndentedString(clickwrapBody)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    formFieldData: ").append(toIndentedString(formFieldData)).append("\n");
    sb.append("    formFieldSetId: ").append(toIndentedString(formFieldSetId)).append("\n");
    sb.append("    inboxCode: ").append(toIndentedString(inboxCode)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundle_code");
    openapiFields.add("bundle_id");
    openapiFields.add("bundle_recipient_id");
    openapiFields.add("clickwrap_body");
    openapiFields.add("code");
    openapiFields.add("company");
    openapiFields.add("created_at");
    openapiFields.add("email");
    openapiFields.add("form_field_data");
    openapiFields.add("form_field_set_id");
    openapiFields.add("inbox_code");
    openapiFields.add("ip");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BundleRegistrationEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BundleRegistrationEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BundleRegistrationEntity is not found in the empty JSON string", BundleRegistrationEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BundleRegistrationEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BundleRegistrationEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bundle_code") != null && !jsonObj.get("bundle_code").isJsonNull()) && !jsonObj.get("bundle_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_code").toString()));
      }
      if ((jsonObj.get("clickwrap_body") != null && !jsonObj.get("clickwrap_body").isJsonNull()) && !jsonObj.get("clickwrap_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickwrap_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickwrap_body").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("inbox_code") != null && !jsonObj.get("inbox_code").isJsonNull()) && !jsonObj.get("inbox_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inbox_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inbox_code").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BundleRegistrationEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BundleRegistrationEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BundleRegistrationEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BundleRegistrationEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<BundleRegistrationEntity>() {
           @Override
           public void write(JsonWriter out, BundleRegistrationEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BundleRegistrationEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BundleRegistrationEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BundleRegistrationEntity
   * @throws IOException if the JSON string is invalid with respect to BundleRegistrationEntity
   */
  public static BundleRegistrationEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BundleRegistrationEntity.class);
  }

  /**
   * Convert an instance of BundleRegistrationEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

