/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Usage Snapshots
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageSnapshotEntity {
  public static final String SERIALIZED_NAME_BYTES_SENT = "bytes_sent";
  @SerializedName(SERIALIZED_NAME_BYTES_SENT)
  private Double bytesSent;

  public static final String SERIALIZED_NAME_CURRENT_STORAGE = "current_storage";
  @SerializedName(SERIALIZED_NAME_CURRENT_STORAGE)
  private Double currentStorage;

  public static final String SERIALIZED_NAME_DELETED_FILES_COUNTED_IN_MINIMUM = "deleted_files_counted_in_minimum";
  @SerializedName(SERIALIZED_NAME_DELETED_FILES_COUNTED_IN_MINIMUM)
  private Double deletedFilesCountedInMinimum;

  public static final String SERIALIZED_NAME_DELETED_FILES_STORAGE = "deleted_files_storage";
  @SerializedName(SERIALIZED_NAME_DELETED_FILES_STORAGE)
  private Double deletedFilesStorage;

  public static final String SERIALIZED_NAME_END_AT = "end_at";
  @SerializedName(SERIALIZED_NAME_END_AT)
  private OffsetDateTime endAt;

  public static final String SERIALIZED_NAME_HIGH_WATER_STORAGE = "high_water_storage";
  @SerializedName(SERIALIZED_NAME_HIGH_WATER_STORAGE)
  private Double highWaterStorage;

  public static final String SERIALIZED_NAME_HIGH_WATER_USER_COUNT = "high_water_user_count";
  @SerializedName(SERIALIZED_NAME_HIGH_WATER_USER_COUNT)
  private Double highWaterUserCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ROOT_STORAGE = "root_storage";
  @SerializedName(SERIALIZED_NAME_ROOT_STORAGE)
  private Double rootStorage;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private OffsetDateTime startAt;

  public static final String SERIALIZED_NAME_SYNC_BYTES_RECEIVED = "sync_bytes_received";
  @SerializedName(SERIALIZED_NAME_SYNC_BYTES_RECEIVED)
  private Double syncBytesReceived;

  public static final String SERIALIZED_NAME_SYNC_BYTES_SENT = "sync_bytes_sent";
  @SerializedName(SERIALIZED_NAME_SYNC_BYTES_SENT)
  private Double syncBytesSent;

  public static final String SERIALIZED_NAME_TOTAL_BILLABLE_TRANSFER_USAGE = "total_billable_transfer_usage";
  @SerializedName(SERIALIZED_NAME_TOTAL_BILLABLE_TRANSFER_USAGE)
  private Double totalBillableTransferUsage;

  public static final String SERIALIZED_NAME_TOTAL_BILLABLE_USAGE = "total_billable_usage";
  @SerializedName(SERIALIZED_NAME_TOTAL_BILLABLE_USAGE)
  private Double totalBillableUsage;

  public static final String SERIALIZED_NAME_USAGE_BY_TOP_LEVEL_DIR = "usage_by_top_level_dir";
  @SerializedName(SERIALIZED_NAME_USAGE_BY_TOP_LEVEL_DIR)
  private Object usageByTopLevelDir;

  public UsageSnapshotEntity() {
  }

  public UsageSnapshotEntity bytesSent(Double bytesSent) {
    this.bytesSent = bytesSent;
    return this;
  }

  /**
   * Transfer Usage for period - Outbound GB from Files Native Storage
   * @return bytesSent
   */
  @javax.annotation.Nullable
  public Double getBytesSent() {
    return bytesSent;
  }

  public void setBytesSent(Double bytesSent) {
    this.bytesSent = bytesSent;
  }


  public UsageSnapshotEntity currentStorage(Double currentStorage) {
    this.currentStorage = currentStorage;
    return this;
  }

  /**
   * Current total Storage Usage GB as of end date (not necessarily high water mark, which is used for billing)
   * @return currentStorage
   */
  @javax.annotation.Nullable
  public Double getCurrentStorage() {
    return currentStorage;
  }

  public void setCurrentStorage(Double currentStorage) {
    this.currentStorage = currentStorage;
  }


  public UsageSnapshotEntity deletedFilesCountedInMinimum(Double deletedFilesCountedInMinimum) {
    this.deletedFilesCountedInMinimum = deletedFilesCountedInMinimum;
    return this;
  }

  /**
   * Storage Usage for files that are deleted but uploaded within last 30 days as of end date (not necessarily high water mark, which is used for billing)
   * @return deletedFilesCountedInMinimum
   */
  @javax.annotation.Nullable
  public Double getDeletedFilesCountedInMinimum() {
    return deletedFilesCountedInMinimum;
  }

  public void setDeletedFilesCountedInMinimum(Double deletedFilesCountedInMinimum) {
    this.deletedFilesCountedInMinimum = deletedFilesCountedInMinimum;
  }


  public UsageSnapshotEntity deletedFilesStorage(Double deletedFilesStorage) {
    this.deletedFilesStorage = deletedFilesStorage;
    return this;
  }

  /**
   * Storage Usage for files that are deleted but retained as backups as of end date (not necessarily high water mark, which is used for billing)
   * @return deletedFilesStorage
   */
  @javax.annotation.Nullable
  public Double getDeletedFilesStorage() {
    return deletedFilesStorage;
  }

  public void setDeletedFilesStorage(Double deletedFilesStorage) {
    this.deletedFilesStorage = deletedFilesStorage;
  }


  public UsageSnapshotEntity endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * Usage snapshot end date/time
   * @return endAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndAt() {
    return endAt;
  }

  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }


  public UsageSnapshotEntity highWaterStorage(Double highWaterStorage) {
    this.highWaterStorage = highWaterStorage;
    return this;
  }

  /**
   * Highest Storage Usage GB recorded in time period (used for billing)
   * @return highWaterStorage
   */
  @javax.annotation.Nullable
  public Double getHighWaterStorage() {
    return highWaterStorage;
  }

  public void setHighWaterStorage(Double highWaterStorage) {
    this.highWaterStorage = highWaterStorage;
  }


  public UsageSnapshotEntity highWaterUserCount(Double highWaterUserCount) {
    this.highWaterUserCount = highWaterUserCount;
    return this;
  }

  /**
   * Highest user count number in time period
   * @return highWaterUserCount
   */
  @javax.annotation.Nullable
  public Double getHighWaterUserCount() {
    return highWaterUserCount;
  }

  public void setHighWaterUserCount(Double highWaterUserCount) {
    this.highWaterUserCount = highWaterUserCount;
  }


  public UsageSnapshotEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Usage snapshot ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UsageSnapshotEntity rootStorage(Double rootStorage) {
    this.rootStorage = rootStorage;
    return this;
  }

  /**
   * Storage Usage for root folder as of end date (not necessarily high water mark, which is used for billing)
   * @return rootStorage
   */
  @javax.annotation.Nullable
  public Double getRootStorage() {
    return rootStorage;
  }

  public void setRootStorage(Double rootStorage) {
    this.rootStorage = rootStorage;
  }


  public UsageSnapshotEntity startAt(OffsetDateTime startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * Usage snapshot start date/time
   * @return startAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartAt() {
    return startAt;
  }

  public void setStartAt(OffsetDateTime startAt) {
    this.startAt = startAt;
  }


  public UsageSnapshotEntity syncBytesReceived(Double syncBytesReceived) {
    this.syncBytesReceived = syncBytesReceived;
    return this;
  }

  /**
   * Transfer Usage for period - Inbound GB to Remote Servers (Sync/Mount)
   * @return syncBytesReceived
   */
  @javax.annotation.Nullable
  public Double getSyncBytesReceived() {
    return syncBytesReceived;
  }

  public void setSyncBytesReceived(Double syncBytesReceived) {
    this.syncBytesReceived = syncBytesReceived;
  }


  public UsageSnapshotEntity syncBytesSent(Double syncBytesSent) {
    this.syncBytesSent = syncBytesSent;
    return this;
  }

  /**
   * Transfer Usage for period - Outbound GB from Remote Servers (Sync/Mount)
   * @return syncBytesSent
   */
  @javax.annotation.Nullable
  public Double getSyncBytesSent() {
    return syncBytesSent;
  }

  public void setSyncBytesSent(Double syncBytesSent) {
    this.syncBytesSent = syncBytesSent;
  }


  public UsageSnapshotEntity totalBillableTransferUsage(Double totalBillableTransferUsage) {
    this.totalBillableTransferUsage = totalBillableTransferUsage;
    return this;
  }

  /**
   * Transfer usage for period - Total Billable amount
   * @return totalBillableTransferUsage
   */
  @javax.annotation.Nullable
  public Double getTotalBillableTransferUsage() {
    return totalBillableTransferUsage;
  }

  public void setTotalBillableTransferUsage(Double totalBillableTransferUsage) {
    this.totalBillableTransferUsage = totalBillableTransferUsage;
  }


  public UsageSnapshotEntity totalBillableUsage(Double totalBillableUsage) {
    this.totalBillableUsage = totalBillableUsage;
    return this;
  }

  /**
   * Storage + Transfer Usage - Total Billable amount
   * @return totalBillableUsage
   */
  @javax.annotation.Nullable
  public Double getTotalBillableUsage() {
    return totalBillableUsage;
  }

  public void setTotalBillableUsage(Double totalBillableUsage) {
    this.totalBillableUsage = totalBillableUsage;
  }


  public UsageSnapshotEntity usageByTopLevelDir(Object usageByTopLevelDir) {
    this.usageByTopLevelDir = usageByTopLevelDir;
    return this;
  }

  /**
   * Storage Usage - map of root folders to their usage as of end date (not necessarily high water mark, which is used for billing)
   * @return usageByTopLevelDir
   */
  @javax.annotation.Nullable
  public Object getUsageByTopLevelDir() {
    return usageByTopLevelDir;
  }

  public void setUsageByTopLevelDir(Object usageByTopLevelDir) {
    this.usageByTopLevelDir = usageByTopLevelDir;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageSnapshotEntity usageSnapshotEntity = (UsageSnapshotEntity) o;
    return Objects.equals(this.bytesSent, usageSnapshotEntity.bytesSent) &&
        Objects.equals(this.currentStorage, usageSnapshotEntity.currentStorage) &&
        Objects.equals(this.deletedFilesCountedInMinimum, usageSnapshotEntity.deletedFilesCountedInMinimum) &&
        Objects.equals(this.deletedFilesStorage, usageSnapshotEntity.deletedFilesStorage) &&
        Objects.equals(this.endAt, usageSnapshotEntity.endAt) &&
        Objects.equals(this.highWaterStorage, usageSnapshotEntity.highWaterStorage) &&
        Objects.equals(this.highWaterUserCount, usageSnapshotEntity.highWaterUserCount) &&
        Objects.equals(this.id, usageSnapshotEntity.id) &&
        Objects.equals(this.rootStorage, usageSnapshotEntity.rootStorage) &&
        Objects.equals(this.startAt, usageSnapshotEntity.startAt) &&
        Objects.equals(this.syncBytesReceived, usageSnapshotEntity.syncBytesReceived) &&
        Objects.equals(this.syncBytesSent, usageSnapshotEntity.syncBytesSent) &&
        Objects.equals(this.totalBillableTransferUsage, usageSnapshotEntity.totalBillableTransferUsage) &&
        Objects.equals(this.totalBillableUsage, usageSnapshotEntity.totalBillableUsage) &&
        Objects.equals(this.usageByTopLevelDir, usageSnapshotEntity.usageByTopLevelDir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesSent, currentStorage, deletedFilesCountedInMinimum, deletedFilesStorage, endAt, highWaterStorage, highWaterUserCount, id, rootStorage, startAt, syncBytesReceived, syncBytesSent, totalBillableTransferUsage, totalBillableUsage, usageByTopLevelDir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageSnapshotEntity {\n");
    sb.append("    bytesSent: ").append(toIndentedString(bytesSent)).append("\n");
    sb.append("    currentStorage: ").append(toIndentedString(currentStorage)).append("\n");
    sb.append("    deletedFilesCountedInMinimum: ").append(toIndentedString(deletedFilesCountedInMinimum)).append("\n");
    sb.append("    deletedFilesStorage: ").append(toIndentedString(deletedFilesStorage)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    highWaterStorage: ").append(toIndentedString(highWaterStorage)).append("\n");
    sb.append("    highWaterUserCount: ").append(toIndentedString(highWaterUserCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rootStorage: ").append(toIndentedString(rootStorage)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    syncBytesReceived: ").append(toIndentedString(syncBytesReceived)).append("\n");
    sb.append("    syncBytesSent: ").append(toIndentedString(syncBytesSent)).append("\n");
    sb.append("    totalBillableTransferUsage: ").append(toIndentedString(totalBillableTransferUsage)).append("\n");
    sb.append("    totalBillableUsage: ").append(toIndentedString(totalBillableUsage)).append("\n");
    sb.append("    usageByTopLevelDir: ").append(toIndentedString(usageByTopLevelDir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytes_sent");
    openapiFields.add("current_storage");
    openapiFields.add("deleted_files_counted_in_minimum");
    openapiFields.add("deleted_files_storage");
    openapiFields.add("end_at");
    openapiFields.add("high_water_storage");
    openapiFields.add("high_water_user_count");
    openapiFields.add("id");
    openapiFields.add("root_storage");
    openapiFields.add("start_at");
    openapiFields.add("sync_bytes_received");
    openapiFields.add("sync_bytes_sent");
    openapiFields.add("total_billable_transfer_usage");
    openapiFields.add("total_billable_usage");
    openapiFields.add("usage_by_top_level_dir");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageSnapshotEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageSnapshotEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageSnapshotEntity is not found in the empty JSON string", UsageSnapshotEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageSnapshotEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageSnapshotEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageSnapshotEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageSnapshotEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageSnapshotEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageSnapshotEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageSnapshotEntity>() {
           @Override
           public void write(JsonWriter out, UsageSnapshotEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageSnapshotEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageSnapshotEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageSnapshotEntity
   * @throws IOException if the JSON string is invalid with respect to UsageSnapshotEntity
   */
  public static UsageSnapshotEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageSnapshotEntity.class);
  }

  /**
   * Convert an instance of UsageSnapshotEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

