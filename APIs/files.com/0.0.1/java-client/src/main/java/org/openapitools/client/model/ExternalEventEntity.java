/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List External Events
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalEventEntity {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_URL = "body_url";
  @SerializedName(SERIALIZED_NAME_BODY_URL)
  private String bodyUrl;

  public static final String SERIALIZED_NAME_BYTES_SYNCED = "bytes_synced";
  @SerializedName(SERIALIZED_NAME_BYTES_SYNCED)
  private Integer bytesSynced;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ERRORED_FILES = "errored_files";
  @SerializedName(SERIALIZED_NAME_ERRORED_FILES)
  private Integer erroredFiles;

  /**
   * Type of event being recorded.
   */
  @JsonAdapter(EventTypeEnum.Adapter.class)
  public enum EventTypeEnum {
    LDAP_SYNC("ldap_sync"),
    
    REMOTE_SERVER_SYNC("remote_server_sync"),
    
    LOCKOUT("lockout"),
    
    LDAP_LOGIN("ldap_login"),
    
    SAML_LOGIN("saml_login"),
    
    CLIENT_LOG("client_log"),
    
    PENDING_WORK("pending_work");

    private String value;

    EventTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventTypeEnum fromValue(String value) {
      for (EventTypeEnum b : EventTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventTypeEnum eventType;

  public static final String SERIALIZED_NAME_FOLDER_BEHAVIOR_ID = "folder_behavior_id";
  @SerializedName(SERIALIZED_NAME_FOLDER_BEHAVIOR_ID)
  private Integer folderBehaviorId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_REMOTE_SERVER_TYPE = "remote_server_type";
  @SerializedName(SERIALIZED_NAME_REMOTE_SERVER_TYPE)
  private String remoteServerType;

  /**
   * Status of event.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUCCESS("success"),
    
    FAILURE("failure"),
    
    PARTIAL_FAILURE("partial_failure"),
    
    IN_PROGRESS("in_progress"),
    
    SKIPPED("skipped");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUCCESSFUL_FILES = "successful_files";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_FILES)
  private Integer successfulFiles;

  public ExternalEventEntity() {
  }

  public ExternalEventEntity body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Event body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public ExternalEventEntity bodyUrl(String bodyUrl) {
    this.bodyUrl = bodyUrl;
    return this;
  }

  /**
   * Link to log file.
   * @return bodyUrl
   */
  @javax.annotation.Nullable
  public String getBodyUrl() {
    return bodyUrl;
  }

  public void setBodyUrl(String bodyUrl) {
    this.bodyUrl = bodyUrl;
  }


  public ExternalEventEntity bytesSynced(Integer bytesSynced) {
    this.bytesSynced = bytesSynced;
    return this;
  }

  /**
   * For sync events, the total number of bytes synced.
   * @return bytesSynced
   */
  @javax.annotation.Nullable
  public Integer getBytesSynced() {
    return bytesSynced;
  }

  public void setBytesSynced(Integer bytesSynced) {
    this.bytesSynced = bytesSynced;
  }


  public ExternalEventEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * External event create date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ExternalEventEntity erroredFiles(Integer erroredFiles) {
    this.erroredFiles = erroredFiles;
    return this;
  }

  /**
   * For sync events, the number of files that encountered errors.
   * @return erroredFiles
   */
  @javax.annotation.Nullable
  public Integer getErroredFiles() {
    return erroredFiles;
  }

  public void setErroredFiles(Integer erroredFiles) {
    this.erroredFiles = erroredFiles;
  }


  public ExternalEventEntity eventType(EventTypeEnum eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Type of event being recorded.
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventTypeEnum getEventType() {
    return eventType;
  }

  public void setEventType(EventTypeEnum eventType) {
    this.eventType = eventType;
  }


  public ExternalEventEntity folderBehaviorId(Integer folderBehaviorId) {
    this.folderBehaviorId = folderBehaviorId;
    return this;
  }

  /**
   * Folder Behavior ID
   * @return folderBehaviorId
   */
  @javax.annotation.Nullable
  public Integer getFolderBehaviorId() {
    return folderBehaviorId;
  }

  public void setFolderBehaviorId(Integer folderBehaviorId) {
    this.folderBehaviorId = folderBehaviorId;
  }


  public ExternalEventEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Event ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ExternalEventEntity remoteServerType(String remoteServerType) {
    this.remoteServerType = remoteServerType;
    return this;
  }

  /**
   * Associated Remote Server type, if any
   * @return remoteServerType
   */
  @javax.annotation.Nullable
  public String getRemoteServerType() {
    return remoteServerType;
  }

  public void setRemoteServerType(String remoteServerType) {
    this.remoteServerType = remoteServerType;
  }


  public ExternalEventEntity status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of event.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ExternalEventEntity successfulFiles(Integer successfulFiles) {
    this.successfulFiles = successfulFiles;
    return this;
  }

  /**
   * For sync events, the number of files handled successfully.
   * @return successfulFiles
   */
  @javax.annotation.Nullable
  public Integer getSuccessfulFiles() {
    return successfulFiles;
  }

  public void setSuccessfulFiles(Integer successfulFiles) {
    this.successfulFiles = successfulFiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalEventEntity externalEventEntity = (ExternalEventEntity) o;
    return Objects.equals(this.body, externalEventEntity.body) &&
        Objects.equals(this.bodyUrl, externalEventEntity.bodyUrl) &&
        Objects.equals(this.bytesSynced, externalEventEntity.bytesSynced) &&
        Objects.equals(this.createdAt, externalEventEntity.createdAt) &&
        Objects.equals(this.erroredFiles, externalEventEntity.erroredFiles) &&
        Objects.equals(this.eventType, externalEventEntity.eventType) &&
        Objects.equals(this.folderBehaviorId, externalEventEntity.folderBehaviorId) &&
        Objects.equals(this.id, externalEventEntity.id) &&
        Objects.equals(this.remoteServerType, externalEventEntity.remoteServerType) &&
        Objects.equals(this.status, externalEventEntity.status) &&
        Objects.equals(this.successfulFiles, externalEventEntity.successfulFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyUrl, bytesSynced, createdAt, erroredFiles, eventType, folderBehaviorId, id, remoteServerType, status, successfulFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalEventEntity {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyUrl: ").append(toIndentedString(bodyUrl)).append("\n");
    sb.append("    bytesSynced: ").append(toIndentedString(bytesSynced)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    erroredFiles: ").append(toIndentedString(erroredFiles)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    folderBehaviorId: ").append(toIndentedString(folderBehaviorId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    remoteServerType: ").append(toIndentedString(remoteServerType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    successfulFiles: ").append(toIndentedString(successfulFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("body_url");
    openapiFields.add("bytes_synced");
    openapiFields.add("created_at");
    openapiFields.add("errored_files");
    openapiFields.add("event_type");
    openapiFields.add("folder_behavior_id");
    openapiFields.add("id");
    openapiFields.add("remote_server_type");
    openapiFields.add("status");
    openapiFields.add("successful_files");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalEventEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalEventEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalEventEntity is not found in the empty JSON string", ExternalEventEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalEventEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalEventEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_url") != null && !jsonObj.get("body_url").isJsonNull()) && !jsonObj.get("body_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_url").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      // validate the optional field `event_type`
      if (jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) {
        EventTypeEnum.validateJsonElement(jsonObj.get("event_type"));
      }
      if ((jsonObj.get("remote_server_type") != null && !jsonObj.get("remote_server_type").isJsonNull()) && !jsonObj.get("remote_server_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remote_server_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remote_server_type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalEventEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalEventEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalEventEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalEventEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalEventEntity>() {
           @Override
           public void write(JsonWriter out, ExternalEventEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalEventEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalEventEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalEventEntity
   * @throws IOException if the JSON string is invalid with respect to ExternalEventEntity
   */
  public static ExternalEventEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalEventEntity.class);
  }

  /**
   * Convert an instance of ExternalEventEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

