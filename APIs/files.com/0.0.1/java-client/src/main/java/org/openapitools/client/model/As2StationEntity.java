/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Create As2 Station
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class As2StationEntity {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_HEX_PUBLIC_CERTIFICATE_SERIAL = "hex_public_certificate_serial";
  @SerializedName(SERIALIZED_NAME_HEX_PUBLIC_CERTIFICATE_SERIAL)
  private String hexPublicCertificateSerial;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_MD5 = "private_key_md5";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_MD5)
  private String privateKeyMd5;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_PASSWORD_MD5 = "private_key_password_md5";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_PASSWORD_MD5)
  private String privateKeyPasswordMd5;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE_ISSUER = "public_certificate_issuer";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE_ISSUER)
  private String publicCertificateIssuer;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE_MD5 = "public_certificate_md5";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE_MD5)
  private String publicCertificateMd5;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE_NOT_AFTER = "public_certificate_not_after";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE_NOT_AFTER)
  private String publicCertificateNotAfter;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE_NOT_BEFORE = "public_certificate_not_before";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE_NOT_BEFORE)
  private String publicCertificateNotBefore;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE_SERIAL = "public_certificate_serial";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE_SERIAL)
  private String publicCertificateSerial;

  public static final String SERIALIZED_NAME_PUBLIC_CERTIFICATE_SUBJECT = "public_certificate_subject";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CERTIFICATE_SUBJECT)
  private String publicCertificateSubject;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public As2StationEntity() {
  }

  public As2StationEntity domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The station&#39;s AS2 domain name.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public As2StationEntity hexPublicCertificateSerial(String hexPublicCertificateSerial) {
    this.hexPublicCertificateSerial = hexPublicCertificateSerial;
    return this;
  }

  /**
   * Serial of public certificate used for message security in hex format.
   * @return hexPublicCertificateSerial
   */
  @javax.annotation.Nullable
  public String getHexPublicCertificateSerial() {
    return hexPublicCertificateSerial;
  }

  public void setHexPublicCertificateSerial(String hexPublicCertificateSerial) {
    this.hexPublicCertificateSerial = hexPublicCertificateSerial;
  }


  public As2StationEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the AS2 Station.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public As2StationEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The station&#39;s formal AS2 name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public As2StationEntity privateKeyMd5(String privateKeyMd5) {
    this.privateKeyMd5 = privateKeyMd5;
    return this;
  }

  /**
   * MD5 hash of private key used for message security.
   * @return privateKeyMd5
   */
  @javax.annotation.Nullable
  public String getPrivateKeyMd5() {
    return privateKeyMd5;
  }

  public void setPrivateKeyMd5(String privateKeyMd5) {
    this.privateKeyMd5 = privateKeyMd5;
  }


  public As2StationEntity privateKeyPasswordMd5(String privateKeyPasswordMd5) {
    this.privateKeyPasswordMd5 = privateKeyPasswordMd5;
    return this;
  }

  /**
   * MD5 hash of private key password used for message security.
   * @return privateKeyPasswordMd5
   */
  @javax.annotation.Nullable
  public String getPrivateKeyPasswordMd5() {
    return privateKeyPasswordMd5;
  }

  public void setPrivateKeyPasswordMd5(String privateKeyPasswordMd5) {
    this.privateKeyPasswordMd5 = privateKeyPasswordMd5;
  }


  public As2StationEntity publicCertificateIssuer(String publicCertificateIssuer) {
    this.publicCertificateIssuer = publicCertificateIssuer;
    return this;
  }

  /**
   * Issuer of public certificate used for message security.
   * @return publicCertificateIssuer
   */
  @javax.annotation.Nullable
  public String getPublicCertificateIssuer() {
    return publicCertificateIssuer;
  }

  public void setPublicCertificateIssuer(String publicCertificateIssuer) {
    this.publicCertificateIssuer = publicCertificateIssuer;
  }


  public As2StationEntity publicCertificateMd5(String publicCertificateMd5) {
    this.publicCertificateMd5 = publicCertificateMd5;
    return this;
  }

  /**
   * MD5 hash of public certificate used for message security.
   * @return publicCertificateMd5
   */
  @javax.annotation.Nullable
  public String getPublicCertificateMd5() {
    return publicCertificateMd5;
  }

  public void setPublicCertificateMd5(String publicCertificateMd5) {
    this.publicCertificateMd5 = publicCertificateMd5;
  }


  public As2StationEntity publicCertificateNotAfter(String publicCertificateNotAfter) {
    this.publicCertificateNotAfter = publicCertificateNotAfter;
    return this;
  }

  /**
   * Not after value of public certificate used for message security.
   * @return publicCertificateNotAfter
   */
  @javax.annotation.Nullable
  public String getPublicCertificateNotAfter() {
    return publicCertificateNotAfter;
  }

  public void setPublicCertificateNotAfter(String publicCertificateNotAfter) {
    this.publicCertificateNotAfter = publicCertificateNotAfter;
  }


  public As2StationEntity publicCertificateNotBefore(String publicCertificateNotBefore) {
    this.publicCertificateNotBefore = publicCertificateNotBefore;
    return this;
  }

  /**
   * Not before value of public certificate used for message security.
   * @return publicCertificateNotBefore
   */
  @javax.annotation.Nullable
  public String getPublicCertificateNotBefore() {
    return publicCertificateNotBefore;
  }

  public void setPublicCertificateNotBefore(String publicCertificateNotBefore) {
    this.publicCertificateNotBefore = publicCertificateNotBefore;
  }


  public As2StationEntity publicCertificateSerial(String publicCertificateSerial) {
    this.publicCertificateSerial = publicCertificateSerial;
    return this;
  }

  /**
   * Serial of public certificate used for message security.
   * @return publicCertificateSerial
   */
  @javax.annotation.Nullable
  public String getPublicCertificateSerial() {
    return publicCertificateSerial;
  }

  public void setPublicCertificateSerial(String publicCertificateSerial) {
    this.publicCertificateSerial = publicCertificateSerial;
  }


  public As2StationEntity publicCertificateSubject(String publicCertificateSubject) {
    this.publicCertificateSubject = publicCertificateSubject;
    return this;
  }

  /**
   * Subject of public certificate used for message security.
   * @return publicCertificateSubject
   */
  @javax.annotation.Nullable
  public String getPublicCertificateSubject() {
    return publicCertificateSubject;
  }

  public void setPublicCertificateSubject(String publicCertificateSubject) {
    this.publicCertificateSubject = publicCertificateSubject;
  }


  public As2StationEntity uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Public URI for sending AS2 message to.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    As2StationEntity as2StationEntity = (As2StationEntity) o;
    return Objects.equals(this.domain, as2StationEntity.domain) &&
        Objects.equals(this.hexPublicCertificateSerial, as2StationEntity.hexPublicCertificateSerial) &&
        Objects.equals(this.id, as2StationEntity.id) &&
        Objects.equals(this.name, as2StationEntity.name) &&
        Objects.equals(this.privateKeyMd5, as2StationEntity.privateKeyMd5) &&
        Objects.equals(this.privateKeyPasswordMd5, as2StationEntity.privateKeyPasswordMd5) &&
        Objects.equals(this.publicCertificateIssuer, as2StationEntity.publicCertificateIssuer) &&
        Objects.equals(this.publicCertificateMd5, as2StationEntity.publicCertificateMd5) &&
        Objects.equals(this.publicCertificateNotAfter, as2StationEntity.publicCertificateNotAfter) &&
        Objects.equals(this.publicCertificateNotBefore, as2StationEntity.publicCertificateNotBefore) &&
        Objects.equals(this.publicCertificateSerial, as2StationEntity.publicCertificateSerial) &&
        Objects.equals(this.publicCertificateSubject, as2StationEntity.publicCertificateSubject) &&
        Objects.equals(this.uri, as2StationEntity.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, hexPublicCertificateSerial, id, name, privateKeyMd5, privateKeyPasswordMd5, publicCertificateIssuer, publicCertificateMd5, publicCertificateNotAfter, publicCertificateNotBefore, publicCertificateSerial, publicCertificateSubject, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class As2StationEntity {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    hexPublicCertificateSerial: ").append(toIndentedString(hexPublicCertificateSerial)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    privateKeyMd5: ").append(toIndentedString(privateKeyMd5)).append("\n");
    sb.append("    privateKeyPasswordMd5: ").append(toIndentedString(privateKeyPasswordMd5)).append("\n");
    sb.append("    publicCertificateIssuer: ").append(toIndentedString(publicCertificateIssuer)).append("\n");
    sb.append("    publicCertificateMd5: ").append(toIndentedString(publicCertificateMd5)).append("\n");
    sb.append("    publicCertificateNotAfter: ").append(toIndentedString(publicCertificateNotAfter)).append("\n");
    sb.append("    publicCertificateNotBefore: ").append(toIndentedString(publicCertificateNotBefore)).append("\n");
    sb.append("    publicCertificateSerial: ").append(toIndentedString(publicCertificateSerial)).append("\n");
    sb.append("    publicCertificateSubject: ").append(toIndentedString(publicCertificateSubject)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("hex_public_certificate_serial");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("private_key_md5");
    openapiFields.add("private_key_password_md5");
    openapiFields.add("public_certificate_issuer");
    openapiFields.add("public_certificate_md5");
    openapiFields.add("public_certificate_not_after");
    openapiFields.add("public_certificate_not_before");
    openapiFields.add("public_certificate_serial");
    openapiFields.add("public_certificate_subject");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to As2StationEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!As2StationEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in As2StationEntity is not found in the empty JSON string", As2StationEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!As2StationEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `As2StationEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("hex_public_certificate_serial") != null && !jsonObj.get("hex_public_certificate_serial").isJsonNull()) && !jsonObj.get("hex_public_certificate_serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hex_public_certificate_serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hex_public_certificate_serial").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("private_key_md5") != null && !jsonObj.get("private_key_md5").isJsonNull()) && !jsonObj.get("private_key_md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_key_md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_key_md5").toString()));
      }
      if ((jsonObj.get("private_key_password_md5") != null && !jsonObj.get("private_key_password_md5").isJsonNull()) && !jsonObj.get("private_key_password_md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_key_password_md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_key_password_md5").toString()));
      }
      if ((jsonObj.get("public_certificate_issuer") != null && !jsonObj.get("public_certificate_issuer").isJsonNull()) && !jsonObj.get("public_certificate_issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_certificate_issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_certificate_issuer").toString()));
      }
      if ((jsonObj.get("public_certificate_md5") != null && !jsonObj.get("public_certificate_md5").isJsonNull()) && !jsonObj.get("public_certificate_md5").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_certificate_md5` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_certificate_md5").toString()));
      }
      if ((jsonObj.get("public_certificate_not_after") != null && !jsonObj.get("public_certificate_not_after").isJsonNull()) && !jsonObj.get("public_certificate_not_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_certificate_not_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_certificate_not_after").toString()));
      }
      if ((jsonObj.get("public_certificate_not_before") != null && !jsonObj.get("public_certificate_not_before").isJsonNull()) && !jsonObj.get("public_certificate_not_before").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_certificate_not_before` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_certificate_not_before").toString()));
      }
      if ((jsonObj.get("public_certificate_serial") != null && !jsonObj.get("public_certificate_serial").isJsonNull()) && !jsonObj.get("public_certificate_serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_certificate_serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_certificate_serial").toString()));
      }
      if ((jsonObj.get("public_certificate_subject") != null && !jsonObj.get("public_certificate_subject").isJsonNull()) && !jsonObj.get("public_certificate_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_certificate_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_certificate_subject").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!As2StationEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'As2StationEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<As2StationEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(As2StationEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<As2StationEntity>() {
           @Override
           public void write(JsonWriter out, As2StationEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public As2StationEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of As2StationEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of As2StationEntity
   * @throws IOException if the JSON string is invalid with respect to As2StationEntity
   */
  public static As2StationEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, As2StationEntity.class);
  }

  /**
   * Convert an instance of As2StationEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

