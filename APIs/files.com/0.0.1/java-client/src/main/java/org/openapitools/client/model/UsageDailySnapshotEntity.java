/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Usage Daily Snapshots
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageDailySnapshotEntity {
  public static final String SERIALIZED_NAME_API_USAGE_AVAILABLE = "api_usage_available";
  @SerializedName(SERIALIZED_NAME_API_USAGE_AVAILABLE)
  private Boolean apiUsageAvailable;

  public static final String SERIALIZED_NAME_CURRENT_STORAGE = "current_storage";
  @SerializedName(SERIALIZED_NAME_CURRENT_STORAGE)
  private Integer currentStorage;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_DELETED_FILES_COUNTED_IN_MINIMUM = "deleted_files_counted_in_minimum";
  @SerializedName(SERIALIZED_NAME_DELETED_FILES_COUNTED_IN_MINIMUM)
  private Integer deletedFilesCountedInMinimum;

  public static final String SERIALIZED_NAME_DELETED_FILES_STORAGE = "deleted_files_storage";
  @SerializedName(SERIALIZED_NAME_DELETED_FILES_STORAGE)
  private Integer deletedFilesStorage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_READ_API_USAGE = "read_api_usage";
  @SerializedName(SERIALIZED_NAME_READ_API_USAGE)
  private Integer readApiUsage;

  public static final String SERIALIZED_NAME_ROOT_STORAGE = "root_storage";
  @SerializedName(SERIALIZED_NAME_ROOT_STORAGE)
  private Integer rootStorage;

  public static final String SERIALIZED_NAME_USAGE_BY_TOP_LEVEL_DIR = "usage_by_top_level_dir";
  @SerializedName(SERIALIZED_NAME_USAGE_BY_TOP_LEVEL_DIR)
  private Object usageByTopLevelDir;

  public static final String SERIALIZED_NAME_USER_COUNT = "user_count";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public static final String SERIALIZED_NAME_WRITE_API_USAGE = "write_api_usage";
  @SerializedName(SERIALIZED_NAME_WRITE_API_USAGE)
  private Integer writeApiUsage;

  public UsageDailySnapshotEntity() {
  }

  public UsageDailySnapshotEntity apiUsageAvailable(Boolean apiUsageAvailable) {
    this.apiUsageAvailable = apiUsageAvailable;
    return this;
  }

  /**
   * True if the API usage fields &#x60;read_api_usage&#x60; and &#x60;write_api_usage&#x60; can be relied upon.  If this is false, we suggest hiding that value from any UI.
   * @return apiUsageAvailable
   */
  @javax.annotation.Nullable
  public Boolean getApiUsageAvailable() {
    return apiUsageAvailable;
  }

  public void setApiUsageAvailable(Boolean apiUsageAvailable) {
    this.apiUsageAvailable = apiUsageAvailable;
  }


  public UsageDailySnapshotEntity currentStorage(Integer currentStorage) {
    this.currentStorage = currentStorage;
    return this;
  }

  /**
   * GB of Files Native Storage used on this day.
   * @return currentStorage
   */
  @javax.annotation.Nullable
  public Integer getCurrentStorage() {
    return currentStorage;
  }

  public void setCurrentStorage(Integer currentStorage) {
    this.currentStorage = currentStorage;
  }


  public UsageDailySnapshotEntity date(LocalDate date) {
    this.date = date;
    return this;
  }

  /**
   * The date of this usage record
   * @return date
   */
  @javax.annotation.Nullable
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }


  public UsageDailySnapshotEntity deletedFilesCountedInMinimum(Integer deletedFilesCountedInMinimum) {
    this.deletedFilesCountedInMinimum = deletedFilesCountedInMinimum;
    return this;
  }

  /**
   * GB of Files Native Storage used on this day for files that have been permanently deleted but were uploaded less than 30 days ago, and are still billable.
   * @return deletedFilesCountedInMinimum
   */
  @javax.annotation.Nullable
  public Integer getDeletedFilesCountedInMinimum() {
    return deletedFilesCountedInMinimum;
  }

  public void setDeletedFilesCountedInMinimum(Integer deletedFilesCountedInMinimum) {
    this.deletedFilesCountedInMinimum = deletedFilesCountedInMinimum;
  }


  public UsageDailySnapshotEntity deletedFilesStorage(Integer deletedFilesStorage) {
    this.deletedFilesStorage = deletedFilesStorage;
    return this;
  }

  /**
   * GB of Files Native Storage used on this day for files that have been deleted and are stored as backups.
   * @return deletedFilesStorage
   */
  @javax.annotation.Nullable
  public Integer getDeletedFilesStorage() {
    return deletedFilesStorage;
  }

  public void setDeletedFilesStorage(Integer deletedFilesStorage) {
    this.deletedFilesStorage = deletedFilesStorage;
  }


  public UsageDailySnapshotEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the usage record
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public UsageDailySnapshotEntity readApiUsage(Integer readApiUsage) {
    this.readApiUsage = readApiUsage;
    return this;
  }

  /**
   * Read API Calls used on this day. Note: only updated for days before the current day.
   * @return readApiUsage
   */
  @javax.annotation.Nullable
  public Integer getReadApiUsage() {
    return readApiUsage;
  }

  public void setReadApiUsage(Integer readApiUsage) {
    this.readApiUsage = readApiUsage;
  }


  public UsageDailySnapshotEntity rootStorage(Integer rootStorage) {
    this.rootStorage = rootStorage;
    return this;
  }

  /**
   * GB of Files Native Storage used for the root folder.  Included here because this value will not be part of &#x60;usage_by_top_level_dir&#x60;
   * @return rootStorage
   */
  @javax.annotation.Nullable
  public Integer getRootStorage() {
    return rootStorage;
  }

  public void setRootStorage(Integer rootStorage) {
    this.rootStorage = rootStorage;
  }


  public UsageDailySnapshotEntity usageByTopLevelDir(Object usageByTopLevelDir) {
    this.usageByTopLevelDir = usageByTopLevelDir;
    return this;
  }

  /**
   * Usage broken down by each top-level folder
   * @return usageByTopLevelDir
   */
  @javax.annotation.Nullable
  public Object getUsageByTopLevelDir() {
    return usageByTopLevelDir;
  }

  public void setUsageByTopLevelDir(Object usageByTopLevelDir) {
    this.usageByTopLevelDir = usageByTopLevelDir;
  }


  public UsageDailySnapshotEntity userCount(Integer userCount) {
    this.userCount = userCount;
    return this;
  }

  /**
   * Number of billable users as of this day.
   * @return userCount
   */
  @javax.annotation.Nullable
  public Integer getUserCount() {
    return userCount;
  }

  public void setUserCount(Integer userCount) {
    this.userCount = userCount;
  }


  public UsageDailySnapshotEntity writeApiUsage(Integer writeApiUsage) {
    this.writeApiUsage = writeApiUsage;
    return this;
  }

  /**
   * Write API Calls used on this day. Note: only updated for days before the current day.
   * @return writeApiUsage
   */
  @javax.annotation.Nullable
  public Integer getWriteApiUsage() {
    return writeApiUsage;
  }

  public void setWriteApiUsage(Integer writeApiUsage) {
    this.writeApiUsage = writeApiUsage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageDailySnapshotEntity usageDailySnapshotEntity = (UsageDailySnapshotEntity) o;
    return Objects.equals(this.apiUsageAvailable, usageDailySnapshotEntity.apiUsageAvailable) &&
        Objects.equals(this.currentStorage, usageDailySnapshotEntity.currentStorage) &&
        Objects.equals(this.date, usageDailySnapshotEntity.date) &&
        Objects.equals(this.deletedFilesCountedInMinimum, usageDailySnapshotEntity.deletedFilesCountedInMinimum) &&
        Objects.equals(this.deletedFilesStorage, usageDailySnapshotEntity.deletedFilesStorage) &&
        Objects.equals(this.id, usageDailySnapshotEntity.id) &&
        Objects.equals(this.readApiUsage, usageDailySnapshotEntity.readApiUsage) &&
        Objects.equals(this.rootStorage, usageDailySnapshotEntity.rootStorage) &&
        Objects.equals(this.usageByTopLevelDir, usageDailySnapshotEntity.usageByTopLevelDir) &&
        Objects.equals(this.userCount, usageDailySnapshotEntity.userCount) &&
        Objects.equals(this.writeApiUsage, usageDailySnapshotEntity.writeApiUsage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiUsageAvailable, currentStorage, date, deletedFilesCountedInMinimum, deletedFilesStorage, id, readApiUsage, rootStorage, usageByTopLevelDir, userCount, writeApiUsage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageDailySnapshotEntity {\n");
    sb.append("    apiUsageAvailable: ").append(toIndentedString(apiUsageAvailable)).append("\n");
    sb.append("    currentStorage: ").append(toIndentedString(currentStorage)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    deletedFilesCountedInMinimum: ").append(toIndentedString(deletedFilesCountedInMinimum)).append("\n");
    sb.append("    deletedFilesStorage: ").append(toIndentedString(deletedFilesStorage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    readApiUsage: ").append(toIndentedString(readApiUsage)).append("\n");
    sb.append("    rootStorage: ").append(toIndentedString(rootStorage)).append("\n");
    sb.append("    usageByTopLevelDir: ").append(toIndentedString(usageByTopLevelDir)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("    writeApiUsage: ").append(toIndentedString(writeApiUsage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api_usage_available");
    openapiFields.add("current_storage");
    openapiFields.add("date");
    openapiFields.add("deleted_files_counted_in_minimum");
    openapiFields.add("deleted_files_storage");
    openapiFields.add("id");
    openapiFields.add("read_api_usage");
    openapiFields.add("root_storage");
    openapiFields.add("usage_by_top_level_dir");
    openapiFields.add("user_count");
    openapiFields.add("write_api_usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageDailySnapshotEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageDailySnapshotEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageDailySnapshotEntity is not found in the empty JSON string", UsageDailySnapshotEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageDailySnapshotEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageDailySnapshotEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageDailySnapshotEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageDailySnapshotEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageDailySnapshotEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageDailySnapshotEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageDailySnapshotEntity>() {
           @Override
           public void write(JsonWriter out, UsageDailySnapshotEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageDailySnapshotEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageDailySnapshotEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageDailySnapshotEntity
   * @throws IOException if the JSON string is invalid with respect to UsageDailySnapshotEntity
   */
  public static UsageDailySnapshotEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageDailySnapshotEntity.class);
  }

  /**
   * Convert an instance of UsageDailySnapshotEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

