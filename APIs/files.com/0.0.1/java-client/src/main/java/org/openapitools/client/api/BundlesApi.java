/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BundleEntity;
import java.io.File;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BundlesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BundlesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BundlesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteBundlesId
     * @param id Bundle ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBundlesIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bundles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBundlesIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBundlesId(Async)");
        }

        return deleteBundlesIdCall(id, _callback);

    }

    /**
     * Delete Bundle
     * Delete Bundle
     * @param id Bundle ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBundlesId(Integer id) throws ApiException {
        deleteBundlesIdWithHttpInfo(id);
    }

    /**
     * Delete Bundle
     * Delete Bundle
     * @param id Bundle ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBundlesIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteBundlesIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Bundle (asynchronously)
     * Delete Bundle
     * @param id Bundle ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBundlesIdAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBundlesIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBundles
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[created_at]&#x3D;desc&#x60;). Valid fields are &#x60;created_at&#x60; and &#x60;code&#x60;. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Bundles objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBundlesCall(Integer userId, String cursor, Integer perPage, Object sortBy, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filter));
        }

        if (filterGt != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterGt));
        }

        if (filterGteq != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterGteq));
        }

        if (filterLt != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterLt));
        }

        if (filterLteq != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(filterLteq));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBundlesValidateBeforeCall(Integer userId, String cursor, Integer perPage, Object sortBy, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, final ApiCallback _callback) throws ApiException {
        return getBundlesCall(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLt, filterLteq, _callback);

    }

    /**
     * List Bundles
     * List Bundles
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[created_at]&#x3D;desc&#x60;). Valid fields are &#x60;created_at&#x60; and &#x60;code&#x60;. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @return List&lt;BundleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Bundles objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public List<BundleEntity> getBundles(Integer userId, String cursor, Integer perPage, Object sortBy, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq) throws ApiException {
        ApiResponse<List<BundleEntity>> localVarResp = getBundlesWithHttpInfo(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLt, filterLteq);
        return localVarResp.getData();
    }

    /**
     * List Bundles
     * List Bundles
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[created_at]&#x3D;desc&#x60;). Valid fields are &#x60;created_at&#x60; and &#x60;code&#x60;. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @return ApiResponse&lt;List&lt;BundleEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Bundles objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BundleEntity>> getBundlesWithHttpInfo(Integer userId, String cursor, Integer perPage, Object sortBy, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq) throws ApiException {
        okhttp3.Call localVarCall = getBundlesValidateBeforeCall(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLt, filterLteq, null);
        Type localVarReturnType = new TypeToken<List<BundleEntity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Bundles (asynchronously)
     * List Bundles
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param cursor Used for pagination.  When a list request has more records available, cursors are provided in the response headers &#x60;X-Files-Cursor-Next&#x60; and &#x60;X-Files-Cursor-Prev&#x60;.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination. (optional)
     * @param perPage Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended). (optional)
     * @param sortBy If set, sort records by the specified field in either &#x60;asc&#x60; or &#x60;desc&#x60; direction (e.g. &#x60;sort_by[created_at]&#x3D;desc&#x60;). Valid fields are &#x60;created_at&#x60; and &#x60;code&#x60;. (optional)
     * @param filter If set, return records where the specified field is equal to the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGt If set, return records where the specified field is greater than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterGteq If set, return records where the specified field is greater than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLt If set, return records where the specified field is less than the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param filterLteq If set, return records where the specified field is less than or equal the supplied value. Valid fields are &#x60;created_at&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Bundles objects. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBundlesAsync(Integer userId, String cursor, Integer perPage, Object sortBy, Object filter, Object filterGt, Object filterGteq, Object filterLt, Object filterLteq, final ApiCallback<List<BundleEntity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBundlesValidateBeforeCall(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLt, filterLteq, _callback);
        Type localVarReturnType = new TypeToken<List<BundleEntity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBundlesId
     * @param id Bundle ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBundlesIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bundles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBundlesIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBundlesId(Async)");
        }

        return getBundlesIdCall(id, _callback);

    }

    /**
     * Show Bundle
     * Show Bundle
     * @param id Bundle ID. (required)
     * @return BundleEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public BundleEntity getBundlesId(Integer id) throws ApiException {
        ApiResponse<BundleEntity> localVarResp = getBundlesIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Show Bundle
     * Show Bundle
     * @param id Bundle ID. (required)
     * @return ApiResponse&lt;BundleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleEntity> getBundlesIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getBundlesIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BundleEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show Bundle (asynchronously)
     * Show Bundle
     * @param id Bundle ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBundlesIdAsync(Integer id, final ApiCallback<BundleEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBundlesIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BundleEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchBundlesId
     * @param id Bundle ID. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param paths A list of paths to include in this bundle. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param watermarkAttachmentDelete If true, will delete the file stored in watermark_attachment (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchBundlesIdCall(Integer id, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, List<String> paths, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Boolean watermarkAttachmentDelete, File watermarkAttachmentFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bundles/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clickwrapId != null) {
            localVarFormParams.put("clickwrap_id", clickwrapId);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (dontSeparateSubmissionsByFolder != null) {
            localVarFormParams.put("dont_separate_submissions_by_folder", dontSeparateSubmissionsByFolder);
        }

        if (expiresAt != null) {
            localVarFormParams.put("expires_at", expiresAt);
        }

        if (formFieldSetId != null) {
            localVarFormParams.put("form_field_set_id", formFieldSetId);
        }

        if (inboxId != null) {
            localVarFormParams.put("inbox_id", inboxId);
        }

        if (maxUses != null) {
            localVarFormParams.put("max_uses", maxUses);
        }

        if (note != null) {
            localVarFormParams.put("note", note);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (pathTemplate != null) {
            localVarFormParams.put("path_template", pathTemplate);
        }

        if (paths != null) {
            localVarFormParams.put("paths", paths);
        }

        if (permissions != null) {
            localVarFormParams.put("permissions", permissions);
        }

        if (previewOnly != null) {
            localVarFormParams.put("preview_only", previewOnly);
        }

        if (requireRegistration != null) {
            localVarFormParams.put("require_registration", requireRegistration);
        }

        if (requireShareRecipient != null) {
            localVarFormParams.put("require_share_recipient", requireShareRecipient);
        }

        if (sendEmailReceiptToUploader != null) {
            localVarFormParams.put("send_email_receipt_to_uploader", sendEmailReceiptToUploader);
        }

        if (skipCompany != null) {
            localVarFormParams.put("skip_company", skipCompany);
        }

        if (skipEmail != null) {
            localVarFormParams.put("skip_email", skipEmail);
        }

        if (skipName != null) {
            localVarFormParams.put("skip_name", skipName);
        }

        if (watermarkAttachmentDelete != null) {
            localVarFormParams.put("watermark_attachment_delete", watermarkAttachmentDelete);
        }

        if (watermarkAttachmentFile != null) {
            localVarFormParams.put("watermark_attachment_file", watermarkAttachmentFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchBundlesIdValidateBeforeCall(Integer id, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, List<String> paths, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Boolean watermarkAttachmentDelete, File watermarkAttachmentFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling patchBundlesId(Async)");
        }

        return patchBundlesIdCall(id, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, paths, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, watermarkAttachmentDelete, watermarkAttachmentFile, _callback);

    }

    /**
     * Update Bundle
     * Update Bundle
     * @param id Bundle ID. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param paths A list of paths to include in this bundle. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param watermarkAttachmentDelete If true, will delete the file stored in watermark_attachment (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @return BundleEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public BundleEntity patchBundlesId(Integer id, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, List<String> paths, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Boolean watermarkAttachmentDelete, File watermarkAttachmentFile) throws ApiException {
        ApiResponse<BundleEntity> localVarResp = patchBundlesIdWithHttpInfo(id, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, paths, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, watermarkAttachmentDelete, watermarkAttachmentFile);
        return localVarResp.getData();
    }

    /**
     * Update Bundle
     * Update Bundle
     * @param id Bundle ID. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param paths A list of paths to include in this bundle. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param watermarkAttachmentDelete If true, will delete the file stored in watermark_attachment (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @return ApiResponse&lt;BundleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleEntity> patchBundlesIdWithHttpInfo(Integer id, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, List<String> paths, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Boolean watermarkAttachmentDelete, File watermarkAttachmentFile) throws ApiException {
        okhttp3.Call localVarCall = patchBundlesIdValidateBeforeCall(id, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, paths, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, watermarkAttachmentDelete, watermarkAttachmentFile, null);
        Type localVarReturnType = new TypeToken<BundleEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Bundle (asynchronously)
     * Update Bundle
     * @param id Bundle ID. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param paths A list of paths to include in this bundle. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param watermarkAttachmentDelete If true, will delete the file stored in watermark_attachment (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchBundlesIdAsync(Integer id, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, List<String> paths, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Boolean watermarkAttachmentDelete, File watermarkAttachmentFile, final ApiCallback<BundleEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchBundlesIdValidateBeforeCall(id, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, paths, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, watermarkAttachmentDelete, watermarkAttachmentFile, _callback);
        Type localVarReturnType = new TypeToken<BundleEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBundles
     * @param paths A list of paths to include in this bundle. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBundlesCall(List<String> paths, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Integer userId, File watermarkAttachmentFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bundles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clickwrapId != null) {
            localVarFormParams.put("clickwrap_id", clickwrapId);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (dontSeparateSubmissionsByFolder != null) {
            localVarFormParams.put("dont_separate_submissions_by_folder", dontSeparateSubmissionsByFolder);
        }

        if (expiresAt != null) {
            localVarFormParams.put("expires_at", expiresAt);
        }

        if (formFieldSetId != null) {
            localVarFormParams.put("form_field_set_id", formFieldSetId);
        }

        if (inboxId != null) {
            localVarFormParams.put("inbox_id", inboxId);
        }

        if (maxUses != null) {
            localVarFormParams.put("max_uses", maxUses);
        }

        if (note != null) {
            localVarFormParams.put("note", note);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (pathTemplate != null) {
            localVarFormParams.put("path_template", pathTemplate);
        }

        if (paths != null) {
            localVarFormParams.put("paths", paths);
        }

        if (permissions != null) {
            localVarFormParams.put("permissions", permissions);
        }

        if (previewOnly != null) {
            localVarFormParams.put("preview_only", previewOnly);
        }

        if (requireRegistration != null) {
            localVarFormParams.put("require_registration", requireRegistration);
        }

        if (requireShareRecipient != null) {
            localVarFormParams.put("require_share_recipient", requireShareRecipient);
        }

        if (sendEmailReceiptToUploader != null) {
            localVarFormParams.put("send_email_receipt_to_uploader", sendEmailReceiptToUploader);
        }

        if (skipCompany != null) {
            localVarFormParams.put("skip_company", skipCompany);
        }

        if (skipEmail != null) {
            localVarFormParams.put("skip_email", skipEmail);
        }

        if (skipName != null) {
            localVarFormParams.put("skip_name", skipName);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (watermarkAttachmentFile != null) {
            localVarFormParams.put("watermark_attachment_file", watermarkAttachmentFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBundlesValidateBeforeCall(List<String> paths, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Integer userId, File watermarkAttachmentFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paths' is set
        if (paths == null) {
            throw new ApiException("Missing the required parameter 'paths' when calling postBundles(Async)");
        }

        return postBundlesCall(paths, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, userId, watermarkAttachmentFile, _callback);

    }

    /**
     * Create Bundle
     * Create Bundle
     * @param paths A list of paths to include in this bundle. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @return BundleEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public BundleEntity postBundles(List<String> paths, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Integer userId, File watermarkAttachmentFile) throws ApiException {
        ApiResponse<BundleEntity> localVarResp = postBundlesWithHttpInfo(paths, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, userId, watermarkAttachmentFile);
        return localVarResp.getData();
    }

    /**
     * Create Bundle
     * Create Bundle
     * @param paths A list of paths to include in this bundle. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @return ApiResponse&lt;BundleEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleEntity> postBundlesWithHttpInfo(List<String> paths, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Integer userId, File watermarkAttachmentFile) throws ApiException {
        okhttp3.Call localVarCall = postBundlesValidateBeforeCall(paths, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, userId, watermarkAttachmentFile, null);
        Type localVarReturnType = new TypeToken<BundleEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Bundle (asynchronously)
     * Create Bundle
     * @param paths A list of paths to include in this bundle. (required)
     * @param clickwrapId ID of the clickwrap to use with this bundle. (optional)
     * @param code Bundle code.  This code forms the end part of the Public URL. (optional)
     * @param description Public description (optional)
     * @param dontSeparateSubmissionsByFolder Do not create subfolders for files uploaded to this share. Note: there are subtle security pitfalls with allowing anonymous uploads from multiple users to live in the same folder. We strongly discourage use of this option unless absolutely required. (optional)
     * @param expiresAt Bundle expiration date/time (optional)
     * @param formFieldSetId Id of Form Field Set to use with this bundle (optional)
     * @param inboxId ID of the associated inbox, if available. (optional)
     * @param maxUses Maximum number of times bundle can be accessed (optional)
     * @param note Bundle internal note (optional)
     * @param password Password for this bundle. (optional)
     * @param pathTemplate Template for creating submission subfolders. Can use the uploader&#39;s name, email address, ip, company, and any custom form data. (optional)
     * @param permissions Permissions that apply to Folders in this Share Link. (optional)
     * @param previewOnly Restrict users to previewing files only? (optional)
     * @param requireRegistration Show a registration page that captures the downloader&#39;s name and email address? (optional)
     * @param requireShareRecipient Only allow access to recipients who have explicitly received the share via an email sent through the Files.com UI? (optional)
     * @param sendEmailReceiptToUploader Send delivery receipt to the uploader. Note: For writable share only (optional)
     * @param skipCompany BundleRegistrations can be saved without providing company? (optional)
     * @param skipEmail BundleRegistrations can be saved without providing email? (optional)
     * @param skipName BundleRegistrations can be saved without providing name? (optional)
     * @param userId User ID.  Provide a value of &#x60;0&#x60; to operate the current session&#39;s user. (optional)
     * @param watermarkAttachmentFile Preview watermark image applied to all bundle items. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The Bundles object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBundlesAsync(List<String> paths, Integer clickwrapId, String code, String description, Boolean dontSeparateSubmissionsByFolder, OffsetDateTime expiresAt, Integer formFieldSetId, Integer inboxId, Integer maxUses, String note, String password, String pathTemplate, String permissions, Boolean previewOnly, Boolean requireRegistration, Boolean requireShareRecipient, Boolean sendEmailReceiptToUploader, Boolean skipCompany, Boolean skipEmail, Boolean skipName, Integer userId, File watermarkAttachmentFile, final ApiCallback<BundleEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBundlesValidateBeforeCall(paths, clickwrapId, code, description, dontSeparateSubmissionsByFolder, expiresAt, formFieldSetId, inboxId, maxUses, note, password, pathTemplate, permissions, previewOnly, requireRegistration, requireShareRecipient, sendEmailReceiptToUploader, skipCompany, skipEmail, skipName, userId, watermarkAttachmentFile, _callback);
        Type localVarReturnType = new TypeToken<BundleEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBundlesIdShare
     * @param id Bundle ID. (required)
     * @param note Note to include in email. (optional)
     * @param recipients A list of recipients to share this bundle with. Required unless &#x60;to&#x60; is used. (optional)
     * @param to A list of email addresses to share this bundle with. Required unless &#x60;recipients&#x60; is used. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBundlesIdShareCall(Integer id, String note, List<Object> recipients, List<String> to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bundles/{id}/share"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (note != null) {
            localVarFormParams.put("note", note);
        }

        if (recipients != null) {
            localVarFormParams.put("recipients", recipients);
        }

        if (to != null) {
            localVarFormParams.put("to", to);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBundlesIdShareValidateBeforeCall(Integer id, String note, List<Object> recipients, List<String> to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postBundlesIdShare(Async)");
        }

        return postBundlesIdShareCall(id, note, recipients, to, _callback);

    }

    /**
     * Send email(s) with a link to bundle
     * Send email(s) with a link to bundle
     * @param id Bundle ID. (required)
     * @param note Note to include in email. (optional)
     * @param recipients A list of recipients to share this bundle with. Required unless &#x60;to&#x60; is used. (optional)
     * @param to A list of email addresses to share this bundle with. Required unless &#x60;recipients&#x60; is used. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void postBundlesIdShare(Integer id, String note, List<Object> recipients, List<String> to) throws ApiException {
        postBundlesIdShareWithHttpInfo(id, note, recipients, to);
    }

    /**
     * Send email(s) with a link to bundle
     * Send email(s) with a link to bundle
     * @param id Bundle ID. (required)
     * @param note Note to include in email. (optional)
     * @param recipients A list of recipients to share this bundle with. Required unless &#x60;to&#x60; is used. (optional)
     * @param to A list of email addresses to share this bundle with. Required unless &#x60;recipients&#x60; is used. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postBundlesIdShareWithHttpInfo(Integer id, String note, List<Object> recipients, List<String> to) throws ApiException {
        okhttp3.Call localVarCall = postBundlesIdShareValidateBeforeCall(id, note, recipients, to, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send email(s) with a link to bundle (asynchronously)
     * Send email(s) with a link to bundle
     * @param id Bundle ID. (required)
     * @param note Note to include in email. (optional)
     * @param recipients A list of recipients to share this bundle with. Required unless &#x60;to&#x60; is used. (optional)
     * @param to A list of email addresses to share this bundle with. Required unless &#x60;recipients&#x60; is used. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> Locked </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBundlesIdShareAsync(Integer id, String note, List<Object> recipients, List<String> to, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBundlesIdShareValidateBeforeCall(id, note, recipients, to, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
