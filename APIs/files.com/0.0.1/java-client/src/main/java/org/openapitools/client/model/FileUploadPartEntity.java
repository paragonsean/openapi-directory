/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Begin file upload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileUploadPartEntity {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ASK_ABOUT_OVERWRITES = "ask_about_overwrites";
  @SerializedName(SERIALIZED_NAME_ASK_ABOUT_OVERWRITES)
  private Boolean askAboutOverwrites;

  public static final String SERIALIZED_NAME_AVAILABLE_PARTS = "available_parts";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PARTS)
  private Integer availableParts;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private String expires;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Object headers;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "http_method";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private String httpMethod;

  public static final String SERIALIZED_NAME_NEXT_PARTSIZE = "next_partsize";
  @SerializedName(SERIALIZED_NAME_NEXT_PARTSIZE)
  private Integer nextPartsize;

  public static final String SERIALIZED_NAME_PARALLEL_PARTS = "parallel_parts";
  @SerializedName(SERIALIZED_NAME_PARALLEL_PARTS)
  private Boolean parallelParts;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_PART_NUMBER = "part_number";
  @SerializedName(SERIALIZED_NAME_PART_NUMBER)
  private Integer partNumber;

  public static final String SERIALIZED_NAME_PARTSIZE = "partsize";
  @SerializedName(SERIALIZED_NAME_PARTSIZE)
  private Integer partsize;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_RETRY_PARTS = "retry_parts";
  @SerializedName(SERIALIZED_NAME_RETRY_PARTS)
  private Boolean retryParts;

  public static final String SERIALIZED_NAME_SEND = "send";
  @SerializedName(SERIALIZED_NAME_SEND)
  private Object send;

  public static final String SERIALIZED_NAME_UPLOAD_URI = "upload_uri";
  @SerializedName(SERIALIZED_NAME_UPLOAD_URI)
  private String uploadUri;

  public FileUploadPartEntity() {
  }

  public FileUploadPartEntity action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Type of upload
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public FileUploadPartEntity askAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
    return this;
  }

  /**
   * If &#x60;true&#x60;, this file exists and you may wish to ask the user for overwrite confirmation
   * @return askAboutOverwrites
   */
  @javax.annotation.Nullable
  public Boolean getAskAboutOverwrites() {
    return askAboutOverwrites;
  }

  public void setAskAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
  }


  public FileUploadPartEntity availableParts(Integer availableParts) {
    this.availableParts = availableParts;
    return this;
  }

  /**
   * Number of parts in the upload
   * @return availableParts
   */
  @javax.annotation.Nullable
  public Integer getAvailableParts() {
    return availableParts;
  }

  public void setAvailableParts(Integer availableParts) {
    this.availableParts = availableParts;
  }


  public FileUploadPartEntity expires(String expires) {
    this.expires = expires;
    return this;
  }

  /**
   * Date/time of when this Upload part expires and the URL cannot be used any more
   * @return expires
   */
  @javax.annotation.Nullable
  public String getExpires() {
    return expires;
  }

  public void setExpires(String expires) {
    this.expires = expires;
  }


  public FileUploadPartEntity headers(Object headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Additional upload headers to provide as part of the upload
   * @return headers
   */
  @javax.annotation.Nullable
  public Object getHeaders() {
    return headers;
  }

  public void setHeaders(Object headers) {
    this.headers = headers;
  }


  public FileUploadPartEntity httpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * HTTP Method to use for uploading the part, usually &#x60;PUT&#x60;
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public String getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }


  public FileUploadPartEntity nextPartsize(Integer nextPartsize) {
    this.nextPartsize = nextPartsize;
    return this;
  }

  /**
   * Size in bytes for this part
   * @return nextPartsize
   */
  @javax.annotation.Nullable
  public Integer getNextPartsize() {
    return nextPartsize;
  }

  public void setNextPartsize(Integer nextPartsize) {
    this.nextPartsize = nextPartsize;
  }


  public FileUploadPartEntity parallelParts(Boolean parallelParts) {
    this.parallelParts = parallelParts;
    return this;
  }

  /**
   * If &#x60;true&#x60;, multiple parts may be uploaded in parallel.  If &#x60;false&#x60;, be sure to only upload one part at a time, in order.
   * @return parallelParts
   */
  @javax.annotation.Nullable
  public Boolean getParallelParts() {
    return parallelParts;
  }

  public void setParallelParts(Boolean parallelParts) {
    this.parallelParts = parallelParts;
  }


  public FileUploadPartEntity parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Additional HTTP parameters to send with the upload
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }


  public FileUploadPartEntity partNumber(Integer partNumber) {
    this.partNumber = partNumber;
    return this;
  }

  /**
   * Number of this upload part
   * @return partNumber
   */
  @javax.annotation.Nullable
  public Integer getPartNumber() {
    return partNumber;
  }

  public void setPartNumber(Integer partNumber) {
    this.partNumber = partNumber;
  }


  public FileUploadPartEntity partsize(Integer partsize) {
    this.partsize = partsize;
    return this;
  }

  /**
   * Size in bytes for the next upload part
   * @return partsize
   */
  @javax.annotation.Nullable
  public Integer getPartsize() {
    return partsize;
  }

  public void setPartsize(Integer partsize) {
    this.partsize = partsize;
  }


  public FileUploadPartEntity path(String path) {
    this.path = path;
    return this;
  }

  /**
   * New file path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public FileUploadPartEntity ref(String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * Reference name for this upload part
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }


  public FileUploadPartEntity retryParts(Boolean retryParts) {
    this.retryParts = retryParts;
    return this;
  }

  /**
   * If &#x60;true&#x60;, parts may be retried. If &#x60;false&#x60;, a part cannot be retried and the upload should be restarted.
   * @return retryParts
   */
  @javax.annotation.Nullable
  public Boolean getRetryParts() {
    return retryParts;
  }

  public void setRetryParts(Boolean retryParts) {
    this.retryParts = retryParts;
  }


  public FileUploadPartEntity send(Object send) {
    this.send = send;
    return this;
  }

  /**
   * Content-Type and File to send
   * @return send
   */
  @javax.annotation.Nullable
  public Object getSend() {
    return send;
  }

  public void setSend(Object send) {
    this.send = send;
  }


  public FileUploadPartEntity uploadUri(String uploadUri) {
    this.uploadUri = uploadUri;
    return this;
  }

  /**
   * URI to upload this part to
   * @return uploadUri
   */
  @javax.annotation.Nullable
  public String getUploadUri() {
    return uploadUri;
  }

  public void setUploadUri(String uploadUri) {
    this.uploadUri = uploadUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileUploadPartEntity fileUploadPartEntity = (FileUploadPartEntity) o;
    return Objects.equals(this.action, fileUploadPartEntity.action) &&
        Objects.equals(this.askAboutOverwrites, fileUploadPartEntity.askAboutOverwrites) &&
        Objects.equals(this.availableParts, fileUploadPartEntity.availableParts) &&
        Objects.equals(this.expires, fileUploadPartEntity.expires) &&
        Objects.equals(this.headers, fileUploadPartEntity.headers) &&
        Objects.equals(this.httpMethod, fileUploadPartEntity.httpMethod) &&
        Objects.equals(this.nextPartsize, fileUploadPartEntity.nextPartsize) &&
        Objects.equals(this.parallelParts, fileUploadPartEntity.parallelParts) &&
        Objects.equals(this.parameters, fileUploadPartEntity.parameters) &&
        Objects.equals(this.partNumber, fileUploadPartEntity.partNumber) &&
        Objects.equals(this.partsize, fileUploadPartEntity.partsize) &&
        Objects.equals(this.path, fileUploadPartEntity.path) &&
        Objects.equals(this.ref, fileUploadPartEntity.ref) &&
        Objects.equals(this.retryParts, fileUploadPartEntity.retryParts) &&
        Objects.equals(this.send, fileUploadPartEntity.send) &&
        Objects.equals(this.uploadUri, fileUploadPartEntity.uploadUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, askAboutOverwrites, availableParts, expires, headers, httpMethod, nextPartsize, parallelParts, parameters, partNumber, partsize, path, ref, retryParts, send, uploadUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileUploadPartEntity {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    askAboutOverwrites: ").append(toIndentedString(askAboutOverwrites)).append("\n");
    sb.append("    availableParts: ").append(toIndentedString(availableParts)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    nextPartsize: ").append(toIndentedString(nextPartsize)).append("\n");
    sb.append("    parallelParts: ").append(toIndentedString(parallelParts)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    partsize: ").append(toIndentedString(partsize)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    retryParts: ").append(toIndentedString(retryParts)).append("\n");
    sb.append("    send: ").append(toIndentedString(send)).append("\n");
    sb.append("    uploadUri: ").append(toIndentedString(uploadUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("ask_about_overwrites");
    openapiFields.add("available_parts");
    openapiFields.add("expires");
    openapiFields.add("headers");
    openapiFields.add("http_method");
    openapiFields.add("next_partsize");
    openapiFields.add("parallel_parts");
    openapiFields.add("parameters");
    openapiFields.add("part_number");
    openapiFields.add("partsize");
    openapiFields.add("path");
    openapiFields.add("ref");
    openapiFields.add("retry_parts");
    openapiFields.add("send");
    openapiFields.add("upload_uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileUploadPartEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileUploadPartEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileUploadPartEntity is not found in the empty JSON string", FileUploadPartEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileUploadPartEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileUploadPartEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("expires") != null && !jsonObj.get("expires").isJsonNull()) && !jsonObj.get("expires").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires").toString()));
      }
      if ((jsonObj.get("http_method") != null && !jsonObj.get("http_method").isJsonNull()) && !jsonObj.get("http_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_method").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if ((jsonObj.get("upload_uri") != null && !jsonObj.get("upload_uri").isJsonNull()) && !jsonObj.get("upload_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileUploadPartEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileUploadPartEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileUploadPartEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileUploadPartEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<FileUploadPartEntity>() {
           @Override
           public void write(JsonWriter out, FileUploadPartEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileUploadPartEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileUploadPartEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileUploadPartEntity
   * @throws IOException if the JSON string is invalid with respect to FileUploadPartEntity
   */
  public static FileUploadPartEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileUploadPartEntity.class);
  }

  /**
   * Convert an instance of FileUploadPartEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

