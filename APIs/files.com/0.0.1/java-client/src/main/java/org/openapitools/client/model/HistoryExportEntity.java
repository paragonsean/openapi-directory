/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Show History Export
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryExportEntity {
  public static final String SERIALIZED_NAME_END_AT = "end_at";
  @SerializedName(SERIALIZED_NAME_END_AT)
  private OffsetDateTime endAt;

  public static final String SERIALIZED_NAME_HISTORY_VERSION = "history_version";
  @SerializedName(SERIALIZED_NAME_HISTORY_VERSION)
  private String historyVersion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_QUERY_ACTION = "query_action";
  @SerializedName(SERIALIZED_NAME_QUERY_ACTION)
  private String queryAction;

  public static final String SERIALIZED_NAME_QUERY_DESTINATION = "query_destination";
  @SerializedName(SERIALIZED_NAME_QUERY_DESTINATION)
  private String queryDestination;

  public static final String SERIALIZED_NAME_QUERY_FAILURE_TYPE = "query_failure_type";
  @SerializedName(SERIALIZED_NAME_QUERY_FAILURE_TYPE)
  private String queryFailureType;

  public static final String SERIALIZED_NAME_QUERY_FILE_ID = "query_file_id";
  @SerializedName(SERIALIZED_NAME_QUERY_FILE_ID)
  private String queryFileId;

  public static final String SERIALIZED_NAME_QUERY_FOLDER = "query_folder";
  @SerializedName(SERIALIZED_NAME_QUERY_FOLDER)
  private String queryFolder;

  public static final String SERIALIZED_NAME_QUERY_INTERFACE = "query_interface";
  @SerializedName(SERIALIZED_NAME_QUERY_INTERFACE)
  private String queryInterface;

  public static final String SERIALIZED_NAME_QUERY_IP = "query_ip";
  @SerializedName(SERIALIZED_NAME_QUERY_IP)
  private String queryIp;

  public static final String SERIALIZED_NAME_QUERY_PARENT_ID = "query_parent_id";
  @SerializedName(SERIALIZED_NAME_QUERY_PARENT_ID)
  private String queryParentId;

  public static final String SERIALIZED_NAME_QUERY_PATH = "query_path";
  @SerializedName(SERIALIZED_NAME_QUERY_PATH)
  private String queryPath;

  public static final String SERIALIZED_NAME_QUERY_SRC = "query_src";
  @SerializedName(SERIALIZED_NAME_QUERY_SRC)
  private String querySrc;

  public static final String SERIALIZED_NAME_QUERY_TARGET_ID = "query_target_id";
  @SerializedName(SERIALIZED_NAME_QUERY_TARGET_ID)
  private String queryTargetId;

  public static final String SERIALIZED_NAME_QUERY_TARGET_NAME = "query_target_name";
  @SerializedName(SERIALIZED_NAME_QUERY_TARGET_NAME)
  private String queryTargetName;

  public static final String SERIALIZED_NAME_QUERY_TARGET_PERMISSION = "query_target_permission";
  @SerializedName(SERIALIZED_NAME_QUERY_TARGET_PERMISSION)
  private String queryTargetPermission;

  public static final String SERIALIZED_NAME_QUERY_TARGET_PERMISSION_SET = "query_target_permission_set";
  @SerializedName(SERIALIZED_NAME_QUERY_TARGET_PERMISSION_SET)
  private String queryTargetPermissionSet;

  public static final String SERIALIZED_NAME_QUERY_TARGET_PLATFORM = "query_target_platform";
  @SerializedName(SERIALIZED_NAME_QUERY_TARGET_PLATFORM)
  private String queryTargetPlatform;

  public static final String SERIALIZED_NAME_QUERY_TARGET_USER_ID = "query_target_user_id";
  @SerializedName(SERIALIZED_NAME_QUERY_TARGET_USER_ID)
  private String queryTargetUserId;

  public static final String SERIALIZED_NAME_QUERY_TARGET_USERNAME = "query_target_username";
  @SerializedName(SERIALIZED_NAME_QUERY_TARGET_USERNAME)
  private String queryTargetUsername;

  public static final String SERIALIZED_NAME_QUERY_USER_ID = "query_user_id";
  @SerializedName(SERIALIZED_NAME_QUERY_USER_ID)
  private String queryUserId;

  public static final String SERIALIZED_NAME_QUERY_USERNAME = "query_username";
  @SerializedName(SERIALIZED_NAME_QUERY_USERNAME)
  private String queryUsername;

  public static final String SERIALIZED_NAME_RESULTS_URL = "results_url";
  @SerializedName(SERIALIZED_NAME_RESULTS_URL)
  private String resultsUrl;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private OffsetDateTime startAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public HistoryExportEntity() {
  }

  public HistoryExportEntity endAt(OffsetDateTime endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * End date/time of export range.
   * @return endAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndAt() {
    return endAt;
  }

  public void setEndAt(OffsetDateTime endAt) {
    this.endAt = endAt;
  }


  public HistoryExportEntity historyVersion(String historyVersion) {
    this.historyVersion = historyVersion;
    return this;
  }

  /**
   * Version of the history for the export.
   * @return historyVersion
   */
  @javax.annotation.Nullable
  public String getHistoryVersion() {
    return historyVersion;
  }

  public void setHistoryVersion(String historyVersion) {
    this.historyVersion = historyVersion;
  }


  public HistoryExportEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * History Export ID
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public HistoryExportEntity queryAction(String queryAction) {
    this.queryAction = queryAction;
    return this;
  }

  /**
   * Filter results by this this action type. Valid values: &#x60;create&#x60;, &#x60;read&#x60;, &#x60;update&#x60;, &#x60;destroy&#x60;, &#x60;move&#x60;, &#x60;login&#x60;, &#x60;failedlogin&#x60;, &#x60;copy&#x60;, &#x60;user_create&#x60;, &#x60;user_update&#x60;, &#x60;user_destroy&#x60;, &#x60;group_create&#x60;, &#x60;group_update&#x60;, &#x60;group_destroy&#x60;, &#x60;permission_create&#x60;, &#x60;permission_destroy&#x60;, &#x60;api_key_create&#x60;, &#x60;api_key_update&#x60;, &#x60;api_key_destroy&#x60;
   * @return queryAction
   */
  @javax.annotation.Nullable
  public String getQueryAction() {
    return queryAction;
  }

  public void setQueryAction(String queryAction) {
    this.queryAction = queryAction;
  }


  public HistoryExportEntity queryDestination(String queryDestination) {
    this.queryDestination = queryDestination;
    return this;
  }

  /**
   * Return results that are file moves with this path as destination.
   * @return queryDestination
   */
  @javax.annotation.Nullable
  public String getQueryDestination() {
    return queryDestination;
  }

  public void setQueryDestination(String queryDestination) {
    this.queryDestination = queryDestination;
  }


  public HistoryExportEntity queryFailureType(String queryFailureType) {
    this.queryFailureType = queryFailureType;
    return this;
  }

  /**
   * If searching for Histories about login failures, this parameter restricts results to failures of this specific type.  Valid values: &#x60;expired_trial&#x60;, &#x60;account_overdue&#x60;, &#x60;locked_out&#x60;, &#x60;ip_mismatch&#x60;, &#x60;password_mismatch&#x60;, &#x60;site_mismatch&#x60;, &#x60;username_not_found&#x60;, &#x60;none&#x60;, &#x60;no_ftp_permission&#x60;, &#x60;no_web_permission&#x60;, &#x60;no_directory&#x60;, &#x60;errno_enoent&#x60;, &#x60;no_sftp_permission&#x60;, &#x60;no_dav_permission&#x60;, &#x60;no_restapi_permission&#x60;, &#x60;key_mismatch&#x60;, &#x60;region_mismatch&#x60;, &#x60;expired_access&#x60;, &#x60;desktop_ip_mismatch&#x60;, &#x60;desktop_api_key_not_used_quickly_enough&#x60;, &#x60;disabled&#x60;, &#x60;country_mismatch&#x60;
   * @return queryFailureType
   */
  @javax.annotation.Nullable
  public String getQueryFailureType() {
    return queryFailureType;
  }

  public void setQueryFailureType(String queryFailureType) {
    this.queryFailureType = queryFailureType;
  }


  public HistoryExportEntity queryFileId(String queryFileId) {
    this.queryFileId = queryFileId;
    return this;
  }

  /**
   * Return results that are file actions related to the file indicated by this File ID
   * @return queryFileId
   */
  @javax.annotation.Nullable
  public String getQueryFileId() {
    return queryFileId;
  }

  public void setQueryFileId(String queryFileId) {
    this.queryFileId = queryFileId;
  }


  public HistoryExportEntity queryFolder(String queryFolder) {
    this.queryFolder = queryFolder;
    return this;
  }

  /**
   * Return results that are file actions related to files or folders inside this folder path.
   * @return queryFolder
   */
  @javax.annotation.Nullable
  public String getQueryFolder() {
    return queryFolder;
  }

  public void setQueryFolder(String queryFolder) {
    this.queryFolder = queryFolder;
  }


  public HistoryExportEntity queryInterface(String queryInterface) {
    this.queryInterface = queryInterface;
    return this;
  }

  /**
   * Filter results by this this interface type. Valid values: &#x60;web&#x60;, &#x60;ftp&#x60;, &#x60;robot&#x60;, &#x60;jsapi&#x60;, &#x60;webdesktopapi&#x60;, &#x60;sftp&#x60;, &#x60;dav&#x60;, &#x60;desktop&#x60;, &#x60;restapi&#x60;, &#x60;scim&#x60;, &#x60;office&#x60;, &#x60;mobile&#x60;, &#x60;as2&#x60;, &#x60;inbound_email&#x60;, &#x60;remote&#x60;
   * @return queryInterface
   */
  @javax.annotation.Nullable
  public String getQueryInterface() {
    return queryInterface;
  }

  public void setQueryInterface(String queryInterface) {
    this.queryInterface = queryInterface;
  }


  public HistoryExportEntity queryIp(String queryIp) {
    this.queryIp = queryIp;
    return this;
  }

  /**
   * Filter results by this IP address.
   * @return queryIp
   */
  @javax.annotation.Nullable
  public String getQueryIp() {
    return queryIp;
  }

  public void setQueryIp(String queryIp) {
    this.queryIp = queryIp;
  }


  public HistoryExportEntity queryParentId(String queryParentId) {
    this.queryParentId = queryParentId;
    return this;
  }

  /**
   * Return results that are file actions inside the parent folder specified by this folder ID
   * @return queryParentId
   */
  @javax.annotation.Nullable
  public String getQueryParentId() {
    return queryParentId;
  }

  public void setQueryParentId(String queryParentId) {
    this.queryParentId = queryParentId;
  }


  public HistoryExportEntity queryPath(String queryPath) {
    this.queryPath = queryPath;
    return this;
  }

  /**
   * Return results that are file actions related to this path.
   * @return queryPath
   */
  @javax.annotation.Nullable
  public String getQueryPath() {
    return queryPath;
  }

  public void setQueryPath(String queryPath) {
    this.queryPath = queryPath;
  }


  public HistoryExportEntity querySrc(String querySrc) {
    this.querySrc = querySrc;
    return this;
  }

  /**
   * Return results that are file moves originating from this path.
   * @return querySrc
   */
  @javax.annotation.Nullable
  public String getQuerySrc() {
    return querySrc;
  }

  public void setQuerySrc(String querySrc) {
    this.querySrc = querySrc;
  }


  public HistoryExportEntity queryTargetId(String queryTargetId) {
    this.queryTargetId = queryTargetId;
    return this;
  }

  /**
   * If searching for Histories about specific objects (such as Users, or API Keys), this paremeter restricts results to objects that match this ID.
   * @return queryTargetId
   */
  @javax.annotation.Nullable
  public String getQueryTargetId() {
    return queryTargetId;
  }

  public void setQueryTargetId(String queryTargetId) {
    this.queryTargetId = queryTargetId;
  }


  public HistoryExportEntity queryTargetName(String queryTargetName) {
    this.queryTargetName = queryTargetName;
    return this;
  }

  /**
   * If searching for Histories about Users, Groups or other objects with names, this parameter restricts results to objects with this name/username.
   * @return queryTargetName
   */
  @javax.annotation.Nullable
  public String getQueryTargetName() {
    return queryTargetName;
  }

  public void setQueryTargetName(String queryTargetName) {
    this.queryTargetName = queryTargetName;
  }


  public HistoryExportEntity queryTargetPermission(String queryTargetPermission) {
    this.queryTargetPermission = queryTargetPermission;
    return this;
  }

  /**
   * If searching for Histories about Permisisons, this parameter restricts results to permissions of this level.
   * @return queryTargetPermission
   */
  @javax.annotation.Nullable
  public String getQueryTargetPermission() {
    return queryTargetPermission;
  }

  public void setQueryTargetPermission(String queryTargetPermission) {
    this.queryTargetPermission = queryTargetPermission;
  }


  public HistoryExportEntity queryTargetPermissionSet(String queryTargetPermissionSet) {
    this.queryTargetPermissionSet = queryTargetPermissionSet;
    return this;
  }

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys with this permission set.
   * @return queryTargetPermissionSet
   */
  @javax.annotation.Nullable
  public String getQueryTargetPermissionSet() {
    return queryTargetPermissionSet;
  }

  public void setQueryTargetPermissionSet(String queryTargetPermissionSet) {
    this.queryTargetPermissionSet = queryTargetPermissionSet;
  }


  public HistoryExportEntity queryTargetPlatform(String queryTargetPlatform) {
    this.queryTargetPlatform = queryTargetPlatform;
    return this;
  }

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys associated with this platform.
   * @return queryTargetPlatform
   */
  @javax.annotation.Nullable
  public String getQueryTargetPlatform() {
    return queryTargetPlatform;
  }

  public void setQueryTargetPlatform(String queryTargetPlatform) {
    this.queryTargetPlatform = queryTargetPlatform;
  }


  public HistoryExportEntity queryTargetUserId(String queryTargetUserId) {
    this.queryTargetUserId = queryTargetUserId;
    return this;
  }

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys created by/for this user ID.
   * @return queryTargetUserId
   */
  @javax.annotation.Nullable
  public String getQueryTargetUserId() {
    return queryTargetUserId;
  }

  public void setQueryTargetUserId(String queryTargetUserId) {
    this.queryTargetUserId = queryTargetUserId;
  }


  public HistoryExportEntity queryTargetUsername(String queryTargetUsername) {
    this.queryTargetUsername = queryTargetUsername;
    return this;
  }

  /**
   * If searching for Histories about API keys, this parameter restricts results to API keys created by/for this username.
   * @return queryTargetUsername
   */
  @javax.annotation.Nullable
  public String getQueryTargetUsername() {
    return queryTargetUsername;
  }

  public void setQueryTargetUsername(String queryTargetUsername) {
    this.queryTargetUsername = queryTargetUsername;
  }


  public HistoryExportEntity queryUserId(String queryUserId) {
    this.queryUserId = queryUserId;
    return this;
  }

  /**
   * Return results that are actions performed by the user indiciated by this User ID
   * @return queryUserId
   */
  @javax.annotation.Nullable
  public String getQueryUserId() {
    return queryUserId;
  }

  public void setQueryUserId(String queryUserId) {
    this.queryUserId = queryUserId;
  }


  public HistoryExportEntity queryUsername(String queryUsername) {
    this.queryUsername = queryUsername;
    return this;
  }

  /**
   * Filter results by this username.
   * @return queryUsername
   */
  @javax.annotation.Nullable
  public String getQueryUsername() {
    return queryUsername;
  }

  public void setQueryUsername(String queryUsername) {
    this.queryUsername = queryUsername;
  }


  public HistoryExportEntity resultsUrl(String resultsUrl) {
    this.resultsUrl = resultsUrl;
    return this;
  }

  /**
   * If &#x60;status&#x60; is &#x60;ready&#x60;, this will be a URL where all the results can be downloaded at once as a CSV.
   * @return resultsUrl
   */
  @javax.annotation.Nullable
  public String getResultsUrl() {
    return resultsUrl;
  }

  public void setResultsUrl(String resultsUrl) {
    this.resultsUrl = resultsUrl;
  }


  public HistoryExportEntity startAt(OffsetDateTime startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * Start date/time of export range.
   * @return startAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartAt() {
    return startAt;
  }

  public void setStartAt(OffsetDateTime startAt) {
    this.startAt = startAt;
  }


  public HistoryExportEntity status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of export.  Will be: &#x60;building&#x60;, &#x60;ready&#x60;, or &#x60;failed&#x60;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryExportEntity historyExportEntity = (HistoryExportEntity) o;
    return Objects.equals(this.endAt, historyExportEntity.endAt) &&
        Objects.equals(this.historyVersion, historyExportEntity.historyVersion) &&
        Objects.equals(this.id, historyExportEntity.id) &&
        Objects.equals(this.queryAction, historyExportEntity.queryAction) &&
        Objects.equals(this.queryDestination, historyExportEntity.queryDestination) &&
        Objects.equals(this.queryFailureType, historyExportEntity.queryFailureType) &&
        Objects.equals(this.queryFileId, historyExportEntity.queryFileId) &&
        Objects.equals(this.queryFolder, historyExportEntity.queryFolder) &&
        Objects.equals(this.queryInterface, historyExportEntity.queryInterface) &&
        Objects.equals(this.queryIp, historyExportEntity.queryIp) &&
        Objects.equals(this.queryParentId, historyExportEntity.queryParentId) &&
        Objects.equals(this.queryPath, historyExportEntity.queryPath) &&
        Objects.equals(this.querySrc, historyExportEntity.querySrc) &&
        Objects.equals(this.queryTargetId, historyExportEntity.queryTargetId) &&
        Objects.equals(this.queryTargetName, historyExportEntity.queryTargetName) &&
        Objects.equals(this.queryTargetPermission, historyExportEntity.queryTargetPermission) &&
        Objects.equals(this.queryTargetPermissionSet, historyExportEntity.queryTargetPermissionSet) &&
        Objects.equals(this.queryTargetPlatform, historyExportEntity.queryTargetPlatform) &&
        Objects.equals(this.queryTargetUserId, historyExportEntity.queryTargetUserId) &&
        Objects.equals(this.queryTargetUsername, historyExportEntity.queryTargetUsername) &&
        Objects.equals(this.queryUserId, historyExportEntity.queryUserId) &&
        Objects.equals(this.queryUsername, historyExportEntity.queryUsername) &&
        Objects.equals(this.resultsUrl, historyExportEntity.resultsUrl) &&
        Objects.equals(this.startAt, historyExportEntity.startAt) &&
        Objects.equals(this.status, historyExportEntity.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endAt, historyVersion, id, queryAction, queryDestination, queryFailureType, queryFileId, queryFolder, queryInterface, queryIp, queryParentId, queryPath, querySrc, queryTargetId, queryTargetName, queryTargetPermission, queryTargetPermissionSet, queryTargetPlatform, queryTargetUserId, queryTargetUsername, queryUserId, queryUsername, resultsUrl, startAt, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryExportEntity {\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    historyVersion: ").append(toIndentedString(historyVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    queryAction: ").append(toIndentedString(queryAction)).append("\n");
    sb.append("    queryDestination: ").append(toIndentedString(queryDestination)).append("\n");
    sb.append("    queryFailureType: ").append(toIndentedString(queryFailureType)).append("\n");
    sb.append("    queryFileId: ").append(toIndentedString(queryFileId)).append("\n");
    sb.append("    queryFolder: ").append(toIndentedString(queryFolder)).append("\n");
    sb.append("    queryInterface: ").append(toIndentedString(queryInterface)).append("\n");
    sb.append("    queryIp: ").append(toIndentedString(queryIp)).append("\n");
    sb.append("    queryParentId: ").append(toIndentedString(queryParentId)).append("\n");
    sb.append("    queryPath: ").append(toIndentedString(queryPath)).append("\n");
    sb.append("    querySrc: ").append(toIndentedString(querySrc)).append("\n");
    sb.append("    queryTargetId: ").append(toIndentedString(queryTargetId)).append("\n");
    sb.append("    queryTargetName: ").append(toIndentedString(queryTargetName)).append("\n");
    sb.append("    queryTargetPermission: ").append(toIndentedString(queryTargetPermission)).append("\n");
    sb.append("    queryTargetPermissionSet: ").append(toIndentedString(queryTargetPermissionSet)).append("\n");
    sb.append("    queryTargetPlatform: ").append(toIndentedString(queryTargetPlatform)).append("\n");
    sb.append("    queryTargetUserId: ").append(toIndentedString(queryTargetUserId)).append("\n");
    sb.append("    queryTargetUsername: ").append(toIndentedString(queryTargetUsername)).append("\n");
    sb.append("    queryUserId: ").append(toIndentedString(queryUserId)).append("\n");
    sb.append("    queryUsername: ").append(toIndentedString(queryUsername)).append("\n");
    sb.append("    resultsUrl: ").append(toIndentedString(resultsUrl)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_at");
    openapiFields.add("history_version");
    openapiFields.add("id");
    openapiFields.add("query_action");
    openapiFields.add("query_destination");
    openapiFields.add("query_failure_type");
    openapiFields.add("query_file_id");
    openapiFields.add("query_folder");
    openapiFields.add("query_interface");
    openapiFields.add("query_ip");
    openapiFields.add("query_parent_id");
    openapiFields.add("query_path");
    openapiFields.add("query_src");
    openapiFields.add("query_target_id");
    openapiFields.add("query_target_name");
    openapiFields.add("query_target_permission");
    openapiFields.add("query_target_permission_set");
    openapiFields.add("query_target_platform");
    openapiFields.add("query_target_user_id");
    openapiFields.add("query_target_username");
    openapiFields.add("query_user_id");
    openapiFields.add("query_username");
    openapiFields.add("results_url");
    openapiFields.add("start_at");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryExportEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryExportEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryExportEntity is not found in the empty JSON string", HistoryExportEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryExportEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryExportEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("history_version") != null && !jsonObj.get("history_version").isJsonNull()) && !jsonObj.get("history_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `history_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("history_version").toString()));
      }
      if ((jsonObj.get("query_action") != null && !jsonObj.get("query_action").isJsonNull()) && !jsonObj.get("query_action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_action").toString()));
      }
      if ((jsonObj.get("query_destination") != null && !jsonObj.get("query_destination").isJsonNull()) && !jsonObj.get("query_destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_destination").toString()));
      }
      if ((jsonObj.get("query_failure_type") != null && !jsonObj.get("query_failure_type").isJsonNull()) && !jsonObj.get("query_failure_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_failure_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_failure_type").toString()));
      }
      if ((jsonObj.get("query_file_id") != null && !jsonObj.get("query_file_id").isJsonNull()) && !jsonObj.get("query_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_file_id").toString()));
      }
      if ((jsonObj.get("query_folder") != null && !jsonObj.get("query_folder").isJsonNull()) && !jsonObj.get("query_folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_folder").toString()));
      }
      if ((jsonObj.get("query_interface") != null && !jsonObj.get("query_interface").isJsonNull()) && !jsonObj.get("query_interface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_interface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_interface").toString()));
      }
      if ((jsonObj.get("query_ip") != null && !jsonObj.get("query_ip").isJsonNull()) && !jsonObj.get("query_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_ip").toString()));
      }
      if ((jsonObj.get("query_parent_id") != null && !jsonObj.get("query_parent_id").isJsonNull()) && !jsonObj.get("query_parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_parent_id").toString()));
      }
      if ((jsonObj.get("query_path") != null && !jsonObj.get("query_path").isJsonNull()) && !jsonObj.get("query_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_path").toString()));
      }
      if ((jsonObj.get("query_src") != null && !jsonObj.get("query_src").isJsonNull()) && !jsonObj.get("query_src").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_src` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_src").toString()));
      }
      if ((jsonObj.get("query_target_id") != null && !jsonObj.get("query_target_id").isJsonNull()) && !jsonObj.get("query_target_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_target_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_target_id").toString()));
      }
      if ((jsonObj.get("query_target_name") != null && !jsonObj.get("query_target_name").isJsonNull()) && !jsonObj.get("query_target_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_target_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_target_name").toString()));
      }
      if ((jsonObj.get("query_target_permission") != null && !jsonObj.get("query_target_permission").isJsonNull()) && !jsonObj.get("query_target_permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_target_permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_target_permission").toString()));
      }
      if ((jsonObj.get("query_target_permission_set") != null && !jsonObj.get("query_target_permission_set").isJsonNull()) && !jsonObj.get("query_target_permission_set").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_target_permission_set` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_target_permission_set").toString()));
      }
      if ((jsonObj.get("query_target_platform") != null && !jsonObj.get("query_target_platform").isJsonNull()) && !jsonObj.get("query_target_platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_target_platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_target_platform").toString()));
      }
      if ((jsonObj.get("query_target_user_id") != null && !jsonObj.get("query_target_user_id").isJsonNull()) && !jsonObj.get("query_target_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_target_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_target_user_id").toString()));
      }
      if ((jsonObj.get("query_target_username") != null && !jsonObj.get("query_target_username").isJsonNull()) && !jsonObj.get("query_target_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_target_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_target_username").toString()));
      }
      if ((jsonObj.get("query_user_id") != null && !jsonObj.get("query_user_id").isJsonNull()) && !jsonObj.get("query_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_user_id").toString()));
      }
      if ((jsonObj.get("query_username") != null && !jsonObj.get("query_username").isJsonNull()) && !jsonObj.get("query_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_username").toString()));
      }
      if ((jsonObj.get("results_url") != null && !jsonObj.get("results_url").isJsonNull()) && !jsonObj.get("results_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `results_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("results_url").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryExportEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryExportEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryExportEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryExportEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryExportEntity>() {
           @Override
           public void write(JsonWriter out, HistoryExportEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryExportEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryExportEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryExportEntity
   * @throws IOException if the JSON string is invalid with respect to HistoryExportEntity
   */
  public static HistoryExportEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryExportEntity.class);
  }

  /**
   * Convert an instance of HistoryExportEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

