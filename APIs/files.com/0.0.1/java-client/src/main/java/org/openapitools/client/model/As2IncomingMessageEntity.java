/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List As2 Incoming Messages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class As2IncomingMessageEntity {
  public static final String SERIALIZED_NAME_ACTIVITY_LOG = "activity_log";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_LOG)
  private String activityLog;

  public static final String SERIALIZED_NAME_AS2_FROM = "as2_from";
  @SerializedName(SERIALIZED_NAME_AS2_FROM)
  private String as2From;

  public static final String SERIALIZED_NAME_AS2_PARTNER_ID = "as2_partner_id";
  @SerializedName(SERIALIZED_NAME_AS2_PARTNER_ID)
  private Integer as2PartnerId;

  public static final String SERIALIZED_NAME_AS2_STATION_ID = "as2_station_id";
  @SerializedName(SERIALIZED_NAME_AS2_STATION_ID)
  private Integer as2StationId;

  public static final String SERIALIZED_NAME_AS2_TO = "as2_to";
  @SerializedName(SERIALIZED_NAME_AS2_TO)
  private String as2To;

  public static final String SERIALIZED_NAME_ATTACHMENT_FILENAME = "attachment_filename";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_FILENAME)
  private String attachmentFilename;

  public static final String SERIALIZED_NAME_BODY_SIZE = "body_size";
  @SerializedName(SERIALIZED_NAME_BODY_SIZE)
  private String bodySize;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_ENCRYPTED_URI = "encrypted_uri";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_URI)
  private String encryptedUri;

  public static final String SERIALIZED_NAME_HEX_RECIPIENT_SERIAL = "hex_recipient_serial";
  @SerializedName(SERIALIZED_NAME_HEX_RECIPIENT_SERIAL)
  private String hexRecipientSerial;

  public static final String SERIALIZED_NAME_HTTP_HEADERS = "http_headers";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADERS)
  private Object httpHeaders;

  public static final String SERIALIZED_NAME_HTTP_RESPONSE_CODE = "http_response_code";
  @SerializedName(SERIALIZED_NAME_HTTP_RESPONSE_CODE)
  private String httpResponseCode;

  public static final String SERIALIZED_NAME_HTTP_RESPONSE_HEADERS = "http_response_headers";
  @SerializedName(SERIALIZED_NAME_HTTP_RESPONSE_HEADERS)
  private Object httpResponseHeaders;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_MDN_RESPONSE_URI = "mdn_response_uri";
  @SerializedName(SERIALIZED_NAME_MDN_RESPONSE_URI)
  private String mdnResponseUri;

  public static final String SERIALIZED_NAME_MESSAGE_DECRYPTED = "message_decrypted";
  @SerializedName(SERIALIZED_NAME_MESSAGE_DECRYPTED)
  private Boolean messageDecrypted;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_MESSAGE_MDN_RETURNED = "message_mdn_returned";
  @SerializedName(SERIALIZED_NAME_MESSAGE_MDN_RETURNED)
  private Boolean messageMdnReturned;

  public static final String SERIALIZED_NAME_MESSAGE_PROCESSING_SUCCESS = "message_processing_success";
  @SerializedName(SERIALIZED_NAME_MESSAGE_PROCESSING_SUCCESS)
  private Boolean messageProcessingSuccess;

  public static final String SERIALIZED_NAME_MESSAGE_RECEIVED = "message_received";
  @SerializedName(SERIALIZED_NAME_MESSAGE_RECEIVED)
  private Boolean messageReceived;

  public static final String SERIALIZED_NAME_MESSAGE_SIGNATURE_VERIFIED = "message_signature_verified";
  @SerializedName(SERIALIZED_NAME_MESSAGE_SIGNATURE_VERIFIED)
  private Boolean messageSignatureVerified;

  public static final String SERIALIZED_NAME_MIC = "mic";
  @SerializedName(SERIALIZED_NAME_MIC)
  private String mic;

  public static final String SERIALIZED_NAME_MIC_ALGO = "mic_algo";
  @SerializedName(SERIALIZED_NAME_MIC_ALGO)
  private String micAlgo;

  /**
   * Result of processing.
   */
  @JsonAdapter(ProcessingResultEnum.Adapter.class)
  public enum ProcessingResultEnum {
    NOT_STARTED("not_started"),
    
    UNABLE_TO_FIND_STATION("unable_to_find_station"),
    
    UNABLE_TO_FIND_PARTNER("unable_to_find_partner"),
    
    UNABLE_TO_VALIDATE_SIGNATURE("unable_to_validate_signature"),
    
    DECRYPT_FAIL("decrypt_fail"),
    
    FILE_SAVE_FAIL("file_save_fail"),
    
    SUCCESS("success");

    private String value;

    ProcessingResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingResultEnum fromValue(String value) {
      for (ProcessingResultEnum b : ProcessingResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessingResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessingResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessingResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSING_RESULT = "processing_result";
  @SerializedName(SERIALIZED_NAME_PROCESSING_RESULT)
  private ProcessingResultEnum processingResult;

  public static final String SERIALIZED_NAME_PROCESSING_RESULT_DESCRIPTION = "processing_result_description";
  @SerializedName(SERIALIZED_NAME_PROCESSING_RESULT_DESCRIPTION)
  private String processingResultDescription;

  public static final String SERIALIZED_NAME_RAW_URI = "raw_uri";
  @SerializedName(SERIALIZED_NAME_RAW_URI)
  private String rawUri;

  public static final String SERIALIZED_NAME_RECIPIENT_ISSUER = "recipient_issuer";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ISSUER)
  private String recipientIssuer;

  public static final String SERIALIZED_NAME_RECIPIENT_SERIAL = "recipient_serial";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_SERIAL)
  private String recipientSerial;

  public static final String SERIALIZED_NAME_SMIME_SIGNED_URI = "smime_signed_uri";
  @SerializedName(SERIALIZED_NAME_SMIME_SIGNED_URI)
  private String smimeSignedUri;

  public static final String SERIALIZED_NAME_SMIME_URI = "smime_uri";
  @SerializedName(SERIALIZED_NAME_SMIME_URI)
  private String smimeUri;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public As2IncomingMessageEntity() {
  }

  public As2IncomingMessageEntity activityLog(String activityLog) {
    this.activityLog = activityLog;
    return this;
  }

  /**
   * JSON Structure of the activity log.
   * @return activityLog
   */
  @javax.annotation.Nullable
  public String getActivityLog() {
    return activityLog;
  }

  public void setActivityLog(String activityLog) {
    this.activityLog = activityLog;
  }


  public As2IncomingMessageEntity as2From(String as2From) {
    this.as2From = as2From;
    return this;
  }

  /**
   * AS2 FROM header of message
   * @return as2From
   */
  @javax.annotation.Nullable
  public String getAs2From() {
    return as2From;
  }

  public void setAs2From(String as2From) {
    this.as2From = as2From;
  }


  public As2IncomingMessageEntity as2PartnerId(Integer as2PartnerId) {
    this.as2PartnerId = as2PartnerId;
    return this;
  }

  /**
   * Id of the AS2 Partner associated with this message.
   * @return as2PartnerId
   */
  @javax.annotation.Nullable
  public Integer getAs2PartnerId() {
    return as2PartnerId;
  }

  public void setAs2PartnerId(Integer as2PartnerId) {
    this.as2PartnerId = as2PartnerId;
  }


  public As2IncomingMessageEntity as2StationId(Integer as2StationId) {
    this.as2StationId = as2StationId;
    return this;
  }

  /**
   * Id of the AS2 Station associated with this message.
   * @return as2StationId
   */
  @javax.annotation.Nullable
  public Integer getAs2StationId() {
    return as2StationId;
  }

  public void setAs2StationId(Integer as2StationId) {
    this.as2StationId = as2StationId;
  }


  public As2IncomingMessageEntity as2To(String as2To) {
    this.as2To = as2To;
    return this;
  }

  /**
   * AS2 TO header of message
   * @return as2To
   */
  @javax.annotation.Nullable
  public String getAs2To() {
    return as2To;
  }

  public void setAs2To(String as2To) {
    this.as2To = as2To;
  }


  public As2IncomingMessageEntity attachmentFilename(String attachmentFilename) {
    this.attachmentFilename = attachmentFilename;
    return this;
  }

  /**
   * Filename of the file being received.
   * @return attachmentFilename
   */
  @javax.annotation.Nullable
  public String getAttachmentFilename() {
    return attachmentFilename;
  }

  public void setAttachmentFilename(String attachmentFilename) {
    this.attachmentFilename = attachmentFilename;
  }


  public As2IncomingMessageEntity bodySize(String bodySize) {
    this.bodySize = bodySize;
    return this;
  }

  /**
   * Encrypted Payload Body Size
   * @return bodySize
   */
  @javax.annotation.Nullable
  public String getBodySize() {
    return bodySize;
  }

  public void setBodySize(String bodySize) {
    this.bodySize = bodySize;
  }


  public As2IncomingMessageEntity contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Content Type header of the incoming message.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public As2IncomingMessageEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Message creation date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public As2IncomingMessageEntity date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date Header
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public As2IncomingMessageEntity encryptedUri(String encryptedUri) {
    this.encryptedUri = encryptedUri;
    return this;
  }

  /**
   * URL to download the encrypted signed smime that is to sent as AS2 body
   * @return encryptedUri
   */
  @javax.annotation.Nullable
  public String getEncryptedUri() {
    return encryptedUri;
  }

  public void setEncryptedUri(String encryptedUri) {
    this.encryptedUri = encryptedUri;
  }


  public As2IncomingMessageEntity hexRecipientSerial(String hexRecipientSerial) {
    this.hexRecipientSerial = hexRecipientSerial;
    return this;
  }

  /**
   * Incoming Message Recipient(the Client Cert used to encrypt this message)&#39;s serial in hex format.
   * @return hexRecipientSerial
   */
  @javax.annotation.Nullable
  public String getHexRecipientSerial() {
    return hexRecipientSerial;
  }

  public void setHexRecipientSerial(String hexRecipientSerial) {
    this.hexRecipientSerial = hexRecipientSerial;
  }


  public As2IncomingMessageEntity httpHeaders(Object httpHeaders) {
    this.httpHeaders = httpHeaders;
    return this;
  }

  /**
   * HTTP Headers sent with this message.
   * @return httpHeaders
   */
  @javax.annotation.Nullable
  public Object getHttpHeaders() {
    return httpHeaders;
  }

  public void setHttpHeaders(Object httpHeaders) {
    this.httpHeaders = httpHeaders;
  }


  public As2IncomingMessageEntity httpResponseCode(String httpResponseCode) {
    this.httpResponseCode = httpResponseCode;
    return this;
  }

  /**
   * HTTP Response Code sent for this message
   * @return httpResponseCode
   */
  @javax.annotation.Nullable
  public String getHttpResponseCode() {
    return httpResponseCode;
  }

  public void setHttpResponseCode(String httpResponseCode) {
    this.httpResponseCode = httpResponseCode;
  }


  public As2IncomingMessageEntity httpResponseHeaders(Object httpResponseHeaders) {
    this.httpResponseHeaders = httpResponseHeaders;
    return this;
  }

  /**
   * HTTP Headers sent for this message.
   * @return httpResponseHeaders
   */
  @javax.annotation.Nullable
  public Object getHttpResponseHeaders() {
    return httpResponseHeaders;
  }

  public void setHttpResponseHeaders(Object httpResponseHeaders) {
    this.httpResponseHeaders = httpResponseHeaders;
  }


  public As2IncomingMessageEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the AS2 Partner.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public As2IncomingMessageEntity ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * IP Address of the Sender
   * @return ip
   */
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public As2IncomingMessageEntity mdnResponseUri(String mdnResponseUri) {
    this.mdnResponseUri = mdnResponseUri;
    return this;
  }

  /**
   * URL to download the http response body
   * @return mdnResponseUri
   */
  @javax.annotation.Nullable
  public String getMdnResponseUri() {
    return mdnResponseUri;
  }

  public void setMdnResponseUri(String mdnResponseUri) {
    this.mdnResponseUri = mdnResponseUri;
  }


  public As2IncomingMessageEntity messageDecrypted(Boolean messageDecrypted) {
    this.messageDecrypted = messageDecrypted;
    return this;
  }

  /**
   * Message decrypted successfully?
   * @return messageDecrypted
   */
  @javax.annotation.Nullable
  public Boolean getMessageDecrypted() {
    return messageDecrypted;
  }

  public void setMessageDecrypted(Boolean messageDecrypted) {
    this.messageDecrypted = messageDecrypted;
  }


  public As2IncomingMessageEntity messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * AS2 Message Id
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public As2IncomingMessageEntity messageMdnReturned(Boolean messageMdnReturned) {
    this.messageMdnReturned = messageMdnReturned;
    return this;
  }

  /**
   * MDN returned?
   * @return messageMdnReturned
   */
  @javax.annotation.Nullable
  public Boolean getMessageMdnReturned() {
    return messageMdnReturned;
  }

  public void setMessageMdnReturned(Boolean messageMdnReturned) {
    this.messageMdnReturned = messageMdnReturned;
  }


  public As2IncomingMessageEntity messageProcessingSuccess(Boolean messageProcessingSuccess) {
    this.messageProcessingSuccess = messageProcessingSuccess;
    return this;
  }

  /**
   * Message processed successfully?
   * @return messageProcessingSuccess
   */
  @javax.annotation.Nullable
  public Boolean getMessageProcessingSuccess() {
    return messageProcessingSuccess;
  }

  public void setMessageProcessingSuccess(Boolean messageProcessingSuccess) {
    this.messageProcessingSuccess = messageProcessingSuccess;
  }


  public As2IncomingMessageEntity messageReceived(Boolean messageReceived) {
    this.messageReceived = messageReceived;
    return this;
  }

  /**
   * Message body received?
   * @return messageReceived
   */
  @javax.annotation.Nullable
  public Boolean getMessageReceived() {
    return messageReceived;
  }

  public void setMessageReceived(Boolean messageReceived) {
    this.messageReceived = messageReceived;
  }


  public As2IncomingMessageEntity messageSignatureVerified(Boolean messageSignatureVerified) {
    this.messageSignatureVerified = messageSignatureVerified;
    return this;
  }

  /**
   * Message signature verified?
   * @return messageSignatureVerified
   */
  @javax.annotation.Nullable
  public Boolean getMessageSignatureVerified() {
    return messageSignatureVerified;
  }

  public void setMessageSignatureVerified(Boolean messageSignatureVerified) {
    this.messageSignatureVerified = messageSignatureVerified;
  }


  public As2IncomingMessageEntity mic(String mic) {
    this.mic = mic;
    return this;
  }

  /**
   * AS2 Message Integrity Check
   * @return mic
   */
  @javax.annotation.Nullable
  public String getMic() {
    return mic;
  }

  public void setMic(String mic) {
    this.mic = mic;
  }


  public As2IncomingMessageEntity micAlgo(String micAlgo) {
    this.micAlgo = micAlgo;
    return this;
  }

  /**
   * AS2 Message Integrity Check Algorithm Used
   * @return micAlgo
   */
  @javax.annotation.Nullable
  public String getMicAlgo() {
    return micAlgo;
  }

  public void setMicAlgo(String micAlgo) {
    this.micAlgo = micAlgo;
  }


  public As2IncomingMessageEntity processingResult(ProcessingResultEnum processingResult) {
    this.processingResult = processingResult;
    return this;
  }

  /**
   * Result of processing.
   * @return processingResult
   */
  @javax.annotation.Nullable
  public ProcessingResultEnum getProcessingResult() {
    return processingResult;
  }

  public void setProcessingResult(ProcessingResultEnum processingResult) {
    this.processingResult = processingResult;
  }


  public As2IncomingMessageEntity processingResultDescription(String processingResultDescription) {
    this.processingResultDescription = processingResultDescription;
    return this;
  }

  /**
   * Result of processing description.
   * @return processingResultDescription
   */
  @javax.annotation.Nullable
  public String getProcessingResultDescription() {
    return processingResultDescription;
  }

  public void setProcessingResultDescription(String processingResultDescription) {
    this.processingResultDescription = processingResultDescription;
  }


  public As2IncomingMessageEntity rawUri(String rawUri) {
    this.rawUri = rawUri;
    return this;
  }

  /**
   * URL to download the original file contents
   * @return rawUri
   */
  @javax.annotation.Nullable
  public String getRawUri() {
    return rawUri;
  }

  public void setRawUri(String rawUri) {
    this.rawUri = rawUri;
  }


  public As2IncomingMessageEntity recipientIssuer(String recipientIssuer) {
    this.recipientIssuer = recipientIssuer;
    return this;
  }

  /**
   * Incoming Message Recipient(the Client Cert used to encrypt this message)&#39;s issuer
   * @return recipientIssuer
   */
  @javax.annotation.Nullable
  public String getRecipientIssuer() {
    return recipientIssuer;
  }

  public void setRecipientIssuer(String recipientIssuer) {
    this.recipientIssuer = recipientIssuer;
  }


  public As2IncomingMessageEntity recipientSerial(String recipientSerial) {
    this.recipientSerial = recipientSerial;
    return this;
  }

  /**
   * Incoming Message Recipient(the Client Cert used to encrypt this message)&#39;s serial
   * @return recipientSerial
   */
  @javax.annotation.Nullable
  public String getRecipientSerial() {
    return recipientSerial;
  }

  public void setRecipientSerial(String recipientSerial) {
    this.recipientSerial = recipientSerial;
  }


  public As2IncomingMessageEntity smimeSignedUri(String smimeSignedUri) {
    this.smimeSignedUri = smimeSignedUri;
    return this;
  }

  /**
   * URL to download the file contents as smime with signature
   * @return smimeSignedUri
   */
  @javax.annotation.Nullable
  public String getSmimeSignedUri() {
    return smimeSignedUri;
  }

  public void setSmimeSignedUri(String smimeSignedUri) {
    this.smimeSignedUri = smimeSignedUri;
  }


  public As2IncomingMessageEntity smimeUri(String smimeUri) {
    this.smimeUri = smimeUri;
    return this;
  }

  /**
   * URL to download the file contents encoded as smime
   * @return smimeUri
   */
  @javax.annotation.Nullable
  public String getSmimeUri() {
    return smimeUri;
  }

  public void setSmimeUri(String smimeUri) {
    this.smimeUri = smimeUri;
  }


  public As2IncomingMessageEntity subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * AS2 Subject Header
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public As2IncomingMessageEntity uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * UUID assigned to this message.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    As2IncomingMessageEntity as2IncomingMessageEntity = (As2IncomingMessageEntity) o;
    return Objects.equals(this.activityLog, as2IncomingMessageEntity.activityLog) &&
        Objects.equals(this.as2From, as2IncomingMessageEntity.as2From) &&
        Objects.equals(this.as2PartnerId, as2IncomingMessageEntity.as2PartnerId) &&
        Objects.equals(this.as2StationId, as2IncomingMessageEntity.as2StationId) &&
        Objects.equals(this.as2To, as2IncomingMessageEntity.as2To) &&
        Objects.equals(this.attachmentFilename, as2IncomingMessageEntity.attachmentFilename) &&
        Objects.equals(this.bodySize, as2IncomingMessageEntity.bodySize) &&
        Objects.equals(this.contentType, as2IncomingMessageEntity.contentType) &&
        Objects.equals(this.createdAt, as2IncomingMessageEntity.createdAt) &&
        Objects.equals(this.date, as2IncomingMessageEntity.date) &&
        Objects.equals(this.encryptedUri, as2IncomingMessageEntity.encryptedUri) &&
        Objects.equals(this.hexRecipientSerial, as2IncomingMessageEntity.hexRecipientSerial) &&
        Objects.equals(this.httpHeaders, as2IncomingMessageEntity.httpHeaders) &&
        Objects.equals(this.httpResponseCode, as2IncomingMessageEntity.httpResponseCode) &&
        Objects.equals(this.httpResponseHeaders, as2IncomingMessageEntity.httpResponseHeaders) &&
        Objects.equals(this.id, as2IncomingMessageEntity.id) &&
        Objects.equals(this.ip, as2IncomingMessageEntity.ip) &&
        Objects.equals(this.mdnResponseUri, as2IncomingMessageEntity.mdnResponseUri) &&
        Objects.equals(this.messageDecrypted, as2IncomingMessageEntity.messageDecrypted) &&
        Objects.equals(this.messageId, as2IncomingMessageEntity.messageId) &&
        Objects.equals(this.messageMdnReturned, as2IncomingMessageEntity.messageMdnReturned) &&
        Objects.equals(this.messageProcessingSuccess, as2IncomingMessageEntity.messageProcessingSuccess) &&
        Objects.equals(this.messageReceived, as2IncomingMessageEntity.messageReceived) &&
        Objects.equals(this.messageSignatureVerified, as2IncomingMessageEntity.messageSignatureVerified) &&
        Objects.equals(this.mic, as2IncomingMessageEntity.mic) &&
        Objects.equals(this.micAlgo, as2IncomingMessageEntity.micAlgo) &&
        Objects.equals(this.processingResult, as2IncomingMessageEntity.processingResult) &&
        Objects.equals(this.processingResultDescription, as2IncomingMessageEntity.processingResultDescription) &&
        Objects.equals(this.rawUri, as2IncomingMessageEntity.rawUri) &&
        Objects.equals(this.recipientIssuer, as2IncomingMessageEntity.recipientIssuer) &&
        Objects.equals(this.recipientSerial, as2IncomingMessageEntity.recipientSerial) &&
        Objects.equals(this.smimeSignedUri, as2IncomingMessageEntity.smimeSignedUri) &&
        Objects.equals(this.smimeUri, as2IncomingMessageEntity.smimeUri) &&
        Objects.equals(this.subject, as2IncomingMessageEntity.subject) &&
        Objects.equals(this.uuid, as2IncomingMessageEntity.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityLog, as2From, as2PartnerId, as2StationId, as2To, attachmentFilename, bodySize, contentType, createdAt, date, encryptedUri, hexRecipientSerial, httpHeaders, httpResponseCode, httpResponseHeaders, id, ip, mdnResponseUri, messageDecrypted, messageId, messageMdnReturned, messageProcessingSuccess, messageReceived, messageSignatureVerified, mic, micAlgo, processingResult, processingResultDescription, rawUri, recipientIssuer, recipientSerial, smimeSignedUri, smimeUri, subject, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class As2IncomingMessageEntity {\n");
    sb.append("    activityLog: ").append(toIndentedString(activityLog)).append("\n");
    sb.append("    as2From: ").append(toIndentedString(as2From)).append("\n");
    sb.append("    as2PartnerId: ").append(toIndentedString(as2PartnerId)).append("\n");
    sb.append("    as2StationId: ").append(toIndentedString(as2StationId)).append("\n");
    sb.append("    as2To: ").append(toIndentedString(as2To)).append("\n");
    sb.append("    attachmentFilename: ").append(toIndentedString(attachmentFilename)).append("\n");
    sb.append("    bodySize: ").append(toIndentedString(bodySize)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    encryptedUri: ").append(toIndentedString(encryptedUri)).append("\n");
    sb.append("    hexRecipientSerial: ").append(toIndentedString(hexRecipientSerial)).append("\n");
    sb.append("    httpHeaders: ").append(toIndentedString(httpHeaders)).append("\n");
    sb.append("    httpResponseCode: ").append(toIndentedString(httpResponseCode)).append("\n");
    sb.append("    httpResponseHeaders: ").append(toIndentedString(httpResponseHeaders)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    mdnResponseUri: ").append(toIndentedString(mdnResponseUri)).append("\n");
    sb.append("    messageDecrypted: ").append(toIndentedString(messageDecrypted)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    messageMdnReturned: ").append(toIndentedString(messageMdnReturned)).append("\n");
    sb.append("    messageProcessingSuccess: ").append(toIndentedString(messageProcessingSuccess)).append("\n");
    sb.append("    messageReceived: ").append(toIndentedString(messageReceived)).append("\n");
    sb.append("    messageSignatureVerified: ").append(toIndentedString(messageSignatureVerified)).append("\n");
    sb.append("    mic: ").append(toIndentedString(mic)).append("\n");
    sb.append("    micAlgo: ").append(toIndentedString(micAlgo)).append("\n");
    sb.append("    processingResult: ").append(toIndentedString(processingResult)).append("\n");
    sb.append("    processingResultDescription: ").append(toIndentedString(processingResultDescription)).append("\n");
    sb.append("    rawUri: ").append(toIndentedString(rawUri)).append("\n");
    sb.append("    recipientIssuer: ").append(toIndentedString(recipientIssuer)).append("\n");
    sb.append("    recipientSerial: ").append(toIndentedString(recipientSerial)).append("\n");
    sb.append("    smimeSignedUri: ").append(toIndentedString(smimeSignedUri)).append("\n");
    sb.append("    smimeUri: ").append(toIndentedString(smimeUri)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity_log");
    openapiFields.add("as2_from");
    openapiFields.add("as2_partner_id");
    openapiFields.add("as2_station_id");
    openapiFields.add("as2_to");
    openapiFields.add("attachment_filename");
    openapiFields.add("body_size");
    openapiFields.add("content_type");
    openapiFields.add("created_at");
    openapiFields.add("date");
    openapiFields.add("encrypted_uri");
    openapiFields.add("hex_recipient_serial");
    openapiFields.add("http_headers");
    openapiFields.add("http_response_code");
    openapiFields.add("http_response_headers");
    openapiFields.add("id");
    openapiFields.add("ip");
    openapiFields.add("mdn_response_uri");
    openapiFields.add("message_decrypted");
    openapiFields.add("message_id");
    openapiFields.add("message_mdn_returned");
    openapiFields.add("message_processing_success");
    openapiFields.add("message_received");
    openapiFields.add("message_signature_verified");
    openapiFields.add("mic");
    openapiFields.add("mic_algo");
    openapiFields.add("processing_result");
    openapiFields.add("processing_result_description");
    openapiFields.add("raw_uri");
    openapiFields.add("recipient_issuer");
    openapiFields.add("recipient_serial");
    openapiFields.add("smime_signed_uri");
    openapiFields.add("smime_uri");
    openapiFields.add("subject");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to As2IncomingMessageEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!As2IncomingMessageEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in As2IncomingMessageEntity is not found in the empty JSON string", As2IncomingMessageEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!As2IncomingMessageEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `As2IncomingMessageEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activity_log") != null && !jsonObj.get("activity_log").isJsonNull()) && !jsonObj.get("activity_log").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_log` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity_log").toString()));
      }
      if ((jsonObj.get("as2_from") != null && !jsonObj.get("as2_from").isJsonNull()) && !jsonObj.get("as2_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as2_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as2_from").toString()));
      }
      if ((jsonObj.get("as2_to") != null && !jsonObj.get("as2_to").isJsonNull()) && !jsonObj.get("as2_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as2_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as2_to").toString()));
      }
      if ((jsonObj.get("attachment_filename") != null && !jsonObj.get("attachment_filename").isJsonNull()) && !jsonObj.get("attachment_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachment_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachment_filename").toString()));
      }
      if ((jsonObj.get("body_size") != null && !jsonObj.get("body_size").isJsonNull()) && !jsonObj.get("body_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_size").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("encrypted_uri") != null && !jsonObj.get("encrypted_uri").isJsonNull()) && !jsonObj.get("encrypted_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encrypted_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encrypted_uri").toString()));
      }
      if ((jsonObj.get("hex_recipient_serial") != null && !jsonObj.get("hex_recipient_serial").isJsonNull()) && !jsonObj.get("hex_recipient_serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hex_recipient_serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hex_recipient_serial").toString()));
      }
      if ((jsonObj.get("http_response_code") != null && !jsonObj.get("http_response_code").isJsonNull()) && !jsonObj.get("http_response_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_response_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_response_code").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("mdn_response_uri") != null && !jsonObj.get("mdn_response_uri").isJsonNull()) && !jsonObj.get("mdn_response_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mdn_response_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mdn_response_uri").toString()));
      }
      if ((jsonObj.get("message_id") != null && !jsonObj.get("message_id").isJsonNull()) && !jsonObj.get("message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_id").toString()));
      }
      if ((jsonObj.get("mic") != null && !jsonObj.get("mic").isJsonNull()) && !jsonObj.get("mic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mic").toString()));
      }
      if ((jsonObj.get("mic_algo") != null && !jsonObj.get("mic_algo").isJsonNull()) && !jsonObj.get("mic_algo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mic_algo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mic_algo").toString()));
      }
      if ((jsonObj.get("processing_result") != null && !jsonObj.get("processing_result").isJsonNull()) && !jsonObj.get("processing_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_result").toString()));
      }
      // validate the optional field `processing_result`
      if (jsonObj.get("processing_result") != null && !jsonObj.get("processing_result").isJsonNull()) {
        ProcessingResultEnum.validateJsonElement(jsonObj.get("processing_result"));
      }
      if ((jsonObj.get("processing_result_description") != null && !jsonObj.get("processing_result_description").isJsonNull()) && !jsonObj.get("processing_result_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_result_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_result_description").toString()));
      }
      if ((jsonObj.get("raw_uri") != null && !jsonObj.get("raw_uri").isJsonNull()) && !jsonObj.get("raw_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_uri").toString()));
      }
      if ((jsonObj.get("recipient_issuer") != null && !jsonObj.get("recipient_issuer").isJsonNull()) && !jsonObj.get("recipient_issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_issuer").toString()));
      }
      if ((jsonObj.get("recipient_serial") != null && !jsonObj.get("recipient_serial").isJsonNull()) && !jsonObj.get("recipient_serial").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient_serial` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient_serial").toString()));
      }
      if ((jsonObj.get("smime_signed_uri") != null && !jsonObj.get("smime_signed_uri").isJsonNull()) && !jsonObj.get("smime_signed_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smime_signed_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smime_signed_uri").toString()));
      }
      if ((jsonObj.get("smime_uri") != null && !jsonObj.get("smime_uri").isJsonNull()) && !jsonObj.get("smime_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smime_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smime_uri").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!As2IncomingMessageEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'As2IncomingMessageEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<As2IncomingMessageEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(As2IncomingMessageEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<As2IncomingMessageEntity>() {
           @Override
           public void write(JsonWriter out, As2IncomingMessageEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public As2IncomingMessageEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of As2IncomingMessageEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of As2IncomingMessageEntity
   * @throws IOException if the JSON string is invalid with respect to As2IncomingMessageEntity
   */
  public static As2IncomingMessageEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, As2IncomingMessageEntity.class);
  }

  /**
   * Convert an instance of As2IncomingMessageEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

