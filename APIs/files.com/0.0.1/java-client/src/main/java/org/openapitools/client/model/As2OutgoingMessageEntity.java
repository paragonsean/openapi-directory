/*
 * Files.com API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List As2 Outgoing Messages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:32.972969-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class As2OutgoingMessageEntity {
  public static final String SERIALIZED_NAME_ACTIVITY_LOG = "activity_log";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_LOG)
  private String activityLog;

  public static final String SERIALIZED_NAME_AS2_FROM = "as2_from";
  @SerializedName(SERIALIZED_NAME_AS2_FROM)
  private String as2From;

  public static final String SERIALIZED_NAME_AS2_PARTNER_ID = "as2_partner_id";
  @SerializedName(SERIALIZED_NAME_AS2_PARTNER_ID)
  private Integer as2PartnerId;

  public static final String SERIALIZED_NAME_AS2_STATION_ID = "as2_station_id";
  @SerializedName(SERIALIZED_NAME_AS2_STATION_ID)
  private Integer as2StationId;

  public static final String SERIALIZED_NAME_AS2_TO = "as2_to";
  @SerializedName(SERIALIZED_NAME_AS2_TO)
  private String as2To;

  public static final String SERIALIZED_NAME_ATTACHMENT_FILENAME = "attachment_filename";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_FILENAME)
  private String attachmentFilename;

  public static final String SERIALIZED_NAME_BODY_SIZE = "body_size";
  @SerializedName(SERIALIZED_NAME_BODY_SIZE)
  private String bodySize;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_ENCRYPTED_URI = "encrypted_uri";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_URI)
  private String encryptedUri;

  public static final String SERIALIZED_NAME_HTTP_HEADERS = "http_headers";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADERS)
  private Object httpHeaders;

  public static final String SERIALIZED_NAME_HTTP_RESPONSE_CODE = "http_response_code";
  @SerializedName(SERIALIZED_NAME_HTTP_RESPONSE_CODE)
  private String httpResponseCode;

  public static final String SERIALIZED_NAME_HTTP_RESPONSE_HEADERS = "http_response_headers";
  @SerializedName(SERIALIZED_NAME_HTTP_RESPONSE_HEADERS)
  private Object httpResponseHeaders;

  public static final String SERIALIZED_NAME_HTTP_TRANSMISSION_DURATION = "http_transmission_duration";
  @SerializedName(SERIALIZED_NAME_HTTP_TRANSMISSION_DURATION)
  private Double httpTransmissionDuration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MDN_MESSAGE_ID_MATCHED = "mdn_message_id_matched";
  @SerializedName(SERIALIZED_NAME_MDN_MESSAGE_ID_MATCHED)
  private Boolean mdnMessageIdMatched;

  public static final String SERIALIZED_NAME_MDN_MIC_MATCHED = "mdn_mic_matched";
  @SerializedName(SERIALIZED_NAME_MDN_MIC_MATCHED)
  private Boolean mdnMicMatched;

  public static final String SERIALIZED_NAME_MDN_PROCESSING_SUCCESS = "mdn_processing_success";
  @SerializedName(SERIALIZED_NAME_MDN_PROCESSING_SUCCESS)
  private Boolean mdnProcessingSuccess;

  public static final String SERIALIZED_NAME_MDN_RECEIVED = "mdn_received";
  @SerializedName(SERIALIZED_NAME_MDN_RECEIVED)
  private Boolean mdnReceived;

  public static final String SERIALIZED_NAME_MDN_RESPONSE_URI = "mdn_response_uri";
  @SerializedName(SERIALIZED_NAME_MDN_RESPONSE_URI)
  private String mdnResponseUri;

  public static final String SERIALIZED_NAME_MDN_SIGNATURE_VERIFIED = "mdn_signature_verified";
  @SerializedName(SERIALIZED_NAME_MDN_SIGNATURE_VERIFIED)
  private Boolean mdnSignatureVerified;

  public static final String SERIALIZED_NAME_MDN_VALID = "mdn_valid";
  @SerializedName(SERIALIZED_NAME_MDN_VALID)
  private Boolean mdnValid;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_MIC = "mic";
  @SerializedName(SERIALIZED_NAME_MIC)
  private String mic;

  public static final String SERIALIZED_NAME_MIC_SHA256 = "mic_sha_256";
  @SerializedName(SERIALIZED_NAME_MIC_SHA256)
  private String micSha256;

  /**
   * Result of processing.
   */
  @JsonAdapter(ProcessingResultEnum.Adapter.class)
  public enum ProcessingResultEnum {
    NOT_STARTED("not_started"),
    
    SEND_FAILED("send_failed"),
    
    SEND_SUCCESS("send_success"),
    
    SEND_SUCCESS_MDN_INVALID("send_success_mdn_invalid"),
    
    SEND_SUCCESS_MIC_MISMATCH("send_success_mic_mismatch"),
    
    SEND_SUCCESS_MESSAGE_ID_MISMATCH("send_success_message_id_mismatch"),
    
    SEND_SUCCESS_SIGNATURE_MISMATCH("send_success_signature_mismatch"),
    
    SEND_SUCCESS_PROCESSING_FAILURE("send_success_processing_failure"),
    
    SEND_FAILED_UNKNOWN_HOST("send_failed_unknown_host"),
    
    SEND_FAILED_BAD_HTTP_RESPONSE_CODE("send_failed_bad_http_response_code"),
    
    SEND_FAILED_SSL_ERROR("send_failed_ssl_error"),
    
    SEND_FAILED_CONNECTION_REFUSED("send_failed_connection_refused");

    private String value;

    ProcessingResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingResultEnum fromValue(String value) {
      for (ProcessingResultEnum b : ProcessingResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessingResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessingResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessingResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSING_RESULT = "processing_result";
  @SerializedName(SERIALIZED_NAME_PROCESSING_RESULT)
  private ProcessingResultEnum processingResult;

  public static final String SERIALIZED_NAME_PROCESSING_RESULT_DESCRIPTION = "processing_result_description";
  @SerializedName(SERIALIZED_NAME_PROCESSING_RESULT_DESCRIPTION)
  private String processingResultDescription;

  public static final String SERIALIZED_NAME_RAW_URI = "raw_uri";
  @SerializedName(SERIALIZED_NAME_RAW_URI)
  private String rawUri;

  public static final String SERIALIZED_NAME_SMIME_SIGNED_URI = "smime_signed_uri";
  @SerializedName(SERIALIZED_NAME_SMIME_SIGNED_URI)
  private String smimeSignedUri;

  public static final String SERIALIZED_NAME_SMIME_URI = "smime_uri";
  @SerializedName(SERIALIZED_NAME_SMIME_URI)
  private String smimeUri;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public As2OutgoingMessageEntity() {
  }

  public As2OutgoingMessageEntity activityLog(String activityLog) {
    this.activityLog = activityLog;
    return this;
  }

  /**
   * JSON Structure of the activity log.
   * @return activityLog
   */
  @javax.annotation.Nullable
  public String getActivityLog() {
    return activityLog;
  }

  public void setActivityLog(String activityLog) {
    this.activityLog = activityLog;
  }


  public As2OutgoingMessageEntity as2From(String as2From) {
    this.as2From = as2From;
    return this;
  }

  /**
   * AS2 FROM
   * @return as2From
   */
  @javax.annotation.Nullable
  public String getAs2From() {
    return as2From;
  }

  public void setAs2From(String as2From) {
    this.as2From = as2From;
  }


  public As2OutgoingMessageEntity as2PartnerId(Integer as2PartnerId) {
    this.as2PartnerId = as2PartnerId;
    return this;
  }

  /**
   * Id of the AS2 Partner associated with this message.
   * @return as2PartnerId
   */
  @javax.annotation.Nullable
  public Integer getAs2PartnerId() {
    return as2PartnerId;
  }

  public void setAs2PartnerId(Integer as2PartnerId) {
    this.as2PartnerId = as2PartnerId;
  }


  public As2OutgoingMessageEntity as2StationId(Integer as2StationId) {
    this.as2StationId = as2StationId;
    return this;
  }

  /**
   * Id of the AS2 Station associated with this message.
   * @return as2StationId
   */
  @javax.annotation.Nullable
  public Integer getAs2StationId() {
    return as2StationId;
  }

  public void setAs2StationId(Integer as2StationId) {
    this.as2StationId = as2StationId;
  }


  public As2OutgoingMessageEntity as2To(String as2To) {
    this.as2To = as2To;
    return this;
  }

  /**
   * AS2 TO
   * @return as2To
   */
  @javax.annotation.Nullable
  public String getAs2To() {
    return as2To;
  }

  public void setAs2To(String as2To) {
    this.as2To = as2To;
  }


  public As2OutgoingMessageEntity attachmentFilename(String attachmentFilename) {
    this.attachmentFilename = attachmentFilename;
    return this;
  }

  /**
   * Filename of the file being sent.
   * @return attachmentFilename
   */
  @javax.annotation.Nullable
  public String getAttachmentFilename() {
    return attachmentFilename;
  }

  public void setAttachmentFilename(String attachmentFilename) {
    this.attachmentFilename = attachmentFilename;
  }


  public As2OutgoingMessageEntity bodySize(String bodySize) {
    this.bodySize = bodySize;
    return this;
  }

  /**
   * Encrypted Payload Body Size
   * @return bodySize
   */
  @javax.annotation.Nullable
  public String getBodySize() {
    return bodySize;
  }

  public void setBodySize(String bodySize) {
    this.bodySize = bodySize;
  }


  public As2OutgoingMessageEntity createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Message creation date/time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public As2OutgoingMessageEntity date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Date Header
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public As2OutgoingMessageEntity encryptedUri(String encryptedUri) {
    this.encryptedUri = encryptedUri;
    return this;
  }

  /**
   * URL to download the encrypted signed smime that is to sent as AS2 body
   * @return encryptedUri
   */
  @javax.annotation.Nullable
  public String getEncryptedUri() {
    return encryptedUri;
  }

  public void setEncryptedUri(String encryptedUri) {
    this.encryptedUri = encryptedUri;
  }


  public As2OutgoingMessageEntity httpHeaders(Object httpHeaders) {
    this.httpHeaders = httpHeaders;
    return this;
  }

  /**
   * HTTP Headers sent with this message.
   * @return httpHeaders
   */
  @javax.annotation.Nullable
  public Object getHttpHeaders() {
    return httpHeaders;
  }

  public void setHttpHeaders(Object httpHeaders) {
    this.httpHeaders = httpHeaders;
  }


  public As2OutgoingMessageEntity httpResponseCode(String httpResponseCode) {
    this.httpResponseCode = httpResponseCode;
    return this;
  }

  /**
   * HTTP Response Code received for this message
   * @return httpResponseCode
   */
  @javax.annotation.Nullable
  public String getHttpResponseCode() {
    return httpResponseCode;
  }

  public void setHttpResponseCode(String httpResponseCode) {
    this.httpResponseCode = httpResponseCode;
  }


  public As2OutgoingMessageEntity httpResponseHeaders(Object httpResponseHeaders) {
    this.httpResponseHeaders = httpResponseHeaders;
    return this;
  }

  /**
   * HTTP Headers received for this message.
   * @return httpResponseHeaders
   */
  @javax.annotation.Nullable
  public Object getHttpResponseHeaders() {
    return httpResponseHeaders;
  }

  public void setHttpResponseHeaders(Object httpResponseHeaders) {
    this.httpResponseHeaders = httpResponseHeaders;
  }


  public As2OutgoingMessageEntity httpTransmissionDuration(Double httpTransmissionDuration) {
    this.httpTransmissionDuration = httpTransmissionDuration;
    return this;
  }

  /**
   * HTTP transmission duration in seceonds
   * @return httpTransmissionDuration
   */
  @javax.annotation.Nullable
  public Double getHttpTransmissionDuration() {
    return httpTransmissionDuration;
  }

  public void setHttpTransmissionDuration(Double httpTransmissionDuration) {
    this.httpTransmissionDuration = httpTransmissionDuration;
  }


  public As2OutgoingMessageEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the AS2 Partner.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public As2OutgoingMessageEntity mdnMessageIdMatched(Boolean mdnMessageIdMatched) {
    this.mdnMessageIdMatched = mdnMessageIdMatched;
    return this;
  }

  /**
   * MDN message id matched?
   * @return mdnMessageIdMatched
   */
  @javax.annotation.Nullable
  public Boolean getMdnMessageIdMatched() {
    return mdnMessageIdMatched;
  }

  public void setMdnMessageIdMatched(Boolean mdnMessageIdMatched) {
    this.mdnMessageIdMatched = mdnMessageIdMatched;
  }


  public As2OutgoingMessageEntity mdnMicMatched(Boolean mdnMicMatched) {
    this.mdnMicMatched = mdnMicMatched;
    return this;
  }

  /**
   * MDN MIC matched?
   * @return mdnMicMatched
   */
  @javax.annotation.Nullable
  public Boolean getMdnMicMatched() {
    return mdnMicMatched;
  }

  public void setMdnMicMatched(Boolean mdnMicMatched) {
    this.mdnMicMatched = mdnMicMatched;
  }


  public As2OutgoingMessageEntity mdnProcessingSuccess(Boolean mdnProcessingSuccess) {
    this.mdnProcessingSuccess = mdnProcessingSuccess;
    return this;
  }

  /**
   * MDN disposition indicate a successful processing?
   * @return mdnProcessingSuccess
   */
  @javax.annotation.Nullable
  public Boolean getMdnProcessingSuccess() {
    return mdnProcessingSuccess;
  }

  public void setMdnProcessingSuccess(Boolean mdnProcessingSuccess) {
    this.mdnProcessingSuccess = mdnProcessingSuccess;
  }


  public As2OutgoingMessageEntity mdnReceived(Boolean mdnReceived) {
    this.mdnReceived = mdnReceived;
    return this;
  }

  /**
   * Did the partner give a response body?
   * @return mdnReceived
   */
  @javax.annotation.Nullable
  public Boolean getMdnReceived() {
    return mdnReceived;
  }

  public void setMdnReceived(Boolean mdnReceived) {
    this.mdnReceived = mdnReceived;
  }


  public As2OutgoingMessageEntity mdnResponseUri(String mdnResponseUri) {
    this.mdnResponseUri = mdnResponseUri;
    return this;
  }

  /**
   * URL to download the http response body
   * @return mdnResponseUri
   */
  @javax.annotation.Nullable
  public String getMdnResponseUri() {
    return mdnResponseUri;
  }

  public void setMdnResponseUri(String mdnResponseUri) {
    this.mdnResponseUri = mdnResponseUri;
  }


  public As2OutgoingMessageEntity mdnSignatureVerified(Boolean mdnSignatureVerified) {
    this.mdnSignatureVerified = mdnSignatureVerified;
    return this;
  }

  /**
   * MDN signature verified?
   * @return mdnSignatureVerified
   */
  @javax.annotation.Nullable
  public Boolean getMdnSignatureVerified() {
    return mdnSignatureVerified;
  }

  public void setMdnSignatureVerified(Boolean mdnSignatureVerified) {
    this.mdnSignatureVerified = mdnSignatureVerified;
  }


  public As2OutgoingMessageEntity mdnValid(Boolean mdnValid) {
    this.mdnValid = mdnValid;
    return this;
  }

  /**
   * Is the response in MDN format?
   * @return mdnValid
   */
  @javax.annotation.Nullable
  public Boolean getMdnValid() {
    return mdnValid;
  }

  public void setMdnValid(Boolean mdnValid) {
    this.mdnValid = mdnValid;
  }


  public As2OutgoingMessageEntity messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * AS2 Message Id
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public As2OutgoingMessageEntity mic(String mic) {
    this.mic = mic;
    return this;
  }

  /**
   * AS2 Message Integrity Check SHA1
   * @return mic
   */
  @javax.annotation.Nullable
  public String getMic() {
    return mic;
  }

  public void setMic(String mic) {
    this.mic = mic;
  }


  public As2OutgoingMessageEntity micSha256(String micSha256) {
    this.micSha256 = micSha256;
    return this;
  }

  /**
   * AS2 Message Integrity Check SHA256
   * @return micSha256
   */
  @javax.annotation.Nullable
  public String getMicSha256() {
    return micSha256;
  }

  public void setMicSha256(String micSha256) {
    this.micSha256 = micSha256;
  }


  public As2OutgoingMessageEntity processingResult(ProcessingResultEnum processingResult) {
    this.processingResult = processingResult;
    return this;
  }

  /**
   * Result of processing.
   * @return processingResult
   */
  @javax.annotation.Nullable
  public ProcessingResultEnum getProcessingResult() {
    return processingResult;
  }

  public void setProcessingResult(ProcessingResultEnum processingResult) {
    this.processingResult = processingResult;
  }


  public As2OutgoingMessageEntity processingResultDescription(String processingResultDescription) {
    this.processingResultDescription = processingResultDescription;
    return this;
  }

  /**
   * Result of processing description.
   * @return processingResultDescription
   */
  @javax.annotation.Nullable
  public String getProcessingResultDescription() {
    return processingResultDescription;
  }

  public void setProcessingResultDescription(String processingResultDescription) {
    this.processingResultDescription = processingResultDescription;
  }


  public As2OutgoingMessageEntity rawUri(String rawUri) {
    this.rawUri = rawUri;
    return this;
  }

  /**
   * URL to download the original file contents
   * @return rawUri
   */
  @javax.annotation.Nullable
  public String getRawUri() {
    return rawUri;
  }

  public void setRawUri(String rawUri) {
    this.rawUri = rawUri;
  }


  public As2OutgoingMessageEntity smimeSignedUri(String smimeSignedUri) {
    this.smimeSignedUri = smimeSignedUri;
    return this;
  }

  /**
   * URL to download the file contents as smime with signature
   * @return smimeSignedUri
   */
  @javax.annotation.Nullable
  public String getSmimeSignedUri() {
    return smimeSignedUri;
  }

  public void setSmimeSignedUri(String smimeSignedUri) {
    this.smimeSignedUri = smimeSignedUri;
  }


  public As2OutgoingMessageEntity smimeUri(String smimeUri) {
    this.smimeUri = smimeUri;
    return this;
  }

  /**
   * URL to download the file contents encoded as smime
   * @return smimeUri
   */
  @javax.annotation.Nullable
  public String getSmimeUri() {
    return smimeUri;
  }

  public void setSmimeUri(String smimeUri) {
    this.smimeUri = smimeUri;
  }


  public As2OutgoingMessageEntity uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * UUID assigned to this message.
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    As2OutgoingMessageEntity as2OutgoingMessageEntity = (As2OutgoingMessageEntity) o;
    return Objects.equals(this.activityLog, as2OutgoingMessageEntity.activityLog) &&
        Objects.equals(this.as2From, as2OutgoingMessageEntity.as2From) &&
        Objects.equals(this.as2PartnerId, as2OutgoingMessageEntity.as2PartnerId) &&
        Objects.equals(this.as2StationId, as2OutgoingMessageEntity.as2StationId) &&
        Objects.equals(this.as2To, as2OutgoingMessageEntity.as2To) &&
        Objects.equals(this.attachmentFilename, as2OutgoingMessageEntity.attachmentFilename) &&
        Objects.equals(this.bodySize, as2OutgoingMessageEntity.bodySize) &&
        Objects.equals(this.createdAt, as2OutgoingMessageEntity.createdAt) &&
        Objects.equals(this.date, as2OutgoingMessageEntity.date) &&
        Objects.equals(this.encryptedUri, as2OutgoingMessageEntity.encryptedUri) &&
        Objects.equals(this.httpHeaders, as2OutgoingMessageEntity.httpHeaders) &&
        Objects.equals(this.httpResponseCode, as2OutgoingMessageEntity.httpResponseCode) &&
        Objects.equals(this.httpResponseHeaders, as2OutgoingMessageEntity.httpResponseHeaders) &&
        Objects.equals(this.httpTransmissionDuration, as2OutgoingMessageEntity.httpTransmissionDuration) &&
        Objects.equals(this.id, as2OutgoingMessageEntity.id) &&
        Objects.equals(this.mdnMessageIdMatched, as2OutgoingMessageEntity.mdnMessageIdMatched) &&
        Objects.equals(this.mdnMicMatched, as2OutgoingMessageEntity.mdnMicMatched) &&
        Objects.equals(this.mdnProcessingSuccess, as2OutgoingMessageEntity.mdnProcessingSuccess) &&
        Objects.equals(this.mdnReceived, as2OutgoingMessageEntity.mdnReceived) &&
        Objects.equals(this.mdnResponseUri, as2OutgoingMessageEntity.mdnResponseUri) &&
        Objects.equals(this.mdnSignatureVerified, as2OutgoingMessageEntity.mdnSignatureVerified) &&
        Objects.equals(this.mdnValid, as2OutgoingMessageEntity.mdnValid) &&
        Objects.equals(this.messageId, as2OutgoingMessageEntity.messageId) &&
        Objects.equals(this.mic, as2OutgoingMessageEntity.mic) &&
        Objects.equals(this.micSha256, as2OutgoingMessageEntity.micSha256) &&
        Objects.equals(this.processingResult, as2OutgoingMessageEntity.processingResult) &&
        Objects.equals(this.processingResultDescription, as2OutgoingMessageEntity.processingResultDescription) &&
        Objects.equals(this.rawUri, as2OutgoingMessageEntity.rawUri) &&
        Objects.equals(this.smimeSignedUri, as2OutgoingMessageEntity.smimeSignedUri) &&
        Objects.equals(this.smimeUri, as2OutgoingMessageEntity.smimeUri) &&
        Objects.equals(this.uuid, as2OutgoingMessageEntity.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityLog, as2From, as2PartnerId, as2StationId, as2To, attachmentFilename, bodySize, createdAt, date, encryptedUri, httpHeaders, httpResponseCode, httpResponseHeaders, httpTransmissionDuration, id, mdnMessageIdMatched, mdnMicMatched, mdnProcessingSuccess, mdnReceived, mdnResponseUri, mdnSignatureVerified, mdnValid, messageId, mic, micSha256, processingResult, processingResultDescription, rawUri, smimeSignedUri, smimeUri, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class As2OutgoingMessageEntity {\n");
    sb.append("    activityLog: ").append(toIndentedString(activityLog)).append("\n");
    sb.append("    as2From: ").append(toIndentedString(as2From)).append("\n");
    sb.append("    as2PartnerId: ").append(toIndentedString(as2PartnerId)).append("\n");
    sb.append("    as2StationId: ").append(toIndentedString(as2StationId)).append("\n");
    sb.append("    as2To: ").append(toIndentedString(as2To)).append("\n");
    sb.append("    attachmentFilename: ").append(toIndentedString(attachmentFilename)).append("\n");
    sb.append("    bodySize: ").append(toIndentedString(bodySize)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    encryptedUri: ").append(toIndentedString(encryptedUri)).append("\n");
    sb.append("    httpHeaders: ").append(toIndentedString(httpHeaders)).append("\n");
    sb.append("    httpResponseCode: ").append(toIndentedString(httpResponseCode)).append("\n");
    sb.append("    httpResponseHeaders: ").append(toIndentedString(httpResponseHeaders)).append("\n");
    sb.append("    httpTransmissionDuration: ").append(toIndentedString(httpTransmissionDuration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mdnMessageIdMatched: ").append(toIndentedString(mdnMessageIdMatched)).append("\n");
    sb.append("    mdnMicMatched: ").append(toIndentedString(mdnMicMatched)).append("\n");
    sb.append("    mdnProcessingSuccess: ").append(toIndentedString(mdnProcessingSuccess)).append("\n");
    sb.append("    mdnReceived: ").append(toIndentedString(mdnReceived)).append("\n");
    sb.append("    mdnResponseUri: ").append(toIndentedString(mdnResponseUri)).append("\n");
    sb.append("    mdnSignatureVerified: ").append(toIndentedString(mdnSignatureVerified)).append("\n");
    sb.append("    mdnValid: ").append(toIndentedString(mdnValid)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    mic: ").append(toIndentedString(mic)).append("\n");
    sb.append("    micSha256: ").append(toIndentedString(micSha256)).append("\n");
    sb.append("    processingResult: ").append(toIndentedString(processingResult)).append("\n");
    sb.append("    processingResultDescription: ").append(toIndentedString(processingResultDescription)).append("\n");
    sb.append("    rawUri: ").append(toIndentedString(rawUri)).append("\n");
    sb.append("    smimeSignedUri: ").append(toIndentedString(smimeSignedUri)).append("\n");
    sb.append("    smimeUri: ").append(toIndentedString(smimeUri)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activity_log");
    openapiFields.add("as2_from");
    openapiFields.add("as2_partner_id");
    openapiFields.add("as2_station_id");
    openapiFields.add("as2_to");
    openapiFields.add("attachment_filename");
    openapiFields.add("body_size");
    openapiFields.add("created_at");
    openapiFields.add("date");
    openapiFields.add("encrypted_uri");
    openapiFields.add("http_headers");
    openapiFields.add("http_response_code");
    openapiFields.add("http_response_headers");
    openapiFields.add("http_transmission_duration");
    openapiFields.add("id");
    openapiFields.add("mdn_message_id_matched");
    openapiFields.add("mdn_mic_matched");
    openapiFields.add("mdn_processing_success");
    openapiFields.add("mdn_received");
    openapiFields.add("mdn_response_uri");
    openapiFields.add("mdn_signature_verified");
    openapiFields.add("mdn_valid");
    openapiFields.add("message_id");
    openapiFields.add("mic");
    openapiFields.add("mic_sha_256");
    openapiFields.add("processing_result");
    openapiFields.add("processing_result_description");
    openapiFields.add("raw_uri");
    openapiFields.add("smime_signed_uri");
    openapiFields.add("smime_uri");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to As2OutgoingMessageEntity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!As2OutgoingMessageEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in As2OutgoingMessageEntity is not found in the empty JSON string", As2OutgoingMessageEntity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!As2OutgoingMessageEntity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `As2OutgoingMessageEntity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activity_log") != null && !jsonObj.get("activity_log").isJsonNull()) && !jsonObj.get("activity_log").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activity_log` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activity_log").toString()));
      }
      if ((jsonObj.get("as2_from") != null && !jsonObj.get("as2_from").isJsonNull()) && !jsonObj.get("as2_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as2_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as2_from").toString()));
      }
      if ((jsonObj.get("as2_to") != null && !jsonObj.get("as2_to").isJsonNull()) && !jsonObj.get("as2_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as2_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as2_to").toString()));
      }
      if ((jsonObj.get("attachment_filename") != null && !jsonObj.get("attachment_filename").isJsonNull()) && !jsonObj.get("attachment_filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachment_filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachment_filename").toString()));
      }
      if ((jsonObj.get("body_size") != null && !jsonObj.get("body_size").isJsonNull()) && !jsonObj.get("body_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_size").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("encrypted_uri") != null && !jsonObj.get("encrypted_uri").isJsonNull()) && !jsonObj.get("encrypted_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encrypted_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encrypted_uri").toString()));
      }
      if ((jsonObj.get("http_response_code") != null && !jsonObj.get("http_response_code").isJsonNull()) && !jsonObj.get("http_response_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_response_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_response_code").toString()));
      }
      if ((jsonObj.get("mdn_response_uri") != null && !jsonObj.get("mdn_response_uri").isJsonNull()) && !jsonObj.get("mdn_response_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mdn_response_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mdn_response_uri").toString()));
      }
      if ((jsonObj.get("message_id") != null && !jsonObj.get("message_id").isJsonNull()) && !jsonObj.get("message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_id").toString()));
      }
      if ((jsonObj.get("mic") != null && !jsonObj.get("mic").isJsonNull()) && !jsonObj.get("mic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mic").toString()));
      }
      if ((jsonObj.get("mic_sha_256") != null && !jsonObj.get("mic_sha_256").isJsonNull()) && !jsonObj.get("mic_sha_256").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mic_sha_256` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mic_sha_256").toString()));
      }
      if ((jsonObj.get("processing_result") != null && !jsonObj.get("processing_result").isJsonNull()) && !jsonObj.get("processing_result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_result").toString()));
      }
      // validate the optional field `processing_result`
      if (jsonObj.get("processing_result") != null && !jsonObj.get("processing_result").isJsonNull()) {
        ProcessingResultEnum.validateJsonElement(jsonObj.get("processing_result"));
      }
      if ((jsonObj.get("processing_result_description") != null && !jsonObj.get("processing_result_description").isJsonNull()) && !jsonObj.get("processing_result_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processing_result_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processing_result_description").toString()));
      }
      if ((jsonObj.get("raw_uri") != null && !jsonObj.get("raw_uri").isJsonNull()) && !jsonObj.get("raw_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_uri").toString()));
      }
      if ((jsonObj.get("smime_signed_uri") != null && !jsonObj.get("smime_signed_uri").isJsonNull()) && !jsonObj.get("smime_signed_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smime_signed_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smime_signed_uri").toString()));
      }
      if ((jsonObj.get("smime_uri") != null && !jsonObj.get("smime_uri").isJsonNull()) && !jsonObj.get("smime_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smime_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smime_uri").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!As2OutgoingMessageEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'As2OutgoingMessageEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<As2OutgoingMessageEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(As2OutgoingMessageEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<As2OutgoingMessageEntity>() {
           @Override
           public void write(JsonWriter out, As2OutgoingMessageEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public As2OutgoingMessageEntity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of As2OutgoingMessageEntity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of As2OutgoingMessageEntity
   * @throws IOException if the JSON string is invalid with respect to As2OutgoingMessageEntity
   */
  public static As2OutgoingMessageEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, As2OutgoingMessageEntity.class);
  }

  /**
   * Convert an instance of As2OutgoingMessageEntity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

