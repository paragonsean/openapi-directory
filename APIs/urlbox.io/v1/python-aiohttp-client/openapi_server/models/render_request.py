# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_ads: bool=None, click_accept: bool=None, delay: str=None, format: str=None, full_page: bool=None, gpu: bool=None, height: int=None, hide_cookie_banners: bool=None, html: str=None, metadata: bool=None, retina: bool=None, selector: str=None, thumb_height: int=None, thumb_width: int=None, url: str=None, wait_for: str=None, wait_to_leave: str=None, wait_until: str=None, width: int=None):
        """RenderRequest - a model defined in OpenAPI

        :param block_ads: The block_ads of this RenderRequest.
        :param click_accept: The click_accept of this RenderRequest.
        :param delay: The delay of this RenderRequest.
        :param format: The format of this RenderRequest.
        :param full_page: The full_page of this RenderRequest.
        :param gpu: The gpu of this RenderRequest.
        :param height: The height of this RenderRequest.
        :param hide_cookie_banners: The hide_cookie_banners of this RenderRequest.
        :param html: The html of this RenderRequest.
        :param metadata: The metadata of this RenderRequest.
        :param retina: The retina of this RenderRequest.
        :param selector: The selector of this RenderRequest.
        :param thumb_height: The thumb_height of this RenderRequest.
        :param thumb_width: The thumb_width of this RenderRequest.
        :param url: The url of this RenderRequest.
        :param wait_for: The wait_for of this RenderRequest.
        :param wait_to_leave: The wait_to_leave of this RenderRequest.
        :param wait_until: The wait_until of this RenderRequest.
        :param width: The width of this RenderRequest.
        """
        self.openapi_types = {
            'block_ads': bool,
            'click_accept': bool,
            'delay': str,
            'format': str,
            'full_page': bool,
            'gpu': bool,
            'height': int,
            'hide_cookie_banners': bool,
            'html': str,
            'metadata': bool,
            'retina': bool,
            'selector': str,
            'thumb_height': int,
            'thumb_width': int,
            'url': str,
            'wait_for': str,
            'wait_to_leave': str,
            'wait_until': str,
            'width': int
        }

        self.attribute_map = {
            'block_ads': 'block_ads',
            'click_accept': 'click_accept',
            'delay': 'delay',
            'format': 'format',
            'full_page': 'full_page',
            'gpu': 'gpu',
            'height': 'height',
            'hide_cookie_banners': 'hide_cookie_banners',
            'html': 'html',
            'metadata': 'metadata',
            'retina': 'retina',
            'selector': 'selector',
            'thumb_height': 'thumb_height',
            'thumb_width': 'thumb_width',
            'url': 'url',
            'wait_for': 'wait_for',
            'wait_to_leave': 'wait_to_leave',
            'wait_until': 'wait_until',
            'width': 'width'
        }

        self._block_ads = block_ads
        self._click_accept = click_accept
        self._delay = delay
        self._format = format
        self._full_page = full_page
        self._gpu = gpu
        self._height = height
        self._hide_cookie_banners = hide_cookie_banners
        self._html = html
        self._metadata = metadata
        self._retina = retina
        self._selector = selector
        self._thumb_height = thumb_height
        self._thumb_width = thumb_width
        self._url = url
        self._wait_for = wait_for
        self._wait_to_leave = wait_to_leave
        self._wait_until = wait_until
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenderRequest of this RenderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_ads(self):
        """Gets the block_ads of this RenderRequest.

        Whether to block ads on the rendered page

        :return: The block_ads of this RenderRequest.
        :rtype: bool
        """
        return self._block_ads

    @block_ads.setter
    def block_ads(self, block_ads):
        """Sets the block_ads of this RenderRequest.

        Whether to block ads on the rendered page

        :param block_ads: The block_ads of this RenderRequest.
        :type block_ads: bool
        """

        self._block_ads = block_ads

    @property
    def click_accept(self):
        """Gets the click_accept of this RenderRequest.

        Whether to automatically click accept buttons on the rendered page

        :return: The click_accept of this RenderRequest.
        :rtype: bool
        """
        return self._click_accept

    @click_accept.setter
    def click_accept(self, click_accept):
        """Sets the click_accept of this RenderRequest.

        Whether to automatically click accept buttons on the rendered page

        :param click_accept: The click_accept of this RenderRequest.
        :type click_accept: bool
        """

        self._click_accept = click_accept

    @property
    def delay(self):
        """Gets the delay of this RenderRequest.

        The amount of milliseconds to delay before taking a screenshot

        :return: The delay of this RenderRequest.
        :rtype: str
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this RenderRequest.

        The amount of milliseconds to delay before taking a screenshot

        :param delay: The delay of this RenderRequest.
        :type delay: str
        """

        self._delay = delay

    @property
    def format(self):
        """Gets the format of this RenderRequest.

        The format of the rendered output

        :return: The format of this RenderRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this RenderRequest.

        The format of the rendered output

        :param format: The format of this RenderRequest.
        :type format: str
        """
        allowed_values = ["png", "jpg", "pdf", "svg", "mp4", "webp", "webm", "html"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def full_page(self):
        """Gets the full_page of this RenderRequest.

        Whether to capture the full page

        :return: The full_page of this RenderRequest.
        :rtype: bool
        """
        return self._full_page

    @full_page.setter
    def full_page(self, full_page):
        """Sets the full_page of this RenderRequest.

        Whether to capture the full page

        :param full_page: The full_page of this RenderRequest.
        :type full_page: bool
        """

        self._full_page = full_page

    @property
    def gpu(self):
        """Gets the gpu of this RenderRequest.

        Whether to enable GPU rendering

        :return: The gpu of this RenderRequest.
        :rtype: bool
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this RenderRequest.

        Whether to enable GPU rendering

        :param gpu: The gpu of this RenderRequest.
        :type gpu: bool
        """

        self._gpu = gpu

    @property
    def height(self):
        """Gets the height of this RenderRequest.

        The viewport height of the rendered output

        :return: The height of this RenderRequest.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this RenderRequest.

        The viewport height of the rendered output

        :param height: The height of this RenderRequest.
        :type height: int
        """

        self._height = height

    @property
    def hide_cookie_banners(self):
        """Gets the hide_cookie_banners of this RenderRequest.

        Whether to hide cookie banners on the rendered page

        :return: The hide_cookie_banners of this RenderRequest.
        :rtype: bool
        """
        return self._hide_cookie_banners

    @hide_cookie_banners.setter
    def hide_cookie_banners(self, hide_cookie_banners):
        """Sets the hide_cookie_banners of this RenderRequest.

        Whether to hide cookie banners on the rendered page

        :param hide_cookie_banners: The hide_cookie_banners of this RenderRequest.
        :type hide_cookie_banners: bool
        """

        self._hide_cookie_banners = hide_cookie_banners

    @property
    def html(self):
        """Gets the html of this RenderRequest.

        The raw HTML to render as an image or video

        :return: The html of this RenderRequest.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this RenderRequest.

        The raw HTML to render as an image or video

        :param html: The html of this RenderRequest.
        :type html: str
        """

        self._html = html

    @property
    def metadata(self):
        """Gets the metadata of this RenderRequest.

        Whether to return metadata about the URL

        :return: The metadata of this RenderRequest.
        :rtype: bool
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RenderRequest.

        Whether to return metadata about the URL

        :param metadata: The metadata of this RenderRequest.
        :type metadata: bool
        """

        self._metadata = metadata

    @property
    def retina(self):
        """Gets the retina of this RenderRequest.

        Whether to render the image in retina quality

        :return: The retina of this RenderRequest.
        :rtype: bool
        """
        return self._retina

    @retina.setter
    def retina(self, retina):
        """Sets the retina of this RenderRequest.

        Whether to render the image in retina quality

        :param retina: The retina of this RenderRequest.
        :type retina: bool
        """

        self._retina = retina

    @property
    def selector(self):
        """Gets the selector of this RenderRequest.

        The CSS selector of an element you would like to capture

        :return: The selector of this RenderRequest.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this RenderRequest.

        The CSS selector of an element you would like to capture

        :param selector: The selector of this RenderRequest.
        :type selector: str
        """

        self._selector = selector

    @property
    def thumb_height(self):
        """Gets the thumb_height of this RenderRequest.

        The height of the thumbnail image

        :return: The thumb_height of this RenderRequest.
        :rtype: int
        """
        return self._thumb_height

    @thumb_height.setter
    def thumb_height(self, thumb_height):
        """Sets the thumb_height of this RenderRequest.

        The height of the thumbnail image

        :param thumb_height: The thumb_height of this RenderRequest.
        :type thumb_height: int
        """

        self._thumb_height = thumb_height

    @property
    def thumb_width(self):
        """Gets the thumb_width of this RenderRequest.

        The width of the thumbnail image

        :return: The thumb_width of this RenderRequest.
        :rtype: int
        """
        return self._thumb_width

    @thumb_width.setter
    def thumb_width(self, thumb_width):
        """Sets the thumb_width of this RenderRequest.

        The width of the thumbnail image

        :param thumb_width: The thumb_width of this RenderRequest.
        :type thumb_width: int
        """

        self._thumb_width = thumb_width

    @property
    def url(self):
        """Gets the url of this RenderRequest.

        The URL to render as an image or video

        :return: The url of this RenderRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RenderRequest.

        The URL to render as an image or video

        :param url: The url of this RenderRequest.
        :type url: str
        """

        self._url = url

    @property
    def wait_for(self):
        """Gets the wait_for of this RenderRequest.

        CSS selector of an element to wait to be present in the web page before rendering

        :return: The wait_for of this RenderRequest.
        :rtype: str
        """
        return self._wait_for

    @wait_for.setter
    def wait_for(self, wait_for):
        """Sets the wait_for of this RenderRequest.

        CSS selector of an element to wait to be present in the web page before rendering

        :param wait_for: The wait_for of this RenderRequest.
        :type wait_for: str
        """

        self._wait_for = wait_for

    @property
    def wait_to_leave(self):
        """Gets the wait_to_leave of this RenderRequest.

        CSS selector of an element, such as a loading spinner, to wait to leave the web page before rendering

        :return: The wait_to_leave of this RenderRequest.
        :rtype: str
        """
        return self._wait_to_leave

    @wait_to_leave.setter
    def wait_to_leave(self, wait_to_leave):
        """Sets the wait_to_leave of this RenderRequest.

        CSS selector of an element, such as a loading spinner, to wait to leave the web page before rendering

        :param wait_to_leave: The wait_to_leave of this RenderRequest.
        :type wait_to_leave: str
        """

        self._wait_to_leave = wait_to_leave

    @property
    def wait_until(self):
        """Gets the wait_until of this RenderRequest.

        When

        :return: The wait_until of this RenderRequest.
        :rtype: str
        """
        return self._wait_until

    @wait_until.setter
    def wait_until(self, wait_until):
        """Sets the wait_until of this RenderRequest.

        When

        :param wait_until: The wait_until of this RenderRequest.
        :type wait_until: str
        """
        allowed_values = ["requestsfinished", "mostrequestsfinished", "loaded", "domloaded"]  # noqa: E501
        if wait_until not in allowed_values:
            raise ValueError(
                "Invalid value for `wait_until` ({0}), must be one of {1}"
                .format(wait_until, allowed_values)
            )

        self._wait_until = wait_until

    @property
    def width(self):
        """Gets the width of this RenderRequest.

        The viewport width of the rendered output

        :return: The width of this RenderRequest.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this RenderRequest.

        The viewport width of the rendered output

        :param width: The width of this RenderRequest.
        :type width: int
        """

        self._width = width
