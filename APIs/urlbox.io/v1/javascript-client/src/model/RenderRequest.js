/**
 * Urlbox API
 * A plugin that allows the user to capture screenshots of a web page from a URL or HTML using ChatGPT.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RenderRequest model module.
 * @module model/RenderRequest
 * @version v1
 */
class RenderRequest {
    /**
     * Constructs a new <code>RenderRequest</code>.
     * @alias module:model/RenderRequest
     */
    constructor() { 
        
        RenderRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RenderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RenderRequest} obj Optional instance to populate.
     * @return {module:model/RenderRequest} The populated <code>RenderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RenderRequest();

            if (data.hasOwnProperty('block_ads')) {
                obj['block_ads'] = ApiClient.convertToType(data['block_ads'], 'Boolean');
            }
            if (data.hasOwnProperty('click_accept')) {
                obj['click_accept'] = ApiClient.convertToType(data['click_accept'], 'Boolean');
            }
            if (data.hasOwnProperty('delay')) {
                obj['delay'] = ApiClient.convertToType(data['delay'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('full_page')) {
                obj['full_page'] = ApiClient.convertToType(data['full_page'], 'Boolean');
            }
            if (data.hasOwnProperty('gpu')) {
                obj['gpu'] = ApiClient.convertToType(data['gpu'], 'Boolean');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('hide_cookie_banners')) {
                obj['hide_cookie_banners'] = ApiClient.convertToType(data['hide_cookie_banners'], 'Boolean');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], 'Boolean');
            }
            if (data.hasOwnProperty('retina')) {
                obj['retina'] = ApiClient.convertToType(data['retina'], 'Boolean');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
            if (data.hasOwnProperty('thumb_height')) {
                obj['thumb_height'] = ApiClient.convertToType(data['thumb_height'], 'Number');
            }
            if (data.hasOwnProperty('thumb_width')) {
                obj['thumb_width'] = ApiClient.convertToType(data['thumb_width'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('wait_for')) {
                obj['wait_for'] = ApiClient.convertToType(data['wait_for'], 'String');
            }
            if (data.hasOwnProperty('wait_to_leave')) {
                obj['wait_to_leave'] = ApiClient.convertToType(data['wait_to_leave'], 'String');
            }
            if (data.hasOwnProperty('wait_until')) {
                obj['wait_until'] = ApiClient.convertToType(data['wait_until'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RenderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RenderRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delay'] && !(typeof data['delay'] === 'string' || data['delay'] instanceof String)) {
            throw new Error("Expected the field `delay` to be a primitive type in the JSON string but got " + data['delay']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['wait_for'] && !(typeof data['wait_for'] === 'string' || data['wait_for'] instanceof String)) {
            throw new Error("Expected the field `wait_for` to be a primitive type in the JSON string but got " + data['wait_for']);
        }
        // ensure the json data is a string
        if (data['wait_to_leave'] && !(typeof data['wait_to_leave'] === 'string' || data['wait_to_leave'] instanceof String)) {
            throw new Error("Expected the field `wait_to_leave` to be a primitive type in the JSON string but got " + data['wait_to_leave']);
        }
        // ensure the json data is a string
        if (data['wait_until'] && !(typeof data['wait_until'] === 'string' || data['wait_until'] instanceof String)) {
            throw new Error("Expected the field `wait_until` to be a primitive type in the JSON string but got " + data['wait_until']);
        }

        return true;
    }


}



/**
 * Whether to block ads on the rendered page
 * @member {Boolean} block_ads
 */
RenderRequest.prototype['block_ads'] = undefined;

/**
 * Whether to automatically click accept buttons on the rendered page
 * @member {Boolean} click_accept
 */
RenderRequest.prototype['click_accept'] = undefined;

/**
 * The amount of milliseconds to delay before taking a screenshot
 * @member {String} delay
 */
RenderRequest.prototype['delay'] = undefined;

/**
 * The format of the rendered output
 * @member {module:model/RenderRequest.FormatEnum} format
 */
RenderRequest.prototype['format'] = undefined;

/**
 * Whether to capture the full page
 * @member {Boolean} full_page
 */
RenderRequest.prototype['full_page'] = undefined;

/**
 * Whether to enable GPU rendering
 * @member {Boolean} gpu
 */
RenderRequest.prototype['gpu'] = undefined;

/**
 * The viewport height of the rendered output
 * @member {Number} height
 */
RenderRequest.prototype['height'] = undefined;

/**
 * Whether to hide cookie banners on the rendered page
 * @member {Boolean} hide_cookie_banners
 */
RenderRequest.prototype['hide_cookie_banners'] = undefined;

/**
 * The raw HTML to render as an image or video
 * @member {String} html
 */
RenderRequest.prototype['html'] = undefined;

/**
 * Whether to return metadata about the URL
 * @member {Boolean} metadata
 */
RenderRequest.prototype['metadata'] = undefined;

/**
 * Whether to render the image in retina quality
 * @member {Boolean} retina
 */
RenderRequest.prototype['retina'] = undefined;

/**
 * The CSS selector of an element you would like to capture
 * @member {String} selector
 */
RenderRequest.prototype['selector'] = undefined;

/**
 * The height of the thumbnail image
 * @member {Number} thumb_height
 */
RenderRequest.prototype['thumb_height'] = undefined;

/**
 * The width of the thumbnail image
 * @member {Number} thumb_width
 */
RenderRequest.prototype['thumb_width'] = undefined;

/**
 * The URL to render as an image or video
 * @member {String} url
 */
RenderRequest.prototype['url'] = undefined;

/**
 * CSS selector of an element to wait to be present in the web page before rendering
 * @member {String} wait_for
 */
RenderRequest.prototype['wait_for'] = undefined;

/**
 * CSS selector of an element, such as a loading spinner, to wait to leave the web page before rendering
 * @member {String} wait_to_leave
 */
RenderRequest.prototype['wait_to_leave'] = undefined;

/**
 * When
 * @member {module:model/RenderRequest.WaitUntilEnum} wait_until
 */
RenderRequest.prototype['wait_until'] = undefined;

/**
 * The viewport width of the rendered output
 * @member {Number} width
 */
RenderRequest.prototype['width'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
RenderRequest['FormatEnum'] = {

    /**
     * value: "png"
     * @const
     */
    "png": "png",

    /**
     * value: "jpg"
     * @const
     */
    "jpg": "jpg",

    /**
     * value: "pdf"
     * @const
     */
    "pdf": "pdf",

    /**
     * value: "svg"
     * @const
     */
    "svg": "svg",

    /**
     * value: "mp4"
     * @const
     */
    "mp4": "mp4",

    /**
     * value: "webp"
     * @const
     */
    "webp": "webp",

    /**
     * value: "webm"
     * @const
     */
    "webm": "webm",

    /**
     * value: "html"
     * @const
     */
    "html": "html"
};


/**
 * Allowed values for the <code>wait_until</code> property.
 * @enum {String}
 * @readonly
 */
RenderRequest['WaitUntilEnum'] = {

    /**
     * value: "requestsfinished"
     * @const
     */
    "requestsfinished": "requestsfinished",

    /**
     * value: "mostrequestsfinished"
     * @const
     */
    "mostrequestsfinished": "mostrequestsfinished",

    /**
     * value: "loaded"
     * @const
     */
    "loaded": "loaded",

    /**
     * value: "domloaded"
     * @const
     */
    "domloaded": "domloaded"
};



export default RenderRequest;

