/**
 * Urlbox API
 * A plugin that allows the user to capture screenshots of a web page from a URL or HTML using ChatGPT.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRenderRequest.h
 *
 * 
 */

#ifndef OAIRenderRequest_H
#define OAIRenderRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRenderRequest : public OAIObject {
public:
    OAIRenderRequest();
    OAIRenderRequest(QString json);
    ~OAIRenderRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBlockAds() const;
    void setBlockAds(const bool &block_ads);
    bool is_block_ads_Set() const;
    bool is_block_ads_Valid() const;

    bool isClickAccept() const;
    void setClickAccept(const bool &click_accept);
    bool is_click_accept_Set() const;
    bool is_click_accept_Valid() const;

    QString getDelay() const;
    void setDelay(const QString &delay);
    bool is_delay_Set() const;
    bool is_delay_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    bool isFullPage() const;
    void setFullPage(const bool &full_page);
    bool is_full_page_Set() const;
    bool is_full_page_Valid() const;

    bool isGpu() const;
    void setGpu(const bool &gpu);
    bool is_gpu_Set() const;
    bool is_gpu_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    bool isHideCookieBanners() const;
    void setHideCookieBanners(const bool &hide_cookie_banners);
    bool is_hide_cookie_banners_Set() const;
    bool is_hide_cookie_banners_Valid() const;

    QString getHtml() const;
    void setHtml(const QString &html);
    bool is_html_Set() const;
    bool is_html_Valid() const;

    bool isMetadata() const;
    void setMetadata(const bool &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    bool isRetina() const;
    void setRetina(const bool &retina);
    bool is_retina_Set() const;
    bool is_retina_Valid() const;

    QString getSelector() const;
    void setSelector(const QString &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    qint32 getThumbHeight() const;
    void setThumbHeight(const qint32 &thumb_height);
    bool is_thumb_height_Set() const;
    bool is_thumb_height_Valid() const;

    qint32 getThumbWidth() const;
    void setThumbWidth(const qint32 &thumb_width);
    bool is_thumb_width_Set() const;
    bool is_thumb_width_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getWaitFor() const;
    void setWaitFor(const QString &wait_for);
    bool is_wait_for_Set() const;
    bool is_wait_for_Valid() const;

    QString getWaitToLeave() const;
    void setWaitToLeave(const QString &wait_to_leave);
    bool is_wait_to_leave_Set() const;
    bool is_wait_to_leave_Valid() const;

    QString getWaitUntil() const;
    void setWaitUntil(const QString &wait_until);
    bool is_wait_until_Set() const;
    bool is_wait_until_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_block_ads;
    bool m_block_ads_isSet;
    bool m_block_ads_isValid;

    bool m_click_accept;
    bool m_click_accept_isSet;
    bool m_click_accept_isValid;

    QString m_delay;
    bool m_delay_isSet;
    bool m_delay_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    bool m_full_page;
    bool m_full_page_isSet;
    bool m_full_page_isValid;

    bool m_gpu;
    bool m_gpu_isSet;
    bool m_gpu_isValid;

    qint32 m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    bool m_hide_cookie_banners;
    bool m_hide_cookie_banners_isSet;
    bool m_hide_cookie_banners_isValid;

    QString m_html;
    bool m_html_isSet;
    bool m_html_isValid;

    bool m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    bool m_retina;
    bool m_retina_isSet;
    bool m_retina_isValid;

    QString m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;

    qint32 m_thumb_height;
    bool m_thumb_height_isSet;
    bool m_thumb_height_isValid;

    qint32 m_thumb_width;
    bool m_thumb_width_isSet;
    bool m_thumb_width_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_wait_for;
    bool m_wait_for_isSet;
    bool m_wait_for_isValid;

    QString m_wait_to_leave;
    bool m_wait_to_leave_isSet;
    bool m_wait_to_leave_isValid;

    QString m_wait_until;
    bool m_wait_until_isSet;
    bool m_wait_until_isValid;

    qint32 m_width;
    bool m_width_isSet;
    bool m_width_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRenderRequest)

#endif // OAIRenderRequest_H
