/**
 * Urlbox API
 * A plugin that allows the user to capture screenshots of a web page from a URL or HTML using ChatGPT.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenderRequest::OAIRenderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenderRequest::OAIRenderRequest() {
    this->initializeModel();
}

OAIRenderRequest::~OAIRenderRequest() {}

void OAIRenderRequest::initializeModel() {

    m_block_ads_isSet = false;
    m_block_ads_isValid = false;

    m_click_accept_isSet = false;
    m_click_accept_isValid = false;

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_full_page_isSet = false;
    m_full_page_isValid = false;

    m_gpu_isSet = false;
    m_gpu_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_hide_cookie_banners_isSet = false;
    m_hide_cookie_banners_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_retina_isSet = false;
    m_retina_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_thumb_height_isSet = false;
    m_thumb_height_isValid = false;

    m_thumb_width_isSet = false;
    m_thumb_width_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_wait_for_isSet = false;
    m_wait_for_isValid = false;

    m_wait_to_leave_isSet = false;
    m_wait_to_leave_isValid = false;

    m_wait_until_isSet = false;
    m_wait_until_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIRenderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenderRequest::fromJsonObject(QJsonObject json) {

    m_block_ads_isValid = ::OpenAPI::fromJsonValue(m_block_ads, json[QString("block_ads")]);
    m_block_ads_isSet = !json[QString("block_ads")].isNull() && m_block_ads_isValid;

    m_click_accept_isValid = ::OpenAPI::fromJsonValue(m_click_accept, json[QString("click_accept")]);
    m_click_accept_isSet = !json[QString("click_accept")].isNull() && m_click_accept_isValid;

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_full_page_isValid = ::OpenAPI::fromJsonValue(m_full_page, json[QString("full_page")]);
    m_full_page_isSet = !json[QString("full_page")].isNull() && m_full_page_isValid;

    m_gpu_isValid = ::OpenAPI::fromJsonValue(m_gpu, json[QString("gpu")]);
    m_gpu_isSet = !json[QString("gpu")].isNull() && m_gpu_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_hide_cookie_banners_isValid = ::OpenAPI::fromJsonValue(m_hide_cookie_banners, json[QString("hide_cookie_banners")]);
    m_hide_cookie_banners_isSet = !json[QString("hide_cookie_banners")].isNull() && m_hide_cookie_banners_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_retina_isValid = ::OpenAPI::fromJsonValue(m_retina, json[QString("retina")]);
    m_retina_isSet = !json[QString("retina")].isNull() && m_retina_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_thumb_height_isValid = ::OpenAPI::fromJsonValue(m_thumb_height, json[QString("thumb_height")]);
    m_thumb_height_isSet = !json[QString("thumb_height")].isNull() && m_thumb_height_isValid;

    m_thumb_width_isValid = ::OpenAPI::fromJsonValue(m_thumb_width, json[QString("thumb_width")]);
    m_thumb_width_isSet = !json[QString("thumb_width")].isNull() && m_thumb_width_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_wait_for_isValid = ::OpenAPI::fromJsonValue(m_wait_for, json[QString("wait_for")]);
    m_wait_for_isSet = !json[QString("wait_for")].isNull() && m_wait_for_isValid;

    m_wait_to_leave_isValid = ::OpenAPI::fromJsonValue(m_wait_to_leave, json[QString("wait_to_leave")]);
    m_wait_to_leave_isSet = !json[QString("wait_to_leave")].isNull() && m_wait_to_leave_isValid;

    m_wait_until_isValid = ::OpenAPI::fromJsonValue(m_wait_until, json[QString("wait_until")]);
    m_wait_until_isSet = !json[QString("wait_until")].isNull() && m_wait_until_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIRenderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_block_ads_isSet) {
        obj.insert(QString("block_ads"), ::OpenAPI::toJsonValue(m_block_ads));
    }
    if (m_click_accept_isSet) {
        obj.insert(QString("click_accept"), ::OpenAPI::toJsonValue(m_click_accept));
    }
    if (m_delay_isSet) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_full_page_isSet) {
        obj.insert(QString("full_page"), ::OpenAPI::toJsonValue(m_full_page));
    }
    if (m_gpu_isSet) {
        obj.insert(QString("gpu"), ::OpenAPI::toJsonValue(m_gpu));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_hide_cookie_banners_isSet) {
        obj.insert(QString("hide_cookie_banners"), ::OpenAPI::toJsonValue(m_hide_cookie_banners));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_retina_isSet) {
        obj.insert(QString("retina"), ::OpenAPI::toJsonValue(m_retina));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_thumb_height_isSet) {
        obj.insert(QString("thumb_height"), ::OpenAPI::toJsonValue(m_thumb_height));
    }
    if (m_thumb_width_isSet) {
        obj.insert(QString("thumb_width"), ::OpenAPI::toJsonValue(m_thumb_width));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_wait_for_isSet) {
        obj.insert(QString("wait_for"), ::OpenAPI::toJsonValue(m_wait_for));
    }
    if (m_wait_to_leave_isSet) {
        obj.insert(QString("wait_to_leave"), ::OpenAPI::toJsonValue(m_wait_to_leave));
    }
    if (m_wait_until_isSet) {
        obj.insert(QString("wait_until"), ::OpenAPI::toJsonValue(m_wait_until));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

bool OAIRenderRequest::isBlockAds() const {
    return m_block_ads;
}
void OAIRenderRequest::setBlockAds(const bool &block_ads) {
    m_block_ads = block_ads;
    m_block_ads_isSet = true;
}

bool OAIRenderRequest::is_block_ads_Set() const{
    return m_block_ads_isSet;
}

bool OAIRenderRequest::is_block_ads_Valid() const{
    return m_block_ads_isValid;
}

bool OAIRenderRequest::isClickAccept() const {
    return m_click_accept;
}
void OAIRenderRequest::setClickAccept(const bool &click_accept) {
    m_click_accept = click_accept;
    m_click_accept_isSet = true;
}

bool OAIRenderRequest::is_click_accept_Set() const{
    return m_click_accept_isSet;
}

bool OAIRenderRequest::is_click_accept_Valid() const{
    return m_click_accept_isValid;
}

QString OAIRenderRequest::getDelay() const {
    return m_delay;
}
void OAIRenderRequest::setDelay(const QString &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAIRenderRequest::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAIRenderRequest::is_delay_Valid() const{
    return m_delay_isValid;
}

QString OAIRenderRequest::getFormat() const {
    return m_format;
}
void OAIRenderRequest::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIRenderRequest::is_format_Set() const{
    return m_format_isSet;
}

bool OAIRenderRequest::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIRenderRequest::isFullPage() const {
    return m_full_page;
}
void OAIRenderRequest::setFullPage(const bool &full_page) {
    m_full_page = full_page;
    m_full_page_isSet = true;
}

bool OAIRenderRequest::is_full_page_Set() const{
    return m_full_page_isSet;
}

bool OAIRenderRequest::is_full_page_Valid() const{
    return m_full_page_isValid;
}

bool OAIRenderRequest::isGpu() const {
    return m_gpu;
}
void OAIRenderRequest::setGpu(const bool &gpu) {
    m_gpu = gpu;
    m_gpu_isSet = true;
}

bool OAIRenderRequest::is_gpu_Set() const{
    return m_gpu_isSet;
}

bool OAIRenderRequest::is_gpu_Valid() const{
    return m_gpu_isValid;
}

qint32 OAIRenderRequest::getHeight() const {
    return m_height;
}
void OAIRenderRequest::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIRenderRequest::is_height_Set() const{
    return m_height_isSet;
}

bool OAIRenderRequest::is_height_Valid() const{
    return m_height_isValid;
}

bool OAIRenderRequest::isHideCookieBanners() const {
    return m_hide_cookie_banners;
}
void OAIRenderRequest::setHideCookieBanners(const bool &hide_cookie_banners) {
    m_hide_cookie_banners = hide_cookie_banners;
    m_hide_cookie_banners_isSet = true;
}

bool OAIRenderRequest::is_hide_cookie_banners_Set() const{
    return m_hide_cookie_banners_isSet;
}

bool OAIRenderRequest::is_hide_cookie_banners_Valid() const{
    return m_hide_cookie_banners_isValid;
}

QString OAIRenderRequest::getHtml() const {
    return m_html;
}
void OAIRenderRequest::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIRenderRequest::is_html_Set() const{
    return m_html_isSet;
}

bool OAIRenderRequest::is_html_Valid() const{
    return m_html_isValid;
}

bool OAIRenderRequest::isMetadata() const {
    return m_metadata;
}
void OAIRenderRequest::setMetadata(const bool &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIRenderRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIRenderRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIRenderRequest::isRetina() const {
    return m_retina;
}
void OAIRenderRequest::setRetina(const bool &retina) {
    m_retina = retina;
    m_retina_isSet = true;
}

bool OAIRenderRequest::is_retina_Set() const{
    return m_retina_isSet;
}

bool OAIRenderRequest::is_retina_Valid() const{
    return m_retina_isValid;
}

QString OAIRenderRequest::getSelector() const {
    return m_selector;
}
void OAIRenderRequest::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIRenderRequest::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIRenderRequest::is_selector_Valid() const{
    return m_selector_isValid;
}

qint32 OAIRenderRequest::getThumbHeight() const {
    return m_thumb_height;
}
void OAIRenderRequest::setThumbHeight(const qint32 &thumb_height) {
    m_thumb_height = thumb_height;
    m_thumb_height_isSet = true;
}

bool OAIRenderRequest::is_thumb_height_Set() const{
    return m_thumb_height_isSet;
}

bool OAIRenderRequest::is_thumb_height_Valid() const{
    return m_thumb_height_isValid;
}

qint32 OAIRenderRequest::getThumbWidth() const {
    return m_thumb_width;
}
void OAIRenderRequest::setThumbWidth(const qint32 &thumb_width) {
    m_thumb_width = thumb_width;
    m_thumb_width_isSet = true;
}

bool OAIRenderRequest::is_thumb_width_Set() const{
    return m_thumb_width_isSet;
}

bool OAIRenderRequest::is_thumb_width_Valid() const{
    return m_thumb_width_isValid;
}

QString OAIRenderRequest::getUrl() const {
    return m_url;
}
void OAIRenderRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRenderRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRenderRequest::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIRenderRequest::getWaitFor() const {
    return m_wait_for;
}
void OAIRenderRequest::setWaitFor(const QString &wait_for) {
    m_wait_for = wait_for;
    m_wait_for_isSet = true;
}

bool OAIRenderRequest::is_wait_for_Set() const{
    return m_wait_for_isSet;
}

bool OAIRenderRequest::is_wait_for_Valid() const{
    return m_wait_for_isValid;
}

QString OAIRenderRequest::getWaitToLeave() const {
    return m_wait_to_leave;
}
void OAIRenderRequest::setWaitToLeave(const QString &wait_to_leave) {
    m_wait_to_leave = wait_to_leave;
    m_wait_to_leave_isSet = true;
}

bool OAIRenderRequest::is_wait_to_leave_Set() const{
    return m_wait_to_leave_isSet;
}

bool OAIRenderRequest::is_wait_to_leave_Valid() const{
    return m_wait_to_leave_isValid;
}

QString OAIRenderRequest::getWaitUntil() const {
    return m_wait_until;
}
void OAIRenderRequest::setWaitUntil(const QString &wait_until) {
    m_wait_until = wait_until;
    m_wait_until_isSet = true;
}

bool OAIRenderRequest::is_wait_until_Set() const{
    return m_wait_until_isSet;
}

bool OAIRenderRequest::is_wait_until_Valid() const{
    return m_wait_until_isValid;
}

qint32 OAIRenderRequest::getWidth() const {
    return m_width;
}
void OAIRenderRequest::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIRenderRequest::is_width_Set() const{
    return m_width_isSet;
}

bool OAIRenderRequest::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIRenderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_ads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_accept_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_cookie_banners_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retina_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_to_leave_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
