/*
 * Urlbox API
 * A plugin that allows the user to capture screenshots of a web page from a URL or HTML using ChatGPT.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RenderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:36.943445-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RenderRequest {
  public static final String SERIALIZED_NAME_BLOCK_ADS = "block_ads";
  @SerializedName(SERIALIZED_NAME_BLOCK_ADS)
  private Boolean blockAds;

  public static final String SERIALIZED_NAME_CLICK_ACCEPT = "click_accept";
  @SerializedName(SERIALIZED_NAME_CLICK_ACCEPT)
  private Boolean clickAccept;

  public static final String SERIALIZED_NAME_DELAY = "delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private String delay;

  /**
   * The format of the rendered output
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    PNG("png"),
    
    JPG("jpg"),
    
    PDF("pdf"),
    
    SVG("svg"),
    
    MP4("mp4"),
    
    WEBP("webp"),
    
    WEBM("webm"),
    
    HTML("html");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_FULL_PAGE = "full_page";
  @SerializedName(SERIALIZED_NAME_FULL_PAGE)
  private Boolean fullPage;

  public static final String SERIALIZED_NAME_GPU = "gpu";
  @SerializedName(SERIALIZED_NAME_GPU)
  private Boolean gpu;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HIDE_COOKIE_BANNERS = "hide_cookie_banners";
  @SerializedName(SERIALIZED_NAME_HIDE_COOKIE_BANNERS)
  private Boolean hideCookieBanners;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Boolean metadata;

  public static final String SERIALIZED_NAME_RETINA = "retina";
  @SerializedName(SERIALIZED_NAME_RETINA)
  private Boolean retina;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public static final String SERIALIZED_NAME_THUMB_HEIGHT = "thumb_height";
  @SerializedName(SERIALIZED_NAME_THUMB_HEIGHT)
  private Integer thumbHeight;

  public static final String SERIALIZED_NAME_THUMB_WIDTH = "thumb_width";
  @SerializedName(SERIALIZED_NAME_THUMB_WIDTH)
  private Integer thumbWidth;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WAIT_FOR = "wait_for";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR)
  private String waitFor;

  public static final String SERIALIZED_NAME_WAIT_TO_LEAVE = "wait_to_leave";
  @SerializedName(SERIALIZED_NAME_WAIT_TO_LEAVE)
  private String waitToLeave;

  /**
   * When
   */
  @JsonAdapter(WaitUntilEnum.Adapter.class)
  public enum WaitUntilEnum {
    REQUESTSFINISHED("requestsfinished"),
    
    MOSTREQUESTSFINISHED("mostrequestsfinished"),
    
    LOADED("loaded"),
    
    DOMLOADED("domloaded");

    private String value;

    WaitUntilEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WaitUntilEnum fromValue(String value) {
      for (WaitUntilEnum b : WaitUntilEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WaitUntilEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WaitUntilEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WaitUntilEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WaitUntilEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WaitUntilEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WAIT_UNTIL = "wait_until";
  @SerializedName(SERIALIZED_NAME_WAIT_UNTIL)
  private WaitUntilEnum waitUntil;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public RenderRequest() {
  }

  public RenderRequest blockAds(Boolean blockAds) {
    this.blockAds = blockAds;
    return this;
  }

  /**
   * Whether to block ads on the rendered page
   * @return blockAds
   */
  @javax.annotation.Nullable
  public Boolean getBlockAds() {
    return blockAds;
  }

  public void setBlockAds(Boolean blockAds) {
    this.blockAds = blockAds;
  }


  public RenderRequest clickAccept(Boolean clickAccept) {
    this.clickAccept = clickAccept;
    return this;
  }

  /**
   * Whether to automatically click accept buttons on the rendered page
   * @return clickAccept
   */
  @javax.annotation.Nullable
  public Boolean getClickAccept() {
    return clickAccept;
  }

  public void setClickAccept(Boolean clickAccept) {
    this.clickAccept = clickAccept;
  }


  public RenderRequest delay(String delay) {
    this.delay = delay;
    return this;
  }

  /**
   * The amount of milliseconds to delay before taking a screenshot
   * @return delay
   */
  @javax.annotation.Nullable
  public String getDelay() {
    return delay;
  }

  public void setDelay(String delay) {
    this.delay = delay;
  }


  public RenderRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * The format of the rendered output
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public RenderRequest fullPage(Boolean fullPage) {
    this.fullPage = fullPage;
    return this;
  }

  /**
   * Whether to capture the full page
   * @return fullPage
   */
  @javax.annotation.Nullable
  public Boolean getFullPage() {
    return fullPage;
  }

  public void setFullPage(Boolean fullPage) {
    this.fullPage = fullPage;
  }


  public RenderRequest gpu(Boolean gpu) {
    this.gpu = gpu;
    return this;
  }

  /**
   * Whether to enable GPU rendering
   * @return gpu
   */
  @javax.annotation.Nullable
  public Boolean getGpu() {
    return gpu;
  }

  public void setGpu(Boolean gpu) {
    this.gpu = gpu;
  }


  public RenderRequest height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * The viewport height of the rendered output
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public RenderRequest hideCookieBanners(Boolean hideCookieBanners) {
    this.hideCookieBanners = hideCookieBanners;
    return this;
  }

  /**
   * Whether to hide cookie banners on the rendered page
   * @return hideCookieBanners
   */
  @javax.annotation.Nullable
  public Boolean getHideCookieBanners() {
    return hideCookieBanners;
  }

  public void setHideCookieBanners(Boolean hideCookieBanners) {
    this.hideCookieBanners = hideCookieBanners;
  }


  public RenderRequest html(String html) {
    this.html = html;
    return this;
  }

  /**
   * The raw HTML to render as an image or video
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public RenderRequest metadata(Boolean metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Whether to return metadata about the URL
   * @return metadata
   */
  @javax.annotation.Nullable
  public Boolean getMetadata() {
    return metadata;
  }

  public void setMetadata(Boolean metadata) {
    this.metadata = metadata;
  }


  public RenderRequest retina(Boolean retina) {
    this.retina = retina;
    return this;
  }

  /**
   * Whether to render the image in retina quality
   * @return retina
   */
  @javax.annotation.Nullable
  public Boolean getRetina() {
    return retina;
  }

  public void setRetina(Boolean retina) {
    this.retina = retina;
  }


  public RenderRequest selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * The CSS selector of an element you would like to capture
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }


  public RenderRequest thumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
    return this;
  }

  /**
   * The height of the thumbnail image
   * @return thumbHeight
   */
  @javax.annotation.Nullable
  public Integer getThumbHeight() {
    return thumbHeight;
  }

  public void setThumbHeight(Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
  }


  public RenderRequest thumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
    return this;
  }

  /**
   * The width of the thumbnail image
   * @return thumbWidth
   */
  @javax.annotation.Nullable
  public Integer getThumbWidth() {
    return thumbWidth;
  }

  public void setThumbWidth(Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
  }


  public RenderRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL to render as an image or video
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public RenderRequest waitFor(String waitFor) {
    this.waitFor = waitFor;
    return this;
  }

  /**
   * CSS selector of an element to wait to be present in the web page before rendering
   * @return waitFor
   */
  @javax.annotation.Nullable
  public String getWaitFor() {
    return waitFor;
  }

  public void setWaitFor(String waitFor) {
    this.waitFor = waitFor;
  }


  public RenderRequest waitToLeave(String waitToLeave) {
    this.waitToLeave = waitToLeave;
    return this;
  }

  /**
   * CSS selector of an element, such as a loading spinner, to wait to leave the web page before rendering
   * @return waitToLeave
   */
  @javax.annotation.Nullable
  public String getWaitToLeave() {
    return waitToLeave;
  }

  public void setWaitToLeave(String waitToLeave) {
    this.waitToLeave = waitToLeave;
  }


  public RenderRequest waitUntil(WaitUntilEnum waitUntil) {
    this.waitUntil = waitUntil;
    return this;
  }

  /**
   * When
   * @return waitUntil
   */
  @javax.annotation.Nullable
  public WaitUntilEnum getWaitUntil() {
    return waitUntil;
  }

  public void setWaitUntil(WaitUntilEnum waitUntil) {
    this.waitUntil = waitUntil;
  }


  public RenderRequest width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * The viewport width of the rendered output
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderRequest renderRequest = (RenderRequest) o;
    return Objects.equals(this.blockAds, renderRequest.blockAds) &&
        Objects.equals(this.clickAccept, renderRequest.clickAccept) &&
        Objects.equals(this.delay, renderRequest.delay) &&
        Objects.equals(this.format, renderRequest.format) &&
        Objects.equals(this.fullPage, renderRequest.fullPage) &&
        Objects.equals(this.gpu, renderRequest.gpu) &&
        Objects.equals(this.height, renderRequest.height) &&
        Objects.equals(this.hideCookieBanners, renderRequest.hideCookieBanners) &&
        Objects.equals(this.html, renderRequest.html) &&
        Objects.equals(this.metadata, renderRequest.metadata) &&
        Objects.equals(this.retina, renderRequest.retina) &&
        Objects.equals(this.selector, renderRequest.selector) &&
        Objects.equals(this.thumbHeight, renderRequest.thumbHeight) &&
        Objects.equals(this.thumbWidth, renderRequest.thumbWidth) &&
        Objects.equals(this.url, renderRequest.url) &&
        Objects.equals(this.waitFor, renderRequest.waitFor) &&
        Objects.equals(this.waitToLeave, renderRequest.waitToLeave) &&
        Objects.equals(this.waitUntil, renderRequest.waitUntil) &&
        Objects.equals(this.width, renderRequest.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockAds, clickAccept, delay, format, fullPage, gpu, height, hideCookieBanners, html, metadata, retina, selector, thumbHeight, thumbWidth, url, waitFor, waitToLeave, waitUntil, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderRequest {\n");
    sb.append("    blockAds: ").append(toIndentedString(blockAds)).append("\n");
    sb.append("    clickAccept: ").append(toIndentedString(clickAccept)).append("\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    fullPage: ").append(toIndentedString(fullPage)).append("\n");
    sb.append("    gpu: ").append(toIndentedString(gpu)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hideCookieBanners: ").append(toIndentedString(hideCookieBanners)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    retina: ").append(toIndentedString(retina)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    thumbHeight: ").append(toIndentedString(thumbHeight)).append("\n");
    sb.append("    thumbWidth: ").append(toIndentedString(thumbWidth)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    waitFor: ").append(toIndentedString(waitFor)).append("\n");
    sb.append("    waitToLeave: ").append(toIndentedString(waitToLeave)).append("\n");
    sb.append("    waitUntil: ").append(toIndentedString(waitUntil)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RenderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RenderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RenderRequest is not found in the empty JSON string", RenderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RenderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RenderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delay") != null && !jsonObj.get("delay").isJsonNull()) && !jsonObj.get("delay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delay").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("wait_for") != null && !jsonObj.get("wait_for").isJsonNull()) && !jsonObj.get("wait_for").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait_for` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait_for").toString()));
      }
      if ((jsonObj.get("wait_to_leave") != null && !jsonObj.get("wait_to_leave").isJsonNull()) && !jsonObj.get("wait_to_leave").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait_to_leave` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait_to_leave").toString()));
      }
      if ((jsonObj.get("wait_until") != null && !jsonObj.get("wait_until").isJsonNull()) && !jsonObj.get("wait_until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wait_until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wait_until").toString()));
      }
      // validate the optional field `wait_until`
      if (jsonObj.get("wait_until") != null && !jsonObj.get("wait_until").isJsonNull()) {
        WaitUntilEnum.validateJsonElement(jsonObj.get("wait_until"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RenderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RenderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RenderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RenderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RenderRequest>() {
           @Override
           public void write(JsonWriter out, RenderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RenderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RenderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RenderRequest
   * @throws IOException if the JSON string is invalid with respect to RenderRequest
   */
  public static RenderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RenderRequest.class);
  }

  /**
   * Convert an instance of RenderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

