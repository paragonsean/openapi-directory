/*
 * Urlbox API
 * A plugin that allows the user to capture screenshots of a web page from a URL or HTML using ChatGPT.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.RedirectResponse;
import org.openapitools.client.model.RenderRequest;
import org.openapitools.client.model.RenderResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for renderSync
     * @param renderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * x-renders-allowed - The number of renders allowed <br>  * x-renders-reset - The date and time when the render count will reset <br>  * x-renders-used - The number of renders used <br>  * x-urlbox-acceptedby - The server that accepted the request <br>  * x-urlbox-cache-status - The cache status of the response <br>  * x-urlbox-cachekey - The cache key used by URLBox <br>  * x-urlbox-renderedby - The server that rendered the response <br>  * x-urlbox-requestid - The request ID assigned by URLBox <br>  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
     </table>
     */
    public okhttp3.Call renderSyncCall(RenderRequest renderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renderRequest;

        // create path and map variables
        String localVarPath = "/v1/render/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "SecretKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderSyncValidateBeforeCall(RenderRequest renderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'renderRequest' is set
        if (renderRequest == null) {
            throw new ApiException("Missing the required parameter 'renderRequest' when calling renderSync(Async)");
        }

        return renderSyncCall(renderRequest, _callback);

    }

    /**
     * Render a URL as an image or video
     * 
     * @param renderRequest  (required)
     * @return RenderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * x-renders-allowed - The number of renders allowed <br>  * x-renders-reset - The date and time when the render count will reset <br>  * x-renders-used - The number of renders used <br>  * x-urlbox-acceptedby - The server that accepted the request <br>  * x-urlbox-cache-status - The cache status of the response <br>  * x-urlbox-cachekey - The cache key used by URLBox <br>  * x-urlbox-renderedby - The server that rendered the response <br>  * x-urlbox-requestid - The request ID assigned by URLBox <br>  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
     </table>
     */
    public RenderResponse renderSync(RenderRequest renderRequest) throws ApiException {
        ApiResponse<RenderResponse> localVarResp = renderSyncWithHttpInfo(renderRequest);
        return localVarResp.getData();
    }

    /**
     * Render a URL as an image or video
     * 
     * @param renderRequest  (required)
     * @return ApiResponse&lt;RenderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * x-renders-allowed - The number of renders allowed <br>  * x-renders-reset - The date and time when the render count will reset <br>  * x-renders-used - The number of renders used <br>  * x-urlbox-acceptedby - The server that accepted the request <br>  * x-urlbox-cache-status - The cache status of the response <br>  * x-urlbox-cachekey - The cache key used by URLBox <br>  * x-urlbox-renderedby - The server that rendered the response <br>  * x-urlbox-requestid - The request ID assigned by URLBox <br>  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
     </table>
     */
    public ApiResponse<RenderResponse> renderSyncWithHttpInfo(RenderRequest renderRequest) throws ApiException {
        okhttp3.Call localVarCall = renderSyncValidateBeforeCall(renderRequest, null);
        Type localVarReturnType = new TypeToken<RenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Render a URL as an image or video (asynchronously)
     * 
     * @param renderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  * x-renders-allowed - The number of renders allowed <br>  * x-renders-reset - The date and time when the render count will reset <br>  * x-renders-used - The number of renders used <br>  * x-urlbox-acceptedby - The server that accepted the request <br>  * x-urlbox-cache-status - The cache status of the response <br>  * x-urlbox-cachekey - The cache key used by URLBox <br>  * x-urlbox-renderedby - The server that rendered the response <br>  * x-urlbox-requestid - The request ID assigned by URLBox <br>  </td></tr>
        <tr><td> 307 </td><td> Temporary Redirect </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  * x-urlbox-error-message - An error message describing the reason the request failed <br>  </td></tr>
     </table>
     */
    public okhttp3.Call renderSyncAsync(RenderRequest renderRequest, final ApiCallback<RenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderSyncValidateBeforeCall(renderRequest, _callback);
        Type localVarReturnType = new TypeToken<RenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
