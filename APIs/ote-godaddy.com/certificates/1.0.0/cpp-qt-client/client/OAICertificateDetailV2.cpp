/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateDetailV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateDetailV2::OAICertificateDetailV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateDetailV2::OAICertificateDetailV2() {
    this->initializeModel();
}

OAICertificateDetailV2::~OAICertificateDetailV2() {}

void OAICertificateDetailV2::initializeModel() {

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_csr_isSet = false;
    m_csr_isValid = false;

    m_denied_reason_isSet = false;
    m_denied_reason_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_renewal_available_isSet = false;
    m_renewal_available_isValid = false;

    m_revoked_at_isSet = false;
    m_revoked_at_isValid = false;

    m_root_type_isSet = false;
    m_root_type_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_serial_number_hex_isSet = false;
    m_serial_number_hex_isValid = false;

    m_slot_size_isSet = false;
    m_slot_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valid_end_at_isSet = false;
    m_valid_end_at_isValid = false;

    m_valid_start_at_isSet = false;
    m_valid_start_at_isValid = false;
}

void OAICertificateDetailV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateDetailV2::fromJsonObject(QJsonObject json) {

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("certificateId")]);
    m_certificate_id_isSet = !json[QString("certificateId")].isNull() && m_certificate_id_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_csr_isValid = ::OpenAPI::fromJsonValue(m_csr, json[QString("csr")]);
    m_csr_isSet = !json[QString("csr")].isNull() && m_csr_isValid;

    m_denied_reason_isValid = ::OpenAPI::fromJsonValue(m_denied_reason, json[QString("deniedReason")]);
    m_denied_reason_isSet = !json[QString("deniedReason")].isNull() && m_denied_reason_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_renewal_available_isValid = ::OpenAPI::fromJsonValue(m_renewal_available, json[QString("renewalAvailable")]);
    m_renewal_available_isSet = !json[QString("renewalAvailable")].isNull() && m_renewal_available_isValid;

    m_revoked_at_isValid = ::OpenAPI::fromJsonValue(m_revoked_at, json[QString("revokedAt")]);
    m_revoked_at_isSet = !json[QString("revokedAt")].isNull() && m_revoked_at_isValid;

    m_root_type_isValid = ::OpenAPI::fromJsonValue(m_root_type, json[QString("rootType")]);
    m_root_type_isSet = !json[QString("rootType")].isNull() && m_root_type_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_serial_number_hex_isValid = ::OpenAPI::fromJsonValue(m_serial_number_hex, json[QString("serialNumberHex")]);
    m_serial_number_hex_isSet = !json[QString("serialNumberHex")].isNull() && m_serial_number_hex_isValid;

    m_slot_size_isValid = ::OpenAPI::fromJsonValue(m_slot_size, json[QString("slotSize")]);
    m_slot_size_isSet = !json[QString("slotSize")].isNull() && m_slot_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("subjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("subjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valid_end_at_isValid = ::OpenAPI::fromJsonValue(m_valid_end_at, json[QString("validEndAt")]);
    m_valid_end_at_isSet = !json[QString("validEndAt")].isNull() && m_valid_end_at_isValid;

    m_valid_start_at_isValid = ::OpenAPI::fromJsonValue(m_valid_start_at, json[QString("validStartAt")]);
    m_valid_start_at_isSet = !json[QString("validStartAt")].isNull() && m_valid_start_at_isValid;
}

QString OAICertificateDetailV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateDetailV2::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_id_isSet) {
        obj.insert(QString("certificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_csr_isSet) {
        obj.insert(QString("csr"), ::OpenAPI::toJsonValue(m_csr));
    }
    if (m_denied_reason_isSet) {
        obj.insert(QString("deniedReason"), ::OpenAPI::toJsonValue(m_denied_reason));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_renewal_available_isSet) {
        obj.insert(QString("renewalAvailable"), ::OpenAPI::toJsonValue(m_renewal_available));
    }
    if (m_revoked_at_isSet) {
        obj.insert(QString("revokedAt"), ::OpenAPI::toJsonValue(m_revoked_at));
    }
    if (m_root_type_isSet) {
        obj.insert(QString("rootType"), ::OpenAPI::toJsonValue(m_root_type));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_serial_number_hex_isSet) {
        obj.insert(QString("serialNumberHex"), ::OpenAPI::toJsonValue(m_serial_number_hex));
    }
    if (m_slot_size_isSet) {
        obj.insert(QString("slotSize"), ::OpenAPI::toJsonValue(m_slot_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_alternative_names.size() > 0) {
        obj.insert(QString("subjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valid_end_at_isSet) {
        obj.insert(QString("validEndAt"), ::OpenAPI::toJsonValue(m_valid_end_at));
    }
    if (m_valid_start_at_isSet) {
        obj.insert(QString("validStartAt"), ::OpenAPI::toJsonValue(m_valid_start_at));
    }
    return obj;
}

QString OAICertificateDetailV2::getCertificateId() const {
    return m_certificate_id;
}
void OAICertificateDetailV2::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAICertificateDetailV2::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAICertificateDetailV2::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

QString OAICertificateDetailV2::getCommonName() const {
    return m_common_name;
}
void OAICertificateDetailV2::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAICertificateDetailV2::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAICertificateDetailV2::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAICertificateDetailV2::getCompletedAt() const {
    return m_completed_at;
}
void OAICertificateDetailV2::setCompletedAt(const QString &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAICertificateDetailV2::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAICertificateDetailV2::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

OAICertificateContact OAICertificateDetailV2::getContact() const {
    return m_contact;
}
void OAICertificateDetailV2::setContact(const OAICertificateContact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAICertificateDetailV2::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAICertificateDetailV2::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAICertificateDetailV2::getCreatedAt() const {
    return m_created_at;
}
void OAICertificateDetailV2::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICertificateDetailV2::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICertificateDetailV2::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICertificateDetailV2::getCsr() const {
    return m_csr;
}
void OAICertificateDetailV2::setCsr(const QString &csr) {
    m_csr = csr;
    m_csr_isSet = true;
}

bool OAICertificateDetailV2::is_csr_Set() const{
    return m_csr_isSet;
}

bool OAICertificateDetailV2::is_csr_Valid() const{
    return m_csr_isValid;
}

QString OAICertificateDetailV2::getDeniedReason() const {
    return m_denied_reason;
}
void OAICertificateDetailV2::setDeniedReason(const QString &denied_reason) {
    m_denied_reason = denied_reason;
    m_denied_reason_isSet = true;
}

bool OAICertificateDetailV2::is_denied_reason_Set() const{
    return m_denied_reason_isSet;
}

bool OAICertificateDetailV2::is_denied_reason_Valid() const{
    return m_denied_reason_isValid;
}

OAICertificateOrganization OAICertificateDetailV2::getOrganization() const {
    return m_organization;
}
void OAICertificateDetailV2::setOrganization(const OAICertificateOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAICertificateDetailV2::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAICertificateDetailV2::is_organization_Valid() const{
    return m_organization_isValid;
}

qint32 OAICertificateDetailV2::getPeriod() const {
    return m_period;
}
void OAICertificateDetailV2::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAICertificateDetailV2::is_period_Set() const{
    return m_period_isSet;
}

bool OAICertificateDetailV2::is_period_Valid() const{
    return m_period_isValid;
}

qint32 OAICertificateDetailV2::getProgress() const {
    return m_progress;
}
void OAICertificateDetailV2::setProgress(const qint32 &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAICertificateDetailV2::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAICertificateDetailV2::is_progress_Valid() const{
    return m_progress_isValid;
}

bool OAICertificateDetailV2::isRenewalAvailable() const {
    return m_renewal_available;
}
void OAICertificateDetailV2::setRenewalAvailable(const bool &renewal_available) {
    m_renewal_available = renewal_available;
    m_renewal_available_isSet = true;
}

bool OAICertificateDetailV2::is_renewal_available_Set() const{
    return m_renewal_available_isSet;
}

bool OAICertificateDetailV2::is_renewal_available_Valid() const{
    return m_renewal_available_isValid;
}

QString OAICertificateDetailV2::getRevokedAt() const {
    return m_revoked_at;
}
void OAICertificateDetailV2::setRevokedAt(const QString &revoked_at) {
    m_revoked_at = revoked_at;
    m_revoked_at_isSet = true;
}

bool OAICertificateDetailV2::is_revoked_at_Set() const{
    return m_revoked_at_isSet;
}

bool OAICertificateDetailV2::is_revoked_at_Valid() const{
    return m_revoked_at_isValid;
}

QString OAICertificateDetailV2::getRootType() const {
    return m_root_type;
}
void OAICertificateDetailV2::setRootType(const QString &root_type) {
    m_root_type = root_type;
    m_root_type_isSet = true;
}

bool OAICertificateDetailV2::is_root_type_Set() const{
    return m_root_type_isSet;
}

bool OAICertificateDetailV2::is_root_type_Valid() const{
    return m_root_type_isValid;
}

QString OAICertificateDetailV2::getSerialNumber() const {
    return m_serial_number;
}
void OAICertificateDetailV2::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAICertificateDetailV2::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAICertificateDetailV2::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAICertificateDetailV2::getSerialNumberHex() const {
    return m_serial_number_hex;
}
void OAICertificateDetailV2::setSerialNumberHex(const QString &serial_number_hex) {
    m_serial_number_hex = serial_number_hex;
    m_serial_number_hex_isSet = true;
}

bool OAICertificateDetailV2::is_serial_number_hex_Set() const{
    return m_serial_number_hex_isSet;
}

bool OAICertificateDetailV2::is_serial_number_hex_Valid() const{
    return m_serial_number_hex_isValid;
}

QString OAICertificateDetailV2::getSlotSize() const {
    return m_slot_size;
}
void OAICertificateDetailV2::setSlotSize(const QString &slot_size) {
    m_slot_size = slot_size;
    m_slot_size_isSet = true;
}

bool OAICertificateDetailV2::is_slot_size_Set() const{
    return m_slot_size_isSet;
}

bool OAICertificateDetailV2::is_slot_size_Valid() const{
    return m_slot_size_isValid;
}

QString OAICertificateDetailV2::getStatus() const {
    return m_status;
}
void OAICertificateDetailV2::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICertificateDetailV2::is_status_Set() const{
    return m_status_isSet;
}

bool OAICertificateDetailV2::is_status_Valid() const{
    return m_status_isValid;
}

QSet<QString> OAICertificateDetailV2::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAICertificateDetailV2::setSubjectAlternativeNames(const QSet<QString> &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAICertificateDetailV2::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAICertificateDetailV2::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

QString OAICertificateDetailV2::getType() const {
    return m_type;
}
void OAICertificateDetailV2::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICertificateDetailV2::is_type_Set() const{
    return m_type_isSet;
}

bool OAICertificateDetailV2::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICertificateDetailV2::getValidEndAt() const {
    return m_valid_end_at;
}
void OAICertificateDetailV2::setValidEndAt(const QString &valid_end_at) {
    m_valid_end_at = valid_end_at;
    m_valid_end_at_isSet = true;
}

bool OAICertificateDetailV2::is_valid_end_at_Set() const{
    return m_valid_end_at_isSet;
}

bool OAICertificateDetailV2::is_valid_end_at_Valid() const{
    return m_valid_end_at_isValid;
}

QString OAICertificateDetailV2::getValidStartAt() const {
    return m_valid_start_at;
}
void OAICertificateDetailV2::setValidStartAt(const QString &valid_start_at) {
    m_valid_start_at = valid_start_at;
    m_valid_start_at_isSet = true;
}

bool OAICertificateDetailV2::is_valid_start_at_Set() const{
    return m_valid_start_at_isSet;
}

bool OAICertificateDetailV2::is_valid_start_at_Valid() const{
    return m_valid_start_at_isValid;
}

bool OAICertificateDetailV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_denied_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_hex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateDetailV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_id_isValid && m_common_name_isValid && m_contact_isValid && m_created_at_isValid && m_period_isValid && m_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
