/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization.h
 *
 * Contains information about the last Certificate Authority Authorization (CAA) Lookup details for the specified domain.  In order for a domain to be eligible to be included in the certificate, the entire domain hierarchy must be scanned for DNS CAA records, as outlined by RFC 6844.  The absence of any CAA records found in the domain hierarchy indicates that the domain may be included in the certificate. Alternatively, if CAA records are found when scanning the domain hierarchy, the domain may be included in the certificate as long as &#x60;godaddy.com&#x60; or &#x60;starfieldtech.com&#x60; is found in the DNS record value. However, if CAA records are found, yet &#x60;godaddy.com&#x60; or &#x60;starfieldtech.com&#x60; is not found in any CAA record&#39;s value, then we must drop the domain from the certificate request.  In the case where there are repeated DNS errors when scanning the domain hierarchy for CAA records, thus ending in an unsuccessful scan, then the domain can still be included in the certificate provided the primary domain is not setup with DNSSEC. Conversely, if DNSSEC is found to be setup on the primary domain when scanning following repeated CAA failures, the domain must be dropped from the certificate request. Finally, if DNS errors persist to the point where a successful DNSSEC query could not be obtained, then the domain must be dropped from the certificate request. 
 */

#ifndef OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization_H
#define OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization : public OAIObject {
public:
    OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization();
    OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization(QString json);
    ~OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompletedAt() const;
    void setCompletedAt(const QString &completed_at);
    bool is_completed_at_Set() const;
    bool is_completed_at_Valid() const;

    QList<QString> getQueryPaths() const;
    void setQueryPaths(const QList<QString> &query_paths);
    bool is_query_paths_Set() const;
    bool is_query_paths_Valid() const;

    QList<QString> getRecommendations() const;
    void setRecommendations(const QList<QString> &recommendations);
    bool is_recommendations_Set() const;
    bool is_recommendations_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_completed_at;
    bool m_completed_at_isSet;
    bool m_completed_at_isValid;

    QList<QString> m_query_paths;
    bool m_query_paths_isSet;
    bool m_query_paths_isValid;

    QList<QString> m_recommendations;
    bool m_recommendations_isSet;
    bool m_recommendations_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization)

#endif // OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization_H
