/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateAddress::OAICertificateAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateAddress::OAICertificateAddress() {
    this->initializeModel();
}

OAICertificateAddress::~OAICertificateAddress() {}

void OAICertificateAddress::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICertificateAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateAddress::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("address1")]);
    m_address1_isSet = !json[QString("address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("address2")]);
    m_address2_isSet = !json[QString("address2")].isNull() && m_address2_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICertificateAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAICertificateAddress::getAddress1() const {
    return m_address1;
}
void OAICertificateAddress::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAICertificateAddress::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAICertificateAddress::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAICertificateAddress::getAddress2() const {
    return m_address2;
}
void OAICertificateAddress::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAICertificateAddress::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAICertificateAddress::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAICertificateAddress::getCity() const {
    return m_city;
}
void OAICertificateAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICertificateAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAICertificateAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAICertificateAddress::getCountry() const {
    return m_country;
}
void OAICertificateAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICertificateAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAICertificateAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICertificateAddress::getPostalCode() const {
    return m_postal_code;
}
void OAICertificateAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAICertificateAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAICertificateAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAICertificateAddress::getState() const {
    return m_state;
}
void OAICertificateAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICertificateAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAICertificateAddress::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICertificateAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address1_isValid && m_country_isValid && true;
}

} // namespace OpenAPI
