/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateReissue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateReissue::OAICertificateReissue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateReissue::OAICertificateReissue() {
    this->initializeModel();
}

OAICertificateReissue::~OAICertificateReissue() {}

void OAICertificateReissue::initializeModel() {

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_csr_isSet = false;
    m_csr_isValid = false;

    m_delay_existing_revoke_isSet = false;
    m_delay_existing_revoke_isValid = false;

    m_force_domain_revetting_isSet = false;
    m_force_domain_revetting_isValid = false;

    m_root_type_isSet = false;
    m_root_type_isValid = false;

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;
}

void OAICertificateReissue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateReissue::fromJsonObject(QJsonObject json) {

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callbackUrl")]);
    m_callback_url_isSet = !json[QString("callbackUrl")].isNull() && m_callback_url_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_csr_isValid = ::OpenAPI::fromJsonValue(m_csr, json[QString("csr")]);
    m_csr_isSet = !json[QString("csr")].isNull() && m_csr_isValid;

    m_delay_existing_revoke_isValid = ::OpenAPI::fromJsonValue(m_delay_existing_revoke, json[QString("delayExistingRevoke")]);
    m_delay_existing_revoke_isSet = !json[QString("delayExistingRevoke")].isNull() && m_delay_existing_revoke_isValid;

    m_force_domain_revetting_isValid = ::OpenAPI::fromJsonValue(m_force_domain_revetting, json[QString("forceDomainRevetting")]);
    m_force_domain_revetting_isSet = !json[QString("forceDomainRevetting")].isNull() && m_force_domain_revetting_isValid;

    m_root_type_isValid = ::OpenAPI::fromJsonValue(m_root_type, json[QString("rootType")]);
    m_root_type_isSet = !json[QString("rootType")].isNull() && m_root_type_isValid;

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("subjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("subjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;
}

QString OAICertificateReissue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateReissue::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_url_isSet) {
        obj.insert(QString("callbackUrl"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_csr_isSet) {
        obj.insert(QString("csr"), ::OpenAPI::toJsonValue(m_csr));
    }
    if (m_delay_existing_revoke_isSet) {
        obj.insert(QString("delayExistingRevoke"), ::OpenAPI::toJsonValue(m_delay_existing_revoke));
    }
    if (m_force_domain_revetting.size() > 0) {
        obj.insert(QString("forceDomainRevetting"), ::OpenAPI::toJsonValue(m_force_domain_revetting));
    }
    if (m_root_type_isSet) {
        obj.insert(QString("rootType"), ::OpenAPI::toJsonValue(m_root_type));
    }
    if (m_subject_alternative_names.size() > 0) {
        obj.insert(QString("subjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    return obj;
}

QString OAICertificateReissue::getCallbackUrl() const {
    return m_callback_url;
}
void OAICertificateReissue::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAICertificateReissue::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAICertificateReissue::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QString OAICertificateReissue::getCommonName() const {
    return m_common_name;
}
void OAICertificateReissue::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAICertificateReissue::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAICertificateReissue::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAICertificateReissue::getCsr() const {
    return m_csr;
}
void OAICertificateReissue::setCsr(const QString &csr) {
    m_csr = csr;
    m_csr_isSet = true;
}

bool OAICertificateReissue::is_csr_Set() const{
    return m_csr_isSet;
}

bool OAICertificateReissue::is_csr_Valid() const{
    return m_csr_isValid;
}

qint32 OAICertificateReissue::getDelayExistingRevoke() const {
    return m_delay_existing_revoke;
}
void OAICertificateReissue::setDelayExistingRevoke(const qint32 &delay_existing_revoke) {
    m_delay_existing_revoke = delay_existing_revoke;
    m_delay_existing_revoke_isSet = true;
}

bool OAICertificateReissue::is_delay_existing_revoke_Set() const{
    return m_delay_existing_revoke_isSet;
}

bool OAICertificateReissue::is_delay_existing_revoke_Valid() const{
    return m_delay_existing_revoke_isValid;
}

QSet<QString> OAICertificateReissue::getForceDomainRevetting() const {
    return m_force_domain_revetting;
}
void OAICertificateReissue::setForceDomainRevetting(const QSet<QString> &force_domain_revetting) {
    m_force_domain_revetting = force_domain_revetting;
    m_force_domain_revetting_isSet = true;
}

bool OAICertificateReissue::is_force_domain_revetting_Set() const{
    return m_force_domain_revetting_isSet;
}

bool OAICertificateReissue::is_force_domain_revetting_Valid() const{
    return m_force_domain_revetting_isValid;
}

QString OAICertificateReissue::getRootType() const {
    return m_root_type;
}
void OAICertificateReissue::setRootType(const QString &root_type) {
    m_root_type = root_type;
    m_root_type_isSet = true;
}

bool OAICertificateReissue::is_root_type_Set() const{
    return m_root_type_isSet;
}

bool OAICertificateReissue::is_root_type_Valid() const{
    return m_root_type_isValid;
}

QSet<QString> OAICertificateReissue::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAICertificateReissue::setSubjectAlternativeNames(const QSet<QString> &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAICertificateReissue::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAICertificateReissue::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

bool OAICertificateReissue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_existing_revoke_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_domain_revetting.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateReissue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
