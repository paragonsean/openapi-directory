/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateEmailHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateEmailHistory::OAICertificateEmailHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateEmailHistory::OAICertificateEmailHistory() {
    this->initializeModel();
}

OAICertificateEmailHistory::~OAICertificateEmailHistory() {}

void OAICertificateEmailHistory::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_date_entered_isSet = false;
    m_date_entered_isValid = false;

    m_from_type_isSet = false;
    m_from_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_template_type_isSet = false;
    m_template_type_isValid = false;
}

void OAICertificateEmailHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateEmailHistory::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_date_entered_isValid = ::OpenAPI::fromJsonValue(m_date_entered, json[QString("dateEntered")]);
    m_date_entered_isSet = !json[QString("dateEntered")].isNull() && m_date_entered_isValid;

    m_from_type_isValid = ::OpenAPI::fromJsonValue(m_from_type, json[QString("fromType")]);
    m_from_type_isSet = !json[QString("fromType")].isNull() && m_from_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_template_type_isValid = ::OpenAPI::fromJsonValue(m_template_type, json[QString("templateType")]);
    m_template_type_isSet = !json[QString("templateType")].isNull() && m_template_type_isValid;
}

QString OAICertificateEmailHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateEmailHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_date_entered_isSet) {
        obj.insert(QString("dateEntered"), ::OpenAPI::toJsonValue(m_date_entered));
    }
    if (m_from_type_isSet) {
        obj.insert(QString("fromType"), ::OpenAPI::toJsonValue(m_from_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_recipients_isSet) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_template_type_isSet) {
        obj.insert(QString("templateType"), ::OpenAPI::toJsonValue(m_template_type));
    }
    return obj;
}

qint32 OAICertificateEmailHistory::getAccountId() const {
    return m_account_id;
}
void OAICertificateEmailHistory::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICertificateEmailHistory::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICertificateEmailHistory::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICertificateEmailHistory::getBody() const {
    return m_body;
}
void OAICertificateEmailHistory::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAICertificateEmailHistory::is_body_Set() const{
    return m_body_isSet;
}

bool OAICertificateEmailHistory::is_body_Valid() const{
    return m_body_isValid;
}

QString OAICertificateEmailHistory::getDateEntered() const {
    return m_date_entered;
}
void OAICertificateEmailHistory::setDateEntered(const QString &date_entered) {
    m_date_entered = date_entered;
    m_date_entered_isSet = true;
}

bool OAICertificateEmailHistory::is_date_entered_Set() const{
    return m_date_entered_isSet;
}

bool OAICertificateEmailHistory::is_date_entered_Valid() const{
    return m_date_entered_isValid;
}

QString OAICertificateEmailHistory::getFromType() const {
    return m_from_type;
}
void OAICertificateEmailHistory::setFromType(const QString &from_type) {
    m_from_type = from_type;
    m_from_type_isSet = true;
}

bool OAICertificateEmailHistory::is_from_type_Set() const{
    return m_from_type_isSet;
}

bool OAICertificateEmailHistory::is_from_type_Valid() const{
    return m_from_type_isValid;
}

qint32 OAICertificateEmailHistory::getId() const {
    return m_id;
}
void OAICertificateEmailHistory::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICertificateEmailHistory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICertificateEmailHistory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICertificateEmailHistory::getRecipients() const {
    return m_recipients;
}
void OAICertificateEmailHistory::setRecipients(const QString &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAICertificateEmailHistory::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAICertificateEmailHistory::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QString OAICertificateEmailHistory::getSubject() const {
    return m_subject;
}
void OAICertificateEmailHistory::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICertificateEmailHistory::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICertificateEmailHistory::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICertificateEmailHistory::getTemplateType() const {
    return m_template_type;
}
void OAICertificateEmailHistory::setTemplateType(const QString &template_type) {
    m_template_type = template_type;
    m_template_type_isSet = true;
}

bool OAICertificateEmailHistory::is_template_type_Set() const{
    return m_template_type_isSet;
}

bool OAICertificateEmailHistory::is_template_type_Valid() const{
    return m_template_type_isValid;
}

bool OAICertificateEmailHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_entered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateEmailHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_body_isValid && m_date_entered_isValid && m_from_type_isValid && m_id_isValid && m_recipients_isValid && m_subject_isValid && m_template_type_isValid && true;
}

} // namespace OpenAPI
