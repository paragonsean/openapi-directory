/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization() {
    this->initializeModel();
}

OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::~OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization() {}

void OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::initializeModel() {

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_query_paths_isSet = false;
    m_query_paths_isValid = false;

    m_recommendations_isSet = false;
    m_recommendations_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::fromJsonObject(QJsonObject json) {

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_query_paths_isValid = ::OpenAPI::fromJsonValue(m_query_paths, json[QString("queryPaths")]);
    m_query_paths_isSet = !json[QString("queryPaths")].isNull() && m_query_paths_isValid;

    m_recommendations_isValid = ::OpenAPI::fromJsonValue(m_recommendations, json[QString("recommendations")]);
    m_recommendations_isSet = !json[QString("recommendations")].isNull() && m_recommendations_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_query_paths.size() > 0) {
        obj.insert(QString("queryPaths"), ::OpenAPI::toJsonValue(m_query_paths));
    }
    if (m_recommendations.size() > 0) {
        obj.insert(QString("recommendations"), ::OpenAPI::toJsonValue(m_recommendations));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::getCompletedAt() const {
    return m_completed_at;
}
void OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::setCompletedAt(const QString &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QList<QString> OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::getQueryPaths() const {
    return m_query_paths;
}
void OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::setQueryPaths(const QList<QString> &query_paths) {
    m_query_paths = query_paths;
    m_query_paths_isSet = true;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_query_paths_Set() const{
    return m_query_paths_isSet;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_query_paths_Valid() const{
    return m_query_paths_isValid;
}

QList<QString> OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::getRecommendations() const {
    return m_recommendations;
}
void OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::setRecommendations(const QList<QString> &recommendations) {
    m_recommendations = recommendations;
    m_recommendations_isSet = true;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_recommendations_Set() const{
    return m_recommendations_isSet;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_recommendations_Valid() const{
    return m_recommendations_isValid;
}

QString OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::getStatus() const {
    return m_status;
}
void OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
