/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1Api_H
#define OAI_OAIV1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificate.h"
#include "OAICertificateAction.h"
#include "OAICertificateBundle.h"
#include "OAICertificateCallback.h"
#include "OAICertificateCreate.h"
#include "OAICertificateEmailHistory.h"
#include "OAICertificateIdentifier.h"
#include "OAICertificateReissue.h"
#include "OAICertificateRenew.h"
#include "OAICertificateRevoke.h"
#include "OAICertificateSiteSeal.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1Api : public QObject {
    Q_OBJECT

public:
    OAIV1Api(const int timeOut = 0);
    ~OAIV1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateActionRetrieve(const QString &certificate_id);

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  email_address QString [required]
    */
    virtual void certificateAlternateEmailAddress(const QString &certificate_id, const QString &email_address);

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateCallbackDelete(const QString &certificate_id);

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateCallbackGet(const QString &certificate_id);

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  callback_url QString [required]
    */
    virtual void certificateCallbackReplace(const QString &certificate_id, const QString &callback_url);

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateCancel(const QString &certificate_id);

    /**
    * @param[in]  oai_certificate_create OAICertificateCreate [required]
    * @param[in]  x_market_id QString [optional]
    */
    virtual void certificateCreate(const OAICertificateCreate &oai_certificate_create, const ::OpenAPI::OptionalParam<QString> &x_market_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateDownload(const QString &certificate_id);

    /**
    * @param[in]  entitlement_id QString [required]
    */
    virtual void certificateDownloadEntitlement(const QString &entitlement_id);

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateEmailHistory(const QString &certificate_id);

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateGet(const QString &certificate_id);

    /**
    * @param[in]  entitlement_id QString [required]
    * @param[in]  latest bool [optional]
    */
    virtual void certificateGetEntitlement(const QString &entitlement_id, const ::OpenAPI::OptionalParam<bool> &latest = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  oai_certificate_reissue OAICertificateReissue [required]
    */
    virtual void certificateReissue(const QString &certificate_id, const OAICertificateReissue &oai_certificate_reissue);

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  oai_certificate_renew OAICertificateRenew [required]
    */
    virtual void certificateRenew(const QString &certificate_id, const OAICertificateRenew &oai_certificate_renew);

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  email_id QString [required]
    */
    virtual void certificateResendEmail(const QString &certificate_id, const QString &email_id);

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  email_id QString [required]
    * @param[in]  email_address QString [required]
    */
    virtual void certificateResendEmailAddress(const QString &certificate_id, const QString &email_id, const QString &email_address);

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  oai_certificate_revoke OAICertificateRevoke [required]
    */
    virtual void certificateRevoke(const QString &certificate_id, const OAICertificateRevoke &oai_certificate_revoke);

    /**
    * @param[in]  certificate_id QString [required]
    * @param[in]  theme QString [optional]
    * @param[in]  locale QString [optional]
    */
    virtual void certificateSitesealGet(const QString &certificate_id, const ::OpenAPI::OptionalParam<QString> &theme = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_certificate_create OAICertificateCreate [required]
    * @param[in]  x_market_id QString [optional]
    */
    virtual void certificateValidate(const OAICertificateCreate &oai_certificate_create, const ::OpenAPI::OptionalParam<QString> &x_market_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  certificate_id QString [required]
    */
    virtual void certificateVerifydomaincontrol(const QString &certificate_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void certificateActionRetrieveCallback(OAIHttpRequestWorker *worker);
    void certificateAlternateEmailAddressCallback(OAIHttpRequestWorker *worker);
    void certificateCallbackDeleteCallback(OAIHttpRequestWorker *worker);
    void certificateCallbackGetCallback(OAIHttpRequestWorker *worker);
    void certificateCallbackReplaceCallback(OAIHttpRequestWorker *worker);
    void certificateCancelCallback(OAIHttpRequestWorker *worker);
    void certificateCreateCallback(OAIHttpRequestWorker *worker);
    void certificateDownloadCallback(OAIHttpRequestWorker *worker);
    void certificateDownloadEntitlementCallback(OAIHttpRequestWorker *worker);
    void certificateEmailHistoryCallback(OAIHttpRequestWorker *worker);
    void certificateGetCallback(OAIHttpRequestWorker *worker);
    void certificateGetEntitlementCallback(OAIHttpRequestWorker *worker);
    void certificateReissueCallback(OAIHttpRequestWorker *worker);
    void certificateRenewCallback(OAIHttpRequestWorker *worker);
    void certificateResendEmailCallback(OAIHttpRequestWorker *worker);
    void certificateResendEmailAddressCallback(OAIHttpRequestWorker *worker);
    void certificateRevokeCallback(OAIHttpRequestWorker *worker);
    void certificateSitesealGetCallback(OAIHttpRequestWorker *worker);
    void certificateValidateCallback(OAIHttpRequestWorker *worker);
    void certificateVerifydomaincontrolCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void certificateActionRetrieveSignal(QList<OAICertificateAction> summary);
    void certificateAlternateEmailAddressSignal(OAICertificateEmailHistory summary);
    void certificateCallbackDeleteSignal();
    void certificateCallbackGetSignal(OAICertificateCallback summary);
    void certificateCallbackReplaceSignal();
    void certificateCancelSignal();
    void certificateCreateSignal(OAICertificateIdentifier summary);
    void certificateDownloadSignal(OAICertificateBundle summary);
    void certificateDownloadEntitlementSignal(OAICertificateBundle summary);
    void certificateEmailHistorySignal(OAICertificateEmailHistory summary);
    void certificateGetSignal(OAICertificate summary);
    void certificateGetEntitlementSignal(QList<OAICertificate> summary);
    void certificateReissueSignal();
    void certificateRenewSignal();
    void certificateResendEmailSignal();
    void certificateResendEmailAddressSignal();
    void certificateRevokeSignal();
    void certificateSitesealGetSignal(OAICertificateSiteSeal summary);
    void certificateValidateSignal();
    void certificateVerifydomaincontrolSignal();


    void certificateActionRetrieveSignalFull(OAIHttpRequestWorker *worker, QList<OAICertificateAction> summary);
    void certificateAlternateEmailAddressSignalFull(OAIHttpRequestWorker *worker, OAICertificateEmailHistory summary);
    void certificateCallbackDeleteSignalFull(OAIHttpRequestWorker *worker);
    void certificateCallbackGetSignalFull(OAIHttpRequestWorker *worker, OAICertificateCallback summary);
    void certificateCallbackReplaceSignalFull(OAIHttpRequestWorker *worker);
    void certificateCancelSignalFull(OAIHttpRequestWorker *worker);
    void certificateCreateSignalFull(OAIHttpRequestWorker *worker, OAICertificateIdentifier summary);
    void certificateDownloadSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);
    void certificateDownloadEntitlementSignalFull(OAIHttpRequestWorker *worker, OAICertificateBundle summary);
    void certificateEmailHistorySignalFull(OAIHttpRequestWorker *worker, OAICertificateEmailHistory summary);
    void certificateGetSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void certificateGetEntitlementSignalFull(OAIHttpRequestWorker *worker, QList<OAICertificate> summary);
    void certificateReissueSignalFull(OAIHttpRequestWorker *worker);
    void certificateRenewSignalFull(OAIHttpRequestWorker *worker);
    void certificateResendEmailSignalFull(OAIHttpRequestWorker *worker);
    void certificateResendEmailAddressSignalFull(OAIHttpRequestWorker *worker);
    void certificateRevokeSignalFull(OAIHttpRequestWorker *worker);
    void certificateSitesealGetSignalFull(OAIHttpRequestWorker *worker, OAICertificateSiteSeal summary);
    void certificateValidateSignalFull(OAIHttpRequestWorker *worker);
    void certificateVerifydomaincontrolSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use certificateActionRetrieveSignalError() instead")
    void certificateActionRetrieveSignalE(QList<OAICertificateAction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateActionRetrieveSignalError(QList<OAICertificateAction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateAlternateEmailAddressSignalError() instead")
    void certificateAlternateEmailAddressSignalE(OAICertificateEmailHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateAlternateEmailAddressSignalError(OAICertificateEmailHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCallbackDeleteSignalError() instead")
    void certificateCallbackDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCallbackDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCallbackGetSignalError() instead")
    void certificateCallbackGetSignalE(OAICertificateCallback summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCallbackGetSignalError(OAICertificateCallback summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCallbackReplaceSignalError() instead")
    void certificateCallbackReplaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCallbackReplaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCancelSignalError() instead")
    void certificateCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCreateSignalError() instead")
    void certificateCreateSignalE(OAICertificateIdentifier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCreateSignalError(OAICertificateIdentifier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDownloadSignalError() instead")
    void certificateDownloadSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDownloadSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDownloadEntitlementSignalError() instead")
    void certificateDownloadEntitlementSignalE(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDownloadEntitlementSignalError(OAICertificateBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateEmailHistorySignalError() instead")
    void certificateEmailHistorySignalE(OAICertificateEmailHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateEmailHistorySignalError(OAICertificateEmailHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetSignalError() instead")
    void certificateGetSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetEntitlementSignalError() instead")
    void certificateGetEntitlementSignalE(QList<OAICertificate> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetEntitlementSignalError(QList<OAICertificate> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateReissueSignalError() instead")
    void certificateReissueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateReissueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateRenewSignalError() instead")
    void certificateRenewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateRenewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateResendEmailSignalError() instead")
    void certificateResendEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateResendEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateResendEmailAddressSignalError() instead")
    void certificateResendEmailAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateResendEmailAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateRevokeSignalError() instead")
    void certificateRevokeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateRevokeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateSitesealGetSignalError() instead")
    void certificateSitesealGetSignalE(OAICertificateSiteSeal summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateSitesealGetSignalError(OAICertificateSiteSeal summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateValidateSignalError() instead")
    void certificateValidateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateValidateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateVerifydomaincontrolSignalError() instead")
    void certificateVerifydomaincontrolSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateVerifydomaincontrolSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use certificateActionRetrieveSignalErrorFull() instead")
    void certificateActionRetrieveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateActionRetrieveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateAlternateEmailAddressSignalErrorFull() instead")
    void certificateAlternateEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateAlternateEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCallbackDeleteSignalErrorFull() instead")
    void certificateCallbackDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCallbackDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCallbackGetSignalErrorFull() instead")
    void certificateCallbackGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCallbackGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCallbackReplaceSignalErrorFull() instead")
    void certificateCallbackReplaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCallbackReplaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCancelSignalErrorFull() instead")
    void certificateCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCreateSignalErrorFull() instead")
    void certificateCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDownloadSignalErrorFull() instead")
    void certificateDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDownloadEntitlementSignalErrorFull() instead")
    void certificateDownloadEntitlementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDownloadEntitlementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateEmailHistorySignalErrorFull() instead")
    void certificateEmailHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateEmailHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetSignalErrorFull() instead")
    void certificateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetEntitlementSignalErrorFull() instead")
    void certificateGetEntitlementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetEntitlementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateReissueSignalErrorFull() instead")
    void certificateReissueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateReissueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateRenewSignalErrorFull() instead")
    void certificateRenewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateRenewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateResendEmailSignalErrorFull() instead")
    void certificateResendEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateResendEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateResendEmailAddressSignalErrorFull() instead")
    void certificateResendEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateResendEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateRevokeSignalErrorFull() instead")
    void certificateRevokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateRevokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateSitesealGetSignalErrorFull() instead")
    void certificateSitesealGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateSitesealGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateValidateSignalErrorFull() instead")
    void certificateValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateVerifydomaincontrolSignalErrorFull() instead")
    void certificateVerifydomaincontrolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateVerifydomaincontrolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
