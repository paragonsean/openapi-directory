/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1Api.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIV1Api::OAIV1Api(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIV1Api::~OAIV1Api() {
}

void OAIV1Api::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("//api.ote-godaddy.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("certificateActionRetrieve", defaultConf);
    _serverIndices.insert("certificateActionRetrieve", 0);
    _serverConfigs.insert("certificateAlternateEmailAddress", defaultConf);
    _serverIndices.insert("certificateAlternateEmailAddress", 0);
    _serverConfigs.insert("certificateCallbackDelete", defaultConf);
    _serverIndices.insert("certificateCallbackDelete", 0);
    _serverConfigs.insert("certificateCallbackGet", defaultConf);
    _serverIndices.insert("certificateCallbackGet", 0);
    _serverConfigs.insert("certificateCallbackReplace", defaultConf);
    _serverIndices.insert("certificateCallbackReplace", 0);
    _serverConfigs.insert("certificateCancel", defaultConf);
    _serverIndices.insert("certificateCancel", 0);
    _serverConfigs.insert("certificateCreate", defaultConf);
    _serverIndices.insert("certificateCreate", 0);
    _serverConfigs.insert("certificateDownload", defaultConf);
    _serverIndices.insert("certificateDownload", 0);
    _serverConfigs.insert("certificateDownloadEntitlement", defaultConf);
    _serverIndices.insert("certificateDownloadEntitlement", 0);
    _serverConfigs.insert("certificateEmailHistory", defaultConf);
    _serverIndices.insert("certificateEmailHistory", 0);
    _serverConfigs.insert("certificateGet", defaultConf);
    _serverIndices.insert("certificateGet", 0);
    _serverConfigs.insert("certificateGetEntitlement", defaultConf);
    _serverIndices.insert("certificateGetEntitlement", 0);
    _serverConfigs.insert("certificateReissue", defaultConf);
    _serverIndices.insert("certificateReissue", 0);
    _serverConfigs.insert("certificateRenew", defaultConf);
    _serverIndices.insert("certificateRenew", 0);
    _serverConfigs.insert("certificateResendEmail", defaultConf);
    _serverIndices.insert("certificateResendEmail", 0);
    _serverConfigs.insert("certificateResendEmailAddress", defaultConf);
    _serverIndices.insert("certificateResendEmailAddress", 0);
    _serverConfigs.insert("certificateRevoke", defaultConf);
    _serverIndices.insert("certificateRevoke", 0);
    _serverConfigs.insert("certificateSitesealGet", defaultConf);
    _serverIndices.insert("certificateSitesealGet", 0);
    _serverConfigs.insert("certificateValidate", defaultConf);
    _serverIndices.insert("certificateValidate", 0);
    _serverConfigs.insert("certificateVerifydomaincontrol", defaultConf);
    _serverIndices.insert("certificateVerifydomaincontrol", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIV1Api::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIV1Api::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIV1Api::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIV1Api::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIV1Api::setUsername(const QString &username) {
    _username = username;
}

void OAIV1Api::setPassword(const QString &password) {
    _password = password;
}


void OAIV1Api::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIV1Api::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIV1Api::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIV1Api::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIV1Api::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIV1Api::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIV1Api::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIV1Api::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIV1Api::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIV1Api::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIV1Api::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIV1Api::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIV1Api::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIV1Api::certificateActionRetrieve(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateActionRetrieve"][_serverIndices.value("certificateActionRetrieve")].URL()+"/v1/certificates/{certificateId}/actions");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateActionRetrieveCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateActionRetrieveCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICertificateAction> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICertificateAction val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateActionRetrieveSignal(output);
        Q_EMIT certificateActionRetrieveSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateActionRetrieveSignalE(output, error_type, error_str);
        Q_EMIT certificateActionRetrieveSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateActionRetrieveSignalError(output, error_type, error_str);
        Q_EMIT certificateActionRetrieveSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateAlternateEmailAddress(const QString &certificate_id, const QString &email_address) {
    QString fullPath = QString(_serverConfigs["certificateAlternateEmailAddress"][_serverIndices.value("certificateAlternateEmailAddress")].URL()+"/v1/certificates/{certificateId}/email/resend/{emailAddress}");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    
    {
        QString email_addressPathParam("{");
        email_addressPathParam.append("emailAddress").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "emailAddress", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"emailAddress"+pathSuffix : pathPrefix;
        fullPath.replace(email_addressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(email_address)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateAlternateEmailAddressCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateAlternateEmailAddressCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificateEmailHistory output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateAlternateEmailAddressSignal(output);
        Q_EMIT certificateAlternateEmailAddressSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateAlternateEmailAddressSignalE(output, error_type, error_str);
        Q_EMIT certificateAlternateEmailAddressSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateAlternateEmailAddressSignalError(output, error_type, error_str);
        Q_EMIT certificateAlternateEmailAddressSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateCallbackDelete(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateCallbackDelete"][_serverIndices.value("certificateCallbackDelete")].URL()+"/v1/certificates/{certificateId}/callback");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateCallbackDeleteCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateCallbackDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateCallbackDeleteSignal();
        Q_EMIT certificateCallbackDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateCallbackDeleteSignalE(error_type, error_str);
        Q_EMIT certificateCallbackDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateCallbackDeleteSignalError(error_type, error_str);
        Q_EMIT certificateCallbackDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateCallbackGet(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateCallbackGet"][_serverIndices.value("certificateCallbackGet")].URL()+"/v1/certificates/{certificateId}/callback");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateCallbackGetCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateCallbackGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificateCallback output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateCallbackGetSignal(output);
        Q_EMIT certificateCallbackGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateCallbackGetSignalE(output, error_type, error_str);
        Q_EMIT certificateCallbackGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateCallbackGetSignalError(output, error_type, error_str);
        Q_EMIT certificateCallbackGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateCallbackReplace(const QString &certificate_id, const QString &callback_url) {
    QString fullPath = QString(_serverConfigs["certificateCallbackReplace"][_serverIndices.value("certificateCallbackReplace")].URL()+"/v1/certificates/{certificateId}/callback");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callbackUrl", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callbackUrl")).append(querySuffix).append(QUrl::toPercentEncoding(callback_url));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateCallbackReplaceCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateCallbackReplaceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateCallbackReplaceSignal();
        Q_EMIT certificateCallbackReplaceSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateCallbackReplaceSignalE(error_type, error_str);
        Q_EMIT certificateCallbackReplaceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateCallbackReplaceSignalError(error_type, error_str);
        Q_EMIT certificateCallbackReplaceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateCancel(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateCancel"][_serverIndices.value("certificateCancel")].URL()+"/v1/certificates/{certificateId}/cancel");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateCancelCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateCancelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateCancelSignal();
        Q_EMIT certificateCancelSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateCancelSignalE(error_type, error_str);
        Q_EMIT certificateCancelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateCancelSignalError(error_type, error_str);
        Q_EMIT certificateCancelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateCreate(const OAICertificateCreate &oai_certificate_create, const ::OpenAPI::OptionalParam<QString> &x_market_id) {
    QString fullPath = QString(_serverConfigs["certificateCreate"][_serverIndices.value("certificateCreate")].URL()+"/v1/certificates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_certificate_create.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (x_market_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_market_id.value()).isEmpty()) {
            input.headers.insert("X-Market-Id", ::OpenAPI::toStringValue(x_market_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateCreateCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificateIdentifier output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateCreateSignal(output);
        Q_EMIT certificateCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateCreateSignalE(output, error_type, error_str);
        Q_EMIT certificateCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateCreateSignalError(output, error_type, error_str);
        Q_EMIT certificateCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateDownload(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateDownload"][_serverIndices.value("certificateDownload")].URL()+"/v1/certificates/{certificateId}/download");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateDownloadCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateDownloadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificateBundle output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateDownloadSignal(output);
        Q_EMIT certificateDownloadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateDownloadSignalE(output, error_type, error_str);
        Q_EMIT certificateDownloadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateDownloadSignalError(output, error_type, error_str);
        Q_EMIT certificateDownloadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateDownloadEntitlement(const QString &entitlement_id) {
    QString fullPath = QString(_serverConfigs["certificateDownloadEntitlement"][_serverIndices.value("certificateDownloadEntitlement")].URL()+"/v2/certificates/download");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "entitlementId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("entitlementId")).append(querySuffix).append(QUrl::toPercentEncoding(entitlement_id));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateDownloadEntitlementCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateDownloadEntitlementCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificateBundle output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateDownloadEntitlementSignal(output);
        Q_EMIT certificateDownloadEntitlementSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateDownloadEntitlementSignalE(output, error_type, error_str);
        Q_EMIT certificateDownloadEntitlementSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateDownloadEntitlementSignalError(output, error_type, error_str);
        Q_EMIT certificateDownloadEntitlementSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateEmailHistory(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateEmailHistory"][_serverIndices.value("certificateEmailHistory")].URL()+"/v1/certificates/{certificateId}/email/history");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateEmailHistoryCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateEmailHistoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificateEmailHistory output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateEmailHistorySignal(output);
        Q_EMIT certificateEmailHistorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateEmailHistorySignalE(output, error_type, error_str);
        Q_EMIT certificateEmailHistorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateEmailHistorySignalError(output, error_type, error_str);
        Q_EMIT certificateEmailHistorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateGet(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateGet"][_serverIndices.value("certificateGet")].URL()+"/v1/certificates/{certificateId}");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateGetCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificate output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateGetSignal(output);
        Q_EMIT certificateGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateGetSignalE(output, error_type, error_str);
        Q_EMIT certificateGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateGetSignalError(output, error_type, error_str);
        Q_EMIT certificateGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateGetEntitlement(const QString &entitlement_id, const ::OpenAPI::OptionalParam<bool> &latest) {
    QString fullPath = QString(_serverConfigs["certificateGetEntitlement"][_serverIndices.value("certificateGetEntitlement")].URL()+"/v2/certificates");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "entitlementId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("entitlementId")).append(querySuffix).append(QUrl::toPercentEncoding(entitlement_id));
    }
    if (latest.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "latest", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("latest")).append(querySuffix).append(QUrl::toPercentEncoding(latest.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateGetEntitlementCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateGetEntitlementCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICertificate> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICertificate val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateGetEntitlementSignal(output);
        Q_EMIT certificateGetEntitlementSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateGetEntitlementSignalE(output, error_type, error_str);
        Q_EMIT certificateGetEntitlementSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateGetEntitlementSignalError(output, error_type, error_str);
        Q_EMIT certificateGetEntitlementSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateReissue(const QString &certificate_id, const OAICertificateReissue &oai_certificate_reissue) {
    QString fullPath = QString(_serverConfigs["certificateReissue"][_serverIndices.value("certificateReissue")].URL()+"/v1/certificates/{certificateId}/reissue");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_certificate_reissue.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateReissueCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateReissueCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateReissueSignal();
        Q_EMIT certificateReissueSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateReissueSignalE(error_type, error_str);
        Q_EMIT certificateReissueSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateReissueSignalError(error_type, error_str);
        Q_EMIT certificateReissueSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateRenew(const QString &certificate_id, const OAICertificateRenew &oai_certificate_renew) {
    QString fullPath = QString(_serverConfigs["certificateRenew"][_serverIndices.value("certificateRenew")].URL()+"/v1/certificates/{certificateId}/renew");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_certificate_renew.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateRenewCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateRenewCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateRenewSignal();
        Q_EMIT certificateRenewSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateRenewSignalE(error_type, error_str);
        Q_EMIT certificateRenewSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateRenewSignalError(error_type, error_str);
        Q_EMIT certificateRenewSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateResendEmail(const QString &certificate_id, const QString &email_id) {
    QString fullPath = QString(_serverConfigs["certificateResendEmail"][_serverIndices.value("certificateResendEmail")].URL()+"/v1/certificates/{certificateId}/email/{emailId}/resend");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    
    {
        QString email_idPathParam("{");
        email_idPathParam.append("emailId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "emailId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"emailId"+pathSuffix : pathPrefix;
        fullPath.replace(email_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(email_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateResendEmailCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateResendEmailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateResendEmailSignal();
        Q_EMIT certificateResendEmailSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateResendEmailSignalE(error_type, error_str);
        Q_EMIT certificateResendEmailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateResendEmailSignalError(error_type, error_str);
        Q_EMIT certificateResendEmailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateResendEmailAddress(const QString &certificate_id, const QString &email_id, const QString &email_address) {
    QString fullPath = QString(_serverConfigs["certificateResendEmailAddress"][_serverIndices.value("certificateResendEmailAddress")].URL()+"/v1/certificates/{certificateId}/email/{emailId}/resend/{emailAddress}");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    
    {
        QString email_idPathParam("{");
        email_idPathParam.append("emailId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "emailId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"emailId"+pathSuffix : pathPrefix;
        fullPath.replace(email_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(email_id)));
    }
    
    {
        QString email_addressPathParam("{");
        email_addressPathParam.append("emailAddress").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "emailAddress", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"emailAddress"+pathSuffix : pathPrefix;
        fullPath.replace(email_addressPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(email_address)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateResendEmailAddressCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateResendEmailAddressCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateResendEmailAddressSignal();
        Q_EMIT certificateResendEmailAddressSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateResendEmailAddressSignalE(error_type, error_str);
        Q_EMIT certificateResendEmailAddressSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateResendEmailAddressSignalError(error_type, error_str);
        Q_EMIT certificateResendEmailAddressSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateRevoke(const QString &certificate_id, const OAICertificateRevoke &oai_certificate_revoke) {
    QString fullPath = QString(_serverConfigs["certificateRevoke"][_serverIndices.value("certificateRevoke")].URL()+"/v1/certificates/{certificateId}/revoke");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_certificate_revoke.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateRevokeCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateRevokeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateRevokeSignal();
        Q_EMIT certificateRevokeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateRevokeSignalE(error_type, error_str);
        Q_EMIT certificateRevokeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateRevokeSignalError(error_type, error_str);
        Q_EMIT certificateRevokeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateSitesealGet(const QString &certificate_id, const ::OpenAPI::OptionalParam<QString> &theme, const ::OpenAPI::OptionalParam<QString> &locale) {
    QString fullPath = QString(_serverConfigs["certificateSitesealGet"][_serverIndices.value("certificateSitesealGet")].URL()+"/v1/certificates/{certificateId}/siteSeal");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (theme.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "theme", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("theme")).append(querySuffix).append(QUrl::toPercentEncoding(theme.stringValue()));
    }
    if (locale.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "locale", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("locale")).append(querySuffix).append(QUrl::toPercentEncoding(locale.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateSitesealGetCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateSitesealGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICertificateSiteSeal output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateSitesealGetSignal(output);
        Q_EMIT certificateSitesealGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateSitesealGetSignalE(output, error_type, error_str);
        Q_EMIT certificateSitesealGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateSitesealGetSignalError(output, error_type, error_str);
        Q_EMIT certificateSitesealGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateValidate(const OAICertificateCreate &oai_certificate_create, const ::OpenAPI::OptionalParam<QString> &x_market_id) {
    QString fullPath = QString(_serverConfigs["certificateValidate"][_serverIndices.value("certificateValidate")].URL()+"/v1/certificates/validate");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_certificate_create.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (x_market_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_market_id.value()).isEmpty()) {
            input.headers.insert("X-Market-Id", ::OpenAPI::toStringValue(x_market_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateValidateCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateValidateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateValidateSignal();
        Q_EMIT certificateValidateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateValidateSignalE(error_type, error_str);
        Q_EMIT certificateValidateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateValidateSignalError(error_type, error_str);
        Q_EMIT certificateValidateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::certificateVerifydomaincontrol(const QString &certificate_id) {
    QString fullPath = QString(_serverConfigs["certificateVerifydomaincontrol"][_serverIndices.value("certificateVerifydomaincontrol")].URL()+"/v1/certificates/{certificateId}/verifyDomainControl");
    
    
    {
        QString certificate_idPathParam("{");
        certificate_idPathParam.append("certificateId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "certificateId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"certificateId"+pathSuffix : pathPrefix;
        fullPath.replace(certificate_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(certificate_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIV1Api::certificateVerifydomaincontrolCallback);
    connect(this, &OAIV1Api::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIV1Api::certificateVerifydomaincontrolCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT certificateVerifydomaincontrolSignal();
        Q_EMIT certificateVerifydomaincontrolSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT certificateVerifydomaincontrolSignalE(error_type, error_str);
        Q_EMIT certificateVerifydomaincontrolSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT certificateVerifydomaincontrolSignalError(error_type, error_str);
        Q_EMIT certificateVerifydomaincontrolSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIV1Api::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
