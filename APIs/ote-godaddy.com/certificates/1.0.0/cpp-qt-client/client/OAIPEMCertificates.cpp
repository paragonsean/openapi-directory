/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPEMCertificates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPEMCertificates::OAIPEMCertificates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPEMCertificates::OAIPEMCertificates() {
    this->initializeModel();
}

OAIPEMCertificates::~OAIPEMCertificates() {}

void OAIPEMCertificates::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_cross_isSet = false;
    m_cross_isValid = false;

    m_intermediate_isSet = false;
    m_intermediate_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIPEMCertificates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPEMCertificates::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_cross_isValid = ::OpenAPI::fromJsonValue(m_cross, json[QString("cross")]);
    m_cross_isSet = !json[QString("cross")].isNull() && m_cross_isValid;

    m_intermediate_isValid = ::OpenAPI::fromJsonValue(m_intermediate, json[QString("intermediate")]);
    m_intermediate_isSet = !json[QString("intermediate")].isNull() && m_intermediate_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIPEMCertificates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPEMCertificates::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_cross_isSet) {
        obj.insert(QString("cross"), ::OpenAPI::toJsonValue(m_cross));
    }
    if (m_intermediate_isSet) {
        obj.insert(QString("intermediate"), ::OpenAPI::toJsonValue(m_intermediate));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

QString OAIPEMCertificates::getCertificate() const {
    return m_certificate;
}
void OAIPEMCertificates::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIPEMCertificates::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIPEMCertificates::is_certificate_Valid() const{
    return m_certificate_isValid;
}

QString OAIPEMCertificates::getCross() const {
    return m_cross;
}
void OAIPEMCertificates::setCross(const QString &cross) {
    m_cross = cross;
    m_cross_isSet = true;
}

bool OAIPEMCertificates::is_cross_Set() const{
    return m_cross_isSet;
}

bool OAIPEMCertificates::is_cross_Valid() const{
    return m_cross_isValid;
}

QString OAIPEMCertificates::getIntermediate() const {
    return m_intermediate;
}
void OAIPEMCertificates::setIntermediate(const QString &intermediate) {
    m_intermediate = intermediate;
    m_intermediate_isSet = true;
}

bool OAIPEMCertificates::is_intermediate_Set() const{
    return m_intermediate_isSet;
}

bool OAIPEMCertificates::is_intermediate_Valid() const{
    return m_intermediate_isValid;
}

QString OAIPEMCertificates::getRoot() const {
    return m_root;
}
void OAIPEMCertificates::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAIPEMCertificates::is_root_Set() const{
    return m_root_isSet;
}

bool OAIPEMCertificates::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIPEMCertificates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intermediate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPEMCertificates::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_isValid && true;
}

} // namespace OpenAPI
