/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJurisdictionOfIncorporation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJurisdictionOfIncorporation::OAIJurisdictionOfIncorporation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJurisdictionOfIncorporation::OAIJurisdictionOfIncorporation() {
    this->initializeModel();
}

OAIJurisdictionOfIncorporation::~OAIJurisdictionOfIncorporation() {}

void OAIJurisdictionOfIncorporation::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIJurisdictionOfIncorporation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJurisdictionOfIncorporation::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("county")]);
    m_county_isSet = !json[QString("county")].isNull() && m_county_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIJurisdictionOfIncorporation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJurisdictionOfIncorporation::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_county_isSet) {
        obj.insert(QString("county"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIJurisdictionOfIncorporation::getCity() const {
    return m_city;
}
void OAIJurisdictionOfIncorporation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIJurisdictionOfIncorporation::is_city_Set() const{
    return m_city_isSet;
}

bool OAIJurisdictionOfIncorporation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIJurisdictionOfIncorporation::getCountry() const {
    return m_country;
}
void OAIJurisdictionOfIncorporation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIJurisdictionOfIncorporation::is_country_Set() const{
    return m_country_isSet;
}

bool OAIJurisdictionOfIncorporation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIJurisdictionOfIncorporation::getCounty() const {
    return m_county;
}
void OAIJurisdictionOfIncorporation::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAIJurisdictionOfIncorporation::is_county_Set() const{
    return m_county_isSet;
}

bool OAIJurisdictionOfIncorporation::is_county_Valid() const{
    return m_county_isValid;
}

QString OAIJurisdictionOfIncorporation::getState() const {
    return m_state;
}
void OAIJurisdictionOfIncorporation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJurisdictionOfIncorporation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJurisdictionOfIncorporation::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIJurisdictionOfIncorporation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJurisdictionOfIncorporation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
