/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainVerificationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainVerificationDetail::OAIDomainVerificationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainVerificationDetail::OAIDomainVerificationDetail() {
    this->initializeModel();
}

OAIDomainVerificationDetail::~OAIDomainVerificationDetail() {}

void OAIDomainVerificationDetail::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dce_token_isSet = false;
    m_dce_token_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_domain_entity_id_isSet = false;
    m_domain_entity_id_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_certificate_authority_authorization_isSet = false;
    m_certificate_authority_authorization_isValid = false;
}

void OAIDomainVerificationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainVerificationDetail::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_dce_token_isValid = ::OpenAPI::fromJsonValue(m_dce_token, json[QString("dceToken")]);
    m_dce_token_isSet = !json[QString("dceToken")].isNull() && m_dce_token_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_domain_entity_id_isValid = ::OpenAPI::fromJsonValue(m_domain_entity_id, json[QString("domainEntityId")]);
    m_domain_entity_id_isSet = !json[QString("domainEntityId")].isNull() && m_domain_entity_id_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modifiedAt")]);
    m_modified_at_isSet = !json[QString("modifiedAt")].isNull() && m_modified_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_certificate_authority_authorization_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_authorization, json[QString("certificateAuthorityAuthorization")]);
    m_certificate_authority_authorization_isSet = !json[QString("certificateAuthorityAuthorization")].isNull() && m_certificate_authority_authorization_isValid;
}

QString OAIDomainVerificationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainVerificationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dce_token_isSet) {
        obj.insert(QString("dceToken"), ::OpenAPI::toJsonValue(m_dce_token));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_domain_entity_id_isSet) {
        obj.insert(QString("domainEntityId"), ::OpenAPI::toJsonValue(m_domain_entity_id));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modifiedAt"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_certificate_authority_authorization.isSet()) {
        obj.insert(QString("certificateAuthorityAuthorization"), ::OpenAPI::toJsonValue(m_certificate_authority_authorization));
    }
    return obj;
}

QString OAIDomainVerificationDetail::getCreatedAt() const {
    return m_created_at;
}
void OAIDomainVerificationDetail::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDomainVerificationDetail::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDomainVerificationDetail::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDomainVerificationDetail::getDceToken() const {
    return m_dce_token;
}
void OAIDomainVerificationDetail::setDceToken(const QString &dce_token) {
    m_dce_token = dce_token;
    m_dce_token_isSet = true;
}

bool OAIDomainVerificationDetail::is_dce_token_Set() const{
    return m_dce_token_isSet;
}

bool OAIDomainVerificationDetail::is_dce_token_Valid() const{
    return m_dce_token_isValid;
}

QString OAIDomainVerificationDetail::getDomain() const {
    return m_domain;
}
void OAIDomainVerificationDetail::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDomainVerificationDetail::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDomainVerificationDetail::is_domain_Valid() const{
    return m_domain_isValid;
}

qint32 OAIDomainVerificationDetail::getDomainEntityId() const {
    return m_domain_entity_id;
}
void OAIDomainVerificationDetail::setDomainEntityId(const qint32 &domain_entity_id) {
    m_domain_entity_id = domain_entity_id;
    m_domain_entity_id_isSet = true;
}

bool OAIDomainVerificationDetail::is_domain_entity_id_Set() const{
    return m_domain_entity_id_isSet;
}

bool OAIDomainVerificationDetail::is_domain_entity_id_Valid() const{
    return m_domain_entity_id_isValid;
}

QString OAIDomainVerificationDetail::getModifiedAt() const {
    return m_modified_at;
}
void OAIDomainVerificationDetail::setModifiedAt(const QString &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIDomainVerificationDetail::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIDomainVerificationDetail::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAIDomainVerificationDetail::getStatus() const {
    return m_status;
}
void OAIDomainVerificationDetail::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDomainVerificationDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDomainVerificationDetail::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDomainVerificationDetail::getType() const {
    return m_type;
}
void OAIDomainVerificationDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDomainVerificationDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDomainVerificationDetail::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDomainVerificationDetail::getUsage() const {
    return m_usage;
}
void OAIDomainVerificationDetail::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIDomainVerificationDetail::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIDomainVerificationDetail::is_usage_Valid() const{
    return m_usage_isValid;
}

OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization OAIDomainVerificationDetail::getCertificateAuthorityAuthorization() const {
    return m_certificate_authority_authorization;
}
void OAIDomainVerificationDetail::setCertificateAuthorityAuthorization(const OAIDomainVerificationDetail_allOf_certificateAuthorityAuthorization &certificate_authority_authorization) {
    m_certificate_authority_authorization = certificate_authority_authorization;
    m_certificate_authority_authorization_isSet = true;
}

bool OAIDomainVerificationDetail::is_certificate_authority_authorization_Set() const{
    return m_certificate_authority_authorization_isSet;
}

bool OAIDomainVerificationDetail::is_certificate_authority_authorization_Valid() const{
    return m_certificate_authority_authorization_isValid;
}

bool OAIDomainVerificationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dce_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_authority_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainVerificationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_domain_isValid && m_domain_entity_id_isValid && m_modified_at_isValid && m_status_isValid && m_type_isValid && m_usage_isValid && true;
}

} // namespace OpenAPI
