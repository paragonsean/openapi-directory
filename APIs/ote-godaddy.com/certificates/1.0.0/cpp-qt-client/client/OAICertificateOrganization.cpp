/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateOrganization::OAICertificateOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateOrganization::OAICertificateOrganization() {
    this->initializeModel();
}

OAICertificateOrganization::~OAICertificateOrganization() {}

void OAICertificateOrganization::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_assumed_name_isSet = false;
    m_assumed_name_isValid = false;

    m_jurisdiction_of_incorporation_isSet = false;
    m_jurisdiction_of_incorporation_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_registration_agent_isSet = false;
    m_registration_agent_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;
}

void OAICertificateOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateOrganization::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_assumed_name_isValid = ::OpenAPI::fromJsonValue(m_assumed_name, json[QString("assumedName")]);
    m_assumed_name_isSet = !json[QString("assumedName")].isNull() && m_assumed_name_isValid;

    m_jurisdiction_of_incorporation_isValid = ::OpenAPI::fromJsonValue(m_jurisdiction_of_incorporation, json[QString("jurisdictionOfIncorporation")]);
    m_jurisdiction_of_incorporation_isSet = !json[QString("jurisdictionOfIncorporation")].isNull() && m_jurisdiction_of_incorporation_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_registration_agent_isValid = ::OpenAPI::fromJsonValue(m_registration_agent, json[QString("registrationAgent")]);
    m_registration_agent_isSet = !json[QString("registrationAgent")].isNull() && m_registration_agent_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;
}

QString OAICertificateOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_assumed_name_isSet) {
        obj.insert(QString("assumedName"), ::OpenAPI::toJsonValue(m_assumed_name));
    }
    if (m_jurisdiction_of_incorporation.isSet()) {
        obj.insert(QString("jurisdictionOfIncorporation"), ::OpenAPI::toJsonValue(m_jurisdiction_of_incorporation));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_registration_agent_isSet) {
        obj.insert(QString("registrationAgent"), ::OpenAPI::toJsonValue(m_registration_agent));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    return obj;
}

OAICertificateAddress OAICertificateOrganization::getAddress() const {
    return m_address;
}
void OAICertificateOrganization::setAddress(const OAICertificateAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICertificateOrganization::is_address_Set() const{
    return m_address_isSet;
}

bool OAICertificateOrganization::is_address_Valid() const{
    return m_address_isValid;
}

QString OAICertificateOrganization::getAssumedName() const {
    return m_assumed_name;
}
void OAICertificateOrganization::setAssumedName(const QString &assumed_name) {
    m_assumed_name = assumed_name;
    m_assumed_name_isSet = true;
}

bool OAICertificateOrganization::is_assumed_name_Set() const{
    return m_assumed_name_isSet;
}

bool OAICertificateOrganization::is_assumed_name_Valid() const{
    return m_assumed_name_isValid;
}

OAIJurisdictionOfIncorporation OAICertificateOrganization::getJurisdictionOfIncorporation() const {
    return m_jurisdiction_of_incorporation;
}
void OAICertificateOrganization::setJurisdictionOfIncorporation(const OAIJurisdictionOfIncorporation &jurisdiction_of_incorporation) {
    m_jurisdiction_of_incorporation = jurisdiction_of_incorporation;
    m_jurisdiction_of_incorporation_isSet = true;
}

bool OAICertificateOrganization::is_jurisdiction_of_incorporation_Set() const{
    return m_jurisdiction_of_incorporation_isSet;
}

bool OAICertificateOrganization::is_jurisdiction_of_incorporation_Valid() const{
    return m_jurisdiction_of_incorporation_isValid;
}

QString OAICertificateOrganization::getName() const {
    return m_name;
}
void OAICertificateOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICertificateOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAICertificateOrganization::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICertificateOrganization::getPhone() const {
    return m_phone;
}
void OAICertificateOrganization::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICertificateOrganization::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICertificateOrganization::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAICertificateOrganization::getRegistrationAgent() const {
    return m_registration_agent;
}
void OAICertificateOrganization::setRegistrationAgent(const QString &registration_agent) {
    m_registration_agent = registration_agent;
    m_registration_agent_isSet = true;
}

bool OAICertificateOrganization::is_registration_agent_Set() const{
    return m_registration_agent_isSet;
}

bool OAICertificateOrganization::is_registration_agent_Valid() const{
    return m_registration_agent_isValid;
}

QString OAICertificateOrganization::getRegistrationNumber() const {
    return m_registration_number;
}
void OAICertificateOrganization::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAICertificateOrganization::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAICertificateOrganization::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

bool OAICertificateOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assumed_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jurisdiction_of_incorporation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_name_isValid && m_phone_isValid && true;
}

} // namespace OpenAPI
