/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateSummaryV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateSummaryV2::OAICertificateSummaryV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateSummaryV2::OAICertificateSummaryV2() {
    this->initializeModel();
}

OAICertificateSummaryV2::~OAICertificateSummaryV2() {}

void OAICertificateSummaryV2::initializeModel() {

    m_certificate_id_isSet = false;
    m_certificate_id_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_renewal_available_isSet = false;
    m_renewal_available_isValid = false;

    m_revoked_at_isSet = false;
    m_revoked_at_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_slot_size_isSet = false;
    m_slot_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valid_end_at_isSet = false;
    m_valid_end_at_isValid = false;

    m_valid_start_at_isSet = false;
    m_valid_start_at_isValid = false;
}

void OAICertificateSummaryV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateSummaryV2::fromJsonObject(QJsonObject json) {

    m_certificate_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_id, json[QString("certificateId")]);
    m_certificate_id_isSet = !json[QString("certificateId")].isNull() && m_certificate_id_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_renewal_available_isValid = ::OpenAPI::fromJsonValue(m_renewal_available, json[QString("renewalAvailable")]);
    m_renewal_available_isSet = !json[QString("renewalAvailable")].isNull() && m_renewal_available_isValid;

    m_revoked_at_isValid = ::OpenAPI::fromJsonValue(m_revoked_at, json[QString("revokedAt")]);
    m_revoked_at_isSet = !json[QString("revokedAt")].isNull() && m_revoked_at_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_slot_size_isValid = ::OpenAPI::fromJsonValue(m_slot_size, json[QString("slotSize")]);
    m_slot_size_isSet = !json[QString("slotSize")].isNull() && m_slot_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("subjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("subjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valid_end_at_isValid = ::OpenAPI::fromJsonValue(m_valid_end_at, json[QString("validEndAt")]);
    m_valid_end_at_isSet = !json[QString("validEndAt")].isNull() && m_valid_end_at_isValid;

    m_valid_start_at_isValid = ::OpenAPI::fromJsonValue(m_valid_start_at, json[QString("validStartAt")]);
    m_valid_start_at_isSet = !json[QString("validStartAt")].isNull() && m_valid_start_at_isValid;
}

QString OAICertificateSummaryV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateSummaryV2::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_id_isSet) {
        obj.insert(QString("certificateId"), ::OpenAPI::toJsonValue(m_certificate_id));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_renewal_available_isSet) {
        obj.insert(QString("renewalAvailable"), ::OpenAPI::toJsonValue(m_renewal_available));
    }
    if (m_revoked_at_isSet) {
        obj.insert(QString("revokedAt"), ::OpenAPI::toJsonValue(m_revoked_at));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_slot_size_isSet) {
        obj.insert(QString("slotSize"), ::OpenAPI::toJsonValue(m_slot_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_alternative_names.size() > 0) {
        obj.insert(QString("subjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valid_end_at_isSet) {
        obj.insert(QString("validEndAt"), ::OpenAPI::toJsonValue(m_valid_end_at));
    }
    if (m_valid_start_at_isSet) {
        obj.insert(QString("validStartAt"), ::OpenAPI::toJsonValue(m_valid_start_at));
    }
    return obj;
}

QString OAICertificateSummaryV2::getCertificateId() const {
    return m_certificate_id;
}
void OAICertificateSummaryV2::setCertificateId(const QString &certificate_id) {
    m_certificate_id = certificate_id;
    m_certificate_id_isSet = true;
}

bool OAICertificateSummaryV2::is_certificate_id_Set() const{
    return m_certificate_id_isSet;
}

bool OAICertificateSummaryV2::is_certificate_id_Valid() const{
    return m_certificate_id_isValid;
}

QString OAICertificateSummaryV2::getCommonName() const {
    return m_common_name;
}
void OAICertificateSummaryV2::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAICertificateSummaryV2::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAICertificateSummaryV2::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAICertificateSummaryV2::getCompletedAt() const {
    return m_completed_at;
}
void OAICertificateSummaryV2::setCompletedAt(const QString &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAICertificateSummaryV2::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAICertificateSummaryV2::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QString OAICertificateSummaryV2::getCreatedAt() const {
    return m_created_at;
}
void OAICertificateSummaryV2::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICertificateSummaryV2::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICertificateSummaryV2::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAICertificateSummaryV2::getPeriod() const {
    return m_period;
}
void OAICertificateSummaryV2::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAICertificateSummaryV2::is_period_Set() const{
    return m_period_isSet;
}

bool OAICertificateSummaryV2::is_period_Valid() const{
    return m_period_isValid;
}

bool OAICertificateSummaryV2::isRenewalAvailable() const {
    return m_renewal_available;
}
void OAICertificateSummaryV2::setRenewalAvailable(const bool &renewal_available) {
    m_renewal_available = renewal_available;
    m_renewal_available_isSet = true;
}

bool OAICertificateSummaryV2::is_renewal_available_Set() const{
    return m_renewal_available_isSet;
}

bool OAICertificateSummaryV2::is_renewal_available_Valid() const{
    return m_renewal_available_isValid;
}

QString OAICertificateSummaryV2::getRevokedAt() const {
    return m_revoked_at;
}
void OAICertificateSummaryV2::setRevokedAt(const QString &revoked_at) {
    m_revoked_at = revoked_at;
    m_revoked_at_isSet = true;
}

bool OAICertificateSummaryV2::is_revoked_at_Set() const{
    return m_revoked_at_isSet;
}

bool OAICertificateSummaryV2::is_revoked_at_Valid() const{
    return m_revoked_at_isValid;
}

QString OAICertificateSummaryV2::getSerialNumber() const {
    return m_serial_number;
}
void OAICertificateSummaryV2::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAICertificateSummaryV2::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAICertificateSummaryV2::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAICertificateSummaryV2::getSlotSize() const {
    return m_slot_size;
}
void OAICertificateSummaryV2::setSlotSize(const QString &slot_size) {
    m_slot_size = slot_size;
    m_slot_size_isSet = true;
}

bool OAICertificateSummaryV2::is_slot_size_Set() const{
    return m_slot_size_isSet;
}

bool OAICertificateSummaryV2::is_slot_size_Valid() const{
    return m_slot_size_isValid;
}

QString OAICertificateSummaryV2::getStatus() const {
    return m_status;
}
void OAICertificateSummaryV2::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICertificateSummaryV2::is_status_Set() const{
    return m_status_isSet;
}

bool OAICertificateSummaryV2::is_status_Valid() const{
    return m_status_isValid;
}

QSet<QString> OAICertificateSummaryV2::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAICertificateSummaryV2::setSubjectAlternativeNames(const QSet<QString> &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAICertificateSummaryV2::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAICertificateSummaryV2::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

QString OAICertificateSummaryV2::getType() const {
    return m_type;
}
void OAICertificateSummaryV2::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICertificateSummaryV2::is_type_Set() const{
    return m_type_isSet;
}

bool OAICertificateSummaryV2::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICertificateSummaryV2::getValidEndAt() const {
    return m_valid_end_at;
}
void OAICertificateSummaryV2::setValidEndAt(const QString &valid_end_at) {
    m_valid_end_at = valid_end_at;
    m_valid_end_at_isSet = true;
}

bool OAICertificateSummaryV2::is_valid_end_at_Set() const{
    return m_valid_end_at_isSet;
}

bool OAICertificateSummaryV2::is_valid_end_at_Valid() const{
    return m_valid_end_at_isValid;
}

QString OAICertificateSummaryV2::getValidStartAt() const {
    return m_valid_start_at;
}
void OAICertificateSummaryV2::setValidStartAt(const QString &valid_start_at) {
    m_valid_start_at = valid_start_at;
    m_valid_start_at_isSet = true;
}

bool OAICertificateSummaryV2::is_valid_start_at_Set() const{
    return m_valid_start_at_isSet;
}

bool OAICertificateSummaryV2::is_valid_start_at_Valid() const{
    return m_valid_start_at_isValid;
}

bool OAICertificateSummaryV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoked_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_end_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateSummaryV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_id_isValid && m_common_name_isValid && m_created_at_isValid && m_period_isValid && m_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
