/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV2Api_H
#define OAI_OAIV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateDetailV2.h"
#include "OAICertificateSummariesV2.h"
#include "OAIDomainVerificationDetail.h"
#include "OAIDomainVerificationSummary.h"
#include "OAIError.h"
#include "OAIErrorLimit.h"
#include "OAIExternalAccountBinding.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV2Api : public QObject {
    Q_OBJECT

public:
    OAIV2Api(const int timeOut = 0);
    ~OAIV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer_id QString [required]
    */
    virtual void getAcmeExternalAccountBinding(const QString &customer_id);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  certificate_id QString [required]
    */
    virtual void getCertificateDetailByCertIdentifier(const QString &customer_id, const QString &certificate_id);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getCustomerCertificatesByCustomerId(const QString &customer_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void getDomainDetailsByDomain(const QString &customer_id, const QString &certificate_id, const QString &domain);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  certificate_id QString [required]
    */
    virtual void getDomainInformationByCertificateId(const QString &customer_id, const QString &certificate_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAcmeExternalAccountBindingCallback(OAIHttpRequestWorker *worker);
    void getCertificateDetailByCertIdentifierCallback(OAIHttpRequestWorker *worker);
    void getCustomerCertificatesByCustomerIdCallback(OAIHttpRequestWorker *worker);
    void getDomainDetailsByDomainCallback(OAIHttpRequestWorker *worker);
    void getDomainInformationByCertificateIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAcmeExternalAccountBindingSignal(OAIExternalAccountBinding summary);
    void getCertificateDetailByCertIdentifierSignal(OAICertificateDetailV2 summary);
    void getCustomerCertificatesByCustomerIdSignal(OAICertificateSummariesV2 summary);
    void getDomainDetailsByDomainSignal(OAIDomainVerificationDetail summary);
    void getDomainInformationByCertificateIdSignal(QList<OAIDomainVerificationSummary> summary);


    void getAcmeExternalAccountBindingSignalFull(OAIHttpRequestWorker *worker, OAIExternalAccountBinding summary);
    void getCertificateDetailByCertIdentifierSignalFull(OAIHttpRequestWorker *worker, OAICertificateDetailV2 summary);
    void getCustomerCertificatesByCustomerIdSignalFull(OAIHttpRequestWorker *worker, OAICertificateSummariesV2 summary);
    void getDomainDetailsByDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainVerificationDetail summary);
    void getDomainInformationByCertificateIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIDomainVerificationSummary> summary);

    Q_DECL_DEPRECATED_X("Use getAcmeExternalAccountBindingSignalError() instead")
    void getAcmeExternalAccountBindingSignalE(OAIExternalAccountBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAcmeExternalAccountBindingSignalError(OAIExternalAccountBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateDetailByCertIdentifierSignalError() instead")
    void getCertificateDetailByCertIdentifierSignalE(OAICertificateDetailV2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateDetailByCertIdentifierSignalError(OAICertificateDetailV2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomerCertificatesByCustomerIdSignalError() instead")
    void getCustomerCertificatesByCustomerIdSignalE(OAICertificateSummariesV2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomerCertificatesByCustomerIdSignalError(OAICertificateSummariesV2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDetailsByDomainSignalError() instead")
    void getDomainDetailsByDomainSignalE(OAIDomainVerificationDetail summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDetailsByDomainSignalError(OAIDomainVerificationDetail summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainInformationByCertificateIdSignalError() instead")
    void getDomainInformationByCertificateIdSignalE(QList<OAIDomainVerificationSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainInformationByCertificateIdSignalError(QList<OAIDomainVerificationSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAcmeExternalAccountBindingSignalErrorFull() instead")
    void getAcmeExternalAccountBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAcmeExternalAccountBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCertificateDetailByCertIdentifierSignalErrorFull() instead")
    void getCertificateDetailByCertIdentifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCertificateDetailByCertIdentifierSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCustomerCertificatesByCustomerIdSignalErrorFull() instead")
    void getCustomerCertificatesByCustomerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomerCertificatesByCustomerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDetailsByDomainSignalErrorFull() instead")
    void getDomainDetailsByDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDetailsByDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainInformationByCertificateIdSignalErrorFull() instead")
    void getDomainInformationByCertificateIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainInformationByCertificateIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
