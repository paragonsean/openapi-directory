# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_contact import CertificateContact
from openapi_server.models.certificate_organization import CertificateOrganization
from openapi_server.models.subject_alternative_name_details import SubjectAlternativeNameDetails
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_id: str=None, common_name: str=None, contact: CertificateContact=None, created_at: str=None, denied_reason: str=None, organization: CertificateOrganization=None, period: int=None, product_type: str=None, progress: int=None, revoked_at: str=None, root_type: str=None, serial_number: str=None, serial_number_hex: str=None, slot_size: str=None, status: str=None, subject_alternative_names: List[SubjectAlternativeNameDetails]=None, valid_end: str=None, valid_start: str=None):
        """Certificate - a model defined in OpenAPI

        :param certificate_id: The certificate_id of this Certificate.
        :param common_name: The common_name of this Certificate.
        :param contact: The contact of this Certificate.
        :param created_at: The created_at of this Certificate.
        :param denied_reason: The denied_reason of this Certificate.
        :param organization: The organization of this Certificate.
        :param period: The period of this Certificate.
        :param product_type: The product_type of this Certificate.
        :param progress: The progress of this Certificate.
        :param revoked_at: The revoked_at of this Certificate.
        :param root_type: The root_type of this Certificate.
        :param serial_number: The serial_number of this Certificate.
        :param serial_number_hex: The serial_number_hex of this Certificate.
        :param slot_size: The slot_size of this Certificate.
        :param status: The status of this Certificate.
        :param subject_alternative_names: The subject_alternative_names of this Certificate.
        :param valid_end: The valid_end of this Certificate.
        :param valid_start: The valid_start of this Certificate.
        """
        self.openapi_types = {
            'certificate_id': str,
            'common_name': str,
            'contact': CertificateContact,
            'created_at': str,
            'denied_reason': str,
            'organization': CertificateOrganization,
            'period': int,
            'product_type': str,
            'progress': int,
            'revoked_at': str,
            'root_type': str,
            'serial_number': str,
            'serial_number_hex': str,
            'slot_size': str,
            'status': str,
            'subject_alternative_names': List[SubjectAlternativeNameDetails],
            'valid_end': str,
            'valid_start': str
        }

        self.attribute_map = {
            'certificate_id': 'certificateId',
            'common_name': 'commonName',
            'contact': 'contact',
            'created_at': 'createdAt',
            'denied_reason': 'deniedReason',
            'organization': 'organization',
            'period': 'period',
            'product_type': 'productType',
            'progress': 'progress',
            'revoked_at': 'revokedAt',
            'root_type': 'rootType',
            'serial_number': 'serialNumber',
            'serial_number_hex': 'serialNumberHex',
            'slot_size': 'slotSize',
            'status': 'status',
            'subject_alternative_names': 'subjectAlternativeNames',
            'valid_end': 'validEnd',
            'valid_start': 'validStart'
        }

        self._certificate_id = certificate_id
        self._common_name = common_name
        self._contact = contact
        self._created_at = created_at
        self._denied_reason = denied_reason
        self._organization = organization
        self._period = period
        self._product_type = product_type
        self._progress = progress
        self._revoked_at = revoked_at
        self._root_type = root_type
        self._serial_number = serial_number
        self._serial_number_hex = serial_number_hex
        self._slot_size = slot_size
        self._status = status
        self._subject_alternative_names = subject_alternative_names
        self._valid_end = valid_end
        self._valid_start = valid_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_id(self):
        """Gets the certificate_id of this Certificate.

        The unique identifier of the certificate request. Only present if no errors returned

        :return: The certificate_id of this Certificate.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this Certificate.

        The unique identifier of the certificate request. Only present if no errors returned

        :param certificate_id: The certificate_id of this Certificate.
        :type certificate_id: str
        """
        if certificate_id is None:
            raise ValueError("Invalid value for `certificate_id`, must not be `None`")

        self._certificate_id = certificate_id

    @property
    def common_name(self):
        """Gets the common_name of this Certificate.

        Common name of certificate

        :return: The common_name of this Certificate.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this Certificate.

        Common name of certificate

        :param common_name: The common_name of this Certificate.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def contact(self):
        """Gets the contact of this Certificate.


        :return: The contact of this Certificate.
        :rtype: CertificateContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Certificate.


        :param contact: The contact of this Certificate.
        :type contact: CertificateContact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def created_at(self):
        """Gets the created_at of this Certificate.

        The date the certificate was ordered.

        :return: The created_at of this Certificate.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Certificate.

        The date the certificate was ordered.

        :param created_at: The created_at of this Certificate.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def denied_reason(self):
        """Gets the denied_reason of this Certificate.

        Only present if certificate order has been denied

        :return: The denied_reason of this Certificate.
        :rtype: str
        """
        return self._denied_reason

    @denied_reason.setter
    def denied_reason(self, denied_reason):
        """Sets the denied_reason of this Certificate.

        Only present if certificate order has been denied

        :param denied_reason: The denied_reason of this Certificate.
        :type denied_reason: str
        """

        self._denied_reason = denied_reason

    @property
    def organization(self):
        """Gets the organization of this Certificate.


        :return: The organization of this Certificate.
        :rtype: CertificateOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Certificate.


        :param organization: The organization of this Certificate.
        :type organization: CertificateOrganization
        """

        self._organization = organization

    @property
    def period(self):
        """Gets the period of this Certificate.

        Validity period of order. Specified in years

        :return: The period of this Certificate.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Certificate.

        Validity period of order. Specified in years

        :param period: The period of this Certificate.
        :type period: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def product_type(self):
        """Gets the product_type of this Certificate.

        Certificate product type

        :return: The product_type of this Certificate.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Certificate.

        Certificate product type

        :param product_type: The product_type of this Certificate.
        :type product_type: str
        """
        allowed_values = ["DV_SSL", "DV_WILDCARD_SSL", "EV_SSL", "OV_CS", "OV_DS", "OV_SSL", "OV_WILDCARD_SSL", "UCC_DV_SSL", "UCC_EV_SSL", "UCC_OV_SSL"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def progress(self):
        """Gets the progress of this Certificate.

        Percentage of completion for certificate vetting

        :return: The progress of this Certificate.
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Certificate.

        Percentage of completion for certificate vetting

        :param progress: The progress of this Certificate.
        :type progress: int
        """

        self._progress = progress

    @property
    def revoked_at(self):
        """Gets the revoked_at of this Certificate.

        The revocation date of certificate (if revoked).

        :return: The revoked_at of this Certificate.
        :rtype: str
        """
        return self._revoked_at

    @revoked_at.setter
    def revoked_at(self, revoked_at):
        """Sets the revoked_at of this Certificate.

        The revocation date of certificate (if revoked).

        :param revoked_at: The revoked_at of this Certificate.
        :type revoked_at: str
        """

        self._revoked_at = revoked_at

    @property
    def root_type(self):
        """Gets the root_type of this Certificate.

        Root Type

        :return: The root_type of this Certificate.
        :rtype: str
        """
        return self._root_type

    @root_type.setter
    def root_type(self, root_type):
        """Sets the root_type of this Certificate.

        Root Type

        :param root_type: The root_type of this Certificate.
        :type root_type: str
        """
        allowed_values = ["GODADDY_SHA_1", "GODADDY_SHA_2", "STARFIELD_SHA_1", "STARFIELD_SHA_2"]  # noqa: E501
        if root_type not in allowed_values:
            raise ValueError(
                "Invalid value for `root_type` ({0}), must be one of {1}"
                .format(root_type, allowed_values)
            )

        self._root_type = root_type

    @property
    def serial_number(self):
        """Gets the serial_number of this Certificate.

        Serial number of certificate (if issued or revoked)

        :return: The serial_number of this Certificate.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Certificate.

        Serial number of certificate (if issued or revoked)

        :param serial_number: The serial_number of this Certificate.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def serial_number_hex(self):
        """Gets the serial_number_hex of this Certificate.

        Hexadecmial format for Serial number of certificate(if issued or revoked)

        :return: The serial_number_hex of this Certificate.
        :rtype: str
        """
        return self._serial_number_hex

    @serial_number_hex.setter
    def serial_number_hex(self, serial_number_hex):
        """Sets the serial_number_hex of this Certificate.

        Hexadecmial format for Serial number of certificate(if issued or revoked)

        :param serial_number_hex: The serial_number_hex of this Certificate.
        :type serial_number_hex: str
        """

        self._serial_number_hex = serial_number_hex

    @property
    def slot_size(self):
        """Gets the slot_size of this Certificate.

        Number of subject alternative names(SAN) to be included in certificate 

        :return: The slot_size of this Certificate.
        :rtype: str
        """
        return self._slot_size

    @slot_size.setter
    def slot_size(self, slot_size):
        """Sets the slot_size of this Certificate.

        Number of subject alternative names(SAN) to be included in certificate 

        :param slot_size: The slot_size of this Certificate.
        :type slot_size: str
        """
        allowed_values = ["FIVE", "TEN", "FIFTEEN", "TWENTY", "THIRTY", "FOURTY", "FIFTY", "ONE_HUNDRED"]  # noqa: E501
        if slot_size not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_size` ({0}), must be one of {1}"
                .format(slot_size, allowed_values)
            )

        self._slot_size = slot_size

    @property
    def status(self):
        """Gets the status of this Certificate.

        Status of certificate

        :return: The status of this Certificate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Certificate.

        Status of certificate

        :param status: The status of this Certificate.
        :type status: str
        """
        allowed_values = ["PENDING_ISSUANCE", "ISSUED", "REVOKED", "CANCELED", "DENIED", "PENDING_REVOCATION", "PENDING_REKEY", "UNUSED", "EXPIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this Certificate.

        Contains subject alternative names set

        :return: The subject_alternative_names of this Certificate.
        :rtype: List[SubjectAlternativeNameDetails]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this Certificate.

        Contains subject alternative names set

        :param subject_alternative_names: The subject_alternative_names of this Certificate.
        :type subject_alternative_names: List[SubjectAlternativeNameDetails]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def valid_end(self):
        """Gets the valid_end of this Certificate.

        The end date of the certificate's validity (if issued or revoked).

        :return: The valid_end of this Certificate.
        :rtype: str
        """
        return self._valid_end

    @valid_end.setter
    def valid_end(self, valid_end):
        """Sets the valid_end of this Certificate.

        The end date of the certificate's validity (if issued or revoked).

        :param valid_end: The valid_end of this Certificate.
        :type valid_end: str
        """

        self._valid_end = valid_end

    @property
    def valid_start(self):
        """Gets the valid_start of this Certificate.

        The start date of the certificate's validity (if issued or revoked).

        :return: The valid_start of this Certificate.
        :rtype: str
        """
        return self._valid_start

    @valid_start.setter
    def valid_start(self, valid_start):
        """Sets the valid_start of this Certificate.

        The start date of the certificate's validity (if issued or revoked).

        :param valid_start: The valid_start of this Certificate.
        :type valid_start: str
        """

        self._valid_start = valid_start
