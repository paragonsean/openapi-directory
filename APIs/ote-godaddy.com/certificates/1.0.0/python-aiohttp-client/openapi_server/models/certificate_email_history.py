# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateEmailHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: int=None, body: str=None, date_entered: str=None, from_type: str=None, id: int=None, recipients: str=None, subject: str=None, template_type: str=None):
        """CertificateEmailHistory - a model defined in OpenAPI

        :param account_id: The account_id of this CertificateEmailHistory.
        :param body: The body of this CertificateEmailHistory.
        :param date_entered: The date_entered of this CertificateEmailHistory.
        :param from_type: The from_type of this CertificateEmailHistory.
        :param id: The id of this CertificateEmailHistory.
        :param recipients: The recipients of this CertificateEmailHistory.
        :param subject: The subject of this CertificateEmailHistory.
        :param template_type: The template_type of this CertificateEmailHistory.
        """
        self.openapi_types = {
            'account_id': int,
            'body': str,
            'date_entered': str,
            'from_type': str,
            'id': int,
            'recipients': str,
            'subject': str,
            'template_type': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'body': 'body',
            'date_entered': 'dateEntered',
            'from_type': 'fromType',
            'id': 'id',
            'recipients': 'recipients',
            'subject': 'subject',
            'template_type': 'templateType'
        }

        self._account_id = account_id
        self._body = body
        self._date_entered = date_entered
        self._from_type = from_type
        self._id = id
        self._recipients = recipients
        self._subject = subject
        self._template_type = template_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateEmailHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateEmailHistory of this CertificateEmailHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CertificateEmailHistory.

        Shopper Id requested certificate

        :return: The account_id of this CertificateEmailHistory.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CertificateEmailHistory.

        Shopper Id requested certificate

        :param account_id: The account_id of this CertificateEmailHistory.
        :type account_id: int
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def body(self):
        """Gets the body of this CertificateEmailHistory.

        Email message

        :return: The body of this CertificateEmailHistory.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CertificateEmailHistory.

        Email message

        :param body: The body of this CertificateEmailHistory.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def date_entered(self):
        """Gets the date_entered of this CertificateEmailHistory.

        Date email sent

        :return: The date_entered of this CertificateEmailHistory.
        :rtype: str
        """
        return self._date_entered

    @date_entered.setter
    def date_entered(self, date_entered):
        """Sets the date_entered of this CertificateEmailHistory.

        Date email sent

        :param date_entered: The date_entered of this CertificateEmailHistory.
        :type date_entered: str
        """
        if date_entered is None:
            raise ValueError("Invalid value for `date_entered`, must not be `None`")

        self._date_entered = date_entered

    @property
    def from_type(self):
        """Gets the from_type of this CertificateEmailHistory.

        Email from address

        :return: The from_type of this CertificateEmailHistory.
        :rtype: str
        """
        return self._from_type

    @from_type.setter
    def from_type(self, from_type):
        """Sets the from_type of this CertificateEmailHistory.

        Email from address

        :param from_type: The from_type of this CertificateEmailHistory.
        :type from_type: str
        """
        if from_type is None:
            raise ValueError("Invalid value for `from_type`, must not be `None`")

        self._from_type = from_type

    @property
    def id(self):
        """Gets the id of this CertificateEmailHistory.

        Email Id

        :return: The id of this CertificateEmailHistory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CertificateEmailHistory.

        Email Id

        :param id: The id of this CertificateEmailHistory.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def recipients(self):
        """Gets the recipients of this CertificateEmailHistory.

        Email address email was sent

        :return: The recipients of this CertificateEmailHistory.
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this CertificateEmailHistory.

        Email address email was sent

        :param recipients: The recipients of this CertificateEmailHistory.
        :type recipients: str
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients

    @property
    def subject(self):
        """Gets the subject of this CertificateEmailHistory.

        Email subject

        :return: The subject of this CertificateEmailHistory.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateEmailHistory.

        Email subject

        :param subject: The subject of this CertificateEmailHistory.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def template_type(self):
        """Gets the template_type of this CertificateEmailHistory.

        Email template type name

        :return: The template_type of this CertificateEmailHistory.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this CertificateEmailHistory.

        Email template type name

        :param template_type: The template_type of this CertificateEmailHistory.
        :type template_type: str
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")

        self._template_type = template_type
