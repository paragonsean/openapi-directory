# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, job_title: str=None, name_first: str=None, name_last: str=None, name_middle: str=None, phone: str=None, suffix: str=None):
        """CertificateContact - a model defined in OpenAPI

        :param email: The email of this CertificateContact.
        :param job_title: The job_title of this CertificateContact.
        :param name_first: The name_first of this CertificateContact.
        :param name_last: The name_last of this CertificateContact.
        :param name_middle: The name_middle of this CertificateContact.
        :param phone: The phone of this CertificateContact.
        :param suffix: The suffix of this CertificateContact.
        """
        self.openapi_types = {
            'email': str,
            'job_title': str,
            'name_first': str,
            'name_last': str,
            'name_middle': str,
            'phone': str,
            'suffix': str
        }

        self.attribute_map = {
            'email': 'email',
            'job_title': 'jobTitle',
            'name_first': 'nameFirst',
            'name_last': 'nameLast',
            'name_middle': 'nameMiddle',
            'phone': 'phone',
            'suffix': 'suffix'
        }

        self._email = email
        self._job_title = job_title
        self._name_first = name_first
        self._name_last = name_last
        self._name_middle = name_middle
        self._phone = phone
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateContact of this CertificateContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this CertificateContact.

        Email address of requestor contact

        :return: The email of this CertificateContact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CertificateContact.

        Email address of requestor contact

        :param email: The email of this CertificateContact.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def job_title(self):
        """Gets the job_title of this CertificateContact.

        Only used for EVSSL. Job title of requestor contact

        :return: The job_title of this CertificateContact.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this CertificateContact.

        Only used for EVSSL. Job title of requestor contact

        :param job_title: The job_title of this CertificateContact.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def name_first(self):
        """Gets the name_first of this CertificateContact.

        First name of requestor contact

        :return: The name_first of this CertificateContact.
        :rtype: str
        """
        return self._name_first

    @name_first.setter
    def name_first(self, name_first):
        """Sets the name_first of this CertificateContact.

        First name of requestor contact

        :param name_first: The name_first of this CertificateContact.
        :type name_first: str
        """
        if name_first is None:
            raise ValueError("Invalid value for `name_first`, must not be `None`")

        self._name_first = name_first

    @property
    def name_last(self):
        """Gets the name_last of this CertificateContact.

        Last name of requestor contact

        :return: The name_last of this CertificateContact.
        :rtype: str
        """
        return self._name_last

    @name_last.setter
    def name_last(self, name_last):
        """Sets the name_last of this CertificateContact.

        Last name of requestor contact

        :param name_last: The name_last of this CertificateContact.
        :type name_last: str
        """
        if name_last is None:
            raise ValueError("Invalid value for `name_last`, must not be `None`")

        self._name_last = name_last

    @property
    def name_middle(self):
        """Gets the name_middle of this CertificateContact.

        Middle initial of requestor contact

        :return: The name_middle of this CertificateContact.
        :rtype: str
        """
        return self._name_middle

    @name_middle.setter
    def name_middle(self, name_middle):
        """Sets the name_middle of this CertificateContact.

        Middle initial of requestor contact

        :param name_middle: The name_middle of this CertificateContact.
        :type name_middle: str
        """

        self._name_middle = name_middle

    @property
    def phone(self):
        """Gets the phone of this CertificateContact.

        Phone number for requestor contact

        :return: The phone of this CertificateContact.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CertificateContact.

        Phone number for requestor contact

        :param phone: The phone of this CertificateContact.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def suffix(self):
        """Gets the suffix of this CertificateContact.

        Suffix of requestor contact

        :return: The suffix of this CertificateContact.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CertificateContact.

        Suffix of requestor contact

        :param suffix: The suffix of this CertificateContact.
        :type suffix: str
        """

        self._suffix = suffix
