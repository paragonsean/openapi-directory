# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_field import ErrorField
from openapi_server import util


class ErrorLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, fields: List[ErrorField]=None, message: str=None, retry_after_sec: int=None):
        """ErrorLimit - a model defined in OpenAPI

        :param code: The code of this ErrorLimit.
        :param fields: The fields of this ErrorLimit.
        :param message: The message of this ErrorLimit.
        :param retry_after_sec: The retry_after_sec of this ErrorLimit.
        """
        self.openapi_types = {
            'code': str,
            'fields': List[ErrorField],
            'message': str,
            'retry_after_sec': int
        }

        self.attribute_map = {
            'code': 'code',
            'fields': 'fields',
            'message': 'message',
            'retry_after_sec': 'retryAfterSec'
        }

        self._code = code
        self._fields = fields
        self._message = message
        self._retry_after_sec = retry_after_sec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorLimit of this ErrorLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ErrorLimit.

        Short identifier for the error, suitable for indicating the specific error within client code

        :return: The code of this ErrorLimit.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorLimit.

        Short identifier for the error, suitable for indicating the specific error within client code

        :param code: The code of this ErrorLimit.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def fields(self):
        """Gets the fields of this ErrorLimit.

        List of the specific fields, and the errors found with their contents

        :return: The fields of this ErrorLimit.
        :rtype: List[ErrorField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ErrorLimit.

        List of the specific fields, and the errors found with their contents

        :param fields: The fields of this ErrorLimit.
        :type fields: List[ErrorField]
        """

        self._fields = fields

    @property
    def message(self):
        """Gets the message of this ErrorLimit.

        Description of the error

        :return: The message of this ErrorLimit.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorLimit.

        Description of the error

        :param message: The message of this ErrorLimit.
        :type message: str
        """

        self._message = message

    @property
    def retry_after_sec(self):
        """Gets the retry_after_sec of this ErrorLimit.

        Number of seconds to wait before attempting a similar request

        :return: The retry_after_sec of this ErrorLimit.
        :rtype: int
        """
        return self._retry_after_sec

    @retry_after_sec.setter
    def retry_after_sec(self, retry_after_sec):
        """Sets the retry_after_sec of this ErrorLimit.

        Number of seconds to wait before attempting a similar request

        :param retry_after_sec: The retry_after_sec of this ErrorLimit.
        :type retry_after_sec: int
        """
        if retry_after_sec is None:
            raise ValueError("Invalid value for `retry_after_sec`, must not be `None`")

        self._retry_after_sec = retry_after_sec
