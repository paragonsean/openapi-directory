# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PEMCertificates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, cross: str=None, intermediate: str=None, root: str=None):
        """PEMCertificates - a model defined in OpenAPI

        :param certificate: The certificate of this PEMCertificates.
        :param cross: The cross of this PEMCertificates.
        :param intermediate: The intermediate of this PEMCertificates.
        :param root: The root of this PEMCertificates.
        """
        self.openapi_types = {
            'certificate': str,
            'cross': str,
            'intermediate': str,
            'root': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'cross': 'cross',
            'intermediate': 'intermediate',
            'root': 'root'
        }

        self._certificate = certificate
        self._cross = cross
        self._intermediate = intermediate
        self._root = root

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PEMCertificates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PEMCertificates of this PEMCertificates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this PEMCertificates.

        End entity certificate in PEM format

        :return: The certificate of this PEMCertificates.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this PEMCertificates.

        End entity certificate in PEM format

        :param certificate: The certificate of this PEMCertificates.
        :type certificate: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def cross(self):
        """Gets the cross of this PEMCertificates.

        CA Cross Intermediate certificate in PEM format

        :return: The cross of this PEMCertificates.
        :rtype: str
        """
        return self._cross

    @cross.setter
    def cross(self, cross):
        """Sets the cross of this PEMCertificates.

        CA Cross Intermediate certificate in PEM format

        :param cross: The cross of this PEMCertificates.
        :type cross: str
        """

        self._cross = cross

    @property
    def intermediate(self):
        """Gets the intermediate of this PEMCertificates.

        CA Signing Intermediate certificate in PEM format

        :return: The intermediate of this PEMCertificates.
        :rtype: str
        """
        return self._intermediate

    @intermediate.setter
    def intermediate(self, intermediate):
        """Sets the intermediate of this PEMCertificates.

        CA Signing Intermediate certificate in PEM format

        :param intermediate: The intermediate of this PEMCertificates.
        :type intermediate: str
        """

        self._intermediate = intermediate

    @property
    def root(self):
        """Gets the root of this PEMCertificates.

        CA Root certificate in PEM format

        :return: The root of this PEMCertificates.
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this PEMCertificates.

        CA Root certificate in PEM format

        :param root: The root of this PEMCertificates.
        :type root: str
        """

        self._root = root
