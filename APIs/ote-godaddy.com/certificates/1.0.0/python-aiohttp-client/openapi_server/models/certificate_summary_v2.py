# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateSummaryV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_id: str=None, common_name: str=None, completed_at: str=None, created_at: str=None, period: int=None, renewal_available: bool=None, revoked_at: str=None, serial_number: str=None, slot_size: str=None, status: str=None, subject_alternative_names: list[str]=None, type: str=None, valid_end_at: str=None, valid_start_at: str=None):
        """CertificateSummaryV2 - a model defined in OpenAPI

        :param certificate_id: The certificate_id of this CertificateSummaryV2.
        :param common_name: The common_name of this CertificateSummaryV2.
        :param completed_at: The completed_at of this CertificateSummaryV2.
        :param created_at: The created_at of this CertificateSummaryV2.
        :param period: The period of this CertificateSummaryV2.
        :param renewal_available: The renewal_available of this CertificateSummaryV2.
        :param revoked_at: The revoked_at of this CertificateSummaryV2.
        :param serial_number: The serial_number of this CertificateSummaryV2.
        :param slot_size: The slot_size of this CertificateSummaryV2.
        :param status: The status of this CertificateSummaryV2.
        :param subject_alternative_names: The subject_alternative_names of this CertificateSummaryV2.
        :param type: The type of this CertificateSummaryV2.
        :param valid_end_at: The valid_end_at of this CertificateSummaryV2.
        :param valid_start_at: The valid_start_at of this CertificateSummaryV2.
        """
        self.openapi_types = {
            'certificate_id': str,
            'common_name': str,
            'completed_at': str,
            'created_at': str,
            'period': int,
            'renewal_available': bool,
            'revoked_at': str,
            'serial_number': str,
            'slot_size': str,
            'status': str,
            'subject_alternative_names': list[str],
            'type': str,
            'valid_end_at': str,
            'valid_start_at': str
        }

        self.attribute_map = {
            'certificate_id': 'certificateId',
            'common_name': 'commonName',
            'completed_at': 'completedAt',
            'created_at': 'createdAt',
            'period': 'period',
            'renewal_available': 'renewalAvailable',
            'revoked_at': 'revokedAt',
            'serial_number': 'serialNumber',
            'slot_size': 'slotSize',
            'status': 'status',
            'subject_alternative_names': 'subjectAlternativeNames',
            'type': 'type',
            'valid_end_at': 'validEndAt',
            'valid_start_at': 'validStartAt'
        }

        self._certificate_id = certificate_id
        self._common_name = common_name
        self._completed_at = completed_at
        self._created_at = created_at
        self._period = period
        self._renewal_available = renewal_available
        self._revoked_at = revoked_at
        self._serial_number = serial_number
        self._slot_size = slot_size
        self._status = status
        self._subject_alternative_names = subject_alternative_names
        self._type = type
        self._valid_end_at = valid_end_at
        self._valid_start_at = valid_start_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateSummaryV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateSummaryV2 of this CertificateSummaryV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_id(self):
        """Gets the certificate_id of this CertificateSummaryV2.

        The unique identifier of the certificate request.

        :return: The certificate_id of this CertificateSummaryV2.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this CertificateSummaryV2.

        The unique identifier of the certificate request.

        :param certificate_id: The certificate_id of this CertificateSummaryV2.
        :type certificate_id: str
        """
        if certificate_id is None:
            raise ValueError("Invalid value for `certificate_id`, must not be `None`")

        self._certificate_id = certificate_id

    @property
    def common_name(self):
        """Gets the common_name of this CertificateSummaryV2.

        Common name for the certificate request.

        :return: The common_name of this CertificateSummaryV2.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this CertificateSummaryV2.

        Common name for the certificate request.

        :param common_name: The common_name of this CertificateSummaryV2.
        :type common_name: str
        """
        if common_name is None:
            raise ValueError("Invalid value for `common_name`, must not be `None`")

        self._common_name = common_name

    @property
    def completed_at(self):
        """Gets the completed_at of this CertificateSummaryV2.

        The date the certificate request completed processing (if issued or revoked).

        :return: The completed_at of this CertificateSummaryV2.
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this CertificateSummaryV2.

        The date the certificate request completed processing (if issued or revoked).

        :param completed_at: The completed_at of this CertificateSummaryV2.
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this CertificateSummaryV2.

        Date that the certificate request was received.

        :return: The created_at of this CertificateSummaryV2.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CertificateSummaryV2.

        Date that the certificate request was received.

        :param created_at: The created_at of this CertificateSummaryV2.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def period(self):
        """Gets the period of this CertificateSummaryV2.

        Validity period of order. Specified in years.

        :return: The period of this CertificateSummaryV2.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CertificateSummaryV2.

        Validity period of order. Specified in years.

        :param period: The period of this CertificateSummaryV2.
        :type period: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def renewal_available(self):
        """Gets the renewal_available of this CertificateSummaryV2.

        Only returned when a renewal is available.

        :return: The renewal_available of this CertificateSummaryV2.
        :rtype: bool
        """
        return self._renewal_available

    @renewal_available.setter
    def renewal_available(self, renewal_available):
        """Sets the renewal_available of this CertificateSummaryV2.

        Only returned when a renewal is available.

        :param renewal_available: The renewal_available of this CertificateSummaryV2.
        :type renewal_available: bool
        """

        self._renewal_available = renewal_available

    @property
    def revoked_at(self):
        """Gets the revoked_at of this CertificateSummaryV2.

        The revocation date of certificate (if revoked).

        :return: The revoked_at of this CertificateSummaryV2.
        :rtype: str
        """
        return self._revoked_at

    @revoked_at.setter
    def revoked_at(self, revoked_at):
        """Sets the revoked_at of this CertificateSummaryV2.

        The revocation date of certificate (if revoked).

        :param revoked_at: The revoked_at of this CertificateSummaryV2.
        :type revoked_at: str
        """

        self._revoked_at = revoked_at

    @property
    def serial_number(self):
        """Gets the serial_number of this CertificateSummaryV2.

        Serial number of certificate (if issued or revoked).

        :return: The serial_number of this CertificateSummaryV2.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CertificateSummaryV2.

        Serial number of certificate (if issued or revoked).

        :param serial_number: The serial_number of this CertificateSummaryV2.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def slot_size(self):
        """Gets the slot_size of this CertificateSummaryV2.

        Number of subject alternative names (SAN) to be included in certificate (if UCC):    * `FIVE` - Five slot UCC request   * `TEN` - Ten slot UCC request   * `FIFTEEN` - Fifteen slot UCC request   * `TWENTY` - Twenty slot UCC request   * `THIRTY` - Thirty slot UCC request   * `FOURTY` - Fourty slot UCC request   * `FIFTY` - Fifty slot UCC request   * `ONE_HUNDRED` - One hundred slot UCC request 

        :return: The slot_size of this CertificateSummaryV2.
        :rtype: str
        """
        return self._slot_size

    @slot_size.setter
    def slot_size(self, slot_size):
        """Sets the slot_size of this CertificateSummaryV2.

        Number of subject alternative names (SAN) to be included in certificate (if UCC):    * `FIVE` - Five slot UCC request   * `TEN` - Ten slot UCC request   * `FIFTEEN` - Fifteen slot UCC request   * `TWENTY` - Twenty slot UCC request   * `THIRTY` - Thirty slot UCC request   * `FOURTY` - Fourty slot UCC request   * `FIFTY` - Fifty slot UCC request   * `ONE_HUNDRED` - One hundred slot UCC request 

        :param slot_size: The slot_size of this CertificateSummaryV2.
        :type slot_size: str
        """
        allowed_values = ["FIVE", "TEN", "FIFTEEN", "TWENTY", "THIRTY", "FOURTY", "FIFTY", "ONE_HUNDRED"]  # noqa: E501
        if slot_size not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_size` ({0}), must be one of {1}"
                .format(slot_size, allowed_values)
            )

        self._slot_size = slot_size

    @property
    def status(self):
        """Gets the status of this CertificateSummaryV2.

        Certificate status (if issued or revoked):    * `CANCELED` - Certificate request was canceled by customer   * `DENIED` - Certificate request was denied by customer   * `EXPIRED` - Issued certificate has exceeded the valid end date   * `ISSUED` - Certificate has been issued and is within validity period   * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued   * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued   * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked   * `REVOKED` - Issued certificate has been revoked   * `UNUSED` - Certificate in an error state 

        :return: The status of this CertificateSummaryV2.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CertificateSummaryV2.

        Certificate status (if issued or revoked):    * `CANCELED` - Certificate request was canceled by customer   * `DENIED` - Certificate request was denied by customer   * `EXPIRED` - Issued certificate has exceeded the valid end date   * `ISSUED` - Certificate has been issued and is within validity period   * `PENDING_ISSUANCE` - Certificate request has completed domain verification and is in the process of being issued   * `PENDING_REKEY` - Previously issued certificate was rekeyed by customer and is in the process of being reissued   * `PENDING_REVOCATION` - Previously issued certificate is in the process of being revoked   * `REVOKED` - Issued certificate has been revoked   * `UNUSED` - Certificate in an error state 

        :param status: The status of this CertificateSummaryV2.
        :type status: str
        """
        allowed_values = ["ISSUED", "CANCELED", "DENIED", "EXPIRED", "PENDING_ISSUANCE", "PENDING_REKEY", "PENDING_REVOCATION", "REVOKED", "UNUSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this CertificateSummaryV2.

        Subject Alternative names (if UCC). Collection of subjectAlternativeNames to be included in certificate.

        :return: The subject_alternative_names of this CertificateSummaryV2.
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this CertificateSummaryV2.

        Subject Alternative names (if UCC). Collection of subjectAlternativeNames to be included in certificate.

        :param subject_alternative_names: The subject_alternative_names of this CertificateSummaryV2.
        :type subject_alternative_names: list[str]
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def type(self):
        """Gets the type of this CertificateSummaryV2.

        Certificate type:    * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only   * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only   * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors   * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information   * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information   * `OV_SSL` - SSL certificate validated using organization information and domain name   * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name   * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only   * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors   * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name 

        :return: The type of this CertificateSummaryV2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CertificateSummaryV2.

        Certificate type:    * `DV_SSL` - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only   * `DV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using domain name only   * `EV_SSL` - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors   * `OV_CODE_SIGNING` - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information   * `OV_DRIVER_SIGNING` - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information   * `OV_SSL` - SSL certificate validated using organization information and domain name   * `OV_WILDCARD_SSL` - SSL certificate containing subdomains which is validated using organization information and domain name   * `UCC_DV_SSL` - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only   * `UCC_EV_SSL` - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors   * `UCC_OV_SSL` - Multi domain SSL certificate validated using organization information and domain name 

        :param type: The type of this CertificateSummaryV2.
        :type type: str
        """
        allowed_values = ["DV_SSL", "DV_WILDCARD_SSL", "EV_SSL", "OV_CODE_SIGNING", "OV_DRIVER_SIGNING", "OV_SSL", "OV_WILDCARD_SSL", "UCC_DV_SSL", "UCC_EV_SSL", "UCC_OV_SSL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def valid_end_at(self):
        """Gets the valid_end_at of this CertificateSummaryV2.

        The end date of the certificate's validity (if issued or revoked).

        :return: The valid_end_at of this CertificateSummaryV2.
        :rtype: str
        """
        return self._valid_end_at

    @valid_end_at.setter
    def valid_end_at(self, valid_end_at):
        """Sets the valid_end_at of this CertificateSummaryV2.

        The end date of the certificate's validity (if issued or revoked).

        :param valid_end_at: The valid_end_at of this CertificateSummaryV2.
        :type valid_end_at: str
        """

        self._valid_end_at = valid_end_at

    @property
    def valid_start_at(self):
        """Gets the valid_start_at of this CertificateSummaryV2.

        The start date of the certificate's validity (if issued or revoked).

        :return: The valid_start_at of this CertificateSummaryV2.
        :rtype: str
        """
        return self._valid_start_at

    @valid_start_at.setter
    def valid_start_at(self, valid_start_at):
        """Sets the valid_start_at of this CertificateSummaryV2.

        The start date of the certificate's validity (if issued or revoked).

        :param valid_start_at: The valid_start_at of this CertificateSummaryV2.
        :type valid_start_at: str
        """

        self._valid_start_at = valid_start_at
