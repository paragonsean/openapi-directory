# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, city: str=None, country: str=None, postal_code: str=None, state: str=None):
        """CertificateAddress - a model defined in OpenAPI

        :param address1: The address1 of this CertificateAddress.
        :param address2: The address2 of this CertificateAddress.
        :param city: The city of this CertificateAddress.
        :param country: The country of this CertificateAddress.
        :param postal_code: The postal_code of this CertificateAddress.
        :param state: The state of this CertificateAddress.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'city': str,
            'country': str,
            'postal_code': str,
            'state': str
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'city': 'city',
            'country': 'country',
            'postal_code': 'postalCode',
            'state': 'state'
        }

        self._address1 = address1
        self._address2 = address2
        self._city = city
        self._country = country
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateAddress of this CertificateAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this CertificateAddress.

        Address line 1 of organization address

        :return: The address1 of this CertificateAddress.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this CertificateAddress.

        Address line 1 of organization address

        :param address1: The address1 of this CertificateAddress.
        :type address1: str
        """
        if address1 is None:
            raise ValueError("Invalid value for `address1`, must not be `None`")

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this CertificateAddress.

        Address line 2 of organization address

        :return: The address2 of this CertificateAddress.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this CertificateAddress.

        Address line 2 of organization address

        :param address2: The address2 of this CertificateAddress.
        :type address2: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this CertificateAddress.

        City/Locality of organization address

        :return: The city of this CertificateAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CertificateAddress.

        City/Locality of organization address

        :param city: The city of this CertificateAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this CertificateAddress.

        Two character country code of organization

        :return: The country of this CertificateAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CertificateAddress.

        Two character country code of organization

        :param country: The country of this CertificateAddress.
        :type country: str
        """
        allowed_values = ["AC", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MG", "MH", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "false", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "ST", "SV", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TP", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "YU", "ZA", "ZM", "ZW"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this CertificateAddress.

        Postal code of organization address

        :return: The postal_code of this CertificateAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CertificateAddress.

        Postal code of organization address

        :param postal_code: The postal_code of this CertificateAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this CertificateAddress.

        Full name of State/Province/Territory of organization address

        :return: The state of this CertificateAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CertificateAddress.

        Full name of State/Province/Territory of organization address

        :param state: The state of this CertificateAddress.
        :type state: str
        """

        self._state = state
