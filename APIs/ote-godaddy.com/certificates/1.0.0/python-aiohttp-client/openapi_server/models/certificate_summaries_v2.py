# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_summary_v2 import CertificateSummaryV2
from openapi_server.models.pagination import Pagination
from openapi_server import util


class CertificateSummariesV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificates: List[CertificateSummaryV2]=None, pagination: Pagination=None):
        """CertificateSummariesV2 - a model defined in OpenAPI

        :param certificates: The certificates of this CertificateSummariesV2.
        :param pagination: The pagination of this CertificateSummariesV2.
        """
        self.openapi_types = {
            'certificates': List[CertificateSummaryV2],
            'pagination': Pagination
        }

        self.attribute_map = {
            'certificates': 'certificates',
            'pagination': 'pagination'
        }

        self._certificates = certificates
        self._pagination = pagination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateSummariesV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateSummariesV2 of this CertificateSummariesV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificates(self):
        """Gets the certificates of this CertificateSummariesV2.

        List of certificates for a specified customer.

        :return: The certificates of this CertificateSummariesV2.
        :rtype: List[CertificateSummaryV2]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this CertificateSummariesV2.

        List of certificates for a specified customer.

        :param certificates: The certificates of this CertificateSummariesV2.
        :type certificates: List[CertificateSummaryV2]
        """
        if certificates is None:
            raise ValueError("Invalid value for `certificates`, must not be `None`")

        self._certificates = certificates

    @property
    def pagination(self):
        """Gets the pagination of this CertificateSummariesV2.


        :return: The pagination of this CertificateSummariesV2.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this CertificateSummariesV2.


        :param pagination: The pagination of this CertificateSummariesV2.
        :type pagination: Pagination
        """
        if pagination is None:
            raise ValueError("Invalid value for `pagination`, must not be `None`")

        self._pagination = pagination
