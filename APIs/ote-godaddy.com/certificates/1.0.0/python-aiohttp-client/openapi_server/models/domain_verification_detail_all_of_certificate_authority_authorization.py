# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DomainVerificationDetailAllOfCertificateAuthorityAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_at: str=None, query_paths: List[str]=None, recommendations: List[str]=None, status: str=None):
        """DomainVerificationDetailAllOfCertificateAuthorityAuthorization - a model defined in OpenAPI

        :param completed_at: The completed_at of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :param query_paths: The query_paths of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :param recommendations: The recommendations of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :param status: The status of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        """
        self.openapi_types = {
            'completed_at': str,
            'query_paths': List[str],
            'recommendations': List[str],
            'status': str
        }

        self.attribute_map = {
            'completed_at': 'completedAt',
            'query_paths': 'queryPaths',
            'recommendations': 'recommendations',
            'status': 'status'
        }

        self._completed_at = completed_at
        self._query_paths = query_paths
        self._recommendations = recommendations
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainVerificationDetailAllOfCertificateAuthorityAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainVerificationDetail_allOf_certificateAuthorityAuthorization of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_at(self):
        """Gets the completed_at of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        The date the certificate request completed processing.

        :return: The completed_at of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        The date the certificate request completed processing.

        :param completed_at: The completed_at of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def query_paths(self):
        """Gets the query_paths of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        Details all the individual DNS paths that were scanned for CAA records for this domain, as detailed by RFC 6844. This element not only contains the parts determined from parsing the domain, but also any CNAME or DNAME targets specified by any of those individual parts.

        :return: The query_paths of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :rtype: List[str]
        """
        return self._query_paths

    @query_paths.setter
    def query_paths(self, query_paths):
        """Sets the query_paths of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        Details all the individual DNS paths that were scanned for CAA records for this domain, as detailed by RFC 6844. This element not only contains the parts determined from parsing the domain, but also any CNAME or DNAME targets specified by any of those individual parts.

        :param query_paths: The query_paths of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :type query_paths: List[str]
        """

        self._query_paths = query_paths

    @property
    def recommendations(self):
        """Gets the recommendations of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        Returns a list of fix recommendations if the query was unsuccessful, or if the domain was dropped from the certificate request, so that a subsequent certificate request with the specified domain will successfully pass its CAA scan.

        :return: The recommendations of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :rtype: List[str]
        """
        return self._recommendations

    @recommendations.setter
    def recommendations(self, recommendations):
        """Sets the recommendations of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        Returns a list of fix recommendations if the query was unsuccessful, or if the domain was dropped from the certificate request, so that a subsequent certificate request with the specified domain will successfully pass its CAA scan.

        :param recommendations: The recommendations of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :type recommendations: List[str]
        """
        allowed_values = ["ADD_CA_TO_CAA", "CREATE_TARGET_DOMAIN_CAA", "DISABLE_DNSSEC", "FIX_CRITICAL_TAG", "VALIDATE_SOA"]  # noqa: E501
        if not set(recommendations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `recommendations` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(recommendations) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._recommendations = recommendations

    @property
    def status(self):
        """Gets the status of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        Returns the status of the CAA Lookup for the specified domain: * `PENDING` - The CAA lookup has not yet been attempted for the specified domain. * `REMOVED_DNS_ERROR` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNS errors then prevented the system from determining if DNSSEC was enabled for the specified domain, and it had to be removed from the certificate request. * `REMOVED_DNSSEC_ENABLED` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNSSEC was determined to be enabled for the specified domain, and it had to be removed from the certificate request. * `REMOVED_NOT_FOUND_CA` - CAA records were found during the CAA lookup for the speicified domain, but `godaddy.com` or `starfieldtech.com` was not listed as a value, thereby not allowing us to issue a certificate with this domain. The specified domain was removed from the certificate request. * `REMOVED_UNKNOWN_CRITICAL_TAG` - A CAA record was found during the CAA lookup with its Critical bit set, as outlined by RFC 6844, yet the Tag of the CAA record was not understood (as outlined by RFC 6844). The specified domain was removed from the certificate request. * `SUCCESS_CAA` - The CAA lookup was successful for the specified domain, and the domain can remain in the certificate request. * `SUCCESS_DNSSEC` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. The system detemined that DNSSEC was not enabled for the specified domain, so the domain is allowed to remain in the certificate request. 

        :return: The status of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.

        Returns the status of the CAA Lookup for the specified domain: * `PENDING` - The CAA lookup has not yet been attempted for the specified domain. * `REMOVED_DNS_ERROR` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNS errors then prevented the system from determining if DNSSEC was enabled for the specified domain, and it had to be removed from the certificate request. * `REMOVED_DNSSEC_ENABLED` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. DNSSEC was determined to be enabled for the specified domain, and it had to be removed from the certificate request. * `REMOVED_NOT_FOUND_CA` - CAA records were found during the CAA lookup for the speicified domain, but `godaddy.com` or `starfieldtech.com` was not listed as a value, thereby not allowing us to issue a certificate with this domain. The specified domain was removed from the certificate request. * `REMOVED_UNKNOWN_CRITICAL_TAG` - A CAA record was found during the CAA lookup with its Critical bit set, as outlined by RFC 6844, yet the Tag of the CAA record was not understood (as outlined by RFC 6844). The specified domain was removed from the certificate request. * `SUCCESS_CAA` - The CAA lookup was successful for the specified domain, and the domain can remain in the certificate request. * `SUCCESS_DNSSEC` - Repeated errors occurred while scanning for CAA records, thereby resulting in a DNSSEC scan. The system detemined that DNSSEC was not enabled for the specified domain, so the domain is allowed to remain in the certificate request. 

        :param status: The status of this DomainVerificationDetailAllOfCertificateAuthorityAuthorization.
        :type status: str
        """
        allowed_values = ["PENDING", "REMOVED_DNS_ERROR", "REMOVED_DNSSEC_ENABLED", "REMOVED_NOT_FOUND_CA", "REMOVED_UNKNOWN_CRITICAL_TAG", "SUCCESS_CAA", "SUCCESS_DNSSEC"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
