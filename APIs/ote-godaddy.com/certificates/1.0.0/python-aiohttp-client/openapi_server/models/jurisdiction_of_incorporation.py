# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JurisdictionOfIncorporation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, county: str=None, state: str=None):
        """JurisdictionOfIncorporation - a model defined in OpenAPI

        :param city: The city of this JurisdictionOfIncorporation.
        :param country: The country of this JurisdictionOfIncorporation.
        :param county: The county of this JurisdictionOfIncorporation.
        :param state: The state of this JurisdictionOfIncorporation.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'county': str,
            'state': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'county': 'county',
            'state': 'state'
        }

        self._city = city
        self._country = country
        self._county = county
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JurisdictionOfIncorporation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JurisdictionOfIncorporation of this JurisdictionOfIncorporation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this JurisdictionOfIncorporation.


        :return: The city of this JurisdictionOfIncorporation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this JurisdictionOfIncorporation.


        :param city: The city of this JurisdictionOfIncorporation.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this JurisdictionOfIncorporation.


        :return: The country of this JurisdictionOfIncorporation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this JurisdictionOfIncorporation.


        :param country: The country of this JurisdictionOfIncorporation.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def county(self):
        """Gets the county of this JurisdictionOfIncorporation.


        :return: The county of this JurisdictionOfIncorporation.
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this JurisdictionOfIncorporation.


        :param county: The county of this JurisdictionOfIncorporation.
        :type county: str
        """

        self._county = county

    @property
    def state(self):
        """Gets the state of this JurisdictionOfIncorporation.


        :return: The state of this JurisdictionOfIncorporation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JurisdictionOfIncorporation.


        :param state: The state of this JurisdictionOfIncorporation.
        :type state: str
        """

        self._state = state
