# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_verification_detail_all_of_certificate_authority_authorization import DomainVerificationDetailAllOfCertificateAuthorityAuthorization
from openapi_server import util


class DomainVerificationDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, dce_token: str=None, domain: str=None, domain_entity_id: int=None, modified_at: str=None, status: str=None, type: str=None, usage: str=None, certificate_authority_authorization: DomainVerificationDetailAllOfCertificateAuthorityAuthorization=None):
        """DomainVerificationDetail - a model defined in OpenAPI

        :param created_at: The created_at of this DomainVerificationDetail.
        :param dce_token: The dce_token of this DomainVerificationDetail.
        :param domain: The domain of this DomainVerificationDetail.
        :param domain_entity_id: The domain_entity_id of this DomainVerificationDetail.
        :param modified_at: The modified_at of this DomainVerificationDetail.
        :param status: The status of this DomainVerificationDetail.
        :param type: The type of this DomainVerificationDetail.
        :param usage: The usage of this DomainVerificationDetail.
        :param certificate_authority_authorization: The certificate_authority_authorization of this DomainVerificationDetail.
        """
        self.openapi_types = {
            'created_at': str,
            'dce_token': str,
            'domain': str,
            'domain_entity_id': int,
            'modified_at': str,
            'status': str,
            'type': str,
            'usage': str,
            'certificate_authority_authorization': DomainVerificationDetailAllOfCertificateAuthorityAuthorization
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'dce_token': 'dceToken',
            'domain': 'domain',
            'domain_entity_id': 'domainEntityId',
            'modified_at': 'modifiedAt',
            'status': 'status',
            'type': 'type',
            'usage': 'usage',
            'certificate_authority_authorization': 'certificateAuthorityAuthorization'
        }

        self._created_at = created_at
        self._dce_token = dce_token
        self._domain = domain
        self._domain_entity_id = domain_entity_id
        self._modified_at = modified_at
        self._status = status
        self._type = type
        self._usage = usage
        self._certificate_authority_authorization = certificate_authority_authorization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainVerificationDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainVerificationDetail of this DomainVerificationDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this DomainVerificationDetail.

        Timestamp indicating when the domain verification process was started

        :return: The created_at of this DomainVerificationDetail.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DomainVerificationDetail.

        Timestamp indicating when the domain verification process was started

        :param created_at: The created_at of this DomainVerificationDetail.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def dce_token(self):
        """Gets the dce_token of this DomainVerificationDetail.

        DCE verification type token (if DCE verification type).

        :return: The dce_token of this DomainVerificationDetail.
        :rtype: str
        """
        return self._dce_token

    @dce_token.setter
    def dce_token(self, dce_token):
        """Sets the dce_token of this DomainVerificationDetail.

        DCE verification type token (if DCE verification type).

        :param dce_token: The dce_token of this DomainVerificationDetail.
        :type dce_token: str
        """

        self._dce_token = dce_token

    @property
    def domain(self):
        """Gets the domain of this DomainVerificationDetail.

        Domain name

        :return: The domain of this DomainVerificationDetail.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DomainVerificationDetail.

        Domain name

        :param domain: The domain of this DomainVerificationDetail.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def domain_entity_id(self):
        """Gets the domain_entity_id of this DomainVerificationDetail.

        A unique identifier that can be leveraged for retrieving domain verification related information. Primarily used when troubleshooting a request

        :return: The domain_entity_id of this DomainVerificationDetail.
        :rtype: int
        """
        return self._domain_entity_id

    @domain_entity_id.setter
    def domain_entity_id(self, domain_entity_id):
        """Sets the domain_entity_id of this DomainVerificationDetail.

        A unique identifier that can be leveraged for retrieving domain verification related information. Primarily used when troubleshooting a request

        :param domain_entity_id: The domain_entity_id of this DomainVerificationDetail.
        :type domain_entity_id: int
        """
        if domain_entity_id is None:
            raise ValueError("Invalid value for `domain_entity_id`, must not be `None`")

        self._domain_entity_id = domain_entity_id

    @property
    def modified_at(self):
        """Gets the modified_at of this DomainVerificationDetail.

        Timestamp indicating when the domain verification process was last updated

        :return: The modified_at of this DomainVerificationDetail.
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this DomainVerificationDetail.

        Timestamp indicating when the domain verification process was last updated

        :param modified_at: The modified_at of this DomainVerificationDetail.
        :type modified_at: str
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")

        self._modified_at = modified_at

    @property
    def status(self):
        """Gets the status of this DomainVerificationDetail.

        Domain verification status:    * `AWAITING` - Verification pending customer input   * `INVALID` - SAN connected to a cancelled request   * `COMPLETED` - Verification completed   * `FAILED_VERIFICATION` - Verification failed   * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review   * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified   * `DROPPED` - SAN dropped from request   * `REVOKED_CERT` - Certificate revoked   * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check   * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check 

        :return: The status of this DomainVerificationDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DomainVerificationDetail.

        Domain verification status:    * `AWAITING` - Verification pending customer input   * `INVALID` - SAN connected to a cancelled request   * `COMPLETED` - Verification completed   * `FAILED_VERIFICATION` - Verification failed   * `PENDING_POSSIBLE_FRAUD` - Flagged for a system level fraud review   * `VERIFIED_POSSIBLE_FRAUD` - Fraud detection reviewed but verified   * `DROPPED` - SAN dropped from request   * `REVOKED_CERT` - Certificate revoked   * `DROPPED_GOOGLE_SAFE_BROWSING` - SAN dropped from request due to Google Safe Browsing check   * `DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION` - SAN dropped from request due to Certificate Authorization Authority DNS record check 

        :param status: The status of this DomainVerificationDetail.
        :type status: str
        """
        allowed_values = ["COMPLETED", "FAILED_VERIFICATION", "VERIFIED_POSSIBLE_FRAUD", "DROPPED", "DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION", "DROPPED_GOOGLE_SAFE_BROWSING", "INVALID", "AWAITING", "PENDING_POSSIBLE_FRAUD", "REVOKED_CERTIFICATE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this DomainVerificationDetail.

        Domain verification type:    * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>   * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email   * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification   * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value   * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification   * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep   * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification   * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain   * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check   * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods   * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check   * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification   * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification 

        :return: The type of this DomainVerificationDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DomainVerificationDetail.

        Domain verification type:    * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN` - Domain verified using domain control verification email sent to admin@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR` - Domain verified using domain control verification email sent to administrator@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER` - Domain verified using domain control verification email sent to hostmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER` - Domain verified using domain control verification email sent to postmaster@<your.domain.com>   * `AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER` - Domain verified using domain control verification email sent to webmaster@<your.domain.com>   * `DOMAIN_ACCESS_EMAIL` - Domain verified using a domain access email   * `DOMAIN_ACCESS_LETTER` - Customer completed a domain access letter which was used for domain verification   * `DOMAIN_CONTROL_EMAIL` - Domain verified using HTML file or DNS zone file text value   * `DOMAIN_ZONE_CONTROL` - DNS zone file containing a pre-generated text value used for domain verification   * `MANUAL_DOMAIN_ACCESS_EMAIL` - DAE sent to an email address manually entered by a rep   * `PREVIOUS_DOMAIN_ACCESS_EMAIL` - Customers domain access email for a prior certificate request was used for domain verification   * `REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER` - Representative reviewed a customer provided domain access letter and verified domain   * `REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL` - Representative verified domain using a manual domain zone control check   * `REGISTRATION_AUTHORITY_OVERRIDE` - Representative verified domain using alternative methods   * `REGISTRATION_AUTHORITY_WEBSITE_CONTROL` - Representative verified domain using a manual website control check   * `CUSTOMER_OWNED` - Validated customer account information used for domain control verification   * `WEBSITE_CONTROL` - HTML file in root website directory containing pre-generated value used for domain control verification 

        :param type: The type of this DomainVerificationDetail.
        :type type: str
        """
        allowed_values = ["DOMAIN_CONTROL_EMAIL", "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN", "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR", "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER", "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER", "AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER", "DOMAIN_ACCESS_EMAIL", "DOMAIN_ACCESS_LETTER", "DOMAIN_ZONE_CONTROL", "MANUAL_DOMAIN_ACCESS_EMAIL", "PREVIOUS_DOMAIN_ACCESS_EMAIL", "REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER", "REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL", "REGISTRATION_AUTHORITY_OVERRIDE", "REGISTRATION_AUTHORITY_WEBSITE_CONTROL", "CUSTOMER_OWNED", "WEBSITE_CONTROL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def usage(self):
        """Gets the usage of this DomainVerificationDetail.

        Type of domain name used for domain verification

        :return: The usage of this DomainVerificationDetail.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this DomainVerificationDetail.

        Type of domain name used for domain verification

        :param usage: The usage of this DomainVerificationDetail.
        :type usage: str
        """
        allowed_values = ["COMMON_NAME", "SUBJECT_ALTERNATIVE_NAME"]  # noqa: E501
        if usage not in allowed_values:
            raise ValueError(
                "Invalid value for `usage` ({0}), must be one of {1}"
                .format(usage, allowed_values)
            )

        self._usage = usage

    @property
    def certificate_authority_authorization(self):
        """Gets the certificate_authority_authorization of this DomainVerificationDetail.


        :return: The certificate_authority_authorization of this DomainVerificationDetail.
        :rtype: DomainVerificationDetailAllOfCertificateAuthorityAuthorization
        """
        return self._certificate_authority_authorization

    @certificate_authority_authorization.setter
    def certificate_authority_authorization(self, certificate_authority_authorization):
        """Sets the certificate_authority_authorization of this DomainVerificationDetail.


        :param certificate_authority_authorization: The certificate_authority_authorization of this DomainVerificationDetail.
        :type certificate_authority_authorization: DomainVerificationDetailAllOfCertificateAuthorityAuthorization
        """

        self._certificate_authority_authorization = certificate_authority_authorization
