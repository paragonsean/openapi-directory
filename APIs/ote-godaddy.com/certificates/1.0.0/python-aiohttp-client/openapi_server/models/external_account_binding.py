# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalAccountBinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directory_url: str=None, hmac_key: str=None, key_id: str=None):
        """ExternalAccountBinding - a model defined in OpenAPI

        :param directory_url: The directory_url of this ExternalAccountBinding.
        :param hmac_key: The hmac_key of this ExternalAccountBinding.
        :param key_id: The key_id of this ExternalAccountBinding.
        """
        self.openapi_types = {
            'directory_url': str,
            'hmac_key': str,
            'key_id': str
        }

        self.attribute_map = {
            'directory_url': 'directoryUrl',
            'hmac_key': 'hmacKey',
            'key_id': 'keyId'
        }

        self._directory_url = directory_url
        self._hmac_key = hmac_key
        self._key_id = key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalAccountBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalAccountBinding of this ExternalAccountBinding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directory_url(self):
        """Gets the directory_url of this ExternalAccountBinding.

        ACME directory resource URL.

        :return: The directory_url of this ExternalAccountBinding.
        :rtype: str
        """
        return self._directory_url

    @directory_url.setter
    def directory_url(self, directory_url):
        """Sets the directory_url of this ExternalAccountBinding.

        ACME directory resource URL.

        :param directory_url: The directory_url of this ExternalAccountBinding.
        :type directory_url: str
        """
        if directory_url is None:
            raise ValueError("Invalid value for `directory_url`, must not be `None`")

        self._directory_url = directory_url

    @property
    def hmac_key(self):
        """Gets the hmac_key of this ExternalAccountBinding.

        EAB HMAC key for the ACME account

        :return: The hmac_key of this ExternalAccountBinding.
        :rtype: str
        """
        return self._hmac_key

    @hmac_key.setter
    def hmac_key(self, hmac_key):
        """Sets the hmac_key of this ExternalAccountBinding.

        EAB HMAC key for the ACME account

        :param hmac_key: The hmac_key of this ExternalAccountBinding.
        :type hmac_key: str
        """
        if hmac_key is None:
            raise ValueError("Invalid value for `hmac_key`, must not be `None`")

        self._hmac_key = hmac_key

    @property
    def key_id(self):
        """Gets the key_id of this ExternalAccountBinding.

        EAB key identifier for the ACME account.

        :return: The key_id of this ExternalAccountBinding.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this ExternalAccountBinding.

        EAB key identifier for the ACME account.

        :param key_id: The key_id of this ExternalAccountBinding.
        :type key_id: str
        """
        if key_id is None:
            raise ValueError("Invalid value for `key_id`, must not be `None`")

        self._key_id = key_id
