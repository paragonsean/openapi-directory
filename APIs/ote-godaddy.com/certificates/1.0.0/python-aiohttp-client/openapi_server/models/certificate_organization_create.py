# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_address import CertificateAddress
from openapi_server import util


class CertificateOrganizationCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: CertificateAddress=None, assumed_name: str=None, name: str=None, phone: str=None, registration_agent: str=None, registration_number: str=None):
        """CertificateOrganizationCreate - a model defined in OpenAPI

        :param address: The address of this CertificateOrganizationCreate.
        :param assumed_name: The assumed_name of this CertificateOrganizationCreate.
        :param name: The name of this CertificateOrganizationCreate.
        :param phone: The phone of this CertificateOrganizationCreate.
        :param registration_agent: The registration_agent of this CertificateOrganizationCreate.
        :param registration_number: The registration_number of this CertificateOrganizationCreate.
        """
        self.openapi_types = {
            'address': CertificateAddress,
            'assumed_name': str,
            'name': str,
            'phone': str,
            'registration_agent': str,
            'registration_number': str
        }

        self.attribute_map = {
            'address': 'address',
            'assumed_name': 'assumedName',
            'name': 'name',
            'phone': 'phone',
            'registration_agent': 'registrationAgent',
            'registration_number': 'registrationNumber'
        }

        self._address = address
        self._assumed_name = assumed_name
        self._name = name
        self._phone = phone
        self._registration_agent = registration_agent
        self._registration_number = registration_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateOrganizationCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateOrganizationCreate of this CertificateOrganizationCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CertificateOrganizationCreate.


        :return: The address of this CertificateOrganizationCreate.
        :rtype: CertificateAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CertificateOrganizationCreate.


        :param address: The address of this CertificateOrganizationCreate.
        :type address: CertificateAddress
        """

        self._address = address

    @property
    def assumed_name(self):
        """Gets the assumed_name of this CertificateOrganizationCreate.

        Only for EVSSL. The DBA(does business as) name for the organization.

        :return: The assumed_name of this CertificateOrganizationCreate.
        :rtype: str
        """
        return self._assumed_name

    @assumed_name.setter
    def assumed_name(self, assumed_name):
        """Sets the assumed_name of this CertificateOrganizationCreate.

        Only for EVSSL. The DBA(does business as) name for the organization.

        :param assumed_name: The assumed_name of this CertificateOrganizationCreate.
        :type assumed_name: str
        """

        self._assumed_name = assumed_name

    @property
    def name(self):
        """Gets the name of this CertificateOrganizationCreate.

        Name of organization that owns common name

        :return: The name of this CertificateOrganizationCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateOrganizationCreate.

        Name of organization that owns common name

        :param name: The name of this CertificateOrganizationCreate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def phone(self):
        """Gets the phone of this CertificateOrganizationCreate.

        Phone number for organization

        :return: The phone of this CertificateOrganizationCreate.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CertificateOrganizationCreate.

        Phone number for organization

        :param phone: The phone of this CertificateOrganizationCreate.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def registration_agent(self):
        """Gets the registration_agent of this CertificateOrganizationCreate.

        Only for EVSSL.

        :return: The registration_agent of this CertificateOrganizationCreate.
        :rtype: str
        """
        return self._registration_agent

    @registration_agent.setter
    def registration_agent(self, registration_agent):
        """Sets the registration_agent of this CertificateOrganizationCreate.

        Only for EVSSL.

        :param registration_agent: The registration_agent of this CertificateOrganizationCreate.
        :type registration_agent: str
        """

        self._registration_agent = registration_agent

    @property
    def registration_number(self):
        """Gets the registration_number of this CertificateOrganizationCreate.

        Only for EVSSL.

        :return: The registration_number of this CertificateOrganizationCreate.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this CertificateOrganizationCreate.

        Only for EVSSL.

        :param registration_number: The registration_number of this CertificateOrganizationCreate.
        :type registration_number: str
        """

        self._registration_number = registration_number
