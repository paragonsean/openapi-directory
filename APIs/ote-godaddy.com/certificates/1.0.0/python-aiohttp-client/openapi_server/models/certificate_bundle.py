# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pem_certificates import PEMCertificates
from openapi_server import util


class CertificateBundle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pems: PEMCertificates=None, serial_number: str=None):
        """CertificateBundle - a model defined in OpenAPI

        :param pems: The pems of this CertificateBundle.
        :param serial_number: The serial_number of this CertificateBundle.
        """
        self.openapi_types = {
            'pems': PEMCertificates,
            'serial_number': str
        }

        self.attribute_map = {
            'pems': 'pems',
            'serial_number': 'serialNumber'
        }

        self._pems = pems
        self._serial_number = serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateBundle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateBundle of this CertificateBundle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pems(self):
        """Gets the pems of this CertificateBundle.


        :return: The pems of this CertificateBundle.
        :rtype: PEMCertificates
        """
        return self._pems

    @pems.setter
    def pems(self, pems):
        """Sets the pems of this CertificateBundle.


        :param pems: The pems of this CertificateBundle.
        :type pems: PEMCertificates
        """
        if pems is None:
            raise ValueError("Invalid value for `pems`, must not be `None`")

        self._pems = pems

    @property
    def serial_number(self):
        """Gets the serial_number of this CertificateBundle.

        Serial number of certificate requested

        :return: The serial_number of this CertificateBundle.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CertificateBundle.

        Serial number of certificate requested

        :param serial_number: The serial_number of this CertificateBundle.
        :type serial_number: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")

        self._serial_number = serial_number
