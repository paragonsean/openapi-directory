# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_contact import CertificateContact
from openapi_server.models.certificate_organization_create import CertificateOrganizationCreate
from openapi_server import util


class CertificateCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, common_name: str=None, contact: CertificateContact=None, csr: str=None, intel_v_pro: bool=False, organization: CertificateOrganizationCreate=None, period: int=None, product_type: str=None, root_type: str='STARFIELD_SHA_2', slot_size: str=None, subject_alternative_names: list[str]=None):
        """CertificateCreate - a model defined in OpenAPI

        :param callback_url: The callback_url of this CertificateCreate.
        :param common_name: The common_name of this CertificateCreate.
        :param contact: The contact of this CertificateCreate.
        :param csr: The csr of this CertificateCreate.
        :param intel_v_pro: The intel_v_pro of this CertificateCreate.
        :param organization: The organization of this CertificateCreate.
        :param period: The period of this CertificateCreate.
        :param product_type: The product_type of this CertificateCreate.
        :param root_type: The root_type of this CertificateCreate.
        :param slot_size: The slot_size of this CertificateCreate.
        :param subject_alternative_names: The subject_alternative_names of this CertificateCreate.
        """
        self.openapi_types = {
            'callback_url': str,
            'common_name': str,
            'contact': CertificateContact,
            'csr': str,
            'intel_v_pro': bool,
            'organization': CertificateOrganizationCreate,
            'period': int,
            'product_type': str,
            'root_type': str,
            'slot_size': str,
            'subject_alternative_names': list[str]
        }

        self.attribute_map = {
            'callback_url': 'callbackUrl',
            'common_name': 'commonName',
            'contact': 'contact',
            'csr': 'csr',
            'intel_v_pro': 'intelVPro',
            'organization': 'organization',
            'period': 'period',
            'product_type': 'productType',
            'root_type': 'rootType',
            'slot_size': 'slotSize',
            'subject_alternative_names': 'subjectAlternativeNames'
        }

        self._callback_url = callback_url
        self._common_name = common_name
        self._contact = contact
        self._csr = csr
        self._intel_v_pro = intel_v_pro
        self._organization = organization
        self._period = period
        self._product_type = product_type
        self._root_type = root_type
        self._slot_size = slot_size
        self._subject_alternative_names = subject_alternative_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateCreate of this CertificateCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this CertificateCreate.

        Required if client would like to receive stateful actions via callback during certificate lifecyle

        :return: The callback_url of this CertificateCreate.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this CertificateCreate.

        Required if client would like to receive stateful actions via callback during certificate lifecyle

        :param callback_url: The callback_url of this CertificateCreate.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def common_name(self):
        """Gets the common_name of this CertificateCreate.

        Name to be secured in certificate. If provided, CN field in CSR will be ignored.

        :return: The common_name of this CertificateCreate.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this CertificateCreate.

        Name to be secured in certificate. If provided, CN field in CSR will be ignored.

        :param common_name: The common_name of this CertificateCreate.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def contact(self):
        """Gets the contact of this CertificateCreate.


        :return: The contact of this CertificateCreate.
        :rtype: CertificateContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this CertificateCreate.


        :param contact: The contact of this CertificateCreate.
        :type contact: CertificateContact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def csr(self):
        """Gets the csr of this CertificateCreate.

        Certificate Signing Request

        :return: The csr of this CertificateCreate.
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """Sets the csr of this CertificateCreate.

        Certificate Signing Request

        :param csr: The csr of this CertificateCreate.
        :type csr: str
        """
        if csr is None:
            raise ValueError("Invalid value for `csr`, must not be `None`")

        self._csr = csr

    @property
    def intel_v_pro(self):
        """Gets the intel_v_pro of this CertificateCreate.

        Only used for OV

        :return: The intel_v_pro of this CertificateCreate.
        :rtype: bool
        """
        return self._intel_v_pro

    @intel_v_pro.setter
    def intel_v_pro(self, intel_v_pro):
        """Sets the intel_v_pro of this CertificateCreate.

        Only used for OV

        :param intel_v_pro: The intel_v_pro of this CertificateCreate.
        :type intel_v_pro: bool
        """

        self._intel_v_pro = intel_v_pro

    @property
    def organization(self):
        """Gets the organization of this CertificateCreate.


        :return: The organization of this CertificateCreate.
        :rtype: CertificateOrganizationCreate
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CertificateCreate.


        :param organization: The organization of this CertificateCreate.
        :type organization: CertificateOrganizationCreate
        """

        self._organization = organization

    @property
    def period(self):
        """Gets the period of this CertificateCreate.

        Number of years for certificate validity period

        :return: The period of this CertificateCreate.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CertificateCreate.

        Number of years for certificate validity period

        :param period: The period of this CertificateCreate.
        :type period: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def product_type(self):
        """Gets the product_type of this CertificateCreate.

        Type of product requesting a certificate. Only required non-renewal

        :return: The product_type of this CertificateCreate.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this CertificateCreate.

        Type of product requesting a certificate. Only required non-renewal

        :param product_type: The product_type of this CertificateCreate.
        :type product_type: str
        """
        allowed_values = ["DV_SSL", "DV_WILDCARD_SSL", "EV_SSL", "OV_CS", "OV_DS", "OV_SSL", "OV_WILDCARD_SSL", "UCC_DV_SSL", "UCC_EV_SSL", "UCC_OV_SSL"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def root_type(self):
        """Gets the root_type of this CertificateCreate.

        Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date

        :return: The root_type of this CertificateCreate.
        :rtype: str
        """
        return self._root_type

    @root_type.setter
    def root_type(self, root_type):
        """Sets the root_type of this CertificateCreate.

        Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date

        :param root_type: The root_type of this CertificateCreate.
        :type root_type: str
        """
        allowed_values = ["GODADDY_SHA_1", "GODADDY_SHA_2", "STARFIELD_SHA_1", "STARFIELD_SHA_2"]  # noqa: E501
        if root_type not in allowed_values:
            raise ValueError(
                "Invalid value for `root_type` ({0}), must be one of {1}"
                .format(root_type, allowed_values)
            )

        self._root_type = root_type

    @property
    def slot_size(self):
        """Gets the slot_size of this CertificateCreate.

        Number of subject alternative names(SAN) to be included in certificate 

        :return: The slot_size of this CertificateCreate.
        :rtype: str
        """
        return self._slot_size

    @slot_size.setter
    def slot_size(self, slot_size):
        """Sets the slot_size of this CertificateCreate.

        Number of subject alternative names(SAN) to be included in certificate 

        :param slot_size: The slot_size of this CertificateCreate.
        :type slot_size: str
        """
        allowed_values = ["FIVE", "TEN", "FIFTEEN", "TWENTY", "THIRTY", "FOURTY", "FIFTY", "ONE_HUNDRED"]  # noqa: E501
        if slot_size not in allowed_values:
            raise ValueError(
                "Invalid value for `slot_size` ({0}), must be one of {1}"
                .format(slot_size, allowed_values)
            )

        self._slot_size = slot_size

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this CertificateCreate.

        Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.

        :return: The subject_alternative_names of this CertificateCreate.
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this CertificateCreate.

        Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.

        :param subject_alternative_names: The subject_alternative_names of this CertificateCreate.
        :type subject_alternative_names: list[str]
        """

        self._subject_alternative_names = subject_alternative_names
