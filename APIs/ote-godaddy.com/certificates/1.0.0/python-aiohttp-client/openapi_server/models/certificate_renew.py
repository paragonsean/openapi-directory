# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateRenew(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_url: str=None, common_name: str='Existing common name', csr: str='Existing CSR', period: int=0, root_type: str='GODADDY_SHA_1', subject_alternative_names: list[str]=None):
        """CertificateRenew - a model defined in OpenAPI

        :param callback_url: The callback_url of this CertificateRenew.
        :param common_name: The common_name of this CertificateRenew.
        :param csr: The csr of this CertificateRenew.
        :param period: The period of this CertificateRenew.
        :param root_type: The root_type of this CertificateRenew.
        :param subject_alternative_names: The subject_alternative_names of this CertificateRenew.
        """
        self.openapi_types = {
            'callback_url': str,
            'common_name': str,
            'csr': str,
            'period': int,
            'root_type': str,
            'subject_alternative_names': list[str]
        }

        self.attribute_map = {
            'callback_url': 'callbackUrl',
            'common_name': 'commonName',
            'csr': 'csr',
            'period': 'period',
            'root_type': 'rootType',
            'subject_alternative_names': 'subjectAlternativeNames'
        }

        self._callback_url = callback_url
        self._common_name = common_name
        self._csr = csr
        self._period = period
        self._root_type = root_type
        self._subject_alternative_names = subject_alternative_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateRenew':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateRenew of this CertificateRenew.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_url(self):
        """Gets the callback_url of this CertificateRenew.

        Required if client would like to receive stateful actions via callback during certificate lifecyle

        :return: The callback_url of this CertificateRenew.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this CertificateRenew.

        Required if client would like to receive stateful actions via callback during certificate lifecyle

        :param callback_url: The callback_url of this CertificateRenew.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def common_name(self):
        """Gets the common_name of this CertificateRenew.

        The common name of certificate to be secured

        :return: The common_name of this CertificateRenew.
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this CertificateRenew.

        The common name of certificate to be secured

        :param common_name: The common_name of this CertificateRenew.
        :type common_name: str
        """

        self._common_name = common_name

    @property
    def csr(self):
        """Gets the csr of this CertificateRenew.

        Certificate Signing Request.

        :return: The csr of this CertificateRenew.
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """Sets the csr of this CertificateRenew.

        Certificate Signing Request.

        :param csr: The csr of this CertificateRenew.
        :type csr: str
        """

        self._csr = csr

    @property
    def period(self):
        """Gets the period of this CertificateRenew.

        Number of years for certificate validity period, if different from previous certificate

        :return: The period of this CertificateRenew.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CertificateRenew.

        Number of years for certificate validity period, if different from previous certificate

        :param period: The period of this CertificateRenew.
        :type period: int
        """

        self._period = period

    @property
    def root_type(self):
        """Gets the root_type of this CertificateRenew.

        Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date

        :return: The root_type of this CertificateRenew.
        :rtype: str
        """
        return self._root_type

    @root_type.setter
    def root_type(self, root_type):
        """Sets the root_type of this CertificateRenew.

        Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date

        :param root_type: The root_type of this CertificateRenew.
        :type root_type: str
        """
        allowed_values = ["GODADDY_SHA_1", "GODADDY_SHA_2", "STARFIELD_SHA_1", "STARFIELD_SHA_2"]  # noqa: E501
        if root_type not in allowed_values:
            raise ValueError(
                "Invalid value for `root_type` ({0}), must be one of {1}"
                .format(root_type, allowed_values)
            )

        self._root_type = root_type

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this CertificateRenew.

        Only used for UCC products. An array of subject alternative names to include in certificate. Not including a subject alternative name that was in the previous certificate will remove it from the renewed certificate.

        :return: The subject_alternative_names of this CertificateRenew.
        :rtype: list[str]
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this CertificateRenew.

        Only used for UCC products. An array of subject alternative names to include in certificate. Not including a subject alternative name that was in the previous certificate will remove it from the renewed certificate.

        :param subject_alternative_names: The subject_alternative_names of this CertificateRenew.
        :type subject_alternative_names: list[str]
        """

        self._subject_alternative_names = subject_alternative_names
