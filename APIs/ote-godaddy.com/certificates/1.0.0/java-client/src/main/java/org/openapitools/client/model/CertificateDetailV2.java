/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.CertificateContact;
import org.openapitools.client.model.CertificateOrganization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateDetailV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:19.304783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateDetailV2 {
  public static final String SERIALIZED_NAME_CERTIFICATE_ID = "certificateId";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ID)
  private String certificateId;

  public static final String SERIALIZED_NAME_COMMON_NAME = "commonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completedAt";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private String completedAt;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private CertificateContact contact;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CSR = "csr";
  @SerializedName(SERIALIZED_NAME_CSR)
  private String csr;

  public static final String SERIALIZED_NAME_DENIED_REASON = "deniedReason";
  @SerializedName(SERIALIZED_NAME_DENIED_REASON)
  private String deniedReason;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private CertificateOrganization organization;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_RENEWAL_AVAILABLE = "renewalAvailable";
  @SerializedName(SERIALIZED_NAME_RENEWAL_AVAILABLE)
  private Boolean renewalAvailable;

  public static final String SERIALIZED_NAME_REVOKED_AT = "revokedAt";
  @SerializedName(SERIALIZED_NAME_REVOKED_AT)
  private String revokedAt;

  /**
   * Root type:    * &#x60;GODADDY_SHA_1&#x60; - GoDaddy (Secure Hash Algorithm 1) SHA-1 root type   * &#x60;GODADDY_SHA_2&#x60; - GoDaddy (Secure Hash Algorithm 2) SHA-2 root type   * &#x60;STARFIELD_SHA_1&#x60; - Starfield SHA-1 root type   * &#x60;STARFIELD_SHA_2&#x60; - Starfield SHA-2 root type 
   */
  @JsonAdapter(RootTypeEnum.Adapter.class)
  public enum RootTypeEnum {
    GODADDY_SHA_1("GODADDY_SHA_1"),
    
    GODADDY_SHA_2("GODADDY_SHA_2"),
    
    STARFIELD_SHA_1("STARFIELD_SHA_1"),
    
    STARFIELD_SHA_2("STARFIELD_SHA_2");

    private String value;

    RootTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RootTypeEnum fromValue(String value) {
      for (RootTypeEnum b : RootTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RootTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RootTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RootTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RootTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RootTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROOT_TYPE = "rootType";
  @SerializedName(SERIALIZED_NAME_ROOT_TYPE)
  private RootTypeEnum rootType;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER_HEX = "serialNumberHex";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER_HEX)
  private String serialNumberHex;

  /**
   * Number of subject alternative names (SAN) to be included in certificate (if UCC):    * &#x60;FIVE&#x60; - Five slot UCC request   * &#x60;TEN&#x60; - Ten slot UCC request   * &#x60;FIFTEEN&#x60; - Fifteen slot UCC request   * &#x60;TWENTY&#x60; - Twenty slot UCC request   * &#x60;THIRTY&#x60; - Thirty slot UCC request   * &#x60;FOURTY&#x60; - Fourty slot UCC request   * &#x60;FIFTY&#x60; - Fifty slot UCC request   * &#x60;ONE_HUNDRED&#x60; - One hundred slot UCC request 
   */
  @JsonAdapter(SlotSizeEnum.Adapter.class)
  public enum SlotSizeEnum {
    FIVE("FIVE"),
    
    TEN("TEN"),
    
    FIFTEEN("FIFTEEN"),
    
    TWENTY("TWENTY"),
    
    THIRTY("THIRTY"),
    
    FOURTY("FOURTY"),
    
    FIFTY("FIFTY"),
    
    ONE_HUNDRED("ONE_HUNDRED");

    private String value;

    SlotSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SlotSizeEnum fromValue(String value) {
      for (SlotSizeEnum b : SlotSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SlotSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SlotSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SlotSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SlotSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SlotSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SLOT_SIZE = "slotSize";
  @SerializedName(SERIALIZED_NAME_SLOT_SIZE)
  private SlotSizeEnum slotSize;

  /**
   * Certificate status (if issued or revoked):    * &#x60;CANCELED&#x60; - Certificate request was canceled by customer   * &#x60;DENIED&#x60; - Certificate request was denied by customer\\n  * &#x60;EXPIRED&#x60; - Issued certificate has exceeded the valid end date   * &#x60;ISSUED&#x60; - Certificate has been issued and is within validity period   * &#x60;PENDING_ISSUANCE&#x60; - Certificate request has completed domain verification and is in the process of being issued   * &#x60;PENDING_REKEY&#x60; - Previously issued certificate was rekeyed by customer and is in the process of being reissued   * &#x60;PENDING_REVOCATION&#x60; - Previously issued certificate is in the process of being revoked   * &#x60;REVOKED&#x60; - Issued certificate has been revoked\\n  * &#x60;UNUSED&#x60; - Certificate in an error state 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING_ISSUANCE("PENDING_ISSUANCE"),
    
    ISSUED("ISSUED"),
    
    REVOKED("REVOKED"),
    
    CANCELED("CANCELED"),
    
    DENIED("DENIED"),
    
    PENDING_REVOCATION("PENDING_REVOCATION"),
    
    PENDING_REKEY("PENDING_REKEY"),
    
    UNUSED("UNUSED"),
    
    EXPIRED("EXPIRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES = "subjectAlternativeNames";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES)
  private Set<String> subjectAlternativeNames = new LinkedHashSet<>();

  /**
   * Certificate type:    * &#x60;DV_SSL&#x60; - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only   * &#x60;DV_WILDCARD_SSL&#x60; - SSL certificate containing subdomains which is validated using domain name only   * &#x60;EV_SSL&#x60; - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors   * &#x60;OV_CODE_SIGNING&#x60; - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information   * &#x60;OV_DRIVER_SIGNING&#x60; - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information   * &#x60;OV_SSL&#x60; - SSL certificate validated using organization information and domain name   * &#x60;OV_WILDCARD_SSL&#x60; - SSL certificate containing subdomains which is validated using organization information and domain name   * &#x60;UCC_DV_SSL&#x60; - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only   * &#x60;UCC_EV_SSL&#x60; - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors   * &#x60;UCC_OV_SSL&#x60; - Multi domain SSL certificate validated using organization information and domain name 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DV_SSL("DV_SSL"),
    
    DV_WILDCARD_SSL("DV_WILDCARD_SSL"),
    
    EV_SSL("EV_SSL"),
    
    OV_CODE_SIGNING("OV_CODE_SIGNING"),
    
    OV_DRIVER_SIGNING("OV_DRIVER_SIGNING"),
    
    OV_SSL("OV_SSL"),
    
    OV_WILDCARD_SSL("OV_WILDCARD_SSL"),
    
    UCC_DV_SSL("UCC_DV_SSL"),
    
    UCC_EV_SSL("UCC_EV_SSL"),
    
    UCC_OV_SSL("UCC_OV_SSL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALID_END_AT = "validEndAt";
  @SerializedName(SERIALIZED_NAME_VALID_END_AT)
  private String validEndAt;

  public static final String SERIALIZED_NAME_VALID_START_AT = "validStartAt";
  @SerializedName(SERIALIZED_NAME_VALID_START_AT)
  private String validStartAt;

  public CertificateDetailV2() {
  }

  public CertificateDetailV2 certificateId(String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

  /**
   * The unique identifier of the certificate request. Only present if no errors returned
   * @return certificateId
   */
  @javax.annotation.Nonnull
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(String certificateId) {
    this.certificateId = certificateId;
  }


  public CertificateDetailV2 commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Common name of certificate
   * @return commonName
   */
  @javax.annotation.Nonnull
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public CertificateDetailV2 completedAt(String completedAt) {
    this.completedAt = completedAt;
    return this;
  }

  /**
   * The date the certificate request completed processing.
   * @return completedAt
   */
  @javax.annotation.Nullable
  public String getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(String completedAt) {
    this.completedAt = completedAt;
  }


  public CertificateDetailV2 contact(CertificateContact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nonnull
  public CertificateContact getContact() {
    return contact;
  }

  public void setContact(CertificateContact contact) {
    this.contact = contact;
  }


  public CertificateDetailV2 createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date the certificate was ordered.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public CertificateDetailV2 csr(String csr) {
    this.csr = csr;
    return this;
  }

  /**
   * Certificate signing request (if present) in PEM format
   * @return csr
   */
  @javax.annotation.Nullable
  public String getCsr() {
    return csr;
  }

  public void setCsr(String csr) {
    this.csr = csr;
  }


  public CertificateDetailV2 deniedReason(String deniedReason) {
    this.deniedReason = deniedReason;
    return this;
  }

  /**
   * Only present if certificate order has been denied
   * @return deniedReason
   */
  @javax.annotation.Nullable
  public String getDeniedReason() {
    return deniedReason;
  }

  public void setDeniedReason(String deniedReason) {
    this.deniedReason = deniedReason;
  }


  public CertificateDetailV2 organization(CertificateOrganization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public CertificateOrganization getOrganization() {
    return organization;
  }

  public void setOrganization(CertificateOrganization organization) {
    this.organization = organization;
  }


  public CertificateDetailV2 period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Validity period of order. Specified in years
   * @return period
   */
  @javax.annotation.Nonnull
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public CertificateDetailV2 progress(Integer progress) {
    this.progress = progress;
    return this;
  }

  /**
   * Percentage of completion for certificate vetting
   * @return progress
   */
  @javax.annotation.Nullable
  public Integer getProgress() {
    return progress;
  }

  public void setProgress(Integer progress) {
    this.progress = progress;
  }


  public CertificateDetailV2 renewalAvailable(Boolean renewalAvailable) {
    this.renewalAvailable = renewalAvailable;
    return this;
  }

  /**
   * Only returned when a renewal is available.
   * @return renewalAvailable
   */
  @javax.annotation.Nullable
  public Boolean getRenewalAvailable() {
    return renewalAvailable;
  }

  public void setRenewalAvailable(Boolean renewalAvailable) {
    this.renewalAvailable = renewalAvailable;
  }


  public CertificateDetailV2 revokedAt(String revokedAt) {
    this.revokedAt = revokedAt;
    return this;
  }

  /**
   * The revocation date of certificate (if revoked).
   * @return revokedAt
   */
  @javax.annotation.Nullable
  public String getRevokedAt() {
    return revokedAt;
  }

  public void setRevokedAt(String revokedAt) {
    this.revokedAt = revokedAt;
  }


  public CertificateDetailV2 rootType(RootTypeEnum rootType) {
    this.rootType = rootType;
    return this;
  }

  /**
   * Root type:    * &#x60;GODADDY_SHA_1&#x60; - GoDaddy (Secure Hash Algorithm 1) SHA-1 root type   * &#x60;GODADDY_SHA_2&#x60; - GoDaddy (Secure Hash Algorithm 2) SHA-2 root type   * &#x60;STARFIELD_SHA_1&#x60; - Starfield SHA-1 root type   * &#x60;STARFIELD_SHA_2&#x60; - Starfield SHA-2 root type 
   * @return rootType
   */
  @javax.annotation.Nullable
  public RootTypeEnum getRootType() {
    return rootType;
  }

  public void setRootType(RootTypeEnum rootType) {
    this.rootType = rootType;
  }


  public CertificateDetailV2 serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Serial number of certificate (if issued or revoked)
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public CertificateDetailV2 serialNumberHex(String serialNumberHex) {
    this.serialNumberHex = serialNumberHex;
    return this;
  }

  /**
   * Hexadecmial format for Serial number of certificate(if issued or revoked)
   * @return serialNumberHex
   */
  @javax.annotation.Nullable
  public String getSerialNumberHex() {
    return serialNumberHex;
  }

  public void setSerialNumberHex(String serialNumberHex) {
    this.serialNumberHex = serialNumberHex;
  }


  public CertificateDetailV2 slotSize(SlotSizeEnum slotSize) {
    this.slotSize = slotSize;
    return this;
  }

  /**
   * Number of subject alternative names (SAN) to be included in certificate (if UCC):    * &#x60;FIVE&#x60; - Five slot UCC request   * &#x60;TEN&#x60; - Ten slot UCC request   * &#x60;FIFTEEN&#x60; - Fifteen slot UCC request   * &#x60;TWENTY&#x60; - Twenty slot UCC request   * &#x60;THIRTY&#x60; - Thirty slot UCC request   * &#x60;FOURTY&#x60; - Fourty slot UCC request   * &#x60;FIFTY&#x60; - Fifty slot UCC request   * &#x60;ONE_HUNDRED&#x60; - One hundred slot UCC request 
   * @return slotSize
   */
  @javax.annotation.Nullable
  public SlotSizeEnum getSlotSize() {
    return slotSize;
  }

  public void setSlotSize(SlotSizeEnum slotSize) {
    this.slotSize = slotSize;
  }


  public CertificateDetailV2 status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Certificate status (if issued or revoked):    * &#x60;CANCELED&#x60; - Certificate request was canceled by customer   * &#x60;DENIED&#x60; - Certificate request was denied by customer\\n  * &#x60;EXPIRED&#x60; - Issued certificate has exceeded the valid end date   * &#x60;ISSUED&#x60; - Certificate has been issued and is within validity period   * &#x60;PENDING_ISSUANCE&#x60; - Certificate request has completed domain verification and is in the process of being issued   * &#x60;PENDING_REKEY&#x60; - Previously issued certificate was rekeyed by customer and is in the process of being reissued   * &#x60;PENDING_REVOCATION&#x60; - Previously issued certificate is in the process of being revoked   * &#x60;REVOKED&#x60; - Issued certificate has been revoked\\n  * &#x60;UNUSED&#x60; - Certificate in an error state 
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CertificateDetailV2 subjectAlternativeNames(Set<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  public CertificateDetailV2 addSubjectAlternativeNamesItem(String subjectAlternativeNamesItem) {
    if (this.subjectAlternativeNames == null) {
      this.subjectAlternativeNames = new LinkedHashSet<>();
    }
    this.subjectAlternativeNames.add(subjectAlternativeNamesItem);
    return this;
  }

  /**
   * Subject Alternative names. Collection of subjectAlternativeNames to be included in certificate.
   * @return subjectAlternativeNames
   */
  @javax.annotation.Nullable
  public Set<String> getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }

  public void setSubjectAlternativeNames(Set<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }


  public CertificateDetailV2 type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Certificate type:    * &#x60;DV_SSL&#x60; - (Domain Validated Secure Sockets Layer) SSL certificate validated using domain name only   * &#x60;DV_WILDCARD_SSL&#x60; - SSL certificate containing subdomains which is validated using domain name only   * &#x60;EV_SSL&#x60; - (Extended Validation) SSL certificate validated using organization information, domain name, business legal status, and other factors   * &#x60;OV_CODE_SIGNING&#x60; - Code signing SSL certificate used by software developers to digitally sign apps. Validated using organization information   * &#x60;OV_DRIVER_SIGNING&#x60; - Driver signing SSL certificate request used by software developers to digitally sign secure code for Windows hardware drivers. Validated using organization information   * &#x60;OV_SSL&#x60; - SSL certificate validated using organization information and domain name   * &#x60;OV_WILDCARD_SSL&#x60; - SSL certificate containing subdomains which is validated using organization information and domain name   * &#x60;UCC_DV_SSL&#x60; - (Unified Communication Certificate) Multi domain SSL certificate validated using domain name only   * &#x60;UCC_EV_SSL&#x60; - Multi domain SSL certificate validated using organization information, domain name, business legal status, and other factors   * &#x60;UCC_OV_SSL&#x60; - Multi domain SSL certificate validated using organization information and domain name 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CertificateDetailV2 validEndAt(String validEndAt) {
    this.validEndAt = validEndAt;
    return this;
  }

  /**
   * The end date of the certificate&#39;s validity (if issued or revoked).
   * @return validEndAt
   */
  @javax.annotation.Nullable
  public String getValidEndAt() {
    return validEndAt;
  }

  public void setValidEndAt(String validEndAt) {
    this.validEndAt = validEndAt;
  }


  public CertificateDetailV2 validStartAt(String validStartAt) {
    this.validStartAt = validStartAt;
    return this;
  }

  /**
   * The start date of the certificate&#39;s validity (if issued or revoked).
   * @return validStartAt
   */
  @javax.annotation.Nullable
  public String getValidStartAt() {
    return validStartAt;
  }

  public void setValidStartAt(String validStartAt) {
    this.validStartAt = validStartAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateDetailV2 certificateDetailV2 = (CertificateDetailV2) o;
    return Objects.equals(this.certificateId, certificateDetailV2.certificateId) &&
        Objects.equals(this.commonName, certificateDetailV2.commonName) &&
        Objects.equals(this.completedAt, certificateDetailV2.completedAt) &&
        Objects.equals(this.contact, certificateDetailV2.contact) &&
        Objects.equals(this.createdAt, certificateDetailV2.createdAt) &&
        Objects.equals(this.csr, certificateDetailV2.csr) &&
        Objects.equals(this.deniedReason, certificateDetailV2.deniedReason) &&
        Objects.equals(this.organization, certificateDetailV2.organization) &&
        Objects.equals(this.period, certificateDetailV2.period) &&
        Objects.equals(this.progress, certificateDetailV2.progress) &&
        Objects.equals(this.renewalAvailable, certificateDetailV2.renewalAvailable) &&
        Objects.equals(this.revokedAt, certificateDetailV2.revokedAt) &&
        Objects.equals(this.rootType, certificateDetailV2.rootType) &&
        Objects.equals(this.serialNumber, certificateDetailV2.serialNumber) &&
        Objects.equals(this.serialNumberHex, certificateDetailV2.serialNumberHex) &&
        Objects.equals(this.slotSize, certificateDetailV2.slotSize) &&
        Objects.equals(this.status, certificateDetailV2.status) &&
        Objects.equals(this.subjectAlternativeNames, certificateDetailV2.subjectAlternativeNames) &&
        Objects.equals(this.type, certificateDetailV2.type) &&
        Objects.equals(this.validEndAt, certificateDetailV2.validEndAt) &&
        Objects.equals(this.validStartAt, certificateDetailV2.validStartAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateId, commonName, completedAt, contact, createdAt, csr, deniedReason, organization, period, progress, renewalAvailable, revokedAt, rootType, serialNumber, serialNumberHex, slotSize, status, subjectAlternativeNames, type, validEndAt, validStartAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateDetailV2 {\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    deniedReason: ").append(toIndentedString(deniedReason)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    renewalAvailable: ").append(toIndentedString(renewalAvailable)).append("\n");
    sb.append("    revokedAt: ").append(toIndentedString(revokedAt)).append("\n");
    sb.append("    rootType: ").append(toIndentedString(rootType)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    serialNumberHex: ").append(toIndentedString(serialNumberHex)).append("\n");
    sb.append("    slotSize: ").append(toIndentedString(slotSize)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validEndAt: ").append(toIndentedString(validEndAt)).append("\n");
    sb.append("    validStartAt: ").append(toIndentedString(validStartAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateId");
    openapiFields.add("commonName");
    openapiFields.add("completedAt");
    openapiFields.add("contact");
    openapiFields.add("createdAt");
    openapiFields.add("csr");
    openapiFields.add("deniedReason");
    openapiFields.add("organization");
    openapiFields.add("period");
    openapiFields.add("progress");
    openapiFields.add("renewalAvailable");
    openapiFields.add("revokedAt");
    openapiFields.add("rootType");
    openapiFields.add("serialNumber");
    openapiFields.add("serialNumberHex");
    openapiFields.add("slotSize");
    openapiFields.add("status");
    openapiFields.add("subjectAlternativeNames");
    openapiFields.add("type");
    openapiFields.add("validEndAt");
    openapiFields.add("validStartAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("certificateId");
    openapiRequiredFields.add("commonName");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("period");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateDetailV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateDetailV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateDetailV2 is not found in the empty JSON string", CertificateDetailV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateDetailV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateDetailV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateDetailV2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("certificateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateId").toString()));
      }
      if (!jsonObj.get("commonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonName").toString()));
      }
      if ((jsonObj.get("completedAt") != null && !jsonObj.get("completedAt").isJsonNull()) && !jsonObj.get("completedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedAt").toString()));
      }
      // validate the required field `contact`
      CertificateContact.validateJsonElement(jsonObj.get("contact"));
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("csr") != null && !jsonObj.get("csr").isJsonNull()) && !jsonObj.get("csr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csr").toString()));
      }
      if ((jsonObj.get("deniedReason") != null && !jsonObj.get("deniedReason").isJsonNull()) && !jsonObj.get("deniedReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deniedReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deniedReason").toString()));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        CertificateOrganization.validateJsonElement(jsonObj.get("organization"));
      }
      if ((jsonObj.get("revokedAt") != null && !jsonObj.get("revokedAt").isJsonNull()) && !jsonObj.get("revokedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revokedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revokedAt").toString()));
      }
      if ((jsonObj.get("rootType") != null && !jsonObj.get("rootType").isJsonNull()) && !jsonObj.get("rootType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootType").toString()));
      }
      // validate the optional field `rootType`
      if (jsonObj.get("rootType") != null && !jsonObj.get("rootType").isJsonNull()) {
        RootTypeEnum.validateJsonElement(jsonObj.get("rootType"));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("serialNumberHex") != null && !jsonObj.get("serialNumberHex").isJsonNull()) && !jsonObj.get("serialNumberHex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumberHex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumberHex").toString()));
      }
      if ((jsonObj.get("slotSize") != null && !jsonObj.get("slotSize").isJsonNull()) && !jsonObj.get("slotSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slotSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slotSize").toString()));
      }
      // validate the optional field `slotSize`
      if (jsonObj.get("slotSize") != null && !jsonObj.get("slotSize").isJsonNull()) {
        SlotSizeEnum.validateJsonElement(jsonObj.get("slotSize"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjectAlternativeNames") != null && !jsonObj.get("subjectAlternativeNames").isJsonNull() && !jsonObj.get("subjectAlternativeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectAlternativeNames` to be an array in the JSON string but got `%s`", jsonObj.get("subjectAlternativeNames").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("validEndAt") != null && !jsonObj.get("validEndAt").isJsonNull()) && !jsonObj.get("validEndAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validEndAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validEndAt").toString()));
      }
      if ((jsonObj.get("validStartAt") != null && !jsonObj.get("validStartAt").isJsonNull()) && !jsonObj.get("validStartAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validStartAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validStartAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateDetailV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateDetailV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateDetailV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateDetailV2.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateDetailV2>() {
           @Override
           public void write(JsonWriter out, CertificateDetailV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateDetailV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateDetailV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateDetailV2
   * @throws IOException if the JSON string is invalid with respect to CertificateDetailV2
   */
  public static CertificateDetailV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateDetailV2.class);
  }

  /**
   * Convert an instance of CertificateDetailV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

