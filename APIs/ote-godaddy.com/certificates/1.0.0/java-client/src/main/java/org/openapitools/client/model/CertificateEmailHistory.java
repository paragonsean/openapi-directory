/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateEmailHistory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:19.304783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateEmailHistory {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_DATE_ENTERED = "dateEntered";
  @SerializedName(SERIALIZED_NAME_DATE_ENTERED)
  private String dateEntered;

  public static final String SERIALIZED_NAME_FROM_TYPE = "fromType";
  @SerializedName(SERIALIZED_NAME_FROM_TYPE)
  private String fromType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private String recipients;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "templateType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private String templateType;

  public CertificateEmailHistory() {
  }

  public CertificateEmailHistory accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Shopper Id requested certificate
   * @return accountId
   */
  @javax.annotation.Nonnull
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public CertificateEmailHistory body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Email message
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public CertificateEmailHistory dateEntered(String dateEntered) {
    this.dateEntered = dateEntered;
    return this;
  }

  /**
   * Date email sent
   * @return dateEntered
   */
  @javax.annotation.Nonnull
  public String getDateEntered() {
    return dateEntered;
  }

  public void setDateEntered(String dateEntered) {
    this.dateEntered = dateEntered;
  }


  public CertificateEmailHistory fromType(String fromType) {
    this.fromType = fromType;
    return this;
  }

  /**
   * Email from address
   * @return fromType
   */
  @javax.annotation.Nonnull
  public String getFromType() {
    return fromType;
  }

  public void setFromType(String fromType) {
    this.fromType = fromType;
  }


  public CertificateEmailHistory id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Email Id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public CertificateEmailHistory recipients(String recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Email address email was sent
   * @return recipients
   */
  @javax.annotation.Nonnull
  public String getRecipients() {
    return recipients;
  }

  public void setRecipients(String recipients) {
    this.recipients = recipients;
  }


  public CertificateEmailHistory subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Email subject
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CertificateEmailHistory templateType(String templateType) {
    this.templateType = templateType;
    return this;
  }

  /**
   * Email template type name
   * @return templateType
   */
  @javax.annotation.Nonnull
  public String getTemplateType() {
    return templateType;
  }

  public void setTemplateType(String templateType) {
    this.templateType = templateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateEmailHistory certificateEmailHistory = (CertificateEmailHistory) o;
    return Objects.equals(this.accountId, certificateEmailHistory.accountId) &&
        Objects.equals(this.body, certificateEmailHistory.body) &&
        Objects.equals(this.dateEntered, certificateEmailHistory.dateEntered) &&
        Objects.equals(this.fromType, certificateEmailHistory.fromType) &&
        Objects.equals(this.id, certificateEmailHistory.id) &&
        Objects.equals(this.recipients, certificateEmailHistory.recipients) &&
        Objects.equals(this.subject, certificateEmailHistory.subject) &&
        Objects.equals(this.templateType, certificateEmailHistory.templateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, body, dateEntered, fromType, id, recipients, subject, templateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateEmailHistory {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    dateEntered: ").append(toIndentedString(dateEntered)).append("\n");
    sb.append("    fromType: ").append(toIndentedString(fromType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("body");
    openapiFields.add("dateEntered");
    openapiFields.add("fromType");
    openapiFields.add("id");
    openapiFields.add("recipients");
    openapiFields.add("subject");
    openapiFields.add("templateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("dateEntered");
    openapiRequiredFields.add("fromType");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("templateType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateEmailHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateEmailHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateEmailHistory is not found in the empty JSON string", CertificateEmailHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateEmailHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateEmailHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateEmailHistory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("dateEntered").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateEntered` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateEntered").toString()));
      }
      if (!jsonObj.get("fromType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromType").toString()));
      }
      if (!jsonObj.get("recipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("templateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateEmailHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateEmailHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateEmailHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateEmailHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateEmailHistory>() {
           @Override
           public void write(JsonWriter out, CertificateEmailHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateEmailHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateEmailHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateEmailHistory
   * @throws IOException if the JSON string is invalid with respect to CertificateEmailHistory
   */
  public static CertificateEmailHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateEmailHistory.class);
  }

  /**
   * Convert an instance of CertificateEmailHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

