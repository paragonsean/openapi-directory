/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateRenew
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:19.304783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateRenew {
  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_COMMON_NAME = "commonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName = "Existing common name";

  public static final String SERIALIZED_NAME_CSR = "csr";
  @SerializedName(SERIALIZED_NAME_CSR)
  private String csr = "Existing CSR";

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period = 0;

  /**
   * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
   */
  @JsonAdapter(RootTypeEnum.Adapter.class)
  public enum RootTypeEnum {
    GODADDY_SHA_1("GODADDY_SHA_1"),
    
    GODADDY_SHA_2("GODADDY_SHA_2"),
    
    STARFIELD_SHA_1("STARFIELD_SHA_1"),
    
    STARFIELD_SHA_2("STARFIELD_SHA_2");

    private String value;

    RootTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RootTypeEnum fromValue(String value) {
      for (RootTypeEnum b : RootTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RootTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RootTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RootTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RootTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RootTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROOT_TYPE = "rootType";
  @SerializedName(SERIALIZED_NAME_ROOT_TYPE)
  private RootTypeEnum rootType = RootTypeEnum.GODADDY_SHA_1;

  public static final String SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES = "subjectAlternativeNames";
  @SerializedName(SERIALIZED_NAME_SUBJECT_ALTERNATIVE_NAMES)
  private Set<String> subjectAlternativeNames = new LinkedHashSet<>();

  public CertificateRenew() {
  }

  public CertificateRenew callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Required if client would like to receive stateful actions via callback during certificate lifecyle
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public CertificateRenew commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * The common name of certificate to be secured
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public CertificateRenew csr(String csr) {
    this.csr = csr;
    return this;
  }

  /**
   * Certificate Signing Request.
   * @return csr
   */
  @javax.annotation.Nullable
  public String getCsr() {
    return csr;
  }

  public void setCsr(String csr) {
    this.csr = csr;
  }


  public CertificateRenew period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Number of years for certificate validity period, if different from previous certificate
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public CertificateRenew rootType(RootTypeEnum rootType) {
    this.rootType = rootType;
    return this;
  }

  /**
   * Root Type. Depending on certificate expiration date, SHA_1 not be allowed. Will default to SHA_2 if expiration date exceeds sha1 allowed date
   * @return rootType
   */
  @javax.annotation.Nullable
  public RootTypeEnum getRootType() {
    return rootType;
  }

  public void setRootType(RootTypeEnum rootType) {
    this.rootType = rootType;
  }


  public CertificateRenew subjectAlternativeNames(Set<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
    return this;
  }

  public CertificateRenew addSubjectAlternativeNamesItem(String subjectAlternativeNamesItem) {
    if (this.subjectAlternativeNames == null) {
      this.subjectAlternativeNames = new LinkedHashSet<>();
    }
    this.subjectAlternativeNames.add(subjectAlternativeNamesItem);
    return this;
  }

  /**
   * Only used for UCC products. An array of subject alternative names to include in certificate. Not including a subject alternative name that was in the previous certificate will remove it from the renewed certificate.
   * @return subjectAlternativeNames
   */
  @javax.annotation.Nullable
  public Set<String> getSubjectAlternativeNames() {
    return subjectAlternativeNames;
  }

  public void setSubjectAlternativeNames(Set<String> subjectAlternativeNames) {
    this.subjectAlternativeNames = subjectAlternativeNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateRenew certificateRenew = (CertificateRenew) o;
    return Objects.equals(this.callbackUrl, certificateRenew.callbackUrl) &&
        Objects.equals(this.commonName, certificateRenew.commonName) &&
        Objects.equals(this.csr, certificateRenew.csr) &&
        Objects.equals(this.period, certificateRenew.period) &&
        Objects.equals(this.rootType, certificateRenew.rootType) &&
        Objects.equals(this.subjectAlternativeNames, certificateRenew.subjectAlternativeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackUrl, commonName, csr, period, rootType, subjectAlternativeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateRenew {\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    rootType: ").append(toIndentedString(rootType)).append("\n");
    sb.append("    subjectAlternativeNames: ").append(toIndentedString(subjectAlternativeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callbackUrl");
    openapiFields.add("commonName");
    openapiFields.add("csr");
    openapiFields.add("period");
    openapiFields.add("rootType");
    openapiFields.add("subjectAlternativeNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateRenew
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateRenew.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateRenew is not found in the empty JSON string", CertificateRenew.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateRenew.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateRenew` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callbackUrl") != null && !jsonObj.get("callbackUrl").isJsonNull()) && !jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      if ((jsonObj.get("commonName") != null && !jsonObj.get("commonName").isJsonNull()) && !jsonObj.get("commonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonName").toString()));
      }
      if ((jsonObj.get("csr") != null && !jsonObj.get("csr").isJsonNull()) && !jsonObj.get("csr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csr").toString()));
      }
      if ((jsonObj.get("rootType") != null && !jsonObj.get("rootType").isJsonNull()) && !jsonObj.get("rootType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootType").toString()));
      }
      // validate the optional field `rootType`
      if (jsonObj.get("rootType") != null && !jsonObj.get("rootType").isJsonNull()) {
        RootTypeEnum.validateJsonElement(jsonObj.get("rootType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjectAlternativeNames") != null && !jsonObj.get("subjectAlternativeNames").isJsonNull() && !jsonObj.get("subjectAlternativeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectAlternativeNames` to be an array in the JSON string but got `%s`", jsonObj.get("subjectAlternativeNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateRenew.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateRenew' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateRenew> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateRenew.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateRenew>() {
           @Override
           public void write(JsonWriter out, CertificateRenew value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateRenew read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateRenew given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateRenew
   * @throws IOException if the JSON string is invalid with respect to CertificateRenew
   */
  public static CertificateRenew fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateRenew.class);
  }

  /**
   * Convert an instance of CertificateRenew to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

