/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DomainVerificationSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:19.304783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainVerificationSummary {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DCE_TOKEN = "dceToken";
  @SerializedName(SERIALIZED_NAME_DCE_TOKEN)
  private String dceToken;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DOMAIN_ENTITY_ID = "domainEntityId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ENTITY_ID)
  private Integer domainEntityId;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  /**
   * Domain verification status:    * &#x60;AWAITING&#x60; - Verification pending customer input   * &#x60;INVALID&#x60; - SAN connected to a cancelled request   * &#x60;COMPLETED&#x60; - Verification completed   * &#x60;FAILED_VERIFICATION&#x60; - Verification failed   * &#x60;PENDING_POSSIBLE_FRAUD&#x60; - Flagged for a system level fraud review   * &#x60;VERIFIED_POSSIBLE_FRAUD&#x60; - Fraud detection reviewed but verified   * &#x60;DROPPED&#x60; - SAN dropped from request   * &#x60;REVOKED_CERT&#x60; - Certificate revoked   * &#x60;DROPPED_GOOGLE_SAFE_BROWSING&#x60; - SAN dropped from request due to Google Safe Browsing check   * &#x60;DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION&#x60; - SAN dropped from request due to Certificate Authorization Authority DNS record check 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    COMPLETED("COMPLETED"),
    
    FAILED_VERIFICATION("FAILED_VERIFICATION"),
    
    VERIFIED_POSSIBLE_FRAUD("VERIFIED_POSSIBLE_FRAUD"),
    
    DROPPED("DROPPED"),
    
    DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION("DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION"),
    
    DROPPED_GOOGLE_SAFE_BROWSING("DROPPED_GOOGLE_SAFE_BROWSING"),
    
    INVALID("INVALID"),
    
    AWAITING("AWAITING"),
    
    PENDING_POSSIBLE_FRAUD("PENDING_POSSIBLE_FRAUD"),
    
    REVOKED_CERTIFICATE("REVOKED_CERTIFICATE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Domain verification type:    * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN&#x60; - Domain verified using domain control verification email sent to admin@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR&#x60; - Domain verified using domain control verification email sent to administrator@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER&#x60; - Domain verified using domain control verification email sent to hostmaster@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER&#x60; - Domain verified using domain control verification email sent to postmaster@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER&#x60; - Domain verified using domain control verification email sent to webmaster@&lt;your.domain.com&gt;   * &#x60;DOMAIN_ACCESS_EMAIL&#x60; - Domain verified using a domain access email   * &#x60;DOMAIN_ACCESS_LETTER&#x60; - Customer completed a domain access letter which was used for domain verification   * &#x60;DOMAIN_CONTROL_EMAIL&#x60; - Domain verified using HTML file or DNS zone file text value   * &#x60;DOMAIN_ZONE_CONTROL&#x60; - DNS zone file containing a pre-generated text value used for domain verification   * &#x60;MANUAL_DOMAIN_ACCESS_EMAIL&#x60; - DAE sent to an email address manually entered by a rep   * &#x60;PREVIOUS_DOMAIN_ACCESS_EMAIL&#x60; - Customers domain access email for a prior certificate request was used for domain verification   * &#x60;REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER&#x60; - Representative reviewed a customer provided domain access letter and verified domain   * &#x60;REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL&#x60; - Representative verified domain using a manual domain zone control check   * &#x60;REGISTRATION_AUTHORITY_OVERRIDE&#x60; - Representative verified domain using alternative methods   * &#x60;REGISTRATION_AUTHORITY_WEBSITE_CONTROL&#x60; - Representative verified domain using a manual website control check   * &#x60;CUSTOMER_OWNED&#x60; - Validated customer account information used for domain control verification   * &#x60;WEBSITE_CONTROL&#x60; - HTML file in root website directory containing pre-generated value used for domain control verification 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DOMAIN_CONTROL_EMAIL("DOMAIN_CONTROL_EMAIL"),
    
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN("AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN"),
    
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR("AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR"),
    
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER("AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER"),
    
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER("AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER"),
    
    AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER("AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER"),
    
    DOMAIN_ACCESS_EMAIL("DOMAIN_ACCESS_EMAIL"),
    
    DOMAIN_ACCESS_LETTER("DOMAIN_ACCESS_LETTER"),
    
    DOMAIN_ZONE_CONTROL("DOMAIN_ZONE_CONTROL"),
    
    MANUAL_DOMAIN_ACCESS_EMAIL("MANUAL_DOMAIN_ACCESS_EMAIL"),
    
    PREVIOUS_DOMAIN_ACCESS_EMAIL("PREVIOUS_DOMAIN_ACCESS_EMAIL"),
    
    REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER("REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER"),
    
    REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL("REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL"),
    
    REGISTRATION_AUTHORITY_OVERRIDE("REGISTRATION_AUTHORITY_OVERRIDE"),
    
    REGISTRATION_AUTHORITY_WEBSITE_CONTROL("REGISTRATION_AUTHORITY_WEBSITE_CONTROL"),
    
    CUSTOMER_OWNED("CUSTOMER_OWNED"),
    
    WEBSITE_CONTROL("WEBSITE_CONTROL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Type of domain name used for domain verification
   */
  @JsonAdapter(UsageEnum.Adapter.class)
  public enum UsageEnum {
    COMMON_NAME("COMMON_NAME"),
    
    SUBJECT_ALTERNATIVE_NAME("SUBJECT_ALTERNATIVE_NAME");

    private String value;

    UsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageEnum fromValue(String value) {
      for (UsageEnum b : UsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private UsageEnum usage;

  public DomainVerificationSummary() {
  }

  public DomainVerificationSummary createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Timestamp indicating when the domain verification process was started
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public DomainVerificationSummary dceToken(String dceToken) {
    this.dceToken = dceToken;
    return this;
  }

  /**
   * DCE verification type token (if DCE verification type).
   * @return dceToken
   */
  @javax.annotation.Nullable
  public String getDceToken() {
    return dceToken;
  }

  public void setDceToken(String dceToken) {
    this.dceToken = dceToken;
  }


  public DomainVerificationSummary domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Domain name
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DomainVerificationSummary domainEntityId(Integer domainEntityId) {
    this.domainEntityId = domainEntityId;
    return this;
  }

  /**
   * A unique identifier that can be leveraged for retrieving domain verification related information. Primarily used when troubleshooting a request
   * @return domainEntityId
   */
  @javax.annotation.Nonnull
  public Integer getDomainEntityId() {
    return domainEntityId;
  }

  public void setDomainEntityId(Integer domainEntityId) {
    this.domainEntityId = domainEntityId;
  }


  public DomainVerificationSummary modifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Timestamp indicating when the domain verification process was last updated
   * @return modifiedAt
   */
  @javax.annotation.Nonnull
  public String getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public DomainVerificationSummary status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Domain verification status:    * &#x60;AWAITING&#x60; - Verification pending customer input   * &#x60;INVALID&#x60; - SAN connected to a cancelled request   * &#x60;COMPLETED&#x60; - Verification completed   * &#x60;FAILED_VERIFICATION&#x60; - Verification failed   * &#x60;PENDING_POSSIBLE_FRAUD&#x60; - Flagged for a system level fraud review   * &#x60;VERIFIED_POSSIBLE_FRAUD&#x60; - Fraud detection reviewed but verified   * &#x60;DROPPED&#x60; - SAN dropped from request   * &#x60;REVOKED_CERT&#x60; - Certificate revoked   * &#x60;DROPPED_GOOGLE_SAFE_BROWSING&#x60; - SAN dropped from request due to Google Safe Browsing check   * &#x60;DROPPED_CERTIFICATE_AUTHORITY_AUTHORIZATION&#x60; - SAN dropped from request due to Certificate Authorization Authority DNS record check 
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DomainVerificationSummary type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Domain verification type:    * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMIN&#x60; - Domain verified using domain control verification email sent to admin@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_ADMINSTRATOR&#x60; - Domain verified using domain control verification email sent to administrator@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_HOST_MASTER&#x60; - Domain verified using domain control verification email sent to hostmaster@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_POST_MASTER&#x60; - Domain verified using domain control verification email sent to postmaster@&lt;your.domain.com&gt;   * &#x60;AUTO_GENERATED_DOMAIN_ACCESS_EMAIL_WEB_MASTER&#x60; - Domain verified using domain control verification email sent to webmaster@&lt;your.domain.com&gt;   * &#x60;DOMAIN_ACCESS_EMAIL&#x60; - Domain verified using a domain access email   * &#x60;DOMAIN_ACCESS_LETTER&#x60; - Customer completed a domain access letter which was used for domain verification   * &#x60;DOMAIN_CONTROL_EMAIL&#x60; - Domain verified using HTML file or DNS zone file text value   * &#x60;DOMAIN_ZONE_CONTROL&#x60; - DNS zone file containing a pre-generated text value used for domain verification   * &#x60;MANUAL_DOMAIN_ACCESS_EMAIL&#x60; - DAE sent to an email address manually entered by a rep   * &#x60;PREVIOUS_DOMAIN_ACCESS_EMAIL&#x60; - Customers domain access email for a prior certificate request was used for domain verification   * &#x60;REGISTRATION_AUTHORITY_DOMAIN_ACCESS_LETTER&#x60; - Representative reviewed a customer provided domain access letter and verified domain   * &#x60;REGISTRATION_AUTHORITY_DOMAIN_ZONE_CONTROL&#x60; - Representative verified domain using a manual domain zone control check   * &#x60;REGISTRATION_AUTHORITY_OVERRIDE&#x60; - Representative verified domain using alternative methods   * &#x60;REGISTRATION_AUTHORITY_WEBSITE_CONTROL&#x60; - Representative verified domain using a manual website control check   * &#x60;CUSTOMER_OWNED&#x60; - Validated customer account information used for domain control verification   * &#x60;WEBSITE_CONTROL&#x60; - HTML file in root website directory containing pre-generated value used for domain control verification 
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DomainVerificationSummary usage(UsageEnum usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Type of domain name used for domain verification
   * @return usage
   */
  @javax.annotation.Nonnull
  public UsageEnum getUsage() {
    return usage;
  }

  public void setUsage(UsageEnum usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainVerificationSummary domainVerificationSummary = (DomainVerificationSummary) o;
    return Objects.equals(this.createdAt, domainVerificationSummary.createdAt) &&
        Objects.equals(this.dceToken, domainVerificationSummary.dceToken) &&
        Objects.equals(this.domain, domainVerificationSummary.domain) &&
        Objects.equals(this.domainEntityId, domainVerificationSummary.domainEntityId) &&
        Objects.equals(this.modifiedAt, domainVerificationSummary.modifiedAt) &&
        Objects.equals(this.status, domainVerificationSummary.status) &&
        Objects.equals(this.type, domainVerificationSummary.type) &&
        Objects.equals(this.usage, domainVerificationSummary.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, dceToken, domain, domainEntityId, modifiedAt, status, type, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainVerificationSummary {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dceToken: ").append(toIndentedString(dceToken)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    domainEntityId: ").append(toIndentedString(domainEntityId)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("dceToken");
    openapiFields.add("domain");
    openapiFields.add("domainEntityId");
    openapiFields.add("modifiedAt");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("domainEntityId");
    openapiRequiredFields.add("modifiedAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("usage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainVerificationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainVerificationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainVerificationSummary is not found in the empty JSON string", DomainVerificationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainVerificationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainVerificationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainVerificationSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("dceToken") != null && !jsonObj.get("dceToken").isJsonNull()) && !jsonObj.get("dceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dceToken").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedAt").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
      // validate the required field `usage`
      UsageEnum.validateJsonElement(jsonObj.get("usage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainVerificationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainVerificationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainVerificationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainVerificationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainVerificationSummary>() {
           @Override
           public void write(JsonWriter out, DomainVerificationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainVerificationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainVerificationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainVerificationSummary
   * @throws IOException if the JSON string is invalid with respect to DomainVerificationSummary
   */
  public static DomainVerificationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainVerificationSummary.class);
  }

  /**
   * Convert an instance of DomainVerificationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

