/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CertificateAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CertificateOrganizationCreate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:19.304783-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateOrganizationCreate {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private CertificateAddress address;

  public static final String SERIALIZED_NAME_ASSUMED_NAME = "assumedName";
  @SerializedName(SERIALIZED_NAME_ASSUMED_NAME)
  private String assumedName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_REGISTRATION_AGENT = "registrationAgent";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_AGENT)
  private String registrationAgent;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public CertificateOrganizationCreate() {
  }

  public CertificateOrganizationCreate address(CertificateAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public CertificateAddress getAddress() {
    return address;
  }

  public void setAddress(CertificateAddress address) {
    this.address = address;
  }


  public CertificateOrganizationCreate assumedName(String assumedName) {
    this.assumedName = assumedName;
    return this;
  }

  /**
   * Only for EVSSL. The DBA(does business as) name for the organization.
   * @return assumedName
   */
  @javax.annotation.Nullable
  public String getAssumedName() {
    return assumedName;
  }

  public void setAssumedName(String assumedName) {
    this.assumedName = assumedName;
  }


  public CertificateOrganizationCreate name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of organization that owns common name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CertificateOrganizationCreate phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone number for organization
   * @return phone
   */
  @javax.annotation.Nonnull
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public CertificateOrganizationCreate registrationAgent(String registrationAgent) {
    this.registrationAgent = registrationAgent;
    return this;
  }

  /**
   * Only for EVSSL.
   * @return registrationAgent
   */
  @javax.annotation.Nullable
  public String getRegistrationAgent() {
    return registrationAgent;
  }

  public void setRegistrationAgent(String registrationAgent) {
    this.registrationAgent = registrationAgent;
  }


  public CertificateOrganizationCreate registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * Only for EVSSL.
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateOrganizationCreate certificateOrganizationCreate = (CertificateOrganizationCreate) o;
    return Objects.equals(this.address, certificateOrganizationCreate.address) &&
        Objects.equals(this.assumedName, certificateOrganizationCreate.assumedName) &&
        Objects.equals(this.name, certificateOrganizationCreate.name) &&
        Objects.equals(this.phone, certificateOrganizationCreate.phone) &&
        Objects.equals(this.registrationAgent, certificateOrganizationCreate.registrationAgent) &&
        Objects.equals(this.registrationNumber, certificateOrganizationCreate.registrationNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, assumedName, name, phone, registrationAgent, registrationNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateOrganizationCreate {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    assumedName: ").append(toIndentedString(assumedName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    registrationAgent: ").append(toIndentedString(registrationAgent)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("assumedName");
    openapiFields.add("name");
    openapiFields.add("phone");
    openapiFields.add("registrationAgent");
    openapiFields.add("registrationNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("phone");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateOrganizationCreate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateOrganizationCreate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateOrganizationCreate is not found in the empty JSON string", CertificateOrganizationCreate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateOrganizationCreate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateOrganizationCreate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateOrganizationCreate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        CertificateAddress.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("assumedName") != null && !jsonObj.get("assumedName").isJsonNull()) && !jsonObj.get("assumedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assumedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assumedName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("registrationAgent") != null && !jsonObj.get("registrationAgent").isJsonNull()) && !jsonObj.get("registrationAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationAgent").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateOrganizationCreate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateOrganizationCreate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateOrganizationCreate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateOrganizationCreate.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateOrganizationCreate>() {
           @Override
           public void write(JsonWriter out, CertificateOrganizationCreate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateOrganizationCreate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateOrganizationCreate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateOrganizationCreate
   * @throws IOException if the JSON string is invalid with respect to CertificateOrganizationCreate
   */
  public static CertificateOrganizationCreate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateOrganizationCreate.class);
  }

  /**
   * Convert an instance of CertificateOrganizationCreate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

