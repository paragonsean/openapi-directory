/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateAction;
import org.openapitools.client.model.CertificateBundle;
import org.openapitools.client.model.CertificateCallback;
import org.openapitools.client.model.CertificateCreate;
import org.openapitools.client.model.CertificateEmailHistory;
import org.openapitools.client.model.CertificateIdentifier;
import org.openapitools.client.model.CertificateReissue;
import org.openapitools.client.model.CertificateRenew;
import org.openapitools.client.model.CertificateRevoke;
import org.openapitools.client.model.CertificateSiteSeal;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1Api
 */
@Disabled
public class V1ApiTest {

    private final V1Api api = new V1Api();

    /**
     * Retrieve all certificate actions
     *
     * This method is used to retrieve all stateful actions relating to a certificate lifecycle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateActionRetrieveTest() throws ApiException {
        String certificateId = null;
        List<CertificateAction> response = api.certificateActionRetrieve(certificateId);
        // TODO: test validations
    }

    /**
     * Add alternate email address
     *
     * This method adds an alternate email address to a certificate order and re-sends all existing request emails to that address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateAlternateEmailAddressTest() throws ApiException {
        String certificateId = null;
        String emailAddress = null;
        CertificateEmailHistory response = api.certificateAlternateEmailAddress(certificateId, emailAddress);
        // TODO: test validations
    }

    /**
     * Unregister system callback
     *
     * Unregister the callback for a particular certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCallbackDeleteTest() throws ApiException {
        String certificateId = null;
        api.certificateCallbackDelete(certificateId);
        // TODO: test validations
    }

    /**
     * Retrieve system stateful action callback url
     *
     * This method is used to retrieve the registered callback url for a certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCallbackGetTest() throws ApiException {
        String certificateId = null;
        CertificateCallback response = api.certificateCallbackGet(certificateId);
        // TODO: test validations
    }

    /**
     * Register of certificate action callback
     *
     * This method is used to register/replace url for callbacks for stateful actions relating to a certificate lifecycle. The callback url is a Webhook style pattern and will receive POST http requests with json body defined in the CertificateAction model definition for each certificate action.  Only one callback URL is allowed to be registered for each certificateId, so it will replace a previous registration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCallbackReplaceTest() throws ApiException {
        String certificateId = null;
        String callbackUrl = null;
        api.certificateCallbackReplace(certificateId, callbackUrl);
        // TODO: test validations
    }

    /**
     * Cancel a pending certificate
     *
     * Use the cancel call to cancel a pending certificate order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCancelTest() throws ApiException {
        String certificateId = null;
        api.certificateCancel(certificateId);
        // TODO: test validations
    }

    /**
     * Create a pending order for certificate
     *
     * &lt;p&gt;Creating a certificate order can be a long running asynchronous operation in the PKI workflow. The PKI API supports 2 options for getting the completion stateful actions for this asynchronous operations: 1) by polling operations -- see /v1/certificates/{certificateId}/actions 2) via WebHook style callback -- see &#39;/v1/certificates/{certificateId}/callback&#39;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCreateTest() throws ApiException {
        CertificateCreate certificateCreate = null;
        String xMarketId = null;
        CertificateIdentifier response = api.certificateCreate(certificateCreate, xMarketId);
        // TODO: test validations
    }

    /**
     * Download certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateDownloadTest() throws ApiException {
        String certificateId = null;
        CertificateBundle response = api.certificateDownload(certificateId);
        // TODO: test validations
    }

    /**
     * Download certificate by entitlement
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateDownloadEntitlementTest() throws ApiException {
        String entitlementId = null;
        CertificateBundle response = api.certificateDownloadEntitlement(entitlementId);
        // TODO: test validations
    }

    /**
     * Retrieve email history
     *
     * This method can be used to retrieve all emails sent for a certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateEmailHistoryTest() throws ApiException {
        String certificateId = null;
        CertificateEmailHistory response = api.certificateEmailHistory(certificateId);
        // TODO: test validations
    }

    /**
     * Retrieve certificate details
     *
     * Once the certificate order has been created, this method can be used to check the status of the certificate. This method can also be used to retrieve details of the certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateGetTest() throws ApiException {
        String certificateId = null;
        Certificate response = api.certificateGet(certificateId);
        // TODO: test validations
    }

    /**
     * Search for certificate details by entitlement
     *
     * Once the certificate order has been created, this method can be used to check the status of the certificate. This method can also be used to retrieve details of the certificates associated to an entitlement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateGetEntitlementTest() throws ApiException {
        String entitlementId = null;
        Boolean latest = null;
        List<Certificate> response = api.certificateGetEntitlement(entitlementId, latest);
        // TODO: test validations
    }

    /**
     * Reissue active certificate
     *
     * &lt;p&gt;Rekeying is the process by which the private and public key is changed for a certificate. It is a simplified reissue,where only the CSR is changed. Reissuing is the process by which domain names are added or removed from a certificate.Once a request is validated and approved, the certificate will be reissued with the new common name and sans specified. Unlimited reissues are available during the lifetime of the certificate.New names added to a certificate that do not share the base domain of the common name may take additional time to validate. If this API call is made before a previous pending reissue has been validated and issued, the previous reissue request is automatically rejected and replaced with the current request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateReissueTest() throws ApiException {
        String certificateId = null;
        CertificateReissue certificateReissue = null;
        api.certificateReissue(certificateId, certificateReissue);
        // TODO: test validations
    }

    /**
     * Renew active certificate
     *
     * Renewal is the process by which the validity of a certificate is extended. Renewal is only available 60 days prior to expiration of the previous certificate and 30 days after the expiration of the previous certificate. The renewal supports modifying a set of the original certificate order information. Once a request is validated and approved, the certificate will be issued with extended validity. Since subject alternative names can be removed during a renewal, we require that you provide the subject alternative names you expect in the renewed certificate. New names added to a certificate that do not share the base domain of the common name may take additional time to validate. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateRenewTest() throws ApiException {
        String certificateId = null;
        CertificateRenew certificateRenew = null;
        api.certificateRenew(certificateId, certificateRenew);
        // TODO: test validations
    }

    /**
     * Resend an email
     *
     * This method can be used to resend emails by providing the certificate id and the email id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateResendEmailTest() throws ApiException {
        String certificateId = null;
        String emailId = null;
        api.certificateResendEmail(certificateId, emailId);
        // TODO: test validations
    }

    /**
     * Resend email to email address
     *
     * This method can be used to resend emails by providing the certificate id, the email id, and the recipient email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateResendEmailAddressTest() throws ApiException {
        String certificateId = null;
        String emailId = null;
        String emailAddress = null;
        api.certificateResendEmailAddress(certificateId, emailId, emailAddress);
        // TODO: test validations
    }

    /**
     * Revoke active certificate
     *
     * Use revoke call to revoke an active certificate, if the certificate has not been issued a 404 response will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateRevokeTest() throws ApiException {
        String certificateId = null;
        CertificateRevoke certificateRevoke = null;
        api.certificateRevoke(certificateId, certificateRevoke);
        // TODO: test validations
    }

    /**
     * Get Site seal
     *
     * &lt;p&gt;This method is used to obtain the site seal information for an issued certificate. A site seal is a graphic that the certificate purchaser can embed on their web site to show their visitors information about their SSL certificate. If a web site visitor clicks on the site seal image, a pop-up page is displayed that contains detailed information about the SSL certificate. The site seal token is used to link the site seal graphic image to the appropriate certificate details pop-up page display when a user clicks on the site seal. The site seal images are expected to be static images and hosted on the reseller&#39;s website, to minimize delays for customer page load times.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateSitesealGetTest() throws ApiException {
        String certificateId = null;
        String theme = null;
        String locale = null;
        CertificateSiteSeal response = api.certificateSitesealGet(certificateId, theme, locale);
        // TODO: test validations
    }

    /**
     * Validate a pending order for certificate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateValidateTest() throws ApiException {
        CertificateCreate certificateCreate = null;
        String xMarketId = null;
        api.certificateValidate(certificateCreate, xMarketId);
        // TODO: test validations
    }

    /**
     * Check Domain Control
     *
     * Domain control is a means for verifying the domain included in the certificate order. This resource is useful for resellers that control the domains for their customers, and can expedite the verification process. See https://www.godaddy.com/help/verifying-your-domain-ownership-for-ssl-certificate-requests-html-or-dns-7452
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateVerifydomaincontrolTest() throws ApiException {
        String certificateId = null;
        api.certificateVerifydomaincontrol(certificateId);
        // TODO: test validations
    }

}
