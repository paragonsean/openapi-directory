/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateDetailV2;
import org.openapitools.client.model.CertificateSummariesV2;
import org.openapitools.client.model.DomainVerificationDetail;
import org.openapitools.client.model.DomainVerificationSummary;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ErrorLimit;
import org.openapitools.client.model.ExternalAccountBinding;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2Api
 */
@Disabled
public class V2ApiTest {

    private final V2Api api = new V2Api();

    /**
     * Retrieves the external account binding for the specified customer
     *
     * Use this endpoint to retrieve a key identifier and Hash-based Message Authentication Code (HMAC) key for Automated Certificate Management Environment (ACME) External Account Binding (EAB). These credentials can be used with an ACME client that supports EAB (ex. CertBot) to automate the issuance request and deployment of DV SSL certificates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAcmeExternalAccountBindingTest() throws ApiException {
        String customerId = null;
        ExternalAccountBinding response = api.getAcmeExternalAccountBinding(customerId);
        // TODO: test validations
    }

    /**
     * Retrieve individual certificate details
     *
     * Once the certificate order has been created, this method can be used to check the status of the certificate. This method can also be used to retrieve details of the certificate. &lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**. **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertificateDetailByCertIdentifierTest() throws ApiException {
        String customerId = null;
        String certificateId = null;
        CertificateDetailV2 response = api.getCertificateDetailByCertIdentifier(customerId, certificateId);
        // TODO: test validations
    }

    /**
     * Retrieve customer&#39;s certificates
     *
     * This method can be used to retrieve a list of certificates for a specified customer. &lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerCertificatesByCustomerIdTest() throws ApiException {
        String customerId = null;
        Integer offset = null;
        Integer limit = null;
        CertificateSummariesV2 response = api.getCustomerCertificatesByCustomerId(customerId, offset, limit);
        // TODO: test validations
    }

    /**
     * Retrieve detailed information for supplied domain
     *
     * Retrieve detailed information for supplied domain, including domain verification details and Certificate Authority Authorization (CAA) verification details. &lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainDetailsByDomainTest() throws ApiException {
        String customerId = null;
        String certificateId = null;
        String domain = null;
        DomainVerificationDetail response = api.getDomainDetailsByDomain(customerId, certificateId, domain);
        // TODO: test validations
    }

    /**
     * Retrieve domain verification status
     *
     * This method can be used to retrieve the domain verification status for a certificate request.&lt;ul&gt;&lt;li&gt;**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)&lt;/li&gt;&lt;/ul&gt;\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainInformationByCertificateIdTest() throws ApiException {
        String customerId = null;
        String certificateId = null;
        List<DomainVerificationSummary> response = api.getDomainInformationByCertificateId(customerId, certificateId);
        // TODO: test validations
    }

}
