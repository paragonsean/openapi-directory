/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Certificate from '../model/Certificate';
import CertificateAction from '../model/CertificateAction';
import CertificateBundle from '../model/CertificateBundle';
import CertificateCallback from '../model/CertificateCallback';
import CertificateCreate from '../model/CertificateCreate';
import CertificateEmailHistory from '../model/CertificateEmailHistory';
import CertificateIdentifier from '../model/CertificateIdentifier';
import CertificateReissue from '../model/CertificateReissue';
import CertificateRenew from '../model/CertificateRenew';
import CertificateRevoke from '../model/CertificateRevoke';
import CertificateSiteSeal from '../model/CertificateSiteSeal';
import Error from '../model/Error';

/**
* V1 service.
* @module api/V1Api
* @version 1.0.0
*/
export default class V1Api {

    /**
    * Constructs a new V1Api. 
    * @alias module:api/V1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the certificateActionRetrieve operation.
     * @callback module:api/V1Api~certificateActionRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CertificateAction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all certificate actions
     * This method is used to retrieve all stateful actions relating to a certificate lifecycle.
     * @param {String} certificateId Certificate id to register for callback
     * @param {module:api/V1Api~certificateActionRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CertificateAction>}
     */
    certificateActionRetrieve(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateActionRetrieve");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CertificateAction];
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateAlternateEmailAddress operation.
     * @callback module:api/V1Api~certificateAlternateEmailAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateEmailHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add alternate email address
     * This method adds an alternate email address to a certificate order and re-sends all existing request emails to that address.
     * @param {String} certificateId Certificate id to resend emails
     * @param {String} emailAddress Specific email address to resend email
     * @param {module:api/V1Api~certificateAlternateEmailAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateEmailHistory}
     */
    certificateAlternateEmailAddress(certificateId, emailAddress, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateAlternateEmailAddress");
      }
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling certificateAlternateEmailAddress");
      }

      let pathParams = {
        'certificateId': certificateId,
        'emailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateEmailHistory;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/email/resend/{emailAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateCallbackDelete operation.
     * @callback module:api/V1Api~certificateCallbackDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unregister system callback
     * Unregister the callback for a particular certificate.
     * @param {String} certificateId Certificate id to unregister callback
     * @param {module:api/V1Api~certificateCallbackDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateCallbackDelete(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateCallbackDelete");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/callback', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateCallbackGet operation.
     * @callback module:api/V1Api~certificateCallbackGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateCallback} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve system stateful action callback url
     * This method is used to retrieve the registered callback url for a certificate.
     * @param {String} certificateId Certificate id to register for stateful action callback
     * @param {module:api/V1Api~certificateCallbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateCallback}
     */
    certificateCallbackGet(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateCallbackGet");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateCallback;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateCallbackReplace operation.
     * @callback module:api/V1Api~certificateCallbackReplaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register of certificate action callback
     * This method is used to register/replace url for callbacks for stateful actions relating to a certificate lifecycle. The callback url is a Webhook style pattern and will receive POST http requests with json body defined in the CertificateAction model definition for each certificate action.  Only one callback URL is allowed to be registered for each certificateId, so it will replace a previous registration.
     * @param {String} certificateId Certificate id to register/replace for callback
     * @param {String} callbackUrl Callback url registered/replaced to receive stateful actions
     * @param {module:api/V1Api~certificateCallbackReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateCallbackReplace(certificateId, callbackUrl, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateCallbackReplace");
      }
      // verify the required parameter 'callbackUrl' is set
      if (callbackUrl === undefined || callbackUrl === null) {
        throw new Error("Missing the required parameter 'callbackUrl' when calling certificateCallbackReplace");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
        'callbackUrl': callbackUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/callback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateCancel operation.
     * @callback module:api/V1Api~certificateCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a pending certificate
     * Use the cancel call to cancel a pending certificate order.
     * @param {String} certificateId Certificate id to cancel
     * @param {module:api/V1Api~certificateCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateCancel(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateCancel");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateCreate operation.
     * @callback module:api/V1Api~certificateCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateIdentifier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pending order for certificate
     * <p>Creating a certificate order can be a long running asynchronous operation in the PKI workflow. The PKI API supports 2 options for getting the completion stateful actions for this asynchronous operations: 1) by polling operations -- see /v1/certificates/{certificateId}/actions 2) via WebHook style callback -- see '/v1/certificates/{certificateId}/callback'.</p>
     * @param {module:model/CertificateCreate} certificateCreate The certificate order information
     * @param {Object} opts Optional parameters
     * @param {String} [xMarketId = 'Default locale for shopper account')] Setting locale for communications such as emails and error messages
     * @param {module:api/V1Api~certificateCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateIdentifier}
     */
    certificateCreate(certificateCreate, opts, callback) {
      opts = opts || {};
      let postBody = certificateCreate;
      // verify the required parameter 'certificateCreate' is set
      if (certificateCreate === undefined || certificateCreate === null) {
        throw new Error("Missing the required parameter 'certificateCreate' when calling certificateCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Market-Id': opts['xMarketId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateIdentifier;
      return this.apiClient.callApi(
        '/v1/certificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateDownload operation.
     * @callback module:api/V1Api~certificateDownloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download certificate
     * @param {String} certificateId Certificate id to download
     * @param {module:api/V1Api~certificateDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    certificateDownload(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateDownload");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateDownloadEntitlement operation.
     * @callback module:api/V1Api~certificateDownloadEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download certificate by entitlement
     * @param {String} entitlementId Entitlement id to download
     * @param {module:api/V1Api~certificateDownloadEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateBundle}
     */
    certificateDownloadEntitlement(entitlementId, callback) {
      let postBody = null;
      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling certificateDownloadEntitlement");
      }

      let pathParams = {
      };
      let queryParams = {
        'entitlementId': entitlementId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateBundle;
      return this.apiClient.callApi(
        '/v2/certificates/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateEmailHistory operation.
     * @callback module:api/V1Api~certificateEmailHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateEmailHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve email history
     * This method can be used to retrieve all emails sent for a certificate.
     * @param {String} certificateId Certificate id to retrieve email history
     * @param {module:api/V1Api~certificateEmailHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateEmailHistory}
     */
    certificateEmailHistory(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateEmailHistory");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateEmailHistory;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/email/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateGet operation.
     * @callback module:api/V1Api~certificateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve certificate details
     * Once the certificate order has been created, this method can be used to check the status of the certificate. This method can also be used to retrieve details of the certificate.
     * @param {String} certificateId Certificate id to lookup
     * @param {module:api/V1Api~certificateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    certificateGet(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateGet");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateGetEntitlement operation.
     * @callback module:api/V1Api~certificateGetEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Certificate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for certificate details by entitlement
     * Once the certificate order has been created, this method can be used to check the status of the certificate. This method can also be used to retrieve details of the certificates associated to an entitlement.
     * @param {String} entitlementId Entitlement id to lookup
     * @param {Object} opts Optional parameters
     * @param {Boolean} [latest = true)] Fetch only the most recent certificate
     * @param {module:api/V1Api~certificateGetEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Certificate>}
     */
    certificateGetEntitlement(entitlementId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling certificateGetEntitlement");
      }

      let pathParams = {
      };
      let queryParams = {
        'entitlementId': entitlementId,
        'latest': opts['latest']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Certificate];
      return this.apiClient.callApi(
        '/v2/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateReissue operation.
     * @callback module:api/V1Api~certificateReissueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reissue active certificate
     * <p>Rekeying is the process by which the private and public key is changed for a certificate. It is a simplified reissue,where only the CSR is changed. Reissuing is the process by which domain names are added or removed from a certificate.Once a request is validated and approved, the certificate will be reissued with the new common name and sans specified. Unlimited reissues are available during the lifetime of the certificate.New names added to a certificate that do not share the base domain of the common name may take additional time to validate. If this API call is made before a previous pending reissue has been validated and issued, the previous reissue request is automatically rejected and replaced with the current request.</p>
     * @param {String} certificateId Certificate id to reissue
     * @param {module:model/CertificateReissue} certificateReissue The reissue request info
     * @param {module:api/V1Api~certificateReissueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateReissue(certificateId, certificateReissue, callback) {
      let postBody = certificateReissue;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateReissue");
      }
      // verify the required parameter 'certificateReissue' is set
      if (certificateReissue === undefined || certificateReissue === null) {
        throw new Error("Missing the required parameter 'certificateReissue' when calling certificateReissue");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/reissue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateRenew operation.
     * @callback module:api/V1Api~certificateRenewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renew active certificate
     * Renewal is the process by which the validity of a certificate is extended. Renewal is only available 60 days prior to expiration of the previous certificate and 30 days after the expiration of the previous certificate. The renewal supports modifying a set of the original certificate order information. Once a request is validated and approved, the certificate will be issued with extended validity. Since subject alternative names can be removed during a renewal, we require that you provide the subject alternative names you expect in the renewed certificate. New names added to a certificate that do not share the base domain of the common name may take additional time to validate. </p>
     * @param {String} certificateId Certificate id to renew
     * @param {module:model/CertificateRenew} certificateRenew The renew request info
     * @param {module:api/V1Api~certificateRenewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateRenew(certificateId, certificateRenew, callback) {
      let postBody = certificateRenew;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateRenew");
      }
      // verify the required parameter 'certificateRenew' is set
      if (certificateRenew === undefined || certificateRenew === null) {
        throw new Error("Missing the required parameter 'certificateRenew' when calling certificateRenew");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/renew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateResendEmail operation.
     * @callback module:api/V1Api~certificateResendEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend an email
     * This method can be used to resend emails by providing the certificate id and the email id
     * @param {String} certificateId Certificate id to resend email
     * @param {String} emailId Email id for email to resend
     * @param {module:api/V1Api~certificateResendEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateResendEmail(certificateId, emailId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateResendEmail");
      }
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling certificateResendEmail");
      }

      let pathParams = {
        'certificateId': certificateId,
        'emailId': emailId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/email/{emailId}/resend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateResendEmailAddress operation.
     * @callback module:api/V1Api~certificateResendEmailAddressCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend email to email address
     * This method can be used to resend emails by providing the certificate id, the email id, and the recipient email address
     * @param {String} certificateId Certificate id to resend emails
     * @param {String} emailId Email id for email to resend
     * @param {String} emailAddress Specific email address to resend email
     * @param {module:api/V1Api~certificateResendEmailAddressCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateResendEmailAddress(certificateId, emailId, emailAddress, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateResendEmailAddress");
      }
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling certificateResendEmailAddress");
      }
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling certificateResendEmailAddress");
      }

      let pathParams = {
        'certificateId': certificateId,
        'emailId': emailId,
        'emailAddress': emailAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/email/{emailId}/resend/{emailAddress}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateRevoke operation.
     * @callback module:api/V1Api~certificateRevokeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke active certificate
     * Use revoke call to revoke an active certificate, if the certificate has not been issued a 404 response will be returned.
     * @param {String} certificateId Certificate id to revoke
     * @param {module:model/CertificateRevoke} certificateRevoke The certificate revocation request
     * @param {module:api/V1Api~certificateRevokeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateRevoke(certificateId, certificateRevoke, callback) {
      let postBody = certificateRevoke;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateRevoke");
      }
      // verify the required parameter 'certificateRevoke' is set
      if (certificateRevoke === undefined || certificateRevoke === null) {
        throw new Error("Missing the required parameter 'certificateRevoke' when calling certificateRevoke");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateSitesealGet operation.
     * @callback module:api/V1Api~certificateSitesealGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateSiteSeal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site seal
     * <p>This method is used to obtain the site seal information for an issued certificate. A site seal is a graphic that the certificate purchaser can embed on their web site to show their visitors information about their SSL certificate. If a web site visitor clicks on the site seal image, a pop-up page is displayed that contains detailed information about the SSL certificate. The site seal token is used to link the site seal graphic image to the appropriate certificate details pop-up page display when a user clicks on the site seal. The site seal images are expected to be static images and hosted on the reseller's website, to minimize delays for customer page load times.</p>
     * @param {String} certificateId Certificate id
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [theme = 'LIGHT')] This value represents the visual theme of the seal. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present.
     * @param {String} [locale = 'en')] Determine locale for text displayed in seal image and verification page. If seal doesn't exist, default values are used if params not present. If seal does exist, default values will not be used to update unless params present.
     * @param {module:api/V1Api~certificateSitesealGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateSiteSeal}
     */
    certificateSitesealGet(certificateId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateSitesealGet");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
        'theme': opts['theme'],
        'locale': opts['locale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateSiteSeal;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/siteSeal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateValidate operation.
     * @callback module:api/V1Api~certificateValidateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a pending order for certificate
     * @param {module:model/CertificateCreate} certificateCreate The certificate order info
     * @param {Object} opts Optional parameters
     * @param {String} [xMarketId = 'Default locale for shopper account')] Setting locale for communications such as emails and error messages
     * @param {module:api/V1Api~certificateValidateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateValidate(certificateCreate, opts, callback) {
      opts = opts || {};
      let postBody = certificateCreate;
      // verify the required parameter 'certificateCreate' is set
      if (certificateCreate === undefined || certificateCreate === null) {
        throw new Error("Missing the required parameter 'certificateCreate' when calling certificateValidate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Market-Id': opts['xMarketId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateVerifydomaincontrol operation.
     * @callback module:api/V1Api~certificateVerifydomaincontrolCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check Domain Control
     * Domain control is a means for verifying the domain included in the certificate order. This resource is useful for resellers that control the domains for their customers, and can expedite the verification process. See https://www.godaddy.com/help/verifying-your-domain-ownership-for-ssl-certificate-requests-html-or-dns-7452
     * @param {String} certificateId Certificate id to lookup
     * @param {module:api/V1Api~certificateVerifydomaincontrolCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificateVerifydomaincontrol(certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling certificateVerifydomaincontrol");
      }

      let pathParams = {
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/certificates/{certificateId}/verifyDomainControl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
