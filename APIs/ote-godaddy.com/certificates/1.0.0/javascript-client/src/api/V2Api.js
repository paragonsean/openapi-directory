/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateDetailV2 from '../model/CertificateDetailV2';
import CertificateSummariesV2 from '../model/CertificateSummariesV2';
import DomainVerificationDetail from '../model/DomainVerificationDetail';
import DomainVerificationSummary from '../model/DomainVerificationSummary';
import Error from '../model/Error';
import ErrorLimit from '../model/ErrorLimit';
import ExternalAccountBinding from '../model/ExternalAccountBinding';

/**
* V2 service.
* @module api/V2Api
* @version 1.0.0
*/
export default class V2Api {

    /**
    * Constructs a new V2Api. 
    * @alias module:api/V2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAcmeExternalAccountBinding operation.
     * @callback module:api/V2Api~getAcmeExternalAccountBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalAccountBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the external account binding for the specified customer
     * Use this endpoint to retrieve a key identifier and Hash-based Message Authentication Code (HMAC) key for Automated Certificate Management Environment (ACME) External Account Binding (EAB). These credentials can be used with an ACME client that supports EAB (ex. CertBot) to automate the issuance request and deployment of DV SSL certificates
     * @param {String} customerId An identifier for a customer
     * @param {module:api/V2Api~getAcmeExternalAccountBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalAccountBinding}
     */
    getAcmeExternalAccountBinding(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getAcmeExternalAccountBinding");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = ExternalAccountBinding;
      return this.apiClient.callApi(
        '/v2/customers/{customerId}/certificates/acme/externalAccountBinding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCertificateDetailByCertIdentifier operation.
     * @callback module:api/V2Api~getCertificateDetailByCertIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateDetailV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve individual certificate details
     * Once the certificate order has been created, this method can be used to check the status of the certificate. This method can also be used to retrieve details of the certificate. <ul><li>**shopperId** is **not the same** as **customerId**. **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} customerId An identifier for a customer
     * @param {String} certificateId Certificate id to lookup
     * @param {module:api/V2Api~getCertificateDetailByCertIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateDetailV2}
     */
    getCertificateDetailByCertIdentifier(customerId, certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCertificateDetailByCertIdentifier");
      }
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling getCertificateDetailByCertIdentifier");
      }

      let pathParams = {
        'customerId': customerId,
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CertificateDetailV2;
      return this.apiClient.callApi(
        '/v2/customers/{customerId}/certificates/{certificateId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerCertificatesByCustomerId operation.
     * @callback module:api/V2Api~getCustomerCertificatesByCustomerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateSummariesV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve customer's certificates
     * This method can be used to retrieve a list of certificates for a specified customer. <ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} customerId An identifier for a customer
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Number of results to skip for pagination
     * @param {Number} [limit] Maximum number of items to return
     * @param {module:api/V2Api~getCustomerCertificatesByCustomerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateSummariesV2}
     */
    getCustomerCertificatesByCustomerId(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerCertificatesByCustomerId");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = CertificateSummariesV2;
      return this.apiClient.callApi(
        '/v2/customers/{customerId}/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainDetailsByDomain operation.
     * @callback module:api/V2Api~getDomainDetailsByDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainVerificationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve detailed information for supplied domain
     * Retrieve detailed information for supplied domain, including domain verification details and Certificate Authority Authorization (CAA) verification details. <ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>
     * @param {String} customerId An identifier for a customer
     * @param {String} certificateId Certificate id to lookup
     * @param {String} domain A valid domain name in the certificate request
     * @param {module:api/V2Api~getDomainDetailsByDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainVerificationDetail}
     */
    getDomainDetailsByDomain(customerId, certificateId, domain, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getDomainDetailsByDomain");
      }
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling getDomainDetailsByDomain");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainDetailsByDomain");
      }

      let pathParams = {
        'customerId': customerId,
        'certificateId': certificateId,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = DomainVerificationDetail;
      return this.apiClient.callApi(
        '/v2/customers/{customerId}/certificates/{certificateId}/domainVerifications/{domain}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainInformationByCertificateId operation.
     * @callback module:api/V2Api~getDomainInformationByCertificateIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DomainVerificationSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve domain verification status
     * This method can be used to retrieve the domain verification status for a certificate request.<ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul>\"
     * @param {String} customerId An identifier for a customer
     * @param {String} certificateId Certificate id to lookup
     * @param {module:api/V2Api~getDomainInformationByCertificateIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DomainVerificationSummary>}
     */
    getDomainInformationByCertificateId(customerId, certificateId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getDomainInformationByCertificateId");
      }
      // verify the required parameter 'certificateId' is set
      if (certificateId === undefined || certificateId === null) {
        throw new Error("Missing the required parameter 'certificateId' when calling getDomainInformationByCertificateId");
      }

      let pathParams = {
        'customerId': customerId,
        'certificateId': certificateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = [DomainVerificationSummary];
      return this.apiClient.callApi(
        '/v2/customers/{customerId}/certificates/{certificateId}/domainVerifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
